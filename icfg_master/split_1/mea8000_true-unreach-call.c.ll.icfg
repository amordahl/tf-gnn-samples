[Function: main]
[BB 0x1227560]
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
[Caller:   call void @device_start()]
[Callee: device_start]
  br label %2
Successor: 0x12277a0
[BB 0x12277a0]
[Caller:   %3 = call i32 @__VERIFIER_nondet_int()]
[Callee: __VERIFIER_nondet_int]
  switch i32 %3, label %16 [
    i32 0, label %4
    i32 1, label %7
    i32 2, label %10
    i32 3, label %15
  ]
Successor: 0x12279c0
Successor: 0x1227a10
Successor: 0x1227a60
Successor: 0x1227ab0
Successor: 0x1227b00
[BB 0x12279c0]
  br label %2
Successor: 0x12277a0
[BB 0x1227a10]
[Caller:   %5 = call i32 @__VERIFIER_nondet_int()]
[Callee: __VERIFIER_nondet_int]
[Caller:   %6 = call zeroext i8 @read(i32 %5)]
[Callee: read]
  br label %16
Successor: 0x12279c0
[BB 0x1227a60]
[Caller:   %8 = call i32 @__VERIFIER_nondet_int()]
[Callee: __VERIFIER_nondet_int]
[Caller:   %9 = call zeroext i8 @__VERIFIER_nondet_unsigned_char()]
[Callee: __VERIFIER_nondet_unsigned_char]
[Caller:   call void @write(i32 %8, i8 zeroext %9)]
[Callee: write]
  br label %16
Successor: 0x12279c0
[BB 0x1227ab0]
  %11 = load i32, i32* @timer_enabled, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %14
Successor: 0x12284c0
Successor: 0x1228510
[BB 0x1227b00]
[Caller:   call void @device_reset()]
[Callee: device_reset]
  br label %16
Successor: 0x12279c0
[BB 0x12284c0]
[Caller:   call void @timer_expire()]
[Callee: timer_expire]
  br label %14
Successor: 0x1228510
[BB 0x1228510]
  br label %16
Successor: 0x12279c0
[Function: device_start]
[BB 0x120c6b0]
[Caller:   call void @init_tables()]
[Callee: init_tables]
  ret void
[Function: __VERIFIER_nondet_int]
[Function: __VERIFIER_nondet_int]
[Function: read]
[BB 0x1223150]
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %9 [
    i32 0, label %5
    i32 1, label %5
  ]
Successor: 0x1223400
Successor: 0x1223450
Successor: 0x1223450
[BB 0x1223400]
  store i8 0, i8* %2, align 1
  br label %10
Successor: 0x12233b0
[BB 0x1223450]
[Caller:   %6 = call i32 @accept_byte()]
[Callee: accept_byte]
  %7 = shl i32 %6, 7
  %8 = trunc i32 %7 to i8
  store i8 %8, i8* %2, align 1
  br label %10
Successor: 0x12233b0
[BB 0x12233b0]
  %11 = load i8, i8* %2, align 1
  ret i8 %11
[Function: __VERIFIER_nondet_int]
[Function: __VERIFIER_nondet_unsigned_char]
[Function: write]
[BB 0x1223bf0]
  %3 = alloca i32, align 4
  %4 = alloca i8, align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8 %1, i8* %4, align 1
  %7 = load i32, i32* %3, align 4
  switch i32 %7, label %74 [
    i32 0, label %8
    i32 1, label %44
  ]
Successor: 0x1224010
Successor: 0x1224060
Successor: 0x12240b0
[BB 0x1224010]
  ret void
[BB 0x1224060]
  %9 = load i32, i32* @m_state, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %16
Successor: 0x1223d50
Successor: 0x12243b0
[BB 0x12240b0]
  %45 = load i8, i8* %4, align 1
  %46 = zext i8 %45 to i32
  %47 = ashr i32 %46, 4
  %48 = and i32 %47, 1
  store i32 %48, i32* %6, align 4
  %49 = load i8, i8* %4, align 1
  %50 = zext i8 %49 to i32
  %51 = and i32 %50, 8
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %59
Successor: 0x1226420
Successor: 0x1226470
[BB 0x1223d50]
  %12 = load i8, i8* %4, align 1
  %13 = zext i8 %12 to i32
  %14 = mul nsw i32 2, %13
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* @m_pitch, align 2
  store i32 1, i32* @m_state, align 4
  store i8 0, i8* @m_bufpos, align 1
  br label %43
Successor: 0x1224840
[BB 0x12243b0]
  %17 = load i8, i8* @m_bufpos, align 1
  %18 = zext i8 %17 to i32
  %19 = icmp eq i32 %18, 4
  br i1 %19, label %20, label %21
Successor: 0x12249e0
Successor: 0x1224a30
[BB 0x1226420]
  %54 = load i8, i8* %4, align 1
  %55 = zext i8 %54 to i32
  %56 = ashr i32 %55, 2
  %57 = and i32 %56, 1
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* @m_cont, align 1
  br label %59
Successor: 0x1226470
[BB 0x1226470]
  %60 = load i8, i8* %4, align 1
  %61 = zext i8 %60 to i32
  %62 = and i32 %61, 2
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %69
Successor: 0x1226ae0
Successor: 0x1226b30
[BB 0x1224840]
[Caller:   call void @update_req()]
[Callee: update_req]
  br label %74
Successor: 0x1224010
[BB 0x12249e0]
  br label %42
Successor: 0x1224b30
[BB 0x1224a30]
  %22 = load i8, i8* %4, align 1
  %23 = load i8, i8* @m_bufpos, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [4 x i8], [4 x i8]* @m_buf, i64 0, i64 %24
  store i8 %22, i8* %25, align 1
  %26 = load i8, i8* @m_bufpos, align 1
  %27 = add i8 %26, 1
  store i8 %27, i8* @m_bufpos, align 1
  %28 = load i8, i8* @m_bufpos, align 1
  %29 = zext i8 %28 to i32
  %30 = icmp eq i32 %29, 4
  br i1 %30, label %31, label %41
Successor: 0x1225190
Successor: 0x12251e0
[BB 0x1226ae0]
  %65 = load i8, i8* %4, align 1
  %66 = zext i8 %65 to i32
  %67 = and i32 %66, 1
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* @m_roe, align 1
  br label %69
Successor: 0x1226b30
[BB 0x1226b30]
  %70 = load i32, i32* %6, align 4
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %73
Successor: 0x1227010
Successor: 0x1227060
[BB 0x1224b30]
  br label %43
Successor: 0x1224840
[BB 0x1225190]
  %32 = load i32, i32* @m_state, align 4
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %41
Successor: 0x1225420
Successor: 0x12251e0
[BB 0x12251e0]
  br label %42
Successor: 0x1224b30
[BB 0x1227010]
[Caller:   call void @stop_frame()]
[Callee: stop_frame]
  br label %73
Successor: 0x1227060
[BB 0x1227060]
[Caller:   call void @update_req()]
[Callee: update_req]
  br label %74
Successor: 0x1224010
[BB 0x1225420]
  %35 = load i16, i16* @m_pitch, align 2
  %36 = zext i16 %35 to i32
  store i32 %36, i32* %5, align 4
  %37 = load i32, i32* %5, align 4
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* @m_last_pitch, align 2
[Caller:   call void @decode_frame()]
[Callee: decode_frame]
[Caller:   call void @shift_frame()]
[Callee: shift_frame]
  %39 = load i32, i32* %5, align 4
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* @m_last_pitch, align 2
  store i16 0, i16* @m_ampl, align 2
[Caller:   call void @start_frame()]
[Callee: start_frame]
  store i32 2, i32* @m_state, align 4
  br label %41
Successor: 0x12251e0
[Function: device_reset]
[BB 0x120ca70]
  %1 = alloca i32, align 4
  store i32 0, i32* @m_phi, align 4
  store i8 0, i8* @m_cont, align 1
  store i8 0, i8* @m_roe, align 1
  store i32 0, i32* @m_state, align 4
[Caller:   call void @update_req()]
[Callee: update_req]
  store i32 0, i32* %1, align 4
  br label %2
Successor: 0x120d040
[BB 0x120d040]
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 4
  br i1 %4, label %5, label %17
Successor: 0x120d280
Successor: 0x120d2d0
[BB 0x120d280]
  %6 = load i32, i32* %1, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %7
  %9 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %8, i32 0, i32 5
  store double 0.000000e+00, double* %9, align 8
  %10 = load i32, i32* %1, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %11
  %13 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %12, i32 0, i32 4
  store double 0.000000e+00, double* %13, align 16
  br label %14
Successor: 0x120d230
[BB 0x120d2d0]
  store i32 0, i32* @timer_enabled, align 4
  ret void
[BB 0x120d230]
  %15 = load i32, i32* %1, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %1, align 4
  br label %2
Successor: 0x120d040
[Function: timer_expire]
[BB 0x121ffa0]
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = load i16, i16* @m_framepos, align 2
  %4 = zext i16 %3 to i32
  %5 = srem i32 %4, 8
  store i32 %5, i32* %1, align 4
  %6 = load i32, i32* %1, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %15, label %8
Successor: 0x1220470
Successor: 0x12204c0
[BB 0x1220470]
  %16 = load i16, i16* @m_lastsample, align 2
  %17 = sext i16 %16 to i32
  %18 = load i32, i32* %1, align 4
  %19 = load i16, i16* @m_sample, align 2
  %20 = sext i16 %19 to i32
  %21 = load i16, i16* @m_lastsample, align 2
  %22 = sext i16 %21 to i32
  %23 = sub nsw i32 %20, %22
  %24 = mul nsw i32 %18, %23
  %25 = sdiv i32 %24, 8
  %26 = add nsw i32 %17, %25
  store i32 %26, i32* %2, align 4
  %27 = load i32, i32* %2, align 4
  %28 = add nsw i32 32768, %27
[Caller:   call void @write_signed16(i32 %28)]
[Callee: write_signed16]
  br label %29
Successor: 0x1220b30
[BB 0x12204c0]
  %9 = load i16, i16* @m_sample, align 2
  store i16 %9, i16* @m_lastsample, align 2
[Caller:   %10 = call i32 @compute_sample()]
[Callee: compute_sample]
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* @m_sample, align 2
  %12 = load i16, i16* @m_lastsample, align 2
  %13 = sext i16 %12 to i32
  %14 = add nsw i32 32768, %13
[Caller:   call void @write_signed16(i32 %14)]
[Callee: write_signed16]
  br label %29
Successor: 0x1220b30
[BB 0x1220b30]
  %30 = load i16, i16* @m_framepos, align 2
  %31 = add i16 %30, 1
  store i16 %31, i16* @m_framepos, align 2
  %32 = load i16, i16* @m_framepos, align 2
  %33 = zext i16 %32 to i32
  %34 = load i16, i16* @m_framelength, align 2
  %35 = zext i16 %34 to i32
  %36 = icmp sge i32 %33, %35
  br i1 %36, label %37, label %58
Successor: 0x1221780
Successor: 0x12217d0
[BB 0x1221780]
[Caller:   call void @shift_frame()]
[Callee: shift_frame]
  %38 = load i8, i8* @m_bufpos, align 1
  %39 = zext i8 %38 to i32
  %40 = icmp eq i32 %39, 4
  br i1 %40, label %41, label %42
Successor: 0x1221b10
Successor: 0x1221b60
[BB 0x12217d0]
  br label %59
Successor: 0x1222e50
[BB 0x1221b10]
[Caller:   call void @decode_frame()]
[Callee: decode_frame]
[Caller:   call void @start_frame()]
[Callee: start_frame]
  br label %57
Successor: 0x1221e40
[BB 0x1221b60]
  %43 = load i8, i8* @m_cont, align 1
  %44 = icmp ne i8 %43, 0
  br i1 %44, label %45, label %46
Successor: 0x1222000
Successor: 0x1222050
[BB 0x1222e50]
  ret void
[BB 0x1221e40]
[Caller:   call void @update_req()]
[Callee: update_req]
  br label %59
Successor: 0x1222e50
[BB 0x1222000]
[Caller:   call void @start_frame()]
[Callee: start_frame]
  br label %56
Successor: 0x1222260
[BB 0x1222050]
  %47 = load i32, i32* @m_state, align 4
  %48 = icmp eq i32 %47, 2
  br i1 %48, label %49, label %50
Successor: 0x1222420
Successor: 0x1222470
[BB 0x1222260]
  br label %57
Successor: 0x1221e40
[BB 0x1222420]
  store i16 0, i16* @m_ampl, align 2
[Caller:   call void @start_frame()]
[Callee: start_frame]
  store i32 3, i32* @m_state, align 4
  br label %55
Successor: 0x12227a0
[BB 0x1222470]
  %51 = load i32, i32* @m_state, align 4
  %52 = icmp eq i32 %51, 3
  br i1 %52, label %53, label %54
Successor: 0x1222960
Successor: 0x12229b0
[BB 0x12227a0]
  br label %56
Successor: 0x1222260
[BB 0x1222960]
[Caller:   call void @stop_frame()]
[Callee: stop_frame]
  br label %54
Successor: 0x12229b0
[BB 0x12229b0]
  br label %55
Successor: 0x12227a0
[Function: init_tables]
[BB 0x120ec60]
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  br label %4
Successor: 0x120ee50
[BB 0x120ee50]
  %5 = load i32, i32* %1, align 4
  %6 = icmp slt i32 %5, 3600
  br i1 %6, label %7, label %39
Successor: 0x120f060
Successor: 0x120f0b0
[BB 0x120f060]
  %8 = load i32, i32* %1, align 4
  %9 = sitofp i32 %8 to double
  %10 = fdiv double %9, 8.096000e+03
  store double %10, double* %2, align 8
  %11 = load double, double* %2, align 8
  %12 = fmul double 0x401921FB54442D18, %11
[Caller:   %13 = call double @cos(double %12) #3]
[Callee: cos]
  %14 = fmul double 2.000000e+00, %13
  %15 = fmul double %14, 5.120000e+02
  %16 = fptosi double %15 to i32
  %17 = load i32, i32* %1, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [3600 x i32], [3600 x i32]* @m_cos_table, i64 0, i64 %18
  store i32 %16, i32* %19, align 4
  %20 = load double, double* %2, align 8
  %21 = fmul double 0xC00921FB54442D18, %20
[Caller:   %22 = call double @exp(double %21) #3]
[Callee: exp]
  %23 = fmul double %22, 5.120000e+02
  %24 = fptosi double %23 to i32
  %25 = load i32, i32* %1, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [3600 x i32], [3600 x i32]* @m_exp_table, i64 0, i64 %26
  store i32 %24, i32* %27, align 4
  %28 = load double, double* %2, align 8
  %29 = fmul double 0xC01921FB54442D18, %28
[Caller:   %30 = call double @exp(double %29) #3]
[Callee: exp]
  %31 = fmul double %30, 5.120000e+02
  %32 = fptosi double %31 to i32
  %33 = load i32, i32* %1, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [3600 x i32], [3600 x i32]* @m_exp2_table, i64 0, i64 %34
  store i32 %32, i32* %35, align 4
  br label %36
Successor: 0x12106a0
[BB 0x120f0b0]
  store i32 0, i32* %3, align 4
  br label %40
Successor: 0x1210a30
[BB 0x12106a0]
  %37 = load i32, i32* %1, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %1, align 4
  br label %4
Successor: 0x120ee50
[BB 0x1210a30]
  %41 = load i32, i32* %3, align 4
  %42 = icmp slt i32 %41, 8192
  br i1 %42, label %43, label %53
Successor: 0x1210c20
Successor: 0x1210c70
[BB 0x1210c20]
[Caller:   %44 = call i32 @rand()]
[Callee: rand]
  %45 = srem i32 %44, 1024
  %46 = sub nsw i32 %45, 512
  %47 = load i32, i32* %3, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [8192 x i32], [8192 x i32]* @m_noise_table, i64 0, i64 %48
  store i32 %46, i32* %49, align 4
  br label %50
Successor: 0x12111f0
[BB 0x1210c70]
  ret void
[BB 0x12111f0]
  %51 = load i32, i32* %3, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %3, align 4
  br label %40
Successor: 0x1210a30
[Function: accept_byte]
[BB 0x120de40]
  %1 = load i32, i32* @m_state, align 4
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %15, label %3
Successor: 0x120dfe0
Successor: 0x120e030
[BB 0x120dfe0]
  %16 = phi i1 [ true, %3 ], [ true, %0 ], [ %14, %13 ]
  %17 = zext i1 %16 to i32
  ret i32 %17
[BB 0x120e030]
  %4 = load i32, i32* @m_state, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %15, label %6
Successor: 0x120dfe0
Successor: 0x120e280
[BB 0x120e280]
  %7 = load i32, i32* @m_state, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %13
Successor: 0x120e1a0
Successor: 0x120e510
[BB 0x120e1a0]
  %10 = load i8, i8* @m_bufpos, align 1
  %11 = zext i8 %10 to i32
  %12 = icmp slt i32 %11, 4
  br label %13
Successor: 0x120e510
[BB 0x120e510]
  %14 = phi i1 [ false, %6 ], [ %12, %9 ]
  br label %15
Successor: 0x120dfe0
[Function: update_req]
[BB 0x120eb50]
  ret void
[Function: stop_frame]
[BB 0x121fb60]
  store i32 0, i32* @m_state, align 4
[Caller:   call void @write_signed16(i32 32768)]
[Callee: write_signed16]
  store i32 0, i32* @timer_enabled, align 4
  ret void
[Function: update_req]
[Function: decode_frame]
[BB 0x121b1c0]
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 3), align 1
  %4 = zext i8 %3 to i32
  %5 = ashr i32 %4, 5
  %6 = and i32 %5, 3
  store i32 %6, i32* %1, align 4
  %7 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 3), align 1
  %8 = zext i8 %7 to i32
  %9 = and i32 %8, 31
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [32 x i32], [32 x i32]* @pi_table, i64 0, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = load i32, i32* %1, align 4
  %14 = shl i32 %12, %13
  store i32 %14, i32* %2, align 4
  %15 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 3), align 1
  %16 = zext i8 %15 to i32
  %17 = and i32 %16, 31
  %18 = icmp eq i32 %17, 16
  %19 = zext i1 %18 to i32
  %20 = trunc i32 %19 to i8
  store i8 %20, i8* @m_noise, align 1
  %21 = load i16, i16* @m_last_pitch, align 2
  %22 = zext i16 %21 to i32
  %23 = load i32, i32* %2, align 4
  %24 = add nsw i32 %22, %23
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* @m_pitch, align 2
  %26 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 0), align 1
  %27 = zext i8 %26 to i32
  %28 = ashr i32 %27, 6
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* @bw_table, i64 0, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = sitofp i32 %31 to double
  store double %32, double* getelementptr inbounds ([4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 0, i32 2), align 16
  %33 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 0), align 1
  %34 = zext i8 %33 to i32
  %35 = ashr i32 %34, 4
  %36 = and i32 %35, 3
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [4 x i32], [4 x i32]* @bw_table, i64 0, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = sitofp i32 %39 to double
  store double %40, double* getelementptr inbounds ([4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 1, i32 2), align 16
  %41 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 0), align 1
  %42 = zext i8 %41 to i32
  %43 = ashr i32 %42, 2
  %44 = and i32 %43, 3
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* @bw_table, i64 0, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = sitofp i32 %47 to double
  store double %48, double* getelementptr inbounds ([4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 2, i32 2), align 16
  %49 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 0), align 1
  %50 = zext i8 %49 to i32
  %51 = and i32 %50, 3
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* @bw_table, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = sitofp i32 %54 to double
  store double %55, double* getelementptr inbounds ([4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 3, i32 2), align 16
  %56 = load i32, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @fm4_table, i64 0, i64 0), align 4
  %57 = sitofp i32 %56 to double
  store double %57, double* getelementptr inbounds ([4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 3, i32 0), align 16
  %58 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 1), align 1
  %59 = zext i8 %58 to i32
  %60 = ashr i32 %59, 5
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [8 x i32], [8 x i32]* @fm3_table, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = sitofp i32 %63 to double
  store double %64, double* getelementptr inbounds ([4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 2, i32 0), align 16
  %65 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 1), align 1
  %66 = zext i8 %65 to i32
  %67 = and i32 %66, 31
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [32 x i32], [32 x i32]* @fm2_table, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = sitofp i32 %70 to double
  store double %71, double* getelementptr inbounds ([4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 1, i32 0), align 16
  %72 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 2), align 1
  %73 = zext i8 %72 to i32
  %74 = ashr i32 %73, 3
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [32 x i32], [32 x i32]* @fm1_table, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = sitofp i32 %77 to double
  store double %78, double* getelementptr inbounds ([4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 0, i32 0), align 16
  %79 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 2), align 1
  %80 = zext i8 %79 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 %81, 1
  %83 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @m_buf, i64 0, i64 3), align 1
  %84 = zext i8 %83 to i32
  %85 = ashr i32 %84, 7
  %86 = or i32 %82, %85
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [16 x i32], [16 x i32]* @ampl_table, i64 0, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* @m_ampl, align 2
  %91 = load i32, i32* %1, align 4
  %92 = add nsw i32 %91, 6
  %93 = add nsw i32 %92, 3
  %94 = trunc i32 %93 to i16
  store i16 %94, i16* @m_framelog, align 2
  %95 = load i16, i16* @m_framelog, align 2
  %96 = zext i16 %95 to i32
  %97 = shl i32 1, %96
  %98 = trunc i32 %97 to i16
  store i16 %98, i16* @m_framelength, align 2
  store i8 0, i8* @m_bufpos, align 1
  ret void
[Function: shift_frame]
[BB 0x1219b70]
  %1 = alloca i32, align 4
  %2 = load i16, i16* @m_pitch, align 2
  store i16 %2, i16* @m_last_pitch, align 2
  store i32 0, i32* %1, align 4
  br label %3
Successor: 0x1219e10
[BB 0x1219e10]
  %4 = load i32, i32* %1, align 4
  %5 = icmp slt i32 %4, 4
  br i1 %5, label %6, label %28
Successor: 0x121a020
Successor: 0x121a070
[BB 0x121a020]
  %7 = load i32, i32* %1, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %8
  %10 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %9, i32 0, i32 2
  %11 = load double, double* %10, align 16
  %12 = load i32, i32* %1, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %13
  %15 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %14, i32 0, i32 3
  store double %11, double* %15, align 8
  %16 = load i32, i32* %1, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %17
  %19 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %18, i32 0, i32 0
  %20 = load double, double* %19, align 16
  %21 = load i32, i32* %1, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %22
  %24 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %23, i32 0, i32 1
  store double %20, double* %24, align 8
  br label %25
Successor: 0x1219f40
[BB 0x121a070]
  %29 = load i16, i16* @m_ampl, align 2
  store i16 %29, i16* @m_last_ampl, align 2
  ret void
[BB 0x1219f40]
  %26 = load i32, i32* %1, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %1, align 4
  br label %3
Successor: 0x1219e10
[Function: start_frame]
[BB 0x121f840]
  store i16 0, i16* @m_framepos, align 2
  store i32 1, i32* @timer_enabled, align 4
  ret void
[Function: update_req]
[Function: write_signed16]
[BB 0x120bdf0]
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp sge i32 %3, 0
  br i1 %4, label %5, label %8
Successor: 0x120c0c0
Successor: 0x120c110
[BB 0x120c0c0]
  %6 = load i32, i32* %2, align 4
  %7 = icmp sle i32 %6, 65535
  br label %8
Successor: 0x120c110
[BB 0x120c110]
  %9 = phi i1 [ false, %1 ], [ %7, %5 ]
  %10 = zext i1 %9 to i32
[Caller:   call void @__VERIFIER_assert(i32 %10)]
[Callee: __VERIFIER_assert]
  ret void
[Function: compute_sample]
[BB 0x12178c0]
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = load i16, i16* @m_last_ampl, align 2
  %5 = zext i16 %4 to i32
  %6 = sitofp i32 %5 to double
  %7 = fmul double 8.000000e+00, %6
  %8 = load i16, i16* @m_ampl, align 2
  %9 = zext i16 %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fmul double 8.000000e+00, %10
[Caller:   %12 = call double @interp(double %7, double %11)]
[Callee: interp]
  store double %12, double* %2, align 8
  %13 = load i8, i8* @m_noise, align 1
  %14 = icmp ne i8 %13, 0
  br i1 %14, label %15, label %17
Successor: 0x12181e0
Successor: 0x1218270
[BB 0x12181e0]
[Caller:   %16 = call double @noise_gen()]
[Callee: noise_gen]
  store double %16, double* %1, align 8
  br label %19
Successor: 0x1218480
[BB 0x1218270]
[Caller:   %18 = call double @freq_gen()]
[Callee: freq_gen]
  store double %18, double* %1, align 8
  br label %19
Successor: 0x1218480
[BB 0x1218480]
  %20 = load double, double* %2, align 8
  %21 = load double, double* %1, align 8
  %22 = fmul double %21, %20
  store double %22, double* %1, align 8
  store i32 0, i32* %3, align 4
  br label %23
Successor: 0x12189a0
[BB 0x12189a0]
  %24 = load i32, i32* %3, align 4
  %25 = icmp slt i32 %24, 4
  br i1 %25, label %26, label %33
Successor: 0x1218b60
Successor: 0x1218bb0
[BB 0x1218b60]
  %27 = load i32, i32* %3, align 4
  %28 = load double, double* %1, align 8
[Caller:   %29 = call double @filter_step(i32 %27, double %28)]
[Callee: filter_step]
  store double %29, double* %1, align 8
  br label %30
Successor: 0x1218f30
[BB 0x1218bb0]
  %34 = load double, double* %1, align 8
  %35 = fcmp ogt double %34, 3.276700e+04
  br i1 %35, label %36, label %37
Successor: 0x12192f0
Successor: 0x1219340
[BB 0x1218f30]
  %31 = load i32, i32* %3, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %3, align 4
  br label %23
Successor: 0x12189a0
[BB 0x12192f0]
  store double 3.276700e+04, double* %1, align 8
  br label %37
Successor: 0x1219340
[BB 0x1219340]
  %38 = load double, double* %1, align 8
  %39 = fcmp olt double %38, -3.276700e+04
  br i1 %39, label %40, label %41
Successor: 0x1219680
Successor: 0x12196d0
[BB 0x1219680]
  store double -3.276700e+04, double* %1, align 8
  br label %41
Successor: 0x12196d0
[BB 0x12196d0]
  %42 = load double, double* %1, align 8
  %43 = fptosi double %42 to i32
  ret i32 %43
[Function: write_signed16]
[Function: shift_frame]
[Function: decode_frame]
[Function: start_frame]
[Function: update_req]
[Function: start_frame]
[Function: start_frame]
[Function: stop_frame]
[Function: cos]
[BB 0x1209cb0]
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  store double %0, double* %2, align 8
[Caller:   %4 = call double (...) @__VERIFIER_nondet_double()]
[Callee: __VERIFIER_nondet_double]
  store double %4, double* %3, align 8
  %5 = load double, double* %3, align 8
  %6 = fcmp oge double %5, -1.100000e+00
  br i1 %6, label %7, label %10
Successor: 0x120a150
Successor: 0x120a1e0
[BB 0x120a150]
  %8 = load double, double* %3, align 8
  %9 = fcmp ole double %8, 1.100000e+00
  br label %10
Successor: 0x120a1e0
[BB 0x120a1e0]
  %11 = phi i1 [ false, %1 ], [ %9, %7 ]
  %12 = zext i1 %11 to i32
[Caller:   call void @__VERIFIER_assume(i32 %12)]
[Callee: __VERIFIER_assume]
  %13 = load double, double* %3, align 8
  ret double %13
[Function: exp]
[BB 0x120aab0]
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  store double %0, double* %2, align 8
[Caller:   %4 = call double (...) @__VERIFIER_nondet_double()]
[Callee: __VERIFIER_nondet_double]
  store double %4, double* %3, align 8
  %5 = load double, double* %3, align 8
  %6 = fcmp oge double %5, 0.000000e+00
  %7 = zext i1 %6 to i32
[Caller:   call void @__VERIFIER_assume(i32 %7)]
[Callee: __VERIFIER_assume]
  %8 = load double, double* %2, align 8
  %9 = fcmp ole double %8, 0.000000e+00
  br i1 %9, label %10, label %14
Successor: 0x120add0
Successor: 0x120b2e0
[BB 0x120add0]
  %11 = load double, double* %3, align 8
  %12 = fcmp ole double %11, 1.000000e+00
  %13 = zext i1 %12 to i32
[Caller:   call void @__VERIFIER_assume(i32 %13)]
[Callee: __VERIFIER_assume]
  br label %14
Successor: 0x120b2e0
[BB 0x120b2e0]
  %15 = load double, double* %3, align 8
  ret double %15
[Function: exp]
[Function: rand]
[BB 0x120b840]
  %1 = alloca i32, align 4
[Caller:   %2 = call i32 @__VERIFIER_nondet_int()]
[Callee: __VERIFIER_nondet_int]
  store i32 %2, i32* %1, align 4
  %3 = load i32, i32* %1, align 4
  ret i32 %3
[Function: write_signed16]
[Function: __VERIFIER_assert]
[BB 0x1207430]
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %7, label %5
Successor: 0x12075f0
Successor: 0x1207640
[BB 0x12075f0]
  ret void
[BB 0x1207640]
  br label %6
Successor: 0x1207780
[BB 0x1207780]
[Caller:   call void (...) @__VERIFIER_error() #3]
[Callee: __VERIFIER_error]
  unreachable
[Function: interp]
[BB 0x1211670]
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  store double %0, double* %3, align 8
  store double %1, double* %4, align 8
  %5 = load i16, i16* @m_framelength, align 2
  %6 = zext i16 %5 to i32
  %7 = icmp ne i32 %6, 0
  %8 = zext i1 %7 to i32
[Caller:   call void @__VERIFIER_assert(i32 %8)]
[Callee: __VERIFIER_assert]
  %9 = load double, double* %3, align 8
  %10 = load double, double* %4, align 8
  %11 = load double, double* %3, align 8
  %12 = fsub double %10, %11
  %13 = load i16, i16* @m_framepos, align 2
  %14 = zext i16 %13 to i32
  %15 = sitofp i32 %14 to double
  %16 = fmul double %12, %15
  %17 = load i16, i16* @m_framelength, align 2
  %18 = zext i16 %17 to i32
  %19 = sitofp i32 %18 to double
  %20 = fdiv double %16, %19
  %21 = fadd double %9, %20
  ret double %21
[Function: noise_gen]
[BB 0x1215820]
  %1 = load i32, i32* @m_phi, align 4
  %2 = add i32 %1, 1
  store i32 %2, i32* @m_phi, align 4
  %3 = load i32, i32* @m_phi, align 4
  %4 = urem i32 %3, 8192
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [8192 x i32], [8192 x i32]* @m_noise_table, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to double
  %9 = fdiv double %8, 5.120000e+02
  ret double %9
[Function: freq_gen]
[BB 0x1216780]
  %1 = alloca i32, align 4
  %2 = load i16, i16* @m_last_pitch, align 2
  %3 = uitofp i16 %2 to double
  %4 = load i16, i16* @m_pitch, align 2
  %5 = uitofp i16 %4 to double
[Caller:   %6 = call double @interp(double %3, double %5)]
[Callee: interp]
  %7 = fptosi double %6 to i32
  store i32 %7, i32* %1, align 4
  %8 = load i32, i32* %1, align 4
  %9 = load i32, i32* @m_phi, align 4
  %10 = add i32 %9, %8
  store i32 %10, i32* @m_phi, align 4
  %11 = load i32, i32* @m_phi, align 4
  %12 = urem i32 %11, 8096
  %13 = uitofp i32 %12 to double
  %14 = fdiv double %13, 4.048000e+03
  %15 = fsub double %14, 1.000000e+00
  ret double %15
[Function: filter_step]
[BB 0x1212390]
  %3 = alloca i32, align 4
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  store i32 %0, i32* %3, align 4
  store double %1, double* %4, align 8
  %10 = load i32, i32* %3, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %11
  %13 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %12, i32 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %16
  %18 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %17, i32 0, i32 0
  %19 = load double, double* %18, align 16
[Caller:   %20 = call double @interp(double %14, double %19)]
[Callee: interp]
  store double %20, double* %5, align 8
  %21 = load i32, i32* %3, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %22
  %24 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %23, i32 0, i32 3
  %25 = load double, double* %24, align 8
  %26 = load i32, i32* %3, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %27
  %29 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %28, i32 0, i32 2
  %30 = load double, double* %29, align 16
[Caller:   %31 = call double @interp(double %25, double %30)]
[Callee: interp]
  store double %31, double* %6, align 8
  %32 = load double, double* %5, align 8
  %33 = fmul double 0x401921FB54442D18, %32
  %34 = fdiv double %33, 8.096000e+03
[Caller:   %35 = call double @cos(double %34) #3]
[Callee: cos]
  %36 = fmul double 2.000000e+00, %35
  store double %36, double* %7, align 8
  %37 = load double, double* %6, align 8
  %38 = fmul double 0xC00921FB54442D18, %37
  %39 = fdiv double %38, 8.096000e+03
[Caller:   %40 = call double @exp(double %39) #3]
[Callee: exp]
  %41 = fsub double -0.000000e+00, %40
  store double %41, double* %8, align 8
  %42 = load double, double* %4, align 8
  %43 = load double, double* %8, align 8
  %44 = load double, double* %7, align 8
  %45 = load i32, i32* %3, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %46
  %48 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %47, i32 0, i32 4
  %49 = load double, double* %48, align 16
  %50 = fmul double %44, %49
  %51 = load double, double* %8, align 8
  %52 = load i32, i32* %3, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %53
  %55 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %54, i32 0, i32 5
  %56 = load double, double* %55, align 8
  %57 = fmul double %51, %56
  %58 = fadd double %50, %57
  %59 = fmul double %43, %58
  %60 = fsub double %42, %59
  store double %60, double* %9, align 8
  %61 = load i32, i32* %3, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %62
  %64 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %63, i32 0, i32 4
  %65 = load double, double* %64, align 16
  %66 = load i32, i32* %3, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %67
  %69 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %68, i32 0, i32 5
  store double %65, double* %69, align 8
  %70 = load double, double* %9, align 8
  %71 = load i32, i32* %3, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [4 x %struct.filter_t], [4 x %struct.filter_t]* @m_f, i64 0, i64 %72
  %74 = getelementptr inbounds %struct.filter_t, %struct.filter_t* %73, i32 0, i32 4
  store double %70, double* %74, align 16
  %75 = load double, double* %9, align 8
  ret double %75
[Function: __VERIFIER_nondet_double]
[Function: __VERIFIER_assume]
[Function: __VERIFIER_nondet_double]
[Function: __VERIFIER_assume]
[Function: __VERIFIER_assume]
[Function: __VERIFIER_nondet_int]
[Function: __VERIFIER_error]
[Function: __VERIFIER_assert]
[Function: interp]
[Function: interp]
[Function: interp]
[Function: cos]
[Function: exp]
