TranslationUnitDecl 0x561fe88284d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x561fe8828d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x561fe8828a70 '__int128'
|-TypedefDecl 0x561fe8828e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x561fe8828a90 'unsigned __int128'
|-TypedefDecl 0x561fe8829110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x561fe8828ee0 'struct __NSConstantString_tag'
|   `-Record 0x561fe8828e60 '__NSConstantString_tag'
|-TypedefDecl 0x561fe88291b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x561fe8829170 'char *'
|   `-BuiltinType 0x561fe8828570 'char'
|-TypedefDecl 0x561fe8868460 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x561fe8829450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x561fe8829290 'struct __va_list_tag'
|     `-Record 0x561fe8829210 '__va_list_tag'
|-FunctionDecl 0x561fe8868518 <recursive-simple/fibo_2calls_10_true-unreach-call.c:1:1, col:34> col:12 __VERIFIER_nondet_int 'int ()' extern
|-FunctionDecl 0x561fe8868650 <line:2:1, col:30> col:13 used __VERIFIER_error 'void ()' extern
|-FunctionDecl 0x561fe88687d8 <line:4:1, col:16> col:5 used fibo1 'int (int)'
| `-ParmVarDecl 0x561fe8868708 <col:11, col:15> col:15 n 'int'
|-FunctionDecl 0x561fe8868930 <line:5:1, col:16> col:5 used fibo2 'int (int)'
| `-ParmVarDecl 0x561fe8868898 <col:11, col:15> col:15 n 'int'
|-FunctionDecl 0x561fe8868a88 prev 0x561fe88687d8 <line:7:1, line:15:1> line:7:5 used fibo1 'int (int)'
| |-ParmVarDecl 0x561fe88689f0 <col:11, col:15> col:15 used n 'int'
| `-CompoundStmt 0x561fe8868f30 <col:18, line:15:1>
|   `-IfStmt 0x561fe8868f08 <line:8:5, line:14:5> has_else
|     |-BinaryOperator 0x561fe8868b88 <line:8:9, col:13> 'int' '<'
|     | |-ImplicitCastExpr 0x561fe8868b70 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x561fe8868b30 <col:9> 'int' lvalue ParmVar 0x561fe88689f0 'n' 'int'
|     | `-IntegerLiteral 0x561fe8868b50 <col:13> 'int' 1
|     |-CompoundStmt 0x561fe8868bd8 <col:16, line:10:5>
|     | `-ReturnStmt 0x561fe8868bc8 <line:9:9, col:16>
|     |   `-IntegerLiteral 0x561fe8868ba8 <col:16> 'int' 0
|     `-IfStmt 0x561fe8868ee0 <line:10:12, line:14:5> has_else
|       |-BinaryOperator 0x561fe8868c48 <line:10:16, col:21> 'int' '=='
|       | |-ImplicitCastExpr 0x561fe8868c30 <col:16> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x561fe8868bf0 <col:16> 'int' lvalue ParmVar 0x561fe88689f0 'n' 'int'
|       | `-IntegerLiteral 0x561fe8868c10 <col:21> 'int' 1
|       |-CompoundStmt 0x561fe8868c98 <col:24, line:12:5>
|       | `-ReturnStmt 0x561fe8868c88 <line:11:9, col:16>
|       |   `-IntegerLiteral 0x561fe8868c68 <col:16> 'int' 1
|       `-CompoundStmt 0x561fe8868ec8 <line:12:12, line:14:5>
|         `-ReturnStmt 0x561fe8868eb8 <line:13:9, col:38>
|           `-BinaryOperator 0x561fe8868e98 <col:16, col:38> 'int' '+'
|             |-CallExpr 0x561fe8868d98 <col:16, col:25> 'int'
|             | |-ImplicitCastExpr 0x561fe8868d80 <col:16> 'int (*)(int)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x561fe8868cb0 <col:16> 'int (int)' Function 0x561fe8868930 'fibo2' 'int (int)'
|             | `-BinaryOperator 0x561fe8868d28 <col:22, col:24> 'int' '-'
|             |   |-ImplicitCastExpr 0x561fe8868d10 <col:22> 'int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x561fe8868cd0 <col:22> 'int' lvalue ParmVar 0x561fe88689f0 'n' 'int'
|             |   `-IntegerLiteral 0x561fe8868cf0 <col:24> 'int' 1
|             `-CallExpr 0x561fe8868e70 <col:29, col:38> 'int'
|               |-ImplicitCastExpr 0x561fe8868e58 <col:29> 'int (*)(int)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561fe8868dc0 <col:29> 'int (int)' Function 0x561fe8868930 'fibo2' 'int (int)'
|               `-BinaryOperator 0x561fe8868e38 <col:35, col:37> 'int' '-'
|                 |-ImplicitCastExpr 0x561fe8868e20 <col:35> 'int' <LValueToRValue>
|                 | `-DeclRefExpr 0x561fe8868de0 <col:35> 'int' lvalue ParmVar 0x561fe88689f0 'n' 'int'
|                 `-IntegerLiteral 0x561fe8868e00 <col:37> 'int' 2
|-FunctionDecl 0x561fe8868ff8 prev 0x561fe8868930 <line:17:1, line:25:1> line:17:5 used fibo2 'int (int)'
| |-ParmVarDecl 0x561fe8868f60 <col:11, col:15> col:15 used n 'int'
| `-CompoundStmt 0x561fe888b9a8 <col:18, line:25:1>
|   `-IfStmt 0x561fe888b980 <line:18:5, line:24:5> has_else
|     |-BinaryOperator 0x561fe88690f8 <line:18:9, col:13> 'int' '<'
|     | |-ImplicitCastExpr 0x561fe88690e0 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x561fe88690a0 <col:9> 'int' lvalue ParmVar 0x561fe8868f60 'n' 'int'
|     | `-IntegerLiteral 0x561fe88690c0 <col:13> 'int' 1
|     |-CompoundStmt 0x561fe8869148 <col:16, line:20:5>
|     | `-ReturnStmt 0x561fe8869138 <line:19:9, col:16>
|     |   `-IntegerLiteral 0x561fe8869118 <col:16> 'int' 0
|     `-IfStmt 0x561fe8869418 <line:20:12, line:24:5> has_else
|       |-BinaryOperator 0x561fe88691b8 <line:20:16, col:21> 'int' '=='
|       | |-ImplicitCastExpr 0x561fe88691a0 <col:16> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x561fe8869160 <col:16> 'int' lvalue ParmVar 0x561fe8868f60 'n' 'int'
|       | `-IntegerLiteral 0x561fe8869180 <col:21> 'int' 1
|       |-CompoundStmt 0x561fe8869208 <col:24, line:22:5>
|       | `-ReturnStmt 0x561fe88691f8 <line:21:9, col:16>
|       |   `-IntegerLiteral 0x561fe88691d8 <col:16> 'int' 1
|       `-CompoundStmt 0x561fe8869400 <line:22:12, line:24:5>
|         `-ReturnStmt 0x561fe88693f0 <line:23:9, col:38>
|           `-BinaryOperator 0x561fe88693d0 <col:16, col:38> 'int' '+'
|             |-CallExpr 0x561fe88692d0 <col:16, col:25> 'int'
|             | |-ImplicitCastExpr 0x561fe88692b8 <col:16> 'int (*)(int)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x561fe8869220 <col:16> 'int (int)' Function 0x561fe8868a88 'fibo1' 'int (int)'
|             | `-BinaryOperator 0x561fe8869298 <col:22, col:24> 'int' '-'
|             |   |-ImplicitCastExpr 0x561fe8869280 <col:22> 'int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x561fe8869240 <col:22> 'int' lvalue ParmVar 0x561fe8868f60 'n' 'int'
|             |   `-IntegerLiteral 0x561fe8869260 <col:24> 'int' 1
|             `-CallExpr 0x561fe88693a8 <col:29, col:38> 'int'
|               |-ImplicitCastExpr 0x561fe8869390 <col:29> 'int (*)(int)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561fe88692f8 <col:29> 'int (int)' Function 0x561fe8868a88 'fibo1' 'int (int)'
|               `-BinaryOperator 0x561fe8869370 <col:35, col:37> 'int' '-'
|                 |-ImplicitCastExpr 0x561fe8869358 <col:35> 'int' <LValueToRValue>
|                 | `-DeclRefExpr 0x561fe8869318 <col:35> 'int' lvalue ParmVar 0x561fe8868f60 'n' 'int'
|                 `-IntegerLiteral 0x561fe8869338 <col:37> 'int' 2
`-FunctionDecl 0x561fe888ba98 <line:35:1, line:42:1> line:35:5 main 'int (void)'
  `-CompoundStmt 0x561fe888bf20 <col:16, line:42:1>
    |-DeclStmt 0x561fe888bc10 <line:36:5, col:15>
    | `-VarDecl 0x561fe888bb88 <col:5, col:13> col:9 used x 'int' cinit
    |   `-IntegerLiteral 0x561fe888bbf0 <col:13> 'int' 10
    |-DeclStmt 0x561fe888bd40 <line:37:5, col:26>
    | `-VarDecl 0x561fe888bc40 <col:5, col:25> col:9 used result 'int' cinit
    |   `-CallExpr 0x561fe888bd00 <col:18, col:25> 'int'
    |     |-ImplicitCastExpr 0x561fe888bce8 <col:18> 'int (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x561fe888bca8 <col:18> 'int (int)' Function 0x561fe8868a88 'fibo1' 'int (int)'
    |     `-ImplicitCastExpr 0x561fe888bd28 <col:24> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x561fe888bcc8 <col:24> 'int' lvalue Var 0x561fe888bb88 'x' 'int'
    |-IfStmt 0x561fe888bed8 <line:38:5, line:40:5>
    | |-BinaryOperator 0x561fe888bdb0 <line:38:9, col:19> 'int' '!='
    | | |-ImplicitCastExpr 0x561fe888bd98 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x561fe888bd58 <col:9> 'int' lvalue Var 0x561fe888bc40 'result' 'int'
    | | `-IntegerLiteral 0x561fe888bd78 <col:19> 'int' 55
    | `-CompoundStmt 0x561fe888bec0 <col:23, line:40:5>
    |   `-LabelStmt 0x561fe888bea8 <line:39:9, col:33> 'ERROR'
    |     `-CallExpr 0x561fe888be38 <col:16, col:33> 'void'
    |       `-ImplicitCastExpr 0x561fe888be20 <col:16> 'void (*)()' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x561fe888bdd0 <col:16> 'void ()' Function 0x561fe8868650 '__VERIFIER_error' 'void ()'
    `-ReturnStmt 0x561fe888bf10 <line:41:5, col:12>
      `-IntegerLiteral 0x561fe888bef0 <col:12> 'int' 0
