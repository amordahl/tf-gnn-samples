TranslationUnitDecl 0x557099731538 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x557099731df8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x557099731ad0 '__int128'
|-TypedefDecl 0x557099731e68 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x557099731af0 'unsigned __int128'
|-TypedefDecl 0x557099732170 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x557099731f40 'struct __NSConstantString_tag'
|   `-Record 0x557099731ec0 '__NSConstantString_tag'
|-TypedefDecl 0x557099732218 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5570997321d0 'char *'
|   `-BuiltinType 0x5570997315d0 'char'
|-TypedefDecl 0x557099771670 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5570997324b0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5570997322f0 'struct __va_list_tag'
|     `-Record 0x557099732270 '__va_list_tag'
|-FunctionDecl 0x557099771750 <float-benchs/sqrt_Householder_interval_true-unreach-call.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x557099771898 <line:13:1, col:40> col:15 used __VERIFIER_nondet_double 'double ()' extern
|-FunctionDecl 0x557099771a20 <line:14:1, col:45> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x557099771950 <col:31, col:35> col:35 expression 'int'
|-FunctionDecl 0x557099771b70 <line:15:1, col:88> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x557099771ae0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x557099771dc0 <col:34, col:88>
|   |-IfStmt 0x557099771d98 <col:36, col:78>
|   | |-UnaryOperator 0x557099771c70 <col:40, col:46> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x557099771c58 <col:41, col:46> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x557099771c38 <col:41, col:46> 'int' lvalue
|   | |     `-DeclRefExpr 0x557099771c18 <col:42> 'int' lvalue ParmVar 0x557099771ae0 'cond' 'int'
|   | `-CompoundStmt 0x557099771d80 <col:49, col:78>
|   |   `-LabelStmt 0x557099771d68 <col:51, col:75> 'ERROR'
|   |     `-CallExpr 0x557099771cf8 <col:58, col:75> 'void'
|   |       `-ImplicitCastExpr 0x557099771ce0 <col:58> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x557099771c88 <col:58> 'void () __attribute__((noreturn))' Function 0x557099771750 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x557099771db0 <col:80>
|-VarDecl 0x557099771df8 <line:17:1, col:15> col:8 used _EPS 'double' cinit
| `-FloatingLiteral 0x557099771e60 <col:15> 'double' 1.000000e-06
|-FunctionDecl 0x557099771f68 <line:19:1, line:40:1> line:19:8 used SqrtR 'double (double)'
| |-ParmVarDecl 0x557099771e98 <col:14, col:21> col:21 used Input 'double'
| `-CompoundStmt 0x557099797820 <line:20:1, line:40:1>
|   |-DeclStmt 0x5570997722c0 <line:21:3, col:38>
|   | |-VarDecl 0x557099772028 <col:3, col:10> col:10 used xn 'double'
|   | |-VarDecl 0x5570997720a8 <col:3, col:14> col:14 used xnp1 'double'
|   | |-VarDecl 0x557099772128 <col:3, col:20> col:20 used residu 'double'
|   | |-VarDecl 0x5570997721a8 <col:3, col:28> col:28 used lsup 'double'
|   | `-VarDecl 0x557099772228 <col:3, col:34> col:34 used linf 'double'
|   |-DeclStmt 0x5570997723f0 <line:22:3, col:14>
|   | |-VarDecl 0x5570997722f0 <col:3, col:7> col:7 used i 'int'
|   | `-VarDecl 0x557099772370 <col:3, col:10> col:10 used cond 'int'
|   |-IfStmt 0x557099772598 <line:23:3, col:45> has_else
|   | |-BinaryOperator 0x557099772460 <col:7, col:16> 'int' '<='
|   | | |-ImplicitCastExpr 0x557099772448 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x557099772408 <col:7> 'double' lvalue ParmVar 0x557099771e98 'Input' 'double'
|   | | `-FloatingLiteral 0x557099772428 <col:16> 'double' 1.000000e+00
|   | |-BinaryOperator 0x5570997724c0 <col:21, col:26> 'double' '='
|   | | |-DeclRefExpr 0x557099772480 <col:21> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   | | `-FloatingLiteral 0x5570997724a0 <col:26> 'double' 1.000000e+00
|   | `-BinaryOperator 0x557099772578 <col:36, col:45> 'double' '='
|   |   |-DeclRefExpr 0x5570997724e0 <col:36> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   `-BinaryOperator 0x557099772558 <col:41, col:45> 'double' '/'
|   |     |-FloatingLiteral 0x557099772500 <col:41> 'double' 1.000000e+00
|   |     `-ImplicitCastExpr 0x557099772540 <col:45> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x557099772520 <col:45> 'double' lvalue ParmVar 0x557099771e98 'Input' 'double'
|   |-BinaryOperator 0x557099772618 <line:24:3, col:10> 'double' '='
|   | |-DeclRefExpr 0x5570997725c0 <col:3> 'double' lvalue Var 0x5570997720a8 'xnp1' 'double'
|   | `-ImplicitCastExpr 0x557099772600 <col:10> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x5570997725e0 <col:10> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |-BinaryOperator 0x557099796928 <line:25:3, col:29> 'double' '='
|   | |-DeclRefExpr 0x557099772638 <col:3> 'double' lvalue Var 0x557099772128 'residu' 'double'
|   | `-BinaryOperator 0x557099796908 <col:12, col:29> 'double' '*'
|   |   |-BinaryOperator 0x557099796838 <col:12, col:16> 'double' '*'
|   |   | |-FloatingLiteral 0x5570997967e0 <col:12> 'double' 2.000000e+00
|   |   | `-ImplicitCastExpr 0x557099796820 <col:16> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x557099796800 <col:16> 'double' lvalue Var 0x557099771df8 '_EPS' 'double'
|   |   `-ParenExpr 0x5570997968e8 <col:21, col:29> 'double'
|   |     `-BinaryOperator 0x5570997968c8 <col:22, col:25> 'double' '+'
|   |       |-ImplicitCastExpr 0x557099796898 <col:22> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x557099796858 <col:22> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |       `-ImplicitCastExpr 0x5570997968b0 <col:25> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x557099796878 <col:25> 'double' lvalue Var 0x5570997720a8 'xnp1' 'double'
|   |-BinaryOperator 0x557099796a70 <line:26:3, col:25> 'double' '='
|   | |-DeclRefExpr 0x557099796948 <col:3> 'double' lvalue Var 0x5570997721a8 'lsup' 'double'
|   | `-BinaryOperator 0x557099796a50 <col:10, col:25> 'double' '*'
|   |   |-ImplicitCastExpr 0x557099796a38 <col:10> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x557099796968 <col:10> 'double' lvalue Var 0x557099771df8 '_EPS' 'double'
|   |   `-ParenExpr 0x557099796a18 <col:17, col:25> 'double'
|   |     `-BinaryOperator 0x5570997969f8 <col:18, col:21> 'double' '+'
|   |       |-ImplicitCastExpr 0x5570997969c8 <col:18> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x557099796988 <col:18> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |       `-ImplicitCastExpr 0x5570997969e0 <col:21> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x5570997969a8 <col:21> 'double' lvalue Var 0x5570997720a8 'xnp1' 'double'
|   |-BinaryOperator 0x557099796b00 <line:27:3, col:11> 'double' '='
|   | |-DeclRefExpr 0x557099796a90 <col:3> 'double' lvalue Var 0x557099772228 'linf' 'double'
|   | `-UnaryOperator 0x557099796ae8 <col:10, col:11> 'double' prefix '-'
|   |   `-ImplicitCastExpr 0x557099796ad0 <col:11> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x557099796ab0 <col:11> 'double' lvalue Var 0x5570997721a8 'lsup' 'double'
|   |-BinaryOperator 0x557099796ce0 <line:28:3, col:45> 'int' '='
|   | |-DeclRefExpr 0x557099796b20 <col:3> 'int' lvalue Var 0x557099772370 'cond' 'int'
|   | `-ParenExpr 0x557099796cc0 <col:10, col:45> 'int'
|   |   `-BinaryOperator 0x557099796ca0 <col:11, col:44> 'int' '||'
|   |     |-ParenExpr 0x557099796bd0 <col:11, col:25> 'int'
|   |     | `-BinaryOperator 0x557099796bb0 <col:12, col:21> 'int' '>'
|   |     |   |-ImplicitCastExpr 0x557099796b80 <col:12> 'double' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x557099796b40 <col:12> 'double' lvalue Var 0x557099772128 'residu' 'double'
|   |     |   `-ImplicitCastExpr 0x557099796b98 <col:21> 'double' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x557099796b60 <col:21> 'double' lvalue Var 0x5570997721a8 'lsup' 'double'
|   |     `-ParenExpr 0x557099796c80 <col:30, col:44> 'int'
|   |       `-BinaryOperator 0x557099796c60 <col:31, col:40> 'int' '<'
|   |         |-ImplicitCastExpr 0x557099796c30 <col:31> 'double' <LValueToRValue>
|   |         | `-DeclRefExpr 0x557099796bf0 <col:31> 'double' lvalue Var 0x557099772128 'residu' 'double'
|   |         `-ImplicitCastExpr 0x557099796c48 <col:40> 'double' <LValueToRValue>
|   |           `-DeclRefExpr 0x557099796c10 <col:40> 'double' lvalue Var 0x557099772228 'linf' 'double'
|   |-BinaryOperator 0x557099796d40 <line:29:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x557099796d00 <col:3> 'int' lvalue Var 0x5570997722f0 'i' 'int'
|   | `-IntegerLiteral 0x557099796d20 <col:7> 'int' 0
|   |-WhileStmt 0x557099797758 <line:30:3, line:38:3>
|   | |-ImplicitCastExpr 0x557099796d80 <line:30:10> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x557099796d60 <col:10> 'int' lvalue Var 0x557099772370 'cond' 'int'
|   | `-CompoundStmt 0x557099797710 <col:16, line:38:3>
|   |   |-BinaryOperator 0x557099797158 <line:31:5, col:63> 'double' '='
|   |   | |-DeclRefExpr 0x557099796d98 <col:5> 'double' lvalue Var 0x5570997720a8 'xnp1' 'double'
|   |   | `-BinaryOperator 0x557099797138 <col:12, col:63> 'double' '/'
|   |   |   |-BinaryOperator 0x5570997970f8 <col:12, col:59> 'double' '*'
|   |   |   | |-ImplicitCastExpr 0x5570997970e0 <col:12> 'double' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557099796db8 <col:12> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   |   | `-ParenExpr 0x5570997970c0 <col:17, col:59> 'double'
|   |   |   |   `-BinaryOperator 0x5570997970a0 <col:18, col:58> 'double' '+'
|   |   |   |     |-FloatingLiteral 0x557099796dd8 <col:18> 'double' 1.500000e+01
|   |   |   |     `-BinaryOperator 0x557099797080 <col:24, col:58> 'double' '*'
|   |   |   |       |-BinaryOperator 0x557099796ec0 <col:24, col:33> 'double' '*'
|   |   |   |       | |-BinaryOperator 0x557099796e68 <col:24, col:30> 'double' '*'
|   |   |   |       | | |-ImplicitCastExpr 0x557099796e38 <col:24> 'double' <LValueToRValue>
|   |   |   |       | | | `-DeclRefExpr 0x557099796df8 <col:24> 'double' lvalue ParmVar 0x557099771e98 'Input' 'double'
|   |   |   |       | | `-ImplicitCastExpr 0x557099796e50 <col:30> 'double' <LValueToRValue>
|   |   |   |       | |   `-DeclRefExpr 0x557099796e18 <col:30> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   |   |       | `-ImplicitCastExpr 0x557099796ea8 <col:33> 'double' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x557099796e88 <col:33> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   |   |       `-ParenExpr 0x557099797060 <col:36, col:58> 'double'
|   |   |   |         `-BinaryOperator 0x557099797040 <col:37, col:56> 'double' '+'
|   |   |   |           |-UnaryOperator 0x557099796f00 <col:37, col:38> 'double' prefix '-'
|   |   |   |           | `-FloatingLiteral 0x557099796ee0 <col:38> 'double' 1.000000e+01
|   |   |   |           `-BinaryOperator 0x557099797020 <col:44, col:56> 'double' '*'
|   |   |   |             |-BinaryOperator 0x557099796fc8 <col:44, col:53> 'double' '*'
|   |   |   |             | |-BinaryOperator 0x557099796f70 <col:44, col:47> 'double' '*'
|   |   |   |             | | |-FloatingLiteral 0x557099796f18 <col:44> 'double' 3.000000e+00
|   |   |   |             | | `-ImplicitCastExpr 0x557099796f58 <col:47> 'double' <LValueToRValue>
|   |   |   |             | |   `-DeclRefExpr 0x557099796f38 <col:47> 'double' lvalue ParmVar 0x557099771e98 'Input' 'double'
|   |   |   |             | `-ImplicitCastExpr 0x557099796fb0 <col:53> 'double' <LValueToRValue>
|   |   |   |             |   `-DeclRefExpr 0x557099796f90 <col:53> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   |   |             `-ImplicitCastExpr 0x557099797008 <col:56> 'double' <LValueToRValue>
|   |   |   |               `-DeclRefExpr 0x557099796fe8 <col:56> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   |   `-FloatingLiteral 0x557099797118 <col:63> 'double' 8.000000e+00
|   |   |-BinaryOperator 0x557099797288 <line:32:5, col:26> 'double' '='
|   |   | |-DeclRefExpr 0x557099797178 <col:5> 'double' lvalue Var 0x557099772128 'residu' 'double'
|   |   | `-BinaryOperator 0x557099797268 <col:14, col:26> 'double' '*'
|   |   |   |-FloatingLiteral 0x557099797198 <col:14> 'double' 2.000000e+00
|   |   |   `-ParenExpr 0x557099797248 <col:18, col:26> 'double'
|   |   |     `-BinaryOperator 0x557099797228 <col:19, col:24> 'double' '-'
|   |   |       |-ImplicitCastExpr 0x5570997971f8 <col:19> 'double' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x5570997971b8 <col:19> 'double' lvalue Var 0x5570997720a8 'xnp1' 'double'
|   |   |       `-ImplicitCastExpr 0x557099797210 <col:24> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x5570997971d8 <col:24> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   |-BinaryOperator 0x557099797300 <line:33:5, col:10> 'double' '='
|   |   | |-DeclRefExpr 0x5570997972a8 <col:5> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   | `-ImplicitCastExpr 0x5570997972e8 <col:10> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5570997972c8 <col:10> 'double' lvalue Var 0x5570997720a8 'xnp1' 'double'
|   |   |-BinaryOperator 0x557099797448 <line:34:5, col:27> 'double' '='
|   |   | |-DeclRefExpr 0x557099797320 <col:5> 'double' lvalue Var 0x5570997721a8 'lsup' 'double'
|   |   | `-BinaryOperator 0x557099797428 <col:12, col:27> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x557099797410 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x557099797340 <col:12> 'double' lvalue Var 0x557099771df8 '_EPS' 'double'
|   |   |   `-ParenExpr 0x5570997973f0 <col:19, col:27> 'double'
|   |   |     `-BinaryOperator 0x5570997973d0 <col:20, col:23> 'double' '+'
|   |   |       |-ImplicitCastExpr 0x5570997973a0 <col:20> 'double' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x557099797360 <col:20> 'double' lvalue Var 0x557099772028 'xn' 'double'
|   |   |       `-ImplicitCastExpr 0x5570997973b8 <col:23> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x557099797380 <col:23> 'double' lvalue Var 0x5570997720a8 'xnp1' 'double'
|   |   |-BinaryOperator 0x5570997974d8 <line:35:5, col:13> 'double' '='
|   |   | |-DeclRefExpr 0x557099797468 <col:5> 'double' lvalue Var 0x557099772228 'linf' 'double'
|   |   | `-UnaryOperator 0x5570997974c0 <col:12, col:13> 'double' prefix '-'
|   |   |   `-ImplicitCastExpr 0x5570997974a8 <col:13> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x557099797488 <col:13> 'double' lvalue Var 0x5570997721a8 'lsup' 'double'
|   |   |-BinaryOperator 0x5570997976b8 <line:36:5, col:47> 'int' '='
|   |   | |-DeclRefExpr 0x5570997974f8 <col:5> 'int' lvalue Var 0x557099772370 'cond' 'int'
|   |   | `-ParenExpr 0x557099797698 <col:12, col:47> 'int'
|   |   |   `-BinaryOperator 0x557099797678 <col:13, col:46> 'int' '||'
|   |   |     |-ParenExpr 0x5570997975a8 <col:13, col:27> 'int'
|   |   |     | `-BinaryOperator 0x557099797588 <col:14, col:23> 'int' '>'
|   |   |     |   |-ImplicitCastExpr 0x557099797558 <col:14> 'double' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x557099797518 <col:14> 'double' lvalue Var 0x557099772128 'residu' 'double'
|   |   |     |   `-ImplicitCastExpr 0x557099797570 <col:23> 'double' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x557099797538 <col:23> 'double' lvalue Var 0x5570997721a8 'lsup' 'double'
|   |   |     `-ParenExpr 0x557099797658 <col:32, col:46> 'int'
|   |   |       `-BinaryOperator 0x557099797638 <col:33, col:42> 'int' '<'
|   |   |         |-ImplicitCastExpr 0x557099797608 <col:33> 'double' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x5570997975c8 <col:33> 'double' lvalue Var 0x557099772128 'residu' 'double'
|   |   |         `-ImplicitCastExpr 0x557099797620 <col:42> 'double' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x5570997975e8 <col:42> 'double' lvalue Var 0x557099772228 'linf' 'double'
|   |   `-UnaryOperator 0x5570997976f8 <line:37:5, col:6> 'int' postfix '++'
|   |     `-DeclRefExpr 0x5570997976d8 <col:5> 'int' lvalue Var 0x5570997722f0 'i' 'int'
|   `-ReturnStmt 0x557099797810 <line:39:3, col:16>
|     `-BinaryOperator 0x5570997977f0 <col:10, col:16> 'double' '/'
|       |-FloatingLiteral 0x557099797770 <col:10> 'double' 1.000000e+00
|       `-ImplicitCastExpr 0x5570997977b0 <col:16> 'double' <LValueToRValue>
|         `-DeclRefExpr 0x557099797790 <col:16> 'double' lvalue Var 0x5570997720a8 'xnp1' 'double'
`-FunctionDecl 0x557099797988 <line:42:1, line:53:1> line:42:5 main 'int ()'
  `-CompoundStmt 0x557099798078 <line:43:1, line:53:1>
    |-DeclStmt 0x557099797b40 <line:44:3, col:14>
    | |-VarDecl 0x557099797a40 <col:3, col:10> col:10 used d 'double'
    | `-VarDecl 0x557099797ac0 <col:3, col:13> col:13 used r 'double'
    |-BinaryOperator 0x557099797c08 <line:46:3, col:32> 'double' '='
    | |-DeclRefExpr 0x557099797b58 <col:3> 'double' lvalue Var 0x557099797a40 'd' 'double'
    | `-CallExpr 0x557099797be8 <col:7, col:32> 'double'
    |   `-ImplicitCastExpr 0x557099797bd0 <col:7> 'double (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x557099797b78 <col:7> 'double ()' Function 0x557099771898 '__VERIFIER_nondet_double' 'double ()'
    |-CallExpr 0x557099797da8 <line:47:3, col:42> 'void'
    | |-ImplicitCastExpr 0x557099797d90 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x557099797c28 <col:3> 'void (int)' Function 0x557099771a20 '__VERIFIER_assume' 'void (int)'
    | `-BinaryOperator 0x557099797d38 <col:21, col:38> 'int' '&&'
    |   |-BinaryOperator 0x557099797ca0 <col:21, col:26> 'int' '>='
    |   | |-ImplicitCastExpr 0x557099797c88 <col:21> 'double' <LValueToRValue>
    |   | | `-DeclRefExpr 0x557099797c48 <col:21> 'double' lvalue Var 0x557099797a40 'd' 'double'
    |   | `-FloatingLiteral 0x557099797c68 <col:26> 'double' 1.000000e-01
    |   `-BinaryOperator 0x557099797d18 <col:33, col:38> 'int' '<='
    |     |-ImplicitCastExpr 0x557099797d00 <col:33> 'double' <LValueToRValue>
    |     | `-DeclRefExpr 0x557099797cc0 <col:33> 'double' lvalue Var 0x557099797a40 'd' 'double'
    |     `-FloatingLiteral 0x557099797ce0 <col:38> 'double' 2.000000e+01
    |-BinaryOperator 0x557099797eb8 <line:49:3, col:14> 'double' '='
    | |-DeclRefExpr 0x557099797dd0 <col:3> 'double' lvalue Var 0x557099797ac0 'r' 'double'
    | `-CallExpr 0x557099797e78 <col:7, col:14> 'double'
    |   |-ImplicitCastExpr 0x557099797e60 <col:7> 'double (*)(double)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x557099797df0 <col:7> 'double (double)' Function 0x557099771f68 'SqrtR' 'double (double)'
    |   `-ImplicitCastExpr 0x557099797ea0 <col:13> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x557099797e10 <col:13> 'double' lvalue Var 0x557099797a40 'd' 'double'
    |-CallExpr 0x557099798020 <line:51:3, col:40> 'void'
    | |-ImplicitCastExpr 0x557099798008 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x557099797ed8 <col:3> 'void (int)' Function 0x557099771b70 '__VERIFIER_assert' 'void (int)'
    | `-BinaryOperator 0x557099797fe8 <col:21, col:38> 'int' '&&'
    |   |-BinaryOperator 0x557099797f50 <col:21, col:26> 'int' '>='
    |   | |-ImplicitCastExpr 0x557099797f38 <col:21> 'double' <LValueToRValue>
    |   | | `-DeclRefExpr 0x557099797ef8 <col:21> 'double' lvalue Var 0x557099797ac0 'r' 'double'
    |   | `-FloatingLiteral 0x557099797f18 <col:26> 'double' 3.000000e-01
    |   `-BinaryOperator 0x557099797fc8 <col:33, col:38> 'int' '<='
    |     |-ImplicitCastExpr 0x557099797fb0 <col:33> 'double' <LValueToRValue>
    |     | `-DeclRefExpr 0x557099797f70 <col:33> 'double' lvalue Var 0x557099797ac0 'r' 'double'
    |     `-FloatingLiteral 0x557099797f90 <col:38> 'double' 5.000000e+00
    `-ReturnStmt 0x557099798068 <line:52:3, col:10>
      `-IntegerLiteral 0x557099798048 <col:10> 'int' 0
