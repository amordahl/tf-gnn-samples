TranslationUnitDecl 0x55fbbd820dd8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55fbbd821698 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55fbbd821370 '__int128'
|-TypedefDecl 0x55fbbd821708 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55fbbd821390 'unsigned __int128'
|-TypedefDecl 0x55fbbd821a10 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55fbbd8217e0 'struct __NSConstantString_tag'
|   `-Record 0x55fbbd821760 '__NSConstantString_tag'
|-TypedefDecl 0x55fbbd821ab8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55fbbd821a70 'char *'
|   `-BuiltinType 0x55fbbd820e70 'char'
|-TypedefDecl 0x55fbbd860c20 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55fbbd821d50 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55fbbd821b90 'struct __va_list_tag'
|     `-Record 0x55fbbd821b10 '__va_list_tag'
|-FunctionDecl 0x55fbbd860d00 <array-examples/standard_two_index_06_true-unreach-call.i:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55fbbd860ed0 <line:2:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55fbbd860e00 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x55fbbd861110 <col:34, col:79>
|   `-IfStmt 0x55fbbd8610f8 <col:36, col:77>
|     |-UnaryOperator 0x55fbbd860fd0 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x55fbbd860fb8 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x55fbbd860f98 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x55fbbd860f78 <col:41> 'int' lvalue ParmVar 0x55fbbd860e00 'cond' 'int'
|     `-CompoundStmt 0x55fbbd8610e0 <col:48, col:77>
|       `-LabelStmt 0x55fbbd8610c8 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x55fbbd861058 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x55fbbd861040 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x55fbbd860fe8 <col:57> 'void () __attribute__((noreturn))' Function 0x55fbbd860d00 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|-FunctionDecl 0x55fbbd861188 <line:3:1, col:34> col:12 used __VERIFIER_nondet_int 'int ()' extern
`-FunctionDecl 0x55fbbd861250 <line:4:1, line:31:1> line:4:5 main 'int ()'
  `-CompoundStmt 0x55fbbd886470 <line:5:1, line:31:1>
    |-DeclStmt 0x55fbbd861400 <line:6:3, col:15>
    | `-VarDecl 0x55fbbd861398 <col:3, col:14> col:7 used a 'int [10000]'
    |-DeclStmt 0x55fbbd8614e0 <line:7:3, col:15>
    | `-VarDecl 0x55fbbd861478 <col:3, col:14> col:7 used b 'int [10000]'
    |-DeclStmt 0x55fbbd861598 <line:8:3, col:12>
    | `-VarDecl 0x55fbbd861510 <col:3, col:11> col:7 used i 'int' cinit
    |   `-IntegerLiteral 0x55fbbd861578 <col:11> 'int' 0
    |-DeclStmt 0x55fbbd861650 <line:9:3, col:12>
    | `-VarDecl 0x55fbbd8615c8 <col:3, col:11> col:7 used j 'int' cinit
    |   `-IntegerLiteral 0x55fbbd861630 <col:11> 'int' 0
    |-WhileStmt 0x55fbbd861920 <line:10:3, line:14:3>
    | |-BinaryOperator 0x55fbbd8616c0 <line:10:10, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x55fbbd8616a8 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55fbbd861668 <col:10> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    | | `-IntegerLiteral 0x55fbbd861688 <col:14> 'int' 10000
    | `-CompoundStmt 0x55fbbd861900 <line:11:3, line:14:3>
    |   |-BinaryOperator 0x55fbbd861828 <line:12:2, col:31> 'int' '='
    |   | |-ArraySubscriptExpr 0x55fbbd861780 <col:2, col:5> 'int' lvalue
    |   | | |-ImplicitCastExpr 0x55fbbd861750 <col:2> 'int *' <ArrayToPointerDecay>
    |   | | | `-DeclRefExpr 0x55fbbd8616e0 <col:2> 'int [10000]' lvalue Var 0x55fbbd861478 'b' 'int [10000]'
    |   | | `-ImplicitCastExpr 0x55fbbd861768 <col:4> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55fbbd861700 <col:4> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    |   | `-CallExpr 0x55fbbd861808 <col:9, col:31> 'int'
    |   |   `-ImplicitCastExpr 0x55fbbd8617f0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |     `-DeclRefExpr 0x55fbbd8617a0 <col:9> 'int ()' Function 0x55fbbd861188 '__VERIFIER_nondet_int' 'int ()'
    |   `-BinaryOperator 0x55fbbd8618e0 <line:13:5, col:11> 'int' '='
    |     |-DeclRefExpr 0x55fbbd861848 <col:5> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    |     `-BinaryOperator 0x55fbbd8618c0 <col:9, col:11> 'int' '+'
    |       |-ImplicitCastExpr 0x55fbbd8618a8 <col:9> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55fbbd861868 <col:9> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    |       `-IntegerLiteral 0x55fbbd861888 <col:11> 'int' 1
    |-BinaryOperator 0x55fbbd861978 <line:15:3, col:7> 'int' '='
    | |-DeclRefExpr 0x55fbbd861938 <col:3> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    | `-IntegerLiteral 0x55fbbd861958 <col:7> 'int' 1
    |-WhileStmt 0x55fbbd885ec0 <line:16:3, line:21:3>
    | |-BinaryOperator 0x55fbbd8619f0 <line:16:10, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x55fbbd8619d8 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55fbbd861998 <col:10> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    | | `-IntegerLiteral 0x55fbbd8619b8 <col:14> 'int' 10000
    | `-CompoundStmt 0x55fbbd885e98 <line:17:3, line:21:3>
    |   |-BinaryOperator 0x55fbbd861b48 <line:18:2, col:12> 'int' '='
    |   | |-ArraySubscriptExpr 0x55fbbd861a80 <col:2, col:5> 'int' lvalue
    |   | | |-ImplicitCastExpr 0x55fbbd861a50 <col:2> 'int *' <ArrayToPointerDecay>
    |   | | | `-DeclRefExpr 0x55fbbd861a10 <col:2> 'int [10000]' lvalue Var 0x55fbbd861398 'a' 'int [10000]'
    |   | | `-ImplicitCastExpr 0x55fbbd861a68 <col:4> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55fbbd861a30 <col:4> 'int' lvalue Var 0x55fbbd8615c8 'j' 'int'
    |   | `-ImplicitCastExpr 0x55fbbd861b30 <col:9, col:12> 'int' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x55fbbd861b10 <col:9, col:12> 'int' lvalue
    |   |     |-ImplicitCastExpr 0x55fbbd861ae0 <col:9> 'int *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x55fbbd861aa0 <col:9> 'int [10000]' lvalue Var 0x55fbbd861478 'b' 'int [10000]'
    |   |     `-ImplicitCastExpr 0x55fbbd861af8 <col:11> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55fbbd861ac0 <col:11> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    |   |-BinaryOperator 0x55fbbd861c00 <line:19:9, col:15> 'int' '='
    |   | |-DeclRefExpr 0x55fbbd861b68 <col:9> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    |   | `-BinaryOperator 0x55fbbd861be0 <col:13, col:15> 'int' '+'
    |   |   |-ImplicitCastExpr 0x55fbbd861bc8 <col:13> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x55fbbd861b88 <col:13> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    |   |   `-IntegerLiteral 0x55fbbd861ba8 <col:15> 'int' 6
    |   `-BinaryOperator 0x55fbbd885e78 <line:20:9, col:15> 'int' '='
    |     |-DeclRefExpr 0x55fbbd885de0 <col:9> 'int' lvalue Var 0x55fbbd8615c8 'j' 'int'
    |     `-BinaryOperator 0x55fbbd885e58 <col:13, col:15> 'int' '+'
    |       |-ImplicitCastExpr 0x55fbbd885e40 <col:13> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55fbbd885e00 <col:13> 'int' lvalue Var 0x55fbbd8615c8 'j' 'int'
    |       `-IntegerLiteral 0x55fbbd885e20 <col:15> 'int' 1
    |-BinaryOperator 0x55fbbd885f18 <line:22:3, col:7> 'int' '='
    | |-DeclRefExpr 0x55fbbd885ed8 <col:3> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    | `-IntegerLiteral 0x55fbbd885ef8 <col:7> 'int' 1
    |-BinaryOperator 0x55fbbd885f78 <line:23:3, col:7> 'int' '='
    | |-DeclRefExpr 0x55fbbd885f38 <col:3> 'int' lvalue Var 0x55fbbd8615c8 'j' 'int'
    | `-IntegerLiteral 0x55fbbd885f58 <col:7> 'int' 0
    |-WhileStmt 0x55fbbd886428 <line:24:3, line:29:3>
    | |-BinaryOperator 0x55fbbd885ff0 <line:24:10, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x55fbbd885fd8 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55fbbd885f98 <col:10> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    | | `-IntegerLiteral 0x55fbbd885fb8 <col:14> 'int' 10000
    | `-CompoundStmt 0x55fbbd886400 <line:25:3, line:29:3>
    |   |-CallExpr 0x55fbbd886268 <line:26:2, col:38> 'void'
    |   | |-ImplicitCastExpr 0x55fbbd886250 <col:2> 'void (*)(int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x55fbbd886010 <col:2> 'void (int)' Function 0x55fbbd860ed0 '__VERIFIER_assert' 'void (int)'
    |   | `-BinaryOperator 0x55fbbd886200 <col:21, col:36> 'int' '=='
    |   |   |-ImplicitCastExpr 0x55fbbd8861d0 <col:21, col:24> 'int' <LValueToRValue>
    |   |   | `-ArraySubscriptExpr 0x55fbbd8860a0 <col:21, col:24> 'int' lvalue
    |   |   |   |-ImplicitCastExpr 0x55fbbd886070 <col:21> 'int *' <ArrayToPointerDecay>
    |   |   |   | `-DeclRefExpr 0x55fbbd886030 <col:21> 'int [10000]' lvalue Var 0x55fbbd861398 'a' 'int [10000]'
    |   |   |   `-ImplicitCastExpr 0x55fbbd886088 <col:23> 'int' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x55fbbd886050 <col:23> 'int' lvalue Var 0x55fbbd8615c8 'j' 'int'
    |   |   `-ImplicitCastExpr 0x55fbbd8861e8 <col:29, col:36> 'int' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x55fbbd8861b0 <col:29, col:36> 'int' lvalue
    |   |       |-ImplicitCastExpr 0x55fbbd886198 <col:29> 'int *' <ArrayToPointerDecay>
    |   |       | `-DeclRefExpr 0x55fbbd8860c0 <col:29> 'int [10000]' lvalue Var 0x55fbbd861478 'b' 'int [10000]'
    |   |       `-BinaryOperator 0x55fbbd886178 <col:31, col:35> 'int' '+'
    |   |         |-BinaryOperator 0x55fbbd886138 <col:31, col:33> 'int' '*'
    |   |         | |-IntegerLiteral 0x55fbbd8860e0 <col:31> 'int' 6
    |   |         | `-ImplicitCastExpr 0x55fbbd886120 <col:33> 'int' <LValueToRValue>
    |   |         |   `-DeclRefExpr 0x55fbbd886100 <col:33> 'int' lvalue Var 0x55fbbd8615c8 'j' 'int'
    |   |         `-IntegerLiteral 0x55fbbd886158 <col:35> 'int' 1
    |   |-BinaryOperator 0x55fbbd886328 <line:27:9, col:15> 'int' '='
    |   | |-DeclRefExpr 0x55fbbd886290 <col:9> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    |   | `-BinaryOperator 0x55fbbd886308 <col:13, col:15> 'int' '+'
    |   |   |-ImplicitCastExpr 0x55fbbd8862f0 <col:13> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x55fbbd8862b0 <col:13> 'int' lvalue Var 0x55fbbd861510 'i' 'int'
    |   |   `-IntegerLiteral 0x55fbbd8862d0 <col:15> 'int' 6
    |   `-BinaryOperator 0x55fbbd8863e0 <line:28:9, col:15> 'int' '='
    |     |-DeclRefExpr 0x55fbbd886348 <col:9> 'int' lvalue Var 0x55fbbd8615c8 'j' 'int'
    |     `-BinaryOperator 0x55fbbd8863c0 <col:13, col:15> 'int' '+'
    |       |-ImplicitCastExpr 0x55fbbd8863a8 <col:13> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55fbbd886368 <col:13> 'int' lvalue Var 0x55fbbd8615c8 'j' 'int'
    |       `-IntegerLiteral 0x55fbbd886388 <col:15> 'int' 1
    `-ReturnStmt 0x55fbbd886460 <line:30:3, col:10>
      `-IntegerLiteral 0x55fbbd886440 <col:10> 'int' 0
