TranslationUnitDecl 0x55db040f34d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55db040f3d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55db040f3a70 '__int128'
|-TypedefDecl 0x55db040f3e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55db040f3a90 'unsigned __int128'
|-TypedefDecl 0x55db040f4110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55db040f3ee0 'struct __NSConstantString_tag'
|   `-Record 0x55db040f3e60 '__NSConstantString_tag'
|-TypedefDecl 0x55db040f41b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55db040f4170 'char *'
|   `-BuiltinType 0x55db040f3570 'char'
|-TypedefDecl 0x55db04133240 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55db040f4450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55db040f4290 'struct __va_list_tag'
|     `-Record 0x55db040f4210 '__va_list_tag'
|-EnumDecl 0x55db04133298 <termination-crafted/NonTermination4_false-no-overflow.c:9:9, col:26> col:9
| |-EnumConstantDecl 0x55db04133368 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x55db041333b8 <col:22> col:22 true 'int'
|-TypedefDecl 0x55db04133470 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x55db04133410 'enum bool' sugar
|   `-EnumType 0x55db04133340 'bool'
|     `-Enum 0x55db04133298 ''
|-FunctionDecl 0x55db041335b8 <line:11:1, col:38> col:12 __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x55db041336f8 <line:13:1, line:23:1> line:13:5 main 'int ()'
  `-CompoundStmt 0x55db04133bd8 <line:14:1, line:23:1>
    |-DeclStmt 0x55db041338b0 <line:15:5, col:13>
    | |-VarDecl 0x55db041337b0 <col:5, col:9> col:9 used x 'int'
    | `-VarDecl 0x55db04133830 <col:5, col:12> col:12 used y 'int'
    |-BinaryOperator 0x55db04133908 <line:16:2, col:6> 'int' '='
    | |-DeclRefExpr 0x55db041338c8 <col:2> 'int' lvalue Var 0x55db041337b0 'x' 'int'
    | `-IntegerLiteral 0x55db041338e8 <col:6> 'int' 1
    |-BinaryOperator 0x55db04133968 <line:17:2, col:6> 'int' '='
    | |-DeclRefExpr 0x55db04133928 <col:2> 'int' lvalue Var 0x55db04133830 'y' 'int'
    | `-IntegerLiteral 0x55db04133948 <col:6> 'int' 1
    |-WhileStmt 0x55db04133b90 <line:18:2, line:21:2>
    | |-BinaryOperator 0x55db041339e0 <line:18:9, col:14> 'int' '>='
    | | |-ImplicitCastExpr 0x55db041339c8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55db04133988 <col:9> 'int' lvalue Var 0x55db041337b0 'x' 'int'
    | | `-IntegerLiteral 0x55db041339a8 <col:14> 'int' 0
    | `-CompoundStmt 0x55db04133b70 <col:17, line:21:2>
    |   |-BinaryOperator 0x55db04133a98 <line:19:3, col:9> 'int' '='
    |   | |-DeclRefExpr 0x55db04133a00 <col:3> 'int' lvalue Var 0x55db041337b0 'x' 'int'
    |   | `-BinaryOperator 0x55db04133a78 <col:7, col:9> 'int' '*'
    |   |   |-IntegerLiteral 0x55db04133a20 <col:7> 'int' 2
    |   |   `-ImplicitCastExpr 0x55db04133a60 <col:9> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55db04133a40 <col:9> 'int' lvalue Var 0x55db041337b0 'x' 'int'
    |   `-BinaryOperator 0x55db04133b50 <line:20:3, col:9> 'int' '='
    |     |-DeclRefExpr 0x55db04133ab8 <col:3> 'int' lvalue Var 0x55db04133830 'y' 'int'
    |     `-BinaryOperator 0x55db04133b30 <col:7, col:9> 'int' '*'
    |       |-IntegerLiteral 0x55db04133ad8 <col:7> 'int' 3
    |       `-ImplicitCastExpr 0x55db04133b18 <col:9> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55db04133af8 <col:9> 'int' lvalue Var 0x55db04133830 'y' 'int'
    `-ReturnStmt 0x55db04133bc8 <line:22:2, col:9>
      `-IntegerLiteral 0x55db04133ba8 <col:9> 'int' 0
