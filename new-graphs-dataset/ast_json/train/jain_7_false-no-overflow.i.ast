TranslationUnitDecl 0x563d7d0d2d58 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x563d7d0d3618 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x563d7d0d32f0 '__int128'
|-TypedefDecl 0x563d7d0d3688 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x563d7d0d3310 'unsigned __int128'
|-TypedefDecl 0x563d7d0d3990 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x563d7d0d3760 'struct __NSConstantString_tag'
|   `-Record 0x563d7d0d36e0 '__NSConstantString_tag'
|-TypedefDecl 0x563d7d0d3a38 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x563d7d0d39f0 'char *'
|   `-BuiltinType 0x563d7d0d2df0 'char'
|-TypedefDecl 0x563d7d112bc0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x563d7d0d3cd0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x563d7d0d3b10 'struct __va_list_tag'
|     `-Record 0x563d7d0d3a90 '__va_list_tag'
|-FunctionDecl 0x563d7d112ca0 <bitvector/jain_7_false-no-overflow.i:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x563d7d112e58 <line:3:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-FunctionDecl 0x563d7d112fe0 <line:4:1, line:9:1> line:4:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x563d7d112f10 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x563d7d113230 <col:34, line:9:1>
|   |-IfStmt 0x563d7d113208 <line:5:3, line:7:3>
|   | |-UnaryOperator 0x563d7d1130e0 <line:5:7, col:13> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x563d7d1130c8 <col:8, col:13> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x563d7d1130a8 <col:8, col:13> 'int' lvalue
|   | |     `-DeclRefExpr 0x563d7d113088 <col:9> 'int' lvalue ParmVar 0x563d7d112f10 'cond' 'int'
|   | `-CompoundStmt 0x563d7d1131f0 <col:16, line:7:3>
|   |   `-LabelStmt 0x563d7d1131d8 <line:6:5, col:29> 'ERROR'
|   |     `-CallExpr 0x563d7d113168 <col:12, col:29> 'void'
|   |       `-ImplicitCastExpr 0x563d7d113150 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x563d7d1130f8 <col:12> 'void () __attribute__((noreturn))' Function 0x563d7d112ca0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x563d7d113220 <line:8:3>
`-FunctionDecl 0x563d7d1132a8 <line:10:1, line:27:1> line:10:5 main 'int ()'
  `-CompoundStmt 0x563d7d137e88 <line:11:1, line:27:1>
    |-DeclStmt 0x563d7d1134e8 <line:12:3, col:12>
    | |-VarDecl 0x563d7d113360 <col:3, col:7> col:7 used x 'int'
    | |-VarDecl 0x563d7d1133e0 <col:3, col:9> col:9 used y 'int'
    | `-VarDecl 0x563d7d113460 <col:3, col:11> col:11 used z 'int'
    |-BinaryOperator 0x563d7d113540 <line:14:3, col:5> 'int' '='
    | |-DeclRefExpr 0x563d7d113500 <col:3> 'int' lvalue Var 0x563d7d113360 'x' 'int'
    | `-IntegerLiteral 0x563d7d113520 <col:5> 'int' 0
    |-BinaryOperator 0x563d7d1135a0 <line:15:3, col:5> 'int' '='
    | |-DeclRefExpr 0x563d7d113560 <col:3> 'int' lvalue Var 0x563d7d1133e0 'y' 'int'
    | `-IntegerLiteral 0x563d7d113580 <col:5> 'int' 0
    |-BinaryOperator 0x563d7d113600 <line:16:3, col:5> 'int' '='
    | |-DeclRefExpr 0x563d7d1135c0 <col:3> 'int' lvalue Var 0x563d7d113460 'z' 'int'
    | `-IntegerLiteral 0x563d7d1135e0 <col:5> 'int' 0
    |-WhileStmt 0x563d7d137e40 <line:18:3, line:25:5>
    | |-IntegerLiteral 0x563d7d113620 <line:18:9> 'int' 1
    | `-CompoundStmt 0x563d7d137e10 <line:19:5, line:25:5>
    |   |-BinaryOperator 0x563d7d113780 <line:20:7, col:44> 'int' '='
    |   | |-DeclRefExpr 0x563d7d113640 <col:7> 'int' lvalue Var 0x563d7d113360 'x' 'int'
    |   | `-BinaryOperator 0x563d7d113760 <col:11, col:44> 'int' '+'
    |   |   |-ImplicitCastExpr 0x563d7d113748 <col:11> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x563d7d113660 <col:11> 'int' lvalue Var 0x563d7d113360 'x' 'int'
    |   |   `-BinaryOperator 0x563d7d113728 <col:14, col:44> 'int' '*'
    |   |     |-IntegerLiteral 0x563d7d113680 <col:14> 'int' 1048576
    |   |     `-CallExpr 0x563d7d113708 <col:22, col:44> 'int'
    |   |       `-ImplicitCastExpr 0x563d7d1136f0 <col:22> 'int (*)(void)' <FunctionToPointerDecay>
    |   |         `-DeclRefExpr 0x563d7d1136a0 <col:22> 'int (void)' Function 0x563d7d112e58 '__VERIFIER_nondet_int' 'int (void)'
    |   |-BinaryOperator 0x563d7d1138b0 <line:21:7, col:44> 'int' '='
    |   | |-DeclRefExpr 0x563d7d1137a0 <col:7> 'int' lvalue Var 0x563d7d1133e0 'y' 'int'
    |   | `-BinaryOperator 0x563d7d113890 <col:11, col:44> 'int' '+'
    |   |   |-ImplicitCastExpr 0x563d7d113878 <col:11> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x563d7d1137c0 <col:11> 'int' lvalue Var 0x563d7d1133e0 'y' 'int'
    |   |   `-BinaryOperator 0x563d7d113858 <col:14, col:44> 'int' '*'
    |   |     |-IntegerLiteral 0x563d7d1137e0 <col:14> 'int' 2097152
    |   |     `-CallExpr 0x563d7d113838 <col:22, col:44> 'int'
    |   |       `-ImplicitCastExpr 0x563d7d113820 <col:22> 'int (*)(void)' <FunctionToPointerDecay>
    |   |         `-DeclRefExpr 0x563d7d113800 <col:22> 'int (void)' Function 0x563d7d112e58 '__VERIFIER_nondet_int' 'int (void)'
    |   |-BinaryOperator 0x563d7d1139e0 <line:22:7, col:44> 'int' '='
    |   | |-DeclRefExpr 0x563d7d1138d0 <col:7> 'int' lvalue Var 0x563d7d113460 'z' 'int'
    |   | `-BinaryOperator 0x563d7d1139c0 <col:11, col:44> 'int' '+'
    |   |   |-ImplicitCastExpr 0x563d7d1139a8 <col:11> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x563d7d1138f0 <col:11> 'int' lvalue Var 0x563d7d113460 'z' 'int'
    |   |   `-BinaryOperator 0x563d7d113988 <col:14, col:44> 'int' '*'
    |   |     |-IntegerLiteral 0x563d7d113910 <col:14> 'int' 4194304
    |   |     `-CallExpr 0x563d7d113968 <col:22, col:44> 'int'
    |   |       `-ImplicitCastExpr 0x563d7d113950 <col:22> 'int (*)(void)' <FunctionToPointerDecay>
    |   |         `-DeclRefExpr 0x563d7d113930 <col:22> 'int (void)' Function 0x563d7d112e58 '__VERIFIER_nondet_int' 'int (void)'
    |   `-CallExpr 0x563d7d137de8 <line:24:7, col:43> 'void'
    |     |-ImplicitCastExpr 0x563d7d137dd0 <col:7> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x563d7d113a00 <col:7> 'void (int)' Function 0x563d7d112fe0 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x563d7d137d80 <col:25, col:36> 'int' '!='
    |       |-BinaryOperator 0x563d7d113b68 <col:25, col:33> 'int' '+'
    |       | |-BinaryOperator 0x563d7d113b10 <col:25, col:31> 'int' '-'
    |       | | |-BinaryOperator 0x563d7d113a78 <col:25, col:27> 'int' '*'
    |       | | | |-IntegerLiteral 0x563d7d113a20 <col:25> 'int' 4
    |       | | | `-ImplicitCastExpr 0x563d7d113a60 <col:27> 'int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x563d7d113a40 <col:27> 'int' lvalue Var 0x563d7d113360 'x' 'int'
    |       | | `-BinaryOperator 0x563d7d113af0 <col:29, col:31> 'int' '*'
    |       | |   |-IntegerLiteral 0x563d7d113a98 <col:29> 'int' 2
    |       | |   `-ImplicitCastExpr 0x563d7d113ad8 <col:31> 'int' <LValueToRValue>
    |       | |     `-DeclRefExpr 0x563d7d113ab8 <col:31> 'int' lvalue Var 0x563d7d1133e0 'y' 'int'
    |       | `-ImplicitCastExpr 0x563d7d113b50 <col:33> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x563d7d113b30 <col:33> 'int' lvalue Var 0x563d7d113460 'z' 'int'
    |       `-IntegerLiteral 0x563d7d113b88 <col:36> 'int' 1048576
    `-ReturnStmt 0x563d7d137e78 <line:26:5, col:12>
      `-IntegerLiteral 0x563d7d137e58 <col:12> 'int' 0
