TranslationUnitDecl 0x56188fb6af88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x56188fb6b848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x56188fb6b520 '__int128'
|-TypedefDecl 0x56188fb6b8b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x56188fb6b540 'unsigned __int128'
|-TypedefDecl 0x56188fb6bbc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x56188fb6b990 'struct __NSConstantString_tag'
|   `-Record 0x56188fb6b910 '__NSConstantString_tag'
|-TypedefDecl 0x56188fb6bc68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x56188fb6bc20 'char *'
|   `-BuiltinType 0x56188fb6b020 'char'
|-TypedefDecl 0x56188fbaab60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x56188fb6bf00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x56188fb6bd40 'struct __va_list_tag'
|     `-Record 0x56188fb6bcc0 '__va_list_tag'
|-FunctionDecl 0x56188fbaac80 <pthread-wmm/safe019_power.opt_false-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x56188fbaae50 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x56188fbaad80 <col:31> col:34 'int'
|-FunctionDecl 0x56188fbaafc8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x56188fbab0f0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x56188fbab238 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x56188fbab1a8 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x56188fbab468 <col:40, col:99>
|   |-IfStmt 0x56188fbab438 <col:42, col:88>
|   | |-UnaryOperator 0x56188fbab318 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x56188fbab300 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56188fbab2e0 <col:47> 'int' lvalue ParmVar 0x56188fbab1a8 'expression' 'int'
|   | `-CompoundStmt 0x56188fbab420 <col:59, col:88>
|   |   `-LabelStmt 0x56188fbab408 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x56188fbab398 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x56188fbab380 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x56188fbab330 <col:68> 'void () __attribute__((noreturn))' Function 0x56188fbab0f0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x56188fbab450 <col:89>
|   `-ReturnStmt 0x56188fbab458 <col:91>
|-FunctionDecl 0x56188fbab4b0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x56188fbab570 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x56188fbab8f0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56188fbab628 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x56188fbab6a8 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x56188fbab728 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x56188fbab7a8 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56188fbab9b0 <line:11:22>
|-FunctionDecl 0x56188fbd0f10 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56188fbaba20 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x56188fbabaa0 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x56188fbd0d40 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x56188fbd0dc0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56188fbd0fd0 <line:14:22>
|-FunctionDecl 0x56188fbd1280 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56188fbd1040 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x56188fbd10c0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x56188fbd1140 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x56188fbd1338 <line:16:22>
|-TypedefDecl 0x56188fbd13a8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x56188fb6b0e0 'unsigned char'
|-TypedefDecl 0x56188fbd1418 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x56188fb6b100 'unsigned short'
|-TypedefDecl 0x56188fbd1488 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-TypedefDecl 0x56188fbd14f8 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd1568 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x56188fb6b040 'signed char'
|-TypedefDecl 0x56188fbd15d8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x56188fb6b0e0 'unsigned char'
|-TypedefDecl 0x56188fbd1648 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x56188fb6b060 'short'
|-TypedefDecl 0x56188fbd16b8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x56188fb6b100 'unsigned short'
|-TypedefDecl 0x56188fbd1728 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x56188fb6b080 'int'
|-TypedefDecl 0x56188fbd1798 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-TypedefDecl 0x56188fbd1808 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd1878 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd18e8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd1958 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd19c8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd1a38 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-TypedefDecl 0x56188fbd1aa8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-TypedefDecl 0x56188fbd1b18 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd1b88 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd1bf8 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-TypedefDecl 0x56188fbd1c68 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd1cd8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd1d68 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd1dd8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x56188fb6b080 'int'
|-RecordDecl 0x56188fbd1e30 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x56188fbd1f78 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x56188fbd2030 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x56188fbd1fd0 'struct __fsid_t' sugar
|   `-RecordType 0x56188fbd1eb0 '__fsid_t'
|     `-Record 0x56188fbd1e30 ''
|-TypedefDecl 0x56188fbd20b8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd2128 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd2198 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd2208 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-TypedefDecl 0x56188fbd2278 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd22e8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-TypedefDecl 0x56188fbd2358 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd23c8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x56188fb6b080 'int'
|-TypedefDecl 0x56188fbd2438 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x56188fb6b080 'int'
|-TypedefDecl 0x56188fbd24a8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x56188fb6b080 'int'
|-TypedefDecl 0x56188fbd2518 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x56188fb6b7a0 'void *'
|   `-BuiltinType 0x56188fb6afe0 'void'
|-TypedefDecl 0x56188fbd2588 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd25f8 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd2668 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd26d8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd2748 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd27b8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd2828 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd2898 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd2908 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd2978 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd29e8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd2a78 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x56188fbd2a40 '__off64_t' sugar
|   |-Typedef 0x56188fbd1d68 '__off64_t'
|   `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd2b70 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x56188fbd2b30 '__quad_t *'
|   `-TypedefType 0x56188fbd2ad0 '__quad_t' sugar
|     |-Typedef 0x56188fbd18e8 '__quad_t'
|     `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd2be0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x56188fb6bc20 'char *'
|   `-BuiltinType 0x56188fb6b020 'char'
|-TypedefDecl 0x56188fbd2c50 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd2cc0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-FunctionDecl 0x56188fbd2e38 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x56188fbd2d60 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x56188fbd3148 <line:72:1, line:74:1>
|   `-ReturnStmt 0x56188fbd3138 <line:73:3, col:34>
|     `-CallExpr 0x56188fbd30f8 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x56188fbd30e0 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56188fbd3070 <col:10> '<builtin fn type>' Function 0x56188fbd2ee0 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x56188fbd3120 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56188fbd3090 <col:29> 'unsigned int' lvalue ParmVar 0x56188fbd2d60 '__bsx' 'unsigned int'
|-FunctionDecl 0x56188fbd2ee0 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x56188fbd2f80 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x56188fbd2ff0 <col:10> Implicit
| `-ConstAttr 0x56188fbd3048 <col:10> Implicit
|-FunctionDecl 0x56188fbd32a0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x56188fbd3198 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x56188fbd35b8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x56188fbd35a8 <line:78:3, col:34>
|     `-CallExpr 0x56188fbd3568 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x56188fbd3550 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56188fbd34d8 <col:10> '<builtin fn type>' Function 0x56188fbd3348 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x56188fbd3590 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x56188fbd34f8 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x56188fbd3198 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x56188fbd3348 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x56188fbd33e8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x56188fbd3458 <col:10> Implicit
| `-ConstAttr 0x56188fbd34b0 <col:10> Implicit
|-TypedefDecl 0x56188fbd35e8 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-TypedefDecl 0x56188fbd3678 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x56188fbd3640 '__time_t' sugar
|   |-Typedef 0x56188fbd2278 '__time_t'
|   `-BuiltinType 0x56188fb6b0a0 'long'
|-RecordDecl 0x56188fbd36d0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x56188fbd3788 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x56188fbd3818 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x56188fbd38a8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x56188fbd3870 '__pid_t' sugar
|   |-Typedef 0x56188fbd1dd8 '__pid_t'
|   `-BuiltinType 0x56188fb6b080 'int'
|-RecordDecl 0x56188fbd3900 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x56188fbd39c0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x56188fbd3a10 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x56188fbd3ad0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x56188fbd3b38 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-RecordDecl 0x56188fbd3b90 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x56188fbd5e70 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x56188fbd5f20 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x56188fbd5ec0 'struct cpu_set_t' sugar
|   `-RecordType 0x56188fbd3c10 'cpu_set_t'
|     `-Record 0x56188fbd3b90 ''
|-FunctionDecl 0x56188fbd61f8 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x56188fbd5fc8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56188fbd60d0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x56188fbd62a8 <line:108:19>
|-FunctionDecl 0x56188fbd6480 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x56188fbd6310 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x56188fbd6528 <col:69>
|-FunctionDecl 0x56188fbd66a0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x56188fbd6590 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x56188fbd6748 <col:64>
|-FunctionDecl 0x56188fbd6a08 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x56188fbd67b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56188fbd68e8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x56188fbd6ab8 <line:114:22>
|-FunctionDecl 0x56188fbd6e60 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x56188fbd6b20 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56188fbd6c18 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x56188fbd6f10 <col:88>
|-FunctionDecl 0x56188fbd71c8 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x56188fbd6f78 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56188fbd6ff8 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x56188fbd7088 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x56188fbd7280 <col:62>
|-FunctionDecl 0x56188fbd73f8 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x56188fbd72e8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x56188fbd74a0 <col:63>
|-FunctionDecl 0x56188fbd75c8 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x56188fbd7668 <col:47>
|-FunctionDecl 0x56188fbd7770 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x56188fbd76d8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x56188fbd7818 <col:69>
|-FunctionDecl 0x56188fbd7920 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x56188fbd7888 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x56188fbd79c8 <col:69>
|-FunctionDecl 0x56188fbd7c88 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56188fbd7a30 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56188fbd7b68 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x56188fbd7d38 <col:88>
|-TypedefDecl 0x56188fbd7dc8 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x56188fbd7d90 '__clock_t' sugar
|   |-Typedef 0x56188fbd20b8 '__clock_t'
|   `-BuiltinType 0x56188fb6b0a0 'long'
|-TypedefDecl 0x56188fbd87e0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x56188fbd7e20 '__clockid_t' sugar
|   |-Typedef 0x56188fbd24a8 '__clockid_t'
|   `-BuiltinType 0x56188fb6b080 'int'
|-TypedefDecl 0x56188fbd8878 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x56188fbd8840 '__timer_t' sugar
|   |-Typedef 0x56188fbd2518 '__timer_t'
|   `-PointerType 0x56188fb6b7a0 'void *'
|     `-BuiltinType 0x56188fb6afe0 'void'
|-RecordDecl 0x56188fbd88d0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x56188fbd8990 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x56188fbd89f8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x56188fbd8a60 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x56188fbd8ac8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x56188fbd8b30 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x56188fbd8b98 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x56188fbd8c00 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x56188fbd8c68 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x56188fbd8cd0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x56188fbd8d38 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x56188fbd8da0 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x56188fbd8df0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x56188fbd8eb8 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x56188fbd8f28 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x56188fbd8fd0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x56188fbd91a0 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x56188fbd9240 <col:45>
|-FunctionDecl 0x56188fbd9420 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x56188fbd9310 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x56188fbd94c8 <col:54>
|-FunctionDecl 0x56188fbd96c8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x56188fbd9530 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x56188fbd95a8 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x56188fbd9778 <line:158:22>
| `-ConstAttr 0x56188fbda410 <col:63>
|-FunctionDecl 0x56188fbda610 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56188fbda508 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x56188fbda6b8 <col:56>
|-FunctionDecl 0x56188fbdaa60 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x56188fbda728 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x56188fbda7a0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56188fbda820 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x56188fbda918 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x56188fbdab20 <col:54>
|-RecordDecl 0x56188fbdab78 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x56188fbdac28 parent 0x56188fb6af88 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x56188fbdae88 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x56188fbdaf28 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x56188fbdaf90 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x56188fbdaff8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x56188fbdb0e8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x56188fbdb208 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x56188fbdb1b0 'struct __locale_struct *'
|   `-ElaboratedType 0x56188fbdb140 'struct __locale_struct' sugar
|     `-RecordType 0x56188fbdac00 'struct __locale_struct'
|       `-Record 0x56188fbdab78 '__locale_struct'
|-TypedefDecl 0x56188fbdb2b8 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x56188fbdb280 '__locale_t' sugar
|   |-Typedef 0x56188fbdb208 '__locale_t'
|   `-PointerType 0x56188fbdb1b0 'struct __locale_struct *'
|     `-ElaboratedType 0x56188fbdb140 'struct __locale_struct' sugar
|       `-RecordType 0x56188fbdac00 'struct __locale_struct'
|         `-Record 0x56188fbdab78 '__locale_struct'
|-FunctionDecl 0x56188fbdb6b0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x56188fbdb328 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x56188fbdb3a0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56188fbdb438 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x56188fbdb4c8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x56188fbdb540 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x56188fbdb778 <col:40>
|-FunctionDecl 0x56188fbdb968 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x56188fbdb840 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x56188fbdba10 <col:66>
|-FunctionDecl 0x56188fbdbb20 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x56188fbdba78 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x56188fbdbbc8 <col:69>
|-FunctionDecl 0x56188fbdbdf8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x56188fbdbc30 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56188fbdbcc0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x56188fbdbea8 <col:52>
|-FunctionDecl 0x56188fbdc050 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x56188fbdbf10 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56188fbdbfa0 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x56188fbdc100 <col:55>
|-FunctionDecl 0x56188fbdc298 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x56188fbdc180 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x56188fbdc340 <col:62>
|-FunctionDecl 0x56188fbdc578 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x56188fbdc3a8 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x56188fbdc620 <col:60>
|-FunctionDecl 0x56188fbdc848 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x56188fbdc6a0 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x56188fbdc720 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x56188fbdc8f8 <col:44>
|-FunctionDecl 0x56188fbdcb08 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x56188fbdc960 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56188fbdc9e0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x56188fbdcbb8 <col:49>
|-VarDecl 0x56188fbdccb8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x56188fbdcd38 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x56188fbdcdb8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x56188fbdce80 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x56188fbdcfb0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x56188fbdd050 <col:42>
|-VarDecl 0x56188fbdd0c0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x56188fbdd140 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x56188fbdd2c8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x56188fbdd1b8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x56188fbdd370 <col:57>
|-FunctionDecl 0x56188fbde4f0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56188fbdd3f0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x56188fbde598 <col:56>
|-FunctionDecl 0x56188fbde6a8 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56188fbde618 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x56188fbde750 <col:59>
|-FunctionDecl 0x56188fbde858 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x56188fbde7c0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x56188fbde900 <col:48>
| `-ConstAttr 0x56188fbde958 <col:89>
|-FunctionDecl 0x56188fbdebb8 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x56188fbdea08 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x56188fbdea98 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x56188fbdee18 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56188fbdeca8 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56188fbded38 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x56188fbdeec8 <col:88>
|-FunctionDecl 0x56188fbdf060 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56188fbdef30 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56188fbdefc0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x56188fbdf110 <col:88>
|-FunctionDecl 0x56188fbdf328 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x56188fbdf178 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56188fbdf208 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x56188fbdf3d8 <line:209:22>
|-FunctionDecl 0x56188fbdf778 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x56188fbdf440 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56188fbdf500 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x56188fbdf590 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x56188fbdf620 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x56188fbdfa78 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x56188fbdf878 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x56188fbdf950 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x56188fbdfb28 <col:85>
|-FunctionDecl 0x56188fbdff18 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x56188fbdfb90 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56188fbdfcc8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x56188fbdfdd0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x56188fbdffd0 <col:52>
|-FunctionDecl 0x56188fbe0148 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x56188fbe0038 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56188fbe01f0 <col:61>
|-FunctionDecl 0x56188fbe0668 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x56188fbe0258 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56188fbe02d8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x56188fbe0408 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x56188fbe0510 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x56188fbe0728 <col:62>
|-FunctionDecl 0x56188fbe0948 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x56188fbe0790 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56188fbe0820 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x56188fbe09f8 <line:222:22>
|-FunctionDecl 0x56188fbe0af8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x56188fbe0a60 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56188fbe0ba0 <col:65>
|-TypedefDecl 0x56188fbe0c10 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x56188fb6b140 'unsigned long'
|-RecordDecl 0x56188fbe0c68 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x56188fbe0db0 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56188fbe0e18 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56188fbe0ec8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x56188fbe0e70 'union pthread_attr_t' sugar
|   `-RecordType 0x56188fbe0cf0 'union pthread_attr_t'
|     `-Record 0x56188fbe0c68 'pthread_attr_t'
|-RecordDecl 0x56188fbe0f20 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x56188fbe1098 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x56188fbe1110 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x56188fbe11c0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x56188fbe1160 'struct __pthread_internal_list' sugar
|   `-RecordType 0x56188fbe0fa0 'struct __pthread_internal_list'
|     `-Record 0x56188fbe0f20 '__pthread_internal_list'
|-RecordDecl 0x56188fbe1230 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x56188fbe12d8 parent 0x56188fb6af88 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x56188fbe13b0 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56188fbe1418 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x56188fbe1480 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x56188fbe5530 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x56188fbe5598 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x56188fbe5600 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x56188fbe5688 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x56188fbe5740 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x56188fbe5830 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x56188fbe5898 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56188fbe5a20 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x56188fbe59c0 'union pthread_mutex_t' sugar
|   `-RecordType 0x56188fbe12b0 'pthread_mutex_t'
|     `-Record 0x56188fbe1230 ''
|-RecordDecl 0x56188fbe5a90 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x56188fbe5bd0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56188fbe5c38 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56188fbe5cf0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x56188fbe5c90 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x56188fbe5b10 'pthread_mutexattr_t'
|     `-Record 0x56188fbe5a90 ''
|-RecordDecl 0x56188fbe5d60 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x56188fbe5e08 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x56188fbe5ed0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56188fbe5f38 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x56188fbe5fa0 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x56188fbe6008 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x56188fbe6070 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x56188fbe60d8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x56188fbe6140 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x56188fbe61a8 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x56188fbe6260 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe019_power.opt_false-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/safe019_power.opt_false-unreach-call.i:259:3)'
| |-FieldDecl 0x56188fbe6350 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x56188fbe63b8 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x56188fbe6540 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x56188fbe6490 'union pthread_cond_t' sugar
|   `-RecordType 0x56188fbe5de0 'pthread_cond_t'
|     `-Record 0x56188fbe5d60 ''
|-RecordDecl 0x56188fbe65b0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x56188fbe66b0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56188fbe6718 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56188fbe67d0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x56188fbe6770 'union pthread_condattr_t' sugar
|   `-RecordType 0x56188fbe6630 'pthread_condattr_t'
|     `-Record 0x56188fbe65b0 ''
|-TypedefDecl 0x56188fbe6858 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x56188fb6b120 'unsigned int'
|-TypedefDecl 0x56188fbe68c8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x56188fb6b080 'int'
|-RecordDecl 0x56188fbe6920 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x56188fbe69c8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x56188fbe6a90 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56188fbe6af8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x56188fbe6b60 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x56188fbe6bc8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x56188fbe6c30 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x56188fbe6c98 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x56188fbe6d00 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x56188fbe6d68 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x56188fbe6dd0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x56188fbe6e38 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x56188fbe6ea0 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x56188fbe6f50 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe019_power.opt_false-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/safe019_power.opt_false-unreach-call.i:282:3)'
| |-FieldDecl 0x56188fbe6ff8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56188fbe7060 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56188fbe71b0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x56188fbe7150 'union pthread_rwlock_t' sugar
|   `-RecordType 0x56188fbe69a0 'pthread_rwlock_t'
|     `-Record 0x56188fbe6920 ''
|-RecordDecl 0x56188fbe7220 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x56188fbe7360 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x56188fbe73c8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56188fbe7480 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x56188fbe7420 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x56188fbe72a0 'pthread_rwlockattr_t'
|     `-Record 0x56188fbe7220 ''
|-TypedefDecl 0x56188fbe9560 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x56188fb6b084 'volatile int' volatile
|   `-BuiltinType 0x56188fb6b080 'int'
|-RecordDecl 0x56188fbe95b8 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x56188fbe9700 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x56188fbe9768 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56188fbe9820 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x56188fbe97c0 'union pthread_barrier_t' sugar
|   `-RecordType 0x56188fbe9640 'pthread_barrier_t'
|     `-Record 0x56188fbe95b8 ''
|-RecordDecl 0x56188fbe9890 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x56188fbe9990 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56188fbe99f8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56188fbe9ab0 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x56188fbe9a50 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x56188fbe9910 'pthread_barrierattr_t'
|     `-Record 0x56188fbe9890 ''
|-TypedefDecl 0x56188fbe9bc8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x56188fbe9b60 'long [8]' 8 
|   `-BuiltinType 0x56188fb6b0a0 'long'
|-EnumDecl 0x56188fbe9c20 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x56188fbe9ce8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x56188fbe9d38 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x56188fbe9d88 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x56188fbe9e58 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x56188fbe9ea8 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x56188fbe9ef8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x56188fbe9f48 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x56188fbe9fd0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x56188fbe9fb8 <col:26> 'int'
| |   `-DeclRefExpr 0x56188fbe9f98 <col:26> 'int' EnumConstant 0x56188fbe9e58 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x56188fbea058 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x56188fbea040 <col:29> 'int'
| |   `-DeclRefExpr 0x56188fbea020 <col:29> 'int' EnumConstant 0x56188fbe9ea8 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x56188fbea0e0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x56188fbea0c8 <col:30> 'int'
| |   `-DeclRefExpr 0x56188fbea0a8 <col:30> 'int' EnumConstant 0x56188fbe9ef8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x56188fbea168 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x56188fbea150 <col:27> 'int'
|     `-DeclRefExpr 0x56188fbea130 <col:27> 'int' EnumConstant 0x56188fbe9fd0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x56188fbea1b8 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x56188fbea288 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x56188fbea310 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x56188fbea2f8 <col:30> 'int'
| |   `-DeclRefExpr 0x56188fbea2d8 <col:30> 'int' EnumConstant 0x56188fbea288 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x56188fbea360 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x56188fbea3e8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x56188fbea3d0 <col:29> 'int'
|     `-DeclRefExpr 0x56188fbea3b0 <col:29> 'int' EnumConstant 0x56188fbea360 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x56188fbea438 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x56188fbea508 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x56188fbea570 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x56188fbea5c0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x56188fbea610 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x56188fbea6d8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x56188fbea728 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x56188fbea778 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x56188fbea800 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x56188fbea7e8 <col:31> 'int'
|     `-DeclRefExpr 0x56188fbea7c8 <col:31> 'int' EnumConstant 0x56188fbea6d8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x56188fbea850 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x56188fbea918 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x56188fbea968 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x56188fbea9b8 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x56188fbeaa88 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x56188fbeaad8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x56188fbeab28 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x56188fbeabf8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x56188fbeac48 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x56188fbeac98 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x56188fbeaed8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x56188fbeaf40 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x56188fbeafa8 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x56188fbeb0c8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x56188fbeb118 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x56188fbeb1e8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x56188fbeb238 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x56188fbeb288 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x56188fbeb358 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x56188fbeb3a8 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x56188fbeb9d8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x56188fbeb4a0 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x56188fbeb5c0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbeb7c0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x56188fbeb840 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x56188fbeba98 <col:47>
| |-NonNullAttr 0x56188fbebaf0 <col:77, col:94> 1 3
| `-CallbackAttr 0x56188fbebb28 <line:386:12> Implicit 2 3
|-FunctionDecl 0x56188fbebc50 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x56188fbebb80 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x56188fbebea8 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x56188fbebd08 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x56188fbebd88 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x56188fbec078 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x56188fbebf68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x56188fbec120 <col:60>
|-FunctionDecl 0x56188fbec270 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x56188fbec310 <col:54>
| `-ConstAttr 0x56188fbec368 <col:95>
|-FunctionDecl 0x56188fbecda0 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x56188fbec3a0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56188fbec418 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x56188fbece50 <line:395:19>
| `-ConstAttr 0x56188fbecea8 <col:60>
|-FunctionDecl 0x56188fbed078 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x56188fbecf40 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x56188fbed120 <col:71>
| `-NonNullAttr 0x56188fbed178 <col:112, col:126> 1
|-FunctionDecl 0x56188fbed280 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x56188fbed1c8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x56188fbed328 <line:398:22>
| `-NonNullAttr 0x56188fbed380 <col:63, col:77> 1
|-FunctionDecl 0x56188fbed5a8 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x56188fbed3c8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x56188fbed448 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x56188fbed658 <line:401:22>
| `-NonNullAttr 0x56188fbed6b0 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbed8b8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56188fbed6f8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56188fbed778 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x56188fbed968 <line:404:22>
| `-NonNullAttr 0x56188fbed9c0 <col:63, col:77> 1
|-FunctionDecl 0x56188fbedc18 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x56188fbeda08 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x56188fbedab0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x56188fbedcc8 <line:407:22>
| `-NonNullAttr 0x56188fbedd20 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbeef78 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x56188fbeedc0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56188fbeee38 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56188fbef028 <line:410:22>
| `-NonNullAttr 0x56188fbef080 <col:63, col:77> 1
|-FunctionDecl 0x56188fbef2b8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56188fbef0c8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbef158 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x56188fbef368 <line:413:22>
| `-NonNullAttr 0x56188fbef3c0 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbef5f8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56188fbef408 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbef498 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x56188fbef6a8 <col:37>
| `-NonNullAttr 0x56188fbef700 <col:78, col:95> 1 2
|-FunctionDecl 0x56188fbef8e8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbef748 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbef7c8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x56188fbef998 <line:419:22>
| `-NonNullAttr 0x56188fbef9f0 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbefb78 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56188fbefa38 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56188fbefab8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x56188fbefc28 <line:421:22>
| `-NonNullAttr 0x56188fbefc80 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf0e58 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbefcc8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbefd48 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x56188fbf0f08 <line:424:22>
| `-NonNullAttr 0x56188fbf0f60 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbf10e8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56188fbf0fa8 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56188fbf1028 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x56188fbf1198 <line:427:22>
| `-NonNullAttr 0x56188fbf11f0 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf1398 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbf1238 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbf12b8 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x56188fbf1448 <line:430:22>
| `-NonNullAttr 0x56188fbf14a0 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbf1628 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56188fbf14e8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56188fbf1568 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x56188fbf16d8 <line:432:22>
| `-NonNullAttr 0x56188fbf1730 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf1958 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x56188fbf1778 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbf17f8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x56188fbf1a08 <line:435:22>
| |-NonNullAttr 0x56188fbf1a60 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x56188fbf1a98 <col:100> "" ""
|-FunctionDecl 0x56188fbf1ca8 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x56188fbf1ae8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56188fbf1b68 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x56188fbf1d58 <line:438:22>
| |-NonNullAttr 0x56188fbf1db0 <col:63, col:77> 1
| `-DeprecatedAttr 0x56188fbf1df8 <col:97> "" ""
|-FunctionDecl 0x56188fbf1fe8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x56188fbf1e48 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbf1ec0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x56188fbf2098 <line:441:22>
| `-NonNullAttr 0x56188fbf20f0 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbf2270 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x56188fbf2138 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56188fbf21b0 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56188fbf2320 <line:444:22>
| `-NonNullAttr 0x56188fbf2378 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf2668 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x56188fbf23c8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56188fbf2448 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x56188fbf24c0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x56188fbf2720 <line:448:22>
| `-NonNullAttr 0x56188fbf2778 <col:63, col:83> 1 2 3
|-FunctionDecl 0x56188fbf2a28 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x56188fbf27d0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56188fbf2850 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x56188fbf28c8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56188fbf2ae0 <col:43>
| `-NonNullAttr 0x56188fbf2b38 <col:84, col:98> 1
|-FunctionDecl 0x56188fbf2e40 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x56188fbf2b88 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56188fbf2c08 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x56188fbf2c98 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x56188fbf2ef8 <line:453:22>
| `-NonNullAttr 0x56188fbf2f50 <col:63, col:77> 3
|-FunctionDecl 0x56188fbf3228 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56188fbf2f98 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56188fbf3018 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x56188fbf30a8 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x56188fbf32e0 <line:457:22>
| `-NonNullAttr 0x56188fbf3338 <col:63, col:80> 2 3
|-FunctionDecl 0x56188fbf3528 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x56188fbf3388 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56188fbf3408 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x56188fbf35d8 <line:459:22>
|-FunctionDecl 0x56188fbf39a8 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x56188fbf36a0 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x56188fbf3840 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x56188fbf3a58 <col:52, col:69> 1 2
|-FunctionDecl 0x56188fbf3c00 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x56188fbf3ae0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x56188fbf3b60 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x56188fbf3e10 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x56188fbf3cc8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x56188fbf3d48 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x56188fbf3f68 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x56188fbf3ed0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x56188fbf40a8 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x56188fbf4148 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x56188fbf41f8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x56188fbf42e8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x56188fbf4350 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x56188fbf4520 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/safe019_power.opt_false-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x56188fbf4618 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x56188fbf46d0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x56188fbf4670 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x56188fbf41d0 '__pthread_unwind_buf_t'
| |   `-Record 0x56188fbf4148 ''
| `-AlignedAttr 0x56188fbf4728 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x56188fbf47a0 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x56188fbf4900 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x56188fbf4968 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x56188fbf49d0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x56188fbf4a38 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x56188fbf4c40 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x56188fbf4b30 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x56188fbf4e20 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x56188fbf4cf8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x56188fbf4fe0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56188fbf4ed8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x56188fbf5088 <line:488:22>
|-RecordDecl 0x56188fbf50e0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x56188fbf53f8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x56188fbf5258 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x56188fbf52d8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x56188fbf54a8 <col:86>
| `-ReturnsTwiceAttr 0x56188fbf5500 <col:12> Implicit
|-FunctionDecl 0x56188fbf5828 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56188fbf55d0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x56188fbf56e0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x56188fbf58d8 <line:494:22>
| `-NonNullAttr 0x56188fbf5930 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf5aa8 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56188fbf5978 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56188fbf5b50 <line:496:22>
| `-NonNullAttr 0x56188fbf5ba8 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf5cb0 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56188fbf5bf8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56188fbf5d58 <line:498:22>
| `-NonNullAttr 0x56188fbf5db0 <col:52, col:66> 1
|-FunctionDecl 0x56188fbf5ee8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56188fbf5e30 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56188fbf5f90 <line:500:22>
| `-NonNullAttr 0x56188fbf5fe8 <col:52, col:66> 1
|-FunctionDecl 0x56188fbf6228 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56188fbf6038 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56188fbf60c8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56188fbf62d8 <col:36>
| `-NonNullAttr 0x56188fbf6330 <col:66, col:83> 1 2
|-FunctionDecl 0x56188fbf6430 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56188fbf6378 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56188fbf64d8 <line:505:22>
| `-NonNullAttr 0x56188fbf6530 <col:52, col:66> 1
|-FunctionDecl 0x56188fbf67c8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbf65e0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56188fbf6660 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x56188fbf6878 <line:509:22>
| `-NonNullAttr 0x56188fbf68d0 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbf6b98 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x56188fbf6918 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56188fbf6998 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x56188fbf6a18 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x56188fbf6c50 <line:513:22>
| `-NonNullAttr 0x56188fbf6ca8 <col:63, col:80> 1 3
|-FunctionDecl 0x56188fbf6e40 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56188fbf6cf8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56188fbf6ee8 <line:515:22>
| `-NonNullAttr 0x56188fbf6f40 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf7128 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56188fbf6ff0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x56188fbf71d0 <line:517:22>
| `-NonNullAttr 0x56188fbf7228 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf7330 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56188fbf7278 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x56188fbf73d8 <line:519:22>
| `-NonNullAttr 0x56188fbf7430 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf7658 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbf7478 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56188fbf74f8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x56188fbf7708 <line:523:22>
| `-NonNullAttr 0x56188fbf7760 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbf7968 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56188fbf77a8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56188fbf7828 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x56188fbf7a18 <line:526:22>
| `-NonNullAttr 0x56188fbf7a70 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf7c18 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbf7ab8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56188fbf7b38 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x56188fbf7cc8 <line:529:22>
| `-NonNullAttr 0x56188fbf7d20 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbf8f20 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56188fbf7d68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56188fbf8e60 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x56188fbf8fd0 <line:531:22>
| `-NonNullAttr 0x56188fbf9028 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf91d8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbf9078 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56188fbf90f8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x56188fbf9288 <line:535:22>
| `-NonNullAttr 0x56188fbf92e0 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbf9468 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56188fbf9328 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56188fbf93a8 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x56188fbf9518 <line:538:22>
| `-NonNullAttr 0x56188fbf9570 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf9718 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbf95b8 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56188fbf9638 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x56188fbf97c8 <line:542:22>
| `-NonNullAttr 0x56188fbf9820 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbf99a8 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56188fbf9868 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56188fbf98e8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x56188fbf9a58 <line:545:22>
| `-NonNullAttr 0x56188fbf9ab0 <col:63, col:77> 1
|-FunctionDecl 0x56188fbf9c98 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x56188fbf9af8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x56188fbf9b78 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x56188fbf9d48 <line:548:22>
| `-NonNullAttr 0x56188fbf9da0 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbfaf58 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56188fbf9de8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56188fbfae98 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x56188fbfb008 <line:551:22>
| `-NonNullAttr 0x56188fbfb060 <col:63, col:77> 1
|-FunctionDecl 0x56188fbfb398 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x56188fbfb140 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56188fbfb250 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x56188fbfb448 <col:29>
| `-NonNullAttr 0x56188fbfb4a0 <col:70, col:84> 1
|-FunctionDecl 0x56188fbfb618 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56188fbfb4e8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56188fbfb6c0 <line:556:22>
| `-NonNullAttr 0x56188fbfb718 <col:63, col:77> 1
|-FunctionDecl 0x56188fbfb820 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56188fbfb768 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56188fbfb8c8 <line:558:22>
| `-NonNullAttr 0x56188fbfb920 <col:52, col:66> 1
|-FunctionDecl 0x56188fbfba20 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56188fbfb968 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56188fbfbac8 <line:560:19>
| `-NonNullAttr 0x56188fbfbb20 <col:49, col:63> 1
|-FunctionDecl 0x56188fbfbd58 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56188fbfbb68 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56188fbfbbf8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56188fbfbe08 <col:39>
| `-NonNullAttr 0x56188fbfbe90 <col:69, col:86> 1 2
|-FunctionDecl 0x56188fbfbf90 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56188fbfbed8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56188fbfc038 <line:565:22>
| `-NonNullAttr 0x56188fbfc090 <col:52, col:66> 1
|-FunctionDecl 0x56188fbfc190 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56188fbfc0d8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56188fbfc238 <line:567:22>
| `-NonNullAttr 0x56188fbfc290 <col:52, col:66> 1
|-FunctionDecl 0x56188fbfc448 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56188fbfc2d8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56188fbfc368 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56188fbfc4f8 <col:39>
| `-NonNullAttr 0x56188fbfc550 <col:69, col:86> 1 2
|-FunctionDecl 0x56188fbfc650 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56188fbfc598 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56188fbfc6f8 <line:572:22>
| `-NonNullAttr 0x56188fbfc750 <col:52, col:66> 1
|-FunctionDecl 0x56188fbfc938 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x56188fbfc800 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x56188fbfc9e0 <line:574:22>
| `-NonNullAttr 0x56188fbfca38 <col:63, col:77> 1
|-FunctionDecl 0x56188fbfcb40 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x56188fbfca88 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x56188fbfcbe8 <line:576:22>
| `-NonNullAttr 0x56188fbfcc40 <col:63, col:77> 1
|-FunctionDecl 0x56188fbfcea0 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbfcc88 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x56188fbfcd08 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x56188fbfcf50 <line:580:22>
| `-NonNullAttr 0x56188fbfcfa8 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbfd1b8 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x56188fbfcff8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x56188fbfd078 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x56188fbfd268 <line:583:22>
| `-NonNullAttr 0x56188fbfd2c0 <col:63, col:77> 1
|-FunctionDecl 0x56188fbfd468 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbfd308 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x56188fbfd388 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x56188fbfd518 <line:587:22>
| `-NonNullAttr 0x56188fbfd570 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbfd6f8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x56188fbfd5b8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x56188fbfd638 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x56188fbfd7a8 <col:36>
| `-NonNullAttr 0x56188fbfd800 <col:77, col:91> 1
|-FunctionDecl 0x56188fbfdb38 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x56188fbfd8e0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56188fbfd9f0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x56188fbfdbe8 <line:592:22>
| `-NonNullAttr 0x56188fbfdc40 <col:63, col:77> 1
|-FunctionDecl 0x56188fbfddb8 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56188fbfdc88 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56188fbfde60 <line:594:22>
| `-NonNullAttr 0x56188fbfdee0 <col:63, col:77> 1
|-FunctionDecl 0x56188fbfdfe0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56188fbfdf28 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56188fbfe088 <line:596:22>
| `-NonNullAttr 0x56188fbfe0e0 <col:52, col:66> 1
|-FunctionDecl 0x56188fbfe1e0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56188fbfe128 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56188fbfe288 <line:598:22>
| `-NonNullAttr 0x56188fbfe2e0 <col:52, col:66> 1
|-FunctionDecl 0x56188fbfe508 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x56188fbfe328 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56188fbfe3a0 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x56188fbfe5b8 <line:601:22, col:39> 1 2
|-FunctionDecl 0x56188fbfe8e8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56188fbfe638 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56188fbfe6b0 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56188fbfe740 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x56188fbfe9a0 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x56188fbfebb8 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x56188fbfea80 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x56188fbfec60 <line:607:22>
| `-NonNullAttr 0x56188fbfecb8 <col:63, col:77> 1
|-FunctionDecl 0x56188fbfedc0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x56188fbfed08 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x56188fbfee68 <line:609:22>
| `-NonNullAttr 0x56188fbfeef0 <col:63, col:77> 1
|-FunctionDecl 0x56188fbff118 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fbfef38 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x56188fbfefb8 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x56188fbff1c8 <line:613:22>
| `-NonNullAttr 0x56188fbff220 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbff428 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x56188fbff268 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x56188fbff2e8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x56188fbff4d8 <col:37>
| `-NonNullAttr 0x56188fbff530 <col:78, col:92> 1
|-FunctionDecl 0x56188fbff748 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x56188fbff578 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x56188fbff620 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x56188fbff7f8 <line:619:22>
| `-NonNullAttr 0x56188fbff850 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fbffa18 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x56188fbff898 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x56188fbff910 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x56188fbffac8 <line:622:22>
| `-NonNullAttr 0x56188fbffb20 <col:63, col:77> 1
|-FunctionDecl 0x56188fbffdc8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x56188fbffc00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x56188fbffc80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x56188fbffe78 <line:624:22>
| `-NonNullAttr 0x56188fbfff00 <col:63, col:77> 1
|-FunctionDecl 0x56188fc00078 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56188fbfff48 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56188fc00120 <line:626:22>
| `-NonNullAttr 0x56188fc00178 <col:63, col:77> 1
|-FunctionDecl 0x56188fc00280 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56188fc001c8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56188fc00328 <line:628:22>
| `-NonNullAttr 0x56188fc00380 <col:52, col:66> 1
|-FunctionDecl 0x56188fc00480 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56188fc003c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56188fc00528 <line:630:22>
| `-NonNullAttr 0x56188fc00580 <col:52, col:66> 1
|-FunctionDecl 0x56188fc00680 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56188fc005c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56188fc00728 <line:632:22>
| `-NonNullAttr 0x56188fc00780 <col:52, col:66> 1
|-FunctionDecl 0x56188fc00b58 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x56188fc00860 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x56188fc00970 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x56188fc009f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x56188fc00c10 <line:636:22>
| `-NonNullAttr 0x56188fc00c68 <col:63, col:77> 1
|-FunctionDecl 0x56188fc00de8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x56188fc00cb8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x56188fc00e90 <line:638:22>
| `-NonNullAttr 0x56188fc00f10 <col:63, col:77> 1
|-FunctionDecl 0x56188fc01010 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x56188fc00f58 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x56188fc010b8 <line:640:22>
| `-NonNullAttr 0x56188fc01110 <col:52, col:66> 1
|-FunctionDecl 0x56188fc012f8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x56188fc011c0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x56188fc013a0 <line:642:22>
| `-NonNullAttr 0x56188fc013f8 <col:63, col:77> 1
|-FunctionDecl 0x56188fc01500 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x56188fc01448 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x56188fc015a8 <line:644:22>
| `-NonNullAttr 0x56188fc01600 <col:63, col:77> 1
|-FunctionDecl 0x56188fc01828 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56188fc01648 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x56188fc016c8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x56188fc018d8 <line:648:22>
| `-NonNullAttr 0x56188fc01930 <col:63, col:80> 1 2
|-FunctionDecl 0x56188fc01b38 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x56188fc01978 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x56188fc019f8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x56188fc01be8 <line:651:22>
| `-NonNullAttr 0x56188fc01c40 <col:63, col:77> 1
|-FunctionDecl 0x56188fc01fa8 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x56188fc01d20 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x56188fc01e40 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x56188fc02058 <line:654:22>
| `-NonNullAttr 0x56188fc020b0 <col:63, col:77> 1
|-FunctionDecl 0x56188fc02208 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x56188fc020f8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x56188fc022b0 <col:69>
|-FunctionDecl 0x56188fc02428 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x56188fc02318 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x56188fc024d0 <col:72>
|-FunctionDecl 0x56188fc02708 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x56188fc02538 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x56188fc025e8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x56188fc027b8 <col:44>
|-FunctionDecl 0x56188fc029d8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x56188fc02820 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56188fc02898 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x56188fc02a88 <line:661:22>
| `-NonNullAttr 0x56188fc02ae0 <col:63, col:77> 2
|-FunctionDecl 0x56188fc03f50 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x56188fc02bc0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x56188fc02cd0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x56188fc02de0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x56188fc04008 <col:47>
|-FunctionDecl 0x56188fc04110 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x56188fc04078 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56188fc04268 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x56188fc041d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56188fc043c0 <line:668:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x56188fc04328 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56188fc04518 <line:669:1, col:20> col:8 used P3 'void *(void *)'
| `-ParmVarDecl 0x56188fc04480 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56188fc045e0 <line:670:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x56188fc046a0 <line:671:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x56188fc04760 <line:672:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x56188fc04818 <line:673:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x56188fc04898 prev 0x56188fc04818 <line:674:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x56188fc04900 <col:24> 'int' 0
|-VarDecl 0x56188fc04938 <line:675:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x56188fc049b8 prev 0x56188fc04938 <line:676:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x56188fc04a20 <col:27> 'int' 0
|-VarDecl 0x56188fc04a58 <line:677:1, col:5> col:5 used __unbuffered_p0_EBX 'int'
|-VarDecl 0x56188fc04ad8 prev 0x56188fc04a58 <line:678:1, col:27> col:5 used __unbuffered_p0_EBX 'int' cinit
| `-IntegerLiteral 0x56188fc04b40 <col:27> 'int' 0
|-VarDecl 0x56188fc04b78 <line:679:1, col:5> col:5 used __unbuffered_p2_EAX 'int'
|-VarDecl 0x56188fc04bf8 prev 0x56188fc04b78 <line:680:1, col:27> col:5 used __unbuffered_p2_EAX 'int' cinit
| `-IntegerLiteral 0x56188fc04c60 <col:27> 'int' 0
|-VarDecl 0x56188fc04c90 <line:681:1, col:7> col:7 __unbuffered_p2_EAX$flush_delayed '_Bool'
|-VarDecl 0x56188fc04d10 <line:682:1, col:5> col:5 __unbuffered_p2_EAX$mem_tmp 'int'
|-VarDecl 0x56188fc04d88 <line:683:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd0 '_Bool'
|-VarDecl 0x56188fc04e00 <line:684:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd1 '_Bool'
|-VarDecl 0x56188fc04e78 <line:685:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd2 '_Bool'
|-VarDecl 0x56188fc04f20 <line:686:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd3 '_Bool'
|-VarDecl 0x56188fc04f98 <line:687:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd4 '_Bool'
|-VarDecl 0x56188fc05010 <line:688:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd0 '_Bool'
|-VarDecl 0x56188fc05088 <line:689:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd1 '_Bool'
|-VarDecl 0x56188fc05100 <line:690:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd2 '_Bool'
|-VarDecl 0x56188fc05178 <line:691:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd3 '_Bool'
|-VarDecl 0x56188fc051f0 <line:692:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd4 '_Bool'
|-VarDecl 0x56188fc05268 <line:693:1, col:7> col:7 used __unbuffered_p2_EAX$read_delayed '_Bool'
|-VarDecl 0x56188fc052e8 <line:694:1, col:6> col:6 used __unbuffered_p2_EAX$read_delayed_var 'int *'
|-VarDecl 0x56188fc05368 <line:695:1, col:5> col:5 __unbuffered_p2_EAX$w_buff0 'int'
|-VarDecl 0x56188fc053e0 <line:696:1, col:7> col:7 __unbuffered_p2_EAX$w_buff0_used '_Bool'
|-VarDecl 0x56188fc05460 <line:697:1, col:5> col:5 __unbuffered_p2_EAX$w_buff1 'int'
|-VarDecl 0x56188fc054d8 <line:698:1, col:7> col:7 __unbuffered_p2_EAX$w_buff1_used '_Bool'
|-VarDecl 0x56188fc05550 <line:699:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x56188fc055c8 <line:700:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x56188fc05648 <line:701:1, col:5> col:5 used x 'int'
|-VarDecl 0x56188fc056c8 prev 0x56188fc05648 <line:702:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x56188fc05730 <col:9> 'int' 0
|-VarDecl 0x56188fc05760 <line:703:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x56188fc057e0 <line:704:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x56188fc05858 <line:705:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x56188fc058d0 <line:706:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x56188fc05948 <line:707:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x56188fc059c0 <line:708:1, col:7> col:7 used x$r_buff0_thd3 '_Bool'
|-VarDecl 0x56188fc05a38 <line:709:1, col:7> col:7 used x$r_buff0_thd4 '_Bool'
|-VarDecl 0x56188fc05ab0 <line:710:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x56188fc05b28 <line:711:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x56188fc05ba0 <line:712:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x56188fc05c18 <line:713:1, col:7> col:7 used x$r_buff1_thd3 '_Bool'
|-VarDecl 0x56188fc05c90 <line:714:1, col:7> col:7 used x$r_buff1_thd4 '_Bool'
|-VarDecl 0x56188fc05d08 <line:715:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x56188fc05d88 <line:716:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x56188fc05e08 <line:717:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x56188fc05e80 <line:718:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x56188fc05f30 <line:719:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x56188fc05fa8 <line:720:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x56188fc06028 <line:721:1, col:5> col:5 used y 'int'
|-VarDecl 0x56188fc060a8 prev 0x56188fc06028 <line:722:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x56188fc06110 <col:9> 'int' 0
|-VarDecl 0x56188fc06140 <line:723:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x56188fc061b8 <line:724:1, col:7> col:7 used weak$$choice1 '_Bool'
|-VarDecl 0x56188fc06230 <line:725:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x56188fc06348 prev 0x56188fc04110 <line:726:1, line:753:1> line:726:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x56188fc062b0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56188fc092b8 <line:727:1, line:753:1>
|   |-CallExpr 0x56188fc06458 <line:728:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc06440 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc063f0 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc064d0 <line:729:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56188fc06478 <col:3> 'int' lvalue Var 0x56188fc049b8 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x56188fc064b8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc06498 <col:25> 'int' lvalue Var 0x56188fc060a8 'y' 'int'
|   |-CallExpr 0x56188fc06528 <line:730:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc06510 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc064f0 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc06580 <line:731:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc06568 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc06548 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc06648 <line:732:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc065a0 <col:3> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x56188fc06628 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56188fc06610 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56188fc065c0 <col:19> '_Bool (void)' Function 0x56188fbaac80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56188fc066e0 <line:733:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc06668 <col:3> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x56188fc066c0 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56188fc066a8 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56188fc06688 <col:19> '_Bool (void)' Function 0x56188fbaac80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56188fc06758 <line:734:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc06700 <col:3> '_Bool' lvalue Var 0x56188fc05760 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc06740 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc06720 <col:21> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x56188fc067d0 <line:735:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56188fc06778 <col:3> 'int' lvalue Var 0x56188fc057e0 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x56188fc067b8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc06798 <col:15> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc06c08 <line:736:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x56188fc067f0 <col:3> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   | `-ConditionalOperator 0x56188fc06bd8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x56188fc06a00 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x56188fc06920 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x56188fc06848 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x56188fc06830 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x56188fc06810 <col:8> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x56188fc06900 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x56188fc06898 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x56188fc06880 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x56188fc06860 <col:27> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x56188fc068e8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x56188fc068d0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x56188fc068b0 <col:46> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x56188fc069e0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x56188fc06978 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x56188fc06960 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x56188fc06940 <col:65> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x56188fc069c8 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x56188fc069b0 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x56188fc06990 <col:84> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc06bc0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc06a20 <col:101> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |   `-ParenExpr 0x56188fc06ba0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x56188fc06b70 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x56188fc06ae0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56188fc06a98 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56188fc06a80 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56188fc06a40 <col:106> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56188fc06ac8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56188fc06ab0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56188fc06a60 <col:124> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc06b40 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc06b00 <col:141> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x56188fc06b58 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc06b20 <col:153> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56188fc07130 <line:737:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56188fc06c28 <col:3> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x56188fc07100 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56188fc070d0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56188fc070b8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56188fc06c48 <col:15> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc070e8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc06c68 <col:31> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56188fc07098 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56188fc07068 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56188fc06e78 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56188fc06d98 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56188fc06cc0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56188fc06ca8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56188fc06c88 <col:45> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56188fc06d78 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56188fc06d10 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56188fc06cf8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56188fc06cd8 <col:64> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x56188fc06d60 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56188fc06d48 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56188fc06d28 <col:83> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56188fc06e58 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56188fc06df0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56188fc06dd8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56188fc06db8 <col:102> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x56188fc06e40 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56188fc06e28 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56188fc06e08 <col:121> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc07050 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc06e98 <col:138> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x56188fc07030 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56188fc07000 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56188fc06f70 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56188fc06f10 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56188fc06ef8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56188fc06eb8 <col:151> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56188fc06f58 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56188fc06f40 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56188fc06ed8 <col:169> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x56188fc06fd0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56188fc06f90 <col:186> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x56188fc06fe8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56188fc06fb0 <col:198> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |-BinaryOperator 0x56188fc07640 <line:738:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56188fc07150 <col:3> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x56188fc07610 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56188fc075e0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56188fc075c8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56188fc07170 <col:15> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc075f8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc07190 <col:31> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x56188fc075a8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56188fc07578 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56188fc073a0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56188fc072c0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56188fc071e8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56188fc071d0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56188fc071b0 <col:45> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56188fc072a0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56188fc07238 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56188fc07220 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56188fc07200 <col:64> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x56188fc07288 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56188fc07270 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56188fc07250 <col:83> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56188fc07380 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56188fc07318 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56188fc07300 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56188fc072e0 <col:102> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x56188fc07368 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56188fc07350 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56188fc07330 <col:121> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc07560 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc073c0 <col:138> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x56188fc07540 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56188fc07510 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56188fc07480 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56188fc07438 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56188fc07420 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56188fc073e0 <col:151> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56188fc07468 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56188fc07450 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56188fc07400 <col:169> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x56188fc074e0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56188fc074a0 <col:186> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x56188fc074f8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56188fc074c0 <col:198> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56188fc07be8 <line:739:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc07660 <col:3> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc07bd0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc07ba0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56188fc07b58 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc07b40 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc07680 <col:20> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc07b88 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc07b70 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc076a0 <col:36> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x56188fc07b20 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56188fc07af0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56188fc078b0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56188fc077d0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56188fc076f8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56188fc076e0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56188fc076c0 <col:55> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56188fc077b0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56188fc07748 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56188fc07730 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56188fc07710 <col:74> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x56188fc07798 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56188fc07780 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56188fc07760 <col:93> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56188fc07890 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56188fc07828 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56188fc07810 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56188fc077f0 <col:112> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x56188fc07878 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56188fc07860 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56188fc07840 <col:131> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x56188fc07ad8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56188fc07ac0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc078d0 <col:148> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x56188fc07aa0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56188fc07a70 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56188fc07990 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56188fc07948 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56188fc07930 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56188fc078f0 <col:166> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56188fc07978 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56188fc07960 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56188fc07910 <col:184> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x56188fc07a28 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56188fc079e0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56188fc079b0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56188fc07a58 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56188fc07a40 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56188fc07a08 <col:212> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56188fc081c8 <line:740:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc07c08 <col:3> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc081b0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc08180 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56188fc08138 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc08120 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc07c28 <col:20> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc08168 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc08150 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc07c48 <col:36> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x56188fc08100 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56188fc080d0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56188fc07e58 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56188fc07d78 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56188fc07ca0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56188fc07c88 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56188fc07c68 <col:55> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56188fc07d58 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56188fc07cf0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56188fc07cd8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56188fc07cb8 <col:74> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x56188fc07d40 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56188fc07d28 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56188fc07d08 <col:93> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56188fc07e38 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56188fc07dd0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56188fc07db8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56188fc07d98 <col:112> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x56188fc07e20 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56188fc07e08 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56188fc07de8 <col:131> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x56188fc080b8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56188fc080a0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc07e78 <col:148> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x56188fc08080 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56188fc08050 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56188fc07f50 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56188fc07ef0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56188fc07ed8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56188fc07e98 <col:166> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56188fc07f20 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56188fc07f08 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56188fc07eb8 <col:184> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x56188fc08020 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56188fc07fa0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56188fc07f70 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56188fc08038 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56188fc07ff8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56188fc07fc8 <col:219> 'int' 0
|   |-BinaryOperator 0x56188fc08770 <line:741:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc081e8 <col:3> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc08758 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc08728 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56188fc086e0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc086c8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc08208 <col:20> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc08710 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc086f8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc08228 <col:36> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x56188fc086a8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56188fc08678 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56188fc08438 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56188fc08358 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56188fc08280 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56188fc08268 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56188fc08248 <col:55> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56188fc08338 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56188fc082d0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56188fc082b8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56188fc08298 <col:74> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x56188fc08320 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56188fc08308 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56188fc082e8 <col:93> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56188fc08418 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56188fc083b0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56188fc08398 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56188fc08378 <col:112> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x56188fc08400 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56188fc083e8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56188fc083c8 <col:131> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x56188fc08660 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56188fc08648 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc08458 <col:148> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x56188fc08628 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56188fc085f8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56188fc08518 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56188fc084d0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56188fc084b8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56188fc08478 <col:166> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56188fc08500 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56188fc084e8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56188fc08498 <col:184> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x56188fc085b0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56188fc08568 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56188fc08538 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56188fc085e0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56188fc085c8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56188fc08590 <col:212> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56188fc08d38 <line:742:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc08790 <col:3> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc08d20 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc08cf0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56188fc08ca8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc08c90 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc087b0 <col:20> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc08cd8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc08cc0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc087d0 <col:36> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x56188fc08c70 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56188fc08c40 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56188fc089e0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56188fc08900 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56188fc08828 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56188fc08810 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56188fc087f0 <col:55> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56188fc088e0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56188fc08878 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56188fc08860 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56188fc08840 <col:74> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x56188fc088c8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56188fc088b0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56188fc08890 <col:93> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56188fc089c0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56188fc08958 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56188fc08940 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56188fc08920 <col:112> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x56188fc089a8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56188fc08990 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56188fc08970 <col:131> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x56188fc08c28 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56188fc08c10 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc08a00 <col:148> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x56188fc08bf0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56188fc08bc0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56188fc08ac0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56188fc08a78 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56188fc08a60 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56188fc08a20 <col:166> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56188fc08aa8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56188fc08a90 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56188fc08a40 <col:184> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x56188fc08b90 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56188fc08b10 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56188fc08ae0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56188fc08ba8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56188fc08b68 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56188fc08b38 <col:219> 'int' 0
|   |-BinaryOperator 0x56188fc08db0 <line:743:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56188fc08d58 <col:3> 'int' lvalue Var 0x56188fc04ad8 '__unbuffered_p0_EBX' 'int'
|   | `-ImplicitCastExpr 0x56188fc08d98 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc08d78 <col:25> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc08ee0 <line:744:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x56188fc08dd0 <col:3> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   | `-ConditionalOperator 0x56188fc08eb0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x56188fc08e68 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56188fc08e50 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56188fc08df0 <col:7> '_Bool' lvalue Var 0x56188fc05760 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc08e80 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc08e10 <col:25> 'int' lvalue Var 0x56188fc057e0 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x56188fc08e98 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x56188fc08e30 <col:37> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc08f88 <line:745:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc08f00 <col:3> '_Bool' lvalue Var 0x56188fc05760 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x56188fc08f60 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56188fc08f20 <col:28> 'int' 0
|   |-CallExpr 0x56188fc08fe0 <line:746:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc08fc8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc08fa8 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc09038 <line:747:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc09020 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc09000 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x56188fc09090 <line:748:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc09078 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc09058 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc090e8 <line:749:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc090d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc090b0 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc091a0 <line:750:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56188fc09108 <col:3> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56188fc09180 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56188fc09168 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc09128 <col:22> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56188fc09148 <col:41> 'int' 1
|   |-CallExpr 0x56188fc091f8 <line:751:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc091e0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc091c0 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56188fc092a8 <line:752:3, col:36>
|     `-CallExpr 0x56188fc09288 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56188fc09270 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56188fc09218 <col:10> 'void *(void)' Function 0x56188fbaafc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56188fc09440 prev 0x56188fc04268 <line:754:1, line:780:1> line:754:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x56188fc093a8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56188fc0ab58 <line:755:1, line:780:1>
|   |-CallExpr 0x56188fc09520 <line:756:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc09508 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc094e8 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc09598 <line:757:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56188fc09540 <col:3> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x56188fc09580 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc09560 <col:15> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |-BinaryOperator 0x56188fc095f8 <line:758:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56188fc095b8 <col:3> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x56188fc095d8 <col:15> 'int' 1
|   |-BinaryOperator 0x56188fc09670 <line:759:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc09618 <col:3> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc09658 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc09638 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56188fc09708 <line:760:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc09690 <col:3> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x56188fc096e0 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56188fc096b0 <col:27> 'int' 1
|   |-CallExpr 0x56188fc09888 <line:761:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x56188fc09870 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56188fc09728 <col:3> 'void (int)' Function 0x56188fbab238 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x56188fc09828 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x56188fc09808 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x56188fc097e8 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x56188fc097a0 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x56188fc09788 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56188fc09748 <col:23> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x56188fc097d0 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x56188fc097b8 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x56188fc09768 <col:41> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56188fc09908 <line:762:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc098b0 <col:3> '_Bool' lvalue Var 0x56188fc05ab0 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc098f0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc098d0 <col:20> '_Bool' lvalue Var 0x56188fc05858 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x56188fc09980 <line:763:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc09928 <col:3> '_Bool' lvalue Var 0x56188fc05b28 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc09968 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc09948 <col:20> '_Bool' lvalue Var 0x56188fc058d0 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56188fc099f8 <line:764:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc099a0 <col:3> '_Bool' lvalue Var 0x56188fc05ba0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc099e0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc099c0 <col:20> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56188fc09a70 <line:765:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc09a18 <col:3> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc09a58 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc09a38 <col:20> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56188fc09ae8 <line:766:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc09a90 <col:3> '_Bool' lvalue Var 0x56188fc05c90 'x$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc09ad0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc09ab0 <col:20> '_Bool' lvalue Var 0x56188fc05a38 'x$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x56188fc09b80 <line:767:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc09b08 <col:3> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x56188fc09b58 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56188fc09b28 <col:27> 'int' 1
|   |-CallExpr 0x56188fc09bd8 <line:768:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc09bc0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc09ba0 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc09c30 <line:769:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc09c18 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc09bf8 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc09f18 <line:770:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56188fc09c50 <col:3> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   | `-ConditionalOperator 0x56188fc09ee8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56188fc09d10 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56188fc09cc8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56188fc09cb0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56188fc09c70 <col:7> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56188fc09cf8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56188fc09ce0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56188fc09c90 <col:25> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc09ed0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc09d30 <col:42> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56188fc09eb0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56188fc09e80 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56188fc09df0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56188fc09da8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56188fc09d90 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56188fc09d50 <col:55> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56188fc09dd8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56188fc09dc0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56188fc09d70 <col:73> '_Bool' lvalue Var 0x56188fc05ba0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc09e50 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc09e10 <col:90> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56188fc09e68 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc09e30 <col:102> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc0a138 <line:771:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc09f38 <col:3> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0a120 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0a0f0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56188fc0a010 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56188fc09fc8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56188fc09fb0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56188fc09f70 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56188fc09ff8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56188fc09fe0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56188fc09f90 <col:38> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0a0a8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc0a060 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc0a030 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc0a0d8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc0a0c0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0a088 <col:66> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56188fc0a420 <line:772:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0a158 <col:3> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0a408 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0a3d8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56188fc0a2f8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56188fc0a218 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56188fc0a1d0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56188fc0a1b8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56188fc0a178 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56188fc0a200 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56188fc0a1e8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56188fc0a198 <col:38> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56188fc0a2d8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56188fc0a290 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56188fc0a278 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56188fc0a238 <col:56> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56188fc0a2c0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56188fc0a2a8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56188fc0a258 <col:74> '_Bool' lvalue Var 0x56188fc05ba0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0a390 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc0a348 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc0a318 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc0a3c0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc0a3a8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0a370 <col:102> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56188fc0a628 <line:773:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0a440 <col:3> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0a610 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0a5e0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56188fc0a500 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56188fc0a4b8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56188fc0a4a0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56188fc0a460 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56188fc0a4e8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56188fc0a4d0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56188fc0a480 <col:38> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0a598 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc0a550 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc0a520 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc0a5c8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc0a5b0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0a578 <col:66> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56188fc0a910 <line:774:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0a648 <col:3> '_Bool' lvalue Var 0x56188fc05ba0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0a8f8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0a8c8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56188fc0a7e8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56188fc0a708 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56188fc0a6c0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56188fc0a6a8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56188fc0a668 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56188fc0a6f0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56188fc0a6d8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56188fc0a688 <col:38> '_Bool' lvalue Var 0x56188fc05948 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56188fc0a7c8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56188fc0a780 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56188fc0a768 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56188fc0a728 <col:56> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56188fc0a7b0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56188fc0a798 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56188fc0a748 <col:74> '_Bool' lvalue Var 0x56188fc05ba0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0a880 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc0a838 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc0a808 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc0a8b0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc0a898 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0a860 <col:102> '_Bool' lvalue Var 0x56188fc05ba0 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x56188fc0a968 <line:775:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc0a950 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc0a930 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc0a9c0 <line:776:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc0a9a8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc0a988 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc0aa78 <line:777:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56188fc0a9e0 <col:3> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56188fc0aa58 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56188fc0aa40 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc0aa00 <col:22> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56188fc0aa20 <col:41> 'int' 1
|   |-CallExpr 0x56188fc0aad0 <line:778:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc0aab8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc0aa98 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56188fc0ab48 <line:779:3, col:36>
|     `-CallExpr 0x56188fc0ab28 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56188fc0ab10 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56188fc0aaf0 <col:10> 'void *(void)' Function 0x56188fbaafc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56188fc0acd8 prev 0x56188fc043c0 <line:781:1, line:816:1> line:781:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x56188fc0ac40 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56188fc10278 <line:782:1, line:816:1>
|   |-CallExpr 0x56188fc0adb8 <line:783:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc0ada0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc0ad80 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc0ae50 <line:784:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0add8 <col:3> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x56188fc0ae30 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56188fc0ae18 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56188fc0adf8 <col:19> '_Bool (void)' Function 0x56188fbaac80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56188fc0aee8 <line:785:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0ae70 <col:3> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x56188fc0aec8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56188fc0aeb0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56188fc0ae90 <col:19> '_Bool (void)' Function 0x56188fbaac80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56188fc0af80 <line:786:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0af08 <col:3> '_Bool' lvalue Var 0x56188fc05760 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0af48 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc0af28 <col:21> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x56188fc0aff8 <line:787:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56188fc0afa0 <col:3> 'int' lvalue Var 0x56188fc057e0 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x56188fc0afe0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc0afc0 <col:15> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc0b090 <line:788:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0b018 <col:3> '_Bool' lvalue Var 0x56188fc061b8 'weak$$choice1' '_Bool'
|   | `-CallExpr 0x56188fc0b070 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56188fc0b058 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56188fc0b038 <col:19> '_Bool (void)' Function 0x56188fbaac80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56188fc0bab8 <line:789:3, col:363> 'int' '='
|   | |-DeclRefExpr 0x56188fc0b0b0 <col:3> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   | `-ConditionalOperator 0x56188fc0ba88 <col:7, col:363> 'int'
|   |   |-UnaryOperator 0x56188fc0b108 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | `-ImplicitCastExpr 0x56188fc0b0f0 <col:8> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56188fc0b0d0 <col:8> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc0ba70 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc0b120 <col:25> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |   `-ParenExpr 0x56188fc0ba50 <col:29, col:363> 'int'
|   |     `-ConditionalOperator 0x56188fc0ba20 <col:30, col:362> 'int'
|   |       |-BinaryOperator 0x56188fc0b1e0 <col:30, col:48> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56188fc0b198 <col:30> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56188fc0b180 <col:30> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56188fc0b140 <col:30> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56188fc0b1c8 <col:48> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56188fc0b1b0 <col:48> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56188fc0b160 <col:48> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc0ba08 <col:65> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc0b200 <col:65> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x56188fc0b9e8 <col:77, col:362> 'int'
|   |         `-ConditionalOperator 0x56188fc0b9b8 <col:78, col:361> 'int'
|   |           |-BinaryOperator 0x56188fc0b3a0 <col:78, col:134> 'int' '&&'
|   |           | |-BinaryOperator 0x56188fc0b330 <col:78, col:115> 'int' '&&'
|   |           | | |-BinaryOperator 0x56188fc0b2c0 <col:78, col:97> 'int' '&&'
|   |           | | | |-ImplicitCastExpr 0x56188fc0b2a8 <col:78> 'int' <IntegralCast>
|   |           | | | | `-ImplicitCastExpr 0x56188fc0b290 <col:78> '_Bool' <LValueToRValue>
|   |           | | | |   `-DeclRefExpr 0x56188fc0b220 <col:78> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |           | | | `-UnaryOperator 0x56188fc0b278 <col:96, col:97> 'int' prefix '!' cannot overflow
|   |           | | |   `-ImplicitCastExpr 0x56188fc0b260 <col:97> '_Bool' <LValueToRValue>
|   |           | | |     `-DeclRefExpr 0x56188fc0b240 <col:97> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |           | | `-ImplicitCastExpr 0x56188fc0b318 <col:115> 'int' <IntegralCast>
|   |           | |   `-ImplicitCastExpr 0x56188fc0b300 <col:115> '_Bool' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x56188fc0b2e0 <col:115> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |           | `-UnaryOperator 0x56188fc0b388 <col:133, col:134> 'int' prefix '!' cannot overflow
|   |           |   `-ImplicitCastExpr 0x56188fc0b370 <col:134> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56188fc0b350 <col:134> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |           |-ParenExpr 0x56188fc0b588 <col:151, col:211> 'int'
|   |           | `-ConditionalOperator 0x56188fc0b558 <col:152, col:210> 'int'
|   |           |   |-ImplicitCastExpr 0x56188fc0b528 <col:152> 'int' <IntegralCast>
|   |           |   | `-ImplicitCastExpr 0x56188fc0b510 <col:152> '_Bool' <LValueToRValue>
|   |           |   |   `-DeclRefExpr 0x56188fc0b3c0 <col:152> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   |           |   |-ImplicitCastExpr 0x56188fc0b540 <col:168> 'int' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x56188fc0b3e0 <col:168> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |           |   `-ParenExpr 0x56188fc0b4f0 <col:172, col:210> 'int'
|   |           |     `-ConditionalOperator 0x56188fc0b4c0 <col:173, col:201> 'int'
|   |           |       |-ImplicitCastExpr 0x56188fc0b478 <col:173> 'int' <IntegralCast>
|   |           |       | `-ImplicitCastExpr 0x56188fc0b460 <col:173> '_Bool' <LValueToRValue>
|   |           |       |   `-DeclRefExpr 0x56188fc0b400 <col:173> '_Bool' lvalue Var 0x56188fc061b8 'weak$$choice1' '_Bool'
|   |           |       |-ImplicitCastExpr 0x56188fc0b490 <col:189> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x56188fc0b420 <col:189> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |           |       `-ImplicitCastExpr 0x56188fc0b4a8 <col:201> 'int' <LValueToRValue>
|   |           |         `-DeclRefExpr 0x56188fc0b440 <col:201> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |           `-ParenExpr 0x56188fc0b998 <col:215, col:361> 'int'
|   |             `-ConditionalOperator 0x56188fc0b968 <col:216, col:360> 'int'
|   |               |-BinaryOperator 0x56188fc0b728 <col:216, col:271> 'int' '&&'
|   |               | |-BinaryOperator 0x56188fc0b6b8 <col:216, col:252> 'int' '&&'
|   |               | | |-BinaryOperator 0x56188fc0b648 <col:216, col:234> 'int' '&&'
|   |               | | | |-ImplicitCastExpr 0x56188fc0b600 <col:216> 'int' <IntegralCast>
|   |               | | | | `-ImplicitCastExpr 0x56188fc0b5e8 <col:216> '_Bool' <LValueToRValue>
|   |               | | | |   `-DeclRefExpr 0x56188fc0b5a8 <col:216> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |               | | | `-ImplicitCastExpr 0x56188fc0b630 <col:234> 'int' <IntegralCast>
|   |               | | |   `-ImplicitCastExpr 0x56188fc0b618 <col:234> '_Bool' <LValueToRValue>
|   |               | | |     `-DeclRefExpr 0x56188fc0b5c8 <col:234> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |               | | `-ImplicitCastExpr 0x56188fc0b6a0 <col:252> 'int' <IntegralCast>
|   |               | |   `-ImplicitCastExpr 0x56188fc0b688 <col:252> '_Bool' <LValueToRValue>
|   |               | |     `-DeclRefExpr 0x56188fc0b668 <col:252> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |               | `-UnaryOperator 0x56188fc0b710 <col:270, col:271> 'int' prefix '!' cannot overflow
|   |               |   `-ImplicitCastExpr 0x56188fc0b6f8 <col:271> '_Bool' <LValueToRValue>
|   |               |     `-DeclRefExpr 0x56188fc0b6d8 <col:271> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |               |-ParenExpr 0x56188fc0b838 <col:288, col:326> 'int'
|   |               | `-ConditionalOperator 0x56188fc0b808 <col:289, col:317> 'int'
|   |               |   |-ImplicitCastExpr 0x56188fc0b7c0 <col:289> 'int' <IntegralCast>
|   |               |   | `-ImplicitCastExpr 0x56188fc0b7a8 <col:289> '_Bool' <LValueToRValue>
|   |               |   |   `-DeclRefExpr 0x56188fc0b748 <col:289> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   |               |   |-ImplicitCastExpr 0x56188fc0b7d8 <col:305> 'int' <LValueToRValue>
|   |               |   | `-DeclRefExpr 0x56188fc0b768 <col:305> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |               |   `-ImplicitCastExpr 0x56188fc0b7f0 <col:317> 'int' <LValueToRValue>
|   |               |     `-DeclRefExpr 0x56188fc0b788 <col:317> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |               `-ParenExpr 0x56188fc0b948 <col:330, col:360> 'int'
|   |                 `-ConditionalOperator 0x56188fc0b918 <col:331, col:359> 'int'
|   |                   |-ImplicitCastExpr 0x56188fc0b8d0 <col:331> 'int' <IntegralCast>
|   |                   | `-ImplicitCastExpr 0x56188fc0b8b8 <col:331> '_Bool' <LValueToRValue>
|   |                   |   `-DeclRefExpr 0x56188fc0b858 <col:331> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   |                   |-ImplicitCastExpr 0x56188fc0b8e8 <col:347> 'int' <LValueToRValue>
|   |                   | `-DeclRefExpr 0x56188fc0b878 <col:347> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |                   `-ImplicitCastExpr 0x56188fc0b900 <col:359> 'int' <LValueToRValue>
|   |                     `-DeclRefExpr 0x56188fc0b898 <col:359> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc0c270 <line:790:3, col:305> 'int' '='
|   | |-DeclRefExpr 0x56188fc0bad8 <col:3> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x56188fc0c240 <col:15, col:305> 'int'
|   |   |-ImplicitCastExpr 0x56188fc0c210 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56188fc0c1f8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56188fc0baf8 <col:15> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc0c228 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc0bb18 <col:31> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56188fc0c1d8 <col:43, col:305> 'int'
|   |     `-ConditionalOperator 0x56188fc0c1a8 <col:44, col:304> 'int'
|   |       |-UnaryOperator 0x56188fc0bb70 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | `-ImplicitCastExpr 0x56188fc0bb58 <col:45> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56188fc0bb38 <col:45> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc0c190 <col:62> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc0bb88 <col:62> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x56188fc0c170 <col:74, col:304> 'int'
|   |         `-ConditionalOperator 0x56188fc0c140 <col:75, col:303> 'int'
|   |           |-BinaryOperator 0x56188fc0bc48 <col:75, col:93> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56188fc0bc00 <col:75> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56188fc0bbe8 <col:75> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56188fc0bba8 <col:75> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56188fc0bc30 <col:93> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56188fc0bc18 <col:93> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56188fc0bbc8 <col:93> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x56188fc0c128 <col:110> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56188fc0bc68 <col:110> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |           `-ParenExpr 0x56188fc0c108 <col:122, col:303> 'int'
|   |             `-ConditionalOperator 0x56188fc0c0d8 <col:123, col:302> 'int'
|   |               |-BinaryOperator 0x56188fc0be08 <col:123, col:179> 'int' '&&'
|   |               | |-BinaryOperator 0x56188fc0bd98 <col:123, col:160> 'int' '&&'
|   |               | | |-BinaryOperator 0x56188fc0bd28 <col:123, col:142> 'int' '&&'
|   |               | | | |-ImplicitCastExpr 0x56188fc0bd10 <col:123> 'int' <IntegralCast>
|   |               | | | | `-ImplicitCastExpr 0x56188fc0bcf8 <col:123> '_Bool' <LValueToRValue>
|   |               | | | |   `-DeclRefExpr 0x56188fc0bc88 <col:123> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |               | | | `-UnaryOperator 0x56188fc0bce0 <col:141, col:142> 'int' prefix '!' cannot overflow
|   |               | | |   `-ImplicitCastExpr 0x56188fc0bcc8 <col:142> '_Bool' <LValueToRValue>
|   |               | | |     `-DeclRefExpr 0x56188fc0bca8 <col:142> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |               | | `-ImplicitCastExpr 0x56188fc0bd80 <col:160> 'int' <IntegralCast>
|   |               | |   `-ImplicitCastExpr 0x56188fc0bd68 <col:160> '_Bool' <LValueToRValue>
|   |               | |     `-DeclRefExpr 0x56188fc0bd48 <col:160> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |               | `-UnaryOperator 0x56188fc0bdf0 <col:178, col:179> 'int' prefix '!' cannot overflow
|   |               |   `-ImplicitCastExpr 0x56188fc0bdd8 <col:179> '_Bool' <LValueToRValue>
|   |               |     `-DeclRefExpr 0x56188fc0bdb8 <col:179> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |               |-ImplicitCastExpr 0x56188fc0c0c0 <col:196> 'int' <LValueToRValue>
|   |               | `-DeclRefExpr 0x56188fc0be28 <col:196> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |               `-ParenExpr 0x56188fc0c0a0 <col:208, col:302> 'int'
|   |                 `-ConditionalOperator 0x56188fc0c070 <col:209, col:293> 'int'
|   |                   |-BinaryOperator 0x56188fc0bfe0 <col:209, col:264> 'int' '&&'
|   |                   | |-BinaryOperator 0x56188fc0bf58 <col:209, col:245> 'int' '&&'
|   |                   | | |-BinaryOperator 0x56188fc0bee8 <col:209, col:227> 'int' '&&'
|   |                   | | | |-ImplicitCastExpr 0x56188fc0bea0 <col:209> 'int' <IntegralCast>
|   |                   | | | | `-ImplicitCastExpr 0x56188fc0be88 <col:209> '_Bool' <LValueToRValue>
|   |                   | | | |   `-DeclRefExpr 0x56188fc0be48 <col:209> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                   | | | `-ImplicitCastExpr 0x56188fc0bed0 <col:227> 'int' <IntegralCast>
|   |                   | | |   `-ImplicitCastExpr 0x56188fc0beb8 <col:227> '_Bool' <LValueToRValue>
|   |                   | | |     `-DeclRefExpr 0x56188fc0be68 <col:227> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                   | | `-ImplicitCastExpr 0x56188fc0bf40 <col:245> 'int' <IntegralCast>
|   |                   | |   `-ImplicitCastExpr 0x56188fc0bf28 <col:245> '_Bool' <LValueToRValue>
|   |                   | |     `-DeclRefExpr 0x56188fc0bf08 <col:245> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                   | `-UnaryOperator 0x56188fc0bfc8 <col:263, col:264> 'int' prefix '!' cannot overflow
|   |                   |   `-ImplicitCastExpr 0x56188fc0bfb0 <col:264> '_Bool' <LValueToRValue>
|   |                   |     `-DeclRefExpr 0x56188fc0bf90 <col:264> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                   |-ImplicitCastExpr 0x56188fc0c040 <col:281> 'int' <LValueToRValue>
|   |                   | `-DeclRefExpr 0x56188fc0c000 <col:281> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |                   `-ImplicitCastExpr 0x56188fc0c058 <col:293> 'int' <LValueToRValue>
|   |                     `-DeclRefExpr 0x56188fc0c020 <col:293> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |-BinaryOperator 0x56188fc0ca10 <line:791:3, col:305> 'int' '='
|   | |-DeclRefExpr 0x56188fc0c290 <col:3> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x56188fc0c9e0 <col:15, col:305> 'int'
|   |   |-ImplicitCastExpr 0x56188fc0c9b0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56188fc0c998 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56188fc0c2b0 <col:15> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc0c9c8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc0c2d0 <col:31> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x56188fc0c978 <col:43, col:305> 'int'
|   |     `-ConditionalOperator 0x56188fc0c948 <col:44, col:304> 'int'
|   |       |-UnaryOperator 0x56188fc0c328 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | `-ImplicitCastExpr 0x56188fc0c310 <col:45> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56188fc0c2f0 <col:45> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc0c930 <col:62> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc0c340 <col:62> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x56188fc0c910 <col:74, col:304> 'int'
|   |         `-ConditionalOperator 0x56188fc0c8e0 <col:75, col:303> 'int'
|   |           |-BinaryOperator 0x56188fc0c400 <col:75, col:93> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56188fc0c3b8 <col:75> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56188fc0c3a0 <col:75> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56188fc0c360 <col:75> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56188fc0c3e8 <col:93> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56188fc0c3d0 <col:93> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56188fc0c380 <col:93> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x56188fc0c8c8 <col:110> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56188fc0c420 <col:110> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |           `-ParenExpr 0x56188fc0c8a8 <col:122, col:303> 'int'
|   |             `-ConditionalOperator 0x56188fc0c878 <col:123, col:302> 'int'
|   |               |-BinaryOperator 0x56188fc0c5c0 <col:123, col:179> 'int' '&&'
|   |               | |-BinaryOperator 0x56188fc0c550 <col:123, col:160> 'int' '&&'
|   |               | | |-BinaryOperator 0x56188fc0c4e0 <col:123, col:142> 'int' '&&'
|   |               | | | |-ImplicitCastExpr 0x56188fc0c4c8 <col:123> 'int' <IntegralCast>
|   |               | | | | `-ImplicitCastExpr 0x56188fc0c4b0 <col:123> '_Bool' <LValueToRValue>
|   |               | | | |   `-DeclRefExpr 0x56188fc0c440 <col:123> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |               | | | `-UnaryOperator 0x56188fc0c498 <col:141, col:142> 'int' prefix '!' cannot overflow
|   |               | | |   `-ImplicitCastExpr 0x56188fc0c480 <col:142> '_Bool' <LValueToRValue>
|   |               | | |     `-DeclRefExpr 0x56188fc0c460 <col:142> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |               | | `-ImplicitCastExpr 0x56188fc0c538 <col:160> 'int' <IntegralCast>
|   |               | |   `-ImplicitCastExpr 0x56188fc0c520 <col:160> '_Bool' <LValueToRValue>
|   |               | |     `-DeclRefExpr 0x56188fc0c500 <col:160> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |               | `-UnaryOperator 0x56188fc0c5a8 <col:178, col:179> 'int' prefix '!' cannot overflow
|   |               |   `-ImplicitCastExpr 0x56188fc0c590 <col:179> '_Bool' <LValueToRValue>
|   |               |     `-DeclRefExpr 0x56188fc0c570 <col:179> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |               |-ImplicitCastExpr 0x56188fc0c860 <col:196> 'int' <LValueToRValue>
|   |               | `-DeclRefExpr 0x56188fc0c5e0 <col:196> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |               `-ParenExpr 0x56188fc0c840 <col:208, col:302> 'int'
|   |                 `-ConditionalOperator 0x56188fc0c810 <col:209, col:293> 'int'
|   |                   |-BinaryOperator 0x56188fc0c780 <col:209, col:264> 'int' '&&'
|   |                   | |-BinaryOperator 0x56188fc0c710 <col:209, col:245> 'int' '&&'
|   |                   | | |-BinaryOperator 0x56188fc0c6a0 <col:209, col:227> 'int' '&&'
|   |                   | | | |-ImplicitCastExpr 0x56188fc0c658 <col:209> 'int' <IntegralCast>
|   |                   | | | | `-ImplicitCastExpr 0x56188fc0c640 <col:209> '_Bool' <LValueToRValue>
|   |                   | | | |   `-DeclRefExpr 0x56188fc0c600 <col:209> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                   | | | `-ImplicitCastExpr 0x56188fc0c688 <col:227> 'int' <IntegralCast>
|   |                   | | |   `-ImplicitCastExpr 0x56188fc0c670 <col:227> '_Bool' <LValueToRValue>
|   |                   | | |     `-DeclRefExpr 0x56188fc0c620 <col:227> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                   | | `-ImplicitCastExpr 0x56188fc0c6f8 <col:245> 'int' <IntegralCast>
|   |                   | |   `-ImplicitCastExpr 0x56188fc0c6e0 <col:245> '_Bool' <LValueToRValue>
|   |                   | |     `-DeclRefExpr 0x56188fc0c6c0 <col:245> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                   | `-UnaryOperator 0x56188fc0c768 <col:263, col:264> 'int' prefix '!' cannot overflow
|   |                   |   `-ImplicitCastExpr 0x56188fc0c750 <col:264> '_Bool' <LValueToRValue>
|   |                   |     `-DeclRefExpr 0x56188fc0c730 <col:264> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                   |-ImplicitCastExpr 0x56188fc0c7e0 <col:281> 'int' <LValueToRValue>
|   |                   | `-DeclRefExpr 0x56188fc0c7a0 <col:281> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |                   `-ImplicitCastExpr 0x56188fc0c7f8 <col:293> 'int' <LValueToRValue>
|   |                     `-DeclRefExpr 0x56188fc0c7c0 <col:293> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56188fc0d300 <line:792:3, col:349> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0ca30 <col:3> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0d2e8 <col:20, col:349> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0d2b8 <col:20, col:349> 'int'
|   |     |-ImplicitCastExpr 0x56188fc0d270 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc0d258 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc0ca50 <col:20> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0d2a0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc0d288 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc0ca70 <col:36> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x56188fc0d238 <col:53, col:349> 'int'
|   |       `-ConditionalOperator 0x56188fc0d208 <col:54, col:348> 'int'
|   |         |-UnaryOperator 0x56188fc0cac8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | `-ImplicitCastExpr 0x56188fc0cab0 <col:55> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc0ca90 <col:55> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         |-ImplicitCastExpr 0x56188fc0d1f0 <col:72> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56188fc0d1d8 <col:72> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc0cae0 <col:72> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x56188fc0d1b8 <col:89, col:348> 'int'
|   |           `-ConditionalOperator 0x56188fc0d188 <col:90, col:347> 'int'
|   |             |-BinaryOperator 0x56188fc0cba0 <col:90, col:108> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56188fc0cb58 <col:90> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56188fc0cb40 <col:90> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56188fc0cb00 <col:90> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56188fc0cb88 <col:108> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56188fc0cb70 <col:108> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56188fc0cb20 <col:108> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x56188fc0d170 <col:125, col:132> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56188fc0cbf0 <col:125, col:132> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56188fc0cbc0 <col:132> 'int' 0
|   |             `-ParenExpr 0x56188fc0d150 <col:136, col:347> 'int'
|   |               `-ConditionalOperator 0x56188fc0d120 <col:137, col:346> 'int'
|   |                 |-BinaryOperator 0x56188fc0cd98 <col:137, col:193> 'int' '&&'
|   |                 | |-BinaryOperator 0x56188fc0cd28 <col:137, col:174> 'int' '&&'
|   |                 | | |-BinaryOperator 0x56188fc0ccb8 <col:137, col:156> 'int' '&&'
|   |                 | | | |-ImplicitCastExpr 0x56188fc0cca0 <col:137> 'int' <IntegralCast>
|   |                 | | | | `-ImplicitCastExpr 0x56188fc0cc88 <col:137> '_Bool' <LValueToRValue>
|   |                 | | | |   `-DeclRefExpr 0x56188fc0cc18 <col:137> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                 | | | `-UnaryOperator 0x56188fc0cc70 <col:155, col:156> 'int' prefix '!' cannot overflow
|   |                 | | |   `-ImplicitCastExpr 0x56188fc0cc58 <col:156> '_Bool' <LValueToRValue>
|   |                 | | |     `-DeclRefExpr 0x56188fc0cc38 <col:156> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                 | | `-ImplicitCastExpr 0x56188fc0cd10 <col:174> 'int' <IntegralCast>
|   |                 | |   `-ImplicitCastExpr 0x56188fc0ccf8 <col:174> '_Bool' <LValueToRValue>
|   |                 | |     `-DeclRefExpr 0x56188fc0ccd8 <col:174> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                 | `-UnaryOperator 0x56188fc0cd80 <col:192, col:193> 'int' prefix '!' cannot overflow
|   |                 |   `-ImplicitCastExpr 0x56188fc0cd68 <col:193> '_Bool' <LValueToRValue>
|   |                 |     `-DeclRefExpr 0x56188fc0cd48 <col:193> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                 |-BinaryOperator 0x56188fc0ce58 <col:210, col:228> 'int' '||'
|   |                 | |-ImplicitCastExpr 0x56188fc0ce40 <col:210> 'int' <IntegralCast>
|   |                 | | `-ImplicitCastExpr 0x56188fc0ce28 <col:210> '_Bool' <LValueToRValue>
|   |                 | |   `-DeclRefExpr 0x56188fc0cdb8 <col:210> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   |                 | `-UnaryOperator 0x56188fc0ce10 <col:227, col:228> 'int' prefix '!' cannot overflow
|   |                 |   `-ImplicitCastExpr 0x56188fc0cdf8 <col:228> '_Bool' <LValueToRValue>
|   |                 |     `-DeclRefExpr 0x56188fc0cdd8 <col:228> '_Bool' lvalue Var 0x56188fc061b8 'weak$$choice1' '_Bool'
|   |                 `-ParenExpr 0x56188fc0d100 <col:244, col:346> 'int'
|   |                   `-ConditionalOperator 0x56188fc0d0d0 <col:245, col:333> 'int'
|   |                     |-BinaryOperator 0x56188fc0d010 <col:245, col:300> 'int' '&&'
|   |                     | |-BinaryOperator 0x56188fc0cfa0 <col:245, col:281> 'int' '&&'
|   |                     | | |-BinaryOperator 0x56188fc0cf18 <col:245, col:263> 'int' '&&'
|   |                     | | | |-ImplicitCastExpr 0x56188fc0ced0 <col:245> 'int' <IntegralCast>
|   |                     | | | | `-ImplicitCastExpr 0x56188fc0ceb8 <col:245> '_Bool' <LValueToRValue>
|   |                     | | | |   `-DeclRefExpr 0x56188fc0ce78 <col:245> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                     | | | `-ImplicitCastExpr 0x56188fc0cf00 <col:263> 'int' <IntegralCast>
|   |                     | | |   `-ImplicitCastExpr 0x56188fc0cee8 <col:263> '_Bool' <LValueToRValue>
|   |                     | | |     `-DeclRefExpr 0x56188fc0ce98 <col:263> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                     | | `-ImplicitCastExpr 0x56188fc0cf70 <col:281> 'int' <IntegralCast>
|   |                     | |   `-ImplicitCastExpr 0x56188fc0cf58 <col:281> '_Bool' <LValueToRValue>
|   |                     | |     `-DeclRefExpr 0x56188fc0cf38 <col:281> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                     | `-UnaryOperator 0x56188fc0cff8 <col:299, col:300> 'int' prefix '!' cannot overflow
|   |                     |   `-ImplicitCastExpr 0x56188fc0cfe0 <col:300> '_Bool' <LValueToRValue>
|   |                     |     `-DeclRefExpr 0x56188fc0cfc0 <col:300> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                     |-ImplicitCastExpr 0x56188fc0d088 <col:317> 'int' <IntegralCast>
|   |                     | `-ImplicitCastExpr 0x56188fc0d070 <col:317> '_Bool' <LValueToRValue>
|   |                     |   `-DeclRefExpr 0x56188fc0d030 <col:317> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   |                     `-ImplicitCastExpr 0x56188fc0d0b8 <col:333> 'int' <IntegralCast>
|   |                       `-ImplicitCastExpr 0x56188fc0d0a0 <col:333> '_Bool' <LValueToRValue>
|   |                         `-DeclRefExpr 0x56188fc0d050 <col:333> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   |-BinaryOperator 0x56188fc0dba8 <line:793:3, col:321> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0d320 <col:3> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0db90 <col:20, col:321> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0db60 <col:20, col:321> 'int'
|   |     |-ImplicitCastExpr 0x56188fc0db18 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc0db00 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc0d340 <col:20> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0db48 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc0db30 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc0d360 <col:36> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x56188fc0dae0 <col:53, col:321> 'int'
|   |       `-ConditionalOperator 0x56188fc0dab0 <col:54, col:320> 'int'
|   |         |-UnaryOperator 0x56188fc0d3b8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | `-ImplicitCastExpr 0x56188fc0d3a0 <col:55> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc0d380 <col:55> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         |-ImplicitCastExpr 0x56188fc0da98 <col:72> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56188fc0da80 <col:72> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc0d3d0 <col:72> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x56188fc0da60 <col:89, col:320> 'int'
|   |           `-ConditionalOperator 0x56188fc0da30 <col:90, col:319> 'int'
|   |             |-BinaryOperator 0x56188fc0d490 <col:90, col:108> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56188fc0d448 <col:90> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56188fc0d430 <col:90> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56188fc0d3f0 <col:90> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56188fc0d478 <col:108> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56188fc0d460 <col:108> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56188fc0d410 <col:108> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x56188fc0da18 <col:125, col:132> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56188fc0d4e0 <col:125, col:132> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56188fc0d4b0 <col:132> 'int' 0
|   |             `-ParenExpr 0x56188fc0d9f8 <col:136, col:319> 'int'
|   |               `-ConditionalOperator 0x56188fc0d9c8 <col:137, col:318> 'int'
|   |                 |-BinaryOperator 0x56188fc0d688 <col:137, col:193> 'int' '&&'
|   |                 | |-BinaryOperator 0x56188fc0d618 <col:137, col:174> 'int' '&&'
|   |                 | | |-BinaryOperator 0x56188fc0d5a8 <col:137, col:156> 'int' '&&'
|   |                 | | | |-ImplicitCastExpr 0x56188fc0d590 <col:137> 'int' <IntegralCast>
|   |                 | | | | `-ImplicitCastExpr 0x56188fc0d578 <col:137> '_Bool' <LValueToRValue>
|   |                 | | | |   `-DeclRefExpr 0x56188fc0d508 <col:137> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                 | | | `-UnaryOperator 0x56188fc0d560 <col:155, col:156> 'int' prefix '!' cannot overflow
|   |                 | | |   `-ImplicitCastExpr 0x56188fc0d548 <col:156> '_Bool' <LValueToRValue>
|   |                 | | |     `-DeclRefExpr 0x56188fc0d528 <col:156> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                 | | `-ImplicitCastExpr 0x56188fc0d600 <col:174> 'int' <IntegralCast>
|   |                 | |   `-ImplicitCastExpr 0x56188fc0d5e8 <col:174> '_Bool' <LValueToRValue>
|   |                 | |     `-DeclRefExpr 0x56188fc0d5c8 <col:174> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                 | `-UnaryOperator 0x56188fc0d670 <col:192, col:193> 'int' prefix '!' cannot overflow
|   |                 |   `-ImplicitCastExpr 0x56188fc0d658 <col:193> '_Bool' <LValueToRValue>
|   |                 |     `-DeclRefExpr 0x56188fc0d638 <col:193> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                 |-ImplicitCastExpr 0x56188fc0d9b0 <col:210> 'int' <IntegralCast>
|   |                 | `-ImplicitCastExpr 0x56188fc0d998 <col:210> '_Bool' <LValueToRValue>
|   |                 |   `-DeclRefExpr 0x56188fc0d6a8 <col:210> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   |                 `-ParenExpr 0x56188fc0d978 <col:226, col:318> 'int'
|   |                   `-ConditionalOperator 0x56188fc0d948 <col:227, col:317> 'int'
|   |                     |-BinaryOperator 0x56188fc0d848 <col:227, col:282> 'int' '&&'
|   |                     | |-BinaryOperator 0x56188fc0d7d8 <col:227, col:263> 'int' '&&'
|   |                     | | |-BinaryOperator 0x56188fc0d768 <col:227, col:245> 'int' '&&'
|   |                     | | | |-ImplicitCastExpr 0x56188fc0d720 <col:227> 'int' <IntegralCast>
|   |                     | | | | `-ImplicitCastExpr 0x56188fc0d708 <col:227> '_Bool' <LValueToRValue>
|   |                     | | | |   `-DeclRefExpr 0x56188fc0d6c8 <col:227> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                     | | | `-ImplicitCastExpr 0x56188fc0d750 <col:245> 'int' <IntegralCast>
|   |                     | | |   `-ImplicitCastExpr 0x56188fc0d738 <col:245> '_Bool' <LValueToRValue>
|   |                     | | |     `-DeclRefExpr 0x56188fc0d6e8 <col:245> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                     | | `-ImplicitCastExpr 0x56188fc0d7c0 <col:263> 'int' <IntegralCast>
|   |                     | |   `-ImplicitCastExpr 0x56188fc0d7a8 <col:263> '_Bool' <LValueToRValue>
|   |                     | |     `-DeclRefExpr 0x56188fc0d788 <col:263> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                     | `-UnaryOperator 0x56188fc0d830 <col:281, col:282> 'int' prefix '!' cannot overflow
|   |                     |   `-ImplicitCastExpr 0x56188fc0d818 <col:282> '_Bool' <LValueToRValue>
|   |                     |     `-DeclRefExpr 0x56188fc0d7f8 <col:282> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                     |-ImplicitCastExpr 0x56188fc0d918 <col:299, col:306> 'int' <IntegralCast>
|   |                     | `-CStyleCastExpr 0x56188fc0d898 <col:299, col:306> '_Bool' <IntegralToBoolean>
|   |                     |   `-IntegerLiteral 0x56188fc0d868 <col:306> 'int' 0
|   |                     `-ImplicitCastExpr 0x56188fc0d930 <col:310, col:317> 'int' <IntegralCast>
|   |                       `-CStyleCastExpr 0x56188fc0d8f0 <col:310, col:317> '_Bool' <IntegralToBoolean>
|   |                         `-IntegerLiteral 0x56188fc0d8c0 <col:317> 'int' 0
|   |-BinaryOperator 0x56188fc0e470 <line:794:3, col:322> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0dbc8 <col:3> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0e458 <col:20, col:322> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0e428 <col:20, col:322> 'int'
|   |     |-ImplicitCastExpr 0x56188fc0e3e0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc0e3c8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc0dbe8 <col:20> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0e410 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc0e3f8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc0dc08 <col:36> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x56188fc0e3a8 <col:53, col:322> 'int'
|   |       `-ConditionalOperator 0x56188fc0e378 <col:54, col:321> 'int'
|   |         |-UnaryOperator 0x56188fc0dc60 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | `-ImplicitCastExpr 0x56188fc0dc48 <col:55> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc0dc28 <col:55> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         |-ImplicitCastExpr 0x56188fc0e360 <col:72> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56188fc0e348 <col:72> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc0dc78 <col:72> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x56188fc0e328 <col:89, col:321> 'int'
|   |           `-ConditionalOperator 0x56188fc0e2f8 <col:90, col:320> 'int'
|   |             |-BinaryOperator 0x56188fc0dd38 <col:90, col:108> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56188fc0dcf0 <col:90> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56188fc0dcd8 <col:90> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56188fc0dc98 <col:90> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56188fc0dd20 <col:108> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56188fc0dd08 <col:108> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56188fc0dcb8 <col:108> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x56188fc0e2e0 <col:125, col:132> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56188fc0dd88 <col:125, col:132> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56188fc0dd58 <col:132> 'int' 0
|   |             `-ParenExpr 0x56188fc0e2c0 <col:136, col:320> 'int'
|   |               `-ConditionalOperator 0x56188fc0e290 <col:137, col:319> 'int'
|   |                 |-BinaryOperator 0x56188fc0df30 <col:137, col:193> 'int' '&&'
|   |                 | |-BinaryOperator 0x56188fc0dec0 <col:137, col:174> 'int' '&&'
|   |                 | | |-BinaryOperator 0x56188fc0de50 <col:137, col:156> 'int' '&&'
|   |                 | | | |-ImplicitCastExpr 0x56188fc0de38 <col:137> 'int' <IntegralCast>
|   |                 | | | | `-ImplicitCastExpr 0x56188fc0de20 <col:137> '_Bool' <LValueToRValue>
|   |                 | | | |   `-DeclRefExpr 0x56188fc0ddb0 <col:137> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                 | | | `-UnaryOperator 0x56188fc0de08 <col:155, col:156> 'int' prefix '!' cannot overflow
|   |                 | | |   `-ImplicitCastExpr 0x56188fc0ddf0 <col:156> '_Bool' <LValueToRValue>
|   |                 | | |     `-DeclRefExpr 0x56188fc0ddd0 <col:156> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                 | | `-ImplicitCastExpr 0x56188fc0dea8 <col:174> 'int' <IntegralCast>
|   |                 | |   `-ImplicitCastExpr 0x56188fc0de90 <col:174> '_Bool' <LValueToRValue>
|   |                 | |     `-DeclRefExpr 0x56188fc0de70 <col:174> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                 | `-UnaryOperator 0x56188fc0df18 <col:192, col:193> 'int' prefix '!' cannot overflow
|   |                 |   `-ImplicitCastExpr 0x56188fc0df00 <col:193> '_Bool' <LValueToRValue>
|   |                 |     `-DeclRefExpr 0x56188fc0dee0 <col:193> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                 |-ImplicitCastExpr 0x56188fc0e278 <col:210> 'int' <IntegralCast>
|   |                 | `-ImplicitCastExpr 0x56188fc0e260 <col:210> '_Bool' <LValueToRValue>
|   |                 |   `-DeclRefExpr 0x56188fc0df50 <col:210> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                 `-ParenExpr 0x56188fc0e240 <col:227, col:319> 'int'
|   |                   `-ConditionalOperator 0x56188fc0e210 <col:228, col:318> 'int'
|   |                     |-BinaryOperator 0x56188fc0e110 <col:228, col:283> 'int' '&&'
|   |                     | |-BinaryOperator 0x56188fc0e0a0 <col:228, col:264> 'int' '&&'
|   |                     | | |-BinaryOperator 0x56188fc0e030 <col:228, col:246> 'int' '&&'
|   |                     | | | |-ImplicitCastExpr 0x56188fc0dfe8 <col:228> 'int' <IntegralCast>
|   |                     | | | | `-ImplicitCastExpr 0x56188fc0dfd0 <col:228> '_Bool' <LValueToRValue>
|   |                     | | | |   `-DeclRefExpr 0x56188fc0df70 <col:228> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                     | | | `-ImplicitCastExpr 0x56188fc0e018 <col:246> 'int' <IntegralCast>
|   |                     | | |   `-ImplicitCastExpr 0x56188fc0e000 <col:246> '_Bool' <LValueToRValue>
|   |                     | | |     `-DeclRefExpr 0x56188fc0dfb0 <col:246> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                     | | `-ImplicitCastExpr 0x56188fc0e088 <col:264> 'int' <IntegralCast>
|   |                     | |   `-ImplicitCastExpr 0x56188fc0e070 <col:264> '_Bool' <LValueToRValue>
|   |                     | |     `-DeclRefExpr 0x56188fc0e050 <col:264> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                     | `-UnaryOperator 0x56188fc0e0f8 <col:282, col:283> 'int' prefix '!' cannot overflow
|   |                     |   `-ImplicitCastExpr 0x56188fc0e0e0 <col:283> '_Bool' <LValueToRValue>
|   |                     |     `-DeclRefExpr 0x56188fc0e0c0 <col:283> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                     |-ImplicitCastExpr 0x56188fc0e1e0 <col:300, col:307> 'int' <IntegralCast>
|   |                     | `-CStyleCastExpr 0x56188fc0e160 <col:300, col:307> '_Bool' <IntegralToBoolean>
|   |                     |   `-IntegerLiteral 0x56188fc0e130 <col:307> 'int' 0
|   |                     `-ImplicitCastExpr 0x56188fc0e1f8 <col:311, col:318> 'int' <IntegralCast>
|   |                       `-CStyleCastExpr 0x56188fc0e1b8 <col:311, col:318> '_Bool' <IntegralToBoolean>
|   |                         `-IntegerLiteral 0x56188fc0e188 <col:318> 'int' 0
|   |-BinaryOperator 0x56188fc0ee28 <line:795:3, col:351> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0e490 <col:3> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0ee10 <col:20, col:351> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0ede0 <col:20, col:351> 'int'
|   |     |-ImplicitCastExpr 0x56188fc0ed98 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc0ed80 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc0e4b0 <col:20> '_Bool' lvalue Var 0x56188fc06230 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0edc8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56188fc0edb0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56188fc0e4d0 <col:36> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x56188fc0ed60 <col:53, col:351> 'int'
|   |       `-ConditionalOperator 0x56188fc0ed30 <col:54, col:350> 'int'
|   |         |-UnaryOperator 0x56188fc0e528 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | `-ImplicitCastExpr 0x56188fc0e510 <col:55> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc0e4f0 <col:55> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |         |-ImplicitCastExpr 0x56188fc0ed18 <col:72> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56188fc0ed00 <col:72> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56188fc0e540 <col:72> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x56188fc0ece0 <col:89, col:350> 'int'
|   |           `-ConditionalOperator 0x56188fc0ecb0 <col:90, col:349> 'int'
|   |             |-BinaryOperator 0x56188fc0e600 <col:90, col:108> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56188fc0e5b8 <col:90> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56188fc0e5a0 <col:90> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56188fc0e560 <col:90> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56188fc0e5e8 <col:108> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56188fc0e5d0 <col:108> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56188fc0e580 <col:108> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x56188fc0ec98 <col:125, col:132> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56188fc0e650 <col:125, col:132> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56188fc0e620 <col:132> 'int' 0
|   |             `-ParenExpr 0x56188fc0ec78 <col:136, col:349> 'int'
|   |               `-ConditionalOperator 0x56188fc0ec48 <col:137, col:348> 'int'
|   |                 |-BinaryOperator 0x56188fc0e7f8 <col:137, col:193> 'int' '&&'
|   |                 | |-BinaryOperator 0x56188fc0e788 <col:137, col:174> 'int' '&&'
|   |                 | | |-BinaryOperator 0x56188fc0e718 <col:137, col:156> 'int' '&&'
|   |                 | | | |-ImplicitCastExpr 0x56188fc0e700 <col:137> 'int' <IntegralCast>
|   |                 | | | | `-ImplicitCastExpr 0x56188fc0e6e8 <col:137> '_Bool' <LValueToRValue>
|   |                 | | | |   `-DeclRefExpr 0x56188fc0e678 <col:137> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                 | | | `-UnaryOperator 0x56188fc0e6d0 <col:155, col:156> 'int' prefix '!' cannot overflow
|   |                 | | |   `-ImplicitCastExpr 0x56188fc0e6b8 <col:156> '_Bool' <LValueToRValue>
|   |                 | | |     `-DeclRefExpr 0x56188fc0e698 <col:156> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                 | | `-ImplicitCastExpr 0x56188fc0e770 <col:174> 'int' <IntegralCast>
|   |                 | |   `-ImplicitCastExpr 0x56188fc0e758 <col:174> '_Bool' <LValueToRValue>
|   |                 | |     `-DeclRefExpr 0x56188fc0e738 <col:174> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                 | `-UnaryOperator 0x56188fc0e7e0 <col:192, col:193> 'int' prefix '!' cannot overflow
|   |                 |   `-ImplicitCastExpr 0x56188fc0e7c8 <col:193> '_Bool' <LValueToRValue>
|   |                 |     `-DeclRefExpr 0x56188fc0e7a8 <col:193> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                 |-ParenExpr 0x56188fc0e958 <col:210, col:252> 'int'
|   |                 | `-ConditionalOperator 0x56188fc0e928 <col:211, col:251> 'int'
|   |                 |   |-ImplicitCastExpr 0x56188fc0e8c8 <col:211> 'int' <IntegralCast>
|   |                 |   | `-ImplicitCastExpr 0x56188fc0e8b0 <col:211> '_Bool' <LValueToRValue>
|   |                 |   |   `-DeclRefExpr 0x56188fc0e818 <col:211> '_Bool' lvalue Var 0x56188fc06140 'weak$$choice0' '_Bool'
|   |                 |   |-ImplicitCastExpr 0x56188fc0e8f8 <col:227> 'int' <IntegralCast>
|   |                 |   | `-ImplicitCastExpr 0x56188fc0e8e0 <col:227> '_Bool' <LValueToRValue>
|   |                 |   |   `-DeclRefExpr 0x56188fc0e838 <col:227> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                 |   `-ImplicitCastExpr 0x56188fc0e910 <col:244, col:251> 'int' <IntegralCast>
|   |                 |     `-CStyleCastExpr 0x56188fc0e888 <col:244, col:251> '_Bool' <IntegralToBoolean>
|   |                 |       `-IntegerLiteral 0x56188fc0e858 <col:251> 'int' 0
|   |                 `-ParenExpr 0x56188fc0ec28 <col:256, col:348> 'int'
|   |                   `-ConditionalOperator 0x56188fc0ebf8 <col:257, col:347> 'int'
|   |                     |-BinaryOperator 0x56188fc0eaf8 <col:257, col:312> 'int' '&&'
|   |                     | |-BinaryOperator 0x56188fc0ea88 <col:257, col:293> 'int' '&&'
|   |                     | | |-BinaryOperator 0x56188fc0ea18 <col:257, col:275> 'int' '&&'
|   |                     | | | |-ImplicitCastExpr 0x56188fc0e9d0 <col:257> 'int' <IntegralCast>
|   |                     | | | | `-ImplicitCastExpr 0x56188fc0e9b8 <col:257> '_Bool' <LValueToRValue>
|   |                     | | | |   `-DeclRefExpr 0x56188fc0e978 <col:257> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |                     | | | `-ImplicitCastExpr 0x56188fc0ea00 <col:275> 'int' <IntegralCast>
|   |                     | | |   `-ImplicitCastExpr 0x56188fc0e9e8 <col:275> '_Bool' <LValueToRValue>
|   |                     | | |     `-DeclRefExpr 0x56188fc0e998 <col:275> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |                     | | `-ImplicitCastExpr 0x56188fc0ea70 <col:293> 'int' <IntegralCast>
|   |                     | |   `-ImplicitCastExpr 0x56188fc0ea58 <col:293> '_Bool' <LValueToRValue>
|   |                     | |     `-DeclRefExpr 0x56188fc0ea38 <col:293> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |                     | `-UnaryOperator 0x56188fc0eae0 <col:311, col:312> 'int' prefix '!' cannot overflow
|   |                     |   `-ImplicitCastExpr 0x56188fc0eac8 <col:312> '_Bool' <LValueToRValue>
|   |                     |     `-DeclRefExpr 0x56188fc0eaa8 <col:312> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |                     |-ImplicitCastExpr 0x56188fc0ebc8 <col:329, col:336> 'int' <IntegralCast>
|   |                     | `-CStyleCastExpr 0x56188fc0eb48 <col:329, col:336> '_Bool' <IntegralToBoolean>
|   |                     |   `-IntegerLiteral 0x56188fc0eb18 <col:336> 'int' 0
|   |                     `-ImplicitCastExpr 0x56188fc0ebe0 <col:340, col:347> 'int' <IntegralCast>
|   |                       `-CStyleCastExpr 0x56188fc0eba0 <col:340, col:347> '_Bool' <IntegralToBoolean>
|   |                         `-IntegerLiteral 0x56188fc0eb70 <col:347> 'int' 0
|   |-BinaryOperator 0x56188fc0eec0 <line:796:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0ee48 <col:3> '_Bool' lvalue Var 0x56188fc05268 '__unbuffered_p2_EAX$read_delayed' '_Bool'
|   | `-CStyleCastExpr 0x56188fc0ee98 <col:38, col:45> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56188fc0ee68 <col:45> 'int' 1
|   |-BinaryOperator 0x56188fc0ef38 <line:797:3, col:43> 'int *' '='
|   | |-DeclRefExpr 0x56188fc0eee0 <col:3> 'int *' lvalue Var 0x56188fc052e8 '__unbuffered_p2_EAX$read_delayed_var' 'int *'
|   | `-UnaryOperator 0x56188fc0ef20 <col:42, col:43> 'int *' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x56188fc0ef00 <col:43> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc0efc0 <line:798:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56188fc0ef58 <col:3> 'int' lvalue Var 0x56188fc04bf8 '__unbuffered_p2_EAX' 'int'
|   | `-ImplicitCastExpr 0x56188fc0ef98 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56188fc0ef78 <col:25> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc0f0f0 <line:799:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x56188fc0efe0 <col:3> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   | `-ConditionalOperator 0x56188fc0f0c0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x56188fc0f078 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56188fc0f060 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56188fc0f000 <col:7> '_Bool' lvalue Var 0x56188fc05760 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc0f090 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc0f020 <col:25> 'int' lvalue Var 0x56188fc057e0 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x56188fc0f0a8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x56188fc0f040 <col:37> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc0f188 <line:800:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0f110 <col:3> '_Bool' lvalue Var 0x56188fc05760 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x56188fc0f160 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56188fc0f130 <col:28> 'int' 0
|   |-CallExpr 0x56188fc0f1e0 <line:801:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc0f1c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc0f1a8 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc0f238 <line:802:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc0f220 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc0f200 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc0f298 <line:803:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56188fc0f258 <col:3> 'int' lvalue Var 0x56188fc060a8 'y' 'int'
|   | `-IntegerLiteral 0x56188fc0f278 <col:7> 'int' 1
|   |-CallExpr 0x56188fc0f2f0 <line:804:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc0f2d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc0f2b8 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc0f348 <line:805:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc0f330 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc0f310 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc0f630 <line:806:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56188fc0f368 <col:3> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   | `-ConditionalOperator 0x56188fc0f600 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56188fc0f428 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56188fc0f3e0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56188fc0f3c8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56188fc0f388 <col:7> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56188fc0f410 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56188fc0f3f8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56188fc0f3a8 <col:25> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc0f5e8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc0f448 <col:42> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56188fc0f5c8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56188fc0f598 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56188fc0f508 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56188fc0f4c0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56188fc0f4a8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56188fc0f468 <col:55> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56188fc0f4f0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56188fc0f4d8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56188fc0f488 <col:73> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc0f568 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc0f528 <col:90> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56188fc0f580 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0f548 <col:102> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc0f838 <line:807:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0f650 <col:3> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0f820 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0f7f0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56188fc0f710 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56188fc0f6c8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56188fc0f6b0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56188fc0f670 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56188fc0f6f8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56188fc0f6e0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56188fc0f690 <col:38> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0f7a8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc0f760 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc0f730 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc0f7d8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc0f7c0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0f788 <col:66> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56188fc0fb20 <line:808:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0f858 <col:3> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0fb08 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0fad8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56188fc0f9f8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56188fc0f918 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56188fc0f8d0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56188fc0f8b8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56188fc0f878 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56188fc0f900 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56188fc0f8e8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56188fc0f898 <col:38> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56188fc0f9d8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56188fc0f990 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56188fc0f978 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56188fc0f938 <col:56> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56188fc0f9c0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56188fc0f9a8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56188fc0f958 <col:74> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0fa90 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc0fa48 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc0fa18 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc0fac0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc0faa8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0fa70 <col:102> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56188fc0fd28 <line:809:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0fb40 <col:3> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc0fd10 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0fce0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56188fc0fc00 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56188fc0fbb8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56188fc0fba0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56188fc0fb60 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56188fc0fbe8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56188fc0fbd0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56188fc0fb80 <col:38> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0fc98 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc0fc50 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc0fc20 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc0fcc8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc0fcb0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0fc78 <col:66> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56188fc10030 <line:810:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc0fd48 <col:3> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc10018 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc0ffe8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56188fc0fee8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56188fc0fe08 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56188fc0fdc0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56188fc0fda8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56188fc0fd68 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56188fc0fdf0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56188fc0fdd8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56188fc0fd88 <col:38> '_Bool' lvalue Var 0x56188fc059c0 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56188fc0fec8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56188fc0fe80 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56188fc0fe68 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56188fc0fe28 <col:56> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56188fc0feb0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56188fc0fe98 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56188fc0fe48 <col:74> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc0ff80 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc0ff38 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc0ff08 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc0ffd0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc0ff98 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc0ff60 <col:102> '_Bool' lvalue Var 0x56188fc05c18 'x$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x56188fc10088 <line:811:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc10070 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc10050 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc100e0 <line:812:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc100c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc100a8 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc10198 <line:813:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56188fc10100 <col:3> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56188fc10178 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56188fc10160 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc10120 <col:22> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56188fc10140 <col:41> 'int' 1
|   |-CallExpr 0x56188fc101f0 <line:814:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc101d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc101b8 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56188fc10268 <line:815:3, col:36>
|     `-CallExpr 0x56188fc10248 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56188fc10230 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56188fc10210 <col:10> 'void *(void)' Function 0x56188fbaafc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56188fc10440 prev 0x56188fc04518 <line:817:1, line:833:1> line:817:8 used P3 'void *(void *)'
| |-ParmVarDecl 0x56188fc103a8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56188fc11558 <line:818:1, line:833:1>
|   |-CallExpr 0x56188fc10520 <line:819:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc10508 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc104e8 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc10580 <line:820:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56188fc10540 <col:3> 'int' lvalue Var 0x56188fc060a8 'y' 'int'
|   | `-IntegerLiteral 0x56188fc10560 <col:7> 'int' 2
|   |-CallExpr 0x56188fc105d8 <line:821:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc105c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc105a0 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc10630 <line:822:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc10618 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc105f8 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc10918 <line:823:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56188fc10650 <col:3> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   | `-ConditionalOperator 0x56188fc108e8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56188fc10710 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56188fc106c8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56188fc106b0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56188fc10670 <col:7> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56188fc106f8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56188fc106e0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56188fc10690 <col:25> '_Bool' lvalue Var 0x56188fc05a38 'x$r_buff0_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x56188fc108d0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc10730 <col:42> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56188fc108b0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56188fc10880 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56188fc107f0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56188fc107a8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56188fc10790 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56188fc10750 <col:55> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56188fc107d8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56188fc107c0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56188fc10770 <col:73> '_Bool' lvalue Var 0x56188fc05c90 'x$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x56188fc10850 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56188fc10810 <col:90> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56188fc10868 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc10830 <col:102> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
|   |-BinaryOperator 0x56188fc10b20 <line:824:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc10938 <col:3> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc10b08 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc10ad8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56188fc109f8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56188fc109b0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56188fc10998 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56188fc10958 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56188fc109e0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56188fc109c8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56188fc10978 <col:38> '_Bool' lvalue Var 0x56188fc05a38 'x$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc10a90 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc10a48 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc10a18 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc10ac0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc10aa8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc10a70 <col:66> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56188fc10e08 <line:825:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc10b40 <col:3> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc10df0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc10dc0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56188fc10ce0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56188fc10c00 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56188fc10bb8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56188fc10ba0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56188fc10b60 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56188fc10be8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56188fc10bd0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56188fc10b80 <col:38> '_Bool' lvalue Var 0x56188fc05a38 'x$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x56188fc10cc0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56188fc10c78 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56188fc10c60 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56188fc10c20 <col:56> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56188fc10ca8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56188fc10c90 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56188fc10c40 <col:74> '_Bool' lvalue Var 0x56188fc05c90 'x$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc10d78 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc10d30 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc10d00 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc10da8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc10d90 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc10d58 <col:102> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56188fc11028 <line:826:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc10e28 <col:3> '_Bool' lvalue Var 0x56188fc05a38 'x$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc11010 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc10fe0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56188fc10ee8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56188fc10ea0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56188fc10e88 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56188fc10e48 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56188fc10ed0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56188fc10eb8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56188fc10e68 <col:38> '_Bool' lvalue Var 0x56188fc05a38 'x$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc10f80 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc10f38 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc10f08 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc10fb0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc10f98 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc10f60 <col:66> '_Bool' lvalue Var 0x56188fc05a38 'x$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x56188fc11310 <line:827:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56188fc11048 <col:3> '_Bool' lvalue Var 0x56188fc05c90 'x$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56188fc112f8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56188fc112c8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56188fc111e8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56188fc11108 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56188fc110c0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56188fc110a8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56188fc11068 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56188fc110f0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56188fc110d8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56188fc11088 <col:38> '_Bool' lvalue Var 0x56188fc05a38 'x$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x56188fc111c8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56188fc11180 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56188fc11168 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56188fc11128 <col:56> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56188fc111b0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56188fc11198 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56188fc11148 <col:74> '_Bool' lvalue Var 0x56188fc05c90 'x$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56188fc11280 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56188fc11238 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56188fc11208 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56188fc112b0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56188fc11298 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56188fc11260 <col:102> '_Bool' lvalue Var 0x56188fc05c90 'x$r_buff1_thd4' '_Bool'
|   |-CallExpr 0x56188fc11368 <line:828:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc11350 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc11330 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56188fc113c0 <line:829:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56188fc113a8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc11388 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56188fc11478 <line:830:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56188fc113e0 <col:3> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56188fc11458 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56188fc11440 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56188fc11400 <col:22> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56188fc11420 <col:41> 'int' 1
|   |-CallExpr 0x56188fc114d0 <line:831:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56188fc114b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56188fc11498 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56188fc11548 <line:832:3, col:36>
|     `-CallExpr 0x56188fc11528 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56188fc11510 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56188fc114f0 <col:10> 'void *(void)' Function 0x56188fbaafc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56188fc115f8 prev 0x56188fc045e0 <line:834:1, line:836:1> line:834:6 fence 'void ()'
| `-CompoundStmt 0x56188fc11698 <line:835:1, line:836:1>
|-FunctionDecl 0x56188fc116c8 prev 0x56188fc046a0 <line:837:1, line:839:1> line:837:6 isync 'void ()'
| `-CompoundStmt 0x56188fc11768 <line:838:1, line:839:1>
|-FunctionDecl 0x56188fc11798 prev 0x56188fc04760 <line:840:1, line:842:1> line:840:6 lwfence 'void ()'
| `-CompoundStmt 0x56188fc11838 <line:841:1, line:842:1>
`-FunctionDecl 0x56188fc118a8 <line:843:1, line:871:1> line:843:5 main 'int ()'
  `-CompoundStmt 0x56188fc14b00 <line:844:1, line:871:1>
    |-DeclStmt 0x56188fc119c0 <line:845:3, col:18>
    | `-VarDecl 0x56188fc11958 <col:3, col:13> col:13 used t2231 'pthread_t':'unsigned long'
    |-CallExpr 0x56188fc11bc8 <line:846:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56188fc11bb0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc119d8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56188fbeb9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56188fc11a18 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56188fc119f8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56188fc11958 't2231' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56188fc11c08 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56188fc11a90 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56188fc11a68 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56188fc11a30 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56188fc11c20 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc11ab0 <col:39> 'void *(void *)' Function 0x56188fc06348 'P0' 'void *(void *)'
    | `-ParenExpr 0x56188fc11b30 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56188fc11b08 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56188fc11ad0 <col:52> 'int' 0
    |-DeclStmt 0x56188fc11cb0 <line:847:3, col:18>
    | `-VarDecl 0x56188fc11c48 <col:3, col:13> col:13 used t2232 'pthread_t':'unsigned long'
    |-CallExpr 0x56188fc11e58 <line:848:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56188fc11e40 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc11cc8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56188fbeb9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56188fc11d08 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56188fc11ce8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56188fc11c48 't2232' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56188fc11e98 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56188fc11d80 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56188fc11d58 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56188fc11d20 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56188fc11eb0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc11da0 <col:39> 'void *(void *)' Function 0x56188fc09440 'P1' 'void *(void *)'
    | `-ParenExpr 0x56188fc11e20 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56188fc11df8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56188fc11dc0 <col:52> 'int' 0
    |-DeclStmt 0x56188fc11f40 <line:849:3, col:18>
    | `-VarDecl 0x56188fc11ed8 <col:3, col:13> col:13 used t2233 'pthread_t':'unsigned long'
    |-CallExpr 0x56188fc12108 <line:850:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56188fc120f0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc11f58 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56188fbeb9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56188fc11f98 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56188fc11f78 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56188fc11ed8 't2233' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56188fc12148 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56188fc12030 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56188fc12008 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56188fc11fb0 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56188fc12160 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc12050 <col:39> 'void *(void *)' Function 0x56188fc0acd8 'P2' 'void *(void *)'
    | `-ParenExpr 0x56188fc120d0 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56188fc120a8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56188fc12070 <col:52> 'int' 0
    |-DeclStmt 0x56188fc121f0 <line:851:3, col:18>
    | `-VarDecl 0x56188fc12188 <col:3, col:13> col:13 used t2234 'pthread_t':'unsigned long'
    |-CallExpr 0x56188fc12398 <line:852:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56188fc12380 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc12208 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56188fbeb9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56188fc12248 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56188fc12228 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56188fc12188 't2234' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56188fc123d8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56188fc122c0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56188fc12298 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56188fc12260 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56188fc123f0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc122e0 <col:39> 'void *(void *)' Function 0x56188fc10440 'P3' 'void *(void *)'
    | `-ParenExpr 0x56188fc12360 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56188fc12338 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56188fc12300 <col:52> 'int' 0
    |-CallExpr 0x56188fc12440 <line:853:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56188fc12428 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56188fc12408 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56188fc12510 <line:854:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x56188fc12460 <col:3> '_Bool' lvalue Var 0x56188fc05550 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x56188fc124f8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x56188fc124d8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x56188fc124c0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x56188fc12480 <col:21> 'int' lvalue Var 0x56188fc04898 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x56188fc124a0 <col:41> 'int' 4
    |-CallExpr 0x56188fc12568 <line:855:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56188fc12550 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56188fc12530 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56188fc125e0 <line:856:3, col:36> 'void'
    | |-ImplicitCastExpr 0x56188fc125c8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc12588 <col:3> 'void (int)' Function 0x56188fbaae50 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x56188fc12620 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x56188fc12608 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x56188fc125a8 <col:21> '_Bool' lvalue Var 0x56188fc05550 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x56188fc12670 <line:857:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56188fc12658 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56188fc12638 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56188fc12958 <line:858:3, col:103> 'int' '='
    | |-DeclRefExpr 0x56188fc12690 <col:3> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
    | `-ConditionalOperator 0x56188fc12928 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x56188fc12750 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x56188fc12708 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x56188fc126f0 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x56188fc126b0 <col:7> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x56188fc12738 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x56188fc12720 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x56188fc126d0 <col:25> '_Bool' lvalue Var 0x56188fc05858 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56188fc12910 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56188fc12770 <col:42> 'int' lvalue Var 0x56188fc05e08 'x$w_buff0' 'int'
    |   `-ParenExpr 0x56188fc128f0 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x56188fc128c0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x56188fc12830 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56188fc127e8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56188fc127d0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56188fc12790 <col:55> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56188fc12818 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56188fc12800 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56188fc127b0 <col:73> '_Bool' lvalue Var 0x56188fc05ab0 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56188fc12890 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56188fc12850 <col:90> 'int' lvalue Var 0x56188fc05f30 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x56188fc128a8 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56188fc12870 <col:102> 'int' lvalue Var 0x56188fc056c8 'x' 'int'
    |-BinaryOperator 0x56188fc12b60 <line:859:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56188fc12978 <col:3> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56188fc12b48 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56188fc12b18 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56188fc12a38 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56188fc129f0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56188fc129d8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56188fc12998 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56188fc12a20 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56188fc12a08 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56188fc129b8 <col:38> '_Bool' lvalue Var 0x56188fc05858 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56188fc12ad0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56188fc12a88 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56188fc12a58 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56188fc12b00 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56188fc12ae8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56188fc12ab0 <col:66> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56188fc12e48 <line:860:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56188fc12b80 <col:3> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56188fc12e30 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56188fc12e00 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56188fc12d20 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56188fc12c40 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56188fc12bf8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56188fc12be0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56188fc12ba0 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56188fc12c28 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56188fc12c10 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56188fc12bc0 <col:38> '_Bool' lvalue Var 0x56188fc05858 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56188fc12d00 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56188fc12cb8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56188fc12ca0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56188fc12c60 <col:56> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56188fc12ce8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56188fc12cd0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56188fc12c80 <col:74> '_Bool' lvalue Var 0x56188fc05ab0 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56188fc12db8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56188fc12d70 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56188fc12d40 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56188fc12de8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56188fc12dd0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56188fc12d98 <col:102> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x56188fc14070 <line:861:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56188fc12e68 <col:3> '_Bool' lvalue Var 0x56188fc05858 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56188fc14058 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56188fc14028 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56188fc12f28 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56188fc12ee0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56188fc12ec8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56188fc12e88 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56188fc12f10 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56188fc12ef8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56188fc12ea8 <col:38> '_Bool' lvalue Var 0x56188fc05858 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56188fc12fc0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56188fc12f78 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56188fc12f48 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56188fc14010 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56188fc12fd8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56188fc12fa0 <col:66> '_Bool' lvalue Var 0x56188fc05858 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56188fc14358 <line:862:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56188fc14090 <col:3> '_Bool' lvalue Var 0x56188fc05ab0 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56188fc14340 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56188fc14310 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56188fc14230 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56188fc14150 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56188fc14108 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56188fc140f0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56188fc140b0 <col:20> '_Bool' lvalue Var 0x56188fc05e80 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56188fc14138 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56188fc14120 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56188fc140d0 <col:38> '_Bool' lvalue Var 0x56188fc05858 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56188fc14210 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56188fc141c8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56188fc141b0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56188fc14170 <col:56> '_Bool' lvalue Var 0x56188fc05fa8 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56188fc141f8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56188fc141e0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56188fc14190 <col:74> '_Bool' lvalue Var 0x56188fc05ab0 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56188fc142c8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56188fc14280 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56188fc14250 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56188fc142f8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56188fc142e0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56188fc142a8 <col:102> '_Bool' lvalue Var 0x56188fc05ab0 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x56188fc143b0 <line:863:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56188fc14398 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56188fc14378 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56188fc14408 <line:864:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56188fc143f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56188fc143d0 <col:3> 'void ()' Function 0x56188fbab4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56188fc144a0 <line:865:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x56188fc14428 <col:3> '_Bool' lvalue Var 0x56188fc061b8 'weak$$choice1' '_Bool'
    | `-CallExpr 0x56188fc14480 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x56188fc14468 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x56188fc14448 <col:19> '_Bool (void)' Function 0x56188fbaac80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x56188fc146d8 <line:866:3, col:140> 'int' '='
    | |-DeclRefExpr 0x56188fc144c0 <col:3> 'int' lvalue Var 0x56188fc04bf8 '__unbuffered_p2_EAX' 'int'
    | `-ConditionalOperator 0x56188fc146a8 <col:25, col:140> 'int'
    |   |-ImplicitCastExpr 0x56188fc14678 <col:25> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56188fc14660 <col:25> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56188fc144e0 <col:25> '_Bool' lvalue Var 0x56188fc05268 '__unbuffered_p2_EAX$read_delayed' '_Bool'
    |   |-ParenExpr 0x56188fc14620 <col:60, col:136> 'int'
    |   | `-ConditionalOperator 0x56188fc145f0 <col:61, col:117> 'int'
    |   |   |-ImplicitCastExpr 0x56188fc145a8 <col:61> 'int' <IntegralCast>
    |   |   | `-ImplicitCastExpr 0x56188fc14590 <col:61> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x56188fc14500 <col:61> '_Bool' lvalue Var 0x56188fc061b8 'weak$$choice1' '_Bool'
    |   |   |-ImplicitCastExpr 0x56188fc145c0 <col:77, col:78> 'int' <LValueToRValue>
    |   |   | `-UnaryOperator 0x56188fc14558 <col:77, col:78> 'int' lvalue prefix '*' cannot overflow
    |   |   |   `-ImplicitCastExpr 0x56188fc14540 <col:78> 'int *' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x56188fc14520 <col:78> 'int *' lvalue Var 0x56188fc052e8 '__unbuffered_p2_EAX$read_delayed_var' 'int *'
    |   |   `-ImplicitCastExpr 0x56188fc145d8 <col:117> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x56188fc14570 <col:117> 'int' lvalue Var 0x56188fc04bf8 '__unbuffered_p2_EAX' 'int'
    |   `-ImplicitCastExpr 0x56188fc14690 <col:140> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x56188fc14640 <col:140> 'int' lvalue Var 0x56188fc04bf8 '__unbuffered_p2_EAX' 'int'
    |-BinaryOperator 0x56188fc149a8 <line:867:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x56188fc146f8 <col:3> '_Bool' lvalue Var 0x56188fc055c8 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x56188fc14990 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x56188fc14978 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x56188fc14958 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x56188fc14938 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x56188fc148a0 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x56188fc14808 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x56188fc14770 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x56188fc14758 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x56188fc14718 <col:23> 'int' lvalue Var 0x56188fc060a8 'y' 'int'
    |         | | | `-IntegerLiteral 0x56188fc14738 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x56188fc147e8 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x56188fc147d0 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x56188fc14790 <col:33> 'int' lvalue Var 0x56188fc049b8 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x56188fc147b0 <col:56> 'int' 2
    |         | `-BinaryOperator 0x56188fc14880 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x56188fc14868 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x56188fc14828 <col:61> 'int' lvalue Var 0x56188fc04ad8 '__unbuffered_p0_EBX' 'int'
    |         |   `-IntegerLiteral 0x56188fc14848 <col:84> 'int' 0
    |         `-BinaryOperator 0x56188fc14918 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x56188fc14900 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56188fc148c0 <col:89> 'int' lvalue Var 0x56188fc04bf8 '__unbuffered_p2_EAX' 'int'
    |           `-IntegerLiteral 0x56188fc148e0 <col:112> 'int' 1
    |-CallExpr 0x56188fc14a00 <line:868:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56188fc149e8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56188fc149c8 <col:3> 'void ()' Function 0x56188fbab570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56188fc14a78 <line:869:3, col:36> 'void'
    | |-ImplicitCastExpr 0x56188fc14a60 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56188fc14a20 <col:3> 'void (int)' Function 0x56188fbab238 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x56188fc14ab8 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x56188fc14aa0 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x56188fc14a40 <col:21> '_Bool' lvalue Var 0x56188fc055c8 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x56188fc14af0 <line:870:3, col:10>
      `-IntegerLiteral 0x56188fc14ad0 <col:10> 'int' 0
