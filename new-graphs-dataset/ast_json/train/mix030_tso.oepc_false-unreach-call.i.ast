TranslationUnitDecl 0x560761efff88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x560761f00848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x560761f00520 '__int128'
|-TypedefDecl 0x560761f008b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x560761f00540 'unsigned __int128'
|-TypedefDecl 0x560761f00bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x560761f00990 'struct __NSConstantString_tag'
|   `-Record 0x560761f00910 '__NSConstantString_tag'
|-TypedefDecl 0x560761f00c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x560761f00c20 'char *'
|   `-BuiltinType 0x560761f00020 'char'
|-TypedefDecl 0x560761f3fb60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x560761f00f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x560761f00d40 'struct __va_list_tag'
|     `-Record 0x560761f00cc0 '__va_list_tag'
|-FunctionDecl 0x560761f3fca0 <pthread-wmm/mix030_tso.oepc_false-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x560761f3fbd0 <col:31> col:34 'int'
|-FunctionDecl 0x560761f3fe68 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x560761f3ff90 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x560761f400d8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x560761f40048 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x560761f40308 <col:40, col:99>
|   |-IfStmt 0x560761f402d8 <col:42, col:88>
|   | |-UnaryOperator 0x560761f401b8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x560761f401a0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x560761f40180 <col:47> 'int' lvalue ParmVar 0x560761f40048 'expression' 'int'
|   | `-CompoundStmt 0x560761f402c0 <col:59, col:88>
|   |   `-LabelStmt 0x560761f402a8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x560761f40238 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x560761f40220 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x560761f401d0 <col:68> 'void () __attribute__((noreturn))' Function 0x560761f3ff90 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x560761f402f0 <col:89>
|   `-ReturnStmt 0x560761f402f8 <col:91>
|-FunctionDecl 0x560761f40350 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x560761f40410 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x560761f40790 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x560761f404c8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x560761f40548 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x560761f405c8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x560761f40648 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x560761f40850 <line:10:22>
|-FunctionDecl 0x560761f668a0 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x560761f408c0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x560761f40940 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x560761f409c0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x560761f40a40 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x560761f66960 <line:13:22>
|-FunctionDecl 0x560761f66c10 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x560761f669d0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x560761f66a50 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x560761f66ad0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x560761f66cc8 <line:15:22>
|-TypedefDecl 0x560761f66d38 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x560761f000e0 'unsigned char'
|-TypedefDecl 0x560761f66da8 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x560761f00100 'unsigned short'
|-TypedefDecl 0x560761f66e18 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-TypedefDecl 0x560761f66e88 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f66ef8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x560761f00040 'signed char'
|-TypedefDecl 0x560761f66f68 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x560761f000e0 'unsigned char'
|-TypedefDecl 0x560761f66fd8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x560761f00060 'short'
|-TypedefDecl 0x560761f67048 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x560761f00100 'unsigned short'
|-TypedefDecl 0x560761f670b8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x560761f00080 'int'
|-TypedefDecl 0x560761f67128 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-TypedefDecl 0x560761f67198 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f67208 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f67278 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f672e8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f67358 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f673c8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-TypedefDecl 0x560761f67438 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-TypedefDecl 0x560761f674a8 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f67518 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f67588 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-TypedefDecl 0x560761f675f8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f67668 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f676d8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f67748 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x560761f00080 'int'
|-RecordDecl 0x560761f677a0 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x560761f67918 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x560761f679d0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x560761f67970 'struct __fsid_t' sugar
|   `-RecordType 0x560761f67820 '__fsid_t'
|     `-Record 0x560761f677a0 ''
|-TypedefDecl 0x560761f67a58 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f67ac8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f67b38 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f67ba8 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-TypedefDecl 0x560761f67c18 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f67c88 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-TypedefDecl 0x560761f67cf8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f67d68 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x560761f00080 'int'
|-TypedefDecl 0x560761f67dd8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x560761f00080 'int'
|-TypedefDecl 0x560761f67e48 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x560761f00080 'int'
|-TypedefDecl 0x560761f67eb8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x560761f007a0 'void *'
|   `-BuiltinType 0x560761efffe0 'void'
|-TypedefDecl 0x560761f67f28 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f67f98 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f68008 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f68078 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f680e8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f68158 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f681c8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f68238 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f682a8 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f68318 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f68388 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f68418 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x560761f683e0 '__off64_t' sugar
|   |-Typedef 0x560761f676d8 '__off64_t'
|   `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f68510 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x560761f684d0 '__quad_t *'
|   `-TypedefType 0x560761f68470 '__quad_t' sugar
|     |-Typedef 0x560761f67278 '__quad_t'
|     `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f68580 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x560761f00c20 'char *'
|   `-BuiltinType 0x560761f00020 'char'
|-TypedefDecl 0x560761f685f0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f68660 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-FunctionDecl 0x560761f687a8 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x560761f686d0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x560761f68ae8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x560761f68ad8 <line:72:3, col:34>
|     `-CallExpr 0x560761f68a98 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x560761f68a80 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x560761f68a10 <col:10> '<builtin fn type>' Function 0x560761f68880 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x560761f68ac0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x560761f68a30 <col:29> 'unsigned int' lvalue ParmVar 0x560761f686d0 '__bsx' 'unsigned int'
|-FunctionDecl 0x560761f68880 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x560761f68920 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x560761f68990 <col:10> Implicit
| `-ConstAttr 0x560761f689e8 <col:10> Implicit
|-FunctionDecl 0x560761f68c40 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x560761f68b38 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x560761f68f58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x560761f68f48 <line:77:3, col:34>
|     `-CallExpr 0x560761f68f08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x560761f68ef0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x560761f68e78 <col:10> '<builtin fn type>' Function 0x560761f68ce8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x560761f68f30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x560761f68e98 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x560761f68b38 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x560761f68ce8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x560761f68d88 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x560761f68df8 <col:10> Implicit
| `-ConstAttr 0x560761f68e50 <col:10> Implicit
|-TypedefDecl 0x560761f68f88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-TypedefDecl 0x560761f69018 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x560761f68fe0 '__time_t' sugar
|   |-Typedef 0x560761f67c18 '__time_t'
|   `-BuiltinType 0x560761f000a0 'long'
|-RecordDecl 0x560761f69070 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x560761f69128 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x560761f691b8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x560761f69248 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x560761f69210 '__pid_t' sugar
|   |-Typedef 0x560761f67748 '__pid_t'
|   `-BuiltinType 0x560761f00080 'int'
|-RecordDecl 0x560761f692a0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x560761f69360 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x560761f693b0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x560761f69470 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x560761f694d8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-RecordDecl 0x560761f69530 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x560761f697c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x560761f6b8b0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x560761f69810 'struct cpu_set_t' sugar
|   `-RecordType 0x560761f695b0 'cpu_set_t'
|     `-Record 0x560761f69530 ''
|-FunctionDecl 0x560761f6bb88 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x560761f6b958 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x560761f6ba60 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x560761f6bc38 <line:107:19>
|-FunctionDecl 0x560761f6be10 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x560761f6bca0 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x560761f6beb8 <col:69>
|-FunctionDecl 0x560761f6c030 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x560761f6bf20 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x560761f6c0d8 <col:64>
|-FunctionDecl 0x560761f6c398 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x560761f6c140 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x560761f6c278 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x560761f6c448 <line:113:22>
|-FunctionDecl 0x560761f6c6c8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x560761f6c4b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x560761f6c5a8 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x560761f6c778 <col:88>
|-FunctionDecl 0x560761f6ca98 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x560761f6c7e0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x560761f6c8c0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x560761f6c950 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x560761f6cb50 <col:62>
|-FunctionDecl 0x560761f6ccc8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x560761f6cbb8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x560761f6cd70 <col:63>
|-FunctionDecl 0x560761f6ce98 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x560761f6cf38 <col:47>
|-FunctionDecl 0x560761f6d040 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x560761f6cfa8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x560761f6d0e8 <col:69>
|-FunctionDecl 0x560761f6d1f0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x560761f6d158 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x560761f6d298 <col:69>
|-FunctionDecl 0x560761f6d558 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x560761f6d300 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x560761f6d438 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x560761f6d608 <col:88>
|-TypedefDecl 0x560761f6d698 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x560761f6d660 '__clock_t' sugar
|   |-Typedef 0x560761f67a58 '__clock_t'
|   `-BuiltinType 0x560761f000a0 'long'
|-TypedefDecl 0x560761f6d728 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x560761f6d6f0 '__clockid_t' sugar
|   |-Typedef 0x560761f67e48 '__clockid_t'
|   `-BuiltinType 0x560761f00080 'int'
|-TypedefDecl 0x560761f6d7b8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x560761f6d780 '__timer_t' sugar
|   |-Typedef 0x560761f67eb8 '__timer_t'
|   `-PointerType 0x560761f007a0 'void *'
|     `-BuiltinType 0x560761efffe0 'void'
|-RecordDecl 0x560761f6d810 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x560761f6d8e8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x560761f6d950 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x560761f6d9b8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x560761f6da20 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x560761f6da88 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x560761f6daf0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x560761f6db58 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x560761f6dbc0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x560761f6dc28 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x560761f6dc90 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x560761f6dcf8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x560761f6dd48 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x560761f6de18 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x560761f6de88 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x560761f6df30 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x560761f6e100 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x560761f6e1a0 <col:45>
|-FunctionDecl 0x560761f6e380 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x560761f6e270 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x560761f6e428 <col:54>
|-FunctionDecl 0x560761f6e628 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x560761f6e490 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x560761f6e508 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x560761f6e6d8 <line:157:22>
| `-ConstAttr 0x560761f6e730 <col:63>
|-FunctionDecl 0x560761f6f560 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x560761f6e828 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x560761f6f608 <col:56>
|-FunctionDecl 0x560761f6f9b0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x560761f6f678 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x560761f6f6f0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x560761f6f770 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x560761f6f868 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x560761f6fa70 <col:54>
|-RecordDecl 0x560761f6fac8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x560761f6fb78 parent 0x560761efff88 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x560761f6fdd8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x560761f6fe78 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x560761f6fee0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x560761f6ff48 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x560761f70038 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x560761f70158 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x560761f70100 'struct __locale_struct *'
|   `-ElaboratedType 0x560761f70090 'struct __locale_struct' sugar
|     `-RecordType 0x560761f6fb50 'struct __locale_struct'
|       `-Record 0x560761f6fac8 '__locale_struct'
|-TypedefDecl 0x560761f70208 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x560761f701d0 '__locale_t' sugar
|   |-Typedef 0x560761f70158 '__locale_t'
|   `-PointerType 0x560761f70100 'struct __locale_struct *'
|     `-ElaboratedType 0x560761f70090 'struct __locale_struct' sugar
|       `-RecordType 0x560761f6fb50 'struct __locale_struct'
|         `-Record 0x560761f6fac8 '__locale_struct'
|-FunctionDecl 0x560761f70610 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x560761f70278 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x560761f702f0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x560761f70370 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x560761f70400 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x560761f70478 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x560761f706d8 <col:40>
|-FunctionDecl 0x560761f708c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x560761f707a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x560761f70970 <col:66>
|-FunctionDecl 0x560761f70a80 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x560761f709d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x560761f70b28 <col:69>
|-FunctionDecl 0x560761f70d58 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x560761f70b90 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x560761f70c20 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x560761f70e08 <col:52>
|-FunctionDecl 0x560761f70fb0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x560761f70e70 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x560761f70f00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x560761f71060 <col:55>
|-FunctionDecl 0x560761f711f8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x560761f710e0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x560761f712a0 <col:62>
|-FunctionDecl 0x560761f71418 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x560761f71308 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x560761f714c0 <col:60>
|-FunctionDecl 0x560761f71718 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x560761f71578 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x560761f715f8 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x560761f717c8 <col:44>
|-FunctionDecl 0x560761f719d8 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x560761f71830 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x560761f718b0 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x560761f71a88 <col:49>
|-VarDecl 0x560761f71b88 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x560761f71c08 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x560761f71c88 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x560761f71d50 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x560761f71e80 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x560761f71f20 <col:42>
|-VarDecl 0x560761f71f90 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x560761f72010 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x560761f72198 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x560761f72088 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x560761f72240 <col:57>
|-FunctionDecl 0x560761f72350 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x560761f722c0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x560761f723f8 <col:56>
|-FunctionDecl 0x560761f73540 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x560761f72478 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x560761f735e8 <col:59>
|-FunctionDecl 0x560761f736f0 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x560761f73658 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x560761f73798 <col:48>
| `-ConstAttr 0x560761f737f0 <col:89>
|-FunctionDecl 0x560761f73a58 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x560761f738a8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x560761f73938 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x560761f73cb8 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x560761f73b48 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560761f73bd8 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x560761f73d68 <col:88>
|-FunctionDecl 0x560761f73f00 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x560761f73dd0 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560761f73e60 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x560761f73fb0 <col:88>
|-FunctionDecl 0x560761f741c8 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x560761f74018 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560761f740a8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x560761f74278 <line:208:22>
|-FunctionDecl 0x560761f745e8 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x560761f742e0 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560761f74360 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x560761f743f0 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x560761f74480 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x560761f748e8 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x560761f746e8 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x560761f747c0 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x560761f74998 <col:85>
|-FunctionDecl 0x560761f74d88 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x560761f74a00 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560761f74b38 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x560761f74c40 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x560761f74e40 <col:52>
|-FunctionDecl 0x560761f74fb8 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x560761f74ea8 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x560761f75060 <col:61>
|-FunctionDecl 0x560761f75560 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x560761f750c8 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x560761f75148 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x560761f75278 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x560761f75368 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x560761f75620 <col:62>
|-FunctionDecl 0x560761f75838 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x560761f75688 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x560761f75718 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x560761f758e8 <line:221:22>
|-FunctionDecl 0x560761f759e8 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x560761f75950 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x560761f75a90 <col:65>
|-TypedefDecl 0x560761f75b00 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x560761f00140 'unsigned long'
|-RecordDecl 0x560761f75b58 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x560761f75ca0 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x560761f75d08 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560761f75db8 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x560761f75d60 'union pthread_attr_t' sugar
|   `-RecordType 0x560761f75be0 'union pthread_attr_t'
|     `-Record 0x560761f75b58 'pthread_attr_t'
|-RecordDecl 0x560761f75e10 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x560761f75f88 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x560761f76000 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x560761f760b0 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x560761f76050 'struct __pthread_internal_list' sugar
|   `-RecordType 0x560761f75e90 'struct __pthread_internal_list'
|     `-Record 0x560761f75e10 '__pthread_internal_list'
|-RecordDecl 0x560761f76120 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x560761f761c8 parent 0x560761efff88 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x560761f762a0 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x560761f76308 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x560761f76370 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x560761f763d8 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x560761f76440 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x560761f764a8 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x560761f7a580 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x560761f7a630 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x560761f7a720 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x560761f7a788 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560761f7a910 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x560761f7a8b0 'union pthread_mutex_t' sugar
|   `-RecordType 0x560761f761a0 'pthread_mutex_t'
|     `-Record 0x560761f76120 ''
|-RecordDecl 0x560761f7a980 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x560761f7aac0 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x560761f7ab28 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x560761f7abe0 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x560761f7ab80 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x560761f7aa00 'pthread_mutexattr_t'
|     `-Record 0x560761f7a980 ''
|-RecordDecl 0x560761f7ac50 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x560761f7acf8 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x560761f7adc0 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x560761f7ae28 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x560761f7ae90 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x560761f7aef8 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x560761f7af60 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x560761f7afc8 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x560761f7b030 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x560761f7b098 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x560761f7b150 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at pthread-wmm/mix030_tso.oepc_false-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/mix030_tso.oepc_false-unreach-call.i:258:3)'
| |-FieldDecl 0x560761f7b240 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x560761f7b2a8 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x560761f7b3e0 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x560761f7b380 'union pthread_cond_t' sugar
|   `-RecordType 0x560761f7acd0 'pthread_cond_t'
|     `-Record 0x560761f7ac50 ''
|-RecordDecl 0x560761f7b450 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x560761f7b590 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x560761f7b5f8 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x560761f7b6b0 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x560761f7b650 'union pthread_condattr_t' sugar
|   `-RecordType 0x560761f7b4d0 'pthread_condattr_t'
|     `-Record 0x560761f7b450 ''
|-TypedefDecl 0x560761f7b738 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x560761f00120 'unsigned int'
|-TypedefDecl 0x560761f7b7a8 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x560761f00080 'int'
|-RecordDecl 0x560761f7b800 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x560761f7b8a8 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x560761f7b970 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x560761f7b9d8 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x560761f7ba40 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x560761f7baa8 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x560761f7bb10 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x560761f7bb78 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x560761f7bbe0 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x560761f7bc48 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x560761f7bcb0 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x560761f7bd18 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x560761f7bd80 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x560761f7be30 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at pthread-wmm/mix030_tso.oepc_false-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/mix030_tso.oepc_false-unreach-call.i:281:3)'
| |-FieldDecl 0x560761f7bed8 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x560761f7bf40 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560761f7c090 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x560761f7c030 'union pthread_rwlock_t' sugar
|   `-RecordType 0x560761f7b880 'pthread_rwlock_t'
|     `-Record 0x560761f7b800 ''
|-RecordDecl 0x560761f7c100 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x560761f7c240 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x560761f7c2a8 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560761f7c360 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x560761f7c300 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x560761f7c180 'pthread_rwlockattr_t'
|     `-Record 0x560761f7c100 ''
|-TypedefDecl 0x560761f7c3e8 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x560761f00084 'volatile int' volatile
|   `-BuiltinType 0x560761f00080 'int'
|-RecordDecl 0x560761f7c440 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x560761f7e5b0 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x560761f7e618 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560761f7e6d0 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x560761f7e670 'union pthread_barrier_t' sugar
|   `-RecordType 0x560761f7c4c0 'pthread_barrier_t'
|     `-Record 0x560761f7c440 ''
|-RecordDecl 0x560761f7e740 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x560761f7e840 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x560761f7e8a8 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x560761f7e960 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x560761f7e900 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x560761f7e7c0 'pthread_barrierattr_t'
|     `-Record 0x560761f7e740 ''
|-TypedefDecl 0x560761f7ea78 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x560761f7ea10 'long [8]' 8 
|   `-BuiltinType 0x560761f000a0 'long'
|-EnumDecl 0x560761f7ead0 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x560761f7eb98 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x560761f7ebe8 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x560761f7ec38 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x560761f7ed08 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x560761f7ed58 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x560761f7eda8 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x560761f7edf8 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x560761f7ee80 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x560761f7ee68 <col:26> 'int'
| |   `-DeclRefExpr 0x560761f7ee48 <col:26> 'int' EnumConstant 0x560761f7ed08 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x560761f7ef08 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x560761f7eef0 <col:29> 'int'
| |   `-DeclRefExpr 0x560761f7eed0 <col:29> 'int' EnumConstant 0x560761f7ed58 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x560761f7ef90 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x560761f7ef78 <col:30> 'int'
| |   `-DeclRefExpr 0x560761f7ef58 <col:30> 'int' EnumConstant 0x560761f7eda8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x560761f7f018 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x560761f7f000 <col:27> 'int'
|     `-DeclRefExpr 0x560761f7efe0 <col:27> 'int' EnumConstant 0x560761f7ee80 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x560761f7f068 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x560761f7f138 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x560761f7f1c0 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x560761f7f1a8 <col:30> 'int'
| |   `-DeclRefExpr 0x560761f7f188 <col:30> 'int' EnumConstant 0x560761f7f138 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x560761f7f210 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x560761f7f298 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x560761f7f280 <col:29> 'int'
|     `-DeclRefExpr 0x560761f7f260 <col:29> 'int' EnumConstant 0x560761f7f210 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x560761f7f2e8 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x560761f7f3b8 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x560761f7f408 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x560761f7f458 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x560761f7f4a8 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x560761f7f5c0 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x560761f7f610 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x560761f7f660 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x560761f7f6e8 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x560761f7f6d0 <col:31> 'int'
|     `-DeclRefExpr 0x560761f7f6b0 <col:31> 'int' EnumConstant 0x560761f7f5c0 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x560761f7f738 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x560761f7f808 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x560761f7f858 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x560761f7f8a8 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x560761f7f978 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x560761f7f9c8 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x560761f7fa18 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x560761f7fae8 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x560761f7fb38 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x560761f7fb88 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x560761f7fdc8 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x560761f7fe30 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x560761f7fe98 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x560761f7ffb8 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x560761f80008 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x560761f800d8 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x560761f80128 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x560761f80178 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x560761f80248 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x560761f80298 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x560761f808f8 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x560761f80390 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x560761f804a0 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f806e0 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x560761f80760 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x560761f809b8 <col:47>
| |-NonNullAttr 0x560761f80a10 <col:77, col:94> 1 3
| `-CallbackAttr 0x560761f80a48 <line:385:12> Implicit 2 3
|-FunctionDecl 0x560761f80b70 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x560761f80aa0 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x560761f80dc8 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x560761f80c28 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x560761f80ca8 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x560761f80f98 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x560761f80e88 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x560761f81040 <col:60>
|-FunctionDecl 0x560761f81190 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x560761f81230 <col:54>
| `-ConstAttr 0x560761f81288 <col:95>
|-FunctionDecl 0x560761f81458 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x560761f812c0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560761f81338 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x560761f81508 <line:394:19>
| `-ConstAttr 0x560761f81560 <col:60>
|-FunctionDecl 0x560761f81f68 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x560761f81e30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x560761f82010 <col:71>
| `-NonNullAttr 0x560761f82068 <col:112, col:126> 1
|-FunctionDecl 0x560761f82170 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x560761f820b8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x560761f82218 <line:397:22>
| `-NonNullAttr 0x560761f82270 <col:63, col:77> 1
|-FunctionDecl 0x560761f82498 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x560761f822b8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x560761f82338 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x560761f82548 <line:400:22>
| `-NonNullAttr 0x560761f825a0 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f827a8 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x560761f825e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560761f82668 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x560761f82858 <line:403:22>
| `-NonNullAttr 0x560761f828b0 <col:63, col:77> 1
|-FunctionDecl 0x560761f82b08 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x560761f828f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x560761f829a0 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x560761f82bb8 <line:406:22>
| `-NonNullAttr 0x560761f82c10 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f83e48 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x560761f82c58 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560761f82cd0 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x560761f83ef8 <line:409:22>
| `-NonNullAttr 0x560761f83f50 <col:63, col:77> 1
|-FunctionDecl 0x560761f84188 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x560761f83f98 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f84028 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x560761f84238 <line:412:22>
| `-NonNullAttr 0x560761f84290 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f844c8 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x560761f842d8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f84368 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x560761f84578 <col:37>
| `-NonNullAttr 0x560761f845d0 <col:78, col:95> 1 2
|-FunctionDecl 0x560761f847b8 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f84618 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f84698 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x560761f84868 <line:418:22>
| `-NonNullAttr 0x560761f848c0 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f84a48 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x560761f84908 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560761f84988 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x560761f84af8 <line:420:22>
| `-NonNullAttr 0x560761f84b50 <col:63, col:77> 1
|-FunctionDecl 0x560761f84cf8 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f84b98 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f84c18 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x560761f84da8 <line:423:22>
| `-NonNullAttr 0x560761f85e30 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f85fb8 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x560761f85e78 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560761f85ef8 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x560761f86068 <line:426:22>
| `-NonNullAttr 0x560761f860c0 <col:63, col:77> 1
|-FunctionDecl 0x560761f86268 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f86108 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f86188 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x560761f86318 <line:429:22>
| `-NonNullAttr 0x560761f86370 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f864f8 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x560761f863b8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560761f86438 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x560761f865a8 <line:431:22>
| `-NonNullAttr 0x560761f86600 <col:63, col:77> 1
|-FunctionDecl 0x560761f86828 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x560761f86648 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f866c8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x560761f868d8 <line:434:22>
| |-NonNullAttr 0x560761f86930 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x560761f86968 <col:100> "" ""
|-FunctionDecl 0x560761f86b78 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x560761f869b8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560761f86a38 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x560761f86c28 <line:437:22>
| |-NonNullAttr 0x560761f86c80 <col:63, col:77> 1
| `-DeprecatedAttr 0x560761f86cb8 <col:97> "" ""
|-FunctionDecl 0x560761f86eb8 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x560761f86d08 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f86d80 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x560761f86f68 <line:440:22>
| `-NonNullAttr 0x560761f86fc0 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f87140 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x560761f87008 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560761f87080 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x560761f871f0 <line:443:22>
| `-NonNullAttr 0x560761f87248 <col:63, col:77> 1
|-FunctionDecl 0x560761f87538 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x560761f87298 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560761f87318 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x560761f87390 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x560761f875f0 <line:447:22>
| `-NonNullAttr 0x560761f87648 <col:63, col:83> 1 2 3
|-FunctionDecl 0x560761f878f8 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x560761f876a0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560761f87720 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x560761f87798 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x560761f879b0 <col:43>
| `-NonNullAttr 0x560761f87a08 <col:84, col:98> 1
|-FunctionDecl 0x560761f87cc8 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x560761f87a58 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560761f87ad8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x560761f87b68 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x560761f87d80 <line:452:22>
| `-NonNullAttr 0x560761f87dd8 <col:63, col:77> 3
|-FunctionDecl 0x560761f880e8 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x560761f87e50 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560761f87ed0 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x560761f87f60 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x560761f881a0 <line:456:22>
| `-NonNullAttr 0x560761f881f8 <col:63, col:80> 2 3
|-FunctionDecl 0x560761f883e8 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x560761f88248 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560761f882c8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x560761f88498 <line:458:22>
|-FunctionDecl 0x560761f88868 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x560761f88560 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x560761f88700 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x560761f88918 <col:52, col:69> 1 2
|-FunctionDecl 0x560761f88ac0 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x560761f889a0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x560761f88a20 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x560761f88ca8 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x560761f88b88 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x560761f88c08 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x560761f88e60 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x560761f88d68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x560761f88fa0 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x560761f89040 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x560761f890e8 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x560761f891d8 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x560761f89240 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x560761f89410 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/mix030_tso.oepc_false-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x560761f89508 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x560761f895c0 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x560761f89560 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x560761f890c0 '__pthread_unwind_buf_t'
| |   `-Record 0x560761f89040 ''
| `-AlignedAttr 0x560761f89618 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x560761f89690 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x560761f897f0 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x560761f89858 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x560761f898c0 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x560761f89928 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x560761f89b30 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x560761f89a20 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x560761f89c78 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x560761f89be8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x560761f89e70 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x560761f89d30 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x560761f89f18 <line:487:22>
|-RecordDecl 0x560761f89f70 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x560761f8a288 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x560761f8a0e8 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x560761f8a168 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x560761f8a338 <col:86>
| `-ReturnsTwiceAttr 0x560761f8a390 <col:12> Implicit
|-FunctionDecl 0x560761f8a6b8 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x560761f8a460 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x560761f8a570 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x560761f8a768 <line:493:22>
| `-NonNullAttr 0x560761f8a7c0 <col:63, col:77> 1
|-FunctionDecl 0x560761f8a938 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560761f8a808 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560761f8a9e0 <line:495:22>
| `-NonNullAttr 0x560761f8aa38 <col:63, col:77> 1
|-FunctionDecl 0x560761f8ab40 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560761f8aa88 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560761f8abe8 <line:497:22>
| `-NonNullAttr 0x560761f8ac40 <col:52, col:66> 1
|-FunctionDecl 0x560761f8ad40 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560761f8ac88 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560761f8ade8 <line:499:22>
| `-NonNullAttr 0x560761f8ae40 <col:52, col:66> 1
|-FunctionDecl 0x560761f8b088 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x560761f8ae98 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x560761f8af28 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x560761f8b138 <col:36>
| `-NonNullAttr 0x560761f8b190 <col:66, col:83> 1 2
|-FunctionDecl 0x560761f8b290 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560761f8b1d8 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560761f8b338 <line:504:22>
| `-NonNullAttr 0x560761f8b390 <col:52, col:66> 1
|-FunctionDecl 0x560761f8b628 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f8b440 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x560761f8b4c0 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x560761f8b6d8 <line:508:22>
| `-NonNullAttr 0x560761f8b730 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f8b9f8 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x560761f8b778 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x560761f8b7f8 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x560761f8b878 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x560761f8bab0 <line:512:22>
| `-NonNullAttr 0x560761f8bb08 <col:63, col:80> 1 3
|-FunctionDecl 0x560761f8bc10 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560761f8bb58 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560761f8bcb8 <line:514:22>
| `-NonNullAttr 0x560761f8bd10 <col:63, col:77> 1
|-FunctionDecl 0x560761f8bf38 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x560761f8bdc0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x560761f8bfe0 <line:516:22>
| `-NonNullAttr 0x560761f8c038 <col:63, col:77> 1
|-FunctionDecl 0x560761f8c140 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x560761f8c088 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x560761f8c1e8 <line:518:22>
| `-NonNullAttr 0x560761f8c240 <col:63, col:77> 1
|-FunctionDecl 0x560761f8c468 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f8c288 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x560761f8c308 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x560761f8c518 <line:522:22>
| `-NonNullAttr 0x560761f8c570 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f8c778 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560761f8c5b8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560761f8c638 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x560761f8c828 <line:525:22>
| `-NonNullAttr 0x560761f8c880 <col:63, col:77> 1
|-FunctionDecl 0x560761f8ca28 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f8c8c8 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x560761f8c948 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x560761f8cad8 <line:528:22>
| `-NonNullAttr 0x560761f8cb30 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f8ccb8 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560761f8cb78 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560761f8cbf8 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x560761f8cd68 <line:530:22>
| `-NonNullAttr 0x560761f8cdc0 <col:63, col:77> 1
|-FunctionDecl 0x560761f8df90 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f8ce08 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x560761f8deb0 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x560761f8e040 <line:534:22>
| `-NonNullAttr 0x560761f8e098 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f8e228 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560761f8e0e8 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560761f8e168 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x560761f8e2d8 <line:537:22>
| `-NonNullAttr 0x560761f8e330 <col:63, col:77> 1
|-FunctionDecl 0x560761f8e4d8 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f8e378 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x560761f8e3f8 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x560761f8e588 <line:541:22>
| `-NonNullAttr 0x560761f8e5e0 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f8e768 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560761f8e628 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560761f8e6a8 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x560761f8e818 <line:544:22>
| `-NonNullAttr 0x560761f8e870 <col:63, col:77> 1
|-FunctionDecl 0x560761f8ea58 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x560761f8e8b8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x560761f8e938 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x560761f8eb08 <line:547:22>
| `-NonNullAttr 0x560761f8eb60 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f8ece8 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560761f8eba8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560761f8ec28 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x560761f8ed98 <line:550:22>
| `-NonNullAttr 0x560761f8edf0 <col:63, col:77> 1
|-FunctionDecl 0x560761f90168 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x560761f8ff10 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x560761f90020 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x560761f90218 <col:29>
| `-NonNullAttr 0x560761f90270 <col:70, col:84> 1
|-FunctionDecl 0x560761f903e8 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560761f902b8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560761f90490 <line:555:22>
| `-NonNullAttr 0x560761f904e8 <col:63, col:77> 1
|-FunctionDecl 0x560761f905f0 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560761f90538 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560761f90698 <line:557:22>
| `-NonNullAttr 0x560761f906f0 <col:52, col:66> 1
|-FunctionDecl 0x560761f907f0 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560761f90738 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560761f90898 <line:559:19>
| `-NonNullAttr 0x560761f908f0 <col:49, col:63> 1
|-FunctionDecl 0x560761f90b28 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x560761f90938 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x560761f909c8 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x560761f90bd8 <col:39>
| `-NonNullAttr 0x560761f90c30 <col:69, col:86> 1 2
|-FunctionDecl 0x560761f90d30 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560761f90c78 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560761f90dd8 <line:564:22>
| `-NonNullAttr 0x560761f90e30 <col:52, col:66> 1
|-FunctionDecl 0x560761f90f98 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560761f90ee0 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560761f91040 <line:566:22>
| `-NonNullAttr 0x560761f91098 <col:52, col:66> 1
|-FunctionDecl 0x560761f91258 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x560761f910e8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x560761f91178 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x560761f91308 <col:39>
| `-NonNullAttr 0x560761f91360 <col:69, col:86> 1 2
|-FunctionDecl 0x560761f91460 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560761f913a8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560761f91508 <line:571:22>
| `-NonNullAttr 0x560761f91560 <col:52, col:66> 1
|-FunctionDecl 0x560761f91748 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x560761f91610 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x560761f917f0 <line:573:22>
| `-NonNullAttr 0x560761f91848 <col:63, col:77> 1
|-FunctionDecl 0x560761f91950 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x560761f91898 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x560761f919f8 <line:575:22>
| `-NonNullAttr 0x560761f91a50 <col:63, col:77> 1
|-FunctionDecl 0x560761f91c78 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f91a98 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x560761f91b18 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x560761f91d28 <line:579:22>
| `-NonNullAttr 0x560761f91d80 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f91fa8 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x560761f91dc8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x560761f91e48 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x560761f92058 <line:582:22>
| `-NonNullAttr 0x560761f920b0 <col:63, col:77> 1
|-FunctionDecl 0x560761f92258 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f920f8 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x560761f92178 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x560761f92308 <line:586:22>
| `-NonNullAttr 0x560761f92360 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f924e8 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x560761f923a8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x560761f92428 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x560761f92598 <col:36>
| `-NonNullAttr 0x560761f925f0 <col:77, col:91> 1
|-FunctionDecl 0x560761f92928 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x560761f926d0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x560761f927e0 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x560761f929d8 <line:591:22>
| `-NonNullAttr 0x560761f92a30 <col:63, col:77> 1
|-FunctionDecl 0x560761f92ba8 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x560761f92a78 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x560761f92c50 <line:593:22>
| `-NonNullAttr 0x560761f92ca8 <col:63, col:77> 1
|-FunctionDecl 0x560761f92db0 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x560761f92cf8 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x560761f92e58 <line:595:22>
| `-NonNullAttr 0x560761f92eb0 <col:52, col:66> 1
|-FunctionDecl 0x560761f92fc8 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x560761f92f10 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x560761f93070 <line:597:22>
| `-NonNullAttr 0x560761f930c8 <col:52, col:66> 1
|-FunctionDecl 0x560761f932f8 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x560761f93118 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x560761f93190 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x560761f933a8 <line:600:22, col:39> 1 2
|-FunctionDecl 0x560761f936d8 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x560761f93428 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x560761f934a0 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x560761f93530 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x560761f93790 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x560761f939a8 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x560761f93870 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x560761f93a50 <line:606:22>
| `-NonNullAttr 0x560761f93aa8 <col:63, col:77> 1
|-FunctionDecl 0x560761f93bb0 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x560761f93af8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x560761f93c58 <line:608:22>
| `-NonNullAttr 0x560761f93cb0 <col:63, col:77> 1
|-FunctionDecl 0x560761f93f10 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f93cf8 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x560761f93d78 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x560761f93fc0 <line:612:22>
| `-NonNullAttr 0x560761f94018 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f94228 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x560761f94068 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x560761f940e8 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x560761f942d8 <col:37>
| `-NonNullAttr 0x560761f94330 <col:78, col:92> 1
|-FunctionDecl 0x560761f94548 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x560761f94378 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x560761f94420 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x560761f945f8 <line:618:22>
| `-NonNullAttr 0x560761f94650 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f94818 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x560761f94698 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x560761f94710 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x560761f948c8 <line:621:22>
| `-NonNullAttr 0x560761f94920 <col:63, col:77> 1
|-FunctionDecl 0x560761f94bc8 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x560761f94a00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x560761f94a80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x560761f94c78 <line:623:22>
| `-NonNullAttr 0x560761f94cd0 <col:63, col:77> 1
|-FunctionDecl 0x560761f94e48 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x560761f94d18 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x560761f94f20 <line:625:22>
| `-NonNullAttr 0x560761f94f78 <col:63, col:77> 1
|-FunctionDecl 0x560761f95080 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x560761f94fc8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x560761f95128 <line:627:22>
| `-NonNullAttr 0x560761f95180 <col:52, col:66> 1
|-FunctionDecl 0x560761f95280 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x560761f951c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x560761f95328 <line:629:22>
| `-NonNullAttr 0x560761f95380 <col:52, col:66> 1
|-FunctionDecl 0x560761f95480 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x560761f953c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x560761f95528 <line:631:22>
| `-NonNullAttr 0x560761f95580 <col:52, col:66> 1
|-FunctionDecl 0x560761f95958 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x560761f95660 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x560761f95770 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x560761f957f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x560761f95a10 <line:635:22>
| `-NonNullAttr 0x560761f95a68 <col:63, col:77> 1
|-FunctionDecl 0x560761f95be8 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x560761f95ab8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x560761f95c90 <line:637:22>
| `-NonNullAttr 0x560761f95ce8 <col:63, col:77> 1
|-FunctionDecl 0x560761f95df0 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x560761f95d38 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x560761f95e98 <line:639:22>
| `-NonNullAttr 0x560761f95ef0 <col:52, col:66> 1
|-FunctionDecl 0x560761f960e8 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x560761f95fb0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x560761f96190 <line:641:22>
| `-NonNullAttr 0x560761f961e8 <col:63, col:77> 1
|-FunctionDecl 0x560761f962f0 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x560761f96238 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x560761f96398 <line:643:22>
| `-NonNullAttr 0x560761f963f0 <col:63, col:77> 1
|-FunctionDecl 0x560761f96618 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560761f96438 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x560761f964b8 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x560761f966c8 <line:647:22>
| `-NonNullAttr 0x560761f96720 <col:63, col:80> 1 2
|-FunctionDecl 0x560761f96928 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x560761f96768 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x560761f967e8 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x560761f969d8 <line:650:22>
| `-NonNullAttr 0x560761f96a30 <col:63, col:77> 1
|-FunctionDecl 0x560761f96d78 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x560761f96b10 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x560761f96c30 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x560761f96e28 <line:653:22>
| `-NonNullAttr 0x560761f96e80 <col:63, col:77> 1
|-FunctionDecl 0x560761f96fe8 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x560761f96ec8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x560761f97090 <col:69>
|-FunctionDecl 0x560761f97208 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x560761f970f8 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x560761f972b0 <col:72>
|-FunctionDecl 0x560761f974e8 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x560761f97318 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x560761f973c8 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x560761f97598 <col:44>
|-FunctionDecl 0x560761f977b8 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x560761f97600 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560761f97678 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x560761f97868 <line:660:22>
| `-NonNullAttr 0x560761f978c0 <col:63, col:77> 2
|-FunctionDecl 0x560761f97d08 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x560761f979a0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x560761f97ab0 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x560761f97bc0 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x560761f97dc0 <col:47>
|-FunctionDecl 0x560761f98f60 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x560761f97e30 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x560761f990b8 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x560761f99020 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x560761f99210 <line:667:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x560761f99178 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x560761f99368 <line:668:1, col:20> col:8 used P3 'void *(void *)'
| `-ParmVarDecl 0x560761f992d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x560761f99430 <line:669:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x560761f994f0 <line:670:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x560761f995b0 <line:671:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x560761f99668 <line:672:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x560761f996e8 prev 0x560761f99668 <line:673:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x560761f99750 <col:24> 'int' 0
|-VarDecl 0x560761f99788 <line:674:1, col:5> col:5 used __unbuffered_p3_EAX 'int'
|-VarDecl 0x560761f99808 prev 0x560761f99788 <line:675:1, col:27> col:5 used __unbuffered_p3_EAX 'int' cinit
| `-IntegerLiteral 0x560761f99870 <col:27> 'int' 0
|-VarDecl 0x560761f998a8 <line:676:1, col:5> col:5 used __unbuffered_p3_EBX 'int'
|-VarDecl 0x560761f99928 prev 0x560761f998a8 <line:677:1, col:27> col:5 used __unbuffered_p3_EBX 'int' cinit
| `-IntegerLiteral 0x560761f99990 <col:27> 'int' 0
|-VarDecl 0x560761f999c8 <line:678:1, col:5> col:5 used a 'int'
|-VarDecl 0x560761f99a48 prev 0x560761f999c8 <line:679:1, col:9> col:5 used a 'int' cinit
| `-IntegerLiteral 0x560761f99ab0 <col:9> 'int' 0
|-VarDecl 0x560761f99ae0 <line:680:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x560761f99b58 <line:681:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x560761f99bd8 <line:682:1, col:5> col:5 used x 'int'
|-VarDecl 0x560761f99c58 prev 0x560761f99bd8 <line:683:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x560761f99cc0 <col:9> 'int' 0
|-VarDecl 0x560761f99cf8 <line:684:1, col:5> col:5 used y 'int'
|-VarDecl 0x560761f99d78 prev 0x560761f99cf8 <line:685:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x560761f99de0 <col:9> 'int' 0
|-VarDecl 0x560761f99e18 <line:686:1, col:5> col:5 used z 'int'
|-VarDecl 0x560761f99e98 prev 0x560761f99e18 <line:687:1, col:9> col:5 used z 'int' cinit
| `-IntegerLiteral 0x560761f99f00 <col:9> 'int' 0
|-VarDecl 0x560761f99f70 <line:688:1, col:7> col:7 used z$flush_delayed '_Bool'
|-VarDecl 0x560761f99ff0 <line:689:1, col:5> col:5 used z$mem_tmp 'int'
|-VarDecl 0x560761f9a068 <line:690:1, col:7> col:7 used z$r_buff0_thd0 '_Bool'
|-VarDecl 0x560761f9a0e0 <line:691:1, col:7> col:7 used z$r_buff0_thd1 '_Bool'
|-VarDecl 0x560761f9a158 <line:692:1, col:7> col:7 used z$r_buff0_thd2 '_Bool'
|-VarDecl 0x560761f9a1d0 <line:693:1, col:7> col:7 used z$r_buff0_thd3 '_Bool'
|-VarDecl 0x560761f9a248 <line:694:1, col:7> col:7 used z$r_buff0_thd4 '_Bool'
|-VarDecl 0x560761f9a2c0 <line:695:1, col:7> col:7 used z$r_buff1_thd0 '_Bool'
|-VarDecl 0x560761f9a338 <line:696:1, col:7> col:7 used z$r_buff1_thd1 '_Bool'
|-VarDecl 0x560761f9a3b0 <line:697:1, col:7> col:7 used z$r_buff1_thd2 '_Bool'
|-VarDecl 0x560761f9a428 <line:698:1, col:7> col:7 used z$r_buff1_thd3 '_Bool'
|-VarDecl 0x560761f9a4a0 <line:699:1, col:7> col:7 used z$r_buff1_thd4 '_Bool'
|-VarDecl 0x560761f9a518 <line:700:1, col:7> col:7 z$read_delayed '_Bool'
|-VarDecl 0x560761f9a598 <line:701:1, col:6> col:6 z$read_delayed_var 'int *'
|-VarDecl 0x560761f9a618 <line:702:1, col:5> col:5 used z$w_buff0 'int'
|-VarDecl 0x560761f9a690 <line:703:1, col:7> col:7 used z$w_buff0_used '_Bool'
|-VarDecl 0x560761f9a710 <line:704:1, col:5> col:5 used z$w_buff1 'int'
|-VarDecl 0x560761f9a788 <line:705:1, col:7> col:7 used z$w_buff1_used '_Bool'
|-VarDecl 0x560761f9a800 <line:706:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x560761f9a878 <line:707:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x560761f9a990 prev 0x560761f98f60 <line:708:1, line:722:1> line:708:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x560761f9a8f8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x560761f9af80 <line:709:1, line:722:1>
|   |-CallExpr 0x560761f9aaa8 <line:710:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9aa90 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9aa38 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9ab08 <line:711:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560761f9aac8 <col:3> 'int' lvalue Var 0x560761f99a48 'a' 'int'
|   | `-IntegerLiteral 0x560761f9aae8 <col:7> 'int' 1
|   |-CallExpr 0x560761f9ab60 <line:712:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9ab48 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9ab28 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9abb8 <line:713:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9aba0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9ab80 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9ac18 <line:714:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560761f9abd8 <col:3> 'int' lvalue Var 0x560761f99c58 'x' 'int'
|   | `-IntegerLiteral 0x560761f9abf8 <col:7> 'int' 1
|   |-CallExpr 0x560761f9ac70 <line:715:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9ac58 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9ac38 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9acc8 <line:716:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9acb0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9ac90 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x560761f9ad20 <line:717:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9ad08 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9ace8 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9ad78 <line:718:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9ad60 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9ad40 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9ae30 <line:719:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x560761f9ad98 <col:3> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x560761f9ae10 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x560761f9adf8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9adb8 <col:22> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x560761f9add8 <col:41> 'int' 1
|   |-CallExpr 0x560761f9ae88 <line:720:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9ae70 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9ae50 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x560761f9af38 <line:721:3, col:36>
|     `-CallExpr 0x560761f9af18 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x560761f9af00 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x560761f9aea8 <col:10> 'void *(void)' Function 0x560761f3fe68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x560761f9b0a0 prev 0x560761f990b8 <line:723:1, line:737:1> line:723:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x560761f9b008 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x560761f9b5e8 <line:724:1, line:737:1>
|   |-CallExpr 0x560761f9b180 <line:725:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9b168 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b148 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9b1e0 <line:726:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560761f9b1a0 <col:3> 'int' lvalue Var 0x560761f99c58 'x' 'int'
|   | `-IntegerLiteral 0x560761f9b1c0 <col:7> 'int' 2
|   |-CallExpr 0x560761f9b238 <line:727:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9b220 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b200 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9b290 <line:728:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9b278 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b258 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9b2f0 <line:729:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560761f9b2b0 <col:3> 'int' lvalue Var 0x560761f99d78 'y' 'int'
|   | `-IntegerLiteral 0x560761f9b2d0 <col:7> 'int' 1
|   |-CallExpr 0x560761f9b348 <line:730:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9b330 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b310 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9b3a0 <line:731:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9b388 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b368 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x560761f9b3f8 <line:732:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9b3e0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b3c0 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9b450 <line:733:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9b438 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b418 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9b508 <line:734:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x560761f9b470 <col:3> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x560761f9b4e8 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x560761f9b4d0 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9b490 <col:22> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x560761f9b4b0 <col:41> 'int' 1
|   |-CallExpr 0x560761f9b560 <line:735:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9b548 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b528 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x560761f9b5d8 <line:736:3, col:36>
|     `-CallExpr 0x560761f9b5b8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x560761f9b5a0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x560761f9b580 <col:10> 'void *(void)' Function 0x560761f3fe68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x560761f9b708 prev 0x560761f99210 <line:738:1, line:757:1> line:738:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x560761f9b670 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x560761f9c930 <line:739:1, line:757:1>
|   |-CallExpr 0x560761f9b7e8 <line:740:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9b7d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b7b0 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9b848 <line:741:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560761f9b808 <col:3> 'int' lvalue Var 0x560761f99d78 'y' 'int'
|   | `-IntegerLiteral 0x560761f9b828 <col:7> 'int' 2
|   |-CallExpr 0x560761f9b8a0 <line:742:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9b888 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b868 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9b8f8 <line:743:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9b8e0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b8c0 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9b958 <line:744:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560761f9b918 <col:3> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   | `-IntegerLiteral 0x560761f9b938 <col:7> 'int' 1
|   |-CallExpr 0x560761f9b9b0 <line:745:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9b998 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b978 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9ba08 <line:746:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9b9f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9b9d0 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9bcf0 <line:747:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x560761f9ba28 <col:3> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   | `-ConditionalOperator 0x560761f9bcc0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x560761f9bae8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x560761f9baa0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x560761f9ba88 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x560761f9ba48 <col:7> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x560761f9bad0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x560761f9bab8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x560761f9ba68 <col:25> '_Bool' lvalue Var 0x560761f9a1d0 'z$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x560761f9bca8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9bb08 <col:42> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x560761f9bc88 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x560761f9bc58 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x560761f9bbc8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x560761f9bb80 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x560761f9bb68 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x560761f9bb28 <col:55> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x560761f9bbb0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x560761f9bb98 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x560761f9bb48 <col:73> '_Bool' lvalue Var 0x560761f9a428 'z$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x560761f9bc28 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560761f9bbe8 <col:90> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x560761f9bc40 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761f9bc08 <col:102> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   |-BinaryOperator 0x560761f9bef8 <line:748:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9bd10 <col:3> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9bee0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761f9beb0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560761f9bdd0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560761f9bd88 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560761f9bd70 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560761f9bd30 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560761f9bdb8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560761f9bda0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560761f9bd50 <col:38> '_Bool' lvalue Var 0x560761f9a1d0 'z$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x560761f9be68 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560761f9be20 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560761f9bdf0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560761f9be98 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560761f9be80 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761f9be48 <col:66> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560761f9c1f8 <line:749:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9bf18 <col:3> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9c1e0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761f9c1b0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560761f9c0d0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560761f9bff0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560761f9bfa8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560761f9bf90 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560761f9bf38 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560761f9bfd8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560761f9bfc0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560761f9bf58 <col:38> '_Bool' lvalue Var 0x560761f9a1d0 'z$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x560761f9c0b0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560761f9c068 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560761f9c050 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560761f9c010 <col:56> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560761f9c098 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560761f9c080 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560761f9c030 <col:74> '_Bool' lvalue Var 0x560761f9a428 'z$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x560761f9c168 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560761f9c120 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560761f9c0f0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560761f9c198 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560761f9c180 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761f9c148 <col:102> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x560761f9c400 <line:750:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9c218 <col:3> '_Bool' lvalue Var 0x560761f9a1d0 'z$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9c3e8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761f9c3b8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560761f9c2d8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560761f9c290 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560761f9c278 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560761f9c238 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560761f9c2c0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560761f9c2a8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560761f9c258 <col:38> '_Bool' lvalue Var 0x560761f9a1d0 'z$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x560761f9c370 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560761f9c328 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560761f9c2f8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560761f9c3a0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560761f9c388 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761f9c350 <col:66> '_Bool' lvalue Var 0x560761f9a1d0 'z$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x560761f9c6e8 <line:751:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9c420 <col:3> '_Bool' lvalue Var 0x560761f9a428 'z$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9c6d0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761f9c6a0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560761f9c5c0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560761f9c4e0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560761f9c498 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560761f9c480 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560761f9c440 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560761f9c4c8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560761f9c4b0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560761f9c460 <col:38> '_Bool' lvalue Var 0x560761f9a1d0 'z$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x560761f9c5a0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560761f9c558 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560761f9c540 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560761f9c500 <col:56> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560761f9c588 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560761f9c570 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560761f9c520 <col:74> '_Bool' lvalue Var 0x560761f9a428 'z$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x560761f9c658 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560761f9c610 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560761f9c5e0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560761f9c688 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560761f9c670 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761f9c638 <col:102> '_Bool' lvalue Var 0x560761f9a428 'z$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x560761f9c740 <line:752:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9c728 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9c708 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9c798 <line:753:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9c780 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9c760 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9c850 <line:754:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x560761f9c7b8 <col:3> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x560761f9c830 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x560761f9c818 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9c7d8 <col:22> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x560761f9c7f8 <col:41> 'int' 1
|   |-CallExpr 0x560761f9c8a8 <line:755:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9c890 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9c870 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x560761f9c920 <line:756:3, col:36>
|     `-CallExpr 0x560761f9c900 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x560761f9c8e8 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x560761f9c8c8 <col:10> 'void *(void)' Function 0x560761f3fe68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x560761f9ca78 prev 0x560761f99368 <line:758:1, line:803:1> line:758:8 used P3 'void *(void *)'
| |-ParmVarDecl 0x560761f9c9e0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x560761fa0d80 <line:759:1, line:803:1>
|   |-CallExpr 0x560761f9cb58 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9cb40 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9cb20 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9cbd0 <line:761:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x560761f9cb78 <col:3> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x560761f9cbb8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9cb98 <col:15> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   |-BinaryOperator 0x560761f9cc30 <line:762:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x560761f9cbf0 <col:3> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   | `-IntegerLiteral 0x560761f9cc10 <col:15> 'int' 2
|   |-BinaryOperator 0x560761f9cca8 <line:763:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9cc50 <col:3> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9cc90 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9cc70 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560761f9cd40 <line:764:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9ccc8 <col:3> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x560761f9cd18 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x560761f9cce8 <col:27> 'int' 1
|   |-CallExpr 0x560761f9cec8 <line:765:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x560761f9ceb0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x560761f9cd60 <col:3> 'void (int)' Function 0x560761f400d8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x560761f9ce60 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x560761f9ce40 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x560761f9ce20 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x560761f9cdd8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x560761f9cdc0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x560761f9cd80 <col:23> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x560761f9ce08 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x560761f9cdf0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x560761f9cda0 <col:41> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560761f9cf48 <line:766:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9cef0 <col:3> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9cf30 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9cf10 <col:20> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x560761f9cfd8 <line:767:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9cf68 <col:3> '_Bool' lvalue Var 0x560761f9a338 'z$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9cfc0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9cfa0 <col:20> '_Bool' lvalue Var 0x560761f9a0e0 'z$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x560761f9d050 <line:768:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9cff8 <col:3> '_Bool' lvalue Var 0x560761f9a3b0 'z$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9d038 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9d018 <col:20> '_Bool' lvalue Var 0x560761f9a158 'z$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x560761f9d0c8 <line:769:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9d070 <col:3> '_Bool' lvalue Var 0x560761f9a428 'z$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9d0b0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9d090 <col:20> '_Bool' lvalue Var 0x560761f9a1d0 'z$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x560761f9d140 <line:770:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9d0e8 <col:3> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9d128 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9d108 <col:20> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x560761f9d1d8 <line:771:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9d160 <col:3> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   | `-CStyleCastExpr 0x560761f9d1b0 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x560761f9d180 <col:27> 'int' 1
|   |-CallExpr 0x560761f9d230 <line:772:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9d218 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9d1f8 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9d288 <line:773:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9d270 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9d250 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9d338 <line:774:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9d2a8 <col:3> '_Bool' lvalue Var 0x560761f9a800 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9d320 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x560761f9d300 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x560761f9d2e8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x560761f9d2c8 <col:19> 'void *(void)' Function 0x560761f3fe68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x560761f9d3e8 <line:775:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9d358 <col:3> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9d3d0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x560761f9d3b0 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x560761f9d398 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x560761f9d378 <col:19> 'void *(void)' Function 0x560761f3fe68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x560761f9d460 <line:776:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9d408 <col:3> '_Bool' lvalue Var 0x560761f99f70 'z$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9d448 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9d428 <col:21> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x560761f9d4d8 <line:777:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x560761f9d480 <col:3> 'int' lvalue Var 0x560761f99ff0 'z$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x560761f9d4c0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9d4a0 <col:15> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   |-BinaryOperator 0x560761f9d910 <line:778:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x560761f9d4f8 <col:3> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   | `-ConditionalOperator 0x560761f9d8e0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x560761f9d708 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x560761f9d628 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x560761f9d550 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x560761f9d538 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x560761f9d518 <col:8> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x560761f9d608 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x560761f9d5a0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x560761f9d588 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x560761f9d568 <col:27> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |   | |   `-UnaryOperator 0x560761f9d5f0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x560761f9d5d8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x560761f9d5b8 <col:46> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x560761f9d6e8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x560761f9d680 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x560761f9d668 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x560761f9d648 <col:65> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |   |   `-UnaryOperator 0x560761f9d6d0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x560761f9d6b8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x560761f9d698 <col:84> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x560761f9d8c8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9d728 <col:101> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   |   `-ParenExpr 0x560761f9d8a8 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x560761f9d878 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x560761f9d7e8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x560761f9d7a0 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x560761f9d788 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x560761f9d748 <col:106> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x560761f9d7d0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x560761f9d7b8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x560761f9d768 <col:124> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x560761f9d848 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560761f9d808 <col:141> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x560761f9d860 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761f9d828 <col:153> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   |-BinaryOperator 0x560761f9de20 <line:779:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x560761f9d930 <col:3> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   | `-ConditionalOperator 0x560761f9ddf0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x560761f9ddc0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560761f9dda8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560761f9d950 <col:15> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x560761f9ddd8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9d970 <col:31> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x560761f9dd88 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x560761f9dd58 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x560761f9db80 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x560761f9daa0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x560761f9d9c8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x560761f9d9b0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x560761f9d990 <col:45> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x560761f9da80 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x560761f9da18 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x560761f9da00 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x560761f9d9e0 <col:64> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |       | |   `-UnaryOperator 0x560761f9da68 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x560761f9da50 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x560761f9da30 <col:83> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x560761f9db60 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x560761f9daf8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x560761f9dae0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x560761f9dac0 <col:102> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |       |   `-UnaryOperator 0x560761f9db48 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x560761f9db30 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x560761f9db10 <col:121> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x560761f9dd40 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560761f9dba0 <col:138> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   |       `-ParenExpr 0x560761f9dd20 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x560761f9dcf0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x560761f9dc60 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x560761f9dc18 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x560761f9dc00 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x560761f9dbc0 <col:151> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x560761f9dc48 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x560761f9dc30 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x560761f9dbe0 <col:169> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |           |-ImplicitCastExpr 0x560761f9dcc0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x560761f9dc80 <col:186> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x560761f9dcd8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x560761f9dca0 <col:198> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   |-BinaryOperator 0x560761f9e350 <line:780:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x560761f9de40 <col:3> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   | `-ConditionalOperator 0x560761f9e320 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x560761f9e2f0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560761f9e2d8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560761f9de60 <col:15> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x560761f9e308 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9de80 <col:31> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   |   `-ParenExpr 0x560761f9e2b8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x560761f9e288 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x560761f9e0b0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x560761f9dfd0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x560761f9ded8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x560761f9dec0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x560761f9dea0 <col:45> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x560761f9dfb0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x560761f9df28 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x560761f9df10 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x560761f9def0 <col:64> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |       | |   `-UnaryOperator 0x560761f9df78 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x560761f9df60 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x560761f9df40 <col:83> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x560761f9e090 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x560761f9e028 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x560761f9e010 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x560761f9dff0 <col:102> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |       |   `-UnaryOperator 0x560761f9e078 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x560761f9e060 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x560761f9e040 <col:121> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x560761f9e270 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560761f9e0d0 <col:138> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   |       `-ParenExpr 0x560761f9e250 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x560761f9e220 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x560761f9e190 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x560761f9e148 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x560761f9e130 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x560761f9e0f0 <col:151> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x560761f9e178 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x560761f9e160 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x560761f9e110 <col:169> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |           |-ImplicitCastExpr 0x560761f9e1f0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x560761f9e1b0 <col:186> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x560761f9e208 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x560761f9e1d0 <col:198> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   |-BinaryOperator 0x560761f9e8f8 <line:781:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9e370 <col:3> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9e8e0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761f9e8b0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x560761f9e868 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560761f9e850 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560761f9e390 <col:20> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560761f9e898 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560761f9e880 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560761f9e3b0 <col:36> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x560761f9e830 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x560761f9e800 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x560761f9e5c0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560761f9e4e0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560761f9e408 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560761f9e3f0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560761f9e3d0 <col:55> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560761f9e4c0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560761f9e458 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560761f9e440 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560761f9e420 <col:74> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x560761f9e4a8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560761f9e490 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560761f9e470 <col:93> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560761f9e5a0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560761f9e538 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560761f9e520 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560761f9e500 <col:112> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x560761f9e588 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560761f9e570 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560761f9e550 <col:131> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x560761f9e7e8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560761f9e7d0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560761f9e5e0 <col:148> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x560761f9e7b0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x560761f9e780 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x560761f9e6a0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560761f9e658 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560761f9e640 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560761f9e600 <col:166> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560761f9e688 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560761f9e670 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560761f9e620 <col:184> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x560761f9e738 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560761f9e6f0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560761f9e6c0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560761f9e768 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x560761f9e750 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x560761f9e718 <col:212> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560761f9eec0 <line:782:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9e918 <col:3> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9eea8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761f9ee78 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x560761f9ee30 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560761f9ee18 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560761f9e938 <col:20> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560761f9ee60 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560761f9ee48 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560761f9e958 <col:36> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x560761f9edf8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x560761f9edc8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x560761f9eb68 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560761f9ea88 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560761f9e9b0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560761f9e998 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560761f9e978 <col:55> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560761f9ea68 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560761f9ea00 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560761f9e9e8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560761f9e9c8 <col:74> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x560761f9ea50 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560761f9ea38 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560761f9ea18 <col:93> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560761f9eb48 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560761f9eae0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560761f9eac8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560761f9eaa8 <col:112> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x560761f9eb30 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560761f9eb18 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560761f9eaf8 <col:131> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x560761f9edb0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560761f9ed98 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560761f9eb88 <col:148> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x560761f9ed78 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x560761f9ed48 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x560761f9ec48 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560761f9ec00 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560761f9ebe8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560761f9eba8 <col:166> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560761f9ec30 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560761f9ec18 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560761f9ebc8 <col:184> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x560761f9ed18 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560761f9ec98 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560761f9ec68 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560761f9ed30 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x560761f9ecf0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x560761f9ecc0 <col:219> 'int' 0
|   |-BinaryOperator 0x560761f9f478 <line:783:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9eee0 <col:3> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9f460 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761f9f430 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x560761f9f3e8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560761f9f3d0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560761f9ef00 <col:20> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560761f9f418 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560761f9f400 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560761f9ef20 <col:36> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |     `-ParenExpr 0x560761f9f3b0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x560761f9f380 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x560761f9f140 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560761f9f060 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560761f9ef78 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560761f9ef60 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560761f9ef40 <col:55> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560761f9f040 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560761f9efd8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560761f9efc0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560761f9ef90 <col:74> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x560761f9f028 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560761f9f010 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560761f9eff0 <col:93> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560761f9f120 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560761f9f0b8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560761f9f0a0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560761f9f080 <col:112> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x560761f9f108 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560761f9f0f0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560761f9f0d0 <col:131> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x560761f9f368 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560761f9f350 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560761f9f160 <col:148> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         `-ParenExpr 0x560761f9f330 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x560761f9f300 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x560761f9f220 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560761f9f1d8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560761f9f1c0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560761f9f180 <col:166> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560761f9f208 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560761f9f1f0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560761f9f1a0 <col:184> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x560761f9f2b8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560761f9f270 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560761f9f240 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560761f9f2e8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x560761f9f2d0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x560761f9f298 <col:212> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x560761f9fa40 <line:784:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9f498 <col:3> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x560761f9fa28 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761f9f9f8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x560761f9f9b0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560761f9f998 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560761f9f4b8 <col:20> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560761f9f9e0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560761f9f9c8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560761f9f4d8 <col:36> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |     `-ParenExpr 0x560761f9f978 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x560761f9f948 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x560761f9f6e8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560761f9f608 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560761f9f530 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560761f9f518 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560761f9f4f8 <col:55> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560761f9f5e8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560761f9f580 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560761f9f568 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560761f9f548 <col:74> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x560761f9f5d0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560761f9f5b8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560761f9f598 <col:93> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560761f9f6c8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560761f9f660 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560761f9f648 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560761f9f628 <col:112> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x560761f9f6b0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560761f9f698 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560761f9f678 <col:131> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x560761f9f930 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560761f9f918 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560761f9f708 <col:148> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |         `-ParenExpr 0x560761f9f8f8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x560761f9f8c8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x560761f9f7c8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560761f9f780 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560761f9f768 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560761f9f728 <col:166> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560761f9f7b0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560761f9f798 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560761f9f748 <col:184> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x560761f9f898 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560761f9f818 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560761f9f7e8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560761f9f8b0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x560761f9f870 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x560761f9f840 <col:219> 'int' 0
|   |-BinaryOperator 0x560761f9fab8 <line:785:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x560761f9fa60 <col:3> 'int' lvalue Var 0x560761f99808 '__unbuffered_p3_EAX' 'int'
|   | `-ImplicitCastExpr 0x560761f9faa0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9fa80 <col:25> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   |-BinaryOperator 0x560761f9fbe8 <line:786:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x560761f9fad8 <col:3> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   | `-ConditionalOperator 0x560761f9fbb8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x560761f9fb70 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560761f9fb58 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560761f9faf8 <col:7> '_Bool' lvalue Var 0x560761f99f70 'z$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x560761f9fb88 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9fb18 <col:25> 'int' lvalue Var 0x560761f99ff0 'z$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x560761f9fba0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x560761f9fb38 <col:37> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   |-BinaryOperator 0x560761f9fc80 <line:787:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x560761f9fc08 <col:3> '_Bool' lvalue Var 0x560761f99f70 'z$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x560761f9fc58 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x560761f9fc28 <col:28> 'int' 0
|   |-CallExpr 0x560761f9fcd8 <line:788:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9fcc0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9fca0 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9fd30 <line:789:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9fd18 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9fcf8 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761f9fda8 <line:790:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x560761f9fd50 <col:3> 'int' lvalue Var 0x560761f99928 '__unbuffered_p3_EBX' 'int'
|   | `-ImplicitCastExpr 0x560761f9fd90 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560761f9fd70 <col:25> 'int' lvalue Var 0x560761f99a48 'a' 'int'
|   |-CallExpr 0x560761f9fe00 <line:791:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761f9fde8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9fdc8 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761f9fe58 <line:792:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761f9fe40 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761f9fe20 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761fa0158 <line:793:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x560761f9fe78 <col:3> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   | `-ConditionalOperator 0x560761fa0128 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x560761f9ff38 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x560761f9fef0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x560761f9fed8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x560761f9fe98 <col:7> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x560761f9ff20 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x560761f9ff08 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x560761f9feb8 <col:25> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x560761fa0110 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761f9ff58 <col:42> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x560761fa00f0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x560761fa00c0 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x560761fa0030 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x560761f9ffe8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x560761f9ffd0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x560761f9ff78 <col:55> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x560761fa0018 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x560761fa0000 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x560761f9ff98 <col:73> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x560761fa0090 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560761fa0050 <col:90> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x560761fa00a8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761fa0070 <col:102> 'int' lvalue Var 0x560761f99e98 'z' 'int'
|   |-BinaryOperator 0x560761fa0360 <line:794:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560761fa0178 <col:3> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x560761fa0348 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761fa0318 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560761fa0238 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560761fa01f0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560761fa01d8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560761fa0198 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560761fa0220 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560761fa0208 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560761fa01b8 <col:38> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x560761fa02d0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560761fa0288 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560761fa0258 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560761fa0300 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560761fa02e8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761fa02b0 <col:66> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560761fa0648 <line:795:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560761fa0380 <col:3> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560761fa0630 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761fa0600 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560761fa0520 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560761fa0440 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560761fa03f8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560761fa03e0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560761fa03a0 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560761fa0428 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560761fa0410 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560761fa03c0 <col:38> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x560761fa0500 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560761fa04b8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560761fa04a0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560761fa0460 <col:56> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560761fa04e8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560761fa04d0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560761fa0480 <col:74> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x560761fa05b8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560761fa0570 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560761fa0540 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560761fa05e8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560761fa05d0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761fa0598 <col:102> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x560761fa0850 <line:796:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560761fa0668 <col:3> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x560761fa0838 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761fa0808 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560761fa0728 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560761fa06e0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560761fa06c8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560761fa0688 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560761fa0710 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560761fa06f8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560761fa06a8 <col:38> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x560761fa07c0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560761fa0778 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560761fa0748 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560761fa07f0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560761fa07d8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761fa07a0 <col:66> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x560761fa0b38 <line:797:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560761fa0870 <col:3> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x560761fa0b20 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560761fa0af0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560761fa0a10 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560761fa0930 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560761fa08e8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560761fa08d0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560761fa0890 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560761fa0918 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560761fa0900 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560761fa08b0 <col:38> '_Bool' lvalue Var 0x560761f9a248 'z$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x560761fa09f0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560761fa09a8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560761fa0990 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560761fa0950 <col:56> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560761fa09d8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560761fa09c0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560761fa0970 <col:74> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x560761fa0aa8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560761fa0a60 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560761fa0a30 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560761fa0ad8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560761fa0ac0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560761fa0a88 <col:102> '_Bool' lvalue Var 0x560761f9a4a0 'z$r_buff1_thd4' '_Bool'
|   |-CallExpr 0x560761fa0b90 <line:798:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761fa0b78 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761fa0b58 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560761fa0be8 <line:799:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560761fa0bd0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761fa0bb0 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560761fa0ca0 <line:800:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x560761fa0c08 <col:3> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x560761fa0c80 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x560761fa0c68 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560761fa0c28 <col:22> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x560761fa0c48 <col:41> 'int' 1
|   |-CallExpr 0x560761fa0cf8 <line:801:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560761fa0ce0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560761fa0cc0 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x560761fa0d70 <line:802:3, col:36>
|     `-CallExpr 0x560761fa0d50 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x560761fa0d38 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x560761fa0d18 <col:10> 'void *(void)' Function 0x560761f3fe68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x560761fa0f08 prev 0x560761f99430 <line:804:1, line:806:1> line:804:6 fence 'void ()'
| `-CompoundStmt 0x560761fa0fa8 <line:805:1, line:806:1>
|-FunctionDecl 0x560761fa1000 prev 0x560761f994f0 <line:807:1, line:809:1> line:807:6 isync 'void ()'
| `-CompoundStmt 0x560761fa10a0 <line:808:1, line:809:1>
|-FunctionDecl 0x560761fa10d0 prev 0x560761f995b0 <line:810:1, line:812:1> line:810:6 lwfence 'void ()'
| `-CompoundStmt 0x560761fa1170 <line:811:1, line:812:1>
`-FunctionDecl 0x560761fa11d8 <line:813:1, line:852:1> line:813:5 main 'int ()'
  `-CompoundStmt 0x560761fa5b50 <line:814:1, line:852:1>
    |-DeclStmt 0x560761fa12f0 <line:815:3, col:17>
    | `-VarDecl 0x560761fa1288 <col:3, col:13> col:13 used t827 'pthread_t':'unsigned long'
    |-CallExpr 0x560761fa14f8 <line:816:3, col:53> 'int'
    | |-ImplicitCastExpr 0x560761fa14e0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa1308 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x560761f808f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x560761fa1348 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x560761fa1328 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x560761fa1288 't827' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x560761fa1538 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x560761fa13c0 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x560761fa1398 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x560761fa1360 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x560761fa1550 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa13e0 <col:38> 'void *(void *)' Function 0x560761f9a990 'P0' 'void *(void *)'
    | `-ParenExpr 0x560761fa1460 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x560761fa1438 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x560761fa1400 <col:51> 'int' 0
    |-DeclStmt 0x560761fa15e0 <line:817:3, col:17>
    | `-VarDecl 0x560761fa1578 <col:3, col:13> col:13 used t828 'pthread_t':'unsigned long'
    |-CallExpr 0x560761fa1788 <line:818:3, col:53> 'int'
    | |-ImplicitCastExpr 0x560761fa1770 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa15f8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x560761f808f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x560761fa1638 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x560761fa1618 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x560761fa1578 't828' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x560761fa17c8 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x560761fa16b0 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x560761fa1688 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x560761fa1650 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x560761fa17e0 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa16d0 <col:38> 'void *(void *)' Function 0x560761f9b0a0 'P1' 'void *(void *)'
    | `-ParenExpr 0x560761fa1750 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x560761fa1728 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x560761fa16f0 <col:51> 'int' 0
    |-DeclStmt 0x560761fa1870 <line:819:3, col:17>
    | `-VarDecl 0x560761fa1808 <col:3, col:13> col:13 used t829 'pthread_t':'unsigned long'
    |-CallExpr 0x560761fa1a18 <line:820:3, col:53> 'int'
    | |-ImplicitCastExpr 0x560761fa1a00 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa1888 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x560761f808f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x560761fa18c8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x560761fa18a8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x560761fa1808 't829' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x560761fa1a58 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x560761fa1940 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x560761fa1918 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x560761fa18e0 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x560761fa1a70 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa1960 <col:38> 'void *(void *)' Function 0x560761f9b708 'P2' 'void *(void *)'
    | `-ParenExpr 0x560761fa19e0 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x560761fa19b8 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x560761fa1980 <col:51> 'int' 0
    |-DeclStmt 0x560761fa1b00 <line:821:3, col:17>
    | `-VarDecl 0x560761fa1a98 <col:3, col:13> col:13 used t830 'pthread_t':'unsigned long'
    |-CallExpr 0x560761fa1ca8 <line:822:3, col:53> 'int'
    | |-ImplicitCastExpr 0x560761fa1c90 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa1b18 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x560761f808f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x560761fa1b58 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x560761fa1b38 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x560761fa1a98 't830' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x560761fa1ce8 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x560761fa1bd0 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x560761fa1ba8 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x560761fa1b70 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x560761fa1d00 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa1bf0 <col:38> 'void *(void *)' Function 0x560761f9ca78 'P3' 'void *(void *)'
    | `-ParenExpr 0x560761fa1c70 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x560761fa1c48 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x560761fa1c10 <col:51> 'int' 0
    |-CallExpr 0x560761fa1d50 <line:823:3, col:27> 'void'
    | `-ImplicitCastExpr 0x560761fa1d38 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560761fa1d18 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x560761fa1e20 <line:824:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x560761fa1d70 <col:3> '_Bool' lvalue Var 0x560761f99ae0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x560761fa1e08 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x560761fa1de8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x560761fa1dd0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x560761fa1d90 <col:21> 'int' lvalue Var 0x560761f996e8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x560761fa1db0 <col:41> 'int' 4
    |-CallExpr 0x560761fa1e78 <line:825:3, col:25> 'void'
    | `-ImplicitCastExpr 0x560761fa1e60 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560761fa1e40 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x560761fa1ef0 <line:826:3, col:36> 'void'
    | |-ImplicitCastExpr 0x560761fa1ed8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa1e98 <col:3> 'void (int)' Function 0x560761f3fca0 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x560761fa1f30 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x560761fa1f18 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x560761fa1eb8 <col:21> '_Bool' lvalue Var 0x560761f99ae0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x560761fa1f80 <line:827:3, col:27> 'void'
    | `-ImplicitCastExpr 0x560761fa1f68 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560761fa1f48 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x560761fa2278 <line:828:3, col:103> 'int' '='
    | |-DeclRefExpr 0x560761fa1fa0 <col:3> 'int' lvalue Var 0x560761f99e98 'z' 'int'
    | `-ConditionalOperator 0x560761fa2248 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x560761fa2070 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x560761fa2028 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x560761fa2010 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x560761fa1fc0 <col:7> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x560761fa2058 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x560761fa2040 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x560761fa1ff0 <col:25> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x560761fa2230 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560761fa2090 <col:42> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
    |   `-ParenExpr 0x560761fa2210 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x560761fa21e0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x560761fa2150 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x560761fa2108 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x560761fa20f0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x560761fa20b0 <col:55> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x560761fa2138 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x560761fa2120 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x560761fa20d0 <col:73> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x560761fa21b0 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x560761fa2170 <col:90> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x560761fa21c8 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x560761fa2190 <col:102> 'int' lvalue Var 0x560761f99e98 'z' 'int'
    |-BinaryOperator 0x560761fa2480 <line:829:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x560761fa2298 <col:3> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x560761fa2468 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560761fa2438 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x560761fa2358 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x560761fa2310 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x560761fa22f8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x560761fa22b8 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x560761fa2340 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x560761fa2328 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x560761fa22d8 <col:38> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x560761fa23f0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x560761fa23a8 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x560761fa2378 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x560761fa2420 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x560761fa2408 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x560761fa23d0 <col:66> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |-BinaryOperator 0x560761fa2768 <line:830:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x560761fa24a0 <col:3> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x560761fa2750 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560761fa2720 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x560761fa2640 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x560761fa2560 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x560761fa2518 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x560761fa2500 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x560761fa24c0 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x560761fa2548 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x560761fa2530 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x560761fa24e0 <col:38> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x560761fa2620 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x560761fa25d8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x560761fa25c0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x560761fa2580 <col:56> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x560761fa2608 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x560761fa25f0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x560761fa25a0 <col:74> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x560761fa26d8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x560761fa2690 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x560761fa2660 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x560761fa2708 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x560761fa26f0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x560761fa26b8 <col:102> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |-BinaryOperator 0x560761fa2970 <line:831:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x560761fa2788 <col:3> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x560761fa2958 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560761fa2928 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x560761fa2848 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x560761fa2800 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x560761fa27e8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x560761fa27a8 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x560761fa2830 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x560761fa2818 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x560761fa27c8 <col:38> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x560761fa28e0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x560761fa2898 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x560761fa2868 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x560761fa2910 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x560761fa28f8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x560761fa28c0 <col:66> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x560761fa2c58 <line:832:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x560761fa2990 <col:3> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x560761fa2c40 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560761fa2c10 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x560761fa2b30 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x560761fa2a50 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x560761fa2a08 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x560761fa29f0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x560761fa29b0 <col:20> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x560761fa2a38 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x560761fa2a20 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x560761fa29d0 <col:38> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x560761fa2b10 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x560761fa2ac8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x560761fa2ab0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x560761fa2a70 <col:56> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x560761fa2af8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x560761fa2ae0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x560761fa2a90 <col:74> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x560761fa2bc8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x560761fa2b80 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x560761fa2b50 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x560761fa2bf8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x560761fa2be0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x560761fa2ba8 <col:102> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |-CallExpr 0x560761fa2cb0 <line:833:3, col:25> 'void'
    | `-ImplicitCastExpr 0x560761fa2c98 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560761fa2c78 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x560761fa2d08 <line:834:3, col:27> 'void'
    | `-ImplicitCastExpr 0x560761fa2cf0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560761fa2cd0 <col:3> 'void ()' Function 0x560761f40350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x560761fa2db8 <line:835:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x560761fa2d28 <col:3> '_Bool' lvalue Var 0x560761f9a800 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x560761fa2da0 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x560761fa2d80 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x560761fa2d68 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x560761fa2d48 <col:19> 'void *(void)' Function 0x560761f3fe68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x560761fa2e68 <line:836:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x560761fa2dd8 <col:3> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x560761fa2e50 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x560761fa2e30 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x560761fa2e18 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x560761fa2df8 <col:19> 'void *(void)' Function 0x560761f3fe68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x560761fa2ee0 <line:837:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x560761fa2e88 <col:3> '_Bool' lvalue Var 0x560761f99f70 'z$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x560761fa2ec8 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x560761fa2ea8 <col:21> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x560761fa2f58 <line:838:3, col:15> 'int' '='
    | |-DeclRefExpr 0x560761fa2f00 <col:3> 'int' lvalue Var 0x560761f99ff0 'z$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x560761fa2f40 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x560761fa2f20 <col:15> 'int' lvalue Var 0x560761f99e98 'z' 'int'
    |-BinaryOperator 0x560761fa33a8 <line:839:3, col:162> 'int' '='
    | |-DeclRefExpr 0x560761fa2f78 <col:3> 'int' lvalue Var 0x560761f99e98 'z' 'int'
    | `-ConditionalOperator 0x560761fa3378 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x560761fa31a0 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x560761fa30c0 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x560761fa2fd0 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x560761fa2fb8 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x560761fa2f98 <col:8> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x560761fa30a0 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x560761fa3038 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x560761fa3020 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x560761fa3000 <col:27> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x560761fa3088 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x560761fa3070 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x560761fa3050 <col:46> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x560761fa3180 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x560761fa3118 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x560761fa3100 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x560761fa30e0 <col:65> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x560761fa3168 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x560761fa3150 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x560761fa3130 <col:84> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x560761fa3360 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560761fa31c0 <col:101> 'int' lvalue Var 0x560761f99e98 'z' 'int'
    |   `-ParenExpr 0x560761fa3340 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x560761fa3310 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x560761fa3280 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x560761fa3238 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x560761fa3220 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x560761fa31e0 <col:106> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x560761fa3268 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x560761fa3250 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x560761fa3200 <col:124> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x560761fa32e0 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x560761fa32a0 <col:141> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x560761fa32f8 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x560761fa32c0 <col:153> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
    |-BinaryOperator 0x560761fa38b8 <line:840:3, col:208> 'int' '='
    | |-DeclRefExpr 0x560761fa33c8 <col:3> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
    | `-ConditionalOperator 0x560761fa3888 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x560761fa3858 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x560761fa3840 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x560761fa33e8 <col:15> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x560761fa3870 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560761fa3408 <col:31> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
    |   `-ParenExpr 0x560761fa3820 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x560761fa37f0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x560761fa3618 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x560761fa3538 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x560761fa3460 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x560761fa3448 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x560761fa3428 <col:45> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x560761fa3518 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x560761fa34b0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x560761fa3498 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x560761fa3478 <col:64> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x560761fa3500 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x560761fa34e8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x560761fa34c8 <col:83> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x560761fa35f8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x560761fa3590 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x560761fa3578 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x560761fa3558 <col:102> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x560761fa35e0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x560761fa35c8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x560761fa35a8 <col:121> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x560761fa37d8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x560761fa3638 <col:138> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
    |       `-ParenExpr 0x560761fa37b8 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x560761fa3788 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x560761fa36f8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x560761fa36b0 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x560761fa3698 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x560761fa3658 <col:151> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x560761fa36e0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x560761fa36c8 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x560761fa3678 <col:169> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x560761fa3758 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x560761fa3718 <col:186> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x560761fa3770 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x560761fa3738 <col:198> 'int' lvalue Var 0x560761f9a618 'z$w_buff0' 'int'
    |-BinaryOperator 0x560761fa3dc8 <line:841:3, col:208> 'int' '='
    | |-DeclRefExpr 0x560761fa38d8 <col:3> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
    | `-ConditionalOperator 0x560761fa3d98 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x560761fa3d68 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x560761fa3d50 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x560761fa38f8 <col:15> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x560761fa3d80 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560761fa3918 <col:31> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
    |   `-ParenExpr 0x560761fa3d30 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x560761fa3d00 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x560761fa3b28 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x560761fa3a48 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x560761fa3970 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x560761fa3958 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x560761fa3938 <col:45> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x560761fa3a28 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x560761fa39c0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x560761fa39a8 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x560761fa3988 <col:64> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x560761fa3a10 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x560761fa39f8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x560761fa39d8 <col:83> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x560761fa3b08 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x560761fa3aa0 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x560761fa3a88 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x560761fa3a68 <col:102> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x560761fa3af0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x560761fa3ad8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x560761fa3ab8 <col:121> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x560761fa3ce8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x560761fa3b48 <col:138> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
    |       `-ParenExpr 0x560761fa3cc8 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x560761fa3c98 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x560761fa3c08 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x560761fa3bc0 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x560761fa3ba8 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x560761fa3b68 <col:151> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x560761fa3bf0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x560761fa3bd8 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x560761fa3b88 <col:169> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x560761fa3c68 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x560761fa3c28 <col:186> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x560761fa3c80 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x560761fa3c48 <col:198> 'int' lvalue Var 0x560761f9a710 'z$w_buff1' 'int'
    |-BinaryOperator 0x560761fa4380 <line:842:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x560761fa3de8 <col:3> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x560761fa4368 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560761fa4338 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x560761fa42f0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560761fa42d8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560761fa3e08 <col:20> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x560761fa4320 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560761fa4308 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560761fa3e28 <col:36> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x560761fa42b8 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x560761fa4288 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x560761fa4048 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x560761fa3f58 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x560761fa3e80 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x560761fa3e68 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x560761fa3e48 <col:55> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x560761fa3f38 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x560761fa3ed0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x560761fa3eb8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x560761fa3e98 <col:74> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x560761fa3f20 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x560761fa3f08 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x560761fa3ee8 <col:93> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x560761fa4028 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x560761fa3fb0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x560761fa3f98 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x560761fa3f78 <col:112> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x560761fa4010 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x560761fa3fe8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x560761fa3fc8 <col:131> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x560761fa4270 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x560761fa4258 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x560761fa4068 <col:148> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x560761fa4238 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x560761fa4208 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x560761fa4128 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x560761fa40e0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x560761fa40c8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x560761fa4088 <col:166> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x560761fa4110 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x560761fa40f8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x560761fa40a8 <col:184> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x560761fa41c0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x560761fa4178 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x560761fa4148 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x560761fa41f0 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x560761fa41d8 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x560761fa41a0 <col:212> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |-BinaryOperator 0x560761fa4948 <line:843:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x560761fa43a0 <col:3> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x560761fa4930 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560761fa4900 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x560761fa48b8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560761fa48a0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560761fa43c0 <col:20> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x560761fa48e8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560761fa48d0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560761fa43e0 <col:36> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x560761fa4880 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x560761fa4850 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x560761fa45f0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x560761fa4510 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x560761fa4438 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x560761fa4420 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x560761fa4400 <col:55> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x560761fa44f0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x560761fa4488 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x560761fa4470 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x560761fa4450 <col:74> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x560761fa44d8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x560761fa44c0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x560761fa44a0 <col:93> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x560761fa45d0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x560761fa4568 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x560761fa4550 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x560761fa4530 <col:112> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x560761fa45b8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x560761fa45a0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x560761fa4580 <col:131> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x560761fa4838 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x560761fa4820 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x560761fa4610 <col:148> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x560761fa4800 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x560761fa47d0 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x560761fa46d0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x560761fa4688 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x560761fa4670 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x560761fa4630 <col:166> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x560761fa46b8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x560761fa46a0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x560761fa4650 <col:184> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x560761fa47a0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x560761fa4720 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x560761fa46f0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x560761fa47b8 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x560761fa4778 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x560761fa4748 <col:219> 'int' 0
    |-BinaryOperator 0x560761fa4ef0 <line:844:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x560761fa4968 <col:3> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x560761fa4ed8 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560761fa4ea8 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x560761fa4e60 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560761fa4e48 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560761fa4988 <col:20> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x560761fa4e90 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560761fa4e78 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560761fa49a8 <col:36> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x560761fa4e28 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x560761fa4df8 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x560761fa4bb8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x560761fa4ad8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x560761fa4a00 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x560761fa49e8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x560761fa49c8 <col:55> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x560761fa4ab8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x560761fa4a50 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x560761fa4a38 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x560761fa4a18 <col:74> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x560761fa4aa0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x560761fa4a88 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x560761fa4a68 <col:93> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x560761fa4b98 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x560761fa4b30 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x560761fa4b18 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x560761fa4af8 <col:112> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x560761fa4b80 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x560761fa4b68 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x560761fa4b48 <col:131> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x560761fa4de0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x560761fa4dc8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x560761fa4bd8 <col:148> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x560761fa4da8 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x560761fa4d78 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x560761fa4c98 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x560761fa4c50 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x560761fa4c38 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x560761fa4bf8 <col:166> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x560761fa4c80 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x560761fa4c68 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x560761fa4c18 <col:184> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x560761fa4d30 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x560761fa4ce8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x560761fa4cb8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x560761fa4d60 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x560761fa4d48 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x560761fa4d10 <col:212> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x560761fa54c8 <line:845:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x560761fa4f10 <col:3> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x560761fa54b0 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560761fa5480 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x560761fa5438 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560761fa5420 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560761fa4f30 <col:20> '_Bool' lvalue Var 0x560761f9a878 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x560761fa5468 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560761fa5450 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560761fa4f50 <col:36> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x560761fa5400 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x560761fa53d0 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x560761fa5170 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x560761fa5090 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x560761fa4fa8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x560761fa4f90 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x560761fa4f70 <col:55> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x560761fa5070 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x560761fa4ff8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x560761fa4fe0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x560761fa4fc0 <col:74> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x560761fa5058 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x560761fa5040 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x560761fa5020 <col:93> '_Bool' lvalue Var 0x560761f9a788 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x560761fa5150 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x560761fa50e8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x560761fa50d0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x560761fa50b0 <col:112> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x560761fa5138 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x560761fa5120 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x560761fa5100 <col:131> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x560761fa53b8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x560761fa53a0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x560761fa5190 <col:148> '_Bool' lvalue Var 0x560761f9a2c0 'z$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x560761fa5380 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x560761fa5350 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x560761fa5250 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x560761fa5208 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x560761fa51f0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x560761fa51b0 <col:166> '_Bool' lvalue Var 0x560761f9a690 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x560761fa5238 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x560761fa5220 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x560761fa51d0 <col:184> '_Bool' lvalue Var 0x560761f9a068 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x560761fa5320 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x560761fa52a0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x560761fa5270 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x560761fa5338 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x560761fa52f8 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x560761fa52c8 <col:219> 'int' 0
    |-BinaryOperator 0x560761fa5830 <line:846:3, col:105> '_Bool' '='
    | |-DeclRefExpr 0x560761fa54e8 <col:3> '_Bool' lvalue Var 0x560761f99b58 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x560761fa5818 <col:21, col:105> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x560761fa5800 <col:21, col:105> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x560761fa57e0 <col:22, col:105> 'int'
    |       `-BinaryOperator 0x560761fa57c0 <col:23, col:104> 'int' '&&'
    |         |-BinaryOperator 0x560761fa5728 <col:23, col:76> 'int' '&&'
    |         | |-BinaryOperator 0x560761fa5690 <col:23, col:48> 'int' '&&'
    |         | | |-BinaryOperator 0x560761fa55f8 <col:23, col:38> 'int' '&&'
    |         | | | |-BinaryOperator 0x560761fa5560 <col:23, col:28> 'int' '=='
    |         | | | | |-ImplicitCastExpr 0x560761fa5548 <col:23> 'int' <LValueToRValue>
    |         | | | | | `-DeclRefExpr 0x560761fa5508 <col:23> 'int' lvalue Var 0x560761f99c58 'x' 'int'
    |         | | | | `-IntegerLiteral 0x560761fa5528 <col:28> 'int' 2
    |         | | | `-BinaryOperator 0x560761fa55d8 <col:33, col:38> 'int' '=='
    |         | | |   |-ImplicitCastExpr 0x560761fa55c0 <col:33> 'int' <LValueToRValue>
    |         | | |   | `-DeclRefExpr 0x560761fa5580 <col:33> 'int' lvalue Var 0x560761f99d78 'y' 'int'
    |         | | |   `-IntegerLiteral 0x560761fa55a0 <col:38> 'int' 2
    |         | | `-BinaryOperator 0x560761fa5670 <col:43, col:48> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x560761fa5658 <col:43> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x560761fa5618 <col:43> 'int' lvalue Var 0x560761f99e98 'z' 'int'
    |         | |   `-IntegerLiteral 0x560761fa5638 <col:48> 'int' 2
    |         | `-BinaryOperator 0x560761fa5708 <col:53, col:76> 'int' '=='
    |         |   |-ImplicitCastExpr 0x560761fa56f0 <col:53> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x560761fa56b0 <col:53> 'int' lvalue Var 0x560761f99808 '__unbuffered_p3_EAX' 'int'
    |         |   `-IntegerLiteral 0x560761fa56d0 <col:76> 'int' 2
    |         `-BinaryOperator 0x560761fa57a0 <col:81, col:104> 'int' '=='
    |           |-ImplicitCastExpr 0x560761fa5788 <col:81> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x560761fa5748 <col:81> 'int' lvalue Var 0x560761f99928 '__unbuffered_p3_EBX' 'int'
    |           `-IntegerLiteral 0x560761fa5768 <col:104> 'int' 0
    |-BinaryOperator 0x560761fa5960 <line:847:3, col:37> 'int' '='
    | |-DeclRefExpr 0x560761fa5850 <col:3> 'int' lvalue Var 0x560761f99e98 'z' 'int'
    | `-ConditionalOperator 0x560761fa5930 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x560761fa58e8 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x560761fa58d0 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x560761fa5870 <col:7> '_Bool' lvalue Var 0x560761f99f70 'z$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x560761fa5900 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560761fa5890 <col:25> 'int' lvalue Var 0x560761f99ff0 'z$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x560761fa5918 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x560761fa58b0 <col:37> 'int' lvalue Var 0x560761f99e98 'z' 'int'
    |-BinaryOperator 0x560761fa59f8 <line:848:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x560761fa5980 <col:3> '_Bool' lvalue Var 0x560761f99f70 'z$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x560761fa59d0 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x560761fa59a0 <col:28> 'int' 0
    |-CallExpr 0x560761fa5a50 <line:849:3, col:25> 'void'
    | `-ImplicitCastExpr 0x560761fa5a38 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560761fa5a18 <col:3> 'void ()' Function 0x560761f40410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x560761fa5ac8 <line:850:3, col:36> 'void'
    | |-ImplicitCastExpr 0x560761fa5ab0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560761fa5a70 <col:3> 'void (int)' Function 0x560761f400d8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x560761fa5b08 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x560761fa5af0 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x560761fa5a90 <col:21> '_Bool' lvalue Var 0x560761f99b58 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x560761fa5b40 <line:851:3, col:10>
      `-IntegerLiteral 0x560761fa5b20 <col:10> 'int' 0
