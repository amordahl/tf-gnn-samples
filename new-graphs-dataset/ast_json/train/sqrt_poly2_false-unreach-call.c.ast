TranslationUnitDecl 0x56492dd004d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x56492dd00d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x56492dd00a70 '__int128'
|-TypedefDecl 0x56492dd00e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x56492dd00a90 'unsigned __int128'
|-TypedefDecl 0x56492dd01110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x56492dd00ee0 'struct __NSConstantString_tag'
|   `-Record 0x56492dd00e60 '__NSConstantString_tag'
|-TypedefDecl 0x56492dd011b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x56492dd01170 'char *'
|   `-BuiltinType 0x56492dd00570 'char'
|-TypedefDecl 0x56492dd405c0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x56492dd01450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x56492dd01290 'struct __va_list_tag'
|     `-Record 0x56492dd01210 '__va_list_tag'
|-FunctionDecl 0x56492dd406a0 <float-benchs/sqrt_poly2_false-unreach-call.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x56492dd407e8 <line:7:1, col:40> col:15 used __VERIFIER_nondet_double 'double ()' extern
|-FunctionDecl 0x56492dd40970 <line:8:1, col:45> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x56492dd408a0 <col:31, col:35> col:35 expression 'int'
|-FunctionDecl 0x56492dd40ac0 <line:9:1, col:88> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x56492dd40a30 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x56492dd40d10 <col:34, col:88>
|   |-IfStmt 0x56492dd40ce8 <col:36, col:78>
|   | |-UnaryOperator 0x56492dd40bc0 <col:40, col:46> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x56492dd40ba8 <col:41, col:46> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x56492dd40b88 <col:41, col:46> 'int' lvalue
|   | |     `-DeclRefExpr 0x56492dd40b68 <col:42> 'int' lvalue ParmVar 0x56492dd40a30 'cond' 'int'
|   | `-CompoundStmt 0x56492dd40cd0 <col:49, col:78>
|   |   `-LabelStmt 0x56492dd40cb8 <col:51, col:75> 'ERROR'
|   |     `-CallExpr 0x56492dd40c48 <col:58, col:75> 'void'
|   |       `-ImplicitCastExpr 0x56492dd40c30 <col:58> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x56492dd40bd8 <col:58> 'void () __attribute__((noreturn))' Function 0x56492dd406a0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x56492dd40d00 <col:80>
|-VarDecl 0x56492dd40d48 <line:12:1, col:14> col:8 used C0 'double' cinit
| `-FloatingLiteral 0x56492dd40db0 <col:14> 'double' 1.414214e+00
|-VarDecl 0x56492dd40de8 <line:13:1, col:14> col:8 used C1 'double' cinit
| `-FloatingLiteral 0x56492dd40e50 <col:14> 'double' 2.297614e-01
|-VarDecl 0x56492dd40e88 <line:14:1, col:14> col:8 used C2 'double' cinit
| `-FloatingLiteral 0x56492dd40ef0 <col:14> 'double' 1.296736e+00
|-VarDecl 0x56492dd40f28 <line:15:1, col:14> col:8 used C3 'double' cinit
| `-UnaryOperator 0x56492dd40fb0 <col:13, col:14> 'double' prefix '-'
|   `-FloatingLiteral 0x56492dd40f90 <col:14> 'double' 9.010984e-01
|-VarDecl 0x56492dd40fe0 <line:16:1, col:14> col:8 used C4 'double' cinit
| `-FloatingLiteral 0x56492dd41048 <col:14> 'double' 4.935534e-01
|-VarDecl 0x56492dd41080 <line:17:1, col:14> col:8 used C5 'double' cinit
| `-UnaryOperator 0x56492dd41108 <col:13, col:14> 'double' prefix '-'
|   `-FloatingLiteral 0x56492dd410e8 <col:14> 'double' 1.189587e-01
|-RecordDecl 0x56492dd41120 <line:19:1, line:22:1> line:19:7 union u definition
| |-FieldDecl 0x56492dd41268 <line:20:3, col:10> col:7 referenced i 'int [2]'
| `-FieldDecl 0x56492dd412d0 <line:21:3, col:10> col:10 referenced d 'double'
|-FunctionDecl 0x56492dd41408 <line:24:8> col:8 implicit used sqrt 'double (double)' extern
| |-ParmVarDecl 0x56492dd414a8 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x56492dd41518 <col:8> Implicit
|-FunctionDecl 0x56492dd65780 prev 0x56492dd41408 <col:1, line:49:1> line:24:8 used sqrt 'double (double)'
| |-ParmVarDecl 0x56492dd41338 <col:13, col:20> col:20 used a 'double'
| |-CompoundStmt 0x56492dd66938 <line:25:1, line:49:1>
| | |-DeclStmt 0x56492dd65940 <line:26:3, col:12>
| | | `-VarDecl 0x56492dd658d8 <col:3, col:11> col:11 used x 'union u':'union u'
| | |-DeclStmt 0x56492dd659d8 <line:27:3, col:11>
| | | `-VarDecl 0x56492dd65970 <col:3, col:10> col:10 used r 'double'
| | |-DeclStmt 0x56492dd65a70 <line:28:3, col:10>
| | | `-VarDecl 0x56492dd65a08 <col:3, col:7> col:7 used exp 'int'
| | |-BinaryOperator 0x56492dd65b10 <line:30:3, col:9> 'double' '='
| | | |-MemberExpr 0x56492dd65aa8 <col:3, col:5> 'double' lvalue .d 0x56492dd412d0
| | | | `-DeclRefExpr 0x56492dd65a88 <col:3> 'union u':'union u' lvalue Var 0x56492dd658d8 'x' 'union u':'union u'
| | | `-ImplicitCastExpr 0x56492dd65af8 <col:9> 'double' <LValueToRValue>
| | |   `-DeclRefExpr 0x56492dd65ad8 <col:9> 'double' lvalue ParmVar 0x56492dd41338 'a' 'double'
| | |-BinaryOperator 0x56492dd65ce0 <line:32:3, col:34> 'int' '='
| | | |-DeclRefExpr 0x56492dd65b30 <col:3> 'int' lvalue Var 0x56492dd65a08 'exp' 'int'
| | | `-BinaryOperator 0x56492dd65cc0 <col:9, col:34> 'int' '>>'
| | |   |-ParenExpr 0x56492dd65c80 <col:9, col:29> 'int'
| | |   | `-BinaryOperator 0x56492dd65c60 <col:10, col:19> 'int' '&'
| | |   |   |-ImplicitCastExpr 0x56492dd65c48 <col:10, col:15> 'int' <LValueToRValue>
| | |   |   | `-ArraySubscriptExpr 0x56492dd65c08 <col:10, col:15> 'int' lvalue
| | |   |   |   |-ImplicitCastExpr 0x56492dd65bf0 <col:10, col:12> 'int *' <ArrayToPointerDecay>
| | |   |   |   | `-MemberExpr 0x56492dd65b70 <col:10, col:12> 'int [2]' lvalue .i 0x56492dd41268
| | |   |   |   |   `-DeclRefExpr 0x56492dd65b50 <col:10> 'union u':'union u' lvalue Var 0x56492dd658d8 'x' 'union u':'union u'
| | |   |   |   `-IntegerLiteral 0x56492dd65ba0 <col:14> 'int' 0
| | |   |   `-IntegerLiteral 0x56492dd65c28 <col:19> 'int' 2146435072
| | |   `-IntegerLiteral 0x56492dd65ca0 <col:34> 'int' 20
| | |-BinaryOperator 0x56492dd65fa8 <line:33:3, col:36> 'int' '='
| | | |-ArraySubscriptExpr 0x56492dd65de0 <col:3, col:8> 'int' lvalue
| | | | |-ImplicitCastExpr 0x56492dd65dc8 <col:3, col:5> 'int *' <ArrayToPointerDecay>
| | | | | `-MemberExpr 0x56492dd65d78 <col:3, col:5> 'int [2]' lvalue .i 0x56492dd41268
| | | | |   `-DeclRefExpr 0x56492dd65d58 <col:3> 'union u':'union u' lvalue Var 0x56492dd658d8 'x' 'union u':'union u'
| | | | `-IntegerLiteral 0x56492dd65da8 <col:7> 'int' 0
| | | `-ImplicitCastExpr 0x56492dd65f90 <col:12, col:36> 'int' <IntegralCast>
| | |   `-BinaryOperator 0x56492dd65f70 <col:12, col:36> 'unsigned int' '|'
| | |     |-ParenExpr 0x56492dd65f18 <col:12, col:32> 'unsigned int'
| | |     | `-BinaryOperator 0x56492dd65ef8 <col:13, col:22> 'unsigned int' '&'
| | |     |   |-ImplicitCastExpr 0x56492dd65ee0 <col:13, col:18> 'unsigned int' <IntegralCast>
| | |     |   | `-ImplicitCastExpr 0x56492dd65ec8 <col:13, col:18> 'int' <LValueToRValue>
| | |     |   |   `-ArraySubscriptExpr 0x56492dd65e88 <col:13, col:18> 'int' lvalue
| | |     |   |     |-ImplicitCastExpr 0x56492dd65e70 <col:13, col:15> 'int *' <ArrayToPointerDecay>
| | |     |   |     | `-MemberExpr 0x56492dd65e20 <col:13, col:15> 'int [2]' lvalue .i 0x56492dd41268
| | |     |   |     |   `-DeclRefExpr 0x56492dd65e00 <col:13> 'union u':'union u' lvalue Var 0x56492dd658d8 'x' 'union u':'union u'
| | |     |   |     `-IntegerLiteral 0x56492dd65e50 <col:17> 'int' 0
| | |     |   `-IntegerLiteral 0x56492dd65ea8 <col:22> 'unsigned int' 2148532223
| | |     `-ImplicitCastExpr 0x56492dd65f58 <col:36> 'unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x56492dd65f38 <col:36> 'int' 1072693248
| | |-BinaryOperator 0x56492dd66090 <line:34:3, col:13> 'double' '='
| | | |-DeclRefExpr 0x56492dd65fc8 <col:3> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | | `-BinaryOperator 0x56492dd66070 <col:7, col:13> 'double' '*'
| | |   |-ImplicitCastExpr 0x56492dd66058 <col:7, col:9> 'double' <LValueToRValue>
| | |   | `-MemberExpr 0x56492dd66008 <col:7, col:9> 'double' lvalue .d 0x56492dd412d0
| | |   |   `-DeclRefExpr 0x56492dd65fe8 <col:7> 'union u':'union u' lvalue Var 0x56492dd658d8 'x' 'union u':'union u'
| | |   `-FloatingLiteral 0x56492dd66038 <col:13> 'double' 5.000000e-01
| | |-BinaryOperator 0x56492dd663b0 <line:36:3, col:30> 'double' '='
| | | |-DeclRefExpr 0x56492dd660b0 <col:3> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | | `-BinaryOperator 0x56492dd66390 <col:7, col:30> 'double' '+'
| | |   |-BinaryOperator 0x56492dd66140 <col:7, col:10> 'double' '+'
| | |   | |-ImplicitCastExpr 0x56492dd66110 <col:7> 'double' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x56492dd660d0 <col:7> 'double' lvalue Var 0x56492dd40de8 'C1' 'double'
| | |   | `-ImplicitCastExpr 0x56492dd66128 <col:10> 'double' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x56492dd660f0 <col:10> 'double' lvalue Var 0x56492dd40e88 'C2' 'double'
| | |   `-BinaryOperator 0x56492dd66370 <col:13, col:30> 'double' '*'
| | |     |-ParenExpr 0x56492dd66318 <col:13, col:28> 'double'
| | |     | `-BinaryOperator 0x56492dd662f8 <col:14, col:27> 'double' '+'
| | |     |   |-ImplicitCastExpr 0x56492dd662e0 <col:14> 'double' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x56492dd66160 <col:14> 'double' lvalue Var 0x56492dd40f28 'C3' 'double'
| | |     |   `-BinaryOperator 0x56492dd662c0 <col:17, col:27> 'double' '*'
| | |     |     |-ParenExpr 0x56492dd66268 <col:17, col:25> 'double'
| | |     |     | `-BinaryOperator 0x56492dd66248 <col:18, col:24> 'double' '+'
| | |     |     |   |-ImplicitCastExpr 0x56492dd66230 <col:18> 'double' <LValueToRValue>
| | |     |     |   | `-DeclRefExpr 0x56492dd66180 <col:18> 'double' lvalue Var 0x56492dd40fe0 'C4' 'double'
| | |     |     |   `-BinaryOperator 0x56492dd66210 <col:21, col:24> 'double' '*'
| | |     |     |     |-ImplicitCastExpr 0x56492dd661e0 <col:21> 'double' <LValueToRValue>
| | |     |     |     | `-DeclRefExpr 0x56492dd661a0 <col:21> 'double' lvalue Var 0x56492dd41080 'C5' 'double'
| | |     |     |     `-ImplicitCastExpr 0x56492dd661f8 <col:24> 'double' <LValueToRValue>
| | |     |     |       `-DeclRefExpr 0x56492dd661c0 <col:24> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | |     |     `-ImplicitCastExpr 0x56492dd662a8 <col:27> 'double' <LValueToRValue>
| | |     |       `-DeclRefExpr 0x56492dd66288 <col:27> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | |     `-ImplicitCastExpr 0x56492dd66358 <col:30> 'double' <LValueToRValue>
| | |       `-DeclRefExpr 0x56492dd66338 <col:30> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | |-IfStmt 0x56492dd665c0 <line:38:3, line:43:3> has_else
| | | |-BinaryOperator 0x56492dd66468 <line:38:7, col:18> 'int' '=='
| | | | |-BinaryOperator 0x56492dd66428 <col:7, col:13> 'int' '%'
| | | | | |-ImplicitCastExpr 0x56492dd66410 <col:7> 'int' <LValueToRValue>
| | | | | | `-DeclRefExpr 0x56492dd663d0 <col:7> 'int' lvalue Var 0x56492dd65a08 'exp' 'int'
| | | | | `-IntegerLiteral 0x56492dd663f0 <col:13> 'int' 2
| | | | `-IntegerLiteral 0x56492dd66448 <col:18> 'int' 0
| | | |-CompoundStmt 0x56492dd664c0 <col:21, line:40:3>
| | | | `-UnaryOperator 0x56492dd664a8 <line:39:5, col:8> 'int' postfix '++'
| | | |   `-DeclRefExpr 0x56492dd66488 <col:5> 'int' lvalue Var 0x56492dd65a08 'exp' 'int'
| | | `-CompoundStmt 0x56492dd665a8 <line:41:8, line:43:3>
| | |   `-BinaryOperator 0x56492dd66588 <line:42:5, col:13> 'double' '='
| | |     |-DeclRefExpr 0x56492dd664d8 <col:5> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | |     `-BinaryOperator 0x56492dd66568 <col:9, col:13> 'double' '*'
| | |       |-ImplicitCastExpr 0x56492dd66538 <col:9> 'double' <LValueToRValue>
| | |       | `-DeclRefExpr 0x56492dd664f8 <col:9> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | |       `-ImplicitCastExpr 0x56492dd66550 <col:13> 'double' <LValueToRValue>
| | |         `-DeclRefExpr 0x56492dd66518 <col:13> 'double' lvalue Var 0x56492dd40d48 'C0' 'double'
| | |-BinaryOperator 0x56492dd667d0 <line:45:3, col:29> 'int' '='
| | | |-ArraySubscriptExpr 0x56492dd66670 <col:3, col:8> 'int' lvalue
| | | | |-ImplicitCastExpr 0x56492dd66658 <col:3, col:5> 'int *' <ArrayToPointerDecay>
| | | | | `-MemberExpr 0x56492dd66608 <col:3, col:5> 'int [2]' lvalue .i 0x56492dd41268
| | | | |   `-DeclRefExpr 0x56492dd665e8 <col:3> 'union u':'union u' lvalue Var 0x56492dd658d8 'x' 'union u':'union u'
| | | | `-IntegerLiteral 0x56492dd66638 <col:7> 'int' 0
| | | `-BinaryOperator 0x56492dd667b0 <col:12, col:29> 'int' '<<'
| | |   |-ParenExpr 0x56492dd66748 <col:12, col:24> 'int'
| | |   | `-BinaryOperator 0x56492dd66728 <col:13, col:21> 'int' '+'
| | |   |   |-BinaryOperator 0x56492dd666e8 <col:13, col:17> 'int' '/'
| | |   |   | |-ImplicitCastExpr 0x56492dd666d0 <col:13> 'int' <LValueToRValue>
| | |   |   | | `-DeclRefExpr 0x56492dd66690 <col:13> 'int' lvalue Var 0x56492dd65a08 'exp' 'int'
| | |   |   | `-IntegerLiteral 0x56492dd666b0 <col:17> 'int' 2
| | |   |   `-IntegerLiteral 0x56492dd66708 <col:21> 'int' 511
| | |   `-IntegerLiteral 0x56492dd66790 <col:29> 'int' 20
| | |-BinaryOperator 0x56492dd668d0 <line:46:3, col:13> 'double' '='
| | | |-DeclRefExpr 0x56492dd667f0 <col:3> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | | `-BinaryOperator 0x56492dd668b0 <col:7, col:13> 'double' '*'
| | |   |-ImplicitCastExpr 0x56492dd66880 <col:7> 'double' <LValueToRValue>
| | |   | `-DeclRefExpr 0x56492dd66810 <col:7> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| | |   `-ImplicitCastExpr 0x56492dd66898 <col:11, col:13> 'double' <LValueToRValue>
| | |     `-MemberExpr 0x56492dd66850 <col:11, col:13> 'double' lvalue .d 0x56492dd412d0
| | |       `-DeclRefExpr 0x56492dd66830 <col:11> 'union u':'union u' lvalue Var 0x56492dd658d8 'x' 'union u':'union u'
| | `-ReturnStmt 0x56492dd66928 <line:48:3, col:10>
| |   `-ImplicitCastExpr 0x56492dd66910 <col:10> 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x56492dd668f0 <col:10> 'double' lvalue Var 0x56492dd65970 'r' 'double'
| `-NoThrowAttr 0x56492dd65858 <line:24:8> Inherited Implicit
`-FunctionDecl 0x56492dd66a08 <line:51:1, line:62:1> line:51:5 main 'int ()'
  `-CompoundStmt 0x56492dd670f8 <line:52:1, line:62:1>
    |-DeclStmt 0x56492dd66bc0 <line:53:3, col:13>
    | |-VarDecl 0x56492dd66ac0 <col:3, col:10> col:10 used x 'double'
    | `-VarDecl 0x56492dd66b40 <col:3, col:12> col:12 used y 'double'
    |-BinaryOperator 0x56492dd66c88 <line:55:3, col:32> 'double' '='
    | |-DeclRefExpr 0x56492dd66bd8 <col:3> 'double' lvalue Var 0x56492dd66ac0 'x' 'double'
    | `-CallExpr 0x56492dd66c68 <col:7, col:32> 'double'
    |   `-ImplicitCastExpr 0x56492dd66c50 <col:7> 'double (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x56492dd66bf8 <col:7> 'double ()' Function 0x56492dd407e8 '__VERIFIER_nondet_double' 'double ()'
    |-CallExpr 0x56492dd66e28 <line:56:3, col:41> 'void'
    | |-ImplicitCastExpr 0x56492dd66e10 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56492dd66ca8 <col:3> 'void (int)' Function 0x56492dd40970 '__VERIFIER_assume' 'void (int)'
    | `-BinaryOperator 0x56492dd66db8 <col:21, col:37> 'int' '&&'
    |   |-BinaryOperator 0x56492dd66d20 <col:21, col:26> 'int' '>='
    |   | |-ImplicitCastExpr 0x56492dd66d08 <col:21> 'double' <LValueToRValue>
    |   | | `-DeclRefExpr 0x56492dd66cc8 <col:21> 'double' lvalue Var 0x56492dd66ac0 'x' 'double'
    |   | `-FloatingLiteral 0x56492dd66ce8 <col:26> 'double' 1.000000e+00
    |   `-BinaryOperator 0x56492dd66d98 <col:32, col:37> 'int' '<='
    |     |-ImplicitCastExpr 0x56492dd66d80 <col:32> 'double' <LValueToRValue>
    |     | `-DeclRefExpr 0x56492dd66d40 <col:32> 'double' lvalue Var 0x56492dd66ac0 'x' 'double'
    |     `-FloatingLiteral 0x56492dd66d60 <col:37> 'double' 1.000000e+10
    |-BinaryOperator 0x56492dd66f38 <line:58:3, col:13> 'double' '='
    | |-DeclRefExpr 0x56492dd66e50 <col:3> 'double' lvalue Var 0x56492dd66b40 'y' 'double'
    | `-CallExpr 0x56492dd66ef8 <col:7, col:13> 'double'
    |   |-ImplicitCastExpr 0x56492dd66ee0 <col:7> 'double (*)(double)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x56492dd66e70 <col:7> 'double (double)' Function 0x56492dd65780 'sqrt' 'double (double)'
    |   `-ImplicitCastExpr 0x56492dd66f20 <col:12> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x56492dd66e90 <col:12> 'double' lvalue Var 0x56492dd66ac0 'x' 'double'
    |-CallExpr 0x56492dd670a0 <line:60:3, col:40> 'void'
    | |-ImplicitCastExpr 0x56492dd67088 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56492dd66f58 <col:3> 'void (int)' Function 0x56492dd40ac0 '__VERIFIER_assert' 'void (int)'
    | `-BinaryOperator 0x56492dd67068 <col:21, col:37> 'int' '&&'
    |   |-BinaryOperator 0x56492dd66fd0 <col:21, col:26> 'int' '>='
    |   | |-ImplicitCastExpr 0x56492dd66fb8 <col:21> 'double' <LValueToRValue>
    |   | | `-DeclRefExpr 0x56492dd66f78 <col:21> 'double' lvalue Var 0x56492dd66b40 'y' 'double'
    |   | `-FloatingLiteral 0x56492dd66f98 <col:26> 'double' 0.000000e+00
    |   `-BinaryOperator 0x56492dd67048 <col:32, col:37> 'int' '<='
    |     |-ImplicitCastExpr 0x56492dd67030 <col:32> 'double' <LValueToRValue>
    |     | `-DeclRefExpr 0x56492dd66ff0 <col:32> 'double' lvalue Var 0x56492dd66b40 'y' 'double'
    |     `-FloatingLiteral 0x56492dd67010 <col:37> 'double' 1.000000e+06
    `-ReturnStmt 0x56492dd670e8 <line:61:3, col:10>
      `-IntegerLiteral 0x56492dd670c8 <col:10> 'int' 0
