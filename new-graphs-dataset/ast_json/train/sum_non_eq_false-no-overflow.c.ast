TranslationUnitDecl 0x5574a9e3f4d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5574a9e3fd98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5574a9e3fa70 '__int128'
|-TypedefDecl 0x5574a9e3fe08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5574a9e3fa90 'unsigned __int128'
|-TypedefDecl 0x5574a9e40110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5574a9e3fee0 'struct __NSConstantString_tag'
|   `-Record 0x5574a9e3fe60 '__NSConstantString_tag'
|-TypedefDecl 0x5574a9e401b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5574a9e40170 'char *'
|   `-BuiltinType 0x5574a9e3f570 'char'
|-TypedefDecl 0x5574a9e7f110 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5574a9e40450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5574a9e40290 'struct __va_list_tag'
|     `-Record 0x5574a9e40210 '__va_list_tag'
|-FunctionDecl 0x5574a9e7f238 <recursive-simple/sum_non_eq_false-no-overflow.c:1:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-FunctionDecl 0x5574a9e7f370 <line:2:1, col:30> col:13 used __VERIFIER_error 'void ()' extern
|-FunctionDecl 0x5574a9e7f588 <line:4:1, line:10:1> line:4:5 used sum 'int (int, int)'
| |-ParmVarDecl 0x5574a9e7f428 <col:9, col:13> col:13 used n 'int'
| |-ParmVarDecl 0x5574a9e7f4a8 <col:16, col:20> col:20 used m 'int'
| `-CompoundStmt 0x5574a9e7f8e8 <col:23, line:10:1>
|   `-IfStmt 0x5574a9e7f8c0 <line:5:5, line:9:5> has_else
|     |-BinaryOperator 0x5574a9e7f690 <line:5:9, col:14> 'int' '=='
|     | |-ImplicitCastExpr 0x5574a9e7f678 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5574a9e7f638 <col:9> 'int' lvalue ParmVar 0x5574a9e7f428 'n' 'int'
|     | `-IntegerLiteral 0x5574a9e7f658 <col:14> 'int' 0
|     |-CompoundStmt 0x5574a9e7f6f8 <col:17, line:7:5>
|     | `-ReturnStmt 0x5574a9e7f6e8 <line:6:7, col:14>
|     |   `-ImplicitCastExpr 0x5574a9e7f6d0 <col:14> 'int' <LValueToRValue>
|     |     `-DeclRefExpr 0x5574a9e7f6b0 <col:14> 'int' lvalue ParmVar 0x5574a9e7f4a8 'm' 'int'
|     `-CompoundStmt 0x5574a9e7f8a8 <line:7:12, line:9:5>
|       `-ReturnStmt 0x5574a9e7f898 <line:8:7, col:30>
|         `-CallExpr 0x5574a9e7f868 <col:14, col:30> 'int'
|           |-ImplicitCastExpr 0x5574a9e7f850 <col:14> 'int (*)(int, int)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5574a9e7f710 <col:14> 'int (int, int)' Function 0x5574a9e7f588 'sum' 'int (int, int)'
|           |-BinaryOperator 0x5574a9e7f788 <col:18, col:22> 'int' '-'
|           | |-ImplicitCastExpr 0x5574a9e7f770 <col:18> 'int' <LValueToRValue>
|           | | `-DeclRefExpr 0x5574a9e7f730 <col:18> 'int' lvalue ParmVar 0x5574a9e7f428 'n' 'int'
|           | `-IntegerLiteral 0x5574a9e7f750 <col:22> 'int' 1
|           `-BinaryOperator 0x5574a9e7f800 <col:25, col:29> 'int' '+'
|             |-ImplicitCastExpr 0x5574a9e7f7e8 <col:25> 'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5574a9e7f7a8 <col:25> 'int' lvalue ParmVar 0x5574a9e7f4a8 'm' 'int'
|             `-IntegerLiteral 0x5574a9e7f7c8 <col:29> 'int' 1
`-FunctionDecl 0x5574a9e7f9a0 <line:12:1, line:19:1> line:12:5 main 'int (void)'
  `-CompoundStmt 0x5574a9e80000 <col:16, line:19:1>
    |-DeclStmt 0x5574a9e7fb78 <line:13:3, col:35>
    | `-VarDecl 0x5574a9e7fa88 <col:3, col:33> col:7 used a 'int' cinit
    |   `-CallExpr 0x5574a9e7fb58 <col:11, col:33> 'int'
    |     `-ImplicitCastExpr 0x5574a9e7fb40 <col:11> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x5574a9e7faf0 <col:11> 'int (void)' Function 0x5574a9e7f238 '__VERIFIER_nondet_int' 'int (void)'
    |-DeclStmt 0x5574a9e7fc68 <line:14:3, col:34>
    | `-VarDecl 0x5574a9e7fba8 <col:3, col:33> col:7 used b 'int' cinit
    |   `-CallExpr 0x5574a9e7fc48 <col:11, col:33> 'int'
    |     `-ImplicitCastExpr 0x5574a9e7fc30 <col:11> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x5574a9e7fc10 <col:11> 'int (void)' Function 0x5574a9e7f238 '__VERIFIER_nondet_int' 'int (void)'
    |-DeclStmt 0x5574a9e7fdd8 <line:15:3, col:25>
    | `-VarDecl 0x5574a9e7fc98 <col:3, col:24> col:7 used result 'int' cinit
    |   `-CallExpr 0x5574a9e7fd78 <col:16, col:24> 'int'
    |     |-ImplicitCastExpr 0x5574a9e7fd60 <col:16> 'int (*)(int, int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x5574a9e7fd00 <col:16> 'int (int, int)' Function 0x5574a9e7f588 'sum' 'int (int, int)'
    |     |-ImplicitCastExpr 0x5574a9e7fda8 <col:20> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x5574a9e7fd20 <col:20> 'int' lvalue Var 0x5574a9e7fa88 'a' 'int'
    |     `-ImplicitCastExpr 0x5574a9e7fdc0 <col:23> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x5574a9e7fd40 <col:23> 'int' lvalue Var 0x5574a9e7fba8 'b' 'int'
    `-IfStmt 0x5574a9e7ffe8 <line:16:3, line:18:3>
      |-BinaryOperator 0x5574a9e7feb8 <line:16:7, col:21> 'int' '!='
      | |-ImplicitCastExpr 0x5574a9e7fea0 <col:7> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x5574a9e7fdf0 <col:7> 'int' lvalue Var 0x5574a9e7fc98 'result' 'int'
      | `-BinaryOperator 0x5574a9e7fe80 <col:17, col:21> 'int' '+'
      |   |-ImplicitCastExpr 0x5574a9e7fe50 <col:17> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x5574a9e7fe10 <col:17> 'int' lvalue Var 0x5574a9e7fa88 'a' 'int'
      |   `-ImplicitCastExpr 0x5574a9e7fe68 <col:21> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x5574a9e7fe30 <col:21> 'int' lvalue Var 0x5574a9e7fba8 'b' 'int'
      `-CompoundStmt 0x5574a9e7ffd0 <col:24, line:18:3>
        `-LabelStmt 0x5574a9e7ffb8 <line:17:5, col:29> 'ERROR'
          `-CallExpr 0x5574a9e7ff48 <col:12, col:29> 'void'
            `-ImplicitCastExpr 0x5574a9e7ff30 <col:12> 'void (*)()' <FunctionToPointerDecay>
              `-DeclRefExpr 0x5574a9e7fed8 <col:12> 'void ()' Function 0x5574a9e7f370 '__VERIFIER_error' 'void ()'
