TranslationUnitDecl 0x55ab223676c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55ab22367f88 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55ab22367c60 '__int128'
|-TypedefDecl 0x55ab22367ff8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55ab22367c80 'unsigned __int128'
|-TypedefDecl 0x55ab22368300 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55ab223680d0 'struct __NSConstantString_tag'
|   `-Record 0x55ab22368050 '__NSConstantString_tag'
|-TypedefDecl 0x55ab223683a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55ab22368360 'char *'
|   `-BuiltinType 0x55ab22367760 'char'
|-TypedefDecl 0x55ab223a7360 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55ab22368640 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55ab22368480 'struct __va_list_tag'
|     `-Record 0x55ab22368400 '__va_list_tag'
|-FunctionDecl 0x55ab223a7440 <seq-mthreaded/pals_STARTPALS_ActiveStandby_true-unreach-call.ufo.UNBOUNDED.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55ab223a7620 <line:61:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
| `-FullComment 0x55ab223e7770 <line:3:4, line:56:69>
|   |-ParagraphComment 0x55ab223e6da0 <line:3:4, col:71>
|   | `-TextComment 0x55ab223e6d70 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x55ab223e6df0 <line:5:1, col:67>
|   | `-TextComment 0x55ab223e6dc0 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x55ab223e6e90 <line:7:1, line:9:4>
|   | |-TextComment 0x55ab223e6e10 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x55ab223e6e30 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x55ab223e6e50 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x55ab223e6f30 <line:11:1, line:13:12>
|   | |-TextComment 0x55ab223e6eb0 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x55ab223e6ed0 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x55ab223e6ef0 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x55ab223e6fd0 <line:15:1, line:17:68>
|   | |-TextComment 0x55ab223e6f50 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x55ab223e6f70 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x55ab223e6f90 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x55ab223e70c0 <line:19:1, line:23:10>
|   | |-TextComment 0x55ab223e6ff0 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x55ab223e7010 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x55ab223e7030 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x55ab223e7050 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x55ab223e7070 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55ab223e70e0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55ab223e7140 <col:15, col:23>
|   |   `-TextComment 0x55ab223e7110 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55ab223e71e0 <line:25:1, line:27:10>
|   | |-TextComment 0x55ab223e7160 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x55ab223e7180 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x55ab223e71a0 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55ab223e7200 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55ab223e7260 <col:15, col:23>
|   |   `-TextComment 0x55ab223e7230 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55ab223e72d0 <line:29:1, line:30:15>
|   | |-TextComment 0x55ab223e7280 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x55ab223e72a0 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x55ab223e73c0 <line:32:1, line:36:7>
|   | |-TextComment 0x55ab223e72f0 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x55ab223e7310 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x55ab223e7330 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x55ab223e7350 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x55ab223e7370 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x55ab223e7460 <line:38:1, line:40:61>
|   | |-TextComment 0x55ab223e73e0 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x55ab223e7400 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x55ab223e7420 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x55ab223e75c0 <line:42:1, line:49:37>
|   | |-TextComment 0x55ab223e7480 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x55ab223e74a0 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x55ab223e74c0 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x55ab223e74e0 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x55ab223e7500 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x55ab223e7520 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x55ab223e7540 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x55ab223e7560 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x55ab223e7630 <line:51:1, line:52:13>
|   | |-TextComment 0x55ab223e75e0 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x55ab223e7600 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x55ab223e7680 <line:54:1, col:10>
|   | `-TextComment 0x55ab223e7650 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x55ab223e76d0 <line:56:2, col:69>
|     `-TextComment 0x55ab223e76a0 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x55ab223a7758 prev 0x55ab223a7620 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x55ab223a78c0 <line:63:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
|-TypedefDecl 0x55ab223a7970 <line:64:1, col:14> col:14 referenced int8_t 'char'
| `-BuiltinType 0x55ab22367760 'char'
|-TypedefDecl 0x55ab223a7a08 <line:65:1, col:16> col:16 referenced msg_t 'int8_t':'char'
| `-TypedefType 0x55ab223a79d0 'int8_t' sugar
|   |-Typedef 0x55ab223a7970 'int8_t'
|   `-BuiltinType 0x55ab22367760 'char'
|-TypedefDecl 0x55ab223a7a78 <line:66:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x55ab223677c0 'int'
|-FunctionDecl 0x55ab223a7cc0 <line:67:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55ab223a7b08 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x55ab223a7ba8 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x55ab223a7e90 <line:68:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55ab223a7d80 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x55ab223a7df8 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x55ab223a7f50 <line:69:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x55ab223a8000 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x55ab223a7fd8 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x55ab223a7fb8 <col:28> 'int' 1
|-VarDecl 0x55ab223a8038 <line:70:1, col:8> col:8 cs1 'port_t':'int'
|-VarDecl 0x55ab223a80b0 <line:71:1, col:8> col:8 used cs1_old 'int8_t':'char'
|-VarDecl 0x55ab223a8128 <line:72:1, col:8> col:8 used cs1_new 'int8_t':'char'
|-VarDecl 0x55ab223a81a0 <line:73:1, col:8> col:8 cs2 'port_t':'int'
|-VarDecl 0x55ab223a8218 <line:74:1, col:8> col:8 used cs2_old 'int8_t':'char'
|-VarDecl 0x55ab223a8290 <line:75:1, col:8> col:8 used cs2_new 'int8_t':'char'
|-VarDecl 0x55ab223cf070 <line:76:1, col:8> col:8 s1s2 'port_t':'int'
|-VarDecl 0x55ab223cf0e8 <line:77:1, col:8> col:8 used s1s2_old 'int8_t':'char'
|-VarDecl 0x55ab223cf160 <line:78:1, col:8> col:8 used s1s2_new 'int8_t':'char'
|-VarDecl 0x55ab223cf1d8 <line:79:1, col:8> col:8 s1s1 'port_t':'int'
|-VarDecl 0x55ab223cf250 <line:80:1, col:8> col:8 used s1s1_old 'int8_t':'char'
|-VarDecl 0x55ab223cf2c8 <line:81:1, col:8> col:8 used s1s1_new 'int8_t':'char'
|-VarDecl 0x55ab223cf340 <line:82:1, col:8> col:8 s2s1 'port_t':'int'
|-VarDecl 0x55ab223cf3b8 <line:83:1, col:8> col:8 used s2s1_old 'int8_t':'char'
|-VarDecl 0x55ab223cf430 <line:84:1, col:8> col:8 used s2s1_new 'int8_t':'char'
|-VarDecl 0x55ab223cf4a8 <line:85:1, col:8> col:8 s2s2 'port_t':'int'
|-VarDecl 0x55ab223cf520 <line:86:1, col:8> col:8 used s2s2_old 'int8_t':'char'
|-VarDecl 0x55ab223cf598 <line:87:1, col:8> col:8 used s2s2_new 'int8_t':'char'
|-VarDecl 0x55ab223cf610 <line:88:1, col:8> col:8 s1p 'port_t':'int'
|-VarDecl 0x55ab223cf688 <line:89:1, col:8> col:8 used s1p_old 'int8_t':'char'
|-VarDecl 0x55ab223cf700 <line:90:1, col:8> col:8 used s1p_new 'int8_t':'char'
|-VarDecl 0x55ab223cf778 <line:91:1, col:8> col:8 s2p 'port_t':'int'
|-VarDecl 0x55ab223cf7f0 <line:92:1, col:8> col:8 used s2p_old 'int8_t':'char'
|-VarDecl 0x55ab223cf868 <line:93:1, col:8> col:8 used s2p_new 'int8_t':'char'
|-FunctionDecl 0x55ab223cf920 prev 0x55ab223a78c0 <line:94:1, col:37> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x55ab223cfa10 prev 0x55ab223a7758 <line:95:1, col:36> col:13 used __VERIFIER_nondet_char 'char (void)' extern
|-VarDecl 0x55ab223cfac0 <line:96:1, col:7> col:7 used side1Failed '_Bool'
|-VarDecl 0x55ab223cfb38 <line:97:1, col:7> col:7 used side2Failed '_Bool'
|-VarDecl 0x55ab223cfbb0 <line:98:1, col:7> col:7 used side1_written 'msg_t':'char'
|-VarDecl 0x55ab223cfc28 <line:99:1, col:7> col:7 used side2_written 'msg_t':'char'
|-FunctionDecl 0x55ab223cfd70 <line:100:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x55ab223cfca0 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x55ab223cff00 <line:101:1, col:39> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55ab223cfe30 <col:31, col:35> col:35 arg 'int'
|-VarDecl 0x55ab223cffb8 <line:102:1, col:14> col:14 used side1Failed_History_0 '_Bool' static
|-VarDecl 0x55ab223d0080 <line:103:1, col:14> col:14 used side1Failed_History_1 '_Bool' static
|-VarDecl 0x55ab223d00f8 <line:104:1, col:14> col:14 used side1Failed_History_2 '_Bool' static
|-VarDecl 0x55ab223d0170 <line:105:1, col:14> col:14 used side2Failed_History_0 '_Bool' static
|-VarDecl 0x55ab223d01e8 <line:106:1, col:14> col:14 used side2Failed_History_1 '_Bool' static
|-VarDecl 0x55ab223d0260 <line:107:1, col:14> col:14 used side2Failed_History_2 '_Bool' static
|-VarDecl 0x55ab223d02d8 <line:108:1, col:15> col:15 used active_side_History_0 'int8_t':'char' static
|-VarDecl 0x55ab223d0350 <line:109:1, col:15> col:15 used active_side_History_1 'int8_t':'char' static
|-VarDecl 0x55ab223d03c8 <line:110:1, col:15> col:15 used active_side_History_2 'int8_t':'char' static
|-VarDecl 0x55ab223d0440 <line:111:1, col:14> col:14 used manual_selection_History_0 'msg_t':'char' static
|-VarDecl 0x55ab223d04b8 <line:112:1, col:14> col:14 used manual_selection_History_1 'msg_t':'char' static
|-VarDecl 0x55ab223d0530 <line:113:1, col:14> col:14 used manual_selection_History_2 'msg_t':'char' static
|-FunctionDecl 0x55ab223d0638 <line:114:1, line:124:1> line:114:6 used write_side1_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x55ab223d05a8 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x55ab223d0888 <line:115:1, line:124:1>
|   `-CompoundStmt 0x55ab223d0858 <line:118:3, line:123:1>
|     |-BinaryOperator 0x55ab223d0738 <line:119:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223d06e0 <col:3> '_Bool' lvalue Var 0x55ab223d00f8 'side1Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x55ab223d0720 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d0700 <col:27> '_Bool' lvalue Var 0x55ab223d0080 'side1Failed_History_1' '_Bool'
|     |-BinaryOperator 0x55ab223d07b0 <line:120:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223d0758 <col:3> '_Bool' lvalue Var 0x55ab223d0080 'side1Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x55ab223d0798 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d0778 <col:27> '_Bool' lvalue Var 0x55ab223cffb8 'side1Failed_History_0' '_Bool'
|     |-BinaryOperator 0x55ab223d0828 <line:121:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223d07d0 <col:3> '_Bool' lvalue Var 0x55ab223cffb8 'side1Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x55ab223d0810 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d07f0 <col:27> '_Bool' lvalue ParmVar 0x55ab223d05a8 'val' '_Bool'
|     `-ReturnStmt 0x55ab223d0848 <line:122:3>
|-FunctionDecl 0x55ab223d0980 <line:125:1, line:143:1> line:125:7 used read_side1_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x55ab223d08b8 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x55ab223d0ff8 <line:126:1, line:143:1>
|   `-CompoundStmt 0x55ab223d0fe0 <line:129:3, line:142:1>
|     `-IfStmt 0x55ab223d0fb8 <line:130:3, line:141:3> has_else
|       |-BinaryOperator 0x55ab223d0ac0 <line:130:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x55ab223d0a78 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55ab223d0a60 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x55ab223d0a28 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d08b8 'index' 'unsigned char'
|       | `-IntegerLiteral 0x55ab223d0aa0 <col:22> 'int' 0
|       |-CompoundStmt 0x55ab223d0b48 <col:25, line:132:3>
|       | `-ReturnStmt 0x55ab223d0b38 <line:131:5, col:34>
|       |   `-ImplicitCastExpr 0x55ab223d0b20 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x55ab223d0b00 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x55ab223d0ae0 <col:13> '_Bool' lvalue Var 0x55ab223cffb8 'side1Failed_History_0' '_Bool'
|       `-IfStmt 0x55ab223d0f90 <line:133:3, line:141:3> has_else
|         |-BinaryOperator 0x55ab223d0bf8 <line:133:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x55ab223d0bb0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55ab223d0b98 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x55ab223d0b60 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d08b8 'index' 'unsigned char'
|         | `-IntegerLiteral 0x55ab223d0bd8 <col:22> 'int' 1
|         |-CompoundStmt 0x55ab223d0c80 <col:25, line:135:3>
|         | `-ReturnStmt 0x55ab223d0c70 <line:134:5, col:34>
|         |   `-ImplicitCastExpr 0x55ab223d0c58 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x55ab223d0c38 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x55ab223d0c18 <col:13> '_Bool' lvalue Var 0x55ab223d0080 'side1Failed_History_1' '_Bool'
|         `-IfStmt 0x55ab223d0f68 <line:136:3, line:141:3> has_else
|           |-BinaryOperator 0x55ab223d0d30 <line:136:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x55ab223d0ce8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x55ab223d0cd0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x55ab223d0c98 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d08b8 'index' 'unsigned char'
|           | `-IntegerLiteral 0x55ab223d0d10 <col:22> 'int' 2
|           |-CompoundStmt 0x55ab223d0db8 <col:25, line:138:3>
|           | `-ReturnStmt 0x55ab223d0da8 <line:137:5, col:34>
|           |   `-ImplicitCastExpr 0x55ab223d0d90 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x55ab223d0d70 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x55ab223d0d50 <col:13> '_Bool' lvalue Var 0x55ab223d00f8 'side1Failed_History_2' '_Bool'
|           `-CompoundStmt 0x55ab223d0f48 <line:138:10, line:141:3>
|             |-CallExpr 0x55ab223d0e98 <line:139:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x55ab223d0e80 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55ab223d0dd0 <col:5> 'void (_Bool)' Function 0x55ab223cfd70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x55ab223d0e20 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x55ab223d0df0 <col:19> 'int' 0
|             `-ReturnStmt 0x55ab223d0f38 <line:140:5, col:21>
|               `-ParenExpr 0x55ab223d0f18 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x55ab223d0ef0 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x55ab223d0ec0 <col:20> 'int' 0
|-FunctionDecl 0x55ab223d2250 <line:144:1, line:154:1> line:144:6 used write_side2_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x55ab223d21c0 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x55ab223d24a0 <line:145:1, line:154:1>
|   `-CompoundStmt 0x55ab223d2470 <line:148:3, line:153:1>
|     |-BinaryOperator 0x55ab223d2350 <line:149:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223d22f8 <col:3> '_Bool' lvalue Var 0x55ab223d0260 'side2Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x55ab223d2338 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d2318 <col:27> '_Bool' lvalue Var 0x55ab223d01e8 'side2Failed_History_1' '_Bool'
|     |-BinaryOperator 0x55ab223d23c8 <line:150:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223d2370 <col:3> '_Bool' lvalue Var 0x55ab223d01e8 'side2Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x55ab223d23b0 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d2390 <col:27> '_Bool' lvalue Var 0x55ab223d0170 'side2Failed_History_0' '_Bool'
|     |-BinaryOperator 0x55ab223d2440 <line:151:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223d23e8 <col:3> '_Bool' lvalue Var 0x55ab223d0170 'side2Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x55ab223d2428 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d2408 <col:27> '_Bool' lvalue ParmVar 0x55ab223d21c0 'val' '_Bool'
|     `-ReturnStmt 0x55ab223d2460 <line:152:3>
|-FunctionDecl 0x55ab223d2560 <line:155:1, line:173:1> line:155:7 used read_side2_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x55ab223d24d0 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x55ab223d2ba0 <line:156:1, line:173:1>
|   `-CompoundStmt 0x55ab223d2b88 <line:159:3, line:172:1>
|     `-IfStmt 0x55ab223d2b60 <line:160:3, line:171:3> has_else
|       |-BinaryOperator 0x55ab223d26a0 <line:160:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x55ab223d2658 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55ab223d2640 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x55ab223d2608 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d24d0 'index' 'unsigned char'
|       | `-IntegerLiteral 0x55ab223d2680 <col:22> 'int' 0
|       |-CompoundStmt 0x55ab223d2728 <col:25, line:162:3>
|       | `-ReturnStmt 0x55ab223d2718 <line:161:5, col:34>
|       |   `-ImplicitCastExpr 0x55ab223d2700 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x55ab223d26e0 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x55ab223d26c0 <col:13> '_Bool' lvalue Var 0x55ab223d0170 'side2Failed_History_0' '_Bool'
|       `-IfStmt 0x55ab223d2b38 <line:163:3, line:171:3> has_else
|         |-BinaryOperator 0x55ab223d27d8 <line:163:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x55ab223d2790 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55ab223d2778 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x55ab223d2740 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d24d0 'index' 'unsigned char'
|         | `-IntegerLiteral 0x55ab223d27b8 <col:22> 'int' 1
|         |-CompoundStmt 0x55ab223d2860 <col:25, line:165:3>
|         | `-ReturnStmt 0x55ab223d2850 <line:164:5, col:34>
|         |   `-ImplicitCastExpr 0x55ab223d2838 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x55ab223d2818 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x55ab223d27f8 <col:13> '_Bool' lvalue Var 0x55ab223d01e8 'side2Failed_History_1' '_Bool'
|         `-IfStmt 0x55ab223d2b10 <line:166:3, line:171:3> has_else
|           |-BinaryOperator 0x55ab223d2910 <line:166:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x55ab223d28c8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x55ab223d28b0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x55ab223d2878 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d24d0 'index' 'unsigned char'
|           | `-IntegerLiteral 0x55ab223d28f0 <col:22> 'int' 2
|           |-CompoundStmt 0x55ab223d2998 <col:25, line:168:3>
|           | `-ReturnStmt 0x55ab223d2988 <line:167:5, col:34>
|           |   `-ImplicitCastExpr 0x55ab223d2970 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x55ab223d2950 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x55ab223d2930 <col:13> '_Bool' lvalue Var 0x55ab223d0260 'side2Failed_History_2' '_Bool'
|           `-CompoundStmt 0x55ab223d2af0 <line:168:10, line:171:3>
|             |-CallExpr 0x55ab223d2a40 <line:169:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x55ab223d2a28 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55ab223d29b0 <col:5> 'void (_Bool)' Function 0x55ab223cfd70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x55ab223d2a00 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x55ab223d29d0 <col:19> 'int' 0
|             `-ReturnStmt 0x55ab223d2ae0 <line:170:5, col:21>
|               `-ParenExpr 0x55ab223d2ac0 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x55ab223d2a98 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x55ab223d2a68 <col:20> 'int' 0
|-FunctionDecl 0x55ab223d2cd0 <line:174:1, line:184:1> line:174:6 used write_active_side_history 'void (int8_t)'
| |-ParmVarDecl 0x55ab223d2bc8 <col:32, col:39> col:39 used val 'int8_t':'char'
| `-CompoundStmt 0x55ab223d2f20 <line:175:1, line:184:1>
|   `-CompoundStmt 0x55ab223d2ef0 <line:178:3, line:183:1>
|     |-BinaryOperator 0x55ab223d2dd0 <line:179:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d2d78 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d03c8 'active_side_History_2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d2db8 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d2d98 <col:27> 'int8_t':'char' lvalue Var 0x55ab223d0350 'active_side_History_1' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d2e48 <line:180:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d2df0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d0350 'active_side_History_1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d2e30 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d2e10 <col:27> 'int8_t':'char' lvalue Var 0x55ab223d02d8 'active_side_History_0' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d2ec0 <line:181:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d2e68 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d02d8 'active_side_History_0' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d2ea8 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d2e88 <col:27> 'int8_t':'char' lvalue ParmVar 0x55ab223d2bc8 'val' 'int8_t':'char'
|     `-ReturnStmt 0x55ab223d2ee0 <line:182:3>
|-FunctionDecl 0x55ab223d3060 <line:185:1, line:203:1> line:185:8 used read_active_side_history 'int8_t (unsigned char)'
| |-ParmVarDecl 0x55ab223d2f50 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x55ab223d3ad8 <line:186:1, line:203:1>
|   `-CompoundStmt 0x55ab223d3ac0 <line:189:3, line:202:1>
|     `-IfStmt 0x55ab223d3a98 <line:190:3, line:201:3> has_else
|       |-BinaryOperator 0x55ab223d31a0 <line:190:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x55ab223d3158 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55ab223d3140 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x55ab223d3108 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d2f50 'index' 'unsigned char'
|       | `-IntegerLiteral 0x55ab223d3180 <col:22> 'int' 0
|       |-CompoundStmt 0x55ab223d3648 <col:25, line:192:3>
|       | `-ReturnStmt 0x55ab223d3638 <line:191:5, col:34>
|       |   `-ImplicitCastExpr 0x55ab223d3620 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x55ab223d3600 <col:12, col:34> 'int8_t':'char' lvalue
|       |       `-DeclRefExpr 0x55ab223d35e0 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d02d8 'active_side_History_0' 'int8_t':'char'
|       `-IfStmt 0x55ab223d3a70 <line:193:3, line:201:3> has_else
|         |-BinaryOperator 0x55ab223d36f8 <line:193:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x55ab223d36b0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55ab223d3698 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x55ab223d3660 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d2f50 'index' 'unsigned char'
|         | `-IntegerLiteral 0x55ab223d36d8 <col:22> 'int' 1
|         |-CompoundStmt 0x55ab223d3780 <col:25, line:195:3>
|         | `-ReturnStmt 0x55ab223d3770 <line:194:5, col:34>
|         |   `-ImplicitCastExpr 0x55ab223d3758 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x55ab223d3738 <col:12, col:34> 'int8_t':'char' lvalue
|         |       `-DeclRefExpr 0x55ab223d3718 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d0350 'active_side_History_1' 'int8_t':'char'
|         `-IfStmt 0x55ab223d3a48 <line:196:3, line:201:3> has_else
|           |-BinaryOperator 0x55ab223d3830 <line:196:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x55ab223d37e8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x55ab223d37d0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x55ab223d3798 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d2f50 'index' 'unsigned char'
|           | `-IntegerLiteral 0x55ab223d3810 <col:22> 'int' 2
|           |-CompoundStmt 0x55ab223d38b8 <col:25, line:198:3>
|           | `-ReturnStmt 0x55ab223d38a8 <line:197:5, col:34>
|           |   `-ImplicitCastExpr 0x55ab223d3890 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x55ab223d3870 <col:12, col:34> 'int8_t':'char' lvalue
|           |       `-DeclRefExpr 0x55ab223d3850 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d03c8 'active_side_History_2' 'int8_t':'char'
|           `-CompoundStmt 0x55ab223d3a28 <line:198:10, line:201:3>
|             |-CallExpr 0x55ab223d3960 <line:199:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x55ab223d3948 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55ab223d38d0 <col:5> 'void (_Bool)' Function 0x55ab223cfd70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x55ab223d3920 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x55ab223d38f0 <col:19> 'int' 0
|             `-ReturnStmt 0x55ab223d3a18 <line:200:5, col:24>
|               `-ParenExpr 0x55ab223d39f8 <col:12, col:24> 'int8_t':'char'
|                 `-CStyleCastExpr 0x55ab223d39d0 <col:13, col:23> 'int8_t':'char' <IntegralCast>
|                   `-UnaryOperator 0x55ab223d39a8 <col:22, col:23> 'int' prefix '-'
|                     `-IntegerLiteral 0x55ab223d3988 <col:23> 'int' 2
|-FunctionDecl 0x55ab223d3bd0 <line:204:1, line:214:1> line:204:6 used write_manual_selection_history 'void (msg_t)'
| |-ParmVarDecl 0x55ab223d3b00 <col:37, col:43> col:43 used val 'msg_t':'char'
| `-CompoundStmt 0x55ab223d3e20 <line:205:1, line:214:1>
|   `-CompoundStmt 0x55ab223d3df0 <line:208:3, line:213:1>
|     |-BinaryOperator 0x55ab223d3cd0 <line:209:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d3c78 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d0530 'manual_selection_History_2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d3cb8 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d3c98 <col:32> 'msg_t':'char' lvalue Var 0x55ab223d04b8 'manual_selection_History_1' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d3d48 <line:210:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d3cf0 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d04b8 'manual_selection_History_1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d3d30 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d3d10 <col:32> 'msg_t':'char' lvalue Var 0x55ab223d0440 'manual_selection_History_0' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d3dc0 <line:211:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d3d68 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d0440 'manual_selection_History_0' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d3da8 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d3d88 <col:32> 'msg_t':'char' lvalue ParmVar 0x55ab223d3b00 'val' 'msg_t':'char'
|     `-ReturnStmt 0x55ab223d3de0 <line:212:3>
|-FunctionDecl 0x55ab223d3f20 <line:215:1, line:233:1> line:215:7 used read_manual_selection_history 'msg_t (unsigned char)'
| |-ParmVarDecl 0x55ab223d3e50 <col:37, col:51> col:51 used index 'unsigned char'
| `-CompoundStmt 0x55ab223d4560 <line:216:1, line:233:1>
|   `-CompoundStmt 0x55ab223d4548 <line:219:3, line:232:1>
|     `-IfStmt 0x55ab223d4520 <line:220:3, line:231:3> has_else
|       |-BinaryOperator 0x55ab223d4060 <line:220:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x55ab223d4018 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55ab223d4000 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x55ab223d3fc8 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d3e50 'index' 'unsigned char'
|       | `-IntegerLiteral 0x55ab223d4040 <col:22> 'int' 0
|       |-CompoundStmt 0x55ab223d40e8 <col:25, line:222:3>
|       | `-ReturnStmt 0x55ab223d40d8 <line:221:5, col:39>
|       |   `-ImplicitCastExpr 0x55ab223d40c0 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x55ab223d40a0 <col:12, col:39> 'msg_t':'char' lvalue
|       |       `-DeclRefExpr 0x55ab223d4080 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d0440 'manual_selection_History_0' 'msg_t':'char'
|       `-IfStmt 0x55ab223d44f8 <line:223:3, line:231:3> has_else
|         |-BinaryOperator 0x55ab223d4198 <line:223:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x55ab223d4150 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55ab223d4138 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x55ab223d4100 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d3e50 'index' 'unsigned char'
|         | `-IntegerLiteral 0x55ab223d4178 <col:22> 'int' 1
|         |-CompoundStmt 0x55ab223d4220 <col:25, line:225:3>
|         | `-ReturnStmt 0x55ab223d4210 <line:224:5, col:39>
|         |   `-ImplicitCastExpr 0x55ab223d41f8 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x55ab223d41d8 <col:12, col:39> 'msg_t':'char' lvalue
|         |       `-DeclRefExpr 0x55ab223d41b8 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d04b8 'manual_selection_History_1' 'msg_t':'char'
|         `-IfStmt 0x55ab223d44d0 <line:226:3, line:231:3> has_else
|           |-BinaryOperator 0x55ab223d42d0 <line:226:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x55ab223d4288 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x55ab223d4270 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x55ab223d4238 <col:13> 'unsigned char' lvalue ParmVar 0x55ab223d3e50 'index' 'unsigned char'
|           | `-IntegerLiteral 0x55ab223d42b0 <col:22> 'int' 2
|           |-CompoundStmt 0x55ab223d4358 <col:25, line:228:3>
|           | `-ReturnStmt 0x55ab223d4348 <line:227:5, col:39>
|           |   `-ImplicitCastExpr 0x55ab223d4330 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x55ab223d4310 <col:12, col:39> 'msg_t':'char' lvalue
|           |       `-DeclRefExpr 0x55ab223d42f0 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d0530 'manual_selection_History_2' 'msg_t':'char'
|           `-CompoundStmt 0x55ab223d44b0 <line:228:10, line:231:3>
|             |-CallExpr 0x55ab223d4400 <line:229:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x55ab223d43e8 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55ab223d4370 <col:5> 'void (_Bool)' Function 0x55ab223cfd70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x55ab223d43c0 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x55ab223d4390 <col:19> 'int' 0
|             `-ReturnStmt 0x55ab223d44a0 <line:230:5, col:22>
|               `-ParenExpr 0x55ab223d4480 <col:12, col:22> 'msg_t':'char'
|                 `-CStyleCastExpr 0x55ab223d4458 <col:13, col:21> 'msg_t':'char' <IntegralCast>
|                   `-IntegerLiteral 0x55ab223d4428 <col:21> 'int' 0
|-FunctionDecl 0x55ab223d46b8 <line:234:1, line:277:1> line:234:5 used init 'int (void)'
| `-CompoundStmt 0x55ab223d5728 <line:235:1, line:277:1>
|   `-CompoundStmt 0x55ab223d56b0 <line:238:3, line:276:1>
|     |-IfStmt 0x55ab223d4878 <line:239:3, line:241:3>
|     | |-BinaryOperator 0x55ab223d47f0 <line:239:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d47a8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d4790 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d4758 <col:13> '_Bool' lvalue Var 0x55ab223cffb8 'side1Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x55ab223d47d0 <col:38> 'int' 0
|     | `-CompoundStmt 0x55ab223d4860 <col:41, line:241:3>
|     |   `-ReturnStmt 0x55ab223d4850 <line:240:5, col:14>
|     |     `-ParenExpr 0x55ab223d4830 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d4810 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d49b0 <line:242:3, line:244:3>
|     | |-BinaryOperator 0x55ab223d4928 <line:242:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d48e0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d48c8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d4890 <col:13> '_Bool' lvalue Var 0x55ab223d0170 'side2Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x55ab223d4908 <col:38> 'int' 0
|     | `-CompoundStmt 0x55ab223d4998 <col:41, line:244:3>
|     |   `-ReturnStmt 0x55ab223d4988 <line:243:5, col:14>
|     |     `-ParenExpr 0x55ab223d4968 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d4948 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d4b00 <line:245:3, line:247:3>
|     | |-BinaryOperator 0x55ab223d4a78 <line:245:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d4a18 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d4a00 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d49c8 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d02d8 'active_side_History_0' 'int8_t':'char'
|     | | `-UnaryOperator 0x55ab223d4a60 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55ab223d4a40 <col:39> 'int' 2
|     | `-CompoundStmt 0x55ab223d4ae8 <col:42, line:247:3>
|     |   `-ReturnStmt 0x55ab223d4ad8 <line:246:5, col:14>
|     |     `-ParenExpr 0x55ab223d4ab8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d4a98 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d4c38 <line:248:3, line:250:3>
|     | |-BinaryOperator 0x55ab223d4bb0 <line:248:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d4b68 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d4b50 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d4b18 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d0440 'manual_selection_History_0' 'msg_t':'char'
|     | | `-IntegerLiteral 0x55ab223d4b90 <col:43> 'int' 0
|     | `-CompoundStmt 0x55ab223d4c20 <col:46, line:250:3>
|     |   `-ReturnStmt 0x55ab223d4c10 <line:249:5, col:14>
|     |     `-ParenExpr 0x55ab223d4bf0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d4bd0 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d4d70 <line:251:3, line:253:3>
|     | |-BinaryOperator 0x55ab223d4ce8 <line:251:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d4ca0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d4c88 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d4c50 <col:13> '_Bool' lvalue Var 0x55ab223d0080 'side1Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x55ab223d4cc8 <col:38> 'int' 0
|     | `-CompoundStmt 0x55ab223d4d58 <col:41, line:253:3>
|     |   `-ReturnStmt 0x55ab223d4d48 <line:252:5, col:14>
|     |     `-ParenExpr 0x55ab223d4d28 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d4d08 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d4ea8 <line:254:3, line:256:3>
|     | |-BinaryOperator 0x55ab223d4e20 <line:254:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d4dd8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d4dc0 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d4d88 <col:13> '_Bool' lvalue Var 0x55ab223d01e8 'side2Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x55ab223d4e00 <col:38> 'int' 0
|     | `-CompoundStmt 0x55ab223d4e90 <col:41, line:256:3>
|     |   `-ReturnStmt 0x55ab223d4e80 <line:255:5, col:14>
|     |     `-ParenExpr 0x55ab223d4e60 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d4e40 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d4ff8 <line:257:3, line:259:3>
|     | |-BinaryOperator 0x55ab223d4f70 <line:257:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d4f10 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d4ef8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d4ec0 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d0350 'active_side_History_1' 'int8_t':'char'
|     | | `-UnaryOperator 0x55ab223d4f58 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55ab223d4f38 <col:39> 'int' 2
|     | `-CompoundStmt 0x55ab223d4fe0 <col:42, line:259:3>
|     |   `-ReturnStmt 0x55ab223d4fd0 <line:258:5, col:14>
|     |     `-ParenExpr 0x55ab223d4fb0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d4f90 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d5130 <line:260:3, line:262:3>
|     | |-BinaryOperator 0x55ab223d50a8 <line:260:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d5060 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d5048 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d5010 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d04b8 'manual_selection_History_1' 'msg_t':'char'
|     | | `-IntegerLiteral 0x55ab223d5088 <col:43> 'int' 0
|     | `-CompoundStmt 0x55ab223d5118 <col:46, line:262:3>
|     |   `-ReturnStmt 0x55ab223d5108 <line:261:5, col:14>
|     |     `-ParenExpr 0x55ab223d50e8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d50c8 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d5268 <line:263:3, line:265:3>
|     | |-BinaryOperator 0x55ab223d51e0 <line:263:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d5198 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d5180 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d5148 <col:13> '_Bool' lvalue Var 0x55ab223d00f8 'side1Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x55ab223d51c0 <col:38> 'int' 0
|     | `-CompoundStmt 0x55ab223d5250 <col:41, line:265:3>
|     |   `-ReturnStmt 0x55ab223d5240 <line:264:5, col:14>
|     |     `-ParenExpr 0x55ab223d5220 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d5200 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d53a0 <line:266:3, line:268:3>
|     | |-BinaryOperator 0x55ab223d5318 <line:266:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d52d0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d52b8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d5280 <col:13> '_Bool' lvalue Var 0x55ab223d0260 'side2Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x55ab223d52f8 <col:38> 'int' 0
|     | `-CompoundStmt 0x55ab223d5388 <col:41, line:268:3>
|     |   `-ReturnStmt 0x55ab223d5378 <line:267:5, col:14>
|     |     `-ParenExpr 0x55ab223d5358 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d5338 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d54f0 <line:269:3, line:271:3>
|     | |-BinaryOperator 0x55ab223d5468 <line:269:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d5408 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d53f0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d53b8 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d03c8 'active_side_History_2' 'int8_t':'char'
|     | | `-UnaryOperator 0x55ab223d5450 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55ab223d5430 <col:39> 'int' 2
|     | `-CompoundStmt 0x55ab223d54d8 <col:42, line:271:3>
|     |   `-ReturnStmt 0x55ab223d54c8 <line:270:5, col:14>
|     |     `-ParenExpr 0x55ab223d54a8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d5488 <col:13> 'int' 0
|     |-IfStmt 0x55ab223d5648 <line:272:3, line:274:3>
|     | |-BinaryOperator 0x55ab223d55a0 <line:272:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x55ab223d5558 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d5540 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d5508 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d0530 'manual_selection_History_2' 'msg_t':'char'
|     | | `-IntegerLiteral 0x55ab223d5580 <col:43> 'int' 0
|     | `-CompoundStmt 0x55ab223d5630 <col:46, line:274:3>
|     |   `-ReturnStmt 0x55ab223d5620 <line:273:5, col:14>
|     |     `-ParenExpr 0x55ab223d5600 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55ab223d55c0 <col:13> 'int' 0
|     `-ReturnStmt 0x55ab223d56a0 <line:275:3, col:12>
|       `-ParenExpr 0x55ab223d5680 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x55ab223d5660 <col:11> 'int' 1
|-FunctionDecl 0x55ab223d5860 <line:278:1, line:290:1> line:278:8 used flip_the_side 'int8_t (int8_t)'
| |-ParmVarDecl 0x55ab223d5750 <col:22, col:29> col:29 used side 'int8_t':'char'
| `-CompoundStmt 0x55ab223d5c30 <line:279:1, line:290:1>
|   |-DeclStmt 0x55ab223d5988 <line:280:3, col:11>
|   | `-VarDecl 0x55ab223d5920 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x55ab223d5c10 <line:282:3, line:289:1>
|     |-IfStmt 0x55ab223d5b48 <line:283:3, line:287:3> has_else
|     | |-BinaryOperator 0x55ab223d5a38 <line:283:7, col:21> 'int' '=='
|     | | |-CStyleCastExpr 0x55ab223d59f0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d59d8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d59a0 <col:13> 'int8_t':'char' lvalue ParmVar 0x55ab223d5750 'side' 'int8_t':'char'
|     | | `-IntegerLiteral 0x55ab223d5a18 <col:21> 'int' 1
|     | |-CompoundStmt 0x55ab223d5ab8 <col:24, line:285:3>
|     | | `-BinaryOperator 0x55ab223d5a98 <line:284:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x55ab223d5a58 <col:5> 'int' lvalue Var 0x55ab223d5920 'tmp' 'int'
|     | |   `-IntegerLiteral 0x55ab223d5a78 <col:11> 'int' 0
|     | `-CompoundStmt 0x55ab223d5b30 <line:285:10, line:287:3>
|     |   `-BinaryOperator 0x55ab223d5b10 <line:286:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x55ab223d5ad0 <col:5> 'int' lvalue Var 0x55ab223d5920 'tmp' 'int'
|     |     `-IntegerLiteral 0x55ab223d5af0 <col:11> 'int' 1
|     `-ReturnStmt 0x55ab223d5c00 <line:288:3, col:23>
|       `-ParenExpr 0x55ab223d5be0 <col:10, col:23> 'int8_t':'char'
|         `-CStyleCastExpr 0x55ab223d5bb8 <col:11, col:20> 'int8_t':'char' <IntegralCast>
|           `-ImplicitCastExpr 0x55ab223d5ba0 <col:20> 'int' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55ab223d5b70 <col:20> 'int' lvalue Var 0x55ab223d5920 'tmp' 'int'
|-FunctionDecl 0x55ab223d5d20 <line:291:1, line:305:1> line:291:6 used Console_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x55ab223d67b0 <line:292:1, line:305:1>
|   |-DeclStmt 0x55ab223d5e38 <line:293:3, col:26>
|   | `-VarDecl 0x55ab223d5dd0 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x55ab223d5ec8 <line:294:3, col:12>
|   | `-VarDecl 0x55ab223d5e60 <col:3, col:8> col:8 used tmp 'char'
|   `-CompoundStmt 0x55ab223d6768 <line:296:3, line:304:1>
|     |-BinaryOperator 0x55ab223d5f88 <line:297:3, col:32> 'char' '='
|     | |-DeclRefExpr 0x55ab223d5ee0 <col:3> 'char' lvalue Var 0x55ab223d5e60 'tmp' 'char'
|     | `-CallExpr 0x55ab223d5f68 <col:9, col:32> 'char'
|     |   `-ImplicitCastExpr 0x55ab223d5f50 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55ab223d5f00 <col:9> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|     |-BinaryOperator 0x55ab223d6000 <line:298:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d5fa8 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d5dd0 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d5fe8 <col:22> 'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d5fc8 <col:22> 'char' lvalue Var 0x55ab223d5e60 'tmp' 'char'
|     |-CallExpr 0x55ab223d60d8 <line:299:3, col:50> 'void'
|     | |-ImplicitCastExpr 0x55ab223d60c0 <col:3> 'void (*)(msg_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55ab223d6020 <col:3> 'void (msg_t)' Function 0x55ab223d3bd0 'write_manual_selection_history' 'void (msg_t)'
|     | `-ImplicitCastExpr 0x55ab223d6100 <col:34> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d6040 <col:34> 'msg_t':'char' lvalue Var 0x55ab223d5dd0 'manual_selection' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d63c0 <line:300:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d6118 <col:3> 'int8_t':'char' lvalue Var 0x55ab223a8128 'cs1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d63a8 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55ab223d6378 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x55ab223d62b8 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x55ab223d61d8 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55ab223d61a8 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55ab223d6178 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55ab223d6138 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d5dd0 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x55ab223d61c0 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55ab223d6190 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55ab223d6158 <col:33> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55ab223d6298 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55ab223d6268 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55ab223d6238 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55ab223d61f8 <col:42> 'int8_t':'char' lvalue Var 0x55ab223a8128 'cs1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55ab223d6280 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55ab223d6250 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55ab223d6218 <col:53> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55ab223d6330 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55ab223d6318 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223d62d8 <col:61> 'msg_t':'char' lvalue Var 0x55ab223d5dd0 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x55ab223d6360 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55ab223d6348 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ab223d62f8 <col:80> 'int8_t':'char' lvalue Var 0x55ab223a8128 'cs1_new' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d66a0 <line:301:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d63e0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223a8290 'cs2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d6688 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55ab223d6658 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x55ab223d6580 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x55ab223d64a0 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55ab223d6470 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55ab223d6440 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55ab223d6400 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d5dd0 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x55ab223d6488 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55ab223d6458 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55ab223d6420 <col:33> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55ab223d6560 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55ab223d6530 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55ab223d6500 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55ab223d64c0 <col:42> 'int8_t':'char' lvalue Var 0x55ab223a8290 'cs2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55ab223d6548 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55ab223d6518 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55ab223d64e0 <col:53> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55ab223d6610 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55ab223d65e0 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223d65a0 <col:61> 'msg_t':'char' lvalue Var 0x55ab223d5dd0 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x55ab223d6640 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55ab223d6628 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ab223d65c0 <col:80> 'int8_t':'char' lvalue Var 0x55ab223a8290 'cs2_new' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d6738 <line:302:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d66c0 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d5dd0 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x55ab223d6710 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x55ab223d66e0 <col:30> 'int' 0
|     `-ReturnStmt 0x55ab223d6758 <line:303:3>
|-FunctionDecl 0x55ab223d6870 <line:306:1, line:362:1> line:306:6 used Side1_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x55ab223d95e0 <line:307:1, line:362:1>
|   |-DeclStmt 0x55ab223d6988 <line:308:3, col:16>
|   | `-VarDecl 0x55ab223d6920 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x55ab223d6a18 <line:309:3, col:16>
|   | `-VarDecl 0x55ab223d69b0 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x55ab223d6aa8 <line:310:3, col:26>
|   | `-VarDecl 0x55ab223d6a40 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x55ab223d6b38 <line:311:3, col:21>
|   | `-VarDecl 0x55ab223d6ad0 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x55ab223d9540 <line:313:3, line:361:1>
|     |-BinaryOperator 0x55ab223d6ba8 <line:314:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d6b50 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d6920 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d6b90 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d6b70 <col:11> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d6c20 <line:315:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d6bc8 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d69b0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d6c08 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d6be8 <col:11> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d6cb8 <line:316:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d6c40 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d6a40 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x55ab223d6c90 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x55ab223d6c60 <col:30> 'int' 0
|     |-BinaryOperator 0x55ab223d6d88 <line:317:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223d6cd8 <col:3> '_Bool' lvalue Var 0x55ab223cfac0 'side1Failed' '_Bool'
|     | `-CallExpr 0x55ab223d6d68 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x55ab223d6d50 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55ab223d6cf8 <col:17> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x55ab223d6e00 <line:318:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x55ab223d6de8 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55ab223d6da8 <col:3> 'void (_Bool)' Function 0x55ab223d0638 'write_side1_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x55ab223d6e28 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d6dc8 <col:30> '_Bool' lvalue Var 0x55ab223cfac0 'side1Failed' '_Bool'
|     |-IfStmt 0x55ab223d78e8 <line:319:3, line:325:3>
|     | |-ImplicitCastExpr 0x55ab223d6e60 <line:319:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ab223d6e40 <col:7> '_Bool' lvalue Var 0x55ab223cfac0 'side1Failed' '_Bool'
|     | `-CompoundStmt 0x55ab223d78b0 <col:20, line:325:3>
|     |   |-BinaryOperator 0x55ab223d7120 <line:320:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223d6e78 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55ab223d7108 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55ab223d70d8 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x55ab223d7018 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55ab223d6f38 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55ab223d6f08 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55ab223d6ed8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55ab223d6e98 <col:16> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55ab223d6f20 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55ab223d6ef0 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55ab223d6eb8 <col:25> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55ab223d6ff8 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55ab223d6fc8 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55ab223d6f98 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55ab223d6f58 <col:34> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55ab223d6fe0 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55ab223d6fb0 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55ab223d6f78 <col:46> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55ab223d7090 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55ab223d7078 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55ab223d7038 <col:54> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55ab223d70c0 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55ab223d70a8 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55ab223d7058 <col:62> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55ab223d73e8 <line:321:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223d7140 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55ab223d73d0 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55ab223d73a0 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x55ab223d72e0 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55ab223d7200 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55ab223d71d0 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55ab223d71a0 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55ab223d7160 <col:16> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55ab223d71e8 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55ab223d71b8 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55ab223d7180 <col:25> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55ab223d72c0 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55ab223d7290 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55ab223d7260 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55ab223d7220 <col:34> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55ab223d72a8 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55ab223d7278 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55ab223d7240 <col:46> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55ab223d7358 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55ab223d7340 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55ab223d7300 <col:54> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55ab223d7388 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55ab223d7370 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55ab223d7320 <col:62> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55ab223d7808 <line:322:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223d7408 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55ab223d77f0 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55ab223d77c0 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x55ab223d75a8 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55ab223d74c8 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55ab223d7498 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55ab223d7468 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55ab223d7428 <col:15> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55ab223d74b0 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55ab223d7480 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55ab223d7448 <col:24> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55ab223d7588 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55ab223d7558 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55ab223d7528 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55ab223d74e8 <col:33> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55ab223d7570 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55ab223d7540 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55ab223d7508 <col:44> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55ab223d7778 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55ab223d7760 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55ab223d75c8 <col:52> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55ab223d77a8 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55ab223d7790 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55ab223d75e8 <col:60> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55ab223d7880 <line:323:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223d7828 <col:5> 'msg_t':'char' lvalue Var 0x55ab223cfbb0 'side1_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x55ab223d7868 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55ab223d7848 <col:21> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x55ab223d78a0 <line:324:5>
|     |-BinaryOperator 0x55ab223d7958 <line:326:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d7900 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d6920 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d7940 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d7920 <col:11> 'int8_t':'char' lvalue Var 0x55ab223cf250 's1s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d79d0 <line:327:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d7978 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf250 's1s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d79b8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d7998 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d7a48 <line:328:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d79f0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d69b0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d7a30 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d7a10 <col:11> 'int8_t':'char' lvalue Var 0x55ab223cf3b8 's2s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d7ac0 <line:329:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d7a68 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf3b8 's2s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d7aa8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d7a88 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d7b38 <line:330:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d7ae0 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d6a40 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d7b20 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d7b00 <col:22> 'int8_t':'char' lvalue Var 0x55ab223a80b0 'cs1_old' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d7bb0 <line:331:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d7b58 <col:3> 'int8_t':'char' lvalue Var 0x55ab223a80b0 'cs1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d7b98 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d7b78 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55ab223d8c38 <line:332:3, line:355:3> has_else
|     | |-BinaryOperator 0x55ab223d7cc0 <line:332:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x55ab223d7c20 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223d7c08 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223d7bd0 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d6920 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x55ab223d7c98 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x55ab223d7c80 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x55ab223d7c48 <col:28> 'int8_t':'char' lvalue Var 0x55ab223d69b0 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x55ab223d7d78 <col:35, line:334:3>
|     | | `-BinaryOperator 0x55ab223d7d58 <line:333:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x55ab223d7ce0 <col:5> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x55ab223d7d30 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x55ab223d7d00 <col:27> 'int' 1
|     | `-IfStmt 0x55ab223d8c10 <line:335:3, line:355:3> has_else
|     |   |-BinaryOperator 0x55ab223d7e80 <line:335:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x55ab223d7de0 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55ab223d7dc8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55ab223d7d90 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d6920 'side1' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x55ab223d7e58 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x55ab223d7e40 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x55ab223d7e08 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x55ab223d8108 <col:35, line:341:3>
|     |   | `-IfStmt 0x55ab223d80e0 <line:336:5, line:340:5> has_else
|     |   |   |-BinaryOperator 0x55ab223d7f90 <line:336:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55ab223d7ef0 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55ab223d7ed8 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55ab223d7ea0 <col:15> 'int8_t':'char' lvalue Var 0x55ab223d69b0 'side2' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x55ab223d7f68 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55ab223d7f50 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55ab223d7f18 <col:30> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x55ab223d8048 <col:37, line:338:5>
|     |   |   | `-BinaryOperator 0x55ab223d8028 <line:337:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x55ab223d7fb0 <col:7> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x55ab223d8000 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x55ab223d7fd0 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x55ab223d80c8 <line:338:12, line:340:5>
|     |   |     `-GotoStmt 0x55ab223d80b0 <line:339:7, col:12> '_L___0' 0x55ab223d8060
|     |   `-LabelStmt 0x55ab223d8bf8 <line:342:3, line:355:3> '_L___0'
|     |     `-IfStmt 0x55ab223d8bd0 <line:343:3, line:355:3> has_else
|     |       |-BinaryOperator 0x55ab223d8210 <line:343:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x55ab223d8170 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x55ab223d8158 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x55ab223d8120 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d6920 'side1' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x55ab223d81e8 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x55ab223d81d0 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x55ab223d8198 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x55ab223d8498 <col:35, line:349:3>
|     |       | `-IfStmt 0x55ab223d8470 <line:344:5, line:348:5> has_else
|     |       |   |-BinaryOperator 0x55ab223d8320 <line:344:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x55ab223d8280 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x55ab223d8268 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x55ab223d8230 <col:15> 'int8_t':'char' lvalue Var 0x55ab223d69b0 'side2' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x55ab223d82f8 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x55ab223d82e0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x55ab223d82a8 <col:30> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x55ab223d83d8 <col:37, line:346:5>
|     |       |   | `-BinaryOperator 0x55ab223d83b8 <line:345:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x55ab223d8340 <col:7> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x55ab223d8390 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x55ab223d8360 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x55ab223d8458 <line:346:12, line:348:5>
|     |       |     `-GotoStmt 0x55ab223d8440 <line:347:7, col:12> '_L' 0x55ab223d83f0
|     |       `-LabelStmt 0x55ab223d8bb8 <line:350:3, line:355:3> '_L'
|     |         `-IfStmt 0x55ab223d8b90 <line:351:3, line:355:3> has_else
|     |           |-BinaryOperator 0x55ab223d8548 <line:351:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x55ab223d8500 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x55ab223d84e8 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x55ab223d84b0 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d6a40 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x55ab223d8528 <col:33> 'int' 1
|     |           |-CompoundStmt 0x55ab223d86a8 <col:36, line:353:3>
|     |           | `-BinaryOperator 0x55ab223d8688 <line:352:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x55ab223d8568 <col:5> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x55ab223d8648 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x55ab223d8630 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x55ab223d8588 <col:18> 'int8_t (int8_t)' Function 0x55ab223d5860 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x55ab223d8670 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x55ab223d85a8 <col:32> 'int8_t':'char' lvalue Var 0x55ab223d6920 'side1' 'int8_t':'char'
|     |           `-CompoundStmt 0x55ab223d8738 <line:353:10, line:355:3>
|     |             `-BinaryOperator 0x55ab223d8718 <line:354:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x55ab223d86c0 <col:5> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x55ab223d8700 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x55ab223d86e0 <col:18> 'int8_t':'char' lvalue Var 0x55ab223d6920 'side1' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d8f08 <line:356:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d8c60 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d8ef0 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55ab223d8ec0 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x55ab223d8e00 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x55ab223d8d20 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55ab223d8cf0 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55ab223d8cc0 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55ab223d8c80 <col:14> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55ab223d8d08 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55ab223d8cd8 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55ab223d8ca0 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55ab223d8de0 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55ab223d8db0 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55ab223d8d80 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55ab223d8d40 <col:37> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55ab223d8dc8 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55ab223d8d98 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55ab223d8d60 <col:49> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55ab223d8e78 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55ab223d8e60 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223d8e20 <col:57> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55ab223d8ea8 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55ab223d8e90 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ab223d8e40 <col:70> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d91d0 <line:357:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d8f28 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d91b8 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55ab223d9188 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x55ab223d90c8 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x55ab223d8fe8 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55ab223d8fb8 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55ab223d8f88 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55ab223d8f48 <col:14> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55ab223d8fd0 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55ab223d8fa0 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55ab223d8f68 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55ab223d90a8 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55ab223d9078 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55ab223d9048 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55ab223d9008 <col:37> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55ab223d9090 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55ab223d9060 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55ab223d9028 <col:49> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55ab223d9140 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55ab223d9128 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223d90e8 <col:57> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55ab223d9170 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55ab223d9158 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ab223d9108 <col:70> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d9498 <line:358:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d91f0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d9480 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55ab223d9450 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x55ab223d9390 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x55ab223d92b0 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55ab223d9280 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55ab223d9250 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55ab223d9210 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55ab223d9298 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55ab223d9268 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55ab223d9230 <col:27> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55ab223d9370 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55ab223d9340 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55ab223d9310 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55ab223d92d0 <col:36> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55ab223d9358 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55ab223d9328 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55ab223d92f0 <col:47> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55ab223d9408 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55ab223d93f0 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223d93b0 <col:55> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55ab223d9438 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55ab223d9420 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ab223d93d0 <col:68> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223d9510 <line:359:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d94b8 <col:3> 'msg_t':'char' lvalue Var 0x55ab223cfbb0 'side1_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d94f8 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d94d8 <col:19> 'int8_t':'char' lvalue Var 0x55ab223d6ad0 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x55ab223d9530 <line:360:3>
|-FunctionDecl 0x55ab223d96b0 <line:363:1, line:419:1> line:363:6 used Side2_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x55ab223dbe30 <line:364:1, line:419:1>
|   |-DeclStmt 0x55ab223d97c8 <line:365:3, col:16>
|   | `-VarDecl 0x55ab223d9760 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x55ab223d9858 <line:366:3, col:16>
|   | `-VarDecl 0x55ab223d97f0 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x55ab223d98e8 <line:367:3, col:26>
|   | `-VarDecl 0x55ab223d9880 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x55ab223d9978 <line:368:3, col:21>
|   | `-VarDecl 0x55ab223d9910 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x55ab223dbd90 <line:370:3, line:418:1>
|     |-BinaryOperator 0x55ab223d99e8 <line:371:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d9990 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d9760 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d99d0 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d99b0 <col:11> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d9a60 <line:372:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d9a08 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d97f0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223d9a48 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d9a28 <col:11> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223d9af8 <line:373:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223d9a80 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d9880 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x55ab223d9ad0 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x55ab223d9aa0 <col:30> 'int' 0
|     |-BinaryOperator 0x55ab223d9ba0 <line:374:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223d9b18 <col:3> '_Bool' lvalue Var 0x55ab223cfb38 'side2Failed' '_Bool'
|     | `-CallExpr 0x55ab223d9b70 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x55ab223d9b58 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55ab223d9b38 <col:17> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x55ab223d9c18 <line:375:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x55ab223d9c00 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55ab223d9bc0 <col:3> 'void (_Bool)' Function 0x55ab223d2250 'write_side2_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x55ab223d9c40 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223d9be0 <col:30> '_Bool' lvalue Var 0x55ab223cfb38 'side2Failed' '_Bool'
|     |-IfStmt 0x55ab223da5a8 <line:376:3, line:382:3>
|     | |-ImplicitCastExpr 0x55ab223d9c78 <line:376:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ab223d9c58 <col:7> '_Bool' lvalue Var 0x55ab223cfb38 'side2Failed' '_Bool'
|     | `-CompoundStmt 0x55ab223da570 <col:20, line:382:3>
|     |   |-BinaryOperator 0x55ab223d9f38 <line:377:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223d9c90 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55ab223d9f20 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55ab223d9ef0 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x55ab223d9e30 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55ab223d9d50 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55ab223d9d20 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55ab223d9cf0 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55ab223d9cb0 <col:16> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55ab223d9d38 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55ab223d9d08 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55ab223d9cd0 <col:25> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55ab223d9e10 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55ab223d9de0 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55ab223d9db0 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55ab223d9d70 <col:34> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55ab223d9df8 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55ab223d9dc8 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55ab223d9d90 <col:46> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55ab223d9ea8 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55ab223d9e90 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55ab223d9e50 <col:54> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55ab223d9ed8 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55ab223d9ec0 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55ab223d9e70 <col:62> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55ab223da200 <line:378:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223d9f58 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55ab223da1e8 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55ab223da1b8 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x55ab223da0f8 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55ab223da018 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55ab223d9fe8 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55ab223d9fb8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55ab223d9f78 <col:16> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55ab223da000 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55ab223d9fd0 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55ab223d9f98 <col:25> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55ab223da0d8 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55ab223da0a8 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55ab223da078 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55ab223da038 <col:34> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55ab223da0c0 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55ab223da090 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55ab223da058 <col:46> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55ab223da170 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55ab223da158 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55ab223da118 <col:54> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55ab223da1a0 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55ab223da188 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55ab223da138 <col:62> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55ab223da4c8 <line:379:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223da220 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55ab223da4b0 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55ab223da480 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x55ab223da3c0 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55ab223da2e0 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55ab223da2b0 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55ab223da280 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55ab223da240 <col:15> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55ab223da2c8 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55ab223da298 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55ab223da260 <col:24> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55ab223da3a0 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55ab223da370 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55ab223da340 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55ab223da300 <col:33> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55ab223da388 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55ab223da358 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55ab223da320 <col:44> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55ab223da438 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55ab223da420 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55ab223da3e0 <col:52> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55ab223da468 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55ab223da450 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55ab223da400 <col:60> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55ab223da540 <line:380:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223da4e8 <col:5> 'msg_t':'char' lvalue Var 0x55ab223cfc28 'side2_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x55ab223da528 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55ab223da508 <col:21> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x55ab223da560 <line:381:5>
|     |-BinaryOperator 0x55ab223da618 <line:383:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223da5c0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d9760 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223da600 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223da5e0 <col:11> 'int8_t':'char' lvalue Var 0x55ab223cf0e8 's1s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223da690 <line:384:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223da638 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf0e8 's1s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223da678 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223da658 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223da708 <line:385:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223da6b0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d97f0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223da6f0 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223da6d0 <col:11> 'int8_t':'char' lvalue Var 0x55ab223cf520 's2s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223da780 <line:386:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223da728 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf520 's2s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223da768 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223da748 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223da7f8 <line:387:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223da7a0 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d9880 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55ab223da7e0 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223da7c0 <col:22> 'int8_t':'char' lvalue Var 0x55ab223a8218 'cs2_old' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223da870 <line:388:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223da818 <col:3> 'int8_t':'char' lvalue Var 0x55ab223a8218 'cs2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223da858 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223da838 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55ab223db468 <line:389:3, line:412:3> has_else
|     | |-BinaryOperator 0x55ab223da980 <line:389:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x55ab223da8e0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223da8c8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223da890 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d9760 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x55ab223da958 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x55ab223da940 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x55ab223da908 <col:28> 'int8_t':'char' lvalue Var 0x55ab223d97f0 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x55ab223daa38 <col:35, line:391:3>
|     | | `-BinaryOperator 0x55ab223daa18 <line:390:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x55ab223da9a0 <col:5> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x55ab223da9f0 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x55ab223da9c0 <col:27> 'int' 0
|     | `-IfStmt 0x55ab223db440 <line:392:3, line:412:3> has_else
|     |   |-BinaryOperator 0x55ab223dab40 <line:392:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x55ab223daaa0 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55ab223daa88 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55ab223daa50 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d97f0 'side2' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x55ab223dab18 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x55ab223dab00 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x55ab223daac8 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x55ab223dade0 <col:35, line:398:3>
|     |   | `-IfStmt 0x55ab223dadb8 <line:393:5, line:397:5> has_else
|     |   |   |-BinaryOperator 0x55ab223dac68 <line:393:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55ab223dabc8 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55ab223dabb0 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55ab223dab60 <col:15> 'int8_t':'char' lvalue Var 0x55ab223d9760 'side1' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x55ab223dac40 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55ab223dac28 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55ab223dabf0 <col:30> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x55ab223dad20 <col:37, line:395:5>
|     |   |   | `-BinaryOperator 0x55ab223dad00 <line:394:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x55ab223dac88 <col:7> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x55ab223dacd8 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x55ab223daca8 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x55ab223dada0 <line:395:12, line:397:5>
|     |   |     `-GotoStmt 0x55ab223dad88 <line:396:7, col:12> '_L___0' 0x55ab223dad38
|     |   `-LabelStmt 0x55ab223db428 <line:399:3, line:412:3> '_L___0'
|     |     `-IfStmt 0x55ab223db400 <line:400:3, line:412:3> has_else
|     |       |-BinaryOperator 0x55ab223daee8 <line:400:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x55ab223dae48 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x55ab223dae30 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x55ab223dadf8 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d97f0 'side2' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x55ab223daec0 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x55ab223daea8 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x55ab223dae70 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x55ab223db170 <col:35, line:406:3>
|     |       | `-IfStmt 0x55ab223db148 <line:401:5, line:405:5> has_else
|     |       |   |-BinaryOperator 0x55ab223daff8 <line:401:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x55ab223daf58 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x55ab223daf40 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x55ab223daf08 <col:15> 'int8_t':'char' lvalue Var 0x55ab223d9760 'side1' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x55ab223dafd0 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x55ab223dafb8 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x55ab223daf80 <col:30> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x55ab223db0b0 <col:37, line:403:5>
|     |       |   | `-BinaryOperator 0x55ab223db090 <line:402:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x55ab223db018 <col:7> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x55ab223db068 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x55ab223db038 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x55ab223db130 <line:403:12, line:405:5>
|     |       |     `-GotoStmt 0x55ab223db118 <line:404:7, col:12> '_L' 0x55ab223db0c8
|     |       `-LabelStmt 0x55ab223db3e8 <line:407:3, line:412:3> '_L'
|     |         `-IfStmt 0x55ab223db3c0 <line:408:3, line:412:3> has_else
|     |           |-BinaryOperator 0x55ab223db220 <line:408:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x55ab223db1d8 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x55ab223db1c0 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x55ab223db188 <col:13> 'msg_t':'char' lvalue Var 0x55ab223d9880 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x55ab223db200 <col:33> 'int' 1
|     |           |-CompoundStmt 0x55ab223db318 <col:36, line:410:3>
|     |           | `-BinaryOperator 0x55ab223db2f8 <line:409:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x55ab223db240 <col:5> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x55ab223db2b8 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x55ab223db2a0 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x55ab223db260 <col:18> 'int8_t (int8_t)' Function 0x55ab223d5860 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x55ab223db2e0 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x55ab223db280 <col:32> 'int8_t':'char' lvalue Var 0x55ab223d97f0 'side2' 'int8_t':'char'
|     |           `-CompoundStmt 0x55ab223db3a8 <line:410:10, line:412:3>
|     |             `-BinaryOperator 0x55ab223db388 <line:411:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x55ab223db330 <col:5> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x55ab223db370 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x55ab223db350 <col:18> 'int8_t':'char' lvalue Var 0x55ab223d97f0 'side2' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223db738 <line:413:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223db490 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223db720 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55ab223db6f0 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x55ab223db630 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x55ab223db550 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55ab223db520 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55ab223db4f0 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55ab223db4b0 <col:14> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55ab223db538 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55ab223db508 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55ab223db4d0 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55ab223db610 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55ab223db5e0 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55ab223db5b0 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55ab223db570 <col:37> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55ab223db5f8 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55ab223db5c8 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55ab223db590 <col:49> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55ab223db6a8 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55ab223db690 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223db650 <col:57> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55ab223db6d8 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55ab223db6c0 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ab223db670 <col:70> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223dba00 <line:414:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223db758 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223db9e8 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55ab223db9b8 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x55ab223db8f8 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x55ab223db818 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55ab223db7e8 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55ab223db7b8 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55ab223db778 <col:14> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55ab223db800 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55ab223db7d0 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55ab223db798 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55ab223db8d8 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55ab223db8a8 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55ab223db878 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55ab223db838 <col:37> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55ab223db8c0 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55ab223db890 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55ab223db858 <col:49> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55ab223db970 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55ab223db958 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223db918 <col:57> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55ab223db9a0 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55ab223db988 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ab223db938 <col:70> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223dbce8 <line:415:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dba20 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dbcd0 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55ab223dbca0 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x55ab223dbbe0 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x55ab223dbae0 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55ab223dbab0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55ab223dba80 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55ab223dba40 <col:13> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55ab223dbac8 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55ab223dba98 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55ab223dba60 <col:27> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55ab223dbbc0 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55ab223dbb70 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55ab223dbb40 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55ab223dbb00 <col:36> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55ab223dbb88 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55ab223dbb58 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55ab223dbb20 <col:47> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55ab223dbc58 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55ab223dbc40 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223dbc00 <col:55> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55ab223dbc88 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55ab223dbc70 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ab223dbc20 <col:68> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223dbd60 <line:416:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dbd08 <col:3> 'msg_t':'char' lvalue Var 0x55ab223cfc28 'side2_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dbd48 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223dbd28 <col:19> 'int8_t':'char' lvalue Var 0x55ab223d9910 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x55ab223dbd80 <line:417:3>
|-FunctionDecl 0x55ab223dbf00 <line:420:1, line:462:1> line:420:6 used Pendulum_prism_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x55ab223de2d0 <line:421:1, line:462:1>
|   |-DeclStmt 0x55ab223dc018 <line:422:3, col:22>
|   | `-VarDecl 0x55ab223dbfb0 <col:3, col:10> col:10 used active_side 'int8_t':'char'
|   |-DeclStmt 0x55ab223dc0a8 <line:423:3, col:14>
|   | `-VarDecl 0x55ab223dc040 <col:3, col:10> col:10 used tmp 'int8_t':'char'
|   |-DeclStmt 0x55ab223dc138 <line:424:3, col:16>
|   | `-VarDecl 0x55ab223dc0d0 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x55ab223dc1c8 <line:425:3, col:16>
|   | `-VarDecl 0x55ab223dc160 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   `-CompoundStmt 0x55ab223de268 <line:427:3, line:461:1>
|     |-BinaryOperator 0x55ab223dc320 <line:428:3, col:50> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dc1e0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223dc040 'tmp' 'int8_t':'char'
|     | `-CallExpr 0x55ab223dc2f8 <col:9, col:50> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x55ab223dc2e0 <col:9> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55ab223dc200 <col:9> 'int8_t (unsigned char)' Function 0x55ab223d3060 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x55ab223dc258 <col:34, col:49> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55ab223dc220 <col:49> 'int' 0
|     |-BinaryOperator 0x55ab223dc398 <line:429:3, col:17> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dc340 <col:3> 'int8_t':'char' lvalue Var 0x55ab223dbfb0 'active_side' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dc380 <col:17> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223dc360 <col:17> 'int8_t':'char' lvalue Var 0x55ab223dc040 'tmp' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223dc410 <line:430:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dc3b8 <col:3> 'int8_t':'char' lvalue Var 0x55ab223dc0d0 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dc3f8 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223dc3d8 <col:11> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223dc488 <line:431:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dc430 <col:3> 'int8_t':'char' lvalue Var 0x55ab223dc160 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dc470 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223dc450 <col:11> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223dc500 <line:432:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dc4a8 <col:3> 'int8_t':'char' lvalue Var 0x55ab223dc0d0 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dc4e8 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223dc4c8 <col:11> 'int8_t':'char' lvalue Var 0x55ab223cf688 's1p_old' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223dc578 <line:433:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dc520 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf688 's1p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dc560 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223dc540 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55ab223dc5f0 <line:434:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dc598 <col:3> 'int8_t':'char' lvalue Var 0x55ab223dc160 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dc5d8 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223dc5b8 <col:11> 'int8_t':'char' lvalue Var 0x55ab223cf7f0 's2p_old' 'int8_t':'char'
|     |-BinaryOperator 0x55ab223dc668 <line:435:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dc610 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf7f0 's2p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55ab223dc650 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223dc630 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55ab223de160 <line:436:3, line:458:3> has_else
|     | |-BinaryOperator 0x55ab223dc720 <line:436:7, col:22> 'int' '=='
|     | | |-CStyleCastExpr 0x55ab223dc6d8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223dc6c0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223dc688 <col:13> 'int8_t':'char' lvalue Var 0x55ab223dc0d0 'side1' 'int8_t':'char'
|     | | `-IntegerLiteral 0x55ab223dc700 <col:22> 'int' 1
|     | |-CompoundStmt 0x55ab223dc7d8 <col:25, line:438:3>
|     | | `-BinaryOperator 0x55ab223dc7b8 <line:437:5, col:28> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x55ab223dc740 <col:5> 'int8_t':'char' lvalue Var 0x55ab223dbfb0 'active_side' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x55ab223dc790 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x55ab223dc760 <col:28> 'int' 1
|     | `-IfStmt 0x55ab223de138 <line:439:3, line:458:3> has_else
|     |   |-BinaryOperator 0x55ab223dc888 <line:439:7, col:22> 'int' '=='
|     |   | |-CStyleCastExpr 0x55ab223dc840 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55ab223dc828 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55ab223dc7f0 <col:13> 'int8_t':'char' lvalue Var 0x55ab223dc160 'side2' 'int8_t':'char'
|     |   | `-IntegerLiteral 0x55ab223dc868 <col:22> 'int' 1
|     |   |-CompoundStmt 0x55ab223dc940 <col:25, line:441:3>
|     |   | `-BinaryOperator 0x55ab223dc920 <line:440:5, col:28> 'int8_t':'char' '='
|     |   |   |-DeclRefExpr 0x55ab223dc8a8 <col:5> 'int8_t':'char' lvalue Var 0x55ab223dbfb0 'active_side' 'int8_t':'char'
|     |   |   `-CStyleCastExpr 0x55ab223dc8f8 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55ab223dc8c8 <col:28> 'int' 2
|     |   `-IfStmt 0x55ab223de110 <line:442:3, line:458:3> has_else
|     |     |-BinaryOperator 0x55ab223dc9f0 <line:442:7, col:22> 'int' '=='
|     |     | |-CStyleCastExpr 0x55ab223dc9a8 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x55ab223dc990 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x55ab223dc958 <col:13> 'int8_t':'char' lvalue Var 0x55ab223dc0d0 'side1' 'int8_t':'char'
|     |     | `-IntegerLiteral 0x55ab223dc9d0 <col:22> 'int' 0
|     |     |-CompoundStmt 0x55ab223ddca0 <col:25, line:448:3>
|     |     | `-IfStmt 0x55ab223ddc78 <line:443:5, line:447:5> has_else
|     |     |   |-BinaryOperator 0x55ab223dcb00 <line:443:9, col:30> 'int' '=='
|     |     |   | |-CStyleCastExpr 0x55ab223dca60 <col:9, col:15> 'int' <IntegralCast>
|     |     |   | | `-ImplicitCastExpr 0x55ab223dca48 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   | |   `-DeclRefExpr 0x55ab223dca10 <col:15> 'int8_t':'char' lvalue Var 0x55ab223dc160 'side2' 'int8_t':'char'
|     |     |   | `-CStyleCastExpr 0x55ab223dcad8 <col:24, col:30> 'int' <IntegralCast>
|     |     |   |   `-ImplicitCastExpr 0x55ab223dcac0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   |     `-DeclRefExpr 0x55ab223dca88 <col:30> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |     |   |-CompoundStmt 0x55ab223ddbe0 <col:37, line:445:5>
|     |     |   | `-BinaryOperator 0x55ab223dcb98 <line:444:7, col:30> 'int8_t':'char' '='
|     |     |   |   |-DeclRefExpr 0x55ab223dcb20 <col:7> 'int8_t':'char' lvalue Var 0x55ab223dbfb0 'active_side' 'int8_t':'char'
|     |     |   |   `-CStyleCastExpr 0x55ab223dcb70 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |     |   |     `-IntegerLiteral 0x55ab223dcb40 <col:30> 'int' 1
|     |     |   `-CompoundStmt 0x55ab223ddc60 <line:445:12, line:447:5>
|     |     |     `-GotoStmt 0x55ab223ddc48 <line:446:7, col:12> '_L' 0x55ab223ddbf8
|     |     `-LabelStmt 0x55ab223de0f8 <line:449:3, line:458:3> '_L'
|     |       `-IfStmt 0x55ab223de0d0 <line:450:3, line:458:3> has_else
|     |         |-BinaryOperator 0x55ab223ddda8 <line:450:7, col:28> 'int' '=='
|     |         | |-CStyleCastExpr 0x55ab223ddd08 <col:7, col:13> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x55ab223ddcf0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x55ab223ddcb8 <col:13> 'int8_t':'char' lvalue Var 0x55ab223dc0d0 'side1' 'int8_t':'char'
|     |         | `-CStyleCastExpr 0x55ab223ddd80 <col:22, col:28> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x55ab223ddd68 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x55ab223ddd30 <col:28> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|     |         |-CompoundStmt 0x55ab223de008 <col:35, line:456:3>
|     |         | `-IfStmt 0x55ab223ddfe0 <line:451:5, line:455:5> has_else
|     |         |   |-BinaryOperator 0x55ab223dde60 <line:451:9, col:24> 'int' '=='
|     |         |   | |-CStyleCastExpr 0x55ab223dde18 <col:9, col:15> 'int' <IntegralCast>
|     |         |   | | `-ImplicitCastExpr 0x55ab223dde00 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |   | |   `-DeclRefExpr 0x55ab223dddc8 <col:15> 'int8_t':'char' lvalue Var 0x55ab223dc160 'side2' 'int8_t':'char'
|     |         |   | `-IntegerLiteral 0x55ab223dde40 <col:24> 'int' 0
|     |         |   |-CompoundStmt 0x55ab223ddf18 <col:27, line:453:5>
|     |         |   | `-BinaryOperator 0x55ab223ddef8 <line:452:7, col:30> 'int8_t':'char' '='
|     |         |   |   |-DeclRefExpr 0x55ab223dde80 <col:7> 'int8_t':'char' lvalue Var 0x55ab223dbfb0 'active_side' 'int8_t':'char'
|     |         |   |   `-CStyleCastExpr 0x55ab223dded0 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |   |     `-IntegerLiteral 0x55ab223ddea0 <col:30> 'int' 2
|     |         |   `-CompoundStmt 0x55ab223ddfc8 <line:453:12, line:455:5>
|     |         |     `-BinaryOperator 0x55ab223ddfa8 <line:454:7, col:30> 'int8_t':'char' '='
|     |         |       |-DeclRefExpr 0x55ab223ddf30 <col:7> 'int8_t':'char' lvalue Var 0x55ab223dbfb0 'active_side' 'int8_t':'char'
|     |         |       `-CStyleCastExpr 0x55ab223ddf80 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |         `-IntegerLiteral 0x55ab223ddf50 <col:30> 'int' 0
|     |         `-CompoundStmt 0x55ab223de0b8 <line:456:10, line:458:3>
|     |           `-BinaryOperator 0x55ab223de098 <line:457:5, col:28> 'int8_t':'char' '='
|     |             |-DeclRefExpr 0x55ab223de020 <col:5> 'int8_t':'char' lvalue Var 0x55ab223dbfb0 'active_side' 'int8_t':'char'
|     |             `-CStyleCastExpr 0x55ab223de070 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |               `-IntegerLiteral 0x55ab223de040 <col:28> 'int' 0
|     |-CallExpr 0x55ab223de218 <line:459:3, col:40> 'void'
|     | |-ImplicitCastExpr 0x55ab223de200 <col:3> 'void (*)(int8_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55ab223de188 <col:3> 'void (int8_t)' Function 0x55ab223d2cd0 'write_active_side_history' 'void (int8_t)'
|     | `-ImplicitCastExpr 0x55ab223de240 <col:29> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ab223de1a8 <col:29> 'int8_t':'char' lvalue Var 0x55ab223dbfb0 'active_side' 'int8_t':'char'
|     `-ReturnStmt 0x55ab223de258 <line:460:3>
|-VarDecl 0x55ab223de510 <line:463:1, col:210> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x55ab223de6c8 <col:27, col:210> 'void (*[4])(void)'
|   |-UnaryOperator 0x55ab223de598 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55ab223de578 <col:36> 'void (void)' Function 0x55ab223d5d20 'Console_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x55ab223de5d0 <col:72, col:74> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55ab223de5b0 <col:74> 'void (void)' Function 0x55ab223d6870 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x55ab223de608 <col:122, col:124> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55ab223de5e8 <col:124> 'void (void)' Function 0x55ab223d96b0 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   `-UnaryOperator 0x55ab223de640 <col:172, col:174> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x55ab223de620 <col:174> 'void (void)' Function 0x55ab223dbf00 'Pendulum_prism_task_each_pals_period' 'void (void)'
|-FunctionDecl 0x55ab223de7c8 <line:464:1, line:582:1> line:464:5 used check 'int (void)'
| `-CompoundStmt 0x55ab223e42f8 <line:465:1, line:582:1>
|   |-DeclStmt 0x55ab223de8e8 <line:466:3, col:11>
|   | `-VarDecl 0x55ab223de880 <col:3, col:7> col:7 used tmp 'int'
|   |-DeclStmt 0x55ab223de978 <line:467:3, col:17>
|   | `-VarDecl 0x55ab223de910 <col:3, col:9> col:9 used tmp___0 'msg_t':'char'
|   |-DeclStmt 0x55ab223dea08 <line:468:3, col:17>
|   | `-VarDecl 0x55ab223de9a0 <col:3, col:9> col:9 used tmp___1 '_Bool'
|   |-DeclStmt 0x55ab223dea98 <line:469:3, col:17>
|   | `-VarDecl 0x55ab223dea30 <col:3, col:9> col:9 used tmp___2 '_Bool'
|   |-DeclStmt 0x55ab223deb28 <line:470:3, col:17>
|   | `-VarDecl 0x55ab223deac0 <col:3, col:9> col:9 used tmp___3 '_Bool'
|   |-DeclStmt 0x55ab223debb8 <line:471:3, col:17>
|   | `-VarDecl 0x55ab223deb50 <col:3, col:9> col:9 used tmp___4 '_Bool'
|   |-DeclStmt 0x55ab223defd8 <line:472:3, col:18>
|   | `-VarDecl 0x55ab223def70 <col:3, col:10> col:10 used tmp___5 'int8_t':'char'
|   |-DeclStmt 0x55ab223df068 <line:473:3, col:17>
|   | `-VarDecl 0x55ab223df000 <col:3, col:9> col:9 used tmp___6 '_Bool'
|   |-DeclStmt 0x55ab223df0f8 <line:474:3, col:17>
|   | `-VarDecl 0x55ab223df090 <col:3, col:9> col:9 used tmp___7 '_Bool'
|   |-DeclStmt 0x55ab223df188 <line:475:3, col:17>
|   | `-VarDecl 0x55ab223df120 <col:3, col:9> col:9 used tmp___8 '_Bool'
|   |-DeclStmt 0x55ab223df218 <line:476:3, col:18>
|   | `-VarDecl 0x55ab223df1b0 <col:3, col:10> col:10 used tmp___9 'int8_t':'char'
|   |-DeclStmt 0x55ab223df2a8 <line:477:3, col:18>
|   | `-VarDecl 0x55ab223df240 <col:3, col:9> col:9 used tmp___10 '_Bool'
|   |-DeclStmt 0x55ab223df338 <line:478:3, col:18>
|   | `-VarDecl 0x55ab223df2d0 <col:3, col:9> col:9 used tmp___11 '_Bool'
|   |-DeclStmt 0x55ab223df3c8 <line:479:3, col:18>
|   | `-VarDecl 0x55ab223df360 <col:3, col:9> col:9 used tmp___12 '_Bool'
|   |-DeclStmt 0x55ab223df458 <line:480:3, col:18>
|   | `-VarDecl 0x55ab223df3f0 <col:3, col:9> col:9 used tmp___13 'msg_t':'char'
|   |-DeclStmt 0x55ab223df4e8 <line:481:3, col:18>
|   | `-VarDecl 0x55ab223df480 <col:3, col:9> col:9 used tmp___14 '_Bool'
|   |-DeclStmt 0x55ab223df578 <line:482:3, col:18>
|   | `-VarDecl 0x55ab223df510 <col:3, col:9> col:9 used tmp___15 '_Bool'
|   |-DeclStmt 0x55ab223df608 <line:483:3, col:18>
|   | `-VarDecl 0x55ab223df5a0 <col:3, col:9> col:9 used tmp___16 '_Bool'
|   |-DeclStmt 0x55ab223df698 <line:484:3, col:18>
|   | `-VarDecl 0x55ab223df630 <col:3, col:9> col:9 used tmp___17 '_Bool'
|   |-DeclStmt 0x55ab223df728 <line:485:3, col:19>
|   | `-VarDecl 0x55ab223df6c0 <col:3, col:10> col:10 used tmp___18 'int8_t':'char'
|   |-DeclStmt 0x55ab223df7b8 <line:486:3, col:19>
|   | `-VarDecl 0x55ab223df750 <col:3, col:10> col:10 used tmp___19 'int8_t':'char'
|   |-DeclStmt 0x55ab223df848 <line:487:3, col:19>
|   | `-VarDecl 0x55ab223df7e0 <col:3, col:10> col:10 used tmp___20 'int8_t':'char'
|   `-CompoundStmt 0x55ab223e4290 <line:489:3, line:581:1>
|     |-IfStmt 0x55ab223dfa90 <line:490:3, line:497:3> has_else
|     | |-UnaryOperator 0x55ab223df898 <line:490:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55ab223df880 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ab223df860 <col:9> '_Bool' lvalue Var 0x55ab223cfac0 'side1Failed' '_Bool'
|     | |-CompoundStmt 0x55ab223df910 <col:22, line:492:3>
|     | | `-BinaryOperator 0x55ab223df8f0 <line:491:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x55ab223df8b0 <col:5> 'int' lvalue Var 0x55ab223de880 'tmp' 'int'
|     | |   `-IntegerLiteral 0x55ab223df8d0 <col:11> 'int' 1
|     | `-IfStmt 0x55ab223dfa68 <line:493:3, line:497:3> has_else
|     |   |-UnaryOperator 0x55ab223df960 <line:493:7, col:9> 'int' prefix '!' cannot overflow
|     |   | `-ImplicitCastExpr 0x55ab223df948 <col:9> '_Bool' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55ab223df928 <col:9> '_Bool' lvalue Var 0x55ab223cfb38 'side2Failed' '_Bool'
|     |   |-CompoundStmt 0x55ab223df9d8 <col:22, line:495:3>
|     |   | `-BinaryOperator 0x55ab223df9b8 <line:494:5, col:11> 'int' '='
|     |   |   |-DeclRefExpr 0x55ab223df978 <col:5> 'int' lvalue Var 0x55ab223de880 'tmp' 'int'
|     |   |   `-IntegerLiteral 0x55ab223df998 <col:11> 'int' 1
|     |   `-CompoundStmt 0x55ab223dfa50 <line:495:10, line:497:3>
|     |     `-BinaryOperator 0x55ab223dfa30 <line:496:5, col:11> 'int' '='
|     |       |-DeclRefExpr 0x55ab223df9f0 <col:5> 'int' lvalue Var 0x55ab223de880 'tmp' 'int'
|     |       `-IntegerLiteral 0x55ab223dfa10 <col:11> 'int' 0
|     |-CallExpr 0x55ab223dfb98 <line:498:3, col:32> 'void'
|     | |-ImplicitCastExpr 0x55ab223dfb80 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55ab223dfab8 <col:3> 'void (int)' Function 0x55ab223cff00 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x55ab223dfbc0 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x55ab223dfb20 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x55ab223dfb08 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x55ab223dfad8 <col:29> 'int' lvalue Var 0x55ab223de880 'tmp' 'int'
|     |-BinaryOperator 0x55ab223dfcf0 <line:499:3, col:59> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55ab223dfbd8 <col:3> 'msg_t':'char' lvalue Var 0x55ab223de910 'tmp___0' 'msg_t':'char'
|     | `-CallExpr 0x55ab223dfcc8 <col:13, col:59> 'msg_t':'char'
|     |   |-ImplicitCastExpr 0x55ab223dfcb0 <col:13> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55ab223dfbf8 <col:13> 'msg_t (unsigned char)' Function 0x55ab223d3f20 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   `-CStyleCastExpr 0x55ab223dfc50 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55ab223dfc18 <col:58> 'int' 1
|     |-IfStmt 0x55ab223e0c20 <line:500:3, line:528:3>
|     | |-UnaryOperator 0x55ab223dfd48 <line:500:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55ab223dfd30 <col:9> 'msg_t':'char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ab223dfd10 <col:9> 'msg_t':'char' lvalue Var 0x55ab223de910 'tmp___0' 'msg_t':'char'
|     | `-CompoundStmt 0x55ab223e0c00 <col:18, line:528:3>
|     |   |-BinaryOperator 0x55ab223dfe70 <line:501:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x55ab223dfd60 <col:5> '_Bool' lvalue Var 0x55ab223de9a0 'tmp___1' '_Bool'
|     |   | `-CallExpr 0x55ab223dfe48 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x55ab223dfe30 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55ab223dfd80 <col:15> '_Bool (unsigned char)' Function 0x55ab223d0980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x55ab223dfdd8 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55ab223dfda0 <col:56> 'int' 1
|     |   `-IfStmt 0x55ab223e0be8 <line:502:5, line:527:5>
|     |     |-UnaryOperator 0x55ab223dfec8 <line:502:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x55ab223dfeb0 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223dfe90 <col:11> '_Bool' lvalue Var 0x55ab223de9a0 'tmp___1' '_Bool'
|     |     `-CompoundStmt 0x55ab223e0bc8 <col:20, line:527:5>
|     |       |-BinaryOperator 0x55ab223dffe8 <line:503:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x55ab223dfee0 <col:7> '_Bool' lvalue Var 0x55ab223dea30 'tmp___2' '_Bool'
|     |       | `-CallExpr 0x55ab223dffc0 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55ab223dffa8 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55ab223dff00 <col:17> '_Bool (unsigned char)' Function 0x55ab223d0980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55ab223dff80 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55ab223dff20 <col:58> 'int' 0
|     |       `-IfStmt 0x55ab223e0bb0 <line:504:7, line:526:7>
|     |         |-UnaryOperator 0x55ab223e0040 <line:504:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x55ab223e0028 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x55ab223e0008 <col:13> '_Bool' lvalue Var 0x55ab223dea30 'tmp___2' '_Bool'
|     |         `-CompoundStmt 0x55ab223e0b90 <col:22, line:526:7>
|     |           |-BinaryOperator 0x55ab223e0138 <line:505:9, col:61> '_Bool' '='
|     |           | |-DeclRefExpr 0x55ab223e0058 <col:9> '_Bool' lvalue Var 0x55ab223deac0 'tmp___3' '_Bool'
|     |           | `-CallExpr 0x55ab223e0110 <col:19, col:61> '_Bool'
|     |           |   |-ImplicitCastExpr 0x55ab223e00f8 <col:19> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55ab223e0078 <col:19> '_Bool (unsigned char)' Function 0x55ab223d2560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x55ab223e00d0 <col:45, col:60> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x55ab223e0098 <col:60> 'int' 1
|     |           `-IfStmt 0x55ab223e0b78 <line:506:9, line:525:9>
|     |             |-UnaryOperator 0x55ab223e0190 <line:506:13, col:15> 'int' prefix '!' cannot overflow
|     |             | `-ImplicitCastExpr 0x55ab223e0178 <col:15> '_Bool' <LValueToRValue>
|     |             |   `-DeclRefExpr 0x55ab223e0158 <col:15> '_Bool' lvalue Var 0x55ab223deac0 'tmp___3' '_Bool'
|     |             `-CompoundStmt 0x55ab223e0b58 <col:24, line:525:9>
|     |               |-BinaryOperator 0x55ab223e0288 <line:507:11, col:63> '_Bool' '='
|     |               | |-DeclRefExpr 0x55ab223e01a8 <col:11> '_Bool' lvalue Var 0x55ab223deb50 'tmp___4' '_Bool'
|     |               | `-CallExpr 0x55ab223e0260 <col:21, col:63> '_Bool'
|     |               |   |-ImplicitCastExpr 0x55ab223e0248 <col:21> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x55ab223e01c8 <col:21> '_Bool (unsigned char)' Function 0x55ab223d2560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |               |   `-CStyleCastExpr 0x55ab223e0220 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x55ab223e01e8 <col:62> 'int' 0
|     |               `-IfStmt 0x55ab223e0b40 <line:508:11, line:524:11>
|     |                 |-UnaryOperator 0x55ab223e02e0 <line:508:15, col:17> 'int' prefix '!' cannot overflow
|     |                 | `-ImplicitCastExpr 0x55ab223e02c8 <col:17> '_Bool' <LValueToRValue>
|     |                 |   `-DeclRefExpr 0x55ab223e02a8 <col:17> '_Bool' lvalue Var 0x55ab223deb50 'tmp___4' '_Bool'
|     |                 `-CompoundStmt 0x55ab223e0b18 <col:26, line:524:11>
|     |                   |-IfStmt 0x55ab223e0570 <line:509:13, line:513:13>
|     |                   | |-UnaryOperator 0x55ab223e03d0 <line:509:17, col:44> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x55ab223e03b0 <col:19, col:44> 'int'
|     |                   | |   `-BinaryOperator 0x55ab223e0390 <col:20, col:43> 'int' '=='
|     |                   | |     |-CStyleCastExpr 0x55ab223e0348 <col:20, col:26> 'int' <IntegralCast>
|     |                   | |     | `-ImplicitCastExpr 0x55ab223e0330 <col:26> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |     |   `-DeclRefExpr 0x55ab223e02f8 <col:26> 'msg_t':'char' lvalue Var 0x55ab223cfbb0 'side1_written' 'msg_t':'char'
|     |                   | |     `-IntegerLiteral 0x55ab223e0370 <col:43> 'int' 1
|     |                   | `-CompoundStmt 0x55ab223e0558 <col:47, line:513:13>
|     |                   |   `-IfStmt 0x55ab223e0540 <line:510:15, line:512:15>
|     |                   |     |-UnaryOperator 0x55ab223e04c0 <line:510:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x55ab223e04a0 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x55ab223e0480 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x55ab223e0438 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x55ab223e0420 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x55ab223e03e8 <col:28> 'msg_t':'char' lvalue Var 0x55ab223cfbb0 'side1_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x55ab223e0460 <col:45> 'int' 0
|     |                   |     `-CompoundStmt 0x55ab223e0528 <col:49, line:512:15>
|     |                   |       `-ReturnStmt 0x55ab223e0518 <line:511:17, col:26>
|     |                   |         `-ParenExpr 0x55ab223e04f8 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x55ab223e04d8 <col:25> 'int' 0
|     |                   |-IfStmt 0x55ab223e0838 <line:514:13, line:518:13>
|     |                   | |-UnaryOperator 0x55ab223e0698 <line:514:17, col:48> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x55ab223e0678 <col:19, col:48> 'int'
|     |                   | |   `-UnaryOperator 0x55ab223e0660 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                   | |     `-ParenExpr 0x55ab223e0640 <col:22, col:47> 'int'
|     |                   | |       `-BinaryOperator 0x55ab223e0620 <col:23, col:46> 'int' '=='
|     |                   | |         |-CStyleCastExpr 0x55ab223e05d8 <col:23, col:29> 'int' <IntegralCast>
|     |                   | |         | `-ImplicitCastExpr 0x55ab223e05c0 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |         |   `-DeclRefExpr 0x55ab223e0588 <col:29> 'msg_t':'char' lvalue Var 0x55ab223cfbb0 'side1_written' 'msg_t':'char'
|     |                   | |         `-IntegerLiteral 0x55ab223e0600 <col:46> 'int' 0
|     |                   | `-CompoundStmt 0x55ab223e0820 <col:51, line:518:13>
|     |                   |   `-IfStmt 0x55ab223e0808 <line:515:15, line:517:15>
|     |                   |     |-UnaryOperator 0x55ab223e0788 <line:515:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x55ab223e0768 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x55ab223e0748 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x55ab223e0700 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x55ab223e06e8 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x55ab223e06b0 <col:28> 'msg_t':'char' lvalue Var 0x55ab223cfc28 'side2_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x55ab223e0728 <col:45> 'int' 1
|     |                   |     `-CompoundStmt 0x55ab223e07f0 <col:49, line:517:15>
|     |                   |       `-ReturnStmt 0x55ab223e07e0 <line:516:17, col:26>
|     |                   |         `-ParenExpr 0x55ab223e07c0 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x55ab223e07a0 <col:25> 'int' 0
|     |                   `-IfStmt 0x55ab223e0b00 <line:519:13, line:523:13>
|     |                     |-UnaryOperator 0x55ab223e0960 <line:519:17, col:48> 'int' prefix '!' cannot overflow
|     |                     | `-ParenExpr 0x55ab223e0940 <col:19, col:48> 'int'
|     |                     |   `-UnaryOperator 0x55ab223e0928 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                     |     `-ParenExpr 0x55ab223e0908 <col:22, col:47> 'int'
|     |                     |       `-BinaryOperator 0x55ab223e08e8 <col:23, col:46> 'int' '=='
|     |                     |         |-CStyleCastExpr 0x55ab223e08a0 <col:23, col:29> 'int' <IntegralCast>
|     |                     |         | `-ImplicitCastExpr 0x55ab223e0888 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                     |         |   `-DeclRefExpr 0x55ab223e0850 <col:29> 'msg_t':'char' lvalue Var 0x55ab223cfbb0 'side1_written' 'msg_t':'char'
|     |                     |         `-IntegerLiteral 0x55ab223e08c8 <col:46> 'int' 1
|     |                     `-CompoundStmt 0x55ab223e0ae8 <col:51, line:523:13>
|     |                       `-IfStmt 0x55ab223e0ad0 <line:520:15, line:522:15>
|     |                         |-UnaryOperator 0x55ab223e0a50 <line:520:19, col:46> 'int' prefix '!' cannot overflow
|     |                         | `-ParenExpr 0x55ab223e0a30 <col:21, col:46> 'int'
|     |                         |   `-BinaryOperator 0x55ab223e0a10 <col:22, col:45> 'int' '=='
|     |                         |     |-CStyleCastExpr 0x55ab223e09c8 <col:22, col:28> 'int' <IntegralCast>
|     |                         |     | `-ImplicitCastExpr 0x55ab223e09b0 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                         |     |   `-DeclRefExpr 0x55ab223e0978 <col:28> 'msg_t':'char' lvalue Var 0x55ab223cfc28 'side2_written' 'msg_t':'char'
|     |                         |     `-IntegerLiteral 0x55ab223e09f0 <col:45> 'int' 0
|     |                         `-CompoundStmt 0x55ab223e0ab8 <col:49, line:522:15>
|     |                           `-ReturnStmt 0x55ab223e0aa8 <line:521:17, col:26>
|     |                             `-ParenExpr 0x55ab223e0a88 <col:24, col:26> 'int'
|     |                               `-IntegerLiteral 0x55ab223e0a68 <col:25> 'int' 0
|     |-BinaryOperator 0x55ab223e0d18 <line:529:3, col:55> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223e0c38 <col:3> '_Bool' lvalue Var 0x55ab223df090 'tmp___7' '_Bool'
|     | `-CallExpr 0x55ab223e0cf0 <col:13, col:55> '_Bool'
|     |   |-ImplicitCastExpr 0x55ab223e0cd8 <col:13> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55ab223e0c58 <col:13> '_Bool (unsigned char)' Function 0x55ab223d0980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x55ab223e0cb0 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55ab223e0c78 <col:54> 'int' 1
|     |-IfStmt 0x55ab223e2bb0 <line:530:3, line:544:3>
|     | |-ImplicitCastExpr 0x55ab223e0d58 <line:530:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ab223e0d38 <col:7> '_Bool' lvalue Var 0x55ab223df090 'tmp___7' '_Bool'
|     | `-CompoundStmt 0x55ab223e2b90 <col:16, line:544:3>
|     |   |-BinaryOperator 0x55ab223e0e50 <line:531:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x55ab223e0d70 <col:5> '_Bool' lvalue Var 0x55ab223df120 'tmp___8' '_Bool'
|     |   | `-CallExpr 0x55ab223e0e28 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x55ab223e0e10 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55ab223e0d90 <col:15> '_Bool (unsigned char)' Function 0x55ab223d2560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x55ab223e0de8 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55ab223e0db0 <col:56> 'int' 1
|     |   `-IfStmt 0x55ab223e2b78 <line:532:5, line:543:5>
|     |     |-UnaryOperator 0x55ab223e0ea8 <line:532:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x55ab223e0e90 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223e0e70 <col:11> '_Bool' lvalue Var 0x55ab223df120 'tmp___8' '_Bool'
|     |     `-CompoundStmt 0x55ab223e2b48 <col:20, line:543:5>
|     |       |-BinaryOperator 0x55ab223e26c8 <line:533:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x55ab223e0ec0 <col:7> 'int8_t':'char' lvalue Var 0x55ab223def70 'tmp___5' 'int8_t':'char'
|     |       | `-CallExpr 0x55ab223e26a0 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x55ab223e0f60 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55ab223e0ee0 <col:17> 'int8_t (unsigned char)' Function 0x55ab223d3060 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55ab223e0f38 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55ab223e0f00 <col:57> 'int' 0
|     |       |-IfStmt 0x55ab223e2840 <line:534:7, line:536:7>
|     |       | |-UnaryOperator 0x55ab223e27c0 <line:534:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x55ab223e27a0 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x55ab223e2780 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x55ab223e2738 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x55ab223e2720 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x55ab223e26e8 <col:20> 'int8_t':'char' lvalue Var 0x55ab223def70 'tmp___5' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x55ab223e2760 <col:31> 'int' 2
|     |       | `-CompoundStmt 0x55ab223e2828 <col:35, line:536:7>
|     |       |   `-ReturnStmt 0x55ab223e2818 <line:535:9, col:18>
|     |       |     `-ParenExpr 0x55ab223e27f8 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x55ab223e27d8 <col:17> 'int' 0
|     |       |-BinaryOperator 0x55ab223e2938 <line:537:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x55ab223e2858 <col:7> '_Bool' lvalue Var 0x55ab223df000 'tmp___6' '_Bool'
|     |       | `-CallExpr 0x55ab223e2910 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55ab223e28f8 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55ab223e2878 <col:17> '_Bool (unsigned char)' Function 0x55ab223d2560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55ab223e28d0 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55ab223e2898 <col:58> 'int' 0
|     |       `-IfStmt 0x55ab223e2b30 <line:538:7, line:542:7>
|     |         |-UnaryOperator 0x55ab223e2990 <line:538:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x55ab223e2978 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x55ab223e2958 <col:13> '_Bool' lvalue Var 0x55ab223df000 'tmp___6' '_Bool'
|     |         `-CompoundStmt 0x55ab223e2b18 <col:22, line:542:7>
|     |           `-IfStmt 0x55ab223e2b00 <line:539:9, line:541:9>
|     |             |-UnaryOperator 0x55ab223e2a80 <line:539:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x55ab223e2a60 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x55ab223e2a40 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x55ab223e29f8 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x55ab223e29e0 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x55ab223e29a8 <col:22> 'msg_t':'char' lvalue Var 0x55ab223cfc28 'side2_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x55ab223e2a20 <col:39> 'int' 1
|     |             `-CompoundStmt 0x55ab223e2ae8 <col:43, line:541:9>
|     |               `-ReturnStmt 0x55ab223e2ad8 <line:540:11, col:20>
|     |                 `-ParenExpr 0x55ab223e2ab8 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x55ab223e2a98 <col:19> 'int' 0
|     |-BinaryOperator 0x55ab223e2ca8 <line:545:3, col:56> '_Bool' '='
|     | |-DeclRefExpr 0x55ab223e2bc8 <col:3> '_Bool' lvalue Var 0x55ab223df2d0 'tmp___11' '_Bool'
|     | `-CallExpr 0x55ab223e2c80 <col:14, col:56> '_Bool'
|     |   |-ImplicitCastExpr 0x55ab223e2c68 <col:14> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55ab223e2be8 <col:14> '_Bool (unsigned char)' Function 0x55ab223d0980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x55ab223e2c40 <col:40, col:55> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55ab223e2c08 <col:55> 'int' 1
|     |-IfStmt 0x55ab223e3418 <line:546:3, line:560:3>
|     | |-UnaryOperator 0x55ab223e2d00 <line:546:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55ab223e2ce8 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ab223e2cc8 <col:9> '_Bool' lvalue Var 0x55ab223df2d0 'tmp___11' '_Bool'
|     | `-CompoundStmt 0x55ab223e33f8 <col:19, line:560:3>
|     |   |-BinaryOperator 0x55ab223e2df8 <line:547:5, col:58> '_Bool' '='
|     |   | |-DeclRefExpr 0x55ab223e2d18 <col:5> '_Bool' lvalue Var 0x55ab223df360 'tmp___12' '_Bool'
|     |   | `-CallExpr 0x55ab223e2dd0 <col:16, col:58> '_Bool'
|     |   |   |-ImplicitCastExpr 0x55ab223e2db8 <col:16> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55ab223e2d38 <col:16> '_Bool (unsigned char)' Function 0x55ab223d2560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x55ab223e2d90 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55ab223e2d58 <col:57> 'int' 1
|     |   `-IfStmt 0x55ab223e33e0 <line:548:5, line:559:5>
|     |     |-ImplicitCastExpr 0x55ab223e2e38 <line:548:9> '_Bool' <LValueToRValue>
|     |     | `-DeclRefExpr 0x55ab223e2e18 <col:9> '_Bool' lvalue Var 0x55ab223df360 'tmp___12' '_Bool'
|     |     `-CompoundStmt 0x55ab223e33b0 <col:19, line:559:5>
|     |       |-BinaryOperator 0x55ab223e2f30 <line:549:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x55ab223e2e50 <col:7> 'int8_t':'char' lvalue Var 0x55ab223df1b0 'tmp___9' 'int8_t':'char'
|     |       | `-CallExpr 0x55ab223e2f08 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x55ab223e2ef0 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55ab223e2e70 <col:17> 'int8_t (unsigned char)' Function 0x55ab223d3060 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55ab223e2ec8 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55ab223e2e90 <col:57> 'int' 0
|     |       |-IfStmt 0x55ab223e30a8 <line:550:7, line:552:7>
|     |       | |-UnaryOperator 0x55ab223e3028 <line:550:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x55ab223e3008 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x55ab223e2fe8 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x55ab223e2fa0 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x55ab223e2f88 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x55ab223e2f50 <col:20> 'int8_t':'char' lvalue Var 0x55ab223df1b0 'tmp___9' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x55ab223e2fc8 <col:31> 'int' 1
|     |       | `-CompoundStmt 0x55ab223e3090 <col:35, line:552:7>
|     |       |   `-ReturnStmt 0x55ab223e3080 <line:551:9, col:18>
|     |       |     `-ParenExpr 0x55ab223e3060 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x55ab223e3040 <col:17> 'int' 0
|     |       |-BinaryOperator 0x55ab223e31a0 <line:553:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x55ab223e30c0 <col:7> '_Bool' lvalue Var 0x55ab223df240 'tmp___10' '_Bool'
|     |       | `-CallExpr 0x55ab223e3178 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55ab223e3160 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55ab223e30e0 <col:18> '_Bool (unsigned char)' Function 0x55ab223d0980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55ab223e3138 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55ab223e3100 <col:59> 'int' 0
|     |       `-IfStmt 0x55ab223e3398 <line:554:7, line:558:7>
|     |         |-UnaryOperator 0x55ab223e31f8 <line:554:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x55ab223e31e0 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x55ab223e31c0 <col:13> '_Bool' lvalue Var 0x55ab223df240 'tmp___10' '_Bool'
|     |         `-CompoundStmt 0x55ab223e3380 <col:23, line:558:7>
|     |           `-IfStmt 0x55ab223e3368 <line:555:9, line:557:9>
|     |             |-UnaryOperator 0x55ab223e32e8 <line:555:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x55ab223e32c8 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x55ab223e32a8 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x55ab223e3260 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x55ab223e3248 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x55ab223e3210 <col:22> 'msg_t':'char' lvalue Var 0x55ab223cfbb0 'side1_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x55ab223e3288 <col:39> 'int' 1
|     |             `-CompoundStmt 0x55ab223e3350 <col:43, line:557:9>
|     |               `-ReturnStmt 0x55ab223e3340 <line:556:11, col:20>
|     |                 `-ParenExpr 0x55ab223e3320 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x55ab223e3300 <col:19> 'int' 0
|     |-BinaryOperator 0x55ab223e3510 <line:561:3, col:55> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55ab223e3430 <col:3> 'int8_t':'char' lvalue Var 0x55ab223df7e0 'tmp___20' 'int8_t':'char'
|     | `-CallExpr 0x55ab223e34e8 <col:14, col:55> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x55ab223e34d0 <col:14> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55ab223e3450 <col:14> 'int8_t (unsigned char)' Function 0x55ab223d3060 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x55ab223e34a8 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55ab223e3470 <col:54> 'int' 2
|     |-IfStmt 0x55ab223e4228 <line:562:3, line:579:3>
|     | |-BinaryOperator 0x55ab223e35e0 <line:562:7, col:25> 'int' '>'
|     | | |-CStyleCastExpr 0x55ab223e3580 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55ab223e3568 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55ab223e3530 <col:13> 'int8_t':'char' lvalue Var 0x55ab223df7e0 'tmp___20' 'int8_t':'char'
|     | | `-UnaryOperator 0x55ab223e35c8 <col:24, col:25> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55ab223e35a8 <col:25> 'int' 2
|     | `-CompoundStmt 0x55ab223e4208 <col:28, line:579:3>
|     |   |-BinaryOperator 0x55ab223e36f0 <line:563:5, col:62> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x55ab223e3600 <col:5> 'msg_t':'char' lvalue Var 0x55ab223df3f0 'tmp___13' 'msg_t':'char'
|     |   | `-CallExpr 0x55ab223e36c8 <col:16, col:62> 'msg_t':'char'
|     |   |   |-ImplicitCastExpr 0x55ab223e36b0 <col:16> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55ab223e3620 <col:16> 'msg_t (unsigned char)' Function 0x55ab223d3f20 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   |   `-CStyleCastExpr 0x55ab223e3678 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55ab223e3640 <col:61> 'int' 2
|     |   `-IfStmt 0x55ab223e41f0 <line:564:5, line:578:5>
|     |     |-UnaryOperator 0x55ab223e3748 <line:564:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x55ab223e3730 <col:11> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55ab223e3710 <col:11> 'msg_t':'char' lvalue Var 0x55ab223df3f0 'tmp___13' 'msg_t':'char'
|     |     `-CompoundStmt 0x55ab223e41c8 <col:21, line:578:5>
|     |       |-BinaryOperator 0x55ab223e3840 <line:565:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x55ab223e3760 <col:7> '_Bool' lvalue Var 0x55ab223df480 'tmp___14' '_Bool'
|     |       | `-CallExpr 0x55ab223e3818 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55ab223e3800 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55ab223e3780 <col:18> '_Bool (unsigned char)' Function 0x55ab223d0980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55ab223e37d8 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55ab223e37a0 <col:59> 'int' 2
|     |       |-BinaryOperator 0x55ab223e3940 <line:566:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x55ab223e3860 <col:7> '_Bool' lvalue Var 0x55ab223df510 'tmp___15' '_Bool'
|     |       | `-CallExpr 0x55ab223e3918 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55ab223e3900 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55ab223e3880 <col:18> '_Bool (unsigned char)' Function 0x55ab223d0980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55ab223e38d8 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55ab223e38a0 <col:59> 'int' 1
|     |       `-IfStmt 0x55ab223e41b0 <line:567:7, line:577:7>
|     |         |-BinaryOperator 0x55ab223e3a50 <line:567:11, col:35> 'int' '=='
|     |         | |-CStyleCastExpr 0x55ab223e39b0 <col:11, col:17> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x55ab223e3998 <col:17> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x55ab223e3960 <col:17> '_Bool' lvalue Var 0x55ab223df480 'tmp___14' '_Bool'
|     |         | `-CStyleCastExpr 0x55ab223e3a28 <col:29, col:35> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x55ab223e3a10 <col:35> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x55ab223e39d8 <col:35> '_Bool' lvalue Var 0x55ab223df510 'tmp___15' '_Bool'
|     |         `-CompoundStmt 0x55ab223e4188 <col:45, line:577:7>
|     |           |-BinaryOperator 0x55ab223e3b50 <line:568:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x55ab223e3a70 <col:9> '_Bool' lvalue Var 0x55ab223df5a0 'tmp___16' '_Bool'
|     |           | `-CallExpr 0x55ab223e3b28 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x55ab223e3b10 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55ab223e3a90 <col:20> '_Bool (unsigned char)' Function 0x55ab223d2560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x55ab223e3ae8 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x55ab223e3ab0 <col:61> 'int' 2
|     |           |-BinaryOperator 0x55ab223e3c50 <line:569:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x55ab223e3b70 <col:9> '_Bool' lvalue Var 0x55ab223df630 'tmp___17' '_Bool'
|     |           | `-CallExpr 0x55ab223e3c28 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x55ab223e3c10 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55ab223e3b90 <col:20> '_Bool (unsigned char)' Function 0x55ab223d2560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x55ab223e3be8 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x55ab223e3bb0 <col:61> 'int' 1
|     |           `-IfStmt 0x55ab223e4170 <line:570:9, line:576:9>
|     |             |-BinaryOperator 0x55ab223e3d60 <line:570:13, col:37> 'int' '=='
|     |             | |-CStyleCastExpr 0x55ab223e3cc0 <col:13, col:19> 'int' <IntegralCast>
|     |             | | `-ImplicitCastExpr 0x55ab223e3ca8 <col:19> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             | |   `-DeclRefExpr 0x55ab223e3c70 <col:19> '_Bool' lvalue Var 0x55ab223df5a0 'tmp___16' '_Bool'
|     |             | `-CStyleCastExpr 0x55ab223e3d38 <col:31, col:37> 'int' <IntegralCast>
|     |             |   `-ImplicitCastExpr 0x55ab223e3d20 <col:37> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             |     `-DeclRefExpr 0x55ab223e3ce8 <col:37> '_Bool' lvalue Var 0x55ab223df630 'tmp___17' '_Bool'
|     |             `-CompoundStmt 0x55ab223e4148 <col:47, line:576:9>
|     |               |-BinaryOperator 0x55ab223e3e60 <line:571:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x55ab223e3d80 <col:11> 'int8_t':'char' lvalue Var 0x55ab223df6c0 'tmp___18' 'int8_t':'char'
|     |               | `-CallExpr 0x55ab223e3e38 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x55ab223e3e20 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x55ab223e3da0 <col:22> 'int8_t (unsigned char)' Function 0x55ab223d3060 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x55ab223e3df8 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x55ab223e3dc0 <col:62> 'int' 1
|     |               |-BinaryOperator 0x55ab223e3f60 <line:572:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x55ab223e3e80 <col:11> 'int8_t':'char' lvalue Var 0x55ab223df750 'tmp___19' 'int8_t':'char'
|     |               | `-CallExpr 0x55ab223e3f38 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x55ab223e3f20 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x55ab223e3ea0 <col:22> 'int8_t (unsigned char)' Function 0x55ab223d3060 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x55ab223e3ef8 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x55ab223e3ec0 <col:62> 'int' 0
|     |               `-IfStmt 0x55ab223e4130 <line:573:11, line:575:11>
|     |                 |-UnaryOperator 0x55ab223e40b0 <line:573:15, col:50> 'int' prefix '!' cannot overflow
|     |                 | `-ParenExpr 0x55ab223e4090 <col:17, col:50> 'int'
|     |                 |   `-BinaryOperator 0x55ab223e4070 <col:18, col:42> 'int' '=='
|     |                 |     |-CStyleCastExpr 0x55ab223e3fd0 <col:18, col:24> 'int' <IntegralCast>
|     |                 |     | `-ImplicitCastExpr 0x55ab223e3fb8 <col:24> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |     |   `-DeclRefExpr 0x55ab223e3f80 <col:24> 'int8_t':'char' lvalue Var 0x55ab223df6c0 'tmp___18' 'int8_t':'char'
|     |                 |     `-CStyleCastExpr 0x55ab223e4048 <col:36, col:42> 'int' <IntegralCast>
|     |                 |       `-ImplicitCastExpr 0x55ab223e4030 <col:42> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |         `-DeclRefExpr 0x55ab223e3ff8 <col:42> 'int8_t':'char' lvalue Var 0x55ab223df750 'tmp___19' 'int8_t':'char'
|     |                 `-CompoundStmt 0x55ab223e4118 <col:53, line:575:11>
|     |                   `-ReturnStmt 0x55ab223e4108 <line:574:13, col:22>
|     |                     `-ParenExpr 0x55ab223e40e8 <col:20, col:22> 'int'
|     |                       `-IntegerLiteral 0x55ab223e40c8 <col:21> 'int' 0
|     `-ReturnStmt 0x55ab223e4280 <line:580:3, col:12>
|       `-ParenExpr 0x55ab223e4260 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x55ab223e4240 <col:11> 'int' 1
|-FunctionDecl 0x55ab223e4460 <line:583:1, line:653:1> line:583:5 main 'int (void)'
| `-CompoundStmt 0x55ab223e67a0 <line:584:1, line:653:1>
|   |-DeclStmt 0x55ab223e45b0 <line:585:3, col:10>
|   | `-VarDecl 0x55ab223e4548 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x55ab223e4648 <line:586:3, col:10>
|   | `-VarDecl 0x55ab223e45e0 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x55ab223e6638 <line:588:3, line:651:1>
|   | |-BinaryOperator 0x55ab223e46c0 <line:589:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55ab223e4660 <col:3> 'int' lvalue Var 0x55ab223e4548 'c1' 'int'
|   | | `-IntegerLiteral 0x55ab223e4680 <col:8> 'int' 0
|   | |-BinaryOperator 0x55ab223e4758 <line:590:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x55ab223e46e0 <col:3> '_Bool' lvalue Var 0x55ab223cfac0 'side1Failed' '_Bool'
|   | | `-CallExpr 0x55ab223e4738 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x55ab223e4720 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4700 <col:17> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55ab223e47f0 <line:591:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x55ab223e4778 <col:3> '_Bool' lvalue Var 0x55ab223cfb38 'side2Failed' '_Bool'
|   | | `-CallExpr 0x55ab223e47d0 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x55ab223e47b8 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4798 <col:17> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55ab223e4888 <line:592:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e4810 <col:3> 'msg_t':'char' lvalue Var 0x55ab223cfbb0 'side1_written' 'msg_t':'char'
|   | | `-CallExpr 0x55ab223e4868 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x55ab223e4850 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4830 <col:19> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55ab223e4920 <line:593:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e48a8 <col:3> 'msg_t':'char' lvalue Var 0x55ab223cfc28 'side2_written' 'msg_t':'char'
|   | | `-CallExpr 0x55ab223e4900 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x55ab223e48e8 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e48c8 <col:19> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55ab223e49b8 <line:594:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55ab223e4940 <col:3> '_Bool' lvalue Var 0x55ab223cffb8 'side1Failed_History_0' '_Bool'
|   | | `-CallExpr 0x55ab223e4998 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55ab223e4980 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4960 <col:27> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55ab223e4a50 <line:595:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55ab223e49d8 <col:3> '_Bool' lvalue Var 0x55ab223d0080 'side1Failed_History_1' '_Bool'
|   | | `-CallExpr 0x55ab223e4a30 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55ab223e4a18 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e49f8 <col:27> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55ab223e4ae8 <line:596:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55ab223e4a70 <col:3> '_Bool' lvalue Var 0x55ab223d00f8 'side1Failed_History_2' '_Bool'
|   | | `-CallExpr 0x55ab223e4ac8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55ab223e4ab0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4a90 <col:27> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55ab223e4b80 <line:597:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55ab223e4b08 <col:3> '_Bool' lvalue Var 0x55ab223d0170 'side2Failed_History_0' '_Bool'
|   | | `-CallExpr 0x55ab223e4b60 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55ab223e4b48 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4b28 <col:27> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55ab223e4c18 <line:598:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55ab223e4ba0 <col:3> '_Bool' lvalue Var 0x55ab223d01e8 'side2Failed_History_1' '_Bool'
|   | | `-CallExpr 0x55ab223e4bf8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55ab223e4be0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4bc0 <col:27> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55ab223e4cb0 <line:599:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55ab223e4c38 <col:3> '_Bool' lvalue Var 0x55ab223d0260 'side2Failed_History_2' '_Bool'
|   | | `-CallExpr 0x55ab223e4c90 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55ab223e4c78 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4c58 <col:27> '_Bool (void)' Function 0x55ab223cf920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55ab223e4d48 <line:600:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e4cd0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d02d8 'active_side_History_0' 'int8_t':'char'
|   | | `-CallExpr 0x55ab223e4d28 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x55ab223e4d10 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4cf0 <col:27> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55ab223e4de0 <line:601:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e4d68 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d0350 'active_side_History_1' 'int8_t':'char'
|   | | `-CallExpr 0x55ab223e4dc0 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x55ab223e4da8 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4d88 <col:27> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55ab223e4e78 <line:602:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e4e00 <col:3> 'int8_t':'char' lvalue Var 0x55ab223d03c8 'active_side_History_2' 'int8_t':'char'
|   | | `-CallExpr 0x55ab223e4e58 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x55ab223e4e40 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4e20 <col:27> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55ab223e4f10 <line:603:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e4e98 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d0440 'manual_selection_History_0' 'msg_t':'char'
|   | | `-CallExpr 0x55ab223e4ef0 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x55ab223e4ed8 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4eb8 <col:32> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55ab223e4fa8 <line:604:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e4f30 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d04b8 'manual_selection_History_1' 'msg_t':'char'
|   | | `-CallExpr 0x55ab223e4f88 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x55ab223e4f70 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4f50 <col:32> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55ab223e5040 <line:605:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e4fc8 <col:3> 'msg_t':'char' lvalue Var 0x55ab223d0530 'manual_selection_History_2' 'msg_t':'char'
|   | | `-CallExpr 0x55ab223e5020 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x55ab223e5008 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e4fe8 <col:32> 'char (void)' Function 0x55ab223cfa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55ab223e5108 <line:606:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x55ab223e5060 <col:3> 'int' lvalue Var 0x55ab223e45e0 'i2' 'int'
|   | | `-CallExpr 0x55ab223e50e8 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x55ab223e50d0 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55ab223e5080 <col:8> 'int (void)' Function 0x55ab223d46b8 'init' 'int (void)'
|   | |-CallExpr 0x55ab223e5180 <line:607:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x55ab223e5168 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55ab223e5128 <col:3> 'void (int)' Function 0x55ab223cff00 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x55ab223e51a8 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5148 <col:21> 'int' lvalue Var 0x55ab223e45e0 'i2' 'int'
|   | |-BinaryOperator 0x55ab223e5218 <line:608:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e51c0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223a80b0 'cs1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5200 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e51e0 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5290 <line:609:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5238 <col:3> 'int8_t':'char' lvalue Var 0x55ab223a8128 'cs1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5278 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5258 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5308 <line:610:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e52b0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223a8218 'cs2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e52f0 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e52d0 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5380 <line:611:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5328 <col:3> 'int8_t':'char' lvalue Var 0x55ab223a8290 'cs2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5368 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5348 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e53f8 <line:612:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e53a0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf0e8 's1s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e53e0 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e53c0 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5470 <line:613:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5418 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5458 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5438 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e54e8 <line:614:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5490 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf250 's1s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e54d0 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e54b0 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5560 <line:615:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5508 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5548 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5528 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e55d8 <line:616:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5580 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf3b8 's2s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e55c0 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e55a0 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5650 <line:617:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e55f8 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5638 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5618 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5828 <line:618:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5670 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf520 's2s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5810 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5690 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e58a0 <line:619:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5848 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5888 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5868 <col:14> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5918 <line:620:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e58c0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf688 's1p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5900 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e58e0 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5990 <line:621:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5938 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5978 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5958 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5a08 <line:622:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e59b0 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf7f0 's2p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e59f0 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e59d0 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5a80 <line:623:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55ab223e5a28 <col:3> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55ab223e5a68 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ab223e5a48 <col:13> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55ab223e5ae0 <line:624:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55ab223e5aa0 <col:3> 'int' lvalue Var 0x55ab223e45e0 'i2' 'int'
|   | | `-IntegerLiteral 0x55ab223e5ac0 <col:8> 'int' 0
|   | `-WhileStmt 0x55ab223e6620 <line:625:3, line:650:3>
|   |   |-IntegerLiteral 0x55ab223e5b00 <line:625:10> 'int' 1
|   |   `-CompoundStmt 0x55ab223e6608 <col:13, line:650:3>
|   |     `-CompoundStmt 0x55ab223e6548 <line:626:5, line:649:5>
|   |       |-CallExpr 0x55ab223e5b58 <line:627:5, col:35> 'void'
|   |       | `-ImplicitCastExpr 0x55ab223e5b40 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55ab223e5b20 <col:5> 'void (void)' Function 0x55ab223d5d20 'Console_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55ab223e5bb0 <line:628:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x55ab223e5b98 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55ab223e5b78 <col:5> 'void (void)' Function 0x55ab223d6870 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55ab223e5c08 <line:629:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x55ab223e5bf0 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55ab223e5bd0 <col:5> 'void (void)' Function 0x55ab223d96b0 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55ab223e5c60 <line:630:5, col:42> 'void'
|   |       | `-ImplicitCastExpr 0x55ab223e5c48 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55ab223e5c28 <col:5> 'void (void)' Function 0x55ab223dbf00 'Pendulum_prism_task_each_pals_period' 'void (void)'
|   |       |-BinaryOperator 0x55ab223e5cd8 <line:631:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e5c80 <col:5> 'int8_t':'char' lvalue Var 0x55ab223a80b0 'cs1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e5cc0 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e5ca0 <col:15> 'int8_t':'char' lvalue Var 0x55ab223a8128 'cs1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55ab223e5d50 <line:632:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e5cf8 <col:5> 'int8_t':'char' lvalue Var 0x55ab223a8128 'cs1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e5d38 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e5d18 <col:15> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55ab223e5dc8 <line:633:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e5d70 <col:5> 'int8_t':'char' lvalue Var 0x55ab223a8218 'cs2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e5db0 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e5d90 <col:15> 'int8_t':'char' lvalue Var 0x55ab223a8290 'cs2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55ab223e5e40 <line:634:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e5de8 <col:5> 'int8_t':'char' lvalue Var 0x55ab223a8290 'cs2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e5e28 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e5e08 <col:15> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55ab223e5eb8 <line:635:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e5e60 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf0e8 's1s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e5ea0 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e5e80 <col:16> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55ab223e5f30 <line:636:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e5ed8 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf160 's1s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e5f18 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e5ef8 <col:16> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55ab223e5fa8 <line:637:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e5f50 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf250 's1s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e5f90 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e5f70 <col:16> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55ab223e6020 <line:638:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e5fc8 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf2c8 's1s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e6008 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e5fe8 <col:16> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55ab223e6098 <line:639:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e6040 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf3b8 's2s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e6080 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e6060 <col:16> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55ab223e6110 <line:640:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e60b8 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf430 's2s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e60f8 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e60d8 <col:16> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55ab223e6188 <line:641:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e6130 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf520 's2s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e6170 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e6150 <col:16> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55ab223e6200 <line:642:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e61a8 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf598 's2s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e61e8 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e61c8 <col:16> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55ab223e6278 <line:643:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e6220 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf688 's1p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e6260 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e6240 <col:15> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55ab223e62f0 <line:644:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e6298 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf700 's1p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e62d8 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e62b8 <col:15> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55ab223e6368 <line:645:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e6310 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf7f0 's2p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e6350 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e6330 <col:15> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55ab223e63e0 <line:646:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55ab223e6388 <col:5> 'int8_t':'char' lvalue Var 0x55ab223cf868 's2p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55ab223e63c8 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55ab223e63a8 <col:15> 'msg_t':'char' lvalue Var 0x55ab223a7f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55ab223e6478 <line:647:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x55ab223e6400 <col:5> 'int' lvalue Var 0x55ab223e4548 'c1' 'int'
|   |       | `-CallExpr 0x55ab223e6458 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x55ab223e6440 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x55ab223e6420 <col:10> 'int (void)' Function 0x55ab223de7c8 'check' 'int (void)'
|   |       `-CallExpr 0x55ab223e64f0 <line:648:5, col:14> 'void'
|   |         |-ImplicitCastExpr 0x55ab223e64d8 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x55ab223e6498 <col:5> 'void (_Bool)' Function 0x55ab223cfd70 'assert' 'void (_Bool)'
|   |         `-ImplicitCastExpr 0x55ab223e6530 <col:12> '_Bool' <IntegralToBoolean>
|   |           `-ImplicitCastExpr 0x55ab223e6518 <col:12> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55ab223e64b8 <col:12> 'int' lvalue Var 0x55ab223e4548 'c1' 'int'
|   `-ReturnStmt 0x55ab223e6790 <line:652:1, col:8>
|     `-IntegerLiteral 0x55ab223e6770 <col:8> 'int' 0
`-FunctionDecl 0x55ab223e6ac0 prev 0x55ab223cfd70 <line:654:1, line:665:1> line:654:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x55ab223e6a30 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x55ab223e6d10 <line:655:1, line:665:1>
    `-CompoundStmt 0x55ab223e6cf8 <line:658:3, line:664:1>
      `-IfStmt 0x55ab223e6ce0 <line:659:3, line:663:3>
        |-UnaryOperator 0x55ab223e6ba0 <line:659:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x55ab223e6b88 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x55ab223e6b68 <col:9> '_Bool' lvalue ParmVar 0x55ab223e6a30 'arg' '_Bool'
        `-CompoundStmt 0x55ab223e6cc8 <col:14, line:663:3>
          `-CompoundStmt 0x55ab223e6cb0 <line:660:5, line:662:5>
            `-LabelStmt 0x55ab223e6c98 <line:661:5, col:29> 'ERROR'
              `-CallExpr 0x55ab223e6c28 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x55ab223e6c10 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x55ab223e6bb8 <col:12> 'void () __attribute__((noreturn))' Function 0x55ab223a7440 '__VERIFIER_error' 'void () __attribute__((noreturn))'
