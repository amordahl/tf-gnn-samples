TranslationUnitDecl 0x55b0818e16c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55b0818e1f88 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55b0818e1c60 '__int128'
|-TypedefDecl 0x55b0818e1ff8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55b0818e1c80 'unsigned __int128'
|-TypedefDecl 0x55b0818e2300 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55b0818e20d0 'struct __NSConstantString_tag'
|   `-Record 0x55b0818e2050 '__NSConstantString_tag'
|-TypedefDecl 0x55b0818e23a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55b0818e2360 'char *'
|   `-BuiltinType 0x55b0818e1760 'char'
|-TypedefDecl 0x55b081921360 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55b0818e2640 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55b0818e2480 'struct __va_list_tag'
|     `-Record 0x55b0818e2400 '__va_list_tag'
|-FunctionDecl 0x55b081921440 <seq-mthreaded/pals_STARTPALS_ActiveStandby_false-unreach-call.5.ufo.BOUNDED-10.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55b081921620 <line:61:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
| `-FullComment 0x55b081961630 <line:3:4, line:56:69>
|   |-ParagraphComment 0x55b081960c60 <line:3:4, col:71>
|   | `-TextComment 0x55b081960c30 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x55b081960cb0 <line:5:1, col:67>
|   | `-TextComment 0x55b081960c80 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x55b081960d50 <line:7:1, line:9:4>
|   | |-TextComment 0x55b081960cd0 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x55b081960cf0 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x55b081960d10 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x55b081960df0 <line:11:1, line:13:12>
|   | |-TextComment 0x55b081960d70 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x55b081960d90 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x55b081960db0 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x55b081960e90 <line:15:1, line:17:68>
|   | |-TextComment 0x55b081960e10 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x55b081960e30 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x55b081960e50 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x55b081960f80 <line:19:1, line:23:10>
|   | |-TextComment 0x55b081960eb0 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x55b081960ed0 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x55b081960ef0 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x55b081960f10 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x55b081960f30 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55b081960fa0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55b081961000 <col:15, col:23>
|   |   `-TextComment 0x55b081960fd0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55b0819610a0 <line:25:1, line:27:10>
|   | |-TextComment 0x55b081961020 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x55b081961040 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x55b081961060 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55b0819610c0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55b081961120 <col:15, col:23>
|   |   `-TextComment 0x55b0819610f0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55b081961190 <line:29:1, line:30:15>
|   | |-TextComment 0x55b081961140 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x55b081961160 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x55b081961280 <line:32:1, line:36:7>
|   | |-TextComment 0x55b0819611b0 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x55b0819611d0 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x55b0819611f0 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x55b081961210 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x55b081961230 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x55b081961320 <line:38:1, line:40:61>
|   | |-TextComment 0x55b0819612a0 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x55b0819612c0 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x55b0819612e0 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x55b081961480 <line:42:1, line:49:37>
|   | |-TextComment 0x55b081961340 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x55b081961360 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x55b081961380 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x55b0819613a0 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x55b0819613c0 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x55b0819613e0 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x55b081961400 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x55b081961420 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x55b0819614f0 <line:51:1, line:52:13>
|   | |-TextComment 0x55b0819614a0 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x55b0819614c0 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x55b081961540 <line:54:1, col:10>
|   | `-TextComment 0x55b081961510 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x55b081961590 <line:56:2, col:69>
|     `-TextComment 0x55b081961560 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x55b081921758 prev 0x55b081921620 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x55b0819218c0 <line:63:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
|-TypedefDecl 0x55b081921970 <line:64:1, col:14> col:14 referenced int8_t 'char'
| `-BuiltinType 0x55b0818e1760 'char'
|-TypedefDecl 0x55b081921a08 <line:65:1, col:16> col:16 referenced msg_t 'int8_t':'char'
| `-TypedefType 0x55b0819219d0 'int8_t' sugar
|   |-Typedef 0x55b081921970 'int8_t'
|   `-BuiltinType 0x55b0818e1760 'char'
|-TypedefDecl 0x55b081921a78 <line:66:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x55b0818e17c0 'int'
|-FunctionDecl 0x55b081921cc0 <line:67:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55b081921b08 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x55b081921ba8 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x55b081921e90 <line:68:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55b081921d80 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x55b081921df8 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x55b081921f50 <line:69:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x55b081922000 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x55b081921fd8 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x55b081921fb8 <col:28> 'int' 1
|-VarDecl 0x55b081922038 <line:70:1, col:8> col:8 cs1 'port_t':'int'
|-VarDecl 0x55b0819220b0 <line:71:1, col:8> col:8 used cs1_old 'int8_t':'char'
|-VarDecl 0x55b081922128 <line:72:1, col:8> col:8 used cs1_new 'int8_t':'char'
|-VarDecl 0x55b0819221a0 <line:73:1, col:8> col:8 cs2 'port_t':'int'
|-VarDecl 0x55b081922218 <line:74:1, col:8> col:8 used cs2_old 'int8_t':'char'
|-VarDecl 0x55b081922290 <line:75:1, col:8> col:8 used cs2_new 'int8_t':'char'
|-VarDecl 0x55b081949070 <line:76:1, col:8> col:8 s1s2 'port_t':'int'
|-VarDecl 0x55b0819490e8 <line:77:1, col:8> col:8 used s1s2_old 'int8_t':'char'
|-VarDecl 0x55b081949160 <line:78:1, col:8> col:8 used s1s2_new 'int8_t':'char'
|-VarDecl 0x55b0819491d8 <line:79:1, col:8> col:8 s1s1 'port_t':'int'
|-VarDecl 0x55b081949250 <line:80:1, col:8> col:8 used s1s1_old 'int8_t':'char'
|-VarDecl 0x55b0819492c8 <line:81:1, col:8> col:8 used s1s1_new 'int8_t':'char'
|-VarDecl 0x55b081949340 <line:82:1, col:8> col:8 s2s1 'port_t':'int'
|-VarDecl 0x55b0819493b8 <line:83:1, col:8> col:8 used s2s1_old 'int8_t':'char'
|-VarDecl 0x55b081949430 <line:84:1, col:8> col:8 used s2s1_new 'int8_t':'char'
|-VarDecl 0x55b0819494a8 <line:85:1, col:8> col:8 s2s2 'port_t':'int'
|-VarDecl 0x55b081949520 <line:86:1, col:8> col:8 used s2s2_old 'int8_t':'char'
|-VarDecl 0x55b081949598 <line:87:1, col:8> col:8 used s2s2_new 'int8_t':'char'
|-VarDecl 0x55b081949610 <line:88:1, col:8> col:8 s1p 'port_t':'int'
|-VarDecl 0x55b081949688 <line:89:1, col:8> col:8 used s1p_old 'int8_t':'char'
|-VarDecl 0x55b081949700 <line:90:1, col:8> col:8 used s1p_new 'int8_t':'char'
|-VarDecl 0x55b081949778 <line:91:1, col:8> col:8 s2p 'port_t':'int'
|-VarDecl 0x55b0819497f0 <line:92:1, col:8> col:8 used s2p_old 'int8_t':'char'
|-VarDecl 0x55b081949868 <line:93:1, col:8> col:8 used s2p_new 'int8_t':'char'
|-FunctionDecl 0x55b081949920 prev 0x55b0819218c0 <line:94:1, col:37> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x55b081949a10 prev 0x55b081921758 <line:95:1, col:36> col:13 used __VERIFIER_nondet_char 'char (void)' extern
|-VarDecl 0x55b081949ac0 <line:96:1, col:7> col:7 used side1Failed '_Bool'
|-VarDecl 0x55b081949b38 <line:97:1, col:7> col:7 used side2Failed '_Bool'
|-VarDecl 0x55b081949bb0 <line:98:1, col:7> col:7 used side1_written 'msg_t':'char'
|-VarDecl 0x55b081949c28 <line:99:1, col:7> col:7 used side2_written 'msg_t':'char'
|-FunctionDecl 0x55b081949d70 <line:100:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x55b081949ca0 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x55b081949f00 <line:101:1, col:39> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55b081949e30 <col:31, col:35> col:35 arg 'int'
|-VarDecl 0x55b081949fb8 <line:102:1, col:14> col:14 used side1Failed_History_0 '_Bool' static
|-VarDecl 0x55b08194a080 <line:103:1, col:14> col:14 used side1Failed_History_1 '_Bool' static
|-VarDecl 0x55b08194a0f8 <line:104:1, col:14> col:14 used side1Failed_History_2 '_Bool' static
|-VarDecl 0x55b08194a170 <line:105:1, col:14> col:14 used side2Failed_History_0 '_Bool' static
|-VarDecl 0x55b08194a1e8 <line:106:1, col:14> col:14 used side2Failed_History_1 '_Bool' static
|-VarDecl 0x55b08194a260 <line:107:1, col:14> col:14 used side2Failed_History_2 '_Bool' static
|-VarDecl 0x55b08194a2d8 <line:108:1, col:15> col:15 used active_side_History_0 'int8_t':'char' static
|-VarDecl 0x55b08194a350 <line:109:1, col:15> col:15 used active_side_History_1 'int8_t':'char' static
|-VarDecl 0x55b08194a3c8 <line:110:1, col:15> col:15 used active_side_History_2 'int8_t':'char' static
|-VarDecl 0x55b08194a440 <line:111:1, col:14> col:14 used manual_selection_History_0 'msg_t':'char' static
|-VarDecl 0x55b08194a4b8 <line:112:1, col:14> col:14 used manual_selection_History_1 'msg_t':'char' static
|-VarDecl 0x55b08194a530 <line:113:1, col:14> col:14 used manual_selection_History_2 'msg_t':'char' static
|-FunctionDecl 0x55b08194a638 <line:114:1, line:124:1> line:114:6 used write_side1_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x55b08194a5a8 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x55b08194a888 <line:115:1, line:124:1>
|   `-CompoundStmt 0x55b08194a858 <line:118:3, line:123:1>
|     |-BinaryOperator 0x55b08194a738 <line:119:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55b08194a6e0 <col:3> '_Bool' lvalue Var 0x55b08194a0f8 'side1Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x55b08194a720 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194a700 <col:27> '_Bool' lvalue Var 0x55b08194a080 'side1Failed_History_1' '_Bool'
|     |-BinaryOperator 0x55b08194a7b0 <line:120:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55b08194a758 <col:3> '_Bool' lvalue Var 0x55b08194a080 'side1Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x55b08194a798 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194a778 <col:27> '_Bool' lvalue Var 0x55b081949fb8 'side1Failed_History_0' '_Bool'
|     |-BinaryOperator 0x55b08194a828 <line:121:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55b08194a7d0 <col:3> '_Bool' lvalue Var 0x55b081949fb8 'side1Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x55b08194a810 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194a7f0 <col:27> '_Bool' lvalue ParmVar 0x55b08194a5a8 'val' '_Bool'
|     `-ReturnStmt 0x55b08194a848 <line:122:3>
|-FunctionDecl 0x55b08194a980 <line:125:1, line:143:1> line:125:7 used read_side1_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x55b08194a8b8 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x55b08194aff8 <line:126:1, line:143:1>
|   `-CompoundStmt 0x55b08194afe0 <line:129:3, line:142:1>
|     `-IfStmt 0x55b08194afb8 <line:130:3, line:141:3> has_else
|       |-BinaryOperator 0x55b08194aac0 <line:130:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x55b08194aa78 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55b08194aa60 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x55b08194aa28 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194a8b8 'index' 'unsigned char'
|       | `-IntegerLiteral 0x55b08194aaa0 <col:22> 'int' 0
|       |-CompoundStmt 0x55b08194ab48 <col:25, line:132:3>
|       | `-ReturnStmt 0x55b08194ab38 <line:131:5, col:34>
|       |   `-ImplicitCastExpr 0x55b08194ab20 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x55b08194ab00 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x55b08194aae0 <col:13> '_Bool' lvalue Var 0x55b081949fb8 'side1Failed_History_0' '_Bool'
|       `-IfStmt 0x55b08194af90 <line:133:3, line:141:3> has_else
|         |-BinaryOperator 0x55b08194abf8 <line:133:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x55b08194abb0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55b08194ab98 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x55b08194ab60 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194a8b8 'index' 'unsigned char'
|         | `-IntegerLiteral 0x55b08194abd8 <col:22> 'int' 1
|         |-CompoundStmt 0x55b08194ac80 <col:25, line:135:3>
|         | `-ReturnStmt 0x55b08194ac70 <line:134:5, col:34>
|         |   `-ImplicitCastExpr 0x55b08194ac58 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x55b08194ac38 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x55b08194ac18 <col:13> '_Bool' lvalue Var 0x55b08194a080 'side1Failed_History_1' '_Bool'
|         `-IfStmt 0x55b08194af68 <line:136:3, line:141:3> has_else
|           |-BinaryOperator 0x55b08194ad30 <line:136:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x55b08194ace8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x55b08194acd0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x55b08194ac98 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194a8b8 'index' 'unsigned char'
|           | `-IntegerLiteral 0x55b08194ad10 <col:22> 'int' 2
|           |-CompoundStmt 0x55b08194adb8 <col:25, line:138:3>
|           | `-ReturnStmt 0x55b08194ada8 <line:137:5, col:34>
|           |   `-ImplicitCastExpr 0x55b08194ad90 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x55b08194ad70 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x55b08194ad50 <col:13> '_Bool' lvalue Var 0x55b08194a0f8 'side1Failed_History_2' '_Bool'
|           `-CompoundStmt 0x55b08194af48 <line:138:10, line:141:3>
|             |-CallExpr 0x55b08194ae98 <line:139:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x55b08194ae80 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55b08194add0 <col:5> 'void (_Bool)' Function 0x55b081949d70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x55b08194ae20 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x55b08194adf0 <col:19> 'int' 0
|             `-ReturnStmt 0x55b08194af38 <line:140:5, col:21>
|               `-ParenExpr 0x55b08194af18 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x55b08194aef0 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x55b08194aec0 <col:20> 'int' 0
|-FunctionDecl 0x55b08194c250 <line:144:1, line:154:1> line:144:6 used write_side2_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x55b08194c1c0 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x55b08194c4a0 <line:145:1, line:154:1>
|   `-CompoundStmt 0x55b08194c470 <line:148:3, line:153:1>
|     |-BinaryOperator 0x55b08194c350 <line:149:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55b08194c2f8 <col:3> '_Bool' lvalue Var 0x55b08194a260 'side2Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x55b08194c338 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194c318 <col:27> '_Bool' lvalue Var 0x55b08194a1e8 'side2Failed_History_1' '_Bool'
|     |-BinaryOperator 0x55b08194c3c8 <line:150:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55b08194c370 <col:3> '_Bool' lvalue Var 0x55b08194a1e8 'side2Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x55b08194c3b0 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194c390 <col:27> '_Bool' lvalue Var 0x55b08194a170 'side2Failed_History_0' '_Bool'
|     |-BinaryOperator 0x55b08194c440 <line:151:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x55b08194c3e8 <col:3> '_Bool' lvalue Var 0x55b08194a170 'side2Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x55b08194c428 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194c408 <col:27> '_Bool' lvalue ParmVar 0x55b08194c1c0 'val' '_Bool'
|     `-ReturnStmt 0x55b08194c460 <line:152:3>
|-FunctionDecl 0x55b08194c560 <line:155:1, line:173:1> line:155:7 used read_side2_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x55b08194c4d0 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x55b08194cba0 <line:156:1, line:173:1>
|   `-CompoundStmt 0x55b08194cb88 <line:159:3, line:172:1>
|     `-IfStmt 0x55b08194cb60 <line:160:3, line:171:3> has_else
|       |-BinaryOperator 0x55b08194c6a0 <line:160:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x55b08194c658 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55b08194c640 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x55b08194c608 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194c4d0 'index' 'unsigned char'
|       | `-IntegerLiteral 0x55b08194c680 <col:22> 'int' 0
|       |-CompoundStmt 0x55b08194c728 <col:25, line:162:3>
|       | `-ReturnStmt 0x55b08194c718 <line:161:5, col:34>
|       |   `-ImplicitCastExpr 0x55b08194c700 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x55b08194c6e0 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x55b08194c6c0 <col:13> '_Bool' lvalue Var 0x55b08194a170 'side2Failed_History_0' '_Bool'
|       `-IfStmt 0x55b08194cb38 <line:163:3, line:171:3> has_else
|         |-BinaryOperator 0x55b08194c7d8 <line:163:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x55b08194c790 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55b08194c778 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x55b08194c740 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194c4d0 'index' 'unsigned char'
|         | `-IntegerLiteral 0x55b08194c7b8 <col:22> 'int' 1
|         |-CompoundStmt 0x55b08194c860 <col:25, line:165:3>
|         | `-ReturnStmt 0x55b08194c850 <line:164:5, col:34>
|         |   `-ImplicitCastExpr 0x55b08194c838 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x55b08194c818 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x55b08194c7f8 <col:13> '_Bool' lvalue Var 0x55b08194a1e8 'side2Failed_History_1' '_Bool'
|         `-IfStmt 0x55b08194cb10 <line:166:3, line:171:3> has_else
|           |-BinaryOperator 0x55b08194c910 <line:166:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x55b08194c8c8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x55b08194c8b0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x55b08194c878 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194c4d0 'index' 'unsigned char'
|           | `-IntegerLiteral 0x55b08194c8f0 <col:22> 'int' 2
|           |-CompoundStmt 0x55b08194c998 <col:25, line:168:3>
|           | `-ReturnStmt 0x55b08194c988 <line:167:5, col:34>
|           |   `-ImplicitCastExpr 0x55b08194c970 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x55b08194c950 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x55b08194c930 <col:13> '_Bool' lvalue Var 0x55b08194a260 'side2Failed_History_2' '_Bool'
|           `-CompoundStmt 0x55b08194caf0 <line:168:10, line:171:3>
|             |-CallExpr 0x55b08194ca40 <line:169:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x55b08194ca28 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55b08194c9b0 <col:5> 'void (_Bool)' Function 0x55b081949d70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x55b08194ca00 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x55b08194c9d0 <col:19> 'int' 0
|             `-ReturnStmt 0x55b08194cae0 <line:170:5, col:21>
|               `-ParenExpr 0x55b08194cac0 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x55b08194ca98 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x55b08194ca68 <col:20> 'int' 0
|-FunctionDecl 0x55b08194ccd0 <line:174:1, line:184:1> line:174:6 used write_active_side_history 'void (int8_t)'
| |-ParmVarDecl 0x55b08194cbc8 <col:32, col:39> col:39 used val 'int8_t':'char'
| `-CompoundStmt 0x55b08194cf20 <line:175:1, line:184:1>
|   `-CompoundStmt 0x55b08194cef0 <line:178:3, line:183:1>
|     |-BinaryOperator 0x55b08194cdd0 <line:179:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b08194cd78 <col:3> 'int8_t':'char' lvalue Var 0x55b08194a3c8 'active_side_History_2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b08194cdb8 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194cd98 <col:27> 'int8_t':'char' lvalue Var 0x55b08194a350 'active_side_History_1' 'int8_t':'char'
|     |-BinaryOperator 0x55b08194ce48 <line:180:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b08194cdf0 <col:3> 'int8_t':'char' lvalue Var 0x55b08194a350 'active_side_History_1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b08194ce30 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194ce10 <col:27> 'int8_t':'char' lvalue Var 0x55b08194a2d8 'active_side_History_0' 'int8_t':'char'
|     |-BinaryOperator 0x55b08194cec0 <line:181:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b08194ce68 <col:3> 'int8_t':'char' lvalue Var 0x55b08194a2d8 'active_side_History_0' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b08194cea8 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194ce88 <col:27> 'int8_t':'char' lvalue ParmVar 0x55b08194cbc8 'val' 'int8_t':'char'
|     `-ReturnStmt 0x55b08194cee0 <line:182:3>
|-FunctionDecl 0x55b08194d060 <line:185:1, line:203:1> line:185:8 used read_active_side_history 'int8_t (unsigned char)'
| |-ParmVarDecl 0x55b08194cf50 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x55b08194dad8 <line:186:1, line:203:1>
|   `-CompoundStmt 0x55b08194dac0 <line:189:3, line:202:1>
|     `-IfStmt 0x55b08194da98 <line:190:3, line:201:3> has_else
|       |-BinaryOperator 0x55b08194d1a0 <line:190:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x55b08194d158 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55b08194d140 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x55b08194d108 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194cf50 'index' 'unsigned char'
|       | `-IntegerLiteral 0x55b08194d180 <col:22> 'int' 0
|       |-CompoundStmt 0x55b08194d648 <col:25, line:192:3>
|       | `-ReturnStmt 0x55b08194d638 <line:191:5, col:34>
|       |   `-ImplicitCastExpr 0x55b08194d620 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x55b08194d600 <col:12, col:34> 'int8_t':'char' lvalue
|       |       `-DeclRefExpr 0x55b08194d5e0 <col:13> 'int8_t':'char' lvalue Var 0x55b08194a2d8 'active_side_History_0' 'int8_t':'char'
|       `-IfStmt 0x55b08194da70 <line:193:3, line:201:3> has_else
|         |-BinaryOperator 0x55b08194d6f8 <line:193:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x55b08194d6b0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55b08194d698 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x55b08194d660 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194cf50 'index' 'unsigned char'
|         | `-IntegerLiteral 0x55b08194d6d8 <col:22> 'int' 1
|         |-CompoundStmt 0x55b08194d780 <col:25, line:195:3>
|         | `-ReturnStmt 0x55b08194d770 <line:194:5, col:34>
|         |   `-ImplicitCastExpr 0x55b08194d758 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x55b08194d738 <col:12, col:34> 'int8_t':'char' lvalue
|         |       `-DeclRefExpr 0x55b08194d718 <col:13> 'int8_t':'char' lvalue Var 0x55b08194a350 'active_side_History_1' 'int8_t':'char'
|         `-IfStmt 0x55b08194da48 <line:196:3, line:201:3> has_else
|           |-BinaryOperator 0x55b08194d830 <line:196:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x55b08194d7e8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x55b08194d7d0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x55b08194d798 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194cf50 'index' 'unsigned char'
|           | `-IntegerLiteral 0x55b08194d810 <col:22> 'int' 2
|           |-CompoundStmt 0x55b08194d8b8 <col:25, line:198:3>
|           | `-ReturnStmt 0x55b08194d8a8 <line:197:5, col:34>
|           |   `-ImplicitCastExpr 0x55b08194d890 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x55b08194d870 <col:12, col:34> 'int8_t':'char' lvalue
|           |       `-DeclRefExpr 0x55b08194d850 <col:13> 'int8_t':'char' lvalue Var 0x55b08194a3c8 'active_side_History_2' 'int8_t':'char'
|           `-CompoundStmt 0x55b08194da28 <line:198:10, line:201:3>
|             |-CallExpr 0x55b08194d960 <line:199:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x55b08194d948 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55b08194d8d0 <col:5> 'void (_Bool)' Function 0x55b081949d70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x55b08194d920 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x55b08194d8f0 <col:19> 'int' 0
|             `-ReturnStmt 0x55b08194da18 <line:200:5, col:24>
|               `-ParenExpr 0x55b08194d9f8 <col:12, col:24> 'int8_t':'char'
|                 `-CStyleCastExpr 0x55b08194d9d0 <col:13, col:23> 'int8_t':'char' <IntegralCast>
|                   `-UnaryOperator 0x55b08194d9a8 <col:22, col:23> 'int' prefix '-'
|                     `-IntegerLiteral 0x55b08194d988 <col:23> 'int' 2
|-FunctionDecl 0x55b08194dbd0 <line:204:1, line:214:1> line:204:6 used write_manual_selection_history 'void (msg_t)'
| |-ParmVarDecl 0x55b08194db00 <col:37, col:43> col:43 used val 'msg_t':'char'
| `-CompoundStmt 0x55b08194de20 <line:205:1, line:214:1>
|   `-CompoundStmt 0x55b08194ddf0 <line:208:3, line:213:1>
|     |-BinaryOperator 0x55b08194dcd0 <line:209:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b08194dc78 <col:3> 'msg_t':'char' lvalue Var 0x55b08194a530 'manual_selection_History_2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b08194dcb8 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194dc98 <col:32> 'msg_t':'char' lvalue Var 0x55b08194a4b8 'manual_selection_History_1' 'msg_t':'char'
|     |-BinaryOperator 0x55b08194dd48 <line:210:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b08194dcf0 <col:3> 'msg_t':'char' lvalue Var 0x55b08194a4b8 'manual_selection_History_1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b08194dd30 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194dd10 <col:32> 'msg_t':'char' lvalue Var 0x55b08194a440 'manual_selection_History_0' 'msg_t':'char'
|     |-BinaryOperator 0x55b08194ddc0 <line:211:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b08194dd68 <col:3> 'msg_t':'char' lvalue Var 0x55b08194a440 'manual_selection_History_0' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b08194dda8 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194dd88 <col:32> 'msg_t':'char' lvalue ParmVar 0x55b08194db00 'val' 'msg_t':'char'
|     `-ReturnStmt 0x55b08194dde0 <line:212:3>
|-FunctionDecl 0x55b08194df20 <line:215:1, line:233:1> line:215:7 used read_manual_selection_history 'msg_t (unsigned char)'
| |-ParmVarDecl 0x55b08194de50 <col:37, col:51> col:51 used index 'unsigned char'
| `-CompoundStmt 0x55b08194e560 <line:216:1, line:233:1>
|   `-CompoundStmt 0x55b08194e548 <line:219:3, line:232:1>
|     `-IfStmt 0x55b08194e520 <line:220:3, line:231:3> has_else
|       |-BinaryOperator 0x55b08194e060 <line:220:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x55b08194e018 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55b08194e000 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x55b08194dfc8 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194de50 'index' 'unsigned char'
|       | `-IntegerLiteral 0x55b08194e040 <col:22> 'int' 0
|       |-CompoundStmt 0x55b08194e0e8 <col:25, line:222:3>
|       | `-ReturnStmt 0x55b08194e0d8 <line:221:5, col:39>
|       |   `-ImplicitCastExpr 0x55b08194e0c0 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x55b08194e0a0 <col:12, col:39> 'msg_t':'char' lvalue
|       |       `-DeclRefExpr 0x55b08194e080 <col:13> 'msg_t':'char' lvalue Var 0x55b08194a440 'manual_selection_History_0' 'msg_t':'char'
|       `-IfStmt 0x55b08194e4f8 <line:223:3, line:231:3> has_else
|         |-BinaryOperator 0x55b08194e198 <line:223:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x55b08194e150 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55b08194e138 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x55b08194e100 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194de50 'index' 'unsigned char'
|         | `-IntegerLiteral 0x55b08194e178 <col:22> 'int' 1
|         |-CompoundStmt 0x55b08194e220 <col:25, line:225:3>
|         | `-ReturnStmt 0x55b08194e210 <line:224:5, col:39>
|         |   `-ImplicitCastExpr 0x55b08194e1f8 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x55b08194e1d8 <col:12, col:39> 'msg_t':'char' lvalue
|         |       `-DeclRefExpr 0x55b08194e1b8 <col:13> 'msg_t':'char' lvalue Var 0x55b08194a4b8 'manual_selection_History_1' 'msg_t':'char'
|         `-IfStmt 0x55b08194e4d0 <line:226:3, line:231:3> has_else
|           |-BinaryOperator 0x55b08194e2d0 <line:226:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x55b08194e288 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x55b08194e270 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x55b08194e238 <col:13> 'unsigned char' lvalue ParmVar 0x55b08194de50 'index' 'unsigned char'
|           | `-IntegerLiteral 0x55b08194e2b0 <col:22> 'int' 2
|           |-CompoundStmt 0x55b08194e358 <col:25, line:228:3>
|           | `-ReturnStmt 0x55b08194e348 <line:227:5, col:39>
|           |   `-ImplicitCastExpr 0x55b08194e330 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x55b08194e310 <col:12, col:39> 'msg_t':'char' lvalue
|           |       `-DeclRefExpr 0x55b08194e2f0 <col:13> 'msg_t':'char' lvalue Var 0x55b08194a530 'manual_selection_History_2' 'msg_t':'char'
|           `-CompoundStmt 0x55b08194e4b0 <line:228:10, line:231:3>
|             |-CallExpr 0x55b08194e400 <line:229:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x55b08194e3e8 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55b08194e370 <col:5> 'void (_Bool)' Function 0x55b081949d70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x55b08194e3c0 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x55b08194e390 <col:19> 'int' 0
|             `-ReturnStmt 0x55b08194e4a0 <line:230:5, col:22>
|               `-ParenExpr 0x55b08194e480 <col:12, col:22> 'msg_t':'char'
|                 `-CStyleCastExpr 0x55b08194e458 <col:13, col:21> 'msg_t':'char' <IntegralCast>
|                   `-IntegerLiteral 0x55b08194e428 <col:21> 'int' 0
|-FunctionDecl 0x55b08194e6b8 <line:234:1, line:277:1> line:234:5 used init 'int (void)'
| `-CompoundStmt 0x55b08194f728 <line:235:1, line:277:1>
|   `-CompoundStmt 0x55b08194f6b0 <line:238:3, line:276:1>
|     |-IfStmt 0x55b08194e878 <line:239:3, line:241:3>
|     | |-BinaryOperator 0x55b08194e7f0 <line:239:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194e7a8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194e790 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194e758 <col:13> '_Bool' lvalue Var 0x55b081949fb8 'side1Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x55b08194e7d0 <col:38> 'int' 0
|     | `-CompoundStmt 0x55b08194e860 <col:41, line:241:3>
|     |   `-ReturnStmt 0x55b08194e850 <line:240:5, col:14>
|     |     `-ParenExpr 0x55b08194e830 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194e810 <col:13> 'int' 0
|     |-IfStmt 0x55b08194e9b0 <line:242:3, line:244:3>
|     | |-BinaryOperator 0x55b08194e928 <line:242:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194e8e0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194e8c8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194e890 <col:13> '_Bool' lvalue Var 0x55b08194a170 'side2Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x55b08194e908 <col:38> 'int' 0
|     | `-CompoundStmt 0x55b08194e998 <col:41, line:244:3>
|     |   `-ReturnStmt 0x55b08194e988 <line:243:5, col:14>
|     |     `-ParenExpr 0x55b08194e968 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194e948 <col:13> 'int' 0
|     |-IfStmt 0x55b08194eb00 <line:245:3, line:247:3>
|     | |-BinaryOperator 0x55b08194ea78 <line:245:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194ea18 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194ea00 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194e9c8 <col:13> 'int8_t':'char' lvalue Var 0x55b08194a2d8 'active_side_History_0' 'int8_t':'char'
|     | | `-UnaryOperator 0x55b08194ea60 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55b08194ea40 <col:39> 'int' 2
|     | `-CompoundStmt 0x55b08194eae8 <col:42, line:247:3>
|     |   `-ReturnStmt 0x55b08194ead8 <line:246:5, col:14>
|     |     `-ParenExpr 0x55b08194eab8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194ea98 <col:13> 'int' 0
|     |-IfStmt 0x55b08194ec38 <line:248:3, line:250:3>
|     | |-BinaryOperator 0x55b08194ebb0 <line:248:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194eb68 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194eb50 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194eb18 <col:13> 'msg_t':'char' lvalue Var 0x55b08194a440 'manual_selection_History_0' 'msg_t':'char'
|     | | `-IntegerLiteral 0x55b08194eb90 <col:43> 'int' 0
|     | `-CompoundStmt 0x55b08194ec20 <col:46, line:250:3>
|     |   `-ReturnStmt 0x55b08194ec10 <line:249:5, col:14>
|     |     `-ParenExpr 0x55b08194ebf0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194ebd0 <col:13> 'int' 0
|     |-IfStmt 0x55b08194ed70 <line:251:3, line:253:3>
|     | |-BinaryOperator 0x55b08194ece8 <line:251:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194eca0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194ec88 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194ec50 <col:13> '_Bool' lvalue Var 0x55b08194a080 'side1Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x55b08194ecc8 <col:38> 'int' 0
|     | `-CompoundStmt 0x55b08194ed58 <col:41, line:253:3>
|     |   `-ReturnStmt 0x55b08194ed48 <line:252:5, col:14>
|     |     `-ParenExpr 0x55b08194ed28 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194ed08 <col:13> 'int' 0
|     |-IfStmt 0x55b08194eea8 <line:254:3, line:256:3>
|     | |-BinaryOperator 0x55b08194ee20 <line:254:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194edd8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194edc0 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194ed88 <col:13> '_Bool' lvalue Var 0x55b08194a1e8 'side2Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x55b08194ee00 <col:38> 'int' 0
|     | `-CompoundStmt 0x55b08194ee90 <col:41, line:256:3>
|     |   `-ReturnStmt 0x55b08194ee80 <line:255:5, col:14>
|     |     `-ParenExpr 0x55b08194ee60 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194ee40 <col:13> 'int' 0
|     |-IfStmt 0x55b08194eff8 <line:257:3, line:259:3>
|     | |-BinaryOperator 0x55b08194ef70 <line:257:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194ef10 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194eef8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194eec0 <col:13> 'int8_t':'char' lvalue Var 0x55b08194a350 'active_side_History_1' 'int8_t':'char'
|     | | `-UnaryOperator 0x55b08194ef58 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55b08194ef38 <col:39> 'int' 2
|     | `-CompoundStmt 0x55b08194efe0 <col:42, line:259:3>
|     |   `-ReturnStmt 0x55b08194efd0 <line:258:5, col:14>
|     |     `-ParenExpr 0x55b08194efb0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194ef90 <col:13> 'int' 0
|     |-IfStmt 0x55b08194f130 <line:260:3, line:262:3>
|     | |-BinaryOperator 0x55b08194f0a8 <line:260:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194f060 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194f048 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194f010 <col:13> 'msg_t':'char' lvalue Var 0x55b08194a4b8 'manual_selection_History_1' 'msg_t':'char'
|     | | `-IntegerLiteral 0x55b08194f088 <col:43> 'int' 0
|     | `-CompoundStmt 0x55b08194f118 <col:46, line:262:3>
|     |   `-ReturnStmt 0x55b08194f108 <line:261:5, col:14>
|     |     `-ParenExpr 0x55b08194f0e8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194f0c8 <col:13> 'int' 0
|     |-IfStmt 0x55b08194f268 <line:263:3, line:265:3>
|     | |-BinaryOperator 0x55b08194f1e0 <line:263:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194f198 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194f180 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194f148 <col:13> '_Bool' lvalue Var 0x55b08194a0f8 'side1Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x55b08194f1c0 <col:38> 'int' 0
|     | `-CompoundStmt 0x55b08194f250 <col:41, line:265:3>
|     |   `-ReturnStmt 0x55b08194f240 <line:264:5, col:14>
|     |     `-ParenExpr 0x55b08194f220 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194f200 <col:13> 'int' 0
|     |-IfStmt 0x55b08194f3a0 <line:266:3, line:268:3>
|     | |-BinaryOperator 0x55b08194f318 <line:266:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194f2d0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194f2b8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194f280 <col:13> '_Bool' lvalue Var 0x55b08194a260 'side2Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x55b08194f2f8 <col:38> 'int' 0
|     | `-CompoundStmt 0x55b08194f388 <col:41, line:268:3>
|     |   `-ReturnStmt 0x55b08194f378 <line:267:5, col:14>
|     |     `-ParenExpr 0x55b08194f358 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194f338 <col:13> 'int' 0
|     |-IfStmt 0x55b08194f4f0 <line:269:3, line:271:3>
|     | |-BinaryOperator 0x55b08194f468 <line:269:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194f408 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194f3f0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194f3b8 <col:13> 'int8_t':'char' lvalue Var 0x55b08194a3c8 'active_side_History_2' 'int8_t':'char'
|     | | `-UnaryOperator 0x55b08194f450 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55b08194f430 <col:39> 'int' 2
|     | `-CompoundStmt 0x55b08194f4d8 <col:42, line:271:3>
|     |   `-ReturnStmt 0x55b08194f4c8 <line:270:5, col:14>
|     |     `-ParenExpr 0x55b08194f4a8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194f488 <col:13> 'int' 0
|     |-IfStmt 0x55b08194f648 <line:272:3, line:274:3>
|     | |-BinaryOperator 0x55b08194f5a0 <line:272:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x55b08194f558 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194f540 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194f508 <col:13> 'msg_t':'char' lvalue Var 0x55b08194a530 'manual_selection_History_2' 'msg_t':'char'
|     | | `-IntegerLiteral 0x55b08194f580 <col:43> 'int' 0
|     | `-CompoundStmt 0x55b08194f630 <col:46, line:274:3>
|     |   `-ReturnStmt 0x55b08194f620 <line:273:5, col:14>
|     |     `-ParenExpr 0x55b08194f600 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b08194f5c0 <col:13> 'int' 0
|     `-ReturnStmt 0x55b08194f6a0 <line:275:3, col:12>
|       `-ParenExpr 0x55b08194f680 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x55b08194f660 <col:11> 'int' 1
|-FunctionDecl 0x55b08194f860 <line:278:1, line:290:1> line:278:8 used flip_the_side 'int8_t (int8_t)'
| |-ParmVarDecl 0x55b08194f750 <col:22, col:29> col:29 used side 'int8_t':'char'
| `-CompoundStmt 0x55b08194fc30 <line:279:1, line:290:1>
|   |-DeclStmt 0x55b08194f988 <line:280:3, col:11>
|   | `-VarDecl 0x55b08194f920 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x55b08194fc10 <line:282:3, line:289:1>
|     |-IfStmt 0x55b08194fb48 <line:283:3, line:287:3> has_else
|     | |-BinaryOperator 0x55b08194fa38 <line:283:7, col:21> 'int' '=='
|     | | |-CStyleCastExpr 0x55b08194f9f0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08194f9d8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08194f9a0 <col:13> 'int8_t':'char' lvalue ParmVar 0x55b08194f750 'side' 'int8_t':'char'
|     | | `-IntegerLiteral 0x55b08194fa18 <col:21> 'int' 1
|     | |-CompoundStmt 0x55b08194fab8 <col:24, line:285:3>
|     | | `-BinaryOperator 0x55b08194fa98 <line:284:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x55b08194fa58 <col:5> 'int' lvalue Var 0x55b08194f920 'tmp' 'int'
|     | |   `-IntegerLiteral 0x55b08194fa78 <col:11> 'int' 0
|     | `-CompoundStmt 0x55b08194fb30 <line:285:10, line:287:3>
|     |   `-BinaryOperator 0x55b08194fb10 <line:286:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x55b08194fad0 <col:5> 'int' lvalue Var 0x55b08194f920 'tmp' 'int'
|     |     `-IntegerLiteral 0x55b08194faf0 <col:11> 'int' 1
|     `-ReturnStmt 0x55b08194fc00 <line:288:3, col:23>
|       `-ParenExpr 0x55b08194fbe0 <col:10, col:23> 'int8_t':'char'
|         `-CStyleCastExpr 0x55b08194fbb8 <col:11, col:20> 'int8_t':'char' <IntegralCast>
|           `-ImplicitCastExpr 0x55b08194fba0 <col:20> 'int' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55b08194fb70 <col:20> 'int' lvalue Var 0x55b08194f920 'tmp' 'int'
|-FunctionDecl 0x55b08194fd20 <line:291:1, line:305:1> line:291:6 used Console_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x55b0819507b0 <line:292:1, line:305:1>
|   |-DeclStmt 0x55b08194fe38 <line:293:3, col:26>
|   | `-VarDecl 0x55b08194fdd0 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x55b08194fec8 <line:294:3, col:12>
|   | `-VarDecl 0x55b08194fe60 <col:3, col:8> col:8 used tmp 'char'
|   `-CompoundStmt 0x55b081950768 <line:296:3, line:304:1>
|     |-BinaryOperator 0x55b08194ff88 <line:297:3, col:32> 'char' '='
|     | |-DeclRefExpr 0x55b08194fee0 <col:3> 'char' lvalue Var 0x55b08194fe60 'tmp' 'char'
|     | `-CallExpr 0x55b08194ff68 <col:9, col:32> 'char'
|     |   `-ImplicitCastExpr 0x55b08194ff50 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b08194ff00 <col:9> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|     |-BinaryOperator 0x55b081950000 <line:298:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b08194ffa8 <col:3> 'msg_t':'char' lvalue Var 0x55b08194fdd0 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b08194ffe8 <col:22> 'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b08194ffc8 <col:22> 'char' lvalue Var 0x55b08194fe60 'tmp' 'char'
|     |-CallExpr 0x55b0819500d8 <line:299:3, col:50> 'void'
|     | |-ImplicitCastExpr 0x55b0819500c0 <col:3> 'void (*)(msg_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b081950020 <col:3> 'void (msg_t)' Function 0x55b08194dbd0 'write_manual_selection_history' 'void (msg_t)'
|     | `-ImplicitCastExpr 0x55b081950100 <col:34> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081950040 <col:34> 'msg_t':'char' lvalue Var 0x55b08194fdd0 'manual_selection' 'msg_t':'char'
|     |-BinaryOperator 0x55b0819503c0 <line:300:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081950118 <col:3> 'int8_t':'char' lvalue Var 0x55b081922128 'cs1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b0819503a8 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b081950378 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x55b0819502b8 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x55b0819501d8 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b0819501a8 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b081950178 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b081950138 <col:13> 'msg_t':'char' lvalue Var 0x55b08194fdd0 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b0819501c0 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b081950190 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b081950158 <col:33> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b081950298 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b081950268 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b081950238 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b0819501f8 <col:42> 'int8_t':'char' lvalue Var 0x55b081922128 'cs1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b081950280 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b081950250 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b081950218 <col:53> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b081950330 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b081950318 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b0819502d8 <col:61> 'msg_t':'char' lvalue Var 0x55b08194fdd0 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x55b081950360 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b081950348 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b0819502f8 <col:80> 'int8_t':'char' lvalue Var 0x55b081922128 'cs1_new' 'int8_t':'char'
|     |-BinaryOperator 0x55b0819506a0 <line:301:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819503e0 <col:3> 'int8_t':'char' lvalue Var 0x55b081922290 'cs2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081950688 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b081950658 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x55b081950580 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x55b0819504a0 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b081950470 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b081950440 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b081950400 <col:13> 'msg_t':'char' lvalue Var 0x55b08194fdd0 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b081950488 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b081950458 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b081950420 <col:33> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b081950560 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b081950530 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b081950500 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b0819504c0 <col:42> 'int8_t':'char' lvalue Var 0x55b081922290 'cs2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b081950548 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b081950518 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b0819504e0 <col:53> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b081950610 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b0819505e0 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b0819505a0 <col:61> 'msg_t':'char' lvalue Var 0x55b08194fdd0 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x55b081950640 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b081950628 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b0819505c0 <col:80> 'int8_t':'char' lvalue Var 0x55b081922290 'cs2_new' 'int8_t':'char'
|     |-BinaryOperator 0x55b081950738 <line:302:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b0819506c0 <col:3> 'msg_t':'char' lvalue Var 0x55b08194fdd0 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x55b081950710 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x55b0819506e0 <col:30> 'int' 0
|     `-ReturnStmt 0x55b081950758 <line:303:3>
|-FunctionDecl 0x55b081950870 <line:306:1, line:358:1> line:306:6 used Side1_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x55b081953390 <line:307:1, line:358:1>
|   |-DeclStmt 0x55b081950988 <line:308:3, col:16>
|   | `-VarDecl 0x55b081950920 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x55b081950a18 <line:309:3, col:16>
|   | `-VarDecl 0x55b0819509b0 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x55b081950aa8 <line:310:3, col:26>
|   | `-VarDecl 0x55b081950a40 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x55b081950b38 <line:311:3, col:21>
|   | `-VarDecl 0x55b081950ad0 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x55b0819532f0 <line:313:3, line:357:1>
|     |-BinaryOperator 0x55b081950ba8 <line:314:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081950b50 <col:3> 'int8_t':'char' lvalue Var 0x55b081950920 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081950b90 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081950b70 <col:11> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b081950c20 <line:315:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081950bc8 <col:3> 'int8_t':'char' lvalue Var 0x55b0819509b0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081950c08 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081950be8 <col:11> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b081950cb8 <line:316:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b081950c40 <col:3> 'msg_t':'char' lvalue Var 0x55b081950a40 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x55b081950c90 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x55b081950c60 <col:30> 'int' 0
|     |-BinaryOperator 0x55b081950d88 <line:317:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x55b081950cd8 <col:3> '_Bool' lvalue Var 0x55b081949ac0 'side1Failed' '_Bool'
|     | `-CallExpr 0x55b081950d68 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x55b081950d50 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b081950cf8 <col:17> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x55b081950e00 <line:318:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x55b081950de8 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b081950da8 <col:3> 'void (_Bool)' Function 0x55b08194a638 'write_side1_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x55b081950e28 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081950dc8 <col:30> '_Bool' lvalue Var 0x55b081949ac0 'side1Failed' '_Bool'
|     |-IfStmt 0x55b0819518e8 <line:319:3, line:325:3>
|     | |-ImplicitCastExpr 0x55b081950e60 <line:319:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b081950e40 <col:7> '_Bool' lvalue Var 0x55b081949ac0 'side1Failed' '_Bool'
|     | `-CompoundStmt 0x55b0819518b0 <col:20, line:325:3>
|     |   |-BinaryOperator 0x55b081951120 <line:320:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b081950e78 <col:5> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b081951108 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b0819510d8 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x55b081951018 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b081950f38 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b081950f08 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b081950ed8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b081950e98 <col:16> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b081950f20 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b081950ef0 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b081950eb8 <col:25> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b081950ff8 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b081950fc8 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b081950f98 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b081950f58 <col:34> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b081950fe0 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b081950fb0 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b081950f78 <col:46> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b081951090 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b081951078 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b081951038 <col:54> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b0819510c0 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b0819510a8 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b081951058 <col:62> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55b0819513e8 <line:321:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b081951140 <col:5> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b0819513d0 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b0819513a0 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x55b0819512e0 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b081951200 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b0819511d0 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b0819511a0 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b081951160 <col:16> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b0819511e8 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b0819511b8 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b081951180 <col:25> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b0819512c0 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b081951290 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b081951260 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b081951220 <col:34> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b0819512a8 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b081951278 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b081951240 <col:46> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b081951358 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b081951340 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b081951300 <col:54> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b081951388 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b081951370 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b081951320 <col:62> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55b081951808 <line:322:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b081951408 <col:5> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b0819517f0 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b0819517c0 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x55b0819515a8 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b0819514c8 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b081951498 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b081951468 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b081951428 <col:15> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b0819514b0 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b081951480 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b081951448 <col:24> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b081951588 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b081951558 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b081951528 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b0819514e8 <col:33> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b081951570 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b081951540 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b081951508 <col:44> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b081951778 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b081951760 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b0819515c8 <col:52> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b0819517a8 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b081951790 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b0819515e8 <col:60> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55b081951880 <line:323:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x55b081951828 <col:5> 'msg_t':'char' lvalue Var 0x55b081949bb0 'side1_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x55b081951868 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55b081951848 <col:21> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x55b0819518a0 <line:324:5>
|     |-BinaryOperator 0x55b081951958 <line:326:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081951900 <col:3> 'int8_t':'char' lvalue Var 0x55b081950920 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081951940 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081951920 <col:11> 'int8_t':'char' lvalue Var 0x55b081949250 's1s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b0819519d0 <line:327:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081951978 <col:3> 'int8_t':'char' lvalue Var 0x55b081949250 's1s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b0819519b8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081951998 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b081951a48 <line:328:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819519f0 <col:3> 'int8_t':'char' lvalue Var 0x55b0819509b0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081951a30 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081951a10 <col:11> 'int8_t':'char' lvalue Var 0x55b0819493b8 's2s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b081951ac0 <line:329:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081951a68 <col:3> 'int8_t':'char' lvalue Var 0x55b0819493b8 's2s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081951aa8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081951a88 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b081951b38 <line:330:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b081951ae0 <col:3> 'msg_t':'char' lvalue Var 0x55b081950a40 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b081951b20 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081951b00 <col:22> 'int8_t':'char' lvalue Var 0x55b0819220b0 'cs1_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b081951bb0 <line:331:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081951b58 <col:3> 'int8_t':'char' lvalue Var 0x55b0819220b0 'cs1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081951b98 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081951b78 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55b0819525b8 <line:332:3, line:351:3> has_else
|     | |-BinaryOperator 0x55b081951cc0 <line:332:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x55b081951c20 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b081951c08 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b081951bd0 <col:13> 'int8_t':'char' lvalue Var 0x55b081950920 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x55b081951c98 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x55b081951c80 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x55b081951c48 <col:28> 'int8_t':'char' lvalue Var 0x55b0819509b0 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x55b081951d78 <col:35, line:334:3>
|     | | `-BinaryOperator 0x55b081951d58 <line:333:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x55b081951ce0 <col:5> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x55b081951d30 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x55b081951d00 <col:27> 'int' 1
|     | `-IfStmt 0x55b081952590 <line:335:3, line:351:3> has_else
|     |   |-BinaryOperator 0x55b081951e80 <line:335:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x55b081951de0 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55b081951dc8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55b081951d90 <col:13> 'int8_t':'char' lvalue Var 0x55b081950920 'side1' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x55b081951e58 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x55b081951e40 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x55b081951e08 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x55b081952108 <col:35, line:341:3>
|     |   | `-IfStmt 0x55b0819520e0 <line:336:5, line:340:5> has_else
|     |   |   |-BinaryOperator 0x55b081951f90 <line:336:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55b081951ef0 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55b081951ed8 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55b081951ea0 <col:15> 'int8_t':'char' lvalue Var 0x55b0819509b0 'side2' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x55b081951f68 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55b081951f50 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55b081951f18 <col:30> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x55b081952048 <col:37, line:338:5>
|     |   |   | `-BinaryOperator 0x55b081952028 <line:337:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x55b081951fb0 <col:7> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x55b081952000 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x55b081951fd0 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x55b0819520c8 <line:338:12, line:340:5>
|     |   |     `-GotoStmt 0x55b0819520b0 <line:339:7, col:12> '_L' 0x55b081952060
|     |   `-LabelStmt 0x55b081952578 <line:342:3, line:351:3> '_L'
|     |     `-IfStmt 0x55b081952550 <line:343:3, line:351:3> has_else
|     |       |-BinaryOperator 0x55b081952210 <line:343:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x55b081952170 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x55b081952158 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x55b081952120 <col:13> 'int8_t':'char' lvalue Var 0x55b081950920 'side1' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x55b0819521e8 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x55b0819521d0 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x55b081952198 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x55b0819524a8 <col:35, line:349:3>
|     |       | `-IfStmt 0x55b081952480 <line:344:5, line:348:5> has_else
|     |       |   |-BinaryOperator 0x55b081952320 <line:344:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x55b081952280 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x55b081952268 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x55b081952230 <col:15> 'int8_t':'char' lvalue Var 0x55b0819509b0 'side2' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x55b0819522f8 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x55b0819522e0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x55b0819522a8 <col:30> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x55b0819523d8 <col:37, line:346:5>
|     |       |   | `-BinaryOperator 0x55b0819523b8 <line:345:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x55b081952340 <col:7> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x55b081952390 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x55b081952360 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x55b081952468 <line:346:12, line:348:5>
|     |       |     `-BinaryOperator 0x55b081952448 <line:347:7, col:20> 'int8_t':'char' '='
|     |       |       |-DeclRefExpr 0x55b0819523f0 <col:7> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |       |       `-ImplicitCastExpr 0x55b081952430 <col:20> 'int8_t':'char' <LValueToRValue>
|     |       |         `-DeclRefExpr 0x55b081952410 <col:20> 'int8_t':'char' lvalue Var 0x55b081950920 'side1' 'int8_t':'char'
|     |       `-CompoundStmt 0x55b081952538 <line:349:10, line:351:3>
|     |         `-BinaryOperator 0x55b081952518 <line:350:5, col:18> 'int8_t':'char' '='
|     |           |-DeclRefExpr 0x55b0819524c0 <col:5> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |           `-ImplicitCastExpr 0x55b081952500 <col:18> 'int8_t':'char' <LValueToRValue>
|     |             `-DeclRefExpr 0x55b0819524e0 <col:18> 'int8_t':'char' lvalue Var 0x55b081950920 'side1' 'int8_t':'char'
|     |-BinaryOperator 0x55b081952cb8 <line:352:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819525e0 <col:3> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081952ca0 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b081952c70 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x55b081952bb0 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x55b0819526a0 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b081952670 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b081952640 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b081952600 <col:14> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b081952688 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b081952658 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b081952620 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b081952b90 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b081952730 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b081952700 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b0819526c0 <col:37> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b081952748 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b081952718 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b0819526e0 <col:49> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b081952c28 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b081952c10 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b081952bd0 <col:57> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b081952c58 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b081952c40 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b081952bf0 <col:70> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x55b081952f80 <line:353:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081952cd8 <col:3> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081952f68 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b081952f38 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x55b081952e78 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x55b081952d98 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b081952d68 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b081952d38 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b081952cf8 <col:14> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b081952d80 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b081952d50 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b081952d18 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b081952e58 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b081952e28 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b081952df8 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b081952db8 <col:37> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b081952e40 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b081952e10 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b081952dd8 <col:49> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b081952ef0 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b081952ed8 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b081952e98 <col:57> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b081952f20 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b081952f08 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b081952eb8 <col:70> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x55b081953248 <line:354:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081952fa0 <col:3> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081953230 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b081953200 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x55b081953140 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x55b081953060 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b081953030 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b081953000 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b081952fc0 <col:13> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b081953048 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b081953018 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b081952fe0 <col:27> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b081953120 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b0819530f0 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b0819530c0 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b081953080 <col:36> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b081953108 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b0819530d8 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b0819530a0 <col:47> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b0819531b8 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b0819531a0 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b081953160 <col:55> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b0819531e8 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b0819531d0 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b081953180 <col:68> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|     |-BinaryOperator 0x55b0819532c0 <line:355:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b081953268 <col:3> 'msg_t':'char' lvalue Var 0x55b081949bb0 'side1_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b0819532a8 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081953288 <col:19> 'int8_t':'char' lvalue Var 0x55b081950ad0 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x55b0819532e0 <line:356:3>
|-FunctionDecl 0x55b081953460 <line:359:1, line:415:1> line:359:6 used Side2_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x55b081955c60 <line:360:1, line:415:1>
|   |-DeclStmt 0x55b081953578 <line:361:3, col:16>
|   | `-VarDecl 0x55b081953510 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x55b081953608 <line:362:3, col:16>
|   | `-VarDecl 0x55b0819535a0 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x55b081953698 <line:363:3, col:26>
|   | `-VarDecl 0x55b081953630 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x55b081953728 <line:364:3, col:21>
|   | `-VarDecl 0x55b0819536c0 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x55b081955bc0 <line:366:3, line:414:1>
|     |-BinaryOperator 0x55b081953798 <line:367:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081953740 <col:3> 'int8_t':'char' lvalue Var 0x55b081953510 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081953780 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081953760 <col:11> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b081953810 <line:368:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819537b8 <col:3> 'int8_t':'char' lvalue Var 0x55b0819535a0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b0819537f8 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b0819537d8 <col:11> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b0819538a8 <line:369:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b081953830 <col:3> 'msg_t':'char' lvalue Var 0x55b081953630 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x55b081953880 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x55b081953850 <col:30> 'int' 0
|     |-BinaryOperator 0x55b081953940 <line:370:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x55b0819538c8 <col:3> '_Bool' lvalue Var 0x55b081949b38 'side2Failed' '_Bool'
|     | `-CallExpr 0x55b081953920 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x55b081953908 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b0819538e8 <col:17> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x55b0819539b8 <line:371:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x55b0819539a0 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b081953960 <col:3> 'void (_Bool)' Function 0x55b08194c250 'write_side2_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x55b0819539e0 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081953980 <col:30> '_Bool' lvalue Var 0x55b081949b38 'side2Failed' '_Bool'
|     |-IfStmt 0x55b081954368 <line:372:3, line:378:3>
|     | |-ImplicitCastExpr 0x55b081953a18 <line:372:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b0819539f8 <col:7> '_Bool' lvalue Var 0x55b081949b38 'side2Failed' '_Bool'
|     | `-CompoundStmt 0x55b081954330 <col:20, line:378:3>
|     |   |-BinaryOperator 0x55b081953cf8 <line:373:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b081953a30 <col:5> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b081953ce0 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b081953cb0 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x55b081953bf0 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b081953af0 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b081953ac0 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b081953a90 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b081953a50 <col:16> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b081953ad8 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b081953aa8 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b081953a70 <col:25> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b081953bd0 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b081953ba0 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b081953b50 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b081953b10 <col:34> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b081953bb8 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b081953b68 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b081953b30 <col:46> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b081953c68 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b081953c50 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b081953c10 <col:54> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b081953c98 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b081953c80 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b081953c30 <col:62> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55b081953fc0 <line:374:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b081953d18 <col:5> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b081953fa8 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b081953f78 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x55b081953eb8 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b081953dd8 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b081953da8 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b081953d78 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b081953d38 <col:16> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b081953dc0 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b081953d90 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b081953d58 <col:25> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b081953e98 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b081953e68 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b081953e38 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b081953df8 <col:34> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b081953e80 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b081953e50 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b081953e18 <col:46> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b081953f30 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b081953f18 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b081953ed8 <col:54> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b081953f60 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b081953f48 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b081953ef8 <col:62> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55b081954288 <line:375:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b081953fe0 <col:5> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b081954270 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b081954240 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x55b081954180 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b0819540a0 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b081954070 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b081954040 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b081954000 <col:15> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b081954088 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b081954058 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b081954020 <col:24> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b081954160 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b081954130 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b081954100 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b0819540c0 <col:33> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b081954148 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b081954118 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b0819540e0 <col:44> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b0819541f8 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b0819541e0 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b0819541a0 <col:52> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b081954228 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b081954210 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b0819541c0 <col:60> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x55b081954300 <line:376:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x55b0819542a8 <col:5> 'msg_t':'char' lvalue Var 0x55b081949c28 'side2_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x55b0819542e8 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55b0819542c8 <col:21> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x55b081954320 <line:377:5>
|     |-BinaryOperator 0x55b0819543d8 <line:379:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081954380 <col:3> 'int8_t':'char' lvalue Var 0x55b081953510 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b0819543c0 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b0819543a0 <col:11> 'int8_t':'char' lvalue Var 0x55b0819490e8 's1s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b081954450 <line:380:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819543f8 <col:3> 'int8_t':'char' lvalue Var 0x55b0819490e8 's1s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081954438 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081954418 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b0819544c8 <line:381:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081954470 <col:3> 'int8_t':'char' lvalue Var 0x55b0819535a0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b0819544b0 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081954490 <col:11> 'int8_t':'char' lvalue Var 0x55b081949520 's2s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b081954540 <line:382:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819544e8 <col:3> 'int8_t':'char' lvalue Var 0x55b081949520 's2s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081954528 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081954508 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b0819545b8 <line:383:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b081954560 <col:3> 'msg_t':'char' lvalue Var 0x55b081953630 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b0819545a0 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081954580 <col:22> 'int8_t':'char' lvalue Var 0x55b081922218 'cs2_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b081954630 <line:384:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819545d8 <col:3> 'int8_t':'char' lvalue Var 0x55b081922218 'cs2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081954618 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b0819545f8 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55b081955288 <line:385:3, line:408:3> has_else
|     | |-BinaryOperator 0x55b081954740 <line:385:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x55b0819546a0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b081954688 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b081954650 <col:13> 'int8_t':'char' lvalue Var 0x55b081953510 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x55b081954718 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x55b081954700 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x55b0819546c8 <col:28> 'int8_t':'char' lvalue Var 0x55b0819535a0 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x55b0819547f8 <col:35, line:387:3>
|     | | `-BinaryOperator 0x55b0819547d8 <line:386:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x55b081954760 <col:5> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x55b0819547b0 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x55b081954780 <col:27> 'int' 0
|     | `-IfStmt 0x55b081955260 <line:388:3, line:408:3> has_else
|     |   |-BinaryOperator 0x55b081954900 <line:388:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x55b081954860 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55b081954848 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55b081954810 <col:13> 'int8_t':'char' lvalue Var 0x55b0819535a0 'side2' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x55b0819548d8 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x55b0819548c0 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x55b081954888 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x55b081954b88 <col:35, line:394:3>
|     |   | `-IfStmt 0x55b081954b60 <line:389:5, line:393:5> has_else
|     |   |   |-BinaryOperator 0x55b081954a10 <line:389:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55b081954970 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55b081954958 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55b081954920 <col:15> 'int8_t':'char' lvalue Var 0x55b081953510 'side1' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x55b0819549e8 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55b0819549d0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55b081954998 <col:30> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x55b081954ac8 <col:37, line:391:5>
|     |   |   | `-BinaryOperator 0x55b081954aa8 <line:390:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x55b081954a30 <col:7> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x55b081954a80 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x55b081954a50 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x55b081954b48 <line:391:12, line:393:5>
|     |   |     `-GotoStmt 0x55b081954b30 <line:392:7, col:12> '_L___0' 0x55b081954ae0
|     |   `-LabelStmt 0x55b081955248 <line:395:3, line:408:3> '_L___0'
|     |     `-IfStmt 0x55b081955220 <line:396:3, line:408:3> has_else
|     |       |-BinaryOperator 0x55b081954ca0 <line:396:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x55b081954c00 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x55b081954be8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x55b081954bb0 <col:13> 'int8_t':'char' lvalue Var 0x55b0819535a0 'side2' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x55b081954c78 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x55b081954c60 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x55b081954c28 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x55b081954f28 <col:35, line:402:3>
|     |       | `-IfStmt 0x55b081954f00 <line:397:5, line:401:5> has_else
|     |       |   |-BinaryOperator 0x55b081954db0 <line:397:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x55b081954d10 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x55b081954cf8 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x55b081954cc0 <col:15> 'int8_t':'char' lvalue Var 0x55b081953510 'side1' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x55b081954d88 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x55b081954d70 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x55b081954d38 <col:30> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x55b081954e68 <col:37, line:399:5>
|     |       |   | `-BinaryOperator 0x55b081954e48 <line:398:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x55b081954dd0 <col:7> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x55b081954e20 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x55b081954df0 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x55b081954ee8 <line:399:12, line:401:5>
|     |       |     `-GotoStmt 0x55b081954ed0 <line:400:7, col:12> '_L' 0x55b081954e80
|     |       `-LabelStmt 0x55b081955208 <line:403:3, line:408:3> '_L'
|     |         `-IfStmt 0x55b0819551e0 <line:404:3, line:408:3> has_else
|     |           |-BinaryOperator 0x55b081954fd8 <line:404:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x55b081954f90 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x55b081954f78 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x55b081954f40 <col:13> 'msg_t':'char' lvalue Var 0x55b081953630 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x55b081954fb8 <col:33> 'int' 1
|     |           |-CompoundStmt 0x55b081955138 <col:36, line:406:3>
|     |           | `-BinaryOperator 0x55b081955118 <line:405:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x55b081954ff8 <col:5> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x55b0819550d8 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x55b0819550c0 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x55b081955018 <col:18> 'int8_t (int8_t)' Function 0x55b08194f860 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x55b081955100 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x55b081955038 <col:32> 'int8_t':'char' lvalue Var 0x55b0819535a0 'side2' 'int8_t':'char'
|     |           `-CompoundStmt 0x55b0819551c8 <line:406:10, line:408:3>
|     |             `-BinaryOperator 0x55b0819551a8 <line:407:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x55b081955150 <col:5> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x55b081955190 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x55b081955170 <col:18> 'int8_t':'char' lvalue Var 0x55b0819535a0 'side2' 'int8_t':'char'
|     |-BinaryOperator 0x55b081955558 <line:409:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819552b0 <col:3> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081955540 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b081955510 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x55b081955450 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x55b081955370 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b081955340 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b081955310 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b0819552d0 <col:14> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b081955358 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b081955328 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b0819552f0 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b081955430 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b081955400 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b0819553d0 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b081955390 <col:37> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b081955418 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b0819553e8 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b0819553b0 <col:49> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b0819554c8 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b0819554b0 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b081955470 <col:57> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b0819554f8 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b0819554e0 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b081955490 <col:70> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x55b081955820 <line:410:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081955578 <col:3> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081955808 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b0819557d8 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x55b081955718 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x55b081955638 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b081955608 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b0819555d8 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b081955598 <col:14> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b081955620 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b0819555f0 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b0819555b8 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b0819556f8 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b0819556c8 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b081955698 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b081955658 <col:37> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b0819556e0 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b0819556b0 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b081955678 <col:49> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b081955790 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b081955778 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b081955738 <col:57> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b0819557c0 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b0819557a8 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b081955758 <col:70> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x55b081955ae8 <line:411:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081955840 <col:3> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081955ad0 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b081955aa0 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x55b0819559e0 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x55b081955900 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b0819558d0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b0819558a0 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b081955860 <col:13> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b0819558e8 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b0819558b8 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b081955880 <col:27> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b0819559c0 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b081955990 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b081955960 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b081955920 <col:36> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b0819559a8 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b081955978 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b081955940 <col:47> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b081955a58 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b081955a40 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b081955a00 <col:55> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b081955a88 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b081955a70 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b081955a20 <col:68> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|     |-BinaryOperator 0x55b081955b60 <line:412:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b081955b08 <col:3> 'msg_t':'char' lvalue Var 0x55b081949c28 'side2_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b081955b48 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081955b28 <col:19> 'int8_t':'char' lvalue Var 0x55b0819536c0 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x55b081955b80 <line:413:3>
|-FunctionDecl 0x55b081955d30 <line:416:1, line:458:1> line:416:6 used Pendulum_prism_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x55b081958100 <line:417:1, line:458:1>
|   |-DeclStmt 0x55b081955e48 <line:418:3, col:22>
|   | `-VarDecl 0x55b081955de0 <col:3, col:10> col:10 used active_side 'int8_t':'char'
|   |-DeclStmt 0x55b081955ed8 <line:419:3, col:14>
|   | `-VarDecl 0x55b081955e70 <col:3, col:10> col:10 used tmp 'int8_t':'char'
|   |-DeclStmt 0x55b081955f68 <line:420:3, col:16>
|   | `-VarDecl 0x55b081955f00 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x55b081955ff8 <line:421:3, col:16>
|   | `-VarDecl 0x55b081955f90 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   `-CompoundStmt 0x55b081958098 <line:423:3, line:457:1>
|     |-BinaryOperator 0x55b081956150 <line:424:3, col:50> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081956010 <col:3> 'int8_t':'char' lvalue Var 0x55b081955e70 'tmp' 'int8_t':'char'
|     | `-CallExpr 0x55b081956128 <col:9, col:50> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x55b081956110 <col:9> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b081956030 <col:9> 'int8_t (unsigned char)' Function 0x55b08194d060 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x55b081956088 <col:34, col:49> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55b081956050 <col:49> 'int' 0
|     |-BinaryOperator 0x55b0819561c8 <line:425:3, col:17> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081956170 <col:3> 'int8_t':'char' lvalue Var 0x55b081955de0 'active_side' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b0819561b0 <col:17> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081956190 <col:17> 'int8_t':'char' lvalue Var 0x55b081955e70 'tmp' 'int8_t':'char'
|     |-BinaryOperator 0x55b081956240 <line:426:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819561e8 <col:3> 'int8_t':'char' lvalue Var 0x55b081955f00 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081956228 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081956208 <col:11> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b0819562b8 <line:427:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081956260 <col:3> 'int8_t':'char' lvalue Var 0x55b081955f90 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b0819562a0 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081956280 <col:11> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b081956330 <line:428:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819562d8 <col:3> 'int8_t':'char' lvalue Var 0x55b081955f00 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081956318 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b0819562f8 <col:11> 'int8_t':'char' lvalue Var 0x55b081949688 's1p_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b0819563a8 <line:429:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081956350 <col:3> 'int8_t':'char' lvalue Var 0x55b081949688 's1p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081956390 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081956370 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b081956420 <line:430:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b0819563c8 <col:3> 'int8_t':'char' lvalue Var 0x55b081955f90 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081956408 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b0819563e8 <col:11> 'int8_t':'char' lvalue Var 0x55b0819497f0 's2p_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b081956498 <line:431:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b081956440 <col:3> 'int8_t':'char' lvalue Var 0x55b0819497f0 's2p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b081956480 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081956460 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55b081957f98 <line:432:3, line:454:3> has_else
|     | |-BinaryOperator 0x55b081956550 <line:432:7, col:22> 'int' '=='
|     | | |-CStyleCastExpr 0x55b081956508 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b0819564f0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b0819564b8 <col:13> 'int8_t':'char' lvalue Var 0x55b081955f00 'side1' 'int8_t':'char'
|     | | `-IntegerLiteral 0x55b081956530 <col:22> 'int' 1
|     | |-CompoundStmt 0x55b081956608 <col:25, line:434:3>
|     | | `-BinaryOperator 0x55b0819565e8 <line:433:5, col:28> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x55b081956570 <col:5> 'int8_t':'char' lvalue Var 0x55b081955de0 'active_side' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x55b0819565c0 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x55b081956590 <col:28> 'int' 1
|     | `-IfStmt 0x55b081957f70 <line:435:3, line:454:3> has_else
|     |   |-BinaryOperator 0x55b0819566b8 <line:435:7, col:22> 'int' '=='
|     |   | |-CStyleCastExpr 0x55b081956670 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55b081956658 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55b081956620 <col:13> 'int8_t':'char' lvalue Var 0x55b081955f90 'side2' 'int8_t':'char'
|     |   | `-IntegerLiteral 0x55b081956698 <col:22> 'int' 1
|     |   |-CompoundStmt 0x55b081956770 <col:25, line:437:3>
|     |   | `-BinaryOperator 0x55b081956750 <line:436:5, col:28> 'int8_t':'char' '='
|     |   |   |-DeclRefExpr 0x55b0819566d8 <col:5> 'int8_t':'char' lvalue Var 0x55b081955de0 'active_side' 'int8_t':'char'
|     |   |   `-CStyleCastExpr 0x55b081956728 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55b0819566f8 <col:28> 'int' 2
|     |   `-IfStmt 0x55b081957f48 <line:438:3, line:454:3> has_else
|     |     |-BinaryOperator 0x55b081956820 <line:438:7, col:22> 'int' '=='
|     |     | |-CStyleCastExpr 0x55b0819567d8 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x55b0819567c0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x55b081956788 <col:13> 'int8_t':'char' lvalue Var 0x55b081955f00 'side1' 'int8_t':'char'
|     |     | `-IntegerLiteral 0x55b081956800 <col:22> 'int' 0
|     |     |-CompoundStmt 0x55b081956aa8 <col:25, line:444:3>
|     |     | `-IfStmt 0x55b081956a80 <line:439:5, line:443:5> has_else
|     |     |   |-BinaryOperator 0x55b081956930 <line:439:9, col:30> 'int' '=='
|     |     |   | |-CStyleCastExpr 0x55b081956890 <col:9, col:15> 'int' <IntegralCast>
|     |     |   | | `-ImplicitCastExpr 0x55b081956878 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   | |   `-DeclRefExpr 0x55b081956840 <col:15> 'int8_t':'char' lvalue Var 0x55b081955f90 'side2' 'int8_t':'char'
|     |     |   | `-CStyleCastExpr 0x55b081956908 <col:24, col:30> 'int' <IntegralCast>
|     |     |   |   `-ImplicitCastExpr 0x55b0819568f0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   |     `-DeclRefExpr 0x55b0819568b8 <col:30> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |     |   |-CompoundStmt 0x55b0819569e8 <col:37, line:441:5>
|     |     |   | `-BinaryOperator 0x55b0819569c8 <line:440:7, col:30> 'int8_t':'char' '='
|     |     |   |   |-DeclRefExpr 0x55b081956950 <col:7> 'int8_t':'char' lvalue Var 0x55b081955de0 'active_side' 'int8_t':'char'
|     |     |   |   `-CStyleCastExpr 0x55b0819569a0 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |     |   |     `-IntegerLiteral 0x55b081956970 <col:30> 'int' 1
|     |     |   `-CompoundStmt 0x55b081956a68 <line:441:12, line:443:5>
|     |     |     `-GotoStmt 0x55b081956a50 <line:442:7, col:12> '_L' 0x55b081956a00
|     |     `-LabelStmt 0x55b081957f30 <line:445:3, line:454:3> '_L'
|     |       `-IfStmt 0x55b081957f08 <line:446:3, line:454:3> has_else
|     |         |-BinaryOperator 0x55b081957be0 <line:446:7, col:28> 'int' '=='
|     |         | |-CStyleCastExpr 0x55b081956b10 <col:7, col:13> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x55b081956af8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x55b081956ac0 <col:13> 'int8_t':'char' lvalue Var 0x55b081955f00 'side1' 'int8_t':'char'
|     |         | `-CStyleCastExpr 0x55b081956b88 <col:22, col:28> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x55b081956b70 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x55b081956b38 <col:28> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|     |         |-CompoundStmt 0x55b081957e40 <col:35, line:452:3>
|     |         | `-IfStmt 0x55b081957e18 <line:447:5, line:451:5> has_else
|     |         |   |-BinaryOperator 0x55b081957c98 <line:447:9, col:24> 'int' '=='
|     |         |   | |-CStyleCastExpr 0x55b081957c50 <col:9, col:15> 'int' <IntegralCast>
|     |         |   | | `-ImplicitCastExpr 0x55b081957c38 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |   | |   `-DeclRefExpr 0x55b081957c00 <col:15> 'int8_t':'char' lvalue Var 0x55b081955f90 'side2' 'int8_t':'char'
|     |         |   | `-IntegerLiteral 0x55b081957c78 <col:24> 'int' 0
|     |         |   |-CompoundStmt 0x55b081957d50 <col:27, line:449:5>
|     |         |   | `-BinaryOperator 0x55b081957d30 <line:448:7, col:30> 'int8_t':'char' '='
|     |         |   |   |-DeclRefExpr 0x55b081957cb8 <col:7> 'int8_t':'char' lvalue Var 0x55b081955de0 'active_side' 'int8_t':'char'
|     |         |   |   `-CStyleCastExpr 0x55b081957d08 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |   |     `-IntegerLiteral 0x55b081957cd8 <col:30> 'int' 2
|     |         |   `-CompoundStmt 0x55b081957e00 <line:449:12, line:451:5>
|     |         |     `-BinaryOperator 0x55b081957de0 <line:450:7, col:30> 'int8_t':'char' '='
|     |         |       |-DeclRefExpr 0x55b081957d68 <col:7> 'int8_t':'char' lvalue Var 0x55b081955de0 'active_side' 'int8_t':'char'
|     |         |       `-CStyleCastExpr 0x55b081957db8 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |         `-IntegerLiteral 0x55b081957d88 <col:30> 'int' 0
|     |         `-CompoundStmt 0x55b081957ef0 <line:452:10, line:454:3>
|     |           `-BinaryOperator 0x55b081957ed0 <line:453:5, col:28> 'int8_t':'char' '='
|     |             |-DeclRefExpr 0x55b081957e58 <col:5> 'int8_t':'char' lvalue Var 0x55b081955de0 'active_side' 'int8_t':'char'
|     |             `-CStyleCastExpr 0x55b081957ea8 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |               `-IntegerLiteral 0x55b081957e78 <col:28> 'int' 0
|     |-CallExpr 0x55b081958048 <line:455:3, col:40> 'void'
|     | |-ImplicitCastExpr 0x55b081958030 <col:3> 'void (*)(int8_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b081957fc0 <col:3> 'void (int8_t)' Function 0x55b08194ccd0 'write_active_side_history' 'void (int8_t)'
|     | `-ImplicitCastExpr 0x55b081958070 <col:29> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b081957fe0 <col:29> 'int8_t':'char' lvalue Var 0x55b081955de0 'active_side' 'int8_t':'char'
|     `-ReturnStmt 0x55b081958088 <line:456:3>
|-VarDecl 0x55b081958340 <line:459:1, col:210> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x55b0819584f8 <col:27, col:210> 'void (*[4])(void)'
|   |-UnaryOperator 0x55b0819583c8 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55b0819583a8 <col:36> 'void (void)' Function 0x55b08194fd20 'Console_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x55b081958400 <col:72, col:74> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55b0819583e0 <col:74> 'void (void)' Function 0x55b081950870 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x55b081958438 <col:122, col:124> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55b081958418 <col:124> 'void (void)' Function 0x55b081953460 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   `-UnaryOperator 0x55b081958470 <col:172, col:174> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x55b081958450 <col:174> 'void (void)' Function 0x55b081955d30 'Pendulum_prism_task_each_pals_period' 'void (void)'
|-FunctionDecl 0x55b0819585f8 <line:460:1, line:578:1> line:460:5 used check 'int (void)'
| `-CompoundStmt 0x55b08195e148 <line:461:1, line:578:1>
|   |-DeclStmt 0x55b081958718 <line:462:3, col:11>
|   | `-VarDecl 0x55b0819586b0 <col:3, col:7> col:7 used tmp 'int'
|   |-DeclStmt 0x55b0819587a8 <line:463:3, col:17>
|   | `-VarDecl 0x55b081958740 <col:3, col:9> col:9 used tmp___0 'msg_t':'char'
|   |-DeclStmt 0x55b081958838 <line:464:3, col:17>
|   | `-VarDecl 0x55b0819587d0 <col:3, col:9> col:9 used tmp___1 '_Bool'
|   |-DeclStmt 0x55b0819588c8 <line:465:3, col:17>
|   | `-VarDecl 0x55b081958860 <col:3, col:9> col:9 used tmp___2 '_Bool'
|   |-DeclStmt 0x55b081958958 <line:466:3, col:17>
|   | `-VarDecl 0x55b0819588f0 <col:3, col:9> col:9 used tmp___3 '_Bool'
|   |-DeclStmt 0x55b0819589e8 <line:467:3, col:17>
|   | `-VarDecl 0x55b081958980 <col:3, col:9> col:9 used tmp___4 '_Bool'
|   |-DeclStmt 0x55b081958a78 <line:468:3, col:18>
|   | `-VarDecl 0x55b081958a10 <col:3, col:10> col:10 used tmp___5 'int8_t':'char'
|   |-DeclStmt 0x55b081958b08 <line:469:3, col:17>
|   | `-VarDecl 0x55b081958aa0 <col:3, col:9> col:9 used tmp___6 '_Bool'
|   |-DeclStmt 0x55b081958b98 <line:470:3, col:17>
|   | `-VarDecl 0x55b081958b30 <col:3, col:9> col:9 used tmp___7 '_Bool'
|   |-DeclStmt 0x55b081958fd8 <line:471:3, col:17>
|   | `-VarDecl 0x55b081958f70 <col:3, col:9> col:9 used tmp___8 '_Bool'
|   |-DeclStmt 0x55b081959068 <line:472:3, col:18>
|   | `-VarDecl 0x55b081959000 <col:3, col:10> col:10 used tmp___9 'int8_t':'char'
|   |-DeclStmt 0x55b0819590f8 <line:473:3, col:18>
|   | `-VarDecl 0x55b081959090 <col:3, col:9> col:9 used tmp___10 '_Bool'
|   |-DeclStmt 0x55b081959188 <line:474:3, col:18>
|   | `-VarDecl 0x55b081959120 <col:3, col:9> col:9 used tmp___11 '_Bool'
|   |-DeclStmt 0x55b081959218 <line:475:3, col:18>
|   | `-VarDecl 0x55b0819591b0 <col:3, col:9> col:9 used tmp___12 '_Bool'
|   |-DeclStmt 0x55b0819592a8 <line:476:3, col:18>
|   | `-VarDecl 0x55b081959240 <col:3, col:9> col:9 used tmp___13 'msg_t':'char'
|   |-DeclStmt 0x55b081959338 <line:477:3, col:18>
|   | `-VarDecl 0x55b0819592d0 <col:3, col:9> col:9 used tmp___14 '_Bool'
|   |-DeclStmt 0x55b0819593c8 <line:478:3, col:18>
|   | `-VarDecl 0x55b081959360 <col:3, col:9> col:9 used tmp___15 '_Bool'
|   |-DeclStmt 0x55b081959458 <line:479:3, col:18>
|   | `-VarDecl 0x55b0819593f0 <col:3, col:9> col:9 used tmp___16 '_Bool'
|   |-DeclStmt 0x55b0819594e8 <line:480:3, col:18>
|   | `-VarDecl 0x55b081959480 <col:3, col:9> col:9 used tmp___17 '_Bool'
|   |-DeclStmt 0x55b081959578 <line:481:3, col:19>
|   | `-VarDecl 0x55b081959510 <col:3, col:10> col:10 used tmp___18 'int8_t':'char'
|   |-DeclStmt 0x55b081959608 <line:482:3, col:19>
|   | `-VarDecl 0x55b0819595a0 <col:3, col:10> col:10 used tmp___19 'int8_t':'char'
|   |-DeclStmt 0x55b081959698 <line:483:3, col:19>
|   | `-VarDecl 0x55b081959630 <col:3, col:10> col:10 used tmp___20 'int8_t':'char'
|   `-CompoundStmt 0x55b08195e0e0 <line:485:3, line:577:1>
|     |-IfStmt 0x55b0819598e0 <line:486:3, line:493:3> has_else
|     | |-UnaryOperator 0x55b0819596e8 <line:486:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b0819596d0 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b0819596b0 <col:9> '_Bool' lvalue Var 0x55b081949ac0 'side1Failed' '_Bool'
|     | |-CompoundStmt 0x55b081959760 <col:22, line:488:3>
|     | | `-BinaryOperator 0x55b081959740 <line:487:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x55b081959700 <col:5> 'int' lvalue Var 0x55b0819586b0 'tmp' 'int'
|     | |   `-IntegerLiteral 0x55b081959720 <col:11> 'int' 1
|     | `-IfStmt 0x55b0819598b8 <line:489:3, line:493:3> has_else
|     |   |-UnaryOperator 0x55b0819597b0 <line:489:7, col:9> 'int' prefix '!' cannot overflow
|     |   | `-ImplicitCastExpr 0x55b081959798 <col:9> '_Bool' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55b081959778 <col:9> '_Bool' lvalue Var 0x55b081949b38 'side2Failed' '_Bool'
|     |   |-CompoundStmt 0x55b081959828 <col:22, line:491:3>
|     |   | `-BinaryOperator 0x55b081959808 <line:490:5, col:11> 'int' '='
|     |   |   |-DeclRefExpr 0x55b0819597c8 <col:5> 'int' lvalue Var 0x55b0819586b0 'tmp' 'int'
|     |   |   `-IntegerLiteral 0x55b0819597e8 <col:11> 'int' 1
|     |   `-CompoundStmt 0x55b0819598a0 <line:491:10, line:493:3>
|     |     `-BinaryOperator 0x55b081959880 <line:492:5, col:11> 'int' '='
|     |       |-DeclRefExpr 0x55b081959840 <col:5> 'int' lvalue Var 0x55b0819586b0 'tmp' 'int'
|     |       `-IntegerLiteral 0x55b081959860 <col:11> 'int' 0
|     |-CallExpr 0x55b0819599e8 <line:494:3, col:32> 'void'
|     | |-ImplicitCastExpr 0x55b0819599d0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b081959908 <col:3> 'void (int)' Function 0x55b081949f00 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x55b081959a10 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x55b081959970 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x55b081959958 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x55b081959928 <col:29> 'int' lvalue Var 0x55b0819586b0 'tmp' 'int'
|     |-BinaryOperator 0x55b081959b40 <line:495:3, col:59> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b081959a28 <col:3> 'msg_t':'char' lvalue Var 0x55b081958740 'tmp___0' 'msg_t':'char'
|     | `-CallExpr 0x55b081959b18 <col:13, col:59> 'msg_t':'char'
|     |   |-ImplicitCastExpr 0x55b081959b00 <col:13> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b081959a48 <col:13> 'msg_t (unsigned char)' Function 0x55b08194df20 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   `-CStyleCastExpr 0x55b081959aa0 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55b081959a68 <col:58> 'int' 1
|     |-IfStmt 0x55b08195aa68 <line:496:3, line:524:3>
|     | |-UnaryOperator 0x55b081959b98 <line:496:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b081959b80 <col:9> 'msg_t':'char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b081959b60 <col:9> 'msg_t':'char' lvalue Var 0x55b081958740 'tmp___0' 'msg_t':'char'
|     | `-CompoundStmt 0x55b08195aa48 <col:18, line:524:3>
|     |   |-BinaryOperator 0x55b081959cc0 <line:497:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x55b081959bb0 <col:5> '_Bool' lvalue Var 0x55b0819587d0 'tmp___1' '_Bool'
|     |   | `-CallExpr 0x55b081959c98 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x55b081959c80 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b081959bd0 <col:15> '_Bool (unsigned char)' Function 0x55b08194a980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x55b081959c28 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55b081959bf0 <col:56> 'int' 1
|     |   `-IfStmt 0x55b08195aa30 <line:498:5, line:523:5>
|     |     |-UnaryOperator 0x55b081959d18 <line:498:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x55b081959d00 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b081959ce0 <col:11> '_Bool' lvalue Var 0x55b0819587d0 'tmp___1' '_Bool'
|     |     `-CompoundStmt 0x55b08195aa10 <col:20, line:523:5>
|     |       |-BinaryOperator 0x55b081959e10 <line:499:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x55b081959d30 <col:7> '_Bool' lvalue Var 0x55b081958860 'tmp___2' '_Bool'
|     |       | `-CallExpr 0x55b081959de8 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55b081959dd0 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b081959d50 <col:17> '_Bool (unsigned char)' Function 0x55b08194a980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55b081959da8 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55b081959d70 <col:58> 'int' 0
|     |       `-IfStmt 0x55b08195a9f8 <line:500:7, line:522:7>
|     |         |-UnaryOperator 0x55b081959e68 <line:500:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x55b081959e50 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x55b081959e30 <col:13> '_Bool' lvalue Var 0x55b081958860 'tmp___2' '_Bool'
|     |         `-CompoundStmt 0x55b08195a9d8 <col:22, line:522:7>
|     |           |-BinaryOperator 0x55b081959f80 <line:501:9, col:61> '_Bool' '='
|     |           | |-DeclRefExpr 0x55b081959e80 <col:9> '_Bool' lvalue Var 0x55b0819588f0 'tmp___3' '_Bool'
|     |           | `-CallExpr 0x55b081959f38 <col:19, col:61> '_Bool'
|     |           |   |-ImplicitCastExpr 0x55b081959f20 <col:19> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55b081959ea0 <col:19> '_Bool (unsigned char)' Function 0x55b08194c560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x55b081959ef8 <col:45, col:60> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x55b081959ec0 <col:60> 'int' 1
|     |           `-IfStmt 0x55b08195a9c0 <line:502:9, line:521:9>
|     |             |-UnaryOperator 0x55b081959fd8 <line:502:13, col:15> 'int' prefix '!' cannot overflow
|     |             | `-ImplicitCastExpr 0x55b081959fc0 <col:15> '_Bool' <LValueToRValue>
|     |             |   `-DeclRefExpr 0x55b081959fa0 <col:15> '_Bool' lvalue Var 0x55b0819588f0 'tmp___3' '_Bool'
|     |             `-CompoundStmt 0x55b08195a9a0 <col:24, line:521:9>
|     |               |-BinaryOperator 0x55b08195a0d0 <line:503:11, col:63> '_Bool' '='
|     |               | |-DeclRefExpr 0x55b081959ff0 <col:11> '_Bool' lvalue Var 0x55b081958980 'tmp___4' '_Bool'
|     |               | `-CallExpr 0x55b08195a0a8 <col:21, col:63> '_Bool'
|     |               |   |-ImplicitCastExpr 0x55b08195a090 <col:21> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x55b08195a010 <col:21> '_Bool (unsigned char)' Function 0x55b08194c560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |               |   `-CStyleCastExpr 0x55b08195a068 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x55b08195a030 <col:62> 'int' 0
|     |               `-IfStmt 0x55b08195a988 <line:504:11, line:520:11>
|     |                 |-UnaryOperator 0x55b08195a128 <line:504:15, col:17> 'int' prefix '!' cannot overflow
|     |                 | `-ImplicitCastExpr 0x55b08195a110 <col:17> '_Bool' <LValueToRValue>
|     |                 |   `-DeclRefExpr 0x55b08195a0f0 <col:17> '_Bool' lvalue Var 0x55b081958980 'tmp___4' '_Bool'
|     |                 `-CompoundStmt 0x55b08195a960 <col:26, line:520:11>
|     |                   |-IfStmt 0x55b08195a3b8 <line:505:13, line:509:13>
|     |                   | |-UnaryOperator 0x55b08195a218 <line:505:17, col:44> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x55b08195a1f8 <col:19, col:44> 'int'
|     |                   | |   `-BinaryOperator 0x55b08195a1d8 <col:20, col:43> 'int' '=='
|     |                   | |     |-CStyleCastExpr 0x55b08195a190 <col:20, col:26> 'int' <IntegralCast>
|     |                   | |     | `-ImplicitCastExpr 0x55b08195a178 <col:26> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |     |   `-DeclRefExpr 0x55b08195a140 <col:26> 'msg_t':'char' lvalue Var 0x55b081949bb0 'side1_written' 'msg_t':'char'
|     |                   | |     `-IntegerLiteral 0x55b08195a1b8 <col:43> 'int' 1
|     |                   | `-CompoundStmt 0x55b08195a3a0 <col:47, line:509:13>
|     |                   |   `-IfStmt 0x55b08195a388 <line:506:15, line:508:15>
|     |                   |     |-UnaryOperator 0x55b08195a308 <line:506:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x55b08195a2e8 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x55b08195a2c8 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x55b08195a280 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x55b08195a268 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x55b08195a230 <col:28> 'msg_t':'char' lvalue Var 0x55b081949bb0 'side1_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x55b08195a2a8 <col:45> 'int' 0
|     |                   |     `-CompoundStmt 0x55b08195a370 <col:49, line:508:15>
|     |                   |       `-ReturnStmt 0x55b08195a360 <line:507:17, col:26>
|     |                   |         `-ParenExpr 0x55b08195a340 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x55b08195a320 <col:25> 'int' 0
|     |                   |-IfStmt 0x55b08195a680 <line:510:13, line:514:13>
|     |                   | |-UnaryOperator 0x55b08195a4e0 <line:510:17, col:48> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x55b08195a4c0 <col:19, col:48> 'int'
|     |                   | |   `-UnaryOperator 0x55b08195a4a8 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                   | |     `-ParenExpr 0x55b08195a488 <col:22, col:47> 'int'
|     |                   | |       `-BinaryOperator 0x55b08195a468 <col:23, col:46> 'int' '=='
|     |                   | |         |-CStyleCastExpr 0x55b08195a420 <col:23, col:29> 'int' <IntegralCast>
|     |                   | |         | `-ImplicitCastExpr 0x55b08195a408 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |         |   `-DeclRefExpr 0x55b08195a3d0 <col:29> 'msg_t':'char' lvalue Var 0x55b081949bb0 'side1_written' 'msg_t':'char'
|     |                   | |         `-IntegerLiteral 0x55b08195a448 <col:46> 'int' 0
|     |                   | `-CompoundStmt 0x55b08195a668 <col:51, line:514:13>
|     |                   |   `-IfStmt 0x55b08195a650 <line:511:15, line:513:15>
|     |                   |     |-UnaryOperator 0x55b08195a5d0 <line:511:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x55b08195a5b0 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x55b08195a590 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x55b08195a548 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x55b08195a530 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x55b08195a4f8 <col:28> 'msg_t':'char' lvalue Var 0x55b081949c28 'side2_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x55b08195a570 <col:45> 'int' 1
|     |                   |     `-CompoundStmt 0x55b08195a638 <col:49, line:513:15>
|     |                   |       `-ReturnStmt 0x55b08195a628 <line:512:17, col:26>
|     |                   |         `-ParenExpr 0x55b08195a608 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x55b08195a5e8 <col:25> 'int' 0
|     |                   `-IfStmt 0x55b08195a948 <line:515:13, line:519:13>
|     |                     |-UnaryOperator 0x55b08195a7a8 <line:515:17, col:48> 'int' prefix '!' cannot overflow
|     |                     | `-ParenExpr 0x55b08195a788 <col:19, col:48> 'int'
|     |                     |   `-UnaryOperator 0x55b08195a770 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                     |     `-ParenExpr 0x55b08195a750 <col:22, col:47> 'int'
|     |                     |       `-BinaryOperator 0x55b08195a730 <col:23, col:46> 'int' '=='
|     |                     |         |-CStyleCastExpr 0x55b08195a6e8 <col:23, col:29> 'int' <IntegralCast>
|     |                     |         | `-ImplicitCastExpr 0x55b08195a6d0 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                     |         |   `-DeclRefExpr 0x55b08195a698 <col:29> 'msg_t':'char' lvalue Var 0x55b081949bb0 'side1_written' 'msg_t':'char'
|     |                     |         `-IntegerLiteral 0x55b08195a710 <col:46> 'int' 1
|     |                     `-CompoundStmt 0x55b08195a930 <col:51, line:519:13>
|     |                       `-IfStmt 0x55b08195a918 <line:516:15, line:518:15>
|     |                         |-UnaryOperator 0x55b08195a898 <line:516:19, col:46> 'int' prefix '!' cannot overflow
|     |                         | `-ParenExpr 0x55b08195a878 <col:21, col:46> 'int'
|     |                         |   `-BinaryOperator 0x55b08195a858 <col:22, col:45> 'int' '=='
|     |                         |     |-CStyleCastExpr 0x55b08195a810 <col:22, col:28> 'int' <IntegralCast>
|     |                         |     | `-ImplicitCastExpr 0x55b08195a7f8 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                         |     |   `-DeclRefExpr 0x55b08195a7c0 <col:28> 'msg_t':'char' lvalue Var 0x55b081949c28 'side2_written' 'msg_t':'char'
|     |                         |     `-IntegerLiteral 0x55b08195a838 <col:45> 'int' 0
|     |                         `-CompoundStmt 0x55b08195a900 <col:49, line:518:15>
|     |                           `-ReturnStmt 0x55b08195a8f0 <line:517:17, col:26>
|     |                             `-ParenExpr 0x55b08195a8d0 <col:24, col:26> 'int'
|     |                               `-IntegerLiteral 0x55b08195a8b0 <col:25> 'int' 0
|     |-BinaryOperator 0x55b08195ab60 <line:525:3, col:55> '_Bool' '='
|     | |-DeclRefExpr 0x55b08195aa80 <col:3> '_Bool' lvalue Var 0x55b081958b30 'tmp___7' '_Bool'
|     | `-CallExpr 0x55b08195ab38 <col:13, col:55> '_Bool'
|     |   |-ImplicitCastExpr 0x55b08195ab20 <col:13> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b08195aaa0 <col:13> '_Bool (unsigned char)' Function 0x55b08194a980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x55b08195aaf8 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55b08195aac0 <col:54> 'int' 1
|     |-IfStmt 0x55b08195c9f8 <line:526:3, line:540:3>
|     | |-ImplicitCastExpr 0x55b08195aba0 <line:526:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b08195ab80 <col:7> '_Bool' lvalue Var 0x55b081958b30 'tmp___7' '_Bool'
|     | `-CompoundStmt 0x55b08195c9d8 <col:16, line:540:3>
|     |   |-BinaryOperator 0x55b08195ac98 <line:527:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x55b08195abb8 <col:5> '_Bool' lvalue Var 0x55b081958f70 'tmp___8' '_Bool'
|     |   | `-CallExpr 0x55b08195ac70 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x55b08195ac58 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b08195abd8 <col:15> '_Bool (unsigned char)' Function 0x55b08194c560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x55b08195ac30 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55b08195abf8 <col:56> 'int' 1
|     |   `-IfStmt 0x55b08195c9c0 <line:528:5, line:539:5>
|     |     |-UnaryOperator 0x55b08195acf0 <line:528:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x55b08195acd8 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b08195acb8 <col:11> '_Bool' lvalue Var 0x55b081958f70 'tmp___8' '_Bool'
|     |     `-CompoundStmt 0x55b08195c990 <col:20, line:539:5>
|     |       |-BinaryOperator 0x55b08195ade8 <line:529:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x55b08195ad08 <col:7> 'int8_t':'char' lvalue Var 0x55b081958a10 'tmp___5' 'int8_t':'char'
|     |       | `-CallExpr 0x55b08195adc0 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x55b08195ada8 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b08195ad28 <col:17> 'int8_t (unsigned char)' Function 0x55b08194d060 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55b08195ad80 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55b08195ad48 <col:57> 'int' 0
|     |       |-IfStmt 0x55b08195af60 <line:530:7, line:532:7>
|     |       | |-UnaryOperator 0x55b08195aee0 <line:530:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x55b08195aec0 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x55b08195aea0 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x55b08195ae58 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x55b08195ae40 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x55b08195ae08 <col:20> 'int8_t':'char' lvalue Var 0x55b081958a10 'tmp___5' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x55b08195ae80 <col:31> 'int' 2
|     |       | `-CompoundStmt 0x55b08195af48 <col:35, line:532:7>
|     |       |   `-ReturnStmt 0x55b08195af38 <line:531:9, col:18>
|     |       |     `-ParenExpr 0x55b08195af18 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x55b08195aef8 <col:17> 'int' 0
|     |       |-BinaryOperator 0x55b08195c780 <line:533:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x55b08195c6a0 <col:7> '_Bool' lvalue Var 0x55b081958aa0 'tmp___6' '_Bool'
|     |       | `-CallExpr 0x55b08195c758 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55b08195c740 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b08195c6c0 <col:17> '_Bool (unsigned char)' Function 0x55b08194c560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55b08195c718 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55b08195c6e0 <col:58> 'int' 0
|     |       `-IfStmt 0x55b08195c978 <line:534:7, line:538:7>
|     |         |-UnaryOperator 0x55b08195c7d8 <line:534:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x55b08195c7c0 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x55b08195c7a0 <col:13> '_Bool' lvalue Var 0x55b081958aa0 'tmp___6' '_Bool'
|     |         `-CompoundStmt 0x55b08195c960 <col:22, line:538:7>
|     |           `-IfStmt 0x55b08195c948 <line:535:9, line:537:9>
|     |             |-UnaryOperator 0x55b08195c8c8 <line:535:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x55b08195c8a8 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x55b08195c888 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x55b08195c840 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x55b08195c828 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x55b08195c7f0 <col:22> 'msg_t':'char' lvalue Var 0x55b081949c28 'side2_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x55b08195c868 <col:39> 'int' 1
|     |             `-CompoundStmt 0x55b08195c930 <col:43, line:537:9>
|     |               `-ReturnStmt 0x55b08195c920 <line:536:11, col:20>
|     |                 `-ParenExpr 0x55b08195c900 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x55b08195c8e0 <col:19> 'int' 0
|     |-BinaryOperator 0x55b08195caf0 <line:541:3, col:56> '_Bool' '='
|     | |-DeclRefExpr 0x55b08195ca10 <col:3> '_Bool' lvalue Var 0x55b081959120 'tmp___11' '_Bool'
|     | `-CallExpr 0x55b08195cac8 <col:14, col:56> '_Bool'
|     |   |-ImplicitCastExpr 0x55b08195cab0 <col:14> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b08195ca30 <col:14> '_Bool (unsigned char)' Function 0x55b08194a980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x55b08195ca88 <col:40, col:55> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55b08195ca50 <col:55> 'int' 1
|     |-IfStmt 0x55b08195d260 <line:542:3, line:556:3>
|     | |-UnaryOperator 0x55b08195cb48 <line:542:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b08195cb30 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b08195cb10 <col:9> '_Bool' lvalue Var 0x55b081959120 'tmp___11' '_Bool'
|     | `-CompoundStmt 0x55b08195d240 <col:19, line:556:3>
|     |   |-BinaryOperator 0x55b08195cc40 <line:543:5, col:58> '_Bool' '='
|     |   | |-DeclRefExpr 0x55b08195cb60 <col:5> '_Bool' lvalue Var 0x55b0819591b0 'tmp___12' '_Bool'
|     |   | `-CallExpr 0x55b08195cc18 <col:16, col:58> '_Bool'
|     |   |   |-ImplicitCastExpr 0x55b08195cc00 <col:16> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b08195cb80 <col:16> '_Bool (unsigned char)' Function 0x55b08194c560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x55b08195cbd8 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55b08195cba0 <col:57> 'int' 1
|     |   `-IfStmt 0x55b08195d228 <line:544:5, line:555:5>
|     |     |-ImplicitCastExpr 0x55b08195cc80 <line:544:9> '_Bool' <LValueToRValue>
|     |     | `-DeclRefExpr 0x55b08195cc60 <col:9> '_Bool' lvalue Var 0x55b0819591b0 'tmp___12' '_Bool'
|     |     `-CompoundStmt 0x55b08195d1f8 <col:19, line:555:5>
|     |       |-BinaryOperator 0x55b08195cd78 <line:545:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x55b08195cc98 <col:7> 'int8_t':'char' lvalue Var 0x55b081959000 'tmp___9' 'int8_t':'char'
|     |       | `-CallExpr 0x55b08195cd50 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x55b08195cd38 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b08195ccb8 <col:17> 'int8_t (unsigned char)' Function 0x55b08194d060 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55b08195cd10 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55b08195ccd8 <col:57> 'int' 0
|     |       |-IfStmt 0x55b08195cef0 <line:546:7, line:548:7>
|     |       | |-UnaryOperator 0x55b08195ce70 <line:546:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x55b08195ce50 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x55b08195ce30 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x55b08195cde8 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x55b08195cdd0 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x55b08195cd98 <col:20> 'int8_t':'char' lvalue Var 0x55b081959000 'tmp___9' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x55b08195ce10 <col:31> 'int' 1
|     |       | `-CompoundStmt 0x55b08195ced8 <col:35, line:548:7>
|     |       |   `-ReturnStmt 0x55b08195cec8 <line:547:9, col:18>
|     |       |     `-ParenExpr 0x55b08195cea8 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x55b08195ce88 <col:17> 'int' 0
|     |       |-BinaryOperator 0x55b08195cfe8 <line:549:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x55b08195cf08 <col:7> '_Bool' lvalue Var 0x55b081959090 'tmp___10' '_Bool'
|     |       | `-CallExpr 0x55b08195cfc0 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55b08195cfa8 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b08195cf28 <col:18> '_Bool (unsigned char)' Function 0x55b08194a980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55b08195cf80 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55b08195cf48 <col:59> 'int' 0
|     |       `-IfStmt 0x55b08195d1e0 <line:550:7, line:554:7>
|     |         |-UnaryOperator 0x55b08195d040 <line:550:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x55b08195d028 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x55b08195d008 <col:13> '_Bool' lvalue Var 0x55b081959090 'tmp___10' '_Bool'
|     |         `-CompoundStmt 0x55b08195d1c8 <col:23, line:554:7>
|     |           `-IfStmt 0x55b08195d1b0 <line:551:9, line:553:9>
|     |             |-UnaryOperator 0x55b08195d130 <line:551:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x55b08195d110 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x55b08195d0f0 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x55b08195d0a8 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x55b08195d090 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x55b08195d058 <col:22> 'msg_t':'char' lvalue Var 0x55b081949bb0 'side1_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x55b08195d0d0 <col:39> 'int' 1
|     |             `-CompoundStmt 0x55b08195d198 <col:43, line:553:9>
|     |               `-ReturnStmt 0x55b08195d188 <line:552:11, col:20>
|     |                 `-ParenExpr 0x55b08195d168 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x55b08195d148 <col:19> 'int' 0
|     |-BinaryOperator 0x55b08195d358 <line:557:3, col:55> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b08195d278 <col:3> 'int8_t':'char' lvalue Var 0x55b081959630 'tmp___20' 'int8_t':'char'
|     | `-CallExpr 0x55b08195d330 <col:14, col:55> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x55b08195d318 <col:14> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b08195d298 <col:14> 'int8_t (unsigned char)' Function 0x55b08194d060 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x55b08195d2f0 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x55b08195d2b8 <col:54> 'int' 2
|     |-IfStmt 0x55b08195e078 <line:558:3, line:575:3>
|     | |-BinaryOperator 0x55b08195d428 <line:558:7, col:25> 'int' '>'
|     | | |-CStyleCastExpr 0x55b08195d3c8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b08195d3b0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b08195d378 <col:13> 'int8_t':'char' lvalue Var 0x55b081959630 'tmp___20' 'int8_t':'char'
|     | | `-UnaryOperator 0x55b08195d410 <col:24, col:25> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55b08195d3f0 <col:25> 'int' 2
|     | `-CompoundStmt 0x55b08195e058 <col:28, line:575:3>
|     |   |-BinaryOperator 0x55b08195d528 <line:559:5, col:62> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x55b08195d448 <col:5> 'msg_t':'char' lvalue Var 0x55b081959240 'tmp___13' 'msg_t':'char'
|     |   | `-CallExpr 0x55b08195d500 <col:16, col:62> 'msg_t':'char'
|     |   |   |-ImplicitCastExpr 0x55b08195d4e8 <col:16> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b08195d468 <col:16> 'msg_t (unsigned char)' Function 0x55b08194df20 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   |   `-CStyleCastExpr 0x55b08195d4c0 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x55b08195d488 <col:61> 'int' 2
|     |   `-IfStmt 0x55b08195e040 <line:560:5, line:574:5>
|     |     |-UnaryOperator 0x55b08195d580 <line:560:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x55b08195d568 <col:11> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b08195d548 <col:11> 'msg_t':'char' lvalue Var 0x55b081959240 'tmp___13' 'msg_t':'char'
|     |     `-CompoundStmt 0x55b08195e018 <col:21, line:574:5>
|     |       |-BinaryOperator 0x55b08195d678 <line:561:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x55b08195d598 <col:7> '_Bool' lvalue Var 0x55b0819592d0 'tmp___14' '_Bool'
|     |       | `-CallExpr 0x55b08195d650 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55b08195d638 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b08195d5b8 <col:18> '_Bool (unsigned char)' Function 0x55b08194a980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55b08195d610 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55b08195d5d8 <col:59> 'int' 2
|     |       |-BinaryOperator 0x55b08195d790 <line:562:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x55b08195d6b0 <col:7> '_Bool' lvalue Var 0x55b081959360 'tmp___15' '_Bool'
|     |       | `-CallExpr 0x55b08195d768 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55b08195d750 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b08195d6d0 <col:18> '_Bool (unsigned char)' Function 0x55b08194a980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x55b08195d728 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55b08195d6f0 <col:59> 'int' 1
|     |       `-IfStmt 0x55b08195e000 <line:563:7, line:573:7>
|     |         |-BinaryOperator 0x55b08195d8a0 <line:563:11, col:35> 'int' '=='
|     |         | |-CStyleCastExpr 0x55b08195d800 <col:11, col:17> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x55b08195d7e8 <col:17> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x55b08195d7b0 <col:17> '_Bool' lvalue Var 0x55b0819592d0 'tmp___14' '_Bool'
|     |         | `-CStyleCastExpr 0x55b08195d878 <col:29, col:35> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x55b08195d860 <col:35> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x55b08195d828 <col:35> '_Bool' lvalue Var 0x55b081959360 'tmp___15' '_Bool'
|     |         `-CompoundStmt 0x55b08195dfd8 <col:45, line:573:7>
|     |           |-BinaryOperator 0x55b08195d9a0 <line:564:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x55b08195d8c0 <col:9> '_Bool' lvalue Var 0x55b0819593f0 'tmp___16' '_Bool'
|     |           | `-CallExpr 0x55b08195d978 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x55b08195d960 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55b08195d8e0 <col:20> '_Bool (unsigned char)' Function 0x55b08194c560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x55b08195d938 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x55b08195d900 <col:61> 'int' 2
|     |           |-BinaryOperator 0x55b08195daa0 <line:565:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x55b08195d9c0 <col:9> '_Bool' lvalue Var 0x55b081959480 'tmp___17' '_Bool'
|     |           | `-CallExpr 0x55b08195da78 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x55b08195da60 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55b08195d9e0 <col:20> '_Bool (unsigned char)' Function 0x55b08194c560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x55b08195da38 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x55b08195da00 <col:61> 'int' 1
|     |           `-IfStmt 0x55b08195dfc0 <line:566:9, line:572:9>
|     |             |-BinaryOperator 0x55b08195dbb0 <line:566:13, col:37> 'int' '=='
|     |             | |-CStyleCastExpr 0x55b08195db10 <col:13, col:19> 'int' <IntegralCast>
|     |             | | `-ImplicitCastExpr 0x55b08195daf8 <col:19> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             | |   `-DeclRefExpr 0x55b08195dac0 <col:19> '_Bool' lvalue Var 0x55b0819593f0 'tmp___16' '_Bool'
|     |             | `-CStyleCastExpr 0x55b08195db88 <col:31, col:37> 'int' <IntegralCast>
|     |             |   `-ImplicitCastExpr 0x55b08195db70 <col:37> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             |     `-DeclRefExpr 0x55b08195db38 <col:37> '_Bool' lvalue Var 0x55b081959480 'tmp___17' '_Bool'
|     |             `-CompoundStmt 0x55b08195df98 <col:47, line:572:9>
|     |               |-BinaryOperator 0x55b08195dcb0 <line:567:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x55b08195dbd0 <col:11> 'int8_t':'char' lvalue Var 0x55b081959510 'tmp___18' 'int8_t':'char'
|     |               | `-CallExpr 0x55b08195dc88 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x55b08195dc70 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x55b08195dbf0 <col:22> 'int8_t (unsigned char)' Function 0x55b08194d060 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x55b08195dc48 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x55b08195dc10 <col:62> 'int' 1
|     |               |-BinaryOperator 0x55b08195ddb0 <line:568:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x55b08195dcd0 <col:11> 'int8_t':'char' lvalue Var 0x55b0819595a0 'tmp___19' 'int8_t':'char'
|     |               | `-CallExpr 0x55b08195dd88 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x55b08195dd70 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x55b08195dcf0 <col:22> 'int8_t (unsigned char)' Function 0x55b08194d060 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x55b08195dd48 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x55b08195dd10 <col:62> 'int' 0
|     |               `-IfStmt 0x55b08195df80 <line:569:11, line:571:11>
|     |                 |-UnaryOperator 0x55b08195df00 <line:569:15, col:50> 'int' prefix '!' cannot overflow
|     |                 | `-ParenExpr 0x55b08195dee0 <col:17, col:50> 'int'
|     |                 |   `-BinaryOperator 0x55b08195dec0 <col:18, col:42> 'int' '=='
|     |                 |     |-CStyleCastExpr 0x55b08195de20 <col:18, col:24> 'int' <IntegralCast>
|     |                 |     | `-ImplicitCastExpr 0x55b08195de08 <col:24> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |     |   `-DeclRefExpr 0x55b08195ddd0 <col:24> 'int8_t':'char' lvalue Var 0x55b081959510 'tmp___18' 'int8_t':'char'
|     |                 |     `-CStyleCastExpr 0x55b08195de98 <col:36, col:42> 'int' <IntegralCast>
|     |                 |       `-ImplicitCastExpr 0x55b08195de80 <col:42> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |         `-DeclRefExpr 0x55b08195de48 <col:42> 'int8_t':'char' lvalue Var 0x55b0819595a0 'tmp___19' 'int8_t':'char'
|     |                 `-CompoundStmt 0x55b08195df68 <col:53, line:571:11>
|     |                   `-ReturnStmt 0x55b08195df58 <line:570:13, col:22>
|     |                     `-ParenExpr 0x55b08195df38 <col:20, col:22> 'int'
|     |                       `-IntegerLiteral 0x55b08195df18 <col:21> 'int' 0
|     `-ReturnStmt 0x55b08195e0d0 <line:576:3, col:12>
|       `-ParenExpr 0x55b08195e0b0 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x55b08195e090 <col:11> 'int' 1
|-FunctionDecl 0x55b08195e2b0 <line:579:1, line:650:1> line:579:5 main 'int (void)'
| `-CompoundStmt 0x55b0819608a8 <line:580:1, line:650:1>
|   |-DeclStmt 0x55b08195e400 <line:581:3, col:10>
|   | `-VarDecl 0x55b08195e398 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x55b08195e498 <line:582:3, col:10>
|   | `-VarDecl 0x55b08195e430 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x55b081960740 <line:584:3, line:648:1>
|   | |-BinaryOperator 0x55b08195e4f0 <line:585:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55b08195e4b0 <col:3> 'int' lvalue Var 0x55b08195e398 'c1' 'int'
|   | | `-IntegerLiteral 0x55b08195e4d0 <col:8> 'int' 0
|   | |-BinaryOperator 0x55b08195e588 <line:586:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x55b08195e510 <col:3> '_Bool' lvalue Var 0x55b081949ac0 'side1Failed' '_Bool'
|   | | `-CallExpr 0x55b08195e568 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b08195e550 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195e530 <col:17> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b08195e620 <line:587:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x55b08195e5a8 <col:3> '_Bool' lvalue Var 0x55b081949b38 'side2Failed' '_Bool'
|   | | `-CallExpr 0x55b08195e600 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b08195e5e8 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195e5c8 <col:17> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b08195e6e0 <line:588:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195e640 <col:3> 'msg_t':'char' lvalue Var 0x55b081949bb0 'side1_written' 'msg_t':'char'
|   | | `-CallExpr 0x55b08195e6c0 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x55b08195e680 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195e660 <col:19> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b08195e778 <line:589:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195e700 <col:3> 'msg_t':'char' lvalue Var 0x55b081949c28 'side2_written' 'msg_t':'char'
|   | | `-CallExpr 0x55b08195e758 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x55b08195e740 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195e720 <col:19> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b08195e810 <line:590:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b08195e798 <col:3> '_Bool' lvalue Var 0x55b081949fb8 'side1Failed_History_0' '_Bool'
|   | | `-CallExpr 0x55b08195e7f0 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b08195e7d8 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195e7b8 <col:27> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b08195e8a8 <line:591:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b08195e830 <col:3> '_Bool' lvalue Var 0x55b08194a080 'side1Failed_History_1' '_Bool'
|   | | `-CallExpr 0x55b08195e888 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b08195e870 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195e850 <col:27> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b08195e940 <line:592:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b08195e8c8 <col:3> '_Bool' lvalue Var 0x55b08194a0f8 'side1Failed_History_2' '_Bool'
|   | | `-CallExpr 0x55b08195e920 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b08195e908 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195e8e8 <col:27> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b08195e9d8 <line:593:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b08195e960 <col:3> '_Bool' lvalue Var 0x55b08194a170 'side2Failed_History_0' '_Bool'
|   | | `-CallExpr 0x55b08195e9b8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b08195e9a0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195e980 <col:27> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b08195ea70 <line:594:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b08195e9f8 <col:3> '_Bool' lvalue Var 0x55b08194a1e8 'side2Failed_History_1' '_Bool'
|   | | `-CallExpr 0x55b08195ea50 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b08195ea38 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195ea18 <col:27> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b08195eb08 <line:595:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b08195ea90 <col:3> '_Bool' lvalue Var 0x55b08194a260 'side2Failed_History_2' '_Bool'
|   | | `-CallExpr 0x55b08195eae8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b08195ead0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195eab0 <col:27> '_Bool (void)' Function 0x55b081949920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b08195eba0 <line:596:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195eb28 <col:3> 'int8_t':'char' lvalue Var 0x55b08194a2d8 'active_side_History_0' 'int8_t':'char'
|   | | `-CallExpr 0x55b08195eb80 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x55b08195eb68 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195eb48 <col:27> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b08195ec38 <line:597:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195ebc0 <col:3> 'int8_t':'char' lvalue Var 0x55b08194a350 'active_side_History_1' 'int8_t':'char'
|   | | `-CallExpr 0x55b08195ec18 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x55b08195ec00 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195ebe0 <col:27> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b08195ecd0 <line:598:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195ec58 <col:3> 'int8_t':'char' lvalue Var 0x55b08194a3c8 'active_side_History_2' 'int8_t':'char'
|   | | `-CallExpr 0x55b08195ecb0 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x55b08195ec98 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195ec78 <col:27> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b08195ed68 <line:599:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195ecf0 <col:3> 'msg_t':'char' lvalue Var 0x55b08194a440 'manual_selection_History_0' 'msg_t':'char'
|   | | `-CallExpr 0x55b08195ed48 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x55b08195ed30 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195ed10 <col:32> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b08195ee00 <line:600:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195ed88 <col:3> 'msg_t':'char' lvalue Var 0x55b08194a4b8 'manual_selection_History_1' 'msg_t':'char'
|   | | `-CallExpr 0x55b08195ede0 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x55b08195edc8 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195eda8 <col:32> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b08195ee98 <line:601:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195ee20 <col:3> 'msg_t':'char' lvalue Var 0x55b08194a530 'manual_selection_History_2' 'msg_t':'char'
|   | | `-CallExpr 0x55b08195ee78 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x55b08195ee60 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195ee40 <col:32> 'char (void)' Function 0x55b081949a10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b08195ef68 <line:602:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x55b08195eeb8 <col:3> 'int' lvalue Var 0x55b08195e430 'i2' 'int'
|   | | `-CallExpr 0x55b08195ef48 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x55b08195ef30 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b08195eed8 <col:8> 'int (void)' Function 0x55b08194e6b8 'init' 'int (void)'
|   | |-CallExpr 0x55b08195efe0 <line:603:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x55b08195efc8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55b08195ef88 <col:3> 'void (int)' Function 0x55b081949f00 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x55b08195f008 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195efa8 <col:21> 'int' lvalue Var 0x55b08195e430 'i2' 'int'
|   | |-BinaryOperator 0x55b08195f078 <line:604:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f020 <col:3> 'int8_t':'char' lvalue Var 0x55b0819220b0 'cs1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f060 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f040 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f0f0 <line:605:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f098 <col:3> 'int8_t':'char' lvalue Var 0x55b081922128 'cs1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f0d8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f0b8 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f168 <line:606:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f110 <col:3> 'int8_t':'char' lvalue Var 0x55b081922218 'cs2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f150 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f130 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f1e0 <line:607:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f188 <col:3> 'int8_t':'char' lvalue Var 0x55b081922290 'cs2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f1c8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f1a8 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f258 <line:608:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f200 <col:3> 'int8_t':'char' lvalue Var 0x55b0819490e8 's1s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f240 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f220 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f2d0 <line:609:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f278 <col:3> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f2b8 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f298 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f348 <line:610:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f2f0 <col:3> 'int8_t':'char' lvalue Var 0x55b081949250 's1s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f330 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f310 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f3c0 <line:611:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f368 <col:3> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f3a8 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f388 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f438 <line:612:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f3e0 <col:3> 'int8_t':'char' lvalue Var 0x55b0819493b8 's2s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f420 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f400 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f4b0 <line:613:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f458 <col:3> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f498 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f478 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f528 <line:614:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f4d0 <col:3> 'int8_t':'char' lvalue Var 0x55b081949520 's2s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f510 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f4f0 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f5a0 <line:615:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f548 <col:3> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f588 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f568 <col:14> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f618 <line:616:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f5c0 <col:3> 'int8_t':'char' lvalue Var 0x55b081949688 's1p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f600 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f5e0 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195f690 <line:617:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195f638 <col:3> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195f678 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195f658 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195fa78 <line:618:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195fa20 <col:3> 'int8_t':'char' lvalue Var 0x55b0819497f0 's2p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195fa60 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195fa40 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195faf0 <line:619:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b08195fa98 <col:3> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b08195fad8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b08195fab8 <col:13> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b08195fb50 <line:620:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55b08195fb10 <col:3> 'int' lvalue Var 0x55b08195e430 'i2' 'int'
|   | | `-IntegerLiteral 0x55b08195fb30 <col:8> 'int' 0
|   | `-WhileStmt 0x55b081960728 <line:621:3, line:647:3>
|   |   |-BinaryOperator 0x55b08195fbc8 <line:621:10, col:15> 'int' '<'
|   |   | |-ImplicitCastExpr 0x55b08195fbb0 <col:10> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55b08195fb70 <col:10> 'int' lvalue Var 0x55b08195e430 'i2' 'int'
|   |   | `-IntegerLiteral 0x55b08195fb90 <col:15> 'int' 10
|   |   `-CompoundStmt 0x55b081960710 <col:19, line:647:3>
|   |     `-CompoundStmt 0x55b081960648 <line:622:5, line:646:5>
|   |       |-CallExpr 0x55b08195fc20 <line:623:5, col:35> 'void'
|   |       | `-ImplicitCastExpr 0x55b08195fc08 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55b08195fbe8 <col:5> 'void (void)' Function 0x55b08194fd20 'Console_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55b08195fc78 <line:624:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x55b08195fc60 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55b08195fc40 <col:5> 'void (void)' Function 0x55b081950870 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55b08195fcd0 <line:625:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x55b08195fcb8 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55b08195fc98 <col:5> 'void (void)' Function 0x55b081953460 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55b08195fd28 <line:626:5, col:42> 'void'
|   |       | `-ImplicitCastExpr 0x55b08195fd10 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55b08195fcf0 <col:5> 'void (void)' Function 0x55b081955d30 'Pendulum_prism_task_each_pals_period' 'void (void)'
|   |       |-BinaryOperator 0x55b08195fda0 <line:627:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b08195fd48 <col:5> 'int8_t':'char' lvalue Var 0x55b0819220b0 'cs1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b08195fd88 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b08195fd68 <col:15> 'int8_t':'char' lvalue Var 0x55b081922128 'cs1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b08195fe18 <line:628:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b08195fdc0 <col:5> 'int8_t':'char' lvalue Var 0x55b081922128 'cs1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b08195fe00 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b08195fde0 <col:15> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b08195fe90 <line:629:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b08195fe38 <col:5> 'int8_t':'char' lvalue Var 0x55b081922218 'cs2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b08195fe78 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b08195fe58 <col:15> 'int8_t':'char' lvalue Var 0x55b081922290 'cs2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b08195ff08 <line:630:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b08195feb0 <col:5> 'int8_t':'char' lvalue Var 0x55b081922290 'cs2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b08195fef0 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b08195fed0 <col:15> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b08195ff80 <line:631:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b08195ff28 <col:5> 'int8_t':'char' lvalue Var 0x55b0819490e8 's1s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b08195ff68 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b08195ff48 <col:16> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b08195fff8 <line:632:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b08195ffa0 <col:5> 'int8_t':'char' lvalue Var 0x55b081949160 's1s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b08195ffe0 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b08195ffc0 <col:16> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b081960070 <line:633:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b081960018 <col:5> 'int8_t':'char' lvalue Var 0x55b081949250 's1s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b081960058 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b081960038 <col:16> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b0819600e8 <line:634:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b081960090 <col:5> 'int8_t':'char' lvalue Var 0x55b0819492c8 's1s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b0819600d0 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b0819600b0 <col:16> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b081960160 <line:635:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b081960108 <col:5> 'int8_t':'char' lvalue Var 0x55b0819493b8 's2s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b081960148 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b081960128 <col:16> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b0819601d8 <line:636:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b081960180 <col:5> 'int8_t':'char' lvalue Var 0x55b081949430 's2s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b0819601c0 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b0819601a0 <col:16> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b081960250 <line:637:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b0819601f8 <col:5> 'int8_t':'char' lvalue Var 0x55b081949520 's2s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b081960238 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b081960218 <col:16> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b0819602c8 <line:638:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b081960270 <col:5> 'int8_t':'char' lvalue Var 0x55b081949598 's2s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b0819602b0 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b081960290 <col:16> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b081960340 <line:639:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b0819602e8 <col:5> 'int8_t':'char' lvalue Var 0x55b081949688 's1p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b081960328 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b081960308 <col:15> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b0819603b8 <line:640:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b081960360 <col:5> 'int8_t':'char' lvalue Var 0x55b081949700 's1p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b0819603a0 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b081960380 <col:15> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b081960430 <line:641:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b0819603d8 <col:5> 'int8_t':'char' lvalue Var 0x55b0819497f0 's2p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b081960418 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b0819603f8 <col:15> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b0819604a8 <line:642:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b081960450 <col:5> 'int8_t':'char' lvalue Var 0x55b081949868 's2p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b081960490 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b081960470 <col:15> 'msg_t':'char' lvalue Var 0x55b081921f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b081960540 <line:643:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x55b0819604c8 <col:5> 'int' lvalue Var 0x55b08195e398 'c1' 'int'
|   |       | `-CallExpr 0x55b081960520 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x55b081960508 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x55b0819604e8 <col:10> 'int (void)' Function 0x55b0819585f8 'check' 'int (void)'
|   |       |-CallExpr 0x55b0819605b8 <line:644:5, col:14> 'void'
|   |       | |-ImplicitCastExpr 0x55b0819605a0 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x55b081960560 <col:5> 'void (_Bool)' Function 0x55b081949d70 'assert' 'void (_Bool)'
|   |       | `-ImplicitCastExpr 0x55b0819605f8 <col:12> '_Bool' <IntegralToBoolean>
|   |       |   `-ImplicitCastExpr 0x55b0819605e0 <col:12> 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55b081960580 <col:12> 'int' lvalue Var 0x55b08195e398 'c1' 'int'
|   |       `-UnaryOperator 0x55b081960630 <line:645:5, col:8> 'int' postfix '++'
|   |         `-DeclRefExpr 0x55b081960610 <col:5> 'int' lvalue Var 0x55b08195e430 'i2' 'int'
|   `-ReturnStmt 0x55b081960898 <line:649:1, col:8>
|     `-IntegerLiteral 0x55b081960878 <col:8> 'int' 0
`-FunctionDecl 0x55b081960978 prev 0x55b081949d70 <line:651:1, line:662:1> line:651:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x55b0819608e8 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x55b081960bd0 <line:652:1, line:662:1>
    `-CompoundStmt 0x55b081960bb8 <line:655:3, line:661:1>
      `-IfStmt 0x55b081960ba0 <line:656:3, line:660:3>
        |-UnaryOperator 0x55b081960a68 <line:656:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x55b081960a50 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x55b081960a30 <col:9> '_Bool' lvalue ParmVar 0x55b0819608e8 'arg' '_Bool'
        `-CompoundStmt 0x55b081960b88 <col:14, line:660:3>
          `-CompoundStmt 0x55b081960b70 <line:657:5, line:659:5>
            `-LabelStmt 0x55b081960b58 <line:658:5, col:29> 'ERROR'
              `-CallExpr 0x55b081960ae8 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x55b081960ad0 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x55b081960a80 <col:12> 'void () __attribute__((noreturn))' Function 0x55b081921440 '__VERIFIER_error' 'void () __attribute__((noreturn))'
