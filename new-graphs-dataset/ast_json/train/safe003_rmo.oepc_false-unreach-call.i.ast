TranslationUnitDecl 0x562269424f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x562269425848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x562269425520 '__int128'
|-TypedefDecl 0x5622694258b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x562269425540 'unsigned __int128'
|-TypedefDecl 0x562269425bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x562269425990 'struct __NSConstantString_tag'
|   `-Record 0x562269425910 '__NSConstantString_tag'
|-TypedefDecl 0x562269425c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x562269425c20 'char *'
|   `-BuiltinType 0x562269425020 'char'
|-TypedefDecl 0x562269464b60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x562269425f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x562269425d40 'struct __va_list_tag'
|     `-Record 0x562269425cc0 '__va_list_tag'
|-FunctionDecl 0x562269464ca0 <pthread-wmm/safe003_rmo.oepc_false-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x562269464bd0 <col:31> col:34 'int'
|-FunctionDecl 0x562269464e68 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x562269464f90 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x5622694650d8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x562269465048 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x562269465308 <col:40, col:99>
|   |-IfStmt 0x5622694652d8 <col:42, col:88>
|   | |-UnaryOperator 0x5622694651b8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x5622694651a0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562269465180 <col:47> 'int' lvalue ParmVar 0x562269465048 'expression' 'int'
|   | `-CompoundStmt 0x5622694652c0 <col:59, col:88>
|   |   `-LabelStmt 0x5622694652a8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x562269465238 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x562269465220 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5622694651d0 <col:68> 'void () __attribute__((noreturn))' Function 0x562269464f90 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x5622694652f0 <col:89>
|   `-ReturnStmt 0x5622694652f8 <col:91>
|-FunctionDecl 0x562269465350 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x562269465410 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x562269465790 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5622694654c8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x562269465548 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x5622694655c8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x562269465648 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x562269465850 <line:10:22>
|-FunctionDecl 0x56226948b8a0 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5622694658c0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x562269465940 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x5622694659c0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x562269465a40 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56226948b960 <line:13:22>
|-FunctionDecl 0x56226948bc10 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56226948b9d0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x56226948ba50 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x56226948bad0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x56226948bcc8 <line:15:22>
|-TypedefDecl 0x56226948bd38 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x5622694250e0 'unsigned char'
|-TypedefDecl 0x56226948bda8 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x562269425100 'unsigned short'
|-TypedefDecl 0x56226948be18 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-TypedefDecl 0x56226948be88 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948bef8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x562269425040 'signed char'
|-TypedefDecl 0x56226948bf68 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x5622694250e0 'unsigned char'
|-TypedefDecl 0x56226948bfd8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x562269425060 'short'
|-TypedefDecl 0x56226948c048 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x562269425100 'unsigned short'
|-TypedefDecl 0x56226948c0b8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x562269425080 'int'
|-TypedefDecl 0x56226948c128 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-TypedefDecl 0x56226948c198 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948c208 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948c278 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948c2e8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948c358 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948c3c8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-TypedefDecl 0x56226948c438 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-TypedefDecl 0x56226948c4a8 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948c518 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948c588 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-TypedefDecl 0x56226948c5f8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948c668 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948c6d8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948c748 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x562269425080 'int'
|-RecordDecl 0x56226948c7a0 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x56226948c918 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x56226948c9d0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x56226948c970 'struct __fsid_t' sugar
|   `-RecordType 0x56226948c820 '__fsid_t'
|     `-Record 0x56226948c7a0 ''
|-TypedefDecl 0x56226948ca58 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948cac8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948cb38 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948cba8 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-TypedefDecl 0x56226948cc18 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948cc88 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-TypedefDecl 0x56226948ccf8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948cd68 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x562269425080 'int'
|-TypedefDecl 0x56226948cdd8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x562269425080 'int'
|-TypedefDecl 0x56226948ce48 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x562269425080 'int'
|-TypedefDecl 0x56226948ceb8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x5622694257a0 'void *'
|   `-BuiltinType 0x562269424fe0 'void'
|-TypedefDecl 0x56226948cf28 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948cf98 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948d008 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948d078 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948d0e8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948d158 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948d1c8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948d238 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948d2a8 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948d318 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948d388 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948d418 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x56226948d3e0 '__off64_t' sugar
|   |-Typedef 0x56226948c6d8 '__off64_t'
|   `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948d510 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x56226948d4d0 '__quad_t *'
|   `-TypedefType 0x56226948d470 '__quad_t' sugar
|     |-Typedef 0x56226948c278 '__quad_t'
|     `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948d580 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x562269425c20 'char *'
|   `-BuiltinType 0x562269425020 'char'
|-TypedefDecl 0x56226948d5f0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x56226948d660 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-FunctionDecl 0x56226948d7a8 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x56226948d6d0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x56226948dae8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x56226948dad8 <line:72:3, col:34>
|     `-CallExpr 0x56226948da98 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x56226948da80 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56226948da10 <col:10> '<builtin fn type>' Function 0x56226948d880 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x56226948dac0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56226948da30 <col:29> 'unsigned int' lvalue ParmVar 0x56226948d6d0 '__bsx' 'unsigned int'
|-FunctionDecl 0x56226948d880 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x56226948d920 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x56226948d990 <col:10> Implicit
| `-ConstAttr 0x56226948d9e8 <col:10> Implicit
|-FunctionDecl 0x56226948dc40 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x56226948db38 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x56226948df58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x56226948df48 <line:77:3, col:34>
|     `-CallExpr 0x56226948df08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x56226948def0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56226948de78 <col:10> '<builtin fn type>' Function 0x56226948dce8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x56226948df30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x56226948de98 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x56226948db38 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x56226948dce8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x56226948dd88 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x56226948ddf8 <col:10> Implicit
| `-ConstAttr 0x56226948de50 <col:10> Implicit
|-TypedefDecl 0x56226948df88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-TypedefDecl 0x56226948e018 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x56226948dfe0 '__time_t' sugar
|   |-Typedef 0x56226948cc18 '__time_t'
|   `-BuiltinType 0x5622694250a0 'long'
|-RecordDecl 0x56226948e070 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x56226948e128 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x56226948e1b8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x56226948e248 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x56226948e210 '__pid_t' sugar
|   |-Typedef 0x56226948c748 '__pid_t'
|   `-BuiltinType 0x562269425080 'int'
|-RecordDecl 0x56226948e2a0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x56226948e360 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x56226948e3b0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x56226948e470 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x56226948e4d8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-RecordDecl 0x56226948e530 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x56226948e7c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x5622694908b0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x56226948e810 'struct cpu_set_t' sugar
|   `-RecordType 0x56226948e5b0 'cpu_set_t'
|     `-Record 0x56226948e530 ''
|-FunctionDecl 0x562269490b88 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x562269490958 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x562269490a60 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x562269490c38 <line:107:19>
|-FunctionDecl 0x562269490e10 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x562269490ca0 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x562269490eb8 <col:69>
|-FunctionDecl 0x562269491030 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x562269490f20 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x5622694910d8 <col:64>
|-FunctionDecl 0x562269491398 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x562269491140 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x562269491278 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x562269491448 <line:113:22>
|-FunctionDecl 0x5622694916c8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x5622694914b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x5622694915a8 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x562269491778 <col:88>
|-FunctionDecl 0x562269491a98 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x5622694917e0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x5622694918c0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x562269491950 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x562269491b50 <col:62>
|-FunctionDecl 0x562269491cc8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x562269491bb8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x562269491d70 <col:63>
|-FunctionDecl 0x562269491e98 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x562269491f38 <col:47>
|-FunctionDecl 0x562269492040 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x562269491fa8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x5622694920e8 <col:69>
|-FunctionDecl 0x5622694921f0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x562269492158 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x562269492298 <col:69>
|-FunctionDecl 0x562269492558 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x562269492300 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x562269492438 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x562269492608 <col:88>
|-TypedefDecl 0x562269492698 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x562269492660 '__clock_t' sugar
|   |-Typedef 0x56226948ca58 '__clock_t'
|   `-BuiltinType 0x5622694250a0 'long'
|-TypedefDecl 0x562269492728 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x5622694926f0 '__clockid_t' sugar
|   |-Typedef 0x56226948ce48 '__clockid_t'
|   `-BuiltinType 0x562269425080 'int'
|-TypedefDecl 0x5622694927b8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x562269492780 '__timer_t' sugar
|   |-Typedef 0x56226948ceb8 '__timer_t'
|   `-PointerType 0x5622694257a0 'void *'
|     `-BuiltinType 0x562269424fe0 'void'
|-RecordDecl 0x562269492810 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x5622694928e8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x562269492950 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x5622694929b8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x562269492a20 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x562269492a88 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x562269492af0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x562269492b58 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x562269492bc0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x562269492c28 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x562269492c90 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x562269492cf8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x562269492d48 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x562269492e18 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x562269492e88 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x562269492f30 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x562269493100 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x5622694931a0 <col:45>
|-FunctionDecl 0x562269493380 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x562269493270 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x562269493428 <col:54>
|-FunctionDecl 0x562269493628 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x562269493490 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x562269493508 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x5622694936d8 <line:157:22>
| `-ConstAttr 0x562269493730 <col:63>
|-FunctionDecl 0x562269494560 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x562269493828 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x562269494608 <col:56>
|-FunctionDecl 0x5622694949b0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x562269494678 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x5622694946f0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x562269494770 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x562269494868 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x562269494a70 <col:54>
|-RecordDecl 0x562269494ac8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x562269494b78 parent 0x562269424f88 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x562269494dd8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x562269494e78 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x562269494ee0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x562269494f48 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x562269495038 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x562269495158 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x562269495100 'struct __locale_struct *'
|   `-ElaboratedType 0x562269495090 'struct __locale_struct' sugar
|     `-RecordType 0x562269494b50 'struct __locale_struct'
|       `-Record 0x562269494ac8 '__locale_struct'
|-TypedefDecl 0x562269495208 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x5622694951d0 '__locale_t' sugar
|   |-Typedef 0x562269495158 '__locale_t'
|   `-PointerType 0x562269495100 'struct __locale_struct *'
|     `-ElaboratedType 0x562269495090 'struct __locale_struct' sugar
|       `-RecordType 0x562269494b50 'struct __locale_struct'
|         `-Record 0x562269494ac8 '__locale_struct'
|-FunctionDecl 0x562269495610 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x562269495278 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x5622694952f0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x562269495370 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x562269495400 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x562269495478 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5622694956d8 <col:40>
|-FunctionDecl 0x5622694958c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x5622694957a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x562269495970 <col:66>
|-FunctionDecl 0x562269495a80 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x5622694959d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x562269495b28 <col:69>
|-FunctionDecl 0x562269495d58 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x562269495b90 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x562269495c20 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x562269495e08 <col:52>
|-FunctionDecl 0x562269495fb0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x562269495e70 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x562269495f00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x562269496060 <col:55>
|-FunctionDecl 0x5622694961f8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x5622694960e0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x5622694962a0 <col:62>
|-FunctionDecl 0x562269496418 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x562269496308 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x5622694964c0 <col:60>
|-FunctionDecl 0x562269496718 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x562269496578 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x5622694965f8 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x5622694967c8 <col:44>
|-FunctionDecl 0x5622694969d8 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x562269496830 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5622694968b0 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x562269496a88 <col:49>
|-VarDecl 0x562269496b88 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x562269496c08 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x562269496c88 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x562269496d50 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x562269496e80 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x562269496f20 <col:42>
|-VarDecl 0x562269496f90 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x562269497010 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x562269497198 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x562269497088 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x562269497240 <col:57>
|-FunctionDecl 0x562269497350 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5622694972c0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x5622694973f8 <col:56>
|-FunctionDecl 0x562269498540 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x562269497478 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x5622694985e8 <col:59>
|-FunctionDecl 0x5622694986f0 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x562269498658 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x562269498798 <col:48>
| `-ConstAttr 0x5622694987f0 <col:89>
|-FunctionDecl 0x562269498a58 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x5622694988a8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x562269498938 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x562269498cb8 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x562269498b48 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562269498bd8 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x562269498d68 <col:88>
|-FunctionDecl 0x562269498f00 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x562269498dd0 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562269498e60 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x562269498fb0 <col:88>
|-FunctionDecl 0x5622694991c8 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x562269499018 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5622694990a8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x562269499278 <line:208:22>
|-FunctionDecl 0x5622694995e8 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x5622694992e0 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562269499360 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x5622694993f0 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x562269499480 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x5622694998e8 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x5622694996e8 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x5622694997c0 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x562269499998 <col:85>
|-FunctionDecl 0x562269499d88 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x562269499a00 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562269499b38 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x562269499c40 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x562269499e40 <col:52>
|-FunctionDecl 0x562269499fb8 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x562269499ea8 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56226949a060 <col:61>
|-FunctionDecl 0x56226949a560 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x56226949a0c8 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56226949a148 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x56226949a278 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x56226949a368 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x56226949a620 <col:62>
|-FunctionDecl 0x56226949a838 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x56226949a688 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56226949a718 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x56226949a8e8 <line:221:22>
|-FunctionDecl 0x56226949a9e8 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x56226949a950 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56226949aa90 <col:65>
|-TypedefDecl 0x56226949ab00 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x562269425140 'unsigned long'
|-RecordDecl 0x56226949ab58 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x56226949aca0 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56226949ad08 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56226949adb8 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x56226949ad60 'union pthread_attr_t' sugar
|   `-RecordType 0x56226949abe0 'union pthread_attr_t'
|     `-Record 0x56226949ab58 'pthread_attr_t'
|-RecordDecl 0x56226949ae10 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x56226949af88 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x56226949b000 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x56226949b0b0 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x56226949b050 'struct __pthread_internal_list' sugar
|   `-RecordType 0x56226949ae90 'struct __pthread_internal_list'
|     `-Record 0x56226949ae10 '__pthread_internal_list'
|-RecordDecl 0x56226949b120 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x56226949b1c8 parent 0x562269424f88 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x56226949b2a0 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56226949b308 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x56226949b370 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x56226949b3d8 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x56226949b440 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x56226949b4a8 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x56226949f580 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x56226949f630 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x56226949f720 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x56226949f788 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56226949f910 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x56226949f8b0 'union pthread_mutex_t' sugar
|   `-RecordType 0x56226949b1a0 'pthread_mutex_t'
|     `-Record 0x56226949b120 ''
|-RecordDecl 0x56226949f980 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x56226949fac0 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56226949fb28 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56226949fbe0 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x56226949fb80 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x56226949fa00 'pthread_mutexattr_t'
|     `-Record 0x56226949f980 ''
|-RecordDecl 0x56226949fc50 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x56226949fcf8 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x56226949fdc0 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56226949fe28 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x56226949fe90 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x56226949fef8 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x56226949ff60 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x56226949ffc8 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x5622694a0030 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x5622694a0098 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x5622694a0150 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe003_rmo.oepc_false-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/safe003_rmo.oepc_false-unreach-call.i:258:3)'
| |-FieldDecl 0x5622694a0240 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x5622694a02a8 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x5622694a03e0 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x5622694a0380 'union pthread_cond_t' sugar
|   `-RecordType 0x56226949fcd0 'pthread_cond_t'
|     `-Record 0x56226949fc50 ''
|-RecordDecl 0x5622694a0450 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x5622694a0590 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x5622694a05f8 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x5622694a06b0 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x5622694a0650 'union pthread_condattr_t' sugar
|   `-RecordType 0x5622694a04d0 'pthread_condattr_t'
|     `-Record 0x5622694a0450 ''
|-TypedefDecl 0x5622694a0738 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x562269425120 'unsigned int'
|-TypedefDecl 0x5622694a07a8 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x562269425080 'int'
|-RecordDecl 0x5622694a0800 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x5622694a08a8 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x5622694a0970 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x5622694a09d8 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x5622694a0a40 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x5622694a0aa8 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x5622694a0b10 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x5622694a0b78 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x5622694a0be0 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x5622694a0c48 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x5622694a0cb0 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x5622694a0d18 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x5622694a0d80 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x5622694a0e30 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe003_rmo.oepc_false-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/safe003_rmo.oepc_false-unreach-call.i:281:3)'
| |-FieldDecl 0x5622694a0ed8 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x5622694a0f40 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5622694a1090 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x5622694a1030 'union pthread_rwlock_t' sugar
|   `-RecordType 0x5622694a0880 'pthread_rwlock_t'
|     `-Record 0x5622694a0800 ''
|-RecordDecl 0x5622694a1100 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x5622694a1240 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x5622694a12a8 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5622694a1360 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x5622694a1300 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x5622694a1180 'pthread_rwlockattr_t'
|     `-Record 0x5622694a1100 ''
|-TypedefDecl 0x5622694a13e8 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x562269425084 'volatile int' volatile
|   `-BuiltinType 0x562269425080 'int'
|-RecordDecl 0x5622694a1440 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x5622694a35b0 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x5622694a3618 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5622694a36d0 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x5622694a3670 'union pthread_barrier_t' sugar
|   `-RecordType 0x5622694a14c0 'pthread_barrier_t'
|     `-Record 0x5622694a1440 ''
|-RecordDecl 0x5622694a3740 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x5622694a3840 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x5622694a38a8 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x5622694a3960 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x5622694a3900 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x5622694a37c0 'pthread_barrierattr_t'
|     `-Record 0x5622694a3740 ''
|-TypedefDecl 0x5622694a3a78 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x5622694a3a10 'long [8]' 8 
|   `-BuiltinType 0x5622694250a0 'long'
|-EnumDecl 0x5622694a3ad0 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x5622694a3b98 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x5622694a3be8 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x5622694a3c38 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x5622694a3d08 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x5622694a3d58 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x5622694a3da8 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x5622694a3df8 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x5622694a3e80 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x5622694a3e68 <col:26> 'int'
| |   `-DeclRefExpr 0x5622694a3e48 <col:26> 'int' EnumConstant 0x5622694a3d08 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x5622694a3f08 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x5622694a3ef0 <col:29> 'int'
| |   `-DeclRefExpr 0x5622694a3ed0 <col:29> 'int' EnumConstant 0x5622694a3d58 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x5622694a3f90 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x5622694a3f78 <col:30> 'int'
| |   `-DeclRefExpr 0x5622694a3f58 <col:30> 'int' EnumConstant 0x5622694a3da8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x5622694a4018 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x5622694a4000 <col:27> 'int'
|     `-DeclRefExpr 0x5622694a3fe0 <col:27> 'int' EnumConstant 0x5622694a3e80 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x5622694a4068 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x5622694a4138 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x5622694a41c0 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x5622694a41a8 <col:30> 'int'
| |   `-DeclRefExpr 0x5622694a4188 <col:30> 'int' EnumConstant 0x5622694a4138 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x5622694a4210 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x5622694a4298 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x5622694a4280 <col:29> 'int'
|     `-DeclRefExpr 0x5622694a4260 <col:29> 'int' EnumConstant 0x5622694a4210 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x5622694a42e8 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x5622694a43b8 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x5622694a4408 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x5622694a4458 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x5622694a44a8 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x5622694a45c0 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x5622694a4610 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x5622694a4660 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x5622694a46e8 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x5622694a46d0 <col:31> 'int'
|     `-DeclRefExpr 0x5622694a46b0 <col:31> 'int' EnumConstant 0x5622694a45c0 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x5622694a4738 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x5622694a4808 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x5622694a4858 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x5622694a48a8 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x5622694a4978 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x5622694a49c8 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x5622694a4a18 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x5622694a4ae8 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x5622694a4b38 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x5622694a4b88 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x5622694a4dc8 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x5622694a4e30 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x5622694a4e98 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x5622694a4fb8 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x5622694a5008 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x5622694a50d8 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x5622694a5128 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x5622694a5178 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x5622694a5248 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x5622694a5298 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x5622694a58f8 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x5622694a5390 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x5622694a54a0 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694a56e0 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x5622694a5760 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x5622694a59b8 <col:47>
| |-NonNullAttr 0x5622694a5a10 <col:77, col:94> 1 3
| `-CallbackAttr 0x5622694a5a48 <line:385:12> Implicit 2 3
|-FunctionDecl 0x5622694a5b70 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x5622694a5aa0 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x5622694a5dc8 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x5622694a5c28 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x5622694a5ca8 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x5622694a5f98 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x5622694a5e88 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x5622694a6040 <col:60>
|-FunctionDecl 0x5622694a6190 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x5622694a6230 <col:54>
| `-ConstAttr 0x5622694a6288 <col:95>
|-FunctionDecl 0x5622694a6458 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x5622694a62c0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5622694a6338 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x5622694a6508 <line:394:19>
| `-ConstAttr 0x5622694a6560 <col:60>
|-FunctionDecl 0x5622694a6f68 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x5622694a6e30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x5622694a7010 <col:71>
| `-NonNullAttr 0x5622694a7068 <col:112, col:126> 1
|-FunctionDecl 0x5622694a7170 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x5622694a70b8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x5622694a7218 <line:397:22>
| `-NonNullAttr 0x5622694a7270 <col:63, col:77> 1
|-FunctionDecl 0x5622694a7498 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x5622694a72b8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x5622694a7338 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x5622694a7548 <line:400:22>
| `-NonNullAttr 0x5622694a75a0 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694a77a8 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x5622694a75e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5622694a7668 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x5622694a7858 <line:403:22>
| `-NonNullAttr 0x5622694a78b0 <col:63, col:77> 1
|-FunctionDecl 0x5622694a7b08 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x5622694a78f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x5622694a79a0 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x5622694a7bb8 <line:406:22>
| `-NonNullAttr 0x5622694a7c10 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694a8e48 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x5622694a7c58 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5622694a7cd0 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x5622694a8ef8 <line:409:22>
| `-NonNullAttr 0x5622694a8f50 <col:63, col:77> 1
|-FunctionDecl 0x5622694a9188 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x5622694a8f98 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694a9028 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x5622694a9238 <line:412:22>
| `-NonNullAttr 0x5622694a9290 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694a94c8 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x5622694a92d8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694a9368 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x5622694a9578 <col:37>
| `-NonNullAttr 0x5622694a95d0 <col:78, col:95> 1 2
|-FunctionDecl 0x5622694a97b8 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694a9618 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694a9698 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x5622694a9868 <line:418:22>
| `-NonNullAttr 0x5622694a98c0 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694a9a48 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x5622694a9908 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5622694a9988 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x5622694a9af8 <line:420:22>
| `-NonNullAttr 0x5622694a9b50 <col:63, col:77> 1
|-FunctionDecl 0x5622694a9cf8 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694a9b98 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694a9c18 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x5622694a9da8 <line:423:22>
| `-NonNullAttr 0x5622694aae30 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694aafb8 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x5622694aae78 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5622694aaef8 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x5622694ab068 <line:426:22>
| `-NonNullAttr 0x5622694ab0c0 <col:63, col:77> 1
|-FunctionDecl 0x5622694ab268 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694ab108 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694ab188 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x5622694ab318 <line:429:22>
| `-NonNullAttr 0x5622694ab370 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694ab4f8 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x5622694ab3b8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5622694ab438 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x5622694ab5a8 <line:431:22>
| `-NonNullAttr 0x5622694ab600 <col:63, col:77> 1
|-FunctionDecl 0x5622694ab828 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x5622694ab648 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694ab6c8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x5622694ab8d8 <line:434:22>
| |-NonNullAttr 0x5622694ab930 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x5622694ab968 <col:100> "" ""
|-FunctionDecl 0x5622694abb78 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x5622694ab9b8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5622694aba38 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x5622694abc28 <line:437:22>
| |-NonNullAttr 0x5622694abc80 <col:63, col:77> 1
| `-DeprecatedAttr 0x5622694abcb8 <col:97> "" ""
|-FunctionDecl 0x5622694abeb8 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x5622694abd08 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694abd80 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x5622694abf68 <line:440:22>
| `-NonNullAttr 0x5622694abfc0 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694ac140 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x5622694ac008 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5622694ac080 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x5622694ac1f0 <line:443:22>
| `-NonNullAttr 0x5622694ac248 <col:63, col:77> 1
|-FunctionDecl 0x5622694ac538 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x5622694ac298 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5622694ac318 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x5622694ac390 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x5622694ac5f0 <line:447:22>
| `-NonNullAttr 0x5622694ac648 <col:63, col:83> 1 2 3
|-FunctionDecl 0x5622694ac8f8 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x5622694ac6a0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5622694ac720 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x5622694ac798 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x5622694ac9b0 <col:43>
| `-NonNullAttr 0x5622694aca08 <col:84, col:98> 1
|-FunctionDecl 0x5622694accc8 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x5622694aca58 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5622694acad8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x5622694acb68 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x5622694acd80 <line:452:22>
| `-NonNullAttr 0x5622694acdd8 <col:63, col:77> 3
|-FunctionDecl 0x5622694ad0e8 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x5622694ace50 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5622694aced0 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x5622694acf60 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x5622694ad1a0 <line:456:22>
| `-NonNullAttr 0x5622694ad1f8 <col:63, col:80> 2 3
|-FunctionDecl 0x5622694ad3e8 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x5622694ad248 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5622694ad2c8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x5622694ad498 <line:458:22>
|-FunctionDecl 0x5622694ad868 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x5622694ad560 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x5622694ad700 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x5622694ad918 <col:52, col:69> 1 2
|-FunctionDecl 0x5622694adac0 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x5622694ad9a0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x5622694ada20 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x5622694adca8 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x5622694adb88 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x5622694adc08 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x5622694ade60 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x5622694add68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x5622694adfa0 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x5622694ae040 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x5622694ae0e8 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x5622694ae1d8 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x5622694ae240 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x5622694ae410 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/safe003_rmo.oepc_false-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x5622694ae508 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x5622694ae5c0 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x5622694ae560 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x5622694ae0c0 '__pthread_unwind_buf_t'
| |   `-Record 0x5622694ae040 ''
| `-AlignedAttr 0x5622694ae618 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x5622694ae690 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x5622694ae7f0 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x5622694ae858 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x5622694ae8c0 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x5622694ae928 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x5622694aeb30 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x5622694aea20 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x5622694aec78 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x5622694aebe8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x5622694aee70 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5622694aed30 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x5622694aef18 <line:487:22>
|-RecordDecl 0x5622694aef70 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x5622694af288 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x5622694af0e8 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x5622694af168 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x5622694af338 <col:86>
| `-ReturnsTwiceAttr 0x5622694af390 <col:12> Implicit
|-FunctionDecl 0x5622694af6b8 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x5622694af460 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x5622694af570 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x5622694af768 <line:493:22>
| `-NonNullAttr 0x5622694af7c0 <col:63, col:77> 1
|-FunctionDecl 0x5622694af938 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5622694af808 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5622694af9e0 <line:495:22>
| `-NonNullAttr 0x5622694afa38 <col:63, col:77> 1
|-FunctionDecl 0x5622694afb40 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5622694afa88 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5622694afbe8 <line:497:22>
| `-NonNullAttr 0x5622694afc40 <col:52, col:66> 1
|-FunctionDecl 0x5622694afd40 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5622694afc88 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5622694afde8 <line:499:22>
| `-NonNullAttr 0x5622694afe40 <col:52, col:66> 1
|-FunctionDecl 0x5622694b0088 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x5622694afe98 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x5622694aff28 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x5622694b0138 <col:36>
| `-NonNullAttr 0x5622694b0190 <col:66, col:83> 1 2
|-FunctionDecl 0x5622694b0290 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5622694b01d8 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5622694b0338 <line:504:22>
| `-NonNullAttr 0x5622694b0390 <col:52, col:66> 1
|-FunctionDecl 0x5622694b0628 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694b0440 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x5622694b04c0 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x5622694b06d8 <line:508:22>
| `-NonNullAttr 0x5622694b0730 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b09f8 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x5622694b0778 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x5622694b07f8 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x5622694b0878 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x5622694b0ab0 <line:512:22>
| `-NonNullAttr 0x5622694b0b08 <col:63, col:80> 1 3
|-FunctionDecl 0x5622694b0c10 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5622694b0b58 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5622694b0cb8 <line:514:22>
| `-NonNullAttr 0x5622694b0d10 <col:63, col:77> 1
|-FunctionDecl 0x5622694b0f38 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x5622694b0dc0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x5622694b0fe0 <line:516:22>
| `-NonNullAttr 0x5622694b1038 <col:63, col:77> 1
|-FunctionDecl 0x5622694b1140 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x5622694b1088 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x5622694b11e8 <line:518:22>
| `-NonNullAttr 0x5622694b1240 <col:63, col:77> 1
|-FunctionDecl 0x5622694b1468 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694b1288 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x5622694b1308 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x5622694b1518 <line:522:22>
| `-NonNullAttr 0x5622694b1570 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b1778 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5622694b15b8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5622694b1638 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x5622694b1828 <line:525:22>
| `-NonNullAttr 0x5622694b1880 <col:63, col:77> 1
|-FunctionDecl 0x5622694b1a28 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694b18c8 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x5622694b1948 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x5622694b1ad8 <line:528:22>
| `-NonNullAttr 0x5622694b1b30 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b1cb8 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5622694b1b78 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5622694b1bf8 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x5622694b1d68 <line:530:22>
| `-NonNullAttr 0x5622694b1dc0 <col:63, col:77> 1
|-FunctionDecl 0x5622694b2f90 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694b1e08 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x5622694b2eb0 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x5622694b3040 <line:534:22>
| `-NonNullAttr 0x5622694b3098 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b3228 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5622694b30e8 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5622694b3168 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x5622694b32d8 <line:537:22>
| `-NonNullAttr 0x5622694b3330 <col:63, col:77> 1
|-FunctionDecl 0x5622694b34d8 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694b3378 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x5622694b33f8 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x5622694b3588 <line:541:22>
| `-NonNullAttr 0x5622694b35e0 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b3768 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5622694b3628 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5622694b36a8 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x5622694b3818 <line:544:22>
| `-NonNullAttr 0x5622694b3870 <col:63, col:77> 1
|-FunctionDecl 0x5622694b3a58 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x5622694b38b8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x5622694b3938 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x5622694b3b08 <line:547:22>
| `-NonNullAttr 0x5622694b3b60 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b3ce8 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5622694b3ba8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5622694b3c28 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x5622694b3d98 <line:550:22>
| `-NonNullAttr 0x5622694b3df0 <col:63, col:77> 1
|-FunctionDecl 0x5622694b5168 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x5622694b4f10 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x5622694b5020 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x5622694b5218 <col:29>
| `-NonNullAttr 0x5622694b5270 <col:70, col:84> 1
|-FunctionDecl 0x5622694b53e8 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5622694b52b8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5622694b5490 <line:555:22>
| `-NonNullAttr 0x5622694b54e8 <col:63, col:77> 1
|-FunctionDecl 0x5622694b55f0 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5622694b5538 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5622694b5698 <line:557:22>
| `-NonNullAttr 0x5622694b56f0 <col:52, col:66> 1
|-FunctionDecl 0x5622694b57f0 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5622694b5738 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5622694b5898 <line:559:19>
| `-NonNullAttr 0x5622694b58f0 <col:49, col:63> 1
|-FunctionDecl 0x5622694b5b28 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x5622694b5938 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x5622694b59c8 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x5622694b5bd8 <col:39>
| `-NonNullAttr 0x5622694b5c30 <col:69, col:86> 1 2
|-FunctionDecl 0x5622694b5d30 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5622694b5c78 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5622694b5dd8 <line:564:22>
| `-NonNullAttr 0x5622694b5e30 <col:52, col:66> 1
|-FunctionDecl 0x5622694b5f98 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5622694b5ee0 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5622694b6040 <line:566:22>
| `-NonNullAttr 0x5622694b6098 <col:52, col:66> 1
|-FunctionDecl 0x5622694b6258 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x5622694b60e8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x5622694b6178 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x5622694b6308 <col:39>
| `-NonNullAttr 0x5622694b6360 <col:69, col:86> 1 2
|-FunctionDecl 0x5622694b6460 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5622694b63a8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5622694b6508 <line:571:22>
| `-NonNullAttr 0x5622694b6560 <col:52, col:66> 1
|-FunctionDecl 0x5622694b6748 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x5622694b6610 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x5622694b67f0 <line:573:22>
| `-NonNullAttr 0x5622694b6848 <col:63, col:77> 1
|-FunctionDecl 0x5622694b6950 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x5622694b6898 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x5622694b69f8 <line:575:22>
| `-NonNullAttr 0x5622694b6a50 <col:63, col:77> 1
|-FunctionDecl 0x5622694b6c78 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694b6a98 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x5622694b6b18 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x5622694b6d28 <line:579:22>
| `-NonNullAttr 0x5622694b6d80 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b6fa8 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x5622694b6dc8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x5622694b6e48 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x5622694b7058 <line:582:22>
| `-NonNullAttr 0x5622694b70b0 <col:63, col:77> 1
|-FunctionDecl 0x5622694b7258 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694b70f8 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x5622694b7178 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x5622694b7308 <line:586:22>
| `-NonNullAttr 0x5622694b7360 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b74e8 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x5622694b73a8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x5622694b7428 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x5622694b7598 <col:36>
| `-NonNullAttr 0x5622694b75f0 <col:77, col:91> 1
|-FunctionDecl 0x5622694b7928 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x5622694b76d0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x5622694b77e0 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x5622694b79d8 <line:591:22>
| `-NonNullAttr 0x5622694b7a30 <col:63, col:77> 1
|-FunctionDecl 0x5622694b7ba8 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x5622694b7a78 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x5622694b7c50 <line:593:22>
| `-NonNullAttr 0x5622694b7ca8 <col:63, col:77> 1
|-FunctionDecl 0x5622694b7db0 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x5622694b7cf8 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x5622694b7e58 <line:595:22>
| `-NonNullAttr 0x5622694b7eb0 <col:52, col:66> 1
|-FunctionDecl 0x5622694b7fc8 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x5622694b7f10 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x5622694b8070 <line:597:22>
| `-NonNullAttr 0x5622694b80c8 <col:52, col:66> 1
|-FunctionDecl 0x5622694b82f8 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x5622694b8118 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x5622694b8190 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x5622694b83a8 <line:600:22, col:39> 1 2
|-FunctionDecl 0x5622694b86d8 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x5622694b8428 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x5622694b84a0 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x5622694b8530 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x5622694b8790 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x5622694b89a8 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x5622694b8870 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x5622694b8a50 <line:606:22>
| `-NonNullAttr 0x5622694b8aa8 <col:63, col:77> 1
|-FunctionDecl 0x5622694b8bb0 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x5622694b8af8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x5622694b8c58 <line:608:22>
| `-NonNullAttr 0x5622694b8cb0 <col:63, col:77> 1
|-FunctionDecl 0x5622694b8f10 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694b8cf8 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x5622694b8d78 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x5622694b8fc0 <line:612:22>
| `-NonNullAttr 0x5622694b9018 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b9228 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x5622694b9068 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x5622694b90e8 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x5622694b92d8 <col:37>
| `-NonNullAttr 0x5622694b9330 <col:78, col:92> 1
|-FunctionDecl 0x5622694b9548 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x5622694b9378 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x5622694b9420 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x5622694b95f8 <line:618:22>
| `-NonNullAttr 0x5622694b9650 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694b9818 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x5622694b9698 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x5622694b9710 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x5622694b98c8 <line:621:22>
| `-NonNullAttr 0x5622694b9920 <col:63, col:77> 1
|-FunctionDecl 0x5622694b9bc8 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x5622694b9a00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x5622694b9a80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x5622694b9c78 <line:623:22>
| `-NonNullAttr 0x5622694b9cd0 <col:63, col:77> 1
|-FunctionDecl 0x5622694b9e48 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x5622694b9d18 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x5622694b9f20 <line:625:22>
| `-NonNullAttr 0x5622694b9f78 <col:63, col:77> 1
|-FunctionDecl 0x5622694ba080 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x5622694b9fc8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x5622694ba128 <line:627:22>
| `-NonNullAttr 0x5622694ba180 <col:52, col:66> 1
|-FunctionDecl 0x5622694ba280 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x5622694ba1c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x5622694ba328 <line:629:22>
| `-NonNullAttr 0x5622694ba380 <col:52, col:66> 1
|-FunctionDecl 0x5622694ba480 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x5622694ba3c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x5622694ba528 <line:631:22>
| `-NonNullAttr 0x5622694ba580 <col:52, col:66> 1
|-FunctionDecl 0x5622694ba958 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x5622694ba660 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x5622694ba770 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x5622694ba7f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x5622694baa10 <line:635:22>
| `-NonNullAttr 0x5622694baa68 <col:63, col:77> 1
|-FunctionDecl 0x5622694babe8 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x5622694baab8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x5622694bac90 <line:637:22>
| `-NonNullAttr 0x5622694bace8 <col:63, col:77> 1
|-FunctionDecl 0x5622694badf0 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x5622694bad38 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x5622694bae98 <line:639:22>
| `-NonNullAttr 0x5622694baef0 <col:52, col:66> 1
|-FunctionDecl 0x5622694bb0e8 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x5622694bafb0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x5622694bb190 <line:641:22>
| `-NonNullAttr 0x5622694bb1e8 <col:63, col:77> 1
|-FunctionDecl 0x5622694bb2f0 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x5622694bb238 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x5622694bb398 <line:643:22>
| `-NonNullAttr 0x5622694bb3f0 <col:63, col:77> 1
|-FunctionDecl 0x5622694bb618 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5622694bb438 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x5622694bb4b8 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x5622694bb6c8 <line:647:22>
| `-NonNullAttr 0x5622694bb720 <col:63, col:80> 1 2
|-FunctionDecl 0x5622694bb928 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x5622694bb768 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x5622694bb7e8 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x5622694bb9d8 <line:650:22>
| `-NonNullAttr 0x5622694bba30 <col:63, col:77> 1
|-FunctionDecl 0x5622694bbd78 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x5622694bbb10 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x5622694bbc30 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x5622694bbe28 <line:653:22>
| `-NonNullAttr 0x5622694bbe80 <col:63, col:77> 1
|-FunctionDecl 0x5622694bbfe8 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x5622694bbec8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x5622694bc090 <col:69>
|-FunctionDecl 0x5622694bc208 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x5622694bc0f8 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x5622694bc2b0 <col:72>
|-FunctionDecl 0x5622694bc4e8 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x5622694bc318 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x5622694bc3c8 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x5622694bc598 <col:44>
|-FunctionDecl 0x5622694bc7b8 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x5622694bc600 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5622694bc678 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x5622694bc868 <line:660:22>
| `-NonNullAttr 0x5622694bc8c0 <col:63, col:77> 2
|-FunctionDecl 0x5622694bcd08 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x5622694bc9a0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x5622694bcab0 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x5622694bcbc0 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x5622694bcdc0 <col:47>
|-FunctionDecl 0x5622694bdf60 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x5622694bce30 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x5622694be0b8 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x5622694be020 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x5622694be210 <line:667:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x5622694be178 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x5622694be2d8 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x5622694be398 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x5622694be458 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x5622694be510 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x5622694be590 prev 0x5622694be510 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x5622694be5f8 <col:24> 'int' 0
|-VarDecl 0x5622694be630 <line:673:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x5622694be6b0 prev 0x5622694be630 <line:674:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x5622694be718 <col:27> 'int' 0
|-VarDecl 0x5622694be750 <line:675:1, col:5> col:5 used __unbuffered_p2_EAX 'int'
|-VarDecl 0x5622694be7d0 prev 0x5622694be750 <line:676:1, col:27> col:5 used __unbuffered_p2_EAX 'int' cinit
| `-IntegerLiteral 0x5622694be838 <col:27> 'int' 0
|-VarDecl 0x5622694be870 <line:677:1, col:5> col:5 used __unbuffered_p2_EBX 'int'
|-VarDecl 0x5622694be8f0 prev 0x5622694be870 <line:678:1, col:27> col:5 used __unbuffered_p2_EBX 'int' cinit
| `-IntegerLiteral 0x5622694be958 <col:27> 'int' 0
|-VarDecl 0x5622694be988 <line:679:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x5622694bea00 <line:680:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x5622694bea80 <line:681:1, col:5> col:5 used x 'int'
|-VarDecl 0x5622694beb00 prev 0x5622694bea80 <line:682:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x5622694beb68 <col:9> 'int' 0
|-VarDecl 0x5622694beba0 <line:683:1, col:5> col:5 used y 'int'
|-VarDecl 0x5622694bec20 prev 0x5622694beba0 <line:684:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x5622694bec88 <col:9> 'int' 0
|-VarDecl 0x5622694becb8 <line:685:1, col:7> col:7 used y$flush_delayed '_Bool'
|-VarDecl 0x5622694bed38 <line:686:1, col:5> col:5 used y$mem_tmp 'int'
|-VarDecl 0x5622694bedb0 <line:687:1, col:7> col:7 used y$r_buff0_thd0 '_Bool'
|-VarDecl 0x5622694bee28 <line:688:1, col:7> col:7 used y$r_buff0_thd1 '_Bool'
|-VarDecl 0x5622694beea0 <line:689:1, col:7> col:7 used y$r_buff0_thd2 '_Bool'
|-VarDecl 0x5622694bef70 <line:690:1, col:7> col:7 used y$r_buff0_thd3 '_Bool'
|-VarDecl 0x5622694befe8 <line:691:1, col:7> col:7 used y$r_buff1_thd0 '_Bool'
|-VarDecl 0x5622694bf060 <line:692:1, col:7> col:7 used y$r_buff1_thd1 '_Bool'
|-VarDecl 0x5622694bf0d8 <line:693:1, col:7> col:7 used y$r_buff1_thd2 '_Bool'
|-VarDecl 0x5622694bf150 <line:694:1, col:7> col:7 used y$r_buff1_thd3 '_Bool'
|-VarDecl 0x5622694bf1c8 <line:695:1, col:7> col:7 y$read_delayed '_Bool'
|-VarDecl 0x5622694bf248 <line:696:1, col:6> col:6 y$read_delayed_var 'int *'
|-VarDecl 0x5622694bf2c8 <line:697:1, col:5> col:5 used y$w_buff0 'int'
|-VarDecl 0x5622694bf340 <line:698:1, col:7> col:7 used y$w_buff0_used '_Bool'
|-VarDecl 0x5622694bf3c0 <line:699:1, col:5> col:5 used y$w_buff1 'int'
|-VarDecl 0x5622694bf438 <line:700:1, col:7> col:7 used y$w_buff1_used '_Bool'
|-VarDecl 0x5622694bf4b0 <line:701:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x5622694bf528 <line:702:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x5622694bf640 prev 0x5622694bdf60 <line:703:1, line:731:1> line:703:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x5622694bf5a8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x5622694c0e68 <line:704:1, line:731:1>
|   |-CallExpr 0x5622694bf758 <line:705:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694bf740 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694bf6e8 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694bf7d0 <line:706:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x5622694bf778 <col:3> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x5622694bf7b8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694bf798 <col:15> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |-BinaryOperator 0x5622694bf830 <line:707:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x5622694bf7f0 <col:3> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   | `-IntegerLiteral 0x5622694bf810 <col:15> 'int' 2
|   |-BinaryOperator 0x5622694bf8a8 <line:708:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5622694bf850 <col:3> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694bf890 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694bf870 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5622694bf940 <line:709:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x5622694bf8c8 <col:3> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x5622694bf918 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x5622694bf8e8 <col:27> 'int' 1
|   |-CallExpr 0x5622694bfac8 <line:710:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x5622694bfab0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5622694bf960 <col:3> 'void (int)' Function 0x5622694650d8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x5622694bfa60 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x5622694bfa40 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x5622694bfa20 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x5622694bf9d8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x5622694bf9c0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5622694bf980 <col:23> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x5622694bfa08 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x5622694bf9f0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x5622694bf9a0 <col:41> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5622694bfb48 <line:711:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5622694bfaf0 <col:3> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x5622694bfb30 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694bfb10 <col:20> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x5622694bfbc0 <line:712:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5622694bfb68 <col:3> '_Bool' lvalue Var 0x5622694bf060 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x5622694bfba8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694bfb88 <col:20> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x5622694bfc38 <line:713:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5622694bfbe0 <col:3> '_Bool' lvalue Var 0x5622694bf0d8 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5622694bfc20 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694bfc00 <col:20> '_Bool' lvalue Var 0x5622694beea0 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x5622694bfcb0 <line:714:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5622694bfc58 <col:3> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x5622694bfc98 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694bfc78 <col:20> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x5622694bfd48 <line:715:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x5622694bfcd0 <col:3> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   | `-CStyleCastExpr 0x5622694bfd20 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x5622694bfcf0 <col:27> 'int' 1
|   |-CallExpr 0x5622694bfda0 <line:716:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694bfd88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694bfd68 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694bfdf8 <line:717:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694bfde0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694bfdc0 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694bfe58 <line:718:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x5622694bfe18 <col:3> 'int' lvalue Var 0x5622694beb00 'x' 'int'
|   | `-IntegerLiteral 0x5622694bfe38 <col:7> 'int' 1
|   |-CallExpr 0x5622694bfeb0 <line:719:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694bfe98 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694bfe78 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694bff08 <line:720:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694bfef0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694bfed0 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c0208 <line:721:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x5622694bff28 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   | `-ConditionalOperator 0x5622694c01d8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x5622694c0000 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x5622694bffb8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x5622694bffa0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5622694bff48 <col:7> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x5622694bffe8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x5622694bffd0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5622694bff80 <col:25> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c01c0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c0020 <col:42> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5622694c01a0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x5622694c0170 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x5622694c00e0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5622694c0098 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5622694c0080 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5622694c0040 <col:55> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5622694c00c8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5622694c00b0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5622694c0060 <col:73> '_Bool' lvalue Var 0x5622694bf060 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c0140 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c0100 <col:90> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x5622694c0158 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c0120 <col:102> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c0410 <line:722:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c0228 <col:3> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c03f8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c03c8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5622694c02e8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5622694c02a0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5622694c0288 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5622694c0248 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5622694c02d0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5622694c02b8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5622694c0268 <col:38> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c0380 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c0338 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c0308 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c03b0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c0398 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c0360 <col:66> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5622694c06f8 <line:723:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c0430 <col:3> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c06e0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c06b0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5622694c05d0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5622694c04f0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5622694c04a8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5622694c0490 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5622694c0450 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5622694c04d8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5622694c04c0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5622694c0470 <col:38> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x5622694c05b0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5622694c0568 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5622694c0550 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5622694c0510 <col:56> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5622694c0598 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5622694c0580 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5622694c0530 <col:74> '_Bool' lvalue Var 0x5622694bf060 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c0668 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c0620 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c05f0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c0698 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c0680 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c0648 <col:102> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x5622694c0900 <line:724:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c0718 <col:3> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c08e8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c08b8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5622694c07d8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5622694c0790 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5622694c0778 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5622694c0738 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5622694c07c0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5622694c07a8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5622694c0758 <col:38> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c0870 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c0828 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c07f8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c08a0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c0888 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c0850 <col:66> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x5622694c0be8 <line:725:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c0920 <col:3> '_Bool' lvalue Var 0x5622694bf060 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c0bd0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c0ba0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5622694c0ac0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5622694c09e0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5622694c0998 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5622694c0980 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5622694c0940 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5622694c09c8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5622694c09b0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5622694c0960 <col:38> '_Bool' lvalue Var 0x5622694bee28 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x5622694c0aa0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5622694c0a58 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5622694c0a40 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5622694c0a00 <col:56> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5622694c0a88 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5622694c0a70 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5622694c0a20 <col:74> '_Bool' lvalue Var 0x5622694bf060 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c0b58 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c0b10 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c0ae0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c0b88 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c0b70 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c0b38 <col:102> '_Bool' lvalue Var 0x5622694bf060 'y$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x5622694c0c40 <line:726:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c0c28 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c0c08 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694c0c98 <line:727:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c0c80 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c0c60 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c0d50 <line:728:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x5622694c0cb8 <col:3> 'int' lvalue Var 0x5622694be590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x5622694c0d30 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x5622694c0d18 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c0cd8 <col:22> 'int' lvalue Var 0x5622694be590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x5622694c0cf8 <col:41> 'int' 1
|   |-CallExpr 0x5622694c0da8 <line:729:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c0d90 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c0d70 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x5622694c0e58 <line:730:3, col:36>
|     `-CallExpr 0x5622694c0e38 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x5622694c0e20 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5622694c0dc8 <col:10> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x5622694c1028 prev 0x5622694be0b8 <line:732:1, line:751:1> line:732:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x5622694c0f90 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x5622694c2260 <line:733:1, line:751:1>
|   |-CallExpr 0x5622694c1108 <line:734:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c10f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c10d0 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c1180 <line:735:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x5622694c1128 <col:3> 'int' lvalue Var 0x5622694be6b0 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x5622694c1168 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694c1148 <col:25> 'int' lvalue Var 0x5622694beb00 'x' 'int'
|   |-CallExpr 0x5622694c11d8 <line:736:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c11c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c11a0 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694c1230 <line:737:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c1218 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c11f8 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c1290 <line:738:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x5622694c1250 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   | `-IntegerLiteral 0x5622694c1270 <col:7> 'int' 1
|   |-CallExpr 0x5622694c12e8 <line:739:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c12d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c12b0 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694c1340 <line:740:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c1328 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c1308 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c1628 <line:741:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x5622694c1360 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   | `-ConditionalOperator 0x5622694c15f8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x5622694c1420 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x5622694c13d8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x5622694c13c0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5622694c1380 <col:7> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x5622694c1408 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x5622694c13f0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5622694c13a0 <col:25> '_Bool' lvalue Var 0x5622694beea0 'y$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c15e0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c1440 <col:42> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5622694c15c0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x5622694c1590 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x5622694c1500 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5622694c14b8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5622694c14a0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5622694c1460 <col:55> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5622694c14e8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5622694c14d0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5622694c1480 <col:73> '_Bool' lvalue Var 0x5622694bf0d8 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c1560 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c1520 <col:90> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x5622694c1578 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c1540 <col:102> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c1830 <line:742:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c1648 <col:3> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c1818 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c17e8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5622694c1708 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5622694c16c0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5622694c16a8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5622694c1668 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5622694c16f0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5622694c16d8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5622694c1688 <col:38> '_Bool' lvalue Var 0x5622694beea0 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c17a0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c1758 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c1728 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c17d0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c17b8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c1780 <col:66> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5622694c1b18 <line:743:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c1850 <col:3> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c1b00 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c1ad0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5622694c19f0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5622694c1910 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5622694c18c8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5622694c18b0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5622694c1870 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5622694c18f8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5622694c18e0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5622694c1890 <col:38> '_Bool' lvalue Var 0x5622694beea0 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x5622694c19d0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5622694c1988 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5622694c1970 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5622694c1930 <col:56> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5622694c19b8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5622694c19a0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5622694c1950 <col:74> '_Bool' lvalue Var 0x5622694bf0d8 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c1a88 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c1a40 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c1a10 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c1ab8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c1aa0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c1a68 <col:102> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x5622694c1d20 <line:744:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c1b38 <col:3> '_Bool' lvalue Var 0x5622694beea0 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c1d08 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c1cd8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5622694c1bf8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5622694c1bb0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5622694c1b98 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5622694c1b58 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5622694c1be0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5622694c1bc8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5622694c1b78 <col:38> '_Bool' lvalue Var 0x5622694beea0 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c1c90 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c1c48 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c1c18 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c1cc0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c1ca8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c1c70 <col:66> '_Bool' lvalue Var 0x5622694beea0 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x5622694c2018 <line:745:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c1d40 <col:3> '_Bool' lvalue Var 0x5622694bf0d8 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c2000 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c1fd0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5622694c1ee0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5622694c1e00 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5622694c1db8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5622694c1da0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5622694c1d60 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5622694c1de8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5622694c1dd0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5622694c1d80 <col:38> '_Bool' lvalue Var 0x5622694beea0 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x5622694c1ec0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5622694c1e78 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5622694c1e60 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5622694c1e20 <col:56> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5622694c1ea8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5622694c1e90 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5622694c1e40 <col:74> '_Bool' lvalue Var 0x5622694bf0d8 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c1f78 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c1f30 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c1f00 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c1fb8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c1fa0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c1f58 <col:102> '_Bool' lvalue Var 0x5622694bf0d8 'y$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x5622694c2070 <line:746:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c2058 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c2038 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694c20c8 <line:747:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c20b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c2090 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c2180 <line:748:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x5622694c20e8 <col:3> 'int' lvalue Var 0x5622694be590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x5622694c2160 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x5622694c2148 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c2108 <col:22> 'int' lvalue Var 0x5622694be590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x5622694c2128 <col:41> 'int' 1
|   |-CallExpr 0x5622694c21d8 <line:749:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c21c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c21a0 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x5622694c2250 <line:750:3, col:36>
|     `-CallExpr 0x5622694c2230 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x5622694c2218 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5622694c21f8 <col:10> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x5622694c23a8 prev 0x5622694be210 <line:752:1, line:797:1> line:752:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x5622694c2310 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x5622694c8920 <line:753:1, line:797:1>
|   |-CallExpr 0x5622694c2488 <line:754:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c2470 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c2450 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c2538 <line:755:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c24a8 <col:3> '_Bool' lvalue Var 0x5622694bf4b0 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c2520 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x5622694c2500 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x5622694c24e8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5622694c24c8 <col:19> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x5622694c25e8 <line:756:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c2558 <col:3> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c25d0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x5622694c25b0 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x5622694c2598 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5622694c2578 <col:19> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x5622694c2660 <line:757:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c2608 <col:3> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c2648 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694c2628 <col:21> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x5622694c26d8 <line:758:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x5622694c2680 <col:3> 'int' lvalue Var 0x5622694bed38 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x5622694c26c0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694c26a0 <col:15> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c2b10 <line:759:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x5622694c26f8 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   | `-ConditionalOperator 0x5622694c2ae0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x5622694c2908 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x5622694c2828 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x5622694c2750 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x5622694c2738 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x5622694c2718 <col:8> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x5622694c2808 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x5622694c27a0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x5622694c2788 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x5622694c2768 <col:27> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |   | |   `-UnaryOperator 0x5622694c27f0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x5622694c27d8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x5622694c27b8 <col:46> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x5622694c28e8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x5622694c2880 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x5622694c2868 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5622694c2848 <col:65> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |   |   `-UnaryOperator 0x5622694c28d0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x5622694c28b8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x5622694c2898 <col:84> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c2ac8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c2928 <col:101> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |   `-ParenExpr 0x5622694c2aa8 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x5622694c2a78 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x5622694c29e8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5622694c29a0 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5622694c2988 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5622694c2948 <col:106> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5622694c29d0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5622694c29b8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5622694c2968 <col:124> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c2a48 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c2a08 <col:141> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x5622694c2a60 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c2a28 <col:153> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x5622694c3048 <line:760:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x5622694c2b30 <col:3> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x5622694c3018 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x5622694c2fe8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5622694c2fd0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5622694c2b50 <col:15> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c3000 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c2b70 <col:31> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5622694c2fb0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x5622694c2f58 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x5622694c2d80 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x5622694c2ca0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x5622694c2bc8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x5622694c2bb0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x5622694c2b90 <col:45> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x5622694c2c80 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x5622694c2c18 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x5622694c2c00 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x5622694c2be0 <col:64> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x5622694c2c68 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x5622694c2c50 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x5622694c2c30 <col:83> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x5622694c2d60 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x5622694c2cf8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x5622694c2ce0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x5622694c2cc0 <col:102> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x5622694c2d48 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x5622694c2d30 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5622694c2d10 <col:121> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c2f40 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c2da0 <col:138> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x5622694c2f20 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x5622694c2ef0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x5622694c2e60 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x5622694c2e18 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x5622694c2e00 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x5622694c2dc0 <col:151> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x5622694c2e48 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x5622694c2e30 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x5622694c2de0 <col:169> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x5622694c2ec0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5622694c2e80 <col:186> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x5622694c2ed8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5622694c2ea0 <col:198> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |-BinaryOperator 0x5622694c3558 <line:761:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x5622694c3068 <col:3> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x5622694c3528 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x5622694c34f8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5622694c34e0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5622694c3088 <col:15> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c3510 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c30a8 <col:31> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x5622694c34c0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x5622694c3490 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x5622694c32b8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x5622694c31d8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x5622694c3100 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x5622694c30e8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x5622694c30c8 <col:45> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x5622694c31b8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x5622694c3150 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x5622694c3138 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x5622694c3118 <col:64> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x5622694c31a0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x5622694c3188 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x5622694c3168 <col:83> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x5622694c3298 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x5622694c3230 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x5622694c3218 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x5622694c31f8 <col:102> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x5622694c3280 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x5622694c3268 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5622694c3248 <col:121> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c3478 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c32d8 <col:138> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x5622694c3458 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x5622694c3428 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x5622694c3398 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x5622694c3350 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x5622694c3338 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x5622694c32f8 <col:151> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x5622694c3380 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x5622694c3368 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x5622694c3318 <col:169> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x5622694c33f8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5622694c33b8 <col:186> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x5622694c3410 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5622694c33d8 <col:198> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x5622694c3b00 <line:762:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c3578 <col:3> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c3ae8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c3ab8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x5622694c3a70 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c3a58 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c3598 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c3aa0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c3a88 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c35b8 <col:36> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x5622694c3a38 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x5622694c3a08 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x5622694c37c8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5622694c36e8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5622694c3610 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5622694c35f8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5622694c35d8 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5622694c36c8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5622694c3660 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5622694c3648 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5622694c3628 <col:74> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x5622694c36b0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5622694c3698 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5622694c3678 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5622694c37a8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5622694c3740 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5622694c3728 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5622694c3708 <col:112> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x5622694c3790 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5622694c3778 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5622694c3758 <col:131> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x5622694c39f0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5622694c39d8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5622694c37e8 <col:148> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x5622694c39b8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x5622694c3988 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x5622694c38a8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5622694c3860 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5622694c3848 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5622694c3808 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5622694c3890 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5622694c3878 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5622694c3828 <col:184> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x5622694c3940 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5622694c38f8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5622694c38c8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5622694c3970 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x5622694c3958 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5622694c3920 <col:212> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5622694c40e8 <line:763:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c3b20 <col:3> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c40d0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c40a0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x5622694c4058 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c4040 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c3b40 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c4088 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c4070 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c3b60 <col:36> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x5622694c4020 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x5622694c3ff0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x5622694c3d70 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5622694c3c90 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5622694c3bb8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5622694c3ba0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5622694c3b80 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5622694c3c70 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5622694c3c08 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5622694c3bf0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5622694c3bd0 <col:74> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x5622694c3c58 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5622694c3c40 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5622694c3c20 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5622694c3d50 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5622694c3ce8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5622694c3cd0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5622694c3cb0 <col:112> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x5622694c3d38 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5622694c3d20 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5622694c3d00 <col:131> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x5622694c3fd8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5622694c3fc0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5622694c3d90 <col:148> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x5622694c3f80 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x5622694c3f50 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x5622694c3e50 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5622694c3e08 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5622694c3df0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5622694c3db0 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5622694c3e38 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5622694c3e20 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5622694c3dd0 <col:184> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x5622694c3f20 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5622694c3ea0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5622694c3e70 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5622694c3f38 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x5622694c3ef8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x5622694c3ec8 <col:219> 'int' 0
|   |-BinaryOperator 0x5622694c4690 <line:764:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c4108 <col:3> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c4678 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c4648 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x5622694c4600 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c45e8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c4128 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c4630 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c4618 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c4148 <col:36> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x5622694c45c8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x5622694c4598 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x5622694c4358 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5622694c4278 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5622694c41a0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5622694c4188 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5622694c4168 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5622694c4258 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5622694c41f0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5622694c41d8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5622694c41b8 <col:74> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x5622694c4240 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5622694c4228 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5622694c4208 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5622694c4338 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5622694c42d0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5622694c42b8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5622694c4298 <col:112> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x5622694c4320 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5622694c4308 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5622694c42e8 <col:131> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x5622694c4580 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5622694c4568 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5622694c4378 <col:148> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x5622694c4548 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x5622694c4518 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x5622694c4438 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5622694c43f0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5622694c43d8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5622694c4398 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5622694c4420 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5622694c4408 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5622694c43b8 <col:184> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x5622694c44d0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5622694c4488 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5622694c4458 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5622694c4500 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x5622694c44e8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5622694c44b0 <col:212> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x5622694c4c58 <line:765:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c46b0 <col:3> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c4c40 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c4c10 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x5622694c4bc8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c4bb0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c46d0 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c4bf8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c4be0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c46f0 <col:36> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x5622694c4b90 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x5622694c4b60 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x5622694c4900 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5622694c4820 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5622694c4748 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5622694c4730 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5622694c4710 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5622694c4800 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5622694c4798 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5622694c4780 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5622694c4760 <col:74> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x5622694c47e8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5622694c47d0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5622694c47b0 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5622694c48e0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5622694c4878 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5622694c4860 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5622694c4840 <col:112> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x5622694c48c8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5622694c48b0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5622694c4890 <col:131> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x5622694c4b48 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5622694c4b30 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5622694c4920 <col:148> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x5622694c4b10 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x5622694c4ae0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x5622694c49e0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5622694c4998 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5622694c4980 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5622694c4940 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5622694c49c8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5622694c49b0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5622694c4960 <col:184> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x5622694c4ab0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5622694c4a30 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5622694c4a00 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5622694c4ac8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x5622694c4a88 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x5622694c4a58 <col:219> 'int' 0
|   |-BinaryOperator 0x5622694c4cd0 <line:766:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x5622694c4c78 <col:3> 'int' lvalue Var 0x5622694be7d0 '__unbuffered_p2_EAX' 'int'
|   | `-ImplicitCastExpr 0x5622694c4cb8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694c4c98 <col:25> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c4e00 <line:767:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x5622694c4cf0 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   | `-ConditionalOperator 0x5622694c4dd0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x5622694c4d88 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5622694c4d70 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5622694c4d10 <col:7> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c4da0 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c4d30 <col:25> 'int' lvalue Var 0x5622694bed38 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x5622694c4db8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x5622694c4d50 <col:37> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c4e98 <line:768:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c4e20 <col:3> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x5622694c4e70 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x5622694c4e40 <col:28> 'int' 0
|   |-CallExpr 0x5622694c4ef0 <line:769:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c4ed8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c4eb8 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694c4f48 <line:770:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c4f30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c4f10 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c5008 <line:771:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c4f68 <col:3> '_Bool' lvalue Var 0x5622694bf4b0 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c4ff0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x5622694c4fd0 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x5622694c4fa8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5622694c4f88 <col:19> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x5622694c50b8 <line:772:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c5028 <col:3> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c50a0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x5622694c5080 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x5622694c5068 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5622694c5048 <col:19> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x5622694c5130 <line:773:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c50d8 <col:3> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c5118 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694c50f8 <col:21> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x5622694c51a8 <line:774:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x5622694c5150 <col:3> 'int' lvalue Var 0x5622694bed38 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x5622694c5190 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694c5170 <col:15> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c55e0 <line:775:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x5622694c51c8 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   | `-ConditionalOperator 0x5622694c55b0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x5622694c53d8 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x5622694c52f8 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x5622694c5220 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x5622694c5208 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x5622694c51e8 <col:8> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x5622694c52d8 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x5622694c5270 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x5622694c5258 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x5622694c5238 <col:27> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |   | |   `-UnaryOperator 0x5622694c52c0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x5622694c52a8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x5622694c5288 <col:46> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x5622694c53b8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x5622694c5350 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x5622694c5338 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5622694c5318 <col:65> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |   |   `-UnaryOperator 0x5622694c53a0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x5622694c5388 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x5622694c5368 <col:84> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c5598 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c53f8 <col:101> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |   `-ParenExpr 0x5622694c5578 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x5622694c5548 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x5622694c54b8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5622694c5470 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5622694c5458 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5622694c5418 <col:106> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5622694c54a0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5622694c5488 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5622694c5438 <col:124> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c5518 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c54d8 <col:141> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x5622694c5530 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c54f8 <col:153> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x5622694c5af0 <line:776:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x5622694c5600 <col:3> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x5622694c5ac0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x5622694c5a90 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5622694c5a78 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5622694c5620 <col:15> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c5aa8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c5640 <col:31> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5622694c5a58 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x5622694c5a28 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x5622694c5850 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x5622694c5770 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x5622694c5698 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x5622694c5680 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x5622694c5660 <col:45> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x5622694c5750 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x5622694c56e8 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x5622694c56d0 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x5622694c56b0 <col:64> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x5622694c5738 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x5622694c5720 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x5622694c5700 <col:83> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x5622694c5830 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x5622694c57c8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x5622694c57b0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x5622694c5790 <col:102> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x5622694c5818 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x5622694c5800 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5622694c57e0 <col:121> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c5a10 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c5870 <col:138> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x5622694c59f0 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x5622694c59c0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x5622694c5930 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x5622694c58e8 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x5622694c58d0 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x5622694c5890 <col:151> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x5622694c5918 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x5622694c5900 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x5622694c58b0 <col:169> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x5622694c5990 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5622694c5950 <col:186> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x5622694c59a8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5622694c5970 <col:198> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |-BinaryOperator 0x5622694c6010 <line:777:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x5622694c5b10 <col:3> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x5622694c5fe0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x5622694c5fa0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5622694c5f88 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5622694c5b30 <col:15> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c5fb8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c5b50 <col:31> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x5622694c5f68 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x5622694c5f38 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x5622694c5d60 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x5622694c5c80 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x5622694c5ba8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x5622694c5b90 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x5622694c5b70 <col:45> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x5622694c5c60 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x5622694c5bf8 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x5622694c5be0 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x5622694c5bc0 <col:64> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x5622694c5c48 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x5622694c5c30 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x5622694c5c10 <col:83> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x5622694c5d40 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x5622694c5cd8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x5622694c5cc0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x5622694c5ca0 <col:102> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x5622694c5d28 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x5622694c5d10 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5622694c5cf0 <col:121> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c5f20 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c5d80 <col:138> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x5622694c5f00 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x5622694c5ed0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x5622694c5e40 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x5622694c5df8 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x5622694c5de0 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x5622694c5da0 <col:151> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x5622694c5e28 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x5622694c5e10 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x5622694c5dc0 <col:169> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x5622694c5ea0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5622694c5e60 <col:186> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x5622694c5eb8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5622694c5e80 <col:198> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x5622694c65b8 <line:778:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c6030 <col:3> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c65a0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c6570 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x5622694c6528 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c6510 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c6050 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c6558 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c6540 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c6070 <col:36> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x5622694c64f0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x5622694c64c0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x5622694c6280 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5622694c61a0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5622694c60c8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5622694c60b0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5622694c6090 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5622694c6180 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5622694c6118 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5622694c6100 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5622694c60e0 <col:74> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x5622694c6168 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5622694c6150 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5622694c6130 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5622694c6260 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5622694c61f8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5622694c61e0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5622694c61c0 <col:112> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x5622694c6248 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5622694c6230 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5622694c6210 <col:131> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x5622694c64a8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5622694c6490 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5622694c62a0 <col:148> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x5622694c6470 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x5622694c6440 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x5622694c6360 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5622694c6318 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5622694c6300 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5622694c62c0 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5622694c6348 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5622694c6330 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5622694c62e0 <col:184> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x5622694c63f8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5622694c63b0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5622694c6380 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5622694c6428 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x5622694c6410 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5622694c63d8 <col:212> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5622694c6b80 <line:779:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c65d8 <col:3> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c6b68 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c6b38 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x5622694c6af0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c6ad8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c65f8 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c6b20 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c6b08 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c6618 <col:36> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x5622694c6ab8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x5622694c6a88 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x5622694c6828 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5622694c6748 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5622694c6670 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5622694c6658 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5622694c6638 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5622694c6728 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5622694c66c0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5622694c66a8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5622694c6688 <col:74> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x5622694c6710 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5622694c66f8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5622694c66d8 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5622694c6808 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5622694c67a0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5622694c6788 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5622694c6768 <col:112> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x5622694c67f0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5622694c67d8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5622694c67b8 <col:131> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x5622694c6a70 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5622694c6a58 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5622694c6848 <col:148> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x5622694c6a38 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x5622694c6a08 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x5622694c6908 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5622694c68c0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5622694c68a8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5622694c6868 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5622694c68f0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5622694c68d8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5622694c6888 <col:184> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x5622694c69d8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5622694c6958 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5622694c6928 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5622694c69f0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x5622694c69b0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x5622694c6980 <col:219> 'int' 0
|   |-BinaryOperator 0x5622694c7138 <line:780:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c6ba0 <col:3> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c7120 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c70f0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x5622694c70a8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c7090 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c6bc0 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c70d8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c70c0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c6be0 <col:36> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x5622694c7070 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x5622694c7040 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x5622694c6df0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5622694c6d10 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5622694c6c38 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5622694c6c20 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5622694c6c00 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5622694c6cf0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5622694c6c88 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5622694c6c70 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5622694c6c50 <col:74> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x5622694c6cd8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5622694c6cc0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5622694c6ca0 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5622694c6dd0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5622694c6d68 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5622694c6d50 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5622694c6d30 <col:112> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x5622694c6db8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5622694c6da0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5622694c6d80 <col:131> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x5622694c7028 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5622694c7010 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5622694c6e10 <col:148> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x5622694c6ff0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x5622694c6fb0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x5622694c6ed0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5622694c6e88 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5622694c6e70 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5622694c6e30 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5622694c6eb8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5622694c6ea0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5622694c6e50 <col:184> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x5622694c6f68 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5622694c6f20 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5622694c6ef0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5622694c6f98 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x5622694c6f80 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5622694c6f48 <col:212> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x5622694c7700 <line:781:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c7158 <col:3> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c76e8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c76b8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x5622694c7670 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c7658 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c7178 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c76a0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5622694c7688 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5622694c7198 <col:36> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x5622694c7638 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x5622694c7608 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x5622694c73a8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5622694c72c8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5622694c71f0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5622694c71d8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5622694c71b8 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5622694c72a8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5622694c7240 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5622694c7228 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5622694c7208 <col:74> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x5622694c7290 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5622694c7278 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5622694c7258 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5622694c7388 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5622694c7320 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5622694c7308 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5622694c72e8 <col:112> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x5622694c7370 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5622694c7358 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5622694c7338 <col:131> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x5622694c75f0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5622694c75d8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5622694c73c8 <col:148> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x5622694c75b8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x5622694c7588 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x5622694c7488 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5622694c7440 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5622694c7428 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5622694c73e8 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5622694c7470 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5622694c7458 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5622694c7408 <col:184> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x5622694c7558 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5622694c74d8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5622694c74a8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5622694c7570 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x5622694c7530 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x5622694c7500 <col:219> 'int' 0
|   |-BinaryOperator 0x5622694c7778 <line:782:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x5622694c7720 <col:3> 'int' lvalue Var 0x5622694be8f0 '__unbuffered_p2_EBX' 'int'
|   | `-ImplicitCastExpr 0x5622694c7760 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5622694c7740 <col:25> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c78a8 <line:783:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x5622694c7798 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   | `-ConditionalOperator 0x5622694c7878 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x5622694c7830 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5622694c7818 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5622694c77b8 <col:7> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c7848 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c77d8 <col:25> 'int' lvalue Var 0x5622694bed38 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x5622694c7860 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x5622694c77f8 <col:37> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c7940 <line:784:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c78c8 <col:3> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x5622694c7918 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x5622694c78e8 <col:28> 'int' 0
|   |-CallExpr 0x5622694c7998 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c7980 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c7960 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694c79f0 <line:786:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c79d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c79b8 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c7cd8 <line:787:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x5622694c7a10 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   | `-ConditionalOperator 0x5622694c7ca8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x5622694c7ad0 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x5622694c7a88 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x5622694c7a70 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5622694c7a30 <col:7> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x5622694c7ab8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x5622694c7aa0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5622694c7a50 <col:25> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x5622694c7c90 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c7af0 <col:42> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5622694c7c70 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x5622694c7c40 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x5622694c7bb0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5622694c7b68 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5622694c7b50 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5622694c7b10 <col:55> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5622694c7b98 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5622694c7b80 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5622694c7b30 <col:73> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x5622694c7c10 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5622694c7bd0 <col:90> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x5622694c7c28 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c7bf0 <col:102> 'int' lvalue Var 0x5622694bec20 'y' 'int'
|   |-BinaryOperator 0x5622694c7ee0 <line:788:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c7cf8 <col:3> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c7ec8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c7e98 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5622694c7db8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5622694c7d70 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5622694c7d58 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5622694c7d18 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5622694c7da0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5622694c7d88 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5622694c7d38 <col:38> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c7e50 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c7e08 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c7dd8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c7e80 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c7e68 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c7e30 <col:66> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5622694c81e8 <line:789:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c7f00 <col:3> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c81d0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c81a0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5622694c80c0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5622694c7fc0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5622694c7f78 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5622694c7f60 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5622694c7f20 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5622694c7fa8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5622694c7f90 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5622694c7f40 <col:38> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x5622694c80a0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5622694c8058 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5622694c8040 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5622694c8000 <col:56> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5622694c8088 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5622694c8070 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5622694c8020 <col:74> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c8158 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c8110 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c80e0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c8188 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c8170 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c8138 <col:102> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x5622694c83f0 <line:790:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c8208 <col:3> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c83d8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c83a8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5622694c82c8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5622694c8280 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5622694c8268 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5622694c8228 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5622694c82b0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5622694c8298 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5622694c8248 <col:38> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c8360 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c8318 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c82e8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c8390 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c8378 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c8340 <col:66> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x5622694c86d8 <line:791:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5622694c8410 <col:3> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x5622694c86c0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5622694c8690 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5622694c85b0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5622694c84d0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5622694c8488 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5622694c8470 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5622694c8430 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5622694c84b8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5622694c84a0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5622694c8450 <col:38> '_Bool' lvalue Var 0x5622694bef70 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x5622694c8590 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5622694c8548 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5622694c8530 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5622694c84f0 <col:56> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5622694c8578 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5622694c8560 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5622694c8510 <col:74> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x5622694c8648 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5622694c8600 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5622694c85d0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5622694c8678 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5622694c8660 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5622694c8628 <col:102> '_Bool' lvalue Var 0x5622694bf150 'y$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x5622694c8730 <line:792:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c8718 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c86f8 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5622694c8788 <line:793:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5622694c8770 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c8750 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5622694c8840 <line:794:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x5622694c87a8 <col:3> 'int' lvalue Var 0x5622694be590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x5622694c8820 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x5622694c8808 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5622694c87c8 <col:22> 'int' lvalue Var 0x5622694be590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x5622694c87e8 <col:41> 'int' 1
|   |-CallExpr 0x5622694c8898 <line:795:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5622694c8880 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5622694c8860 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x5622694c8910 <line:796:3, col:36>
|     `-CallExpr 0x5622694c88f0 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x5622694c88d8 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5622694c88b8 <col:10> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x5622694c8aa8 prev 0x5622694be2d8 <line:798:1, line:800:1> line:798:6 fence 'void ()'
| `-CompoundStmt 0x5622694c8b48 <line:799:1, line:800:1>
|-FunctionDecl 0x5622694c8b78 prev 0x5622694be398 <line:801:1, line:803:1> line:801:6 isync 'void ()'
| `-CompoundStmt 0x5622694c8c18 <line:802:1, line:803:1>
|-FunctionDecl 0x5622694c8c48 prev 0x5622694be458 <line:804:1, line:806:1> line:804:6 lwfence 'void ()'
| `-CompoundStmt 0x5622694c8ce8 <line:805:1, line:806:1>
`-FunctionDecl 0x5622694c8d58 <line:807:1, line:844:1> line:807:5 main 'int ()'
  `-CompoundStmt 0x5622694cd3c0 <line:808:1, line:844:1>
    |-DeclStmt 0x5622694c8e70 <line:809:3, col:18>
    | `-VarDecl 0x5622694c8e08 <col:3, col:13> col:13 used t1863 'pthread_t':'unsigned long'
    |-CallExpr 0x5622694c9088 <line:810:3, col:54> 'int'
    | |-ImplicitCastExpr 0x5622694c9070 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5622694c8e88 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x5622694a58f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x5622694c8ec8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x5622694c8ea8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x5622694c8e08 't1863' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x5622694c90c8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x5622694c8f40 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x5622694c8f18 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x5622694c8ee0 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x5622694c90e0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5622694c8f60 <col:39> 'void *(void *)' Function 0x5622694bf640 'P0' 'void *(void *)'
    | `-ParenExpr 0x5622694c8fe0 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x5622694c8fb8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x5622694c8f80 <col:52> 'int' 0
    |-DeclStmt 0x5622694c9170 <line:811:3, col:18>
    | `-VarDecl 0x5622694c9108 <col:3, col:13> col:13 used t1864 'pthread_t':'unsigned long'
    |-CallExpr 0x5622694c9318 <line:812:3, col:54> 'int'
    | |-ImplicitCastExpr 0x5622694c9300 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5622694c9188 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x5622694a58f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x5622694c91c8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x5622694c91a8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x5622694c9108 't1864' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x5622694c9358 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x5622694c9240 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x5622694c9218 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x5622694c91e0 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x5622694c9370 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5622694c9260 <col:39> 'void *(void *)' Function 0x5622694c1028 'P1' 'void *(void *)'
    | `-ParenExpr 0x5622694c92e0 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x5622694c92b8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x5622694c9280 <col:52> 'int' 0
    |-DeclStmt 0x5622694c9400 <line:813:3, col:18>
    | `-VarDecl 0x5622694c9398 <col:3, col:13> col:13 used t1865 'pthread_t':'unsigned long'
    |-CallExpr 0x5622694c95a8 <line:814:3, col:54> 'int'
    | |-ImplicitCastExpr 0x5622694c9590 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5622694c9418 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x5622694a58f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x5622694c9458 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x5622694c9438 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x5622694c9398 't1865' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x5622694c95e8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x5622694c94d0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x5622694c94a8 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x5622694c9470 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x5622694c9600 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5622694c94f0 <col:39> 'void *(void *)' Function 0x5622694c23a8 'P2' 'void *(void *)'
    | `-ParenExpr 0x5622694c9570 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x5622694c9548 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x5622694c9510 <col:52> 'int' 0
    |-CallExpr 0x5622694c9650 <line:815:3, col:27> 'void'
    | `-ImplicitCastExpr 0x5622694c9638 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5622694c9618 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x5622694c9720 <line:816:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x5622694c9670 <col:3> '_Bool' lvalue Var 0x5622694be988 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x5622694c9708 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x5622694c96e8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x5622694c96d0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x5622694c9690 <col:21> 'int' lvalue Var 0x5622694be590 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x5622694c96b0 <col:41> 'int' 3
    |-CallExpr 0x5622694c9778 <line:817:3, col:25> 'void'
    | `-ImplicitCastExpr 0x5622694c9760 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5622694c9740 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x5622694c97f0 <line:818:3, col:36> 'void'
    | |-ImplicitCastExpr 0x5622694c97d8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5622694c9798 <col:3> 'void (int)' Function 0x562269464ca0 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x5622694c9830 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5622694c9818 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x5622694c97b8 <col:21> '_Bool' lvalue Var 0x5622694be988 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x5622694c9880 <line:819:3, col:27> 'void'
    | `-ImplicitCastExpr 0x5622694c9868 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5622694c9848 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x5622694c9b68 <line:820:3, col:103> 'int' '='
    | |-DeclRefExpr 0x5622694c98a0 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
    | `-ConditionalOperator 0x5622694c9b38 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x5622694c9960 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x5622694c9918 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x5622694c9900 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x5622694c98c0 <col:7> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x5622694c9948 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x5622694c9930 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x5622694c98e0 <col:25> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x5622694c9b20 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5622694c9980 <col:42> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
    |   `-ParenExpr 0x5622694c9b00 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x5622694c9ad0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x5622694c9a40 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x5622694c99f8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x5622694c99e0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x5622694c99a0 <col:55> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x5622694c9a28 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x5622694c9a10 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x5622694c99c0 <col:73> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x5622694c9aa0 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5622694c9a60 <col:90> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x5622694c9ab8 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x5622694c9a80 <col:102> 'int' lvalue Var 0x5622694bec20 'y' 'int'
    |-BinaryOperator 0x5622694c9d70 <line:821:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x5622694c9b88 <col:3> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x5622694c9d58 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5622694c9d28 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x5622694c9c48 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x5622694c9c00 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x5622694c9be8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x5622694c9ba8 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x5622694c9c30 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x5622694c9c18 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x5622694c9bc8 <col:38> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x5622694c9ce0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x5622694c9c98 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x5622694c9c68 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x5622694c9d10 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x5622694c9cf8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x5622694c9cc0 <col:66> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x5622694ca068 <line:822:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x5622694c9d90 <col:3> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x5622694ca050 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5622694ca020 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x5622694c9f30 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x5622694c9e50 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x5622694c9e08 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x5622694c9df0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x5622694c9db0 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x5622694c9e38 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x5622694c9e20 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x5622694c9dd0 <col:38> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x5622694c9f10 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x5622694c9ec8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x5622694c9eb0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x5622694c9e70 <col:56> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x5622694c9ef8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x5622694c9ee0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x5622694c9e90 <col:74> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x5622694c9fc8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x5622694c9f80 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x5622694c9f50 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x5622694c9ff8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x5622694c9fe0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x5622694c9fa8 <col:102> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |-BinaryOperator 0x5622694ca270 <line:823:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x5622694ca088 <col:3> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x5622694ca258 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5622694ca228 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x5622694ca148 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x5622694ca100 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x5622694ca0e8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x5622694ca0a8 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x5622694ca130 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x5622694ca118 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x5622694ca0c8 <col:38> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x5622694ca1e0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x5622694ca198 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x5622694ca168 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x5622694ca210 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x5622694ca1f8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x5622694ca1c0 <col:66> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x5622694ca558 <line:824:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x5622694ca290 <col:3> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x5622694ca540 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5622694ca510 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x5622694ca430 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x5622694ca350 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x5622694ca308 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x5622694ca2f0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x5622694ca2b0 <col:20> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x5622694ca338 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x5622694ca320 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x5622694ca2d0 <col:38> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x5622694ca410 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x5622694ca3c8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x5622694ca3b0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x5622694ca370 <col:56> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x5622694ca3f8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x5622694ca3e0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x5622694ca390 <col:74> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x5622694ca4c8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x5622694ca480 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x5622694ca450 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x5622694ca4f8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x5622694ca4e0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x5622694ca4a8 <col:102> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |-CallExpr 0x5622694ca5b0 <line:825:3, col:25> 'void'
    | `-ImplicitCastExpr 0x5622694ca598 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5622694ca578 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x5622694ca608 <line:826:3, col:27> 'void'
    | `-ImplicitCastExpr 0x5622694ca5f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5622694ca5d0 <col:3> 'void ()' Function 0x562269465350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x5622694ca6b8 <line:827:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x5622694ca628 <col:3> '_Bool' lvalue Var 0x5622694bf4b0 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x5622694ca6a0 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x5622694ca680 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x5622694ca668 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x5622694ca648 <col:19> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x5622694ca768 <line:828:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x5622694ca6d8 <col:3> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x5622694ca750 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x5622694ca730 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x5622694ca718 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x5622694ca6f8 <col:19> 'void *(void)' Function 0x562269464e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x5622694ca7e0 <line:829:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x5622694ca788 <col:3> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x5622694ca7c8 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x5622694ca7a8 <col:21> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x5622694ca858 <line:830:3, col:15> 'int' '='
    | |-DeclRefExpr 0x5622694ca800 <col:3> 'int' lvalue Var 0x5622694bed38 'y$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x5622694ca840 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x5622694ca820 <col:15> 'int' lvalue Var 0x5622694bec20 'y' 'int'
    |-BinaryOperator 0x5622694cac90 <line:831:3, col:162> 'int' '='
    | |-DeclRefExpr 0x5622694ca878 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
    | `-ConditionalOperator 0x5622694cac60 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x5622694caa88 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x5622694ca9a8 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x5622694ca8d0 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x5622694ca8b8 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x5622694ca898 <col:8> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x5622694ca988 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x5622694ca920 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x5622694ca908 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x5622694ca8e8 <col:27> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x5622694ca970 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x5622694ca958 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x5622694ca938 <col:46> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x5622694caa68 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x5622694caa00 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x5622694ca9e8 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x5622694ca9c8 <col:65> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x5622694caa50 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x5622694caa38 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5622694caa18 <col:84> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x5622694cac48 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5622694caaa8 <col:101> 'int' lvalue Var 0x5622694bec20 'y' 'int'
    |   `-ParenExpr 0x5622694cac28 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x5622694cabf8 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x5622694cab68 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x5622694cab20 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x5622694cab08 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x5622694caac8 <col:106> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x5622694cab50 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x5622694cab38 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x5622694caae8 <col:124> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x5622694cabc8 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5622694cab88 <col:141> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x5622694cabe0 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x5622694caba8 <col:153> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
    |-BinaryOperator 0x5622694cb1b0 <line:832:3, col:208> 'int' '='
    | |-DeclRefExpr 0x5622694cacb0 <col:3> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
    | `-ConditionalOperator 0x5622694cb180 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x5622694cb150 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x5622694cb138 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x5622694cacd0 <col:15> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x5622694cb168 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5622694cacf0 <col:31> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
    |   `-ParenExpr 0x5622694cb118 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x5622694cb0e8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x5622694caf00 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x5622694cae20 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x5622694cad48 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x5622694cad30 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x5622694cad10 <col:45> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x5622694cae00 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x5622694cad98 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x5622694cad80 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x5622694cad60 <col:64> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x5622694cade8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x5622694cadd0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x5622694cadb0 <col:83> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x5622694caee0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x5622694cae78 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x5622694cae60 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x5622694cae40 <col:102> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x5622694caec8 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x5622694caeb0 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x5622694cae90 <col:121> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x5622694cb0d0 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5622694caf20 <col:138> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
    |       `-ParenExpr 0x5622694cb0b0 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x5622694cb080 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x5622694cafe0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x5622694caf98 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x5622694caf80 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x5622694caf40 <col:151> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x5622694cafc8 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x5622694cafb0 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x5622694caf60 <col:169> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x5622694cb050 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x5622694cb000 <col:186> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x5622694cb068 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x5622694cb030 <col:198> 'int' lvalue Var 0x5622694bf2c8 'y$w_buff0' 'int'
    |-BinaryOperator 0x5622694cb6c0 <line:833:3, col:208> 'int' '='
    | |-DeclRefExpr 0x5622694cb1d0 <col:3> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
    | `-ConditionalOperator 0x5622694cb690 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x5622694cb660 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x5622694cb648 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x5622694cb1f0 <col:15> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x5622694cb678 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5622694cb210 <col:31> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
    |   `-ParenExpr 0x5622694cb628 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x5622694cb5f8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x5622694cb420 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x5622694cb340 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x5622694cb268 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x5622694cb250 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x5622694cb230 <col:45> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x5622694cb320 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x5622694cb2b8 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x5622694cb2a0 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x5622694cb280 <col:64> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x5622694cb308 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x5622694cb2f0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x5622694cb2d0 <col:83> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x5622694cb400 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x5622694cb398 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x5622694cb380 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x5622694cb360 <col:102> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x5622694cb3e8 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x5622694cb3d0 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x5622694cb3b0 <col:121> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x5622694cb5e0 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5622694cb440 <col:138> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
    |       `-ParenExpr 0x5622694cb5c0 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x5622694cb590 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x5622694cb500 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x5622694cb4b8 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x5622694cb4a0 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x5622694cb460 <col:151> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x5622694cb4e8 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x5622694cb4d0 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x5622694cb480 <col:169> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x5622694cb560 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x5622694cb520 <col:186> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x5622694cb578 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x5622694cb540 <col:198> 'int' lvalue Var 0x5622694bf3c0 'y$w_buff1' 'int'
    |-BinaryOperator 0x5622694cbc68 <line:834:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x5622694cb6e0 <col:3> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x5622694cbc50 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5622694cbc20 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x5622694cbbd8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5622694cbbc0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5622694cb700 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x5622694cbc08 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5622694cbbf0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5622694cb720 <col:36> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x5622694cbba0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x5622694cbb70 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x5622694cb930 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x5622694cb850 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x5622694cb778 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x5622694cb760 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x5622694cb740 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x5622694cb830 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x5622694cb7c8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x5622694cb7b0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x5622694cb790 <col:74> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x5622694cb818 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x5622694cb800 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x5622694cb7e0 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x5622694cb910 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x5622694cb8a8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x5622694cb890 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x5622694cb870 <col:112> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x5622694cb8f8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x5622694cb8e0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x5622694cb8c0 <col:131> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x5622694cbb58 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x5622694cbb40 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5622694cb950 <col:148> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x5622694cbb20 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x5622694cbaf0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x5622694cba10 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x5622694cb9c8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x5622694cb9b0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x5622694cb970 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x5622694cb9f8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x5622694cb9e0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x5622694cb990 <col:184> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x5622694cbaa8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x5622694cba60 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x5622694cba30 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x5622694cbad8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x5622694cbac0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x5622694cba88 <col:212> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x5622694cc240 <line:835:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x5622694cbc88 <col:3> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x5622694cc228 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5622694cc1f8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x5622694cc1b0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5622694cc198 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5622694cbca8 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x5622694cc1e0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5622694cc1c8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5622694cbcc8 <col:36> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x5622694cc178 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x5622694cc148 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x5622694cbed8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x5622694cbdf8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x5622694cbd20 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x5622694cbd08 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x5622694cbce8 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x5622694cbdd8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x5622694cbd70 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x5622694cbd58 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x5622694cbd38 <col:74> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x5622694cbdc0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x5622694cbda8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x5622694cbd88 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x5622694cbeb8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x5622694cbe50 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x5622694cbe38 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x5622694cbe18 <col:112> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x5622694cbea0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x5622694cbe88 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x5622694cbe68 <col:131> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x5622694cc130 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x5622694cc118 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5622694cbef8 <col:148> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x5622694cc0f8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x5622694cc0c8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x5622694cbfb8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x5622694cbf70 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x5622694cbf58 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x5622694cbf18 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x5622694cbfa0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x5622694cbf88 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x5622694cbf38 <col:184> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x5622694cc098 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x5622694cc008 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x5622694cbfd8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x5622694cc0b0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x5622694cc070 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x5622694cc040 <col:219> 'int' 0
    |-BinaryOperator 0x5622694cc7e8 <line:836:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x5622694cc260 <col:3> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x5622694cc7d0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5622694cc7a0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x5622694cc758 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5622694cc740 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5622694cc280 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x5622694cc788 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5622694cc770 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5622694cc2a0 <col:36> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x5622694cc720 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x5622694cc6f0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x5622694cc4b0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x5622694cc3d0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x5622694cc2f8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x5622694cc2e0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x5622694cc2c0 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x5622694cc3b0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x5622694cc348 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x5622694cc330 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x5622694cc310 <col:74> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x5622694cc398 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x5622694cc380 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x5622694cc360 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x5622694cc490 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x5622694cc428 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x5622694cc410 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x5622694cc3f0 <col:112> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x5622694cc478 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x5622694cc460 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x5622694cc440 <col:131> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x5622694cc6d8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x5622694cc6c0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5622694cc4d0 <col:148> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x5622694cc6a0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x5622694cc670 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x5622694cc590 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x5622694cc548 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x5622694cc530 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x5622694cc4f0 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x5622694cc578 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x5622694cc560 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x5622694cc510 <col:184> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x5622694cc628 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x5622694cc5e0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x5622694cc5b0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x5622694cc658 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x5622694cc640 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x5622694cc608 <col:212> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x5622694ccdb0 <line:837:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x5622694cc808 <col:3> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x5622694ccd98 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5622694ccd68 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x5622694ccd20 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5622694ccd08 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5622694cc828 <col:20> '_Bool' lvalue Var 0x5622694bf528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x5622694ccd50 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5622694ccd38 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5622694cc848 <col:36> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x5622694ccce8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x5622694cccb8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x5622694cca58 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x5622694cc978 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x5622694cc8a0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x5622694cc888 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x5622694cc868 <col:55> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x5622694cc958 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x5622694cc8f0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x5622694cc8d8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x5622694cc8b8 <col:74> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x5622694cc940 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x5622694cc928 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x5622694cc908 <col:93> '_Bool' lvalue Var 0x5622694bf438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x5622694cca38 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x5622694cc9d0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x5622694cc9b8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x5622694cc998 <col:112> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x5622694cca20 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x5622694cca08 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x5622694cc9e8 <col:131> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x5622694ccca0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x5622694ccc88 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5622694cca78 <col:148> '_Bool' lvalue Var 0x5622694befe8 'y$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x5622694ccc68 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x5622694ccc38 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x5622694ccb38 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x5622694ccaf0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x5622694ccad8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x5622694cca98 <col:166> '_Bool' lvalue Var 0x5622694bf340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x5622694ccb20 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x5622694ccb08 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x5622694ccab8 <col:184> '_Bool' lvalue Var 0x5622694bedb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x5622694ccc08 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x5622694ccb88 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x5622694ccb58 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x5622694ccc20 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x5622694ccbe0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x5622694ccbb0 <col:219> 'int' 0
    |-BinaryOperator 0x5622694cd0a0 <line:838:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x5622694ccdd0 <col:3> '_Bool' lvalue Var 0x5622694bea00 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x5622694cd088 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x5622694cd070 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x5622694cd050 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x5622694cd010 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x5622694ccf78 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x5622694ccee0 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x5622694cce48 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x5622694cce30 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x5622694ccdf0 <col:23> 'int' lvalue Var 0x5622694bec20 'y' 'int'
    |         | | | `-IntegerLiteral 0x5622694cce10 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x5622694ccec0 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x5622694ccea8 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x5622694cce68 <col:33> 'int' lvalue Var 0x5622694be6b0 '__unbuffered_p1_EAX' 'int'
    |         | |   `-IntegerLiteral 0x5622694cce88 <col:56> 'int' 1
    |         | `-BinaryOperator 0x5622694ccf58 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x5622694ccf40 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x5622694ccf00 <col:61> 'int' lvalue Var 0x5622694be7d0 '__unbuffered_p2_EAX' 'int'
    |         |   `-IntegerLiteral 0x5622694ccf20 <col:84> 'int' 1
    |         `-BinaryOperator 0x5622694ccff0 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x5622694ccfd8 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x5622694ccf98 <col:89> 'int' lvalue Var 0x5622694be8f0 '__unbuffered_p2_EBX' 'int'
    |           `-IntegerLiteral 0x5622694ccfb8 <col:112> 'int' 1
    |-BinaryOperator 0x5622694cd1d0 <line:839:3, col:37> 'int' '='
    | |-DeclRefExpr 0x5622694cd0c0 <col:3> 'int' lvalue Var 0x5622694bec20 'y' 'int'
    | `-ConditionalOperator 0x5622694cd1a0 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x5622694cd158 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x5622694cd140 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x5622694cd0e0 <col:7> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x5622694cd170 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5622694cd100 <col:25> 'int' lvalue Var 0x5622694bed38 'y$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x5622694cd188 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x5622694cd120 <col:37> 'int' lvalue Var 0x5622694bec20 'y' 'int'
    |-BinaryOperator 0x5622694cd268 <line:840:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x5622694cd1f0 <col:3> '_Bool' lvalue Var 0x5622694becb8 'y$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x5622694cd240 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x5622694cd210 <col:28> 'int' 0
    |-CallExpr 0x5622694cd2c0 <line:841:3, col:25> 'void'
    | `-ImplicitCastExpr 0x5622694cd2a8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5622694cd288 <col:3> 'void ()' Function 0x562269465410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x5622694cd338 <line:842:3, col:36> 'void'
    | |-ImplicitCastExpr 0x5622694cd320 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5622694cd2e0 <col:3> 'void (int)' Function 0x5622694650d8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x5622694cd378 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5622694cd360 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x5622694cd300 <col:21> '_Bool' lvalue Var 0x5622694bea00 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x5622694cd3b0 <line:843:3, col:10>
      `-IntegerLiteral 0x5622694cd390 <col:10> 'int' 0
