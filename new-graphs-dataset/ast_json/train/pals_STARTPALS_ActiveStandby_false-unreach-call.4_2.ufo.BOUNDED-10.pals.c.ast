TranslationUnitDecl 0x5654639d34e8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5654639d3da8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5654639d3a80 '__int128'
|-TypedefDecl 0x5654639d3e18 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5654639d3aa0 'unsigned __int128'
|-TypedefDecl 0x5654639d4120 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5654639d3ef0 'struct __NSConstantString_tag'
|   `-Record 0x5654639d3e70 '__NSConstantString_tag'
|-TypedefDecl 0x5654639d41c8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5654639d4180 'char *'
|   `-BuiltinType 0x5654639d3580 'char'
|-TypedefDecl 0x565463a131c0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5654639d4460 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5654639d42a0 'struct __va_list_tag'
|     `-Record 0x5654639d4220 '__va_list_tag'
|-FunctionDecl 0x565463a132a0 <seq-mthreaded/pals_STARTPALS_ActiveStandby_false-unreach-call.4_2.ufo.BOUNDED-10.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x565463a13480 <line:61:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
| `-FullComment 0x565463a53640 <line:3:4, line:56:69>
|   |-ParagraphComment 0x565463a52c70 <line:3:4, col:71>
|   | `-TextComment 0x565463a52c40 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x565463a52cc0 <line:5:1, col:67>
|   | `-TextComment 0x565463a52c90 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x565463a52d60 <line:7:1, line:9:4>
|   | |-TextComment 0x565463a52ce0 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x565463a52d00 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x565463a52d20 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x565463a52e00 <line:11:1, line:13:12>
|   | |-TextComment 0x565463a52d80 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x565463a52da0 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x565463a52dc0 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x565463a52ea0 <line:15:1, line:17:68>
|   | |-TextComment 0x565463a52e20 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x565463a52e40 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x565463a52e60 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x565463a52f90 <line:19:1, line:23:10>
|   | |-TextComment 0x565463a52ec0 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x565463a52ee0 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x565463a52f00 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x565463a52f20 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x565463a52f40 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x565463a52fb0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x565463a53010 <col:15, col:23>
|   |   `-TextComment 0x565463a52fe0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x565463a530b0 <line:25:1, line:27:10>
|   | |-TextComment 0x565463a53030 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x565463a53050 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x565463a53070 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x565463a530d0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x565463a53130 <col:15, col:23>
|   |   `-TextComment 0x565463a53100 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x565463a531a0 <line:29:1, line:30:15>
|   | |-TextComment 0x565463a53150 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x565463a53170 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x565463a53290 <line:32:1, line:36:7>
|   | |-TextComment 0x565463a531c0 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x565463a531e0 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x565463a53200 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x565463a53220 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x565463a53240 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x565463a53330 <line:38:1, line:40:61>
|   | |-TextComment 0x565463a532b0 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x565463a532d0 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x565463a532f0 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x565463a53490 <line:42:1, line:49:37>
|   | |-TextComment 0x565463a53350 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x565463a53370 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x565463a53390 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x565463a533b0 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x565463a533d0 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x565463a533f0 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x565463a53410 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x565463a53430 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x565463a53500 <line:51:1, line:52:13>
|   | |-TextComment 0x565463a534b0 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x565463a534d0 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x565463a53550 <line:54:1, col:10>
|   | `-TextComment 0x565463a53520 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x565463a535a0 <line:56:2, col:69>
|     `-TextComment 0x565463a53570 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x565463a135b8 prev 0x565463a13480 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x565463a13720 <line:63:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
|-TypedefDecl 0x565463a137d0 <line:64:1, col:14> col:14 referenced int8_t 'char'
| `-BuiltinType 0x5654639d3580 'char'
|-TypedefDecl 0x565463a13868 <line:65:1, col:16> col:16 referenced msg_t 'int8_t':'char'
| `-TypedefType 0x565463a13830 'int8_t' sugar
|   |-Typedef 0x565463a137d0 'int8_t'
|   `-BuiltinType 0x5654639d3580 'char'
|-TypedefDecl 0x565463a138d8 <line:66:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x5654639d35e0 'int'
|-FunctionDecl 0x565463a13b20 <line:67:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x565463a13968 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x565463a13a08 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x565463a13cf0 <line:68:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x565463a13be0 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x565463a13c58 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x565463a13db0 <line:69:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x565463a13e60 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x565463a13e38 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x565463a13e18 <col:28> 'int' 1
|-VarDecl 0x565463a13e98 <line:70:1, col:8> col:8 cs1 'port_t':'int'
|-VarDecl 0x565463a13f10 <line:71:1, col:8> col:8 used cs1_old 'int8_t':'char'
|-VarDecl 0x565463a13f88 <line:72:1, col:8> col:8 used cs1_new 'int8_t':'char'
|-VarDecl 0x565463a14000 <line:73:1, col:8> col:8 cs2 'port_t':'int'
|-VarDecl 0x565463a14078 <line:74:1, col:8> col:8 used cs2_old 'int8_t':'char'
|-VarDecl 0x565463a140f0 <line:75:1, col:8> col:8 used cs2_new 'int8_t':'char'
|-VarDecl 0x565463a3aed0 <line:76:1, col:8> col:8 s1s2 'port_t':'int'
|-VarDecl 0x565463a3af48 <line:77:1, col:8> col:8 used s1s2_old 'int8_t':'char'
|-VarDecl 0x565463a3afc0 <line:78:1, col:8> col:8 used s1s2_new 'int8_t':'char'
|-VarDecl 0x565463a3b038 <line:79:1, col:8> col:8 s1s1 'port_t':'int'
|-VarDecl 0x565463a3b0b0 <line:80:1, col:8> col:8 used s1s1_old 'int8_t':'char'
|-VarDecl 0x565463a3b128 <line:81:1, col:8> col:8 used s1s1_new 'int8_t':'char'
|-VarDecl 0x565463a3b1a0 <line:82:1, col:8> col:8 s2s1 'port_t':'int'
|-VarDecl 0x565463a3b218 <line:83:1, col:8> col:8 used s2s1_old 'int8_t':'char'
|-VarDecl 0x565463a3b290 <line:84:1, col:8> col:8 used s2s1_new 'int8_t':'char'
|-VarDecl 0x565463a3b308 <line:85:1, col:8> col:8 s2s2 'port_t':'int'
|-VarDecl 0x565463a3b380 <line:86:1, col:8> col:8 used s2s2_old 'int8_t':'char'
|-VarDecl 0x565463a3b3f8 <line:87:1, col:8> col:8 used s2s2_new 'int8_t':'char'
|-VarDecl 0x565463a3b470 <line:88:1, col:8> col:8 s1p 'port_t':'int'
|-VarDecl 0x565463a3b4e8 <line:89:1, col:8> col:8 used s1p_old 'int8_t':'char'
|-VarDecl 0x565463a3b560 <line:90:1, col:8> col:8 used s1p_new 'int8_t':'char'
|-VarDecl 0x565463a3b5d8 <line:91:1, col:8> col:8 s2p 'port_t':'int'
|-VarDecl 0x565463a3b650 <line:92:1, col:8> col:8 used s2p_old 'int8_t':'char'
|-VarDecl 0x565463a3b6c8 <line:93:1, col:8> col:8 used s2p_new 'int8_t':'char'
|-FunctionDecl 0x565463a3b780 prev 0x565463a13720 <line:94:1, col:37> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x565463a3b870 prev 0x565463a135b8 <line:95:1, col:36> col:13 used __VERIFIER_nondet_char 'char (void)' extern
|-VarDecl 0x565463a3b920 <line:96:1, col:7> col:7 used side1Failed '_Bool'
|-VarDecl 0x565463a3b998 <line:97:1, col:7> col:7 used side2Failed '_Bool'
|-VarDecl 0x565463a3ba10 <line:98:1, col:7> col:7 used side1_written 'msg_t':'char'
|-VarDecl 0x565463a3ba88 <line:99:1, col:7> col:7 used side2_written 'msg_t':'char'
|-FunctionDecl 0x565463a3bbd0 <line:100:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x565463a3bb00 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x565463a3bd60 <line:101:1, col:39> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x565463a3bc90 <col:31, col:35> col:35 arg 'int'
|-VarDecl 0x565463a3be18 <line:102:1, col:14> col:14 used side1Failed_History_0 '_Bool' static
|-VarDecl 0x565463a3bee0 <line:103:1, col:14> col:14 used side1Failed_History_1 '_Bool' static
|-VarDecl 0x565463a3bf58 <line:104:1, col:14> col:14 used side1Failed_History_2 '_Bool' static
|-VarDecl 0x565463a3bfd0 <line:105:1, col:14> col:14 used side2Failed_History_0 '_Bool' static
|-VarDecl 0x565463a3c048 <line:106:1, col:14> col:14 used side2Failed_History_1 '_Bool' static
|-VarDecl 0x565463a3c0c0 <line:107:1, col:14> col:14 used side2Failed_History_2 '_Bool' static
|-VarDecl 0x565463a3c138 <line:108:1, col:15> col:15 used active_side_History_0 'int8_t':'char' static
|-VarDecl 0x565463a3c1b0 <line:109:1, col:15> col:15 used active_side_History_1 'int8_t':'char' static
|-VarDecl 0x565463a3c228 <line:110:1, col:15> col:15 used active_side_History_2 'int8_t':'char' static
|-VarDecl 0x565463a3c2a0 <line:111:1, col:14> col:14 used manual_selection_History_0 'msg_t':'char' static
|-VarDecl 0x565463a3c318 <line:112:1, col:14> col:14 used manual_selection_History_1 'msg_t':'char' static
|-VarDecl 0x565463a3c390 <line:113:1, col:14> col:14 used manual_selection_History_2 'msg_t':'char' static
|-FunctionDecl 0x565463a3c498 <line:114:1, line:124:1> line:114:6 used write_side1_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x565463a3c408 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x565463a3c6e8 <line:115:1, line:124:1>
|   `-CompoundStmt 0x565463a3c6b8 <line:118:3, line:123:1>
|     |-BinaryOperator 0x565463a3c598 <line:119:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x565463a3c540 <col:3> '_Bool' lvalue Var 0x565463a3bf58 'side1Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x565463a3c580 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3c560 <col:27> '_Bool' lvalue Var 0x565463a3bee0 'side1Failed_History_1' '_Bool'
|     |-BinaryOperator 0x565463a3c610 <line:120:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x565463a3c5b8 <col:3> '_Bool' lvalue Var 0x565463a3bee0 'side1Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x565463a3c5f8 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3c5d8 <col:27> '_Bool' lvalue Var 0x565463a3be18 'side1Failed_History_0' '_Bool'
|     |-BinaryOperator 0x565463a3c688 <line:121:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x565463a3c630 <col:3> '_Bool' lvalue Var 0x565463a3be18 'side1Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x565463a3c670 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3c650 <col:27> '_Bool' lvalue ParmVar 0x565463a3c408 'val' '_Bool'
|     `-ReturnStmt 0x565463a3c6a8 <line:122:3>
|-FunctionDecl 0x565463a3c7e0 <line:125:1, line:143:1> line:125:7 used read_side1_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x565463a3c718 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x565463a3ce58 <line:126:1, line:143:1>
|   `-CompoundStmt 0x565463a3ce40 <line:129:3, line:142:1>
|     `-IfStmt 0x565463a3ce18 <line:130:3, line:141:3> has_else
|       |-BinaryOperator 0x565463a3c920 <line:130:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x565463a3c8d8 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x565463a3c8c0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x565463a3c888 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3c718 'index' 'unsigned char'
|       | `-IntegerLiteral 0x565463a3c900 <col:22> 'int' 0
|       |-CompoundStmt 0x565463a3c9a8 <col:25, line:132:3>
|       | `-ReturnStmt 0x565463a3c998 <line:131:5, col:34>
|       |   `-ImplicitCastExpr 0x565463a3c980 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x565463a3c960 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x565463a3c940 <col:13> '_Bool' lvalue Var 0x565463a3be18 'side1Failed_History_0' '_Bool'
|       `-IfStmt 0x565463a3cdf0 <line:133:3, line:141:3> has_else
|         |-BinaryOperator 0x565463a3ca58 <line:133:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x565463a3ca10 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x565463a3c9f8 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x565463a3c9c0 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3c718 'index' 'unsigned char'
|         | `-IntegerLiteral 0x565463a3ca38 <col:22> 'int' 1
|         |-CompoundStmt 0x565463a3cae0 <col:25, line:135:3>
|         | `-ReturnStmt 0x565463a3cad0 <line:134:5, col:34>
|         |   `-ImplicitCastExpr 0x565463a3cab8 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x565463a3ca98 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x565463a3ca78 <col:13> '_Bool' lvalue Var 0x565463a3bee0 'side1Failed_History_1' '_Bool'
|         `-IfStmt 0x565463a3cdc8 <line:136:3, line:141:3> has_else
|           |-BinaryOperator 0x565463a3cb90 <line:136:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x565463a3cb48 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x565463a3cb30 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x565463a3caf8 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3c718 'index' 'unsigned char'
|           | `-IntegerLiteral 0x565463a3cb70 <col:22> 'int' 2
|           |-CompoundStmt 0x565463a3cc18 <col:25, line:138:3>
|           | `-ReturnStmt 0x565463a3cc08 <line:137:5, col:34>
|           |   `-ImplicitCastExpr 0x565463a3cbf0 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x565463a3cbd0 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x565463a3cbb0 <col:13> '_Bool' lvalue Var 0x565463a3bf58 'side1Failed_History_2' '_Bool'
|           `-CompoundStmt 0x565463a3cda8 <line:138:10, line:141:3>
|             |-CallExpr 0x565463a3ccf8 <line:139:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x565463a3cce0 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x565463a3cc30 <col:5> 'void (_Bool)' Function 0x565463a3bbd0 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x565463a3cc80 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x565463a3cc50 <col:19> 'int' 0
|             `-ReturnStmt 0x565463a3cd98 <line:140:5, col:21>
|               `-ParenExpr 0x565463a3cd78 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x565463a3cd50 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x565463a3cd20 <col:20> 'int' 0
|-FunctionDecl 0x565463a3e0b0 <line:144:1, line:154:1> line:144:6 used write_side2_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x565463a3e020 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x565463a3e300 <line:145:1, line:154:1>
|   `-CompoundStmt 0x565463a3e2d0 <line:148:3, line:153:1>
|     |-BinaryOperator 0x565463a3e1b0 <line:149:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x565463a3e158 <col:3> '_Bool' lvalue Var 0x565463a3c0c0 'side2Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x565463a3e198 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3e178 <col:27> '_Bool' lvalue Var 0x565463a3c048 'side2Failed_History_1' '_Bool'
|     |-BinaryOperator 0x565463a3e228 <line:150:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x565463a3e1d0 <col:3> '_Bool' lvalue Var 0x565463a3c048 'side2Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x565463a3e210 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3e1f0 <col:27> '_Bool' lvalue Var 0x565463a3bfd0 'side2Failed_History_0' '_Bool'
|     |-BinaryOperator 0x565463a3e2a0 <line:151:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x565463a3e248 <col:3> '_Bool' lvalue Var 0x565463a3bfd0 'side2Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x565463a3e288 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3e268 <col:27> '_Bool' lvalue ParmVar 0x565463a3e020 'val' '_Bool'
|     `-ReturnStmt 0x565463a3e2c0 <line:152:3>
|-FunctionDecl 0x565463a3e3c0 <line:155:1, line:173:1> line:155:7 used read_side2_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x565463a3e330 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x565463a3ea00 <line:156:1, line:173:1>
|   `-CompoundStmt 0x565463a3e9e8 <line:159:3, line:172:1>
|     `-IfStmt 0x565463a3e9c0 <line:160:3, line:171:3> has_else
|       |-BinaryOperator 0x565463a3e500 <line:160:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x565463a3e4b8 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x565463a3e4a0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x565463a3e468 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3e330 'index' 'unsigned char'
|       | `-IntegerLiteral 0x565463a3e4e0 <col:22> 'int' 0
|       |-CompoundStmt 0x565463a3e588 <col:25, line:162:3>
|       | `-ReturnStmt 0x565463a3e578 <line:161:5, col:34>
|       |   `-ImplicitCastExpr 0x565463a3e560 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x565463a3e540 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x565463a3e520 <col:13> '_Bool' lvalue Var 0x565463a3bfd0 'side2Failed_History_0' '_Bool'
|       `-IfStmt 0x565463a3e998 <line:163:3, line:171:3> has_else
|         |-BinaryOperator 0x565463a3e638 <line:163:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x565463a3e5f0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x565463a3e5d8 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x565463a3e5a0 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3e330 'index' 'unsigned char'
|         | `-IntegerLiteral 0x565463a3e618 <col:22> 'int' 1
|         |-CompoundStmt 0x565463a3e6c0 <col:25, line:165:3>
|         | `-ReturnStmt 0x565463a3e6b0 <line:164:5, col:34>
|         |   `-ImplicitCastExpr 0x565463a3e698 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x565463a3e678 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x565463a3e658 <col:13> '_Bool' lvalue Var 0x565463a3c048 'side2Failed_History_1' '_Bool'
|         `-IfStmt 0x565463a3e970 <line:166:3, line:171:3> has_else
|           |-BinaryOperator 0x565463a3e770 <line:166:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x565463a3e728 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x565463a3e710 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x565463a3e6d8 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3e330 'index' 'unsigned char'
|           | `-IntegerLiteral 0x565463a3e750 <col:22> 'int' 2
|           |-CompoundStmt 0x565463a3e7f8 <col:25, line:168:3>
|           | `-ReturnStmt 0x565463a3e7e8 <line:167:5, col:34>
|           |   `-ImplicitCastExpr 0x565463a3e7d0 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x565463a3e7b0 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x565463a3e790 <col:13> '_Bool' lvalue Var 0x565463a3c0c0 'side2Failed_History_2' '_Bool'
|           `-CompoundStmt 0x565463a3e950 <line:168:10, line:171:3>
|             |-CallExpr 0x565463a3e8a0 <line:169:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x565463a3e888 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x565463a3e810 <col:5> 'void (_Bool)' Function 0x565463a3bbd0 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x565463a3e860 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x565463a3e830 <col:19> 'int' 0
|             `-ReturnStmt 0x565463a3e940 <line:170:5, col:21>
|               `-ParenExpr 0x565463a3e920 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x565463a3e8f8 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x565463a3e8c8 <col:20> 'int' 0
|-FunctionDecl 0x565463a3eb30 <line:174:1, line:184:1> line:174:6 used write_active_side_history 'void (int8_t)'
| |-ParmVarDecl 0x565463a3ea28 <col:32, col:39> col:39 used val 'int8_t':'char'
| `-CompoundStmt 0x565463a3ed80 <line:175:1, line:184:1>
|   `-CompoundStmt 0x565463a3ed50 <line:178:3, line:183:1>
|     |-BinaryOperator 0x565463a3ec30 <line:179:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a3ebd8 <col:3> 'int8_t':'char' lvalue Var 0x565463a3c228 'active_side_History_2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a3ec18 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3ebf8 <col:27> 'int8_t':'char' lvalue Var 0x565463a3c1b0 'active_side_History_1' 'int8_t':'char'
|     |-BinaryOperator 0x565463a3eca8 <line:180:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a3ec50 <col:3> 'int8_t':'char' lvalue Var 0x565463a3c1b0 'active_side_History_1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a3ec90 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3ec70 <col:27> 'int8_t':'char' lvalue Var 0x565463a3c138 'active_side_History_0' 'int8_t':'char'
|     |-BinaryOperator 0x565463a3ed20 <line:181:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a3ecc8 <col:3> 'int8_t':'char' lvalue Var 0x565463a3c138 'active_side_History_0' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a3ed08 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3ece8 <col:27> 'int8_t':'char' lvalue ParmVar 0x565463a3ea28 'val' 'int8_t':'char'
|     `-ReturnStmt 0x565463a3ed40 <line:182:3>
|-FunctionDecl 0x565463a3eec0 <line:185:1, line:203:1> line:185:8 used read_active_side_history 'int8_t (unsigned char)'
| |-ParmVarDecl 0x565463a3edb0 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x565463a3f938 <line:186:1, line:203:1>
|   `-CompoundStmt 0x565463a3f920 <line:189:3, line:202:1>
|     `-IfStmt 0x565463a3f8f8 <line:190:3, line:201:3> has_else
|       |-BinaryOperator 0x565463a3f000 <line:190:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x565463a3efb8 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x565463a3efa0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x565463a3ef68 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3edb0 'index' 'unsigned char'
|       | `-IntegerLiteral 0x565463a3efe0 <col:22> 'int' 0
|       |-CompoundStmt 0x565463a3f4a8 <col:25, line:192:3>
|       | `-ReturnStmt 0x565463a3f498 <line:191:5, col:34>
|       |   `-ImplicitCastExpr 0x565463a3f480 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x565463a3f460 <col:12, col:34> 'int8_t':'char' lvalue
|       |       `-DeclRefExpr 0x565463a3f440 <col:13> 'int8_t':'char' lvalue Var 0x565463a3c138 'active_side_History_0' 'int8_t':'char'
|       `-IfStmt 0x565463a3f8d0 <line:193:3, line:201:3> has_else
|         |-BinaryOperator 0x565463a3f558 <line:193:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x565463a3f510 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x565463a3f4f8 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x565463a3f4c0 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3edb0 'index' 'unsigned char'
|         | `-IntegerLiteral 0x565463a3f538 <col:22> 'int' 1
|         |-CompoundStmt 0x565463a3f5e0 <col:25, line:195:3>
|         | `-ReturnStmt 0x565463a3f5d0 <line:194:5, col:34>
|         |   `-ImplicitCastExpr 0x565463a3f5b8 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x565463a3f598 <col:12, col:34> 'int8_t':'char' lvalue
|         |       `-DeclRefExpr 0x565463a3f578 <col:13> 'int8_t':'char' lvalue Var 0x565463a3c1b0 'active_side_History_1' 'int8_t':'char'
|         `-IfStmt 0x565463a3f8a8 <line:196:3, line:201:3> has_else
|           |-BinaryOperator 0x565463a3f690 <line:196:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x565463a3f648 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x565463a3f630 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x565463a3f5f8 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3edb0 'index' 'unsigned char'
|           | `-IntegerLiteral 0x565463a3f670 <col:22> 'int' 2
|           |-CompoundStmt 0x565463a3f718 <col:25, line:198:3>
|           | `-ReturnStmt 0x565463a3f708 <line:197:5, col:34>
|           |   `-ImplicitCastExpr 0x565463a3f6f0 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x565463a3f6d0 <col:12, col:34> 'int8_t':'char' lvalue
|           |       `-DeclRefExpr 0x565463a3f6b0 <col:13> 'int8_t':'char' lvalue Var 0x565463a3c228 'active_side_History_2' 'int8_t':'char'
|           `-CompoundStmt 0x565463a3f888 <line:198:10, line:201:3>
|             |-CallExpr 0x565463a3f7c0 <line:199:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x565463a3f7a8 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x565463a3f730 <col:5> 'void (_Bool)' Function 0x565463a3bbd0 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x565463a3f780 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x565463a3f750 <col:19> 'int' 0
|             `-ReturnStmt 0x565463a3f878 <line:200:5, col:24>
|               `-ParenExpr 0x565463a3f858 <col:12, col:24> 'int8_t':'char'
|                 `-CStyleCastExpr 0x565463a3f830 <col:13, col:23> 'int8_t':'char' <IntegralCast>
|                   `-UnaryOperator 0x565463a3f808 <col:22, col:23> 'int' prefix '-'
|                     `-IntegerLiteral 0x565463a3f7e8 <col:23> 'int' 2
|-FunctionDecl 0x565463a3fa30 <line:204:1, line:214:1> line:204:6 used write_manual_selection_history 'void (msg_t)'
| |-ParmVarDecl 0x565463a3f960 <col:37, col:43> col:43 used val 'msg_t':'char'
| `-CompoundStmt 0x565463a3fc80 <line:205:1, line:214:1>
|   `-CompoundStmt 0x565463a3fc50 <line:208:3, line:213:1>
|     |-BinaryOperator 0x565463a3fb30 <line:209:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a3fad8 <col:3> 'msg_t':'char' lvalue Var 0x565463a3c390 'manual_selection_History_2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x565463a3fb18 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3faf8 <col:32> 'msg_t':'char' lvalue Var 0x565463a3c318 'manual_selection_History_1' 'msg_t':'char'
|     |-BinaryOperator 0x565463a3fba8 <line:210:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a3fb50 <col:3> 'msg_t':'char' lvalue Var 0x565463a3c318 'manual_selection_History_1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x565463a3fb90 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3fb70 <col:32> 'msg_t':'char' lvalue Var 0x565463a3c2a0 'manual_selection_History_0' 'msg_t':'char'
|     |-BinaryOperator 0x565463a3fc20 <line:211:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a3fbc8 <col:3> 'msg_t':'char' lvalue Var 0x565463a3c2a0 'manual_selection_History_0' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x565463a3fc08 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a3fbe8 <col:32> 'msg_t':'char' lvalue ParmVar 0x565463a3f960 'val' 'msg_t':'char'
|     `-ReturnStmt 0x565463a3fc40 <line:212:3>
|-FunctionDecl 0x565463a3fd80 <line:215:1, line:233:1> line:215:7 used read_manual_selection_history 'msg_t (unsigned char)'
| |-ParmVarDecl 0x565463a3fcb0 <col:37, col:51> col:51 used index 'unsigned char'
| `-CompoundStmt 0x565463a403c0 <line:216:1, line:233:1>
|   `-CompoundStmt 0x565463a403a8 <line:219:3, line:232:1>
|     `-IfStmt 0x565463a40380 <line:220:3, line:231:3> has_else
|       |-BinaryOperator 0x565463a3fec0 <line:220:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x565463a3fe78 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x565463a3fe60 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x565463a3fe28 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3fcb0 'index' 'unsigned char'
|       | `-IntegerLiteral 0x565463a3fea0 <col:22> 'int' 0
|       |-CompoundStmt 0x565463a3ff48 <col:25, line:222:3>
|       | `-ReturnStmt 0x565463a3ff38 <line:221:5, col:39>
|       |   `-ImplicitCastExpr 0x565463a3ff20 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x565463a3ff00 <col:12, col:39> 'msg_t':'char' lvalue
|       |       `-DeclRefExpr 0x565463a3fee0 <col:13> 'msg_t':'char' lvalue Var 0x565463a3c2a0 'manual_selection_History_0' 'msg_t':'char'
|       `-IfStmt 0x565463a40358 <line:223:3, line:231:3> has_else
|         |-BinaryOperator 0x565463a3fff8 <line:223:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x565463a3ffb0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x565463a3ff98 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x565463a3ff60 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3fcb0 'index' 'unsigned char'
|         | `-IntegerLiteral 0x565463a3ffd8 <col:22> 'int' 1
|         |-CompoundStmt 0x565463a40080 <col:25, line:225:3>
|         | `-ReturnStmt 0x565463a40070 <line:224:5, col:39>
|         |   `-ImplicitCastExpr 0x565463a40058 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x565463a40038 <col:12, col:39> 'msg_t':'char' lvalue
|         |       `-DeclRefExpr 0x565463a40018 <col:13> 'msg_t':'char' lvalue Var 0x565463a3c318 'manual_selection_History_1' 'msg_t':'char'
|         `-IfStmt 0x565463a40330 <line:226:3, line:231:3> has_else
|           |-BinaryOperator 0x565463a40130 <line:226:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x565463a400e8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x565463a400d0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x565463a40098 <col:13> 'unsigned char' lvalue ParmVar 0x565463a3fcb0 'index' 'unsigned char'
|           | `-IntegerLiteral 0x565463a40110 <col:22> 'int' 2
|           |-CompoundStmt 0x565463a401b8 <col:25, line:228:3>
|           | `-ReturnStmt 0x565463a401a8 <line:227:5, col:39>
|           |   `-ImplicitCastExpr 0x565463a40190 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x565463a40170 <col:12, col:39> 'msg_t':'char' lvalue
|           |       `-DeclRefExpr 0x565463a40150 <col:13> 'msg_t':'char' lvalue Var 0x565463a3c390 'manual_selection_History_2' 'msg_t':'char'
|           `-CompoundStmt 0x565463a40310 <line:228:10, line:231:3>
|             |-CallExpr 0x565463a40260 <line:229:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x565463a40248 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x565463a401d0 <col:5> 'void (_Bool)' Function 0x565463a3bbd0 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x565463a40220 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x565463a401f0 <col:19> 'int' 0
|             `-ReturnStmt 0x565463a40300 <line:230:5, col:22>
|               `-ParenExpr 0x565463a402e0 <col:12, col:22> 'msg_t':'char'
|                 `-CStyleCastExpr 0x565463a402b8 <col:13, col:21> 'msg_t':'char' <IntegralCast>
|                   `-IntegerLiteral 0x565463a40288 <col:21> 'int' 0
|-FunctionDecl 0x565463a40518 <line:234:1, line:277:1> line:234:5 used init 'int (void)'
| `-CompoundStmt 0x565463a41588 <line:235:1, line:277:1>
|   `-CompoundStmt 0x565463a41510 <line:238:3, line:276:1>
|     |-IfStmt 0x565463a406d8 <line:239:3, line:241:3>
|     | |-BinaryOperator 0x565463a40650 <line:239:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a40608 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a405f0 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a405b8 <col:13> '_Bool' lvalue Var 0x565463a3be18 'side1Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x565463a40630 <col:38> 'int' 0
|     | `-CompoundStmt 0x565463a406c0 <col:41, line:241:3>
|     |   `-ReturnStmt 0x565463a406b0 <line:240:5, col:14>
|     |     `-ParenExpr 0x565463a40690 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a40670 <col:13> 'int' 0
|     |-IfStmt 0x565463a40810 <line:242:3, line:244:3>
|     | |-BinaryOperator 0x565463a40788 <line:242:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a40740 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a40728 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a406f0 <col:13> '_Bool' lvalue Var 0x565463a3bfd0 'side2Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x565463a40768 <col:38> 'int' 0
|     | `-CompoundStmt 0x565463a407f8 <col:41, line:244:3>
|     |   `-ReturnStmt 0x565463a407e8 <line:243:5, col:14>
|     |     `-ParenExpr 0x565463a407c8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a407a8 <col:13> 'int' 0
|     |-IfStmt 0x565463a40960 <line:245:3, line:247:3>
|     | |-BinaryOperator 0x565463a408d8 <line:245:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a40878 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a40860 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a40828 <col:13> 'int8_t':'char' lvalue Var 0x565463a3c138 'active_side_History_0' 'int8_t':'char'
|     | | `-UnaryOperator 0x565463a408c0 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x565463a408a0 <col:39> 'int' 2
|     | `-CompoundStmt 0x565463a40948 <col:42, line:247:3>
|     |   `-ReturnStmt 0x565463a40938 <line:246:5, col:14>
|     |     `-ParenExpr 0x565463a40918 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a408f8 <col:13> 'int' 0
|     |-IfStmt 0x565463a40a98 <line:248:3, line:250:3>
|     | |-BinaryOperator 0x565463a40a10 <line:248:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a409c8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a409b0 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a40978 <col:13> 'msg_t':'char' lvalue Var 0x565463a3c2a0 'manual_selection_History_0' 'msg_t':'char'
|     | | `-IntegerLiteral 0x565463a409f0 <col:43> 'int' 0
|     | `-CompoundStmt 0x565463a40a80 <col:46, line:250:3>
|     |   `-ReturnStmt 0x565463a40a70 <line:249:5, col:14>
|     |     `-ParenExpr 0x565463a40a50 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a40a30 <col:13> 'int' 0
|     |-IfStmt 0x565463a40bd0 <line:251:3, line:253:3>
|     | |-BinaryOperator 0x565463a40b48 <line:251:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a40b00 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a40ae8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a40ab0 <col:13> '_Bool' lvalue Var 0x565463a3bee0 'side1Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x565463a40b28 <col:38> 'int' 0
|     | `-CompoundStmt 0x565463a40bb8 <col:41, line:253:3>
|     |   `-ReturnStmt 0x565463a40ba8 <line:252:5, col:14>
|     |     `-ParenExpr 0x565463a40b88 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a40b68 <col:13> 'int' 0
|     |-IfStmt 0x565463a40d08 <line:254:3, line:256:3>
|     | |-BinaryOperator 0x565463a40c80 <line:254:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a40c38 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a40c20 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a40be8 <col:13> '_Bool' lvalue Var 0x565463a3c048 'side2Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x565463a40c60 <col:38> 'int' 0
|     | `-CompoundStmt 0x565463a40cf0 <col:41, line:256:3>
|     |   `-ReturnStmt 0x565463a40ce0 <line:255:5, col:14>
|     |     `-ParenExpr 0x565463a40cc0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a40ca0 <col:13> 'int' 0
|     |-IfStmt 0x565463a40e58 <line:257:3, line:259:3>
|     | |-BinaryOperator 0x565463a40dd0 <line:257:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a40d70 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a40d58 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a40d20 <col:13> 'int8_t':'char' lvalue Var 0x565463a3c1b0 'active_side_History_1' 'int8_t':'char'
|     | | `-UnaryOperator 0x565463a40db8 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x565463a40d98 <col:39> 'int' 2
|     | `-CompoundStmt 0x565463a40e40 <col:42, line:259:3>
|     |   `-ReturnStmt 0x565463a40e30 <line:258:5, col:14>
|     |     `-ParenExpr 0x565463a40e10 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a40df0 <col:13> 'int' 0
|     |-IfStmt 0x565463a40f90 <line:260:3, line:262:3>
|     | |-BinaryOperator 0x565463a40f08 <line:260:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a40ec0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a40ea8 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a40e70 <col:13> 'msg_t':'char' lvalue Var 0x565463a3c318 'manual_selection_History_1' 'msg_t':'char'
|     | | `-IntegerLiteral 0x565463a40ee8 <col:43> 'int' 0
|     | `-CompoundStmt 0x565463a40f78 <col:46, line:262:3>
|     |   `-ReturnStmt 0x565463a40f68 <line:261:5, col:14>
|     |     `-ParenExpr 0x565463a40f48 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a40f28 <col:13> 'int' 0
|     |-IfStmt 0x565463a410c8 <line:263:3, line:265:3>
|     | |-BinaryOperator 0x565463a41040 <line:263:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a40ff8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a40fe0 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a40fa8 <col:13> '_Bool' lvalue Var 0x565463a3bf58 'side1Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x565463a41020 <col:38> 'int' 0
|     | `-CompoundStmt 0x565463a410b0 <col:41, line:265:3>
|     |   `-ReturnStmt 0x565463a410a0 <line:264:5, col:14>
|     |     `-ParenExpr 0x565463a41080 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a41060 <col:13> 'int' 0
|     |-IfStmt 0x565463a41200 <line:266:3, line:268:3>
|     | |-BinaryOperator 0x565463a41178 <line:266:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a41130 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a41118 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a410e0 <col:13> '_Bool' lvalue Var 0x565463a3c0c0 'side2Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x565463a41158 <col:38> 'int' 0
|     | `-CompoundStmt 0x565463a411e8 <col:41, line:268:3>
|     |   `-ReturnStmt 0x565463a411d8 <line:267:5, col:14>
|     |     `-ParenExpr 0x565463a411b8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a41198 <col:13> 'int' 0
|     |-IfStmt 0x565463a41350 <line:269:3, line:271:3>
|     | |-BinaryOperator 0x565463a412c8 <line:269:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a41268 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a41250 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a41218 <col:13> 'int8_t':'char' lvalue Var 0x565463a3c228 'active_side_History_2' 'int8_t':'char'
|     | | `-UnaryOperator 0x565463a412b0 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x565463a41290 <col:39> 'int' 2
|     | `-CompoundStmt 0x565463a41338 <col:42, line:271:3>
|     |   `-ReturnStmt 0x565463a41328 <line:270:5, col:14>
|     |     `-ParenExpr 0x565463a41308 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a412e8 <col:13> 'int' 0
|     |-IfStmt 0x565463a414a8 <line:272:3, line:274:3>
|     | |-BinaryOperator 0x565463a41400 <line:272:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x565463a413b8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a413a0 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a41368 <col:13> 'msg_t':'char' lvalue Var 0x565463a3c390 'manual_selection_History_2' 'msg_t':'char'
|     | | `-IntegerLiteral 0x565463a413e0 <col:43> 'int' 0
|     | `-CompoundStmt 0x565463a41490 <col:46, line:274:3>
|     |   `-ReturnStmt 0x565463a41480 <line:273:5, col:14>
|     |     `-ParenExpr 0x565463a41460 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x565463a41420 <col:13> 'int' 0
|     `-ReturnStmt 0x565463a41500 <line:275:3, col:12>
|       `-ParenExpr 0x565463a414e0 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x565463a414c0 <col:11> 'int' 1
|-FunctionDecl 0x565463a416c0 <line:278:1, line:290:1> line:278:8 used flip_the_side 'int8_t (int8_t)'
| |-ParmVarDecl 0x565463a415b0 <col:22, col:29> col:29 used side 'int8_t':'char'
| `-CompoundStmt 0x565463a41a90 <line:279:1, line:290:1>
|   |-DeclStmt 0x565463a417e8 <line:280:3, col:11>
|   | `-VarDecl 0x565463a41780 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x565463a41a70 <line:282:3, line:289:1>
|     |-IfStmt 0x565463a419a8 <line:283:3, line:287:3> has_else
|     | |-BinaryOperator 0x565463a41898 <line:283:7, col:21> 'int' '=='
|     | | |-CStyleCastExpr 0x565463a41850 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a41838 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a41800 <col:13> 'int8_t':'char' lvalue ParmVar 0x565463a415b0 'side' 'int8_t':'char'
|     | | `-IntegerLiteral 0x565463a41878 <col:21> 'int' 1
|     | |-CompoundStmt 0x565463a41918 <col:24, line:285:3>
|     | | `-BinaryOperator 0x565463a418f8 <line:284:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x565463a418b8 <col:5> 'int' lvalue Var 0x565463a41780 'tmp' 'int'
|     | |   `-IntegerLiteral 0x565463a418d8 <col:11> 'int' 0
|     | `-CompoundStmt 0x565463a41990 <line:285:10, line:287:3>
|     |   `-BinaryOperator 0x565463a41970 <line:286:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x565463a41930 <col:5> 'int' lvalue Var 0x565463a41780 'tmp' 'int'
|     |     `-IntegerLiteral 0x565463a41950 <col:11> 'int' 1
|     `-ReturnStmt 0x565463a41a60 <line:288:3, col:23>
|       `-ParenExpr 0x565463a41a40 <col:10, col:23> 'int8_t':'char'
|         `-CStyleCastExpr 0x565463a41a18 <col:11, col:20> 'int8_t':'char' <IntegralCast>
|           `-ImplicitCastExpr 0x565463a41a00 <col:20> 'int' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x565463a419d0 <col:20> 'int' lvalue Var 0x565463a41780 'tmp' 'int'
|-FunctionDecl 0x565463a41b80 <line:291:1, line:305:1> line:291:6 used Console_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x565463a42610 <line:292:1, line:305:1>
|   |-DeclStmt 0x565463a41c98 <line:293:3, col:26>
|   | `-VarDecl 0x565463a41c30 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x565463a41d28 <line:294:3, col:12>
|   | `-VarDecl 0x565463a41cc0 <col:3, col:8> col:8 used tmp 'char'
|   `-CompoundStmt 0x565463a425c8 <line:296:3, line:304:1>
|     |-BinaryOperator 0x565463a41de8 <line:297:3, col:32> 'char' '='
|     | |-DeclRefExpr 0x565463a41d40 <col:3> 'char' lvalue Var 0x565463a41cc0 'tmp' 'char'
|     | `-CallExpr 0x565463a41dc8 <col:9, col:32> 'char'
|     |   `-ImplicitCastExpr 0x565463a41db0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x565463a41d60 <col:9> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|     |-BinaryOperator 0x565463a41e60 <line:298:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a41e08 <col:3> 'msg_t':'char' lvalue Var 0x565463a41c30 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x565463a41e48 <col:22> 'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a41e28 <col:22> 'char' lvalue Var 0x565463a41cc0 'tmp' 'char'
|     |-CallExpr 0x565463a41f38 <line:299:3, col:50> 'void'
|     | |-ImplicitCastExpr 0x565463a41f20 <col:3> 'void (*)(msg_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x565463a41e80 <col:3> 'void (msg_t)' Function 0x565463a3fa30 'write_manual_selection_history' 'void (msg_t)'
|     | `-ImplicitCastExpr 0x565463a41f60 <col:34> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a41ea0 <col:34> 'msg_t':'char' lvalue Var 0x565463a41c30 'manual_selection' 'msg_t':'char'
|     |-BinaryOperator 0x565463a42220 <line:300:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a41f78 <col:3> 'int8_t':'char' lvalue Var 0x565463a13f88 'cs1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a42208 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x565463a421d8 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x565463a42118 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x565463a42038 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x565463a42008 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x565463a41fd8 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x565463a41f98 <col:13> 'msg_t':'char' lvalue Var 0x565463a41c30 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x565463a42020 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x565463a41ff0 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x565463a41fb8 <col:33> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x565463a420f8 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x565463a420c8 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x565463a42098 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x565463a42058 <col:42> 'int8_t':'char' lvalue Var 0x565463a13f88 'cs1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x565463a420e0 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x565463a420b0 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x565463a42078 <col:53> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x565463a42190 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x565463a42178 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a42138 <col:61> 'msg_t':'char' lvalue Var 0x565463a41c30 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x565463a421c0 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x565463a421a8 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x565463a42158 <col:80> 'int8_t':'char' lvalue Var 0x565463a13f88 'cs1_new' 'int8_t':'char'
|     |-BinaryOperator 0x565463a42500 <line:301:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a42240 <col:3> 'int8_t':'char' lvalue Var 0x565463a140f0 'cs2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a424e8 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x565463a424b8 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x565463a423e0 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x565463a42300 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x565463a422d0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x565463a422a0 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x565463a42260 <col:13> 'msg_t':'char' lvalue Var 0x565463a41c30 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x565463a422e8 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x565463a422b8 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x565463a42280 <col:33> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x565463a423c0 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x565463a42390 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x565463a42360 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x565463a42320 <col:42> 'int8_t':'char' lvalue Var 0x565463a140f0 'cs2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x565463a423a8 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x565463a42378 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x565463a42340 <col:53> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x565463a42470 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x565463a42440 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a42400 <col:61> 'msg_t':'char' lvalue Var 0x565463a41c30 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x565463a424a0 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x565463a42488 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x565463a42420 <col:80> 'int8_t':'char' lvalue Var 0x565463a140f0 'cs2_new' 'int8_t':'char'
|     |-BinaryOperator 0x565463a42598 <line:302:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a42520 <col:3> 'msg_t':'char' lvalue Var 0x565463a41c30 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x565463a42570 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x565463a42540 <col:30> 'int' 0
|     `-ReturnStmt 0x565463a425b8 <line:303:3>
|-FunctionDecl 0x565463a426d0 <line:306:1, line:362:1> line:306:6 used Side1_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x565463a45440 <line:307:1, line:362:1>
|   |-DeclStmt 0x565463a427e8 <line:308:3, col:16>
|   | `-VarDecl 0x565463a42780 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x565463a42878 <line:309:3, col:16>
|   | `-VarDecl 0x565463a42810 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x565463a42908 <line:310:3, col:26>
|   | `-VarDecl 0x565463a428a0 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x565463a42998 <line:311:3, col:21>
|   | `-VarDecl 0x565463a42930 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x565463a453a0 <line:313:3, line:361:1>
|     |-BinaryOperator 0x565463a42a08 <line:314:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a429b0 <col:3> 'int8_t':'char' lvalue Var 0x565463a42780 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a429f0 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a429d0 <col:11> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a42a80 <line:315:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a42a28 <col:3> 'int8_t':'char' lvalue Var 0x565463a42810 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a42a68 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a42a48 <col:11> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a42b18 <line:316:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a42aa0 <col:3> 'msg_t':'char' lvalue Var 0x565463a428a0 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x565463a42af0 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x565463a42ac0 <col:30> 'int' 0
|     |-BinaryOperator 0x565463a42be8 <line:317:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x565463a42b38 <col:3> '_Bool' lvalue Var 0x565463a3b920 'side1Failed' '_Bool'
|     | `-CallExpr 0x565463a42bc8 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x565463a42bb0 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x565463a42b58 <col:17> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x565463a42c60 <line:318:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x565463a42c48 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x565463a42c08 <col:3> 'void (_Bool)' Function 0x565463a3c498 'write_side1_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x565463a42c88 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a42c28 <col:30> '_Bool' lvalue Var 0x565463a3b920 'side1Failed' '_Bool'
|     |-IfStmt 0x565463a43748 <line:319:3, line:325:3>
|     | |-ImplicitCastExpr 0x565463a42cc0 <line:319:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x565463a42ca0 <col:7> '_Bool' lvalue Var 0x565463a3b920 'side1Failed' '_Bool'
|     | `-CompoundStmt 0x565463a43710 <col:20, line:325:3>
|     |   |-BinaryOperator 0x565463a42f80 <line:320:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a42cd8 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x565463a42f68 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x565463a42f38 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x565463a42e78 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x565463a42d98 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x565463a42d68 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x565463a42d38 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x565463a42cf8 <col:16> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x565463a42d80 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x565463a42d50 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x565463a42d18 <col:25> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x565463a42e58 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x565463a42e28 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x565463a42df8 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x565463a42db8 <col:34> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x565463a42e40 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x565463a42e10 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x565463a42dd8 <col:46> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x565463a42ef0 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x565463a42ed8 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x565463a42e98 <col:54> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x565463a42f20 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x565463a42f08 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x565463a42eb8 <col:62> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x565463a43248 <line:321:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a42fa0 <col:5> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x565463a43230 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x565463a43200 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x565463a43140 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x565463a43060 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x565463a43030 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x565463a43000 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x565463a42fc0 <col:16> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x565463a43048 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x565463a43018 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x565463a42fe0 <col:25> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x565463a43120 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x565463a430f0 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x565463a430c0 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x565463a43080 <col:34> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x565463a43108 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x565463a430d8 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x565463a430a0 <col:46> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x565463a431b8 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x565463a431a0 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x565463a43160 <col:54> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x565463a431e8 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x565463a431d0 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x565463a43180 <col:62> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x565463a43668 <line:322:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a43268 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x565463a43650 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x565463a43620 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x565463a43408 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x565463a43328 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x565463a432f8 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x565463a432c8 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x565463a43288 <col:15> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x565463a43310 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x565463a432e0 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x565463a432a8 <col:24> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x565463a433e8 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x565463a433b8 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x565463a43388 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x565463a43348 <col:33> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x565463a433d0 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x565463a433a0 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x565463a43368 <col:44> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x565463a435d8 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x565463a435c0 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x565463a43428 <col:52> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x565463a43608 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x565463a435f0 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x565463a43448 <col:60> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x565463a436e0 <line:323:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a43688 <col:5> 'msg_t':'char' lvalue Var 0x565463a3ba10 'side1_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x565463a436c8 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x565463a436a8 <col:21> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x565463a43700 <line:324:5>
|     |-BinaryOperator 0x565463a437b8 <line:326:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a43760 <col:3> 'int8_t':'char' lvalue Var 0x565463a42780 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a437a0 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a43780 <col:11> 'int8_t':'char' lvalue Var 0x565463a3b0b0 's1s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x565463a43830 <line:327:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a437d8 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b0b0 's1s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a43818 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a437f8 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a438a8 <line:328:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a43850 <col:3> 'int8_t':'char' lvalue Var 0x565463a42810 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a43890 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a43870 <col:11> 'int8_t':'char' lvalue Var 0x565463a3b218 's2s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x565463a43920 <line:329:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a438c8 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b218 's2s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a43908 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a438e8 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a43998 <line:330:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a43940 <col:3> 'msg_t':'char' lvalue Var 0x565463a428a0 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x565463a43980 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a43960 <col:22> 'int8_t':'char' lvalue Var 0x565463a13f10 'cs1_old' 'int8_t':'char'
|     |-BinaryOperator 0x565463a43a10 <line:331:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a439b8 <col:3> 'int8_t':'char' lvalue Var 0x565463a13f10 'cs1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a439f8 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a439d8 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x565463a44a98 <line:332:3, line:355:3> has_else
|     | |-BinaryOperator 0x565463a43b20 <line:332:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x565463a43a80 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a43a68 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a43a30 <col:13> 'int8_t':'char' lvalue Var 0x565463a42780 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x565463a43af8 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x565463a43ae0 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x565463a43aa8 <col:28> 'int8_t':'char' lvalue Var 0x565463a42810 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x565463a43bd8 <col:35, line:334:3>
|     | | `-BinaryOperator 0x565463a43bb8 <line:333:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x565463a43b40 <col:5> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x565463a43b90 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x565463a43b60 <col:27> 'int' 1
|     | `-IfStmt 0x565463a44a70 <line:335:3, line:355:3> has_else
|     |   |-BinaryOperator 0x565463a43ce0 <line:335:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x565463a43c40 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x565463a43c28 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x565463a43bf0 <col:13> 'int8_t':'char' lvalue Var 0x565463a42780 'side1' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x565463a43cb8 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x565463a43ca0 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x565463a43c68 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x565463a43f68 <col:35, line:341:3>
|     |   | `-IfStmt 0x565463a43f40 <line:336:5, line:340:5> has_else
|     |   |   |-BinaryOperator 0x565463a43df0 <line:336:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x565463a43d50 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x565463a43d38 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x565463a43d00 <col:15> 'int8_t':'char' lvalue Var 0x565463a42810 'side2' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x565463a43dc8 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x565463a43db0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x565463a43d78 <col:30> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x565463a43ea8 <col:37, line:338:5>
|     |   |   | `-BinaryOperator 0x565463a43e88 <line:337:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x565463a43e10 <col:7> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x565463a43e60 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x565463a43e30 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x565463a43f28 <line:338:12, line:340:5>
|     |   |     `-GotoStmt 0x565463a43f10 <line:339:7, col:12> '_L___0' 0x565463a43ec0
|     |   `-LabelStmt 0x565463a44a58 <line:342:3, line:355:3> '_L___0'
|     |     `-IfStmt 0x565463a44a30 <line:343:3, line:355:3> has_else
|     |       |-BinaryOperator 0x565463a44070 <line:343:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x565463a43fd0 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x565463a43fb8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x565463a43f80 <col:13> 'int8_t':'char' lvalue Var 0x565463a42780 'side1' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x565463a44048 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x565463a44030 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x565463a43ff8 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x565463a442f8 <col:35, line:349:3>
|     |       | `-IfStmt 0x565463a442d0 <line:344:5, line:348:5> has_else
|     |       |   |-BinaryOperator 0x565463a44180 <line:344:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x565463a440e0 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x565463a440c8 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x565463a44090 <col:15> 'int8_t':'char' lvalue Var 0x565463a42810 'side2' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x565463a44158 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x565463a44140 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x565463a44108 <col:30> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x565463a44238 <col:37, line:346:5>
|     |       |   | `-BinaryOperator 0x565463a44218 <line:345:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x565463a441a0 <col:7> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x565463a441f0 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x565463a441c0 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x565463a442b8 <line:346:12, line:348:5>
|     |       |     `-GotoStmt 0x565463a442a0 <line:347:7, col:12> '_L' 0x565463a44250
|     |       `-LabelStmt 0x565463a44a18 <line:350:3, line:355:3> '_L'
|     |         `-IfStmt 0x565463a449f0 <line:351:3, line:355:3> has_else
|     |           |-BinaryOperator 0x565463a443a8 <line:351:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x565463a44360 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x565463a44348 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x565463a44310 <col:13> 'msg_t':'char' lvalue Var 0x565463a428a0 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x565463a44388 <col:33> 'int' 1
|     |           |-CompoundStmt 0x565463a44508 <col:36, line:353:3>
|     |           | `-BinaryOperator 0x565463a444e8 <line:352:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x565463a443c8 <col:5> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x565463a444a8 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x565463a44490 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x565463a443e8 <col:18> 'int8_t (int8_t)' Function 0x565463a416c0 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x565463a444d0 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x565463a44408 <col:32> 'int8_t':'char' lvalue Var 0x565463a42780 'side1' 'int8_t':'char'
|     |           `-CompoundStmt 0x565463a44598 <line:353:10, line:355:3>
|     |             `-BinaryOperator 0x565463a44578 <line:354:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x565463a44520 <col:5> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x565463a44560 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x565463a44540 <col:18> 'int8_t':'char' lvalue Var 0x565463a42780 'side1' 'int8_t':'char'
|     |-BinaryOperator 0x565463a44d68 <line:356:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a44ac0 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a44d50 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x565463a44d20 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x565463a44c60 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x565463a44b80 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x565463a44b50 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x565463a44b20 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x565463a44ae0 <col:14> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x565463a44b68 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x565463a44b38 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x565463a44b00 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x565463a44c40 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x565463a44c10 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x565463a44be0 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x565463a44ba0 <col:37> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x565463a44c28 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x565463a44bf8 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x565463a44bc0 <col:49> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x565463a44cd8 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x565463a44cc0 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a44c80 <col:57> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x565463a44d08 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x565463a44cf0 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x565463a44ca0 <col:70> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x565463a45030 <line:357:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a44d88 <col:3> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a45018 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x565463a44fe8 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x565463a44f28 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x565463a44e48 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x565463a44e18 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x565463a44de8 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x565463a44da8 <col:14> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x565463a44e30 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x565463a44e00 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x565463a44dc8 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x565463a44f08 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x565463a44ed8 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x565463a44ea8 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x565463a44e68 <col:37> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x565463a44ef0 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x565463a44ec0 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x565463a44e88 <col:49> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x565463a44fa0 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x565463a44f88 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a44f48 <col:57> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x565463a44fd0 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x565463a44fb8 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x565463a44f68 <col:70> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x565463a452f8 <line:358:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a45050 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a452e0 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x565463a452b0 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x565463a451f0 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x565463a45110 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x565463a450e0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x565463a450b0 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x565463a45070 <col:13> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x565463a450f8 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x565463a450c8 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x565463a45090 <col:27> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x565463a451d0 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x565463a451a0 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x565463a45170 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x565463a45130 <col:36> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x565463a451b8 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x565463a45188 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x565463a45150 <col:47> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x565463a45268 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x565463a45250 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a45210 <col:55> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x565463a45298 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x565463a45280 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x565463a45230 <col:68> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|     |-BinaryOperator 0x565463a45370 <line:359:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a45318 <col:3> 'msg_t':'char' lvalue Var 0x565463a3ba10 'side1_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x565463a45358 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a45338 <col:19> 'int8_t':'char' lvalue Var 0x565463a42930 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x565463a45390 <line:360:3>
|-FunctionDecl 0x565463a45510 <line:363:1, line:419:1> line:363:6 used Side2_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x565463a47c90 <line:364:1, line:419:1>
|   |-DeclStmt 0x565463a45628 <line:365:3, col:16>
|   | `-VarDecl 0x565463a455c0 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x565463a456b8 <line:366:3, col:16>
|   | `-VarDecl 0x565463a45650 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x565463a45748 <line:367:3, col:26>
|   | `-VarDecl 0x565463a456e0 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x565463a457d8 <line:368:3, col:21>
|   | `-VarDecl 0x565463a45770 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x565463a47bf0 <line:370:3, line:418:1>
|     |-BinaryOperator 0x565463a45848 <line:371:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a457f0 <col:3> 'int8_t':'char' lvalue Var 0x565463a455c0 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a45830 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a45810 <col:11> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a458c0 <line:372:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a45868 <col:3> 'int8_t':'char' lvalue Var 0x565463a45650 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a458a8 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a45888 <col:11> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a45958 <line:373:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a458e0 <col:3> 'msg_t':'char' lvalue Var 0x565463a456e0 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x565463a45930 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x565463a45900 <col:30> 'int' 0
|     |-BinaryOperator 0x565463a45a00 <line:374:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x565463a45978 <col:3> '_Bool' lvalue Var 0x565463a3b998 'side2Failed' '_Bool'
|     | `-CallExpr 0x565463a459d0 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x565463a459b8 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x565463a45998 <col:17> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x565463a45a78 <line:375:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x565463a45a60 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x565463a45a20 <col:3> 'void (_Bool)' Function 0x565463a3e0b0 'write_side2_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x565463a45aa0 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a45a40 <col:30> '_Bool' lvalue Var 0x565463a3b998 'side2Failed' '_Bool'
|     |-IfStmt 0x565463a46408 <line:376:3, line:382:3>
|     | |-ImplicitCastExpr 0x565463a45ad8 <line:376:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x565463a45ab8 <col:7> '_Bool' lvalue Var 0x565463a3b998 'side2Failed' '_Bool'
|     | `-CompoundStmt 0x565463a463d0 <col:20, line:382:3>
|     |   |-BinaryOperator 0x565463a45d98 <line:377:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a45af0 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x565463a45d80 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x565463a45d50 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x565463a45c90 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x565463a45bb0 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x565463a45b80 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x565463a45b50 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x565463a45b10 <col:16> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x565463a45b98 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x565463a45b68 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x565463a45b30 <col:25> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x565463a45c70 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x565463a45c40 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x565463a45c10 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x565463a45bd0 <col:34> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x565463a45c58 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x565463a45c28 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x565463a45bf0 <col:46> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x565463a45d08 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x565463a45cf0 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x565463a45cb0 <col:54> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x565463a45d38 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x565463a45d20 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x565463a45cd0 <col:62> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x565463a46060 <line:378:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a45db8 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x565463a46048 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x565463a46018 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x565463a45f58 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x565463a45e78 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x565463a45e48 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x565463a45e18 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x565463a45dd8 <col:16> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x565463a45e60 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x565463a45e30 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x565463a45df8 <col:25> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x565463a45f38 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x565463a45f08 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x565463a45ed8 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x565463a45e98 <col:34> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x565463a45f20 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x565463a45ef0 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x565463a45eb8 <col:46> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x565463a45fd0 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x565463a45fb8 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x565463a45f78 <col:54> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x565463a46000 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x565463a45fe8 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x565463a45f98 <col:62> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x565463a46328 <line:379:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a46080 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x565463a46310 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x565463a462e0 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x565463a46220 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x565463a46140 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x565463a46110 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x565463a460e0 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x565463a460a0 <col:15> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x565463a46128 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x565463a460f8 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x565463a460c0 <col:24> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x565463a46200 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x565463a461d0 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x565463a461a0 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x565463a46160 <col:33> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x565463a461e8 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x565463a461b8 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x565463a46180 <col:44> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x565463a46298 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x565463a46280 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x565463a46240 <col:52> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x565463a462c8 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x565463a462b0 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x565463a46260 <col:60> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x565463a463a0 <line:380:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a46348 <col:5> 'msg_t':'char' lvalue Var 0x565463a3ba88 'side2_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x565463a46388 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x565463a46368 <col:21> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x565463a463c0 <line:381:5>
|     |-BinaryOperator 0x565463a46478 <line:383:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a46420 <col:3> 'int8_t':'char' lvalue Var 0x565463a455c0 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a46460 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a46440 <col:11> 'int8_t':'char' lvalue Var 0x565463a3af48 's1s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x565463a464f0 <line:384:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a46498 <col:3> 'int8_t':'char' lvalue Var 0x565463a3af48 's1s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a464d8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a464b8 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a46568 <line:385:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a46510 <col:3> 'int8_t':'char' lvalue Var 0x565463a45650 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a46550 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a46530 <col:11> 'int8_t':'char' lvalue Var 0x565463a3b380 's2s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x565463a465e0 <line:386:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a46588 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b380 's2s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a465c8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a465a8 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a46658 <line:387:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a46600 <col:3> 'msg_t':'char' lvalue Var 0x565463a456e0 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x565463a46640 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a46620 <col:22> 'int8_t':'char' lvalue Var 0x565463a14078 'cs2_old' 'int8_t':'char'
|     |-BinaryOperator 0x565463a466d0 <line:388:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a46678 <col:3> 'int8_t':'char' lvalue Var 0x565463a14078 'cs2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a466b8 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a46698 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x565463a472c8 <line:389:3, line:412:3> has_else
|     | |-BinaryOperator 0x565463a467e0 <line:389:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x565463a46740 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a46728 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a466f0 <col:13> 'int8_t':'char' lvalue Var 0x565463a455c0 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x565463a467b8 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x565463a467a0 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x565463a46768 <col:28> 'int8_t':'char' lvalue Var 0x565463a45650 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x565463a46898 <col:35, line:391:3>
|     | | `-BinaryOperator 0x565463a46878 <line:390:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x565463a46800 <col:5> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x565463a46850 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x565463a46820 <col:27> 'int' 0
|     | `-IfStmt 0x565463a472a0 <line:392:3, line:412:3> has_else
|     |   |-BinaryOperator 0x565463a469a0 <line:392:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x565463a46900 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x565463a468e8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x565463a468b0 <col:13> 'int8_t':'char' lvalue Var 0x565463a455c0 'side1' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x565463a46978 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x565463a46960 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x565463a46928 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x565463a46c40 <col:35, line:398:3>
|     |   | `-IfStmt 0x565463a46c18 <line:393:5, line:397:5> has_else
|     |   |   |-BinaryOperator 0x565463a46ac8 <line:393:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x565463a46a28 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x565463a46a10 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x565463a469c0 <col:15> 'int8_t':'char' lvalue Var 0x565463a45650 'side2' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x565463a46aa0 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x565463a46a88 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x565463a46a50 <col:30> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x565463a46b80 <col:37, line:395:5>
|     |   |   | `-BinaryOperator 0x565463a46b60 <line:394:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x565463a46ae8 <col:7> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x565463a46b38 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x565463a46b08 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x565463a46c00 <line:395:12, line:397:5>
|     |   |     `-GotoStmt 0x565463a46be8 <line:396:7, col:12> '_L___0' 0x565463a46b98
|     |   `-LabelStmt 0x565463a47288 <line:399:3, line:412:3> '_L___0'
|     |     `-IfStmt 0x565463a47260 <line:400:3, line:412:3> has_else
|     |       |-BinaryOperator 0x565463a46d48 <line:400:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x565463a46ca8 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x565463a46c90 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x565463a46c58 <col:13> 'int8_t':'char' lvalue Var 0x565463a455c0 'side1' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x565463a46d20 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x565463a46d08 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x565463a46cd0 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x565463a46fd0 <col:35, line:406:3>
|     |       | `-IfStmt 0x565463a46fa8 <line:401:5, line:405:5> has_else
|     |       |   |-BinaryOperator 0x565463a46e58 <line:401:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x565463a46db8 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x565463a46da0 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x565463a46d68 <col:15> 'int8_t':'char' lvalue Var 0x565463a45650 'side2' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x565463a46e30 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x565463a46e18 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x565463a46de0 <col:30> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x565463a46f10 <col:37, line:403:5>
|     |       |   | `-BinaryOperator 0x565463a46ef0 <line:402:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x565463a46e78 <col:7> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x565463a46ec8 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x565463a46e98 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x565463a46f90 <line:403:12, line:405:5>
|     |       |     `-GotoStmt 0x565463a46f78 <line:404:7, col:12> '_L' 0x565463a46f28
|     |       `-LabelStmt 0x565463a47248 <line:407:3, line:412:3> '_L'
|     |         `-IfStmt 0x565463a47220 <line:408:3, line:412:3> has_else
|     |           |-BinaryOperator 0x565463a47080 <line:408:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x565463a47038 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x565463a47020 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x565463a46fe8 <col:13> 'msg_t':'char' lvalue Var 0x565463a456e0 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x565463a47060 <col:33> 'int' 1
|     |           |-CompoundStmt 0x565463a47178 <col:36, line:410:3>
|     |           | `-BinaryOperator 0x565463a47158 <line:409:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x565463a470a0 <col:5> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x565463a47118 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x565463a47100 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x565463a470c0 <col:18> 'int8_t (int8_t)' Function 0x565463a416c0 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x565463a47140 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x565463a470e0 <col:32> 'int8_t':'char' lvalue Var 0x565463a45650 'side2' 'int8_t':'char'
|     |           `-CompoundStmt 0x565463a47208 <line:410:10, line:412:3>
|     |             `-BinaryOperator 0x565463a471e8 <line:411:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x565463a47190 <col:5> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x565463a471d0 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x565463a471b0 <col:18> 'int8_t':'char' lvalue Var 0x565463a45650 'side2' 'int8_t':'char'
|     |-BinaryOperator 0x565463a47598 <line:413:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a472f0 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a47580 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x565463a47550 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x565463a47490 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x565463a473b0 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x565463a47380 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x565463a47350 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x565463a47310 <col:14> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x565463a47398 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x565463a47368 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x565463a47330 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x565463a47470 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x565463a47440 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x565463a47410 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x565463a473d0 <col:37> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x565463a47458 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x565463a47428 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x565463a473f0 <col:49> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x565463a47508 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x565463a474f0 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a474b0 <col:57> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x565463a47538 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x565463a47520 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x565463a474d0 <col:70> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x565463a47860 <line:414:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a475b8 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a47848 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x565463a47818 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x565463a47758 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x565463a47678 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x565463a47648 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x565463a47618 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x565463a475d8 <col:14> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x565463a47660 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x565463a47630 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x565463a475f8 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x565463a47738 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x565463a47708 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x565463a476d8 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x565463a47698 <col:37> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x565463a47720 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x565463a476f0 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x565463a476b8 <col:49> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x565463a477d0 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x565463a477b8 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a47778 <col:57> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x565463a47800 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x565463a477e8 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x565463a47798 <col:70> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x565463a47b48 <line:415:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a47880 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a47b30 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x565463a47b00 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x565463a47a40 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x565463a47940 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x565463a47910 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x565463a478e0 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x565463a478a0 <col:13> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x565463a47928 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x565463a478f8 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x565463a478c0 <col:27> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x565463a47a20 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x565463a479d0 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x565463a479a0 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x565463a47960 <col:36> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x565463a479e8 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x565463a479b8 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x565463a47980 <col:47> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x565463a47ab8 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x565463a47aa0 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a47a60 <col:55> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x565463a47ae8 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x565463a47ad0 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x565463a47a80 <col:68> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|     |-BinaryOperator 0x565463a47bc0 <line:416:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a47b68 <col:3> 'msg_t':'char' lvalue Var 0x565463a3ba88 'side2_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x565463a47ba8 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a47b88 <col:19> 'int8_t':'char' lvalue Var 0x565463a45770 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x565463a47be0 <line:417:3>
|-FunctionDecl 0x565463a47d60 <line:420:1, line:462:1> line:420:6 used Pendulum_prism_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x565463a4a130 <line:421:1, line:462:1>
|   |-DeclStmt 0x565463a47e78 <line:422:3, col:22>
|   | `-VarDecl 0x565463a47e10 <col:3, col:10> col:10 used active_side 'int8_t':'char'
|   |-DeclStmt 0x565463a47f08 <line:423:3, col:14>
|   | `-VarDecl 0x565463a47ea0 <col:3, col:10> col:10 used tmp 'int8_t':'char'
|   |-DeclStmt 0x565463a47f98 <line:424:3, col:16>
|   | `-VarDecl 0x565463a47f30 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x565463a48028 <line:425:3, col:16>
|   | `-VarDecl 0x565463a47fc0 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   `-CompoundStmt 0x565463a4a0c8 <line:427:3, line:461:1>
|     |-BinaryOperator 0x565463a48180 <line:428:3, col:50> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a48040 <col:3> 'int8_t':'char' lvalue Var 0x565463a47ea0 'tmp' 'int8_t':'char'
|     | `-CallExpr 0x565463a48158 <col:9, col:50> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x565463a48140 <col:9> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x565463a48060 <col:9> 'int8_t (unsigned char)' Function 0x565463a3eec0 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x565463a480b8 <col:34, col:49> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x565463a48080 <col:49> 'int' 0
|     |-BinaryOperator 0x565463a481f8 <line:429:3, col:17> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a481a0 <col:3> 'int8_t':'char' lvalue Var 0x565463a47e10 'active_side' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a481e0 <col:17> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a481c0 <col:17> 'int8_t':'char' lvalue Var 0x565463a47ea0 'tmp' 'int8_t':'char'
|     |-BinaryOperator 0x565463a48270 <line:430:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a48218 <col:3> 'int8_t':'char' lvalue Var 0x565463a47f30 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a48258 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a48238 <col:11> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a482e8 <line:431:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a48290 <col:3> 'int8_t':'char' lvalue Var 0x565463a47fc0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a482d0 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a482b0 <col:11> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a48360 <line:432:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a48308 <col:3> 'int8_t':'char' lvalue Var 0x565463a47f30 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a48348 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a48328 <col:11> 'int8_t':'char' lvalue Var 0x565463a3b4e8 's1p_old' 'int8_t':'char'
|     |-BinaryOperator 0x565463a483d8 <line:433:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a48380 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b4e8 's1p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a483c0 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a483a0 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x565463a48450 <line:434:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a483f8 <col:3> 'int8_t':'char' lvalue Var 0x565463a47fc0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a48438 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a48418 <col:11> 'int8_t':'char' lvalue Var 0x565463a3b650 's2p_old' 'int8_t':'char'
|     |-BinaryOperator 0x565463a484c8 <line:435:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a48470 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b650 's2p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x565463a484b0 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a48490 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x565463a49fc0 <line:436:3, line:458:3> has_else
|     | |-BinaryOperator 0x565463a48580 <line:436:7, col:22> 'int' '=='
|     | | |-CStyleCastExpr 0x565463a48538 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a48520 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a484e8 <col:13> 'int8_t':'char' lvalue Var 0x565463a47f30 'side1' 'int8_t':'char'
|     | | `-IntegerLiteral 0x565463a48560 <col:22> 'int' 1
|     | |-CompoundStmt 0x565463a48638 <col:25, line:438:3>
|     | | `-BinaryOperator 0x565463a48618 <line:437:5, col:28> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x565463a485a0 <col:5> 'int8_t':'char' lvalue Var 0x565463a47e10 'active_side' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x565463a485f0 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x565463a485c0 <col:28> 'int' 1
|     | `-IfStmt 0x565463a49f98 <line:439:3, line:458:3> has_else
|     |   |-BinaryOperator 0x565463a486e8 <line:439:7, col:22> 'int' '=='
|     |   | |-CStyleCastExpr 0x565463a486a0 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x565463a48688 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x565463a48650 <col:13> 'int8_t':'char' lvalue Var 0x565463a47fc0 'side2' 'int8_t':'char'
|     |   | `-IntegerLiteral 0x565463a486c8 <col:22> 'int' 1
|     |   |-CompoundStmt 0x565463a487a0 <col:25, line:441:3>
|     |   | `-BinaryOperator 0x565463a48780 <line:440:5, col:28> 'int8_t':'char' '='
|     |   |   |-DeclRefExpr 0x565463a48708 <col:5> 'int8_t':'char' lvalue Var 0x565463a47e10 'active_side' 'int8_t':'char'
|     |   |   `-CStyleCastExpr 0x565463a48758 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x565463a48728 <col:28> 'int' 2
|     |   `-IfStmt 0x565463a49f70 <line:442:3, line:458:3> has_else
|     |     |-BinaryOperator 0x565463a48850 <line:442:7, col:22> 'int' '=='
|     |     | |-CStyleCastExpr 0x565463a48808 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x565463a487f0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x565463a487b8 <col:13> 'int8_t':'char' lvalue Var 0x565463a47f30 'side1' 'int8_t':'char'
|     |     | `-IntegerLiteral 0x565463a48830 <col:22> 'int' 0
|     |     |-CompoundStmt 0x565463a49b00 <col:25, line:448:3>
|     |     | `-IfStmt 0x565463a49ad8 <line:443:5, line:447:5> has_else
|     |     |   |-BinaryOperator 0x565463a48960 <line:443:9, col:30> 'int' '=='
|     |     |   | |-CStyleCastExpr 0x565463a488c0 <col:9, col:15> 'int' <IntegralCast>
|     |     |   | | `-ImplicitCastExpr 0x565463a488a8 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   | |   `-DeclRefExpr 0x565463a48870 <col:15> 'int8_t':'char' lvalue Var 0x565463a47fc0 'side2' 'int8_t':'char'
|     |     |   | `-CStyleCastExpr 0x565463a48938 <col:24, col:30> 'int' <IntegralCast>
|     |     |   |   `-ImplicitCastExpr 0x565463a48920 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   |     `-DeclRefExpr 0x565463a488e8 <col:30> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |     |   |-CompoundStmt 0x565463a49a40 <col:37, line:445:5>
|     |     |   | `-BinaryOperator 0x565463a489f8 <line:444:7, col:30> 'int8_t':'char' '='
|     |     |   |   |-DeclRefExpr 0x565463a48980 <col:7> 'int8_t':'char' lvalue Var 0x565463a47e10 'active_side' 'int8_t':'char'
|     |     |   |   `-CStyleCastExpr 0x565463a489d0 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |     |   |     `-IntegerLiteral 0x565463a489a0 <col:30> 'int' 1
|     |     |   `-CompoundStmt 0x565463a49ac0 <line:445:12, line:447:5>
|     |     |     `-GotoStmt 0x565463a49aa8 <line:446:7, col:12> '_L' 0x565463a49a58
|     |     `-LabelStmt 0x565463a49f58 <line:449:3, line:458:3> '_L'
|     |       `-IfStmt 0x565463a49f30 <line:450:3, line:458:3> has_else
|     |         |-BinaryOperator 0x565463a49c08 <line:450:7, col:28> 'int' '=='
|     |         | |-CStyleCastExpr 0x565463a49b68 <col:7, col:13> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x565463a49b50 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x565463a49b18 <col:13> 'int8_t':'char' lvalue Var 0x565463a47f30 'side1' 'int8_t':'char'
|     |         | `-CStyleCastExpr 0x565463a49be0 <col:22, col:28> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x565463a49bc8 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x565463a49b90 <col:28> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|     |         |-CompoundStmt 0x565463a49e68 <col:35, line:456:3>
|     |         | `-IfStmt 0x565463a49e40 <line:451:5, line:455:5> has_else
|     |         |   |-BinaryOperator 0x565463a49cc0 <line:451:9, col:24> 'int' '=='
|     |         |   | |-CStyleCastExpr 0x565463a49c78 <col:9, col:15> 'int' <IntegralCast>
|     |         |   | | `-ImplicitCastExpr 0x565463a49c60 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |   | |   `-DeclRefExpr 0x565463a49c28 <col:15> 'int8_t':'char' lvalue Var 0x565463a47fc0 'side2' 'int8_t':'char'
|     |         |   | `-IntegerLiteral 0x565463a49ca0 <col:24> 'int' 0
|     |         |   |-CompoundStmt 0x565463a49d78 <col:27, line:453:5>
|     |         |   | `-BinaryOperator 0x565463a49d58 <line:452:7, col:30> 'int8_t':'char' '='
|     |         |   |   |-DeclRefExpr 0x565463a49ce0 <col:7> 'int8_t':'char' lvalue Var 0x565463a47e10 'active_side' 'int8_t':'char'
|     |         |   |   `-CStyleCastExpr 0x565463a49d30 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |   |     `-IntegerLiteral 0x565463a49d00 <col:30> 'int' 2
|     |         |   `-CompoundStmt 0x565463a49e28 <line:453:12, line:455:5>
|     |         |     `-BinaryOperator 0x565463a49e08 <line:454:7, col:30> 'int8_t':'char' '='
|     |         |       |-DeclRefExpr 0x565463a49d90 <col:7> 'int8_t':'char' lvalue Var 0x565463a47e10 'active_side' 'int8_t':'char'
|     |         |       `-CStyleCastExpr 0x565463a49de0 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |         `-IntegerLiteral 0x565463a49db0 <col:30> 'int' 0
|     |         `-CompoundStmt 0x565463a49f18 <line:456:10, line:458:3>
|     |           `-BinaryOperator 0x565463a49ef8 <line:457:5, col:28> 'int8_t':'char' '='
|     |             |-DeclRefExpr 0x565463a49e80 <col:5> 'int8_t':'char' lvalue Var 0x565463a47e10 'active_side' 'int8_t':'char'
|     |             `-CStyleCastExpr 0x565463a49ed0 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |               `-IntegerLiteral 0x565463a49ea0 <col:28> 'int' 0
|     |-CallExpr 0x565463a4a078 <line:459:3, col:40> 'void'
|     | |-ImplicitCastExpr 0x565463a4a060 <col:3> 'void (*)(int8_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x565463a49fe8 <col:3> 'void (int8_t)' Function 0x565463a3eb30 'write_active_side_history' 'void (int8_t)'
|     | `-ImplicitCastExpr 0x565463a4a0a0 <col:29> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x565463a4a008 <col:29> 'int8_t':'char' lvalue Var 0x565463a47e10 'active_side' 'int8_t':'char'
|     `-ReturnStmt 0x565463a4a0b8 <line:460:3>
|-VarDecl 0x565463a4a370 <line:463:1, col:210> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x565463a4a528 <col:27, col:210> 'void (*[4])(void)'
|   |-UnaryOperator 0x565463a4a3f8 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x565463a4a3d8 <col:36> 'void (void)' Function 0x565463a41b80 'Console_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x565463a4a430 <col:72, col:74> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x565463a4a410 <col:74> 'void (void)' Function 0x565463a426d0 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x565463a4a468 <col:122, col:124> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x565463a4a448 <col:124> 'void (void)' Function 0x565463a45510 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   `-UnaryOperator 0x565463a4a4a0 <col:172, col:174> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x565463a4a480 <col:174> 'void (void)' Function 0x565463a47d60 'Pendulum_prism_task_each_pals_period' 'void (void)'
|-FunctionDecl 0x565463a4a628 <line:464:1, line:582:1> line:464:5 used check 'int (void)'
| `-CompoundStmt 0x565463a50158 <line:465:1, line:582:1>
|   |-DeclStmt 0x565463a4a748 <line:466:3, col:11>
|   | `-VarDecl 0x565463a4a6e0 <col:3, col:7> col:7 used tmp 'int'
|   |-DeclStmt 0x565463a4a7d8 <line:467:3, col:17>
|   | `-VarDecl 0x565463a4a770 <col:3, col:9> col:9 used tmp___0 'msg_t':'char'
|   |-DeclStmt 0x565463a4a868 <line:468:3, col:17>
|   | `-VarDecl 0x565463a4a800 <col:3, col:9> col:9 used tmp___1 '_Bool'
|   |-DeclStmt 0x565463a4a8f8 <line:469:3, col:17>
|   | `-VarDecl 0x565463a4a890 <col:3, col:9> col:9 used tmp___2 '_Bool'
|   |-DeclStmt 0x565463a4a988 <line:470:3, col:17>
|   | `-VarDecl 0x565463a4a920 <col:3, col:9> col:9 used tmp___3 '_Bool'
|   |-DeclStmt 0x565463a4aa18 <line:471:3, col:17>
|   | `-VarDecl 0x565463a4a9b0 <col:3, col:9> col:9 used tmp___4 '_Bool'
|   |-DeclStmt 0x565463a4ae38 <line:472:3, col:18>
|   | `-VarDecl 0x565463a4add0 <col:3, col:10> col:10 used tmp___5 'int8_t':'char'
|   |-DeclStmt 0x565463a4aec8 <line:473:3, col:17>
|   | `-VarDecl 0x565463a4ae60 <col:3, col:9> col:9 used tmp___6 '_Bool'
|   |-DeclStmt 0x565463a4af58 <line:474:3, col:17>
|   | `-VarDecl 0x565463a4aef0 <col:3, col:9> col:9 used tmp___7 '_Bool'
|   |-DeclStmt 0x565463a4afe8 <line:475:3, col:17>
|   | `-VarDecl 0x565463a4af80 <col:3, col:9> col:9 used tmp___8 '_Bool'
|   |-DeclStmt 0x565463a4b078 <line:476:3, col:18>
|   | `-VarDecl 0x565463a4b010 <col:3, col:10> col:10 used tmp___9 'int8_t':'char'
|   |-DeclStmt 0x565463a4b108 <line:477:3, col:18>
|   | `-VarDecl 0x565463a4b0a0 <col:3, col:9> col:9 used tmp___10 '_Bool'
|   |-DeclStmt 0x565463a4b198 <line:478:3, col:18>
|   | `-VarDecl 0x565463a4b130 <col:3, col:9> col:9 used tmp___11 '_Bool'
|   |-DeclStmt 0x565463a4b228 <line:479:3, col:18>
|   | `-VarDecl 0x565463a4b1c0 <col:3, col:9> col:9 used tmp___12 '_Bool'
|   |-DeclStmt 0x565463a4b2b8 <line:480:3, col:18>
|   | `-VarDecl 0x565463a4b250 <col:3, col:9> col:9 used tmp___13 'msg_t':'char'
|   |-DeclStmt 0x565463a4b348 <line:481:3, col:18>
|   | `-VarDecl 0x565463a4b2e0 <col:3, col:9> col:9 used tmp___14 '_Bool'
|   |-DeclStmt 0x565463a4b3d8 <line:482:3, col:18>
|   | `-VarDecl 0x565463a4b370 <col:3, col:9> col:9 used tmp___15 '_Bool'
|   |-DeclStmt 0x565463a4b468 <line:483:3, col:18>
|   | `-VarDecl 0x565463a4b400 <col:3, col:9> col:9 used tmp___16 '_Bool'
|   |-DeclStmt 0x565463a4b4f8 <line:484:3, col:18>
|   | `-VarDecl 0x565463a4b490 <col:3, col:9> col:9 used tmp___17 '_Bool'
|   |-DeclStmt 0x565463a4b588 <line:485:3, col:19>
|   | `-VarDecl 0x565463a4b520 <col:3, col:10> col:10 used tmp___18 'int8_t':'char'
|   |-DeclStmt 0x565463a4b618 <line:486:3, col:19>
|   | `-VarDecl 0x565463a4b5b0 <col:3, col:10> col:10 used tmp___19 'int8_t':'char'
|   |-DeclStmt 0x565463a4b6a8 <line:487:3, col:19>
|   | `-VarDecl 0x565463a4b640 <col:3, col:10> col:10 used tmp___20 'int8_t':'char'
|   `-CompoundStmt 0x565463a500f0 <line:489:3, line:581:1>
|     |-IfStmt 0x565463a4b8f0 <line:490:3, line:497:3> has_else
|     | |-UnaryOperator 0x565463a4b6f8 <line:490:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x565463a4b6e0 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x565463a4b6c0 <col:9> '_Bool' lvalue Var 0x565463a3b920 'side1Failed' '_Bool'
|     | |-CompoundStmt 0x565463a4b770 <col:22, line:492:3>
|     | | `-BinaryOperator 0x565463a4b750 <line:491:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x565463a4b710 <col:5> 'int' lvalue Var 0x565463a4a6e0 'tmp' 'int'
|     | |   `-IntegerLiteral 0x565463a4b730 <col:11> 'int' 1
|     | `-IfStmt 0x565463a4b8c8 <line:493:3, line:497:3> has_else
|     |   |-UnaryOperator 0x565463a4b7c0 <line:493:7, col:9> 'int' prefix '!' cannot overflow
|     |   | `-ImplicitCastExpr 0x565463a4b7a8 <col:9> '_Bool' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x565463a4b788 <col:9> '_Bool' lvalue Var 0x565463a3b998 'side2Failed' '_Bool'
|     |   |-CompoundStmt 0x565463a4b838 <col:22, line:495:3>
|     |   | `-BinaryOperator 0x565463a4b818 <line:494:5, col:11> 'int' '='
|     |   |   |-DeclRefExpr 0x565463a4b7d8 <col:5> 'int' lvalue Var 0x565463a4a6e0 'tmp' 'int'
|     |   |   `-IntegerLiteral 0x565463a4b7f8 <col:11> 'int' 1
|     |   `-CompoundStmt 0x565463a4b8b0 <line:495:10, line:497:3>
|     |     `-BinaryOperator 0x565463a4b890 <line:496:5, col:11> 'int' '='
|     |       |-DeclRefExpr 0x565463a4b850 <col:5> 'int' lvalue Var 0x565463a4a6e0 'tmp' 'int'
|     |       `-IntegerLiteral 0x565463a4b870 <col:11> 'int' 0
|     |-CallExpr 0x565463a4b9f8 <line:498:3, col:32> 'void'
|     | |-ImplicitCastExpr 0x565463a4b9e0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x565463a4b918 <col:3> 'void (int)' Function 0x565463a3bd60 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x565463a4ba20 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x565463a4b980 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x565463a4b968 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x565463a4b938 <col:29> 'int' lvalue Var 0x565463a4a6e0 'tmp' 'int'
|     |-BinaryOperator 0x565463a4bb50 <line:499:3, col:59> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x565463a4ba38 <col:3> 'msg_t':'char' lvalue Var 0x565463a4a770 'tmp___0' 'msg_t':'char'
|     | `-CallExpr 0x565463a4bb28 <col:13, col:59> 'msg_t':'char'
|     |   |-ImplicitCastExpr 0x565463a4bb10 <col:13> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x565463a4ba58 <col:13> 'msg_t (unsigned char)' Function 0x565463a3fd80 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   `-CStyleCastExpr 0x565463a4bab0 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x565463a4ba78 <col:58> 'int' 1
|     |-IfStmt 0x565463a4ca80 <line:500:3, line:528:3>
|     | |-UnaryOperator 0x565463a4bba8 <line:500:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x565463a4bb90 <col:9> 'msg_t':'char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x565463a4bb70 <col:9> 'msg_t':'char' lvalue Var 0x565463a4a770 'tmp___0' 'msg_t':'char'
|     | `-CompoundStmt 0x565463a4ca60 <col:18, line:528:3>
|     |   |-BinaryOperator 0x565463a4bcd0 <line:501:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x565463a4bbc0 <col:5> '_Bool' lvalue Var 0x565463a4a800 'tmp___1' '_Bool'
|     |   | `-CallExpr 0x565463a4bca8 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x565463a4bc90 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x565463a4bbe0 <col:15> '_Bool (unsigned char)' Function 0x565463a3c7e0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x565463a4bc38 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x565463a4bc00 <col:56> 'int' 1
|     |   `-IfStmt 0x565463a4ca48 <line:502:5, line:527:5>
|     |     |-UnaryOperator 0x565463a4bd28 <line:502:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x565463a4bd10 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a4bcf0 <col:11> '_Bool' lvalue Var 0x565463a4a800 'tmp___1' '_Bool'
|     |     `-CompoundStmt 0x565463a4ca28 <col:20, line:527:5>
|     |       |-BinaryOperator 0x565463a4be48 <line:503:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x565463a4bd40 <col:7> '_Bool' lvalue Var 0x565463a4a890 'tmp___2' '_Bool'
|     |       | `-CallExpr 0x565463a4be20 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x565463a4be08 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x565463a4bd60 <col:17> '_Bool (unsigned char)' Function 0x565463a3c7e0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x565463a4bde0 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x565463a4bd80 <col:58> 'int' 0
|     |       `-IfStmt 0x565463a4ca10 <line:504:7, line:526:7>
|     |         |-UnaryOperator 0x565463a4bea0 <line:504:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x565463a4be88 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x565463a4be68 <col:13> '_Bool' lvalue Var 0x565463a4a890 'tmp___2' '_Bool'
|     |         `-CompoundStmt 0x565463a4c9f0 <col:22, line:526:7>
|     |           |-BinaryOperator 0x565463a4bf98 <line:505:9, col:61> '_Bool' '='
|     |           | |-DeclRefExpr 0x565463a4beb8 <col:9> '_Bool' lvalue Var 0x565463a4a920 'tmp___3' '_Bool'
|     |           | `-CallExpr 0x565463a4bf70 <col:19, col:61> '_Bool'
|     |           |   |-ImplicitCastExpr 0x565463a4bf58 <col:19> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x565463a4bed8 <col:19> '_Bool (unsigned char)' Function 0x565463a3e3c0 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x565463a4bf30 <col:45, col:60> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x565463a4bef8 <col:60> 'int' 1
|     |           `-IfStmt 0x565463a4c9d8 <line:506:9, line:525:9>
|     |             |-UnaryOperator 0x565463a4bff0 <line:506:13, col:15> 'int' prefix '!' cannot overflow
|     |             | `-ImplicitCastExpr 0x565463a4bfd8 <col:15> '_Bool' <LValueToRValue>
|     |             |   `-DeclRefExpr 0x565463a4bfb8 <col:15> '_Bool' lvalue Var 0x565463a4a920 'tmp___3' '_Bool'
|     |             `-CompoundStmt 0x565463a4c9b8 <col:24, line:525:9>
|     |               |-BinaryOperator 0x565463a4c0e8 <line:507:11, col:63> '_Bool' '='
|     |               | |-DeclRefExpr 0x565463a4c008 <col:11> '_Bool' lvalue Var 0x565463a4a9b0 'tmp___4' '_Bool'
|     |               | `-CallExpr 0x565463a4c0c0 <col:21, col:63> '_Bool'
|     |               |   |-ImplicitCastExpr 0x565463a4c0a8 <col:21> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x565463a4c028 <col:21> '_Bool (unsigned char)' Function 0x565463a3e3c0 'read_side2_failed_history' '_Bool (unsigned char)'
|     |               |   `-CStyleCastExpr 0x565463a4c080 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x565463a4c048 <col:62> 'int' 0
|     |               `-IfStmt 0x565463a4c9a0 <line:508:11, line:524:11>
|     |                 |-UnaryOperator 0x565463a4c140 <line:508:15, col:17> 'int' prefix '!' cannot overflow
|     |                 | `-ImplicitCastExpr 0x565463a4c128 <col:17> '_Bool' <LValueToRValue>
|     |                 |   `-DeclRefExpr 0x565463a4c108 <col:17> '_Bool' lvalue Var 0x565463a4a9b0 'tmp___4' '_Bool'
|     |                 `-CompoundStmt 0x565463a4c978 <col:26, line:524:11>
|     |                   |-IfStmt 0x565463a4c3d0 <line:509:13, line:513:13>
|     |                   | |-UnaryOperator 0x565463a4c230 <line:509:17, col:44> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x565463a4c210 <col:19, col:44> 'int'
|     |                   | |   `-BinaryOperator 0x565463a4c1f0 <col:20, col:43> 'int' '=='
|     |                   | |     |-CStyleCastExpr 0x565463a4c1a8 <col:20, col:26> 'int' <IntegralCast>
|     |                   | |     | `-ImplicitCastExpr 0x565463a4c190 <col:26> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |     |   `-DeclRefExpr 0x565463a4c158 <col:26> 'msg_t':'char' lvalue Var 0x565463a3ba10 'side1_written' 'msg_t':'char'
|     |                   | |     `-IntegerLiteral 0x565463a4c1d0 <col:43> 'int' 1
|     |                   | `-CompoundStmt 0x565463a4c3b8 <col:47, line:513:13>
|     |                   |   `-IfStmt 0x565463a4c3a0 <line:510:15, line:512:15>
|     |                   |     |-UnaryOperator 0x565463a4c320 <line:510:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x565463a4c300 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x565463a4c2e0 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x565463a4c298 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x565463a4c280 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x565463a4c248 <col:28> 'msg_t':'char' lvalue Var 0x565463a3ba10 'side1_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x565463a4c2c0 <col:45> 'int' 0
|     |                   |     `-CompoundStmt 0x565463a4c388 <col:49, line:512:15>
|     |                   |       `-ReturnStmt 0x565463a4c378 <line:511:17, col:26>
|     |                   |         `-ParenExpr 0x565463a4c358 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x565463a4c338 <col:25> 'int' 0
|     |                   |-IfStmt 0x565463a4c698 <line:514:13, line:518:13>
|     |                   | |-UnaryOperator 0x565463a4c4f8 <line:514:17, col:48> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x565463a4c4d8 <col:19, col:48> 'int'
|     |                   | |   `-UnaryOperator 0x565463a4c4c0 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                   | |     `-ParenExpr 0x565463a4c4a0 <col:22, col:47> 'int'
|     |                   | |       `-BinaryOperator 0x565463a4c480 <col:23, col:46> 'int' '=='
|     |                   | |         |-CStyleCastExpr 0x565463a4c438 <col:23, col:29> 'int' <IntegralCast>
|     |                   | |         | `-ImplicitCastExpr 0x565463a4c420 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |         |   `-DeclRefExpr 0x565463a4c3e8 <col:29> 'msg_t':'char' lvalue Var 0x565463a3ba10 'side1_written' 'msg_t':'char'
|     |                   | |         `-IntegerLiteral 0x565463a4c460 <col:46> 'int' 0
|     |                   | `-CompoundStmt 0x565463a4c680 <col:51, line:518:13>
|     |                   |   `-IfStmt 0x565463a4c668 <line:515:15, line:517:15>
|     |                   |     |-UnaryOperator 0x565463a4c5e8 <line:515:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x565463a4c5c8 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x565463a4c5a8 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x565463a4c560 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x565463a4c548 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x565463a4c510 <col:28> 'msg_t':'char' lvalue Var 0x565463a3ba88 'side2_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x565463a4c588 <col:45> 'int' 1
|     |                   |     `-CompoundStmt 0x565463a4c650 <col:49, line:517:15>
|     |                   |       `-ReturnStmt 0x565463a4c640 <line:516:17, col:26>
|     |                   |         `-ParenExpr 0x565463a4c620 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x565463a4c600 <col:25> 'int' 0
|     |                   `-IfStmt 0x565463a4c960 <line:519:13, line:523:13>
|     |                     |-UnaryOperator 0x565463a4c7c0 <line:519:17, col:48> 'int' prefix '!' cannot overflow
|     |                     | `-ParenExpr 0x565463a4c7a0 <col:19, col:48> 'int'
|     |                     |   `-UnaryOperator 0x565463a4c788 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                     |     `-ParenExpr 0x565463a4c768 <col:22, col:47> 'int'
|     |                     |       `-BinaryOperator 0x565463a4c748 <col:23, col:46> 'int' '=='
|     |                     |         |-CStyleCastExpr 0x565463a4c700 <col:23, col:29> 'int' <IntegralCast>
|     |                     |         | `-ImplicitCastExpr 0x565463a4c6e8 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                     |         |   `-DeclRefExpr 0x565463a4c6b0 <col:29> 'msg_t':'char' lvalue Var 0x565463a3ba10 'side1_written' 'msg_t':'char'
|     |                     |         `-IntegerLiteral 0x565463a4c728 <col:46> 'int' 1
|     |                     `-CompoundStmt 0x565463a4c948 <col:51, line:523:13>
|     |                       `-IfStmt 0x565463a4c930 <line:520:15, line:522:15>
|     |                         |-UnaryOperator 0x565463a4c8b0 <line:520:19, col:46> 'int' prefix '!' cannot overflow
|     |                         | `-ParenExpr 0x565463a4c890 <col:21, col:46> 'int'
|     |                         |   `-BinaryOperator 0x565463a4c870 <col:22, col:45> 'int' '=='
|     |                         |     |-CStyleCastExpr 0x565463a4c828 <col:22, col:28> 'int' <IntegralCast>
|     |                         |     | `-ImplicitCastExpr 0x565463a4c810 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                         |     |   `-DeclRefExpr 0x565463a4c7d8 <col:28> 'msg_t':'char' lvalue Var 0x565463a3ba88 'side2_written' 'msg_t':'char'
|     |                         |     `-IntegerLiteral 0x565463a4c850 <col:45> 'int' 0
|     |                         `-CompoundStmt 0x565463a4c918 <col:49, line:522:15>
|     |                           `-ReturnStmt 0x565463a4c908 <line:521:17, col:26>
|     |                             `-ParenExpr 0x565463a4c8e8 <col:24, col:26> 'int'
|     |                               `-IntegerLiteral 0x565463a4c8c8 <col:25> 'int' 0
|     |-BinaryOperator 0x565463a4cb78 <line:529:3, col:55> '_Bool' '='
|     | |-DeclRefExpr 0x565463a4ca98 <col:3> '_Bool' lvalue Var 0x565463a4aef0 'tmp___7' '_Bool'
|     | `-CallExpr 0x565463a4cb50 <col:13, col:55> '_Bool'
|     |   |-ImplicitCastExpr 0x565463a4cb38 <col:13> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x565463a4cab8 <col:13> '_Bool (unsigned char)' Function 0x565463a3c7e0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x565463a4cb10 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x565463a4cad8 <col:54> 'int' 1
|     |-IfStmt 0x565463a4ea10 <line:530:3, line:544:3>
|     | |-ImplicitCastExpr 0x565463a4cbb8 <line:530:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x565463a4cb98 <col:7> '_Bool' lvalue Var 0x565463a4aef0 'tmp___7' '_Bool'
|     | `-CompoundStmt 0x565463a4e9f0 <col:16, line:544:3>
|     |   |-BinaryOperator 0x565463a4ccb0 <line:531:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x565463a4cbd0 <col:5> '_Bool' lvalue Var 0x565463a4af80 'tmp___8' '_Bool'
|     |   | `-CallExpr 0x565463a4cc88 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x565463a4cc70 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x565463a4cbf0 <col:15> '_Bool (unsigned char)' Function 0x565463a3e3c0 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x565463a4cc48 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x565463a4cc10 <col:56> 'int' 1
|     |   `-IfStmt 0x565463a4e9d8 <line:532:5, line:543:5>
|     |     |-UnaryOperator 0x565463a4cd08 <line:532:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x565463a4ccf0 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a4ccd0 <col:11> '_Bool' lvalue Var 0x565463a4af80 'tmp___8' '_Bool'
|     |     `-CompoundStmt 0x565463a4e9a8 <col:20, line:543:5>
|     |       |-BinaryOperator 0x565463a4e528 <line:533:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x565463a4cd20 <col:7> 'int8_t':'char' lvalue Var 0x565463a4add0 'tmp___5' 'int8_t':'char'
|     |       | `-CallExpr 0x565463a4e500 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x565463a4cdc0 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x565463a4cd40 <col:17> 'int8_t (unsigned char)' Function 0x565463a3eec0 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x565463a4cd98 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x565463a4cd60 <col:57> 'int' 0
|     |       |-IfStmt 0x565463a4e6a0 <line:534:7, line:536:7>
|     |       | |-UnaryOperator 0x565463a4e620 <line:534:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x565463a4e600 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x565463a4e5e0 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x565463a4e598 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x565463a4e580 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x565463a4e548 <col:20> 'int8_t':'char' lvalue Var 0x565463a4add0 'tmp___5' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x565463a4e5c0 <col:31> 'int' 2
|     |       | `-CompoundStmt 0x565463a4e688 <col:35, line:536:7>
|     |       |   `-ReturnStmt 0x565463a4e678 <line:535:9, col:18>
|     |       |     `-ParenExpr 0x565463a4e658 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x565463a4e638 <col:17> 'int' 0
|     |       |-BinaryOperator 0x565463a4e798 <line:537:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x565463a4e6b8 <col:7> '_Bool' lvalue Var 0x565463a4ae60 'tmp___6' '_Bool'
|     |       | `-CallExpr 0x565463a4e770 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x565463a4e758 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x565463a4e6d8 <col:17> '_Bool (unsigned char)' Function 0x565463a3e3c0 'read_side2_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x565463a4e730 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x565463a4e6f8 <col:58> 'int' 0
|     |       `-IfStmt 0x565463a4e990 <line:538:7, line:542:7>
|     |         |-UnaryOperator 0x565463a4e7f0 <line:538:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x565463a4e7d8 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x565463a4e7b8 <col:13> '_Bool' lvalue Var 0x565463a4ae60 'tmp___6' '_Bool'
|     |         `-CompoundStmt 0x565463a4e978 <col:22, line:542:7>
|     |           `-IfStmt 0x565463a4e960 <line:539:9, line:541:9>
|     |             |-UnaryOperator 0x565463a4e8e0 <line:539:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x565463a4e8c0 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x565463a4e8a0 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x565463a4e858 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x565463a4e840 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x565463a4e808 <col:22> 'msg_t':'char' lvalue Var 0x565463a3ba88 'side2_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x565463a4e880 <col:39> 'int' 1
|     |             `-CompoundStmt 0x565463a4e948 <col:43, line:541:9>
|     |               `-ReturnStmt 0x565463a4e938 <line:540:11, col:20>
|     |                 `-ParenExpr 0x565463a4e918 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x565463a4e8f8 <col:19> 'int' 0
|     |-BinaryOperator 0x565463a4eb08 <line:545:3, col:56> '_Bool' '='
|     | |-DeclRefExpr 0x565463a4ea28 <col:3> '_Bool' lvalue Var 0x565463a4b130 'tmp___11' '_Bool'
|     | `-CallExpr 0x565463a4eae0 <col:14, col:56> '_Bool'
|     |   |-ImplicitCastExpr 0x565463a4eac8 <col:14> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x565463a4ea48 <col:14> '_Bool (unsigned char)' Function 0x565463a3c7e0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x565463a4eaa0 <col:40, col:55> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x565463a4ea68 <col:55> 'int' 1
|     |-IfStmt 0x565463a4f278 <line:546:3, line:560:3>
|     | |-UnaryOperator 0x565463a4eb60 <line:546:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x565463a4eb48 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x565463a4eb28 <col:9> '_Bool' lvalue Var 0x565463a4b130 'tmp___11' '_Bool'
|     | `-CompoundStmt 0x565463a4f258 <col:19, line:560:3>
|     |   |-BinaryOperator 0x565463a4ec58 <line:547:5, col:58> '_Bool' '='
|     |   | |-DeclRefExpr 0x565463a4eb78 <col:5> '_Bool' lvalue Var 0x565463a4b1c0 'tmp___12' '_Bool'
|     |   | `-CallExpr 0x565463a4ec30 <col:16, col:58> '_Bool'
|     |   |   |-ImplicitCastExpr 0x565463a4ec18 <col:16> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x565463a4eb98 <col:16> '_Bool (unsigned char)' Function 0x565463a3e3c0 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x565463a4ebf0 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x565463a4ebb8 <col:57> 'int' 1
|     |   `-IfStmt 0x565463a4f240 <line:548:5, line:559:5>
|     |     |-ImplicitCastExpr 0x565463a4ec98 <line:548:9> '_Bool' <LValueToRValue>
|     |     | `-DeclRefExpr 0x565463a4ec78 <col:9> '_Bool' lvalue Var 0x565463a4b1c0 'tmp___12' '_Bool'
|     |     `-CompoundStmt 0x565463a4f210 <col:19, line:559:5>
|     |       |-BinaryOperator 0x565463a4ed90 <line:549:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x565463a4ecb0 <col:7> 'int8_t':'char' lvalue Var 0x565463a4b010 'tmp___9' 'int8_t':'char'
|     |       | `-CallExpr 0x565463a4ed68 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x565463a4ed50 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x565463a4ecd0 <col:17> 'int8_t (unsigned char)' Function 0x565463a3eec0 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x565463a4ed28 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x565463a4ecf0 <col:57> 'int' 0
|     |       |-IfStmt 0x565463a4ef08 <line:550:7, line:552:7>
|     |       | |-UnaryOperator 0x565463a4ee88 <line:550:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x565463a4ee68 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x565463a4ee48 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x565463a4ee00 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x565463a4ede8 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x565463a4edb0 <col:20> 'int8_t':'char' lvalue Var 0x565463a4b010 'tmp___9' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x565463a4ee28 <col:31> 'int' 1
|     |       | `-CompoundStmt 0x565463a4eef0 <col:35, line:552:7>
|     |       |   `-ReturnStmt 0x565463a4eee0 <line:551:9, col:18>
|     |       |     `-ParenExpr 0x565463a4eec0 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x565463a4eea0 <col:17> 'int' 0
|     |       |-BinaryOperator 0x565463a4f000 <line:553:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x565463a4ef20 <col:7> '_Bool' lvalue Var 0x565463a4b0a0 'tmp___10' '_Bool'
|     |       | `-CallExpr 0x565463a4efd8 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x565463a4efc0 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x565463a4ef40 <col:18> '_Bool (unsigned char)' Function 0x565463a3c7e0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x565463a4ef98 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x565463a4ef60 <col:59> 'int' 0
|     |       `-IfStmt 0x565463a4f1f8 <line:554:7, line:558:7>
|     |         |-UnaryOperator 0x565463a4f058 <line:554:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x565463a4f040 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x565463a4f020 <col:13> '_Bool' lvalue Var 0x565463a4b0a0 'tmp___10' '_Bool'
|     |         `-CompoundStmt 0x565463a4f1e0 <col:23, line:558:7>
|     |           `-IfStmt 0x565463a4f1c8 <line:555:9, line:557:9>
|     |             |-UnaryOperator 0x565463a4f148 <line:555:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x565463a4f128 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x565463a4f108 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x565463a4f0c0 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x565463a4f0a8 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x565463a4f070 <col:22> 'msg_t':'char' lvalue Var 0x565463a3ba10 'side1_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x565463a4f0e8 <col:39> 'int' 1
|     |             `-CompoundStmt 0x565463a4f1b0 <col:43, line:557:9>
|     |               `-ReturnStmt 0x565463a4f1a0 <line:556:11, col:20>
|     |                 `-ParenExpr 0x565463a4f180 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x565463a4f160 <col:19> 'int' 0
|     |-BinaryOperator 0x565463a4f370 <line:561:3, col:55> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x565463a4f290 <col:3> 'int8_t':'char' lvalue Var 0x565463a4b640 'tmp___20' 'int8_t':'char'
|     | `-CallExpr 0x565463a4f348 <col:14, col:55> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x565463a4f330 <col:14> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x565463a4f2b0 <col:14> 'int8_t (unsigned char)' Function 0x565463a3eec0 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x565463a4f308 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x565463a4f2d0 <col:54> 'int' 2
|     |-IfStmt 0x565463a50088 <line:562:3, line:579:3>
|     | |-BinaryOperator 0x565463a4f440 <line:562:7, col:25> 'int' '>'
|     | | |-CStyleCastExpr 0x565463a4f3e0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x565463a4f3c8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x565463a4f390 <col:13> 'int8_t':'char' lvalue Var 0x565463a4b640 'tmp___20' 'int8_t':'char'
|     | | `-UnaryOperator 0x565463a4f428 <col:24, col:25> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x565463a4f408 <col:25> 'int' 2
|     | `-CompoundStmt 0x565463a50068 <col:28, line:579:3>
|     |   |-BinaryOperator 0x565463a4f550 <line:563:5, col:62> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x565463a4f460 <col:5> 'msg_t':'char' lvalue Var 0x565463a4b250 'tmp___13' 'msg_t':'char'
|     |   | `-CallExpr 0x565463a4f528 <col:16, col:62> 'msg_t':'char'
|     |   |   |-ImplicitCastExpr 0x565463a4f510 <col:16> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x565463a4f480 <col:16> 'msg_t (unsigned char)' Function 0x565463a3fd80 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   |   `-CStyleCastExpr 0x565463a4f4d8 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x565463a4f4a0 <col:61> 'int' 2
|     |   `-IfStmt 0x565463a50050 <line:564:5, line:578:5>
|     |     |-UnaryOperator 0x565463a4f5a8 <line:564:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x565463a4f590 <col:11> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x565463a4f570 <col:11> 'msg_t':'char' lvalue Var 0x565463a4b250 'tmp___13' 'msg_t':'char'
|     |     `-CompoundStmt 0x565463a50028 <col:21, line:578:5>
|     |       |-BinaryOperator 0x565463a4f6a0 <line:565:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x565463a4f5c0 <col:7> '_Bool' lvalue Var 0x565463a4b2e0 'tmp___14' '_Bool'
|     |       | `-CallExpr 0x565463a4f678 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x565463a4f660 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x565463a4f5e0 <col:18> '_Bool (unsigned char)' Function 0x565463a3c7e0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x565463a4f638 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x565463a4f600 <col:59> 'int' 2
|     |       |-BinaryOperator 0x565463a4f7a0 <line:566:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x565463a4f6c0 <col:7> '_Bool' lvalue Var 0x565463a4b370 'tmp___15' '_Bool'
|     |       | `-CallExpr 0x565463a4f778 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x565463a4f760 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x565463a4f6e0 <col:18> '_Bool (unsigned char)' Function 0x565463a3c7e0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x565463a4f738 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x565463a4f700 <col:59> 'int' 1
|     |       `-IfStmt 0x565463a50010 <line:567:7, line:577:7>
|     |         |-BinaryOperator 0x565463a4f8b0 <line:567:11, col:35> 'int' '=='
|     |         | |-CStyleCastExpr 0x565463a4f810 <col:11, col:17> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x565463a4f7f8 <col:17> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x565463a4f7c0 <col:17> '_Bool' lvalue Var 0x565463a4b2e0 'tmp___14' '_Bool'
|     |         | `-CStyleCastExpr 0x565463a4f888 <col:29, col:35> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x565463a4f870 <col:35> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x565463a4f838 <col:35> '_Bool' lvalue Var 0x565463a4b370 'tmp___15' '_Bool'
|     |         `-CompoundStmt 0x565463a4ffe8 <col:45, line:577:7>
|     |           |-BinaryOperator 0x565463a4f9b0 <line:568:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x565463a4f8d0 <col:9> '_Bool' lvalue Var 0x565463a4b400 'tmp___16' '_Bool'
|     |           | `-CallExpr 0x565463a4f988 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x565463a4f970 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x565463a4f8f0 <col:20> '_Bool (unsigned char)' Function 0x565463a3e3c0 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x565463a4f948 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x565463a4f910 <col:61> 'int' 2
|     |           |-BinaryOperator 0x565463a4fab0 <line:569:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x565463a4f9d0 <col:9> '_Bool' lvalue Var 0x565463a4b490 'tmp___17' '_Bool'
|     |           | `-CallExpr 0x565463a4fa88 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x565463a4fa70 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x565463a4f9f0 <col:20> '_Bool (unsigned char)' Function 0x565463a3e3c0 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x565463a4fa48 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x565463a4fa10 <col:61> 'int' 1
|     |           `-IfStmt 0x565463a4ffd0 <line:570:9, line:576:9>
|     |             |-BinaryOperator 0x565463a4fbc0 <line:570:13, col:37> 'int' '=='
|     |             | |-CStyleCastExpr 0x565463a4fb20 <col:13, col:19> 'int' <IntegralCast>
|     |             | | `-ImplicitCastExpr 0x565463a4fb08 <col:19> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             | |   `-DeclRefExpr 0x565463a4fad0 <col:19> '_Bool' lvalue Var 0x565463a4b400 'tmp___16' '_Bool'
|     |             | `-CStyleCastExpr 0x565463a4fb98 <col:31, col:37> 'int' <IntegralCast>
|     |             |   `-ImplicitCastExpr 0x565463a4fb80 <col:37> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             |     `-DeclRefExpr 0x565463a4fb48 <col:37> '_Bool' lvalue Var 0x565463a4b490 'tmp___17' '_Bool'
|     |             `-CompoundStmt 0x565463a4ffa8 <col:47, line:576:9>
|     |               |-BinaryOperator 0x565463a4fcc0 <line:571:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x565463a4fbe0 <col:11> 'int8_t':'char' lvalue Var 0x565463a4b520 'tmp___18' 'int8_t':'char'
|     |               | `-CallExpr 0x565463a4fc98 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x565463a4fc80 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x565463a4fc00 <col:22> 'int8_t (unsigned char)' Function 0x565463a3eec0 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x565463a4fc58 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x565463a4fc20 <col:62> 'int' 1
|     |               |-BinaryOperator 0x565463a4fdc0 <line:572:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x565463a4fce0 <col:11> 'int8_t':'char' lvalue Var 0x565463a4b5b0 'tmp___19' 'int8_t':'char'
|     |               | `-CallExpr 0x565463a4fd98 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x565463a4fd80 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x565463a4fd00 <col:22> 'int8_t (unsigned char)' Function 0x565463a3eec0 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x565463a4fd58 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x565463a4fd20 <col:62> 'int' 0
|     |               `-IfStmt 0x565463a4ff90 <line:573:11, line:575:11>
|     |                 |-UnaryOperator 0x565463a4ff10 <line:573:15, col:50> 'int' prefix '!' cannot overflow
|     |                 | `-ParenExpr 0x565463a4fef0 <col:17, col:50> 'int'
|     |                 |   `-BinaryOperator 0x565463a4fed0 <col:18, col:42> 'int' '=='
|     |                 |     |-CStyleCastExpr 0x565463a4fe30 <col:18, col:24> 'int' <IntegralCast>
|     |                 |     | `-ImplicitCastExpr 0x565463a4fe18 <col:24> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |     |   `-DeclRefExpr 0x565463a4fde0 <col:24> 'int8_t':'char' lvalue Var 0x565463a4b520 'tmp___18' 'int8_t':'char'
|     |                 |     `-CStyleCastExpr 0x565463a4fea8 <col:36, col:42> 'int' <IntegralCast>
|     |                 |       `-ImplicitCastExpr 0x565463a4fe90 <col:42> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |         `-DeclRefExpr 0x565463a4fe58 <col:42> 'int8_t':'char' lvalue Var 0x565463a4b5b0 'tmp___19' 'int8_t':'char'
|     |                 `-CompoundStmt 0x565463a4ff78 <col:53, line:575:11>
|     |                   `-ReturnStmt 0x565463a4ff68 <line:574:13, col:22>
|     |                     `-ParenExpr 0x565463a4ff48 <col:20, col:22> 'int'
|     |                       `-IntegerLiteral 0x565463a4ff28 <col:21> 'int' 0
|     `-ReturnStmt 0x565463a500e0 <line:580:3, col:12>
|       `-ParenExpr 0x565463a500c0 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x565463a500a0 <col:11> 'int' 1
|-FunctionDecl 0x565463a502c0 <line:583:1, line:654:1> line:583:5 main 'int (void)'
| `-CompoundStmt 0x565463a528c0 <line:584:1, line:654:1>
|   |-DeclStmt 0x565463a50410 <line:585:3, col:10>
|   | `-VarDecl 0x565463a503a8 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x565463a504a8 <line:586:3, col:10>
|   | `-VarDecl 0x565463a50440 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x565463a52530 <line:588:3, line:652:1>
|   | |-BinaryOperator 0x565463a50520 <line:589:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x565463a504c0 <col:3> 'int' lvalue Var 0x565463a503a8 'c1' 'int'
|   | | `-IntegerLiteral 0x565463a504e0 <col:8> 'int' 0
|   | |-BinaryOperator 0x565463a505b8 <line:590:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x565463a50540 <col:3> '_Bool' lvalue Var 0x565463a3b920 'side1Failed' '_Bool'
|   | | `-CallExpr 0x565463a50598 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x565463a50580 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50560 <col:17> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x565463a50650 <line:591:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x565463a505d8 <col:3> '_Bool' lvalue Var 0x565463a3b998 'side2Failed' '_Bool'
|   | | `-CallExpr 0x565463a50630 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x565463a50618 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a505f8 <col:17> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x565463a506e8 <line:592:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x565463a50670 <col:3> 'msg_t':'char' lvalue Var 0x565463a3ba10 'side1_written' 'msg_t':'char'
|   | | `-CallExpr 0x565463a506c8 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x565463a506b0 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50690 <col:19> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x565463a50780 <line:593:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x565463a50708 <col:3> 'msg_t':'char' lvalue Var 0x565463a3ba88 'side2_written' 'msg_t':'char'
|   | | `-CallExpr 0x565463a50760 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x565463a50748 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50728 <col:19> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x565463a50818 <line:594:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x565463a507a0 <col:3> '_Bool' lvalue Var 0x565463a3be18 'side1Failed_History_0' '_Bool'
|   | | `-CallExpr 0x565463a507f8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x565463a507e0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a507c0 <col:27> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x565463a508b0 <line:595:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x565463a50838 <col:3> '_Bool' lvalue Var 0x565463a3bee0 'side1Failed_History_1' '_Bool'
|   | | `-CallExpr 0x565463a50890 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x565463a50878 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50858 <col:27> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x565463a50948 <line:596:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x565463a508d0 <col:3> '_Bool' lvalue Var 0x565463a3bf58 'side1Failed_History_2' '_Bool'
|   | | `-CallExpr 0x565463a50928 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x565463a50910 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a508f0 <col:27> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x565463a509e0 <line:597:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x565463a50968 <col:3> '_Bool' lvalue Var 0x565463a3bfd0 'side2Failed_History_0' '_Bool'
|   | | `-CallExpr 0x565463a509c0 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x565463a509a8 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50988 <col:27> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x565463a50a78 <line:598:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x565463a50a00 <col:3> '_Bool' lvalue Var 0x565463a3c048 'side2Failed_History_1' '_Bool'
|   | | `-CallExpr 0x565463a50a58 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x565463a50a40 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50a20 <col:27> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x565463a50b10 <line:599:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x565463a50a98 <col:3> '_Bool' lvalue Var 0x565463a3c0c0 'side2Failed_History_2' '_Bool'
|   | | `-CallExpr 0x565463a50af0 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x565463a50ad8 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50ab8 <col:27> '_Bool (void)' Function 0x565463a3b780 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x565463a50ba8 <line:600:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a50b30 <col:3> 'int8_t':'char' lvalue Var 0x565463a3c138 'active_side_History_0' 'int8_t':'char'
|   | | `-CallExpr 0x565463a50b88 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x565463a50b70 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50b50 <col:27> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x565463a50c40 <line:601:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a50bc8 <col:3> 'int8_t':'char' lvalue Var 0x565463a3c1b0 'active_side_History_1' 'int8_t':'char'
|   | | `-CallExpr 0x565463a50c20 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x565463a50c08 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50be8 <col:27> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x565463a50cd8 <line:602:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a50c60 <col:3> 'int8_t':'char' lvalue Var 0x565463a3c228 'active_side_History_2' 'int8_t':'char'
|   | | `-CallExpr 0x565463a50cb8 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x565463a50ca0 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50c80 <col:27> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x565463a50d70 <line:603:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x565463a50cf8 <col:3> 'msg_t':'char' lvalue Var 0x565463a3c2a0 'manual_selection_History_0' 'msg_t':'char'
|   | | `-CallExpr 0x565463a50d50 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x565463a50d38 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50d18 <col:32> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x565463a50e08 <line:604:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x565463a50d90 <col:3> 'msg_t':'char' lvalue Var 0x565463a3c318 'manual_selection_History_1' 'msg_t':'char'
|   | | `-CallExpr 0x565463a50de8 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x565463a50dd0 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50db0 <col:32> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x565463a50ea0 <line:605:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x565463a50e28 <col:3> 'msg_t':'char' lvalue Var 0x565463a3c390 'manual_selection_History_2' 'msg_t':'char'
|   | | `-CallExpr 0x565463a50e80 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x565463a50e68 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50e48 <col:32> 'char (void)' Function 0x565463a3b870 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x565463a50f68 <line:606:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x565463a50ec0 <col:3> 'int' lvalue Var 0x565463a50440 'i2' 'int'
|   | | `-CallExpr 0x565463a50f48 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x565463a50f30 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x565463a50ee0 <col:8> 'int (void)' Function 0x565463a40518 'init' 'int (void)'
|   | |-CallExpr 0x565463a50fe0 <line:607:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x565463a50fc8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x565463a50f88 <col:3> 'void (int)' Function 0x565463a3bd60 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x565463a51008 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a50fa8 <col:21> 'int' lvalue Var 0x565463a50440 'i2' 'int'
|   | |-BinaryOperator 0x565463a51078 <line:608:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51020 <col:3> 'int8_t':'char' lvalue Var 0x565463a13f10 'cs1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51060 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51040 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a510f0 <line:609:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51098 <col:3> 'int8_t':'char' lvalue Var 0x565463a13f88 'cs1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a510d8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a510b8 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51168 <line:610:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51110 <col:3> 'int8_t':'char' lvalue Var 0x565463a14078 'cs2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51150 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51130 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a511e0 <line:611:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51188 <col:3> 'int8_t':'char' lvalue Var 0x565463a140f0 'cs2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a511c8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a511a8 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51258 <line:612:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51200 <col:3> 'int8_t':'char' lvalue Var 0x565463a3af48 's1s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51240 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51220 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a512d0 <line:613:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51278 <col:3> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a512b8 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51298 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51348 <line:614:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a512f0 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b0b0 's1s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51330 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51310 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a513c0 <line:615:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51368 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a513a8 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51388 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51438 <line:616:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a513e0 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b218 's2s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51420 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51400 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a514b0 <line:617:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51458 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51498 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51478 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51688 <line:618:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a514d0 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b380 's2s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51670 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a514f0 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51700 <line:619:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a516a8 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a516e8 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a516c8 <col:14> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51778 <line:620:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51720 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b4e8 's1p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51760 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51740 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a517f0 <line:621:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51798 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a517d8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a517b8 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51868 <line:622:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51810 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b650 's2p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a51850 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a51830 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a518e0 <line:623:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x565463a51888 <col:3> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x565463a518c8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x565463a518a8 <col:13> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x565463a51940 <line:624:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x565463a51900 <col:3> 'int' lvalue Var 0x565463a50440 'i2' 'int'
|   | | `-IntegerLiteral 0x565463a51920 <col:8> 'int' 0
|   | `-WhileStmt 0x565463a52518 <line:625:3, line:651:3>
|   |   |-BinaryOperator 0x565463a519b8 <line:625:10, col:15> 'int' '<'
|   |   | |-ImplicitCastExpr 0x565463a519a0 <col:10> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x565463a51960 <col:10> 'int' lvalue Var 0x565463a50440 'i2' 'int'
|   |   | `-IntegerLiteral 0x565463a51980 <col:15> 'int' 10
|   |   `-CompoundStmt 0x565463a52500 <col:19, line:651:3>
|   |     `-CompoundStmt 0x565463a52438 <line:626:5, line:650:5>
|   |       |-CallExpr 0x565463a51a10 <line:627:5, col:35> 'void'
|   |       | `-ImplicitCastExpr 0x565463a519f8 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x565463a519d8 <col:5> 'void (void)' Function 0x565463a41b80 'Console_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x565463a51a68 <line:628:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x565463a51a50 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x565463a51a30 <col:5> 'void (void)' Function 0x565463a426d0 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x565463a51ac0 <line:629:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x565463a51aa8 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x565463a51a88 <col:5> 'void (void)' Function 0x565463a45510 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x565463a51b18 <line:630:5, col:42> 'void'
|   |       | `-ImplicitCastExpr 0x565463a51b00 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x565463a51ae0 <col:5> 'void (void)' Function 0x565463a47d60 'Pendulum_prism_task_each_pals_period' 'void (void)'
|   |       |-BinaryOperator 0x565463a51b90 <line:631:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51b38 <col:5> 'int8_t':'char' lvalue Var 0x565463a13f10 'cs1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51b78 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51b58 <col:15> 'int8_t':'char' lvalue Var 0x565463a13f88 'cs1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x565463a51c08 <line:632:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51bb0 <col:5> 'int8_t':'char' lvalue Var 0x565463a13f88 'cs1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51bf0 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51bd0 <col:15> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x565463a51c80 <line:633:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51c28 <col:5> 'int8_t':'char' lvalue Var 0x565463a14078 'cs2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51c68 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51c48 <col:15> 'int8_t':'char' lvalue Var 0x565463a140f0 'cs2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x565463a51cf8 <line:634:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51ca0 <col:5> 'int8_t':'char' lvalue Var 0x565463a140f0 'cs2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51ce0 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51cc0 <col:15> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x565463a51d70 <line:635:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51d18 <col:5> 'int8_t':'char' lvalue Var 0x565463a3af48 's1s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51d58 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51d38 <col:16> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x565463a51de8 <line:636:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51d90 <col:5> 'int8_t':'char' lvalue Var 0x565463a3afc0 's1s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51dd0 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51db0 <col:16> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x565463a51e60 <line:637:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51e08 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b0b0 's1s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51e48 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51e28 <col:16> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x565463a51ed8 <line:638:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51e80 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b128 's1s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51ec0 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51ea0 <col:16> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x565463a51f50 <line:639:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51ef8 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b218 's2s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51f38 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51f18 <col:16> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x565463a51fc8 <line:640:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51f70 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b290 's2s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a51fb0 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a51f90 <col:16> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x565463a52040 <line:641:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a51fe8 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b380 's2s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a52028 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a52008 <col:16> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x565463a520b8 <line:642:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a52060 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b3f8 's2s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a520a0 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a52080 <col:16> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x565463a52130 <line:643:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a520d8 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b4e8 's1p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a52118 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a520f8 <col:15> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x565463a521a8 <line:644:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a52150 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b560 's1p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a52190 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a52170 <col:15> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x565463a52220 <line:645:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a521c8 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b650 's2p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a52208 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a521e8 <col:15> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x565463a52298 <line:646:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x565463a52240 <col:5> 'int8_t':'char' lvalue Var 0x565463a3b6c8 's2p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x565463a52280 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x565463a52260 <col:15> 'msg_t':'char' lvalue Var 0x565463a13db0 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x565463a52330 <line:647:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x565463a522b8 <col:5> 'int' lvalue Var 0x565463a503a8 'c1' 'int'
|   |       | `-CallExpr 0x565463a52310 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x565463a522f8 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x565463a522d8 <col:10> 'int (void)' Function 0x565463a4a628 'check' 'int (void)'
|   |       |-CallExpr 0x565463a523a8 <line:648:5, col:14> 'void'
|   |       | |-ImplicitCastExpr 0x565463a52390 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x565463a52350 <col:5> 'void (_Bool)' Function 0x565463a3bbd0 'assert' 'void (_Bool)'
|   |       | `-ImplicitCastExpr 0x565463a523e8 <col:12> '_Bool' <IntegralToBoolean>
|   |       |   `-ImplicitCastExpr 0x565463a523d0 <col:12> 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x565463a52370 <col:12> 'int' lvalue Var 0x565463a503a8 'c1' 'int'
|   |       `-UnaryOperator 0x565463a52420 <line:649:5, col:8> 'int' postfix '++'
|   |         `-DeclRefExpr 0x565463a52400 <col:5> 'int' lvalue Var 0x565463a50440 'i2' 'int'
|   `-ReturnStmt 0x565463a528b0 <line:653:1, col:8>
|     `-IntegerLiteral 0x565463a52890 <col:8> 'int' 0
`-FunctionDecl 0x565463a52990 prev 0x565463a3bbd0 <line:655:1, line:666:1> line:655:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x565463a52900 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x565463a52be0 <line:656:1, line:666:1>
    `-CompoundStmt 0x565463a52bc8 <line:659:3, line:665:1>
      `-IfStmt 0x565463a52bb0 <line:660:3, line:664:3>
        |-UnaryOperator 0x565463a52a70 <line:660:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x565463a52a58 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x565463a52a38 <col:9> '_Bool' lvalue ParmVar 0x565463a52900 'arg' '_Bool'
        `-CompoundStmt 0x565463a52b98 <col:14, line:664:3>
          `-CompoundStmt 0x565463a52b80 <line:661:5, line:663:5>
            `-LabelStmt 0x565463a52b68 <line:662:5, col:29> 'ERROR'
              `-CallExpr 0x565463a52af8 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x565463a52ae0 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x565463a52a88 <col:12> 'void () __attribute__((noreturn))' Function 0x565463a132a0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
