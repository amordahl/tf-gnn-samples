TranslationUnitDecl 0x55a307c9b538 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55a307c9bdf8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55a307c9bad0 '__int128'
|-TypedefDecl 0x55a307c9be68 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55a307c9baf0 'unsigned __int128'
|-TypedefDecl 0x55a307c9c170 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55a307c9bf40 'struct __NSConstantString_tag'
|   `-Record 0x55a307c9bec0 '__NSConstantString_tag'
|-TypedefDecl 0x55a307c9c218 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55a307c9c1d0 'char *'
|   `-BuiltinType 0x55a307c9b5d0 'char'
|-TypedefDecl 0x55a307cdb470 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55a307c9c4b0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55a307c9c2f0 'struct __va_list_tag'
|     `-Record 0x55a307c9c270 '__va_list_tag'
|-FunctionDecl 0x55a307cdb738 <ldv-memsafety/ArraysOfVariableLength2_false-valid-deref-write.c:11:1, line:17:1> line:11:5 used bar 'int (int *, int)'
| |-ParmVarDecl 0x55a307cdb598 <col:9, col:15> col:13 used b 'int *':'int *'
| |-ParmVarDecl 0x55a307cdb618 <col:18, col:22> col:22 used size 'int'
| `-CompoundStmt 0x55a307cdbc38 <col:28, line:17:1>
|   |-DeclStmt 0x55a307cdb968 <line:12:5, col:19>
|   | |-VarDecl 0x55a307cdb848 <col:5, col:15> col:9 used res 'int' cinit
|   | | `-IntegerLiteral 0x55a307cdb8b0 <col:15> 'int' 0
|   | `-VarDecl 0x55a307cdb8e8 <col:5, col:18> col:18 used i 'int'
|   |-ForStmt 0x55a307cdbbb8 <line:13:5, line:15:5>
|   | |-BinaryOperator 0x55a307cdb9c0 <line:13:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x55a307cdb980 <col:10> 'int' lvalue Var 0x55a307cdb8e8 'i' 'int'
|   | | `-IntegerLiteral 0x55a307cdb9a0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55a307cdba50 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x55a307cdba20 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55a307cdb9e0 <col:17> 'int' lvalue Var 0x55a307cdb8e8 'i' 'int'
|   | | `-ImplicitCastExpr 0x55a307cdba38 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55a307cdba00 <col:21> 'int' lvalue ParmVar 0x55a307cdb618 'size' 'int'
|   | |-UnaryOperator 0x55a307cdba90 <col:27, col:28> 'int' postfix '++'
|   | | `-DeclRefExpr 0x55a307cdba70 <col:27> 'int' lvalue Var 0x55a307cdb8e8 'i' 'int'
|   | `-CompoundStmt 0x55a307cdbba0 <col:32, line:15:5>
|   |   `-CompoundAssignOperator 0x55a307cdbb70 <line:14:6, col:16> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-DeclRefExpr 0x55a307cdbaa8 <col:6> 'int' lvalue Var 0x55a307cdb848 'res' 'int'
|   |     `-ImplicitCastExpr 0x55a307cdbb58 <col:13, col:16> 'int' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x55a307cdbb38 <col:13, col:16> 'int' lvalue
|   |         |-ImplicitCastExpr 0x55a307cdbb08 <col:13> 'int *':'int *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x55a307cdbac8 <col:13> 'int *':'int *' lvalue ParmVar 0x55a307cdb598 'b' 'int *':'int *'
|   |         `-ImplicitCastExpr 0x55a307cdbb20 <col:15> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x55a307cdbae8 <col:15> 'int' lvalue Var 0x55a307cdb8e8 'i' 'int'
|   `-ReturnStmt 0x55a307cdbc28 <line:16:2, col:9>
|     `-ImplicitCastExpr 0x55a307cdbc10 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a307cdbbf0 <col:9> 'int' lvalue Var 0x55a307cdb848 'res' 'int'
|-FunctionDecl 0x55a307cdbef8 <line:20:1, line:29:1> line:20:5 used foo 'int (int, int *, int)'
| |-ParmVarDecl 0x55a307cdbca8 <col:9, col:13> col:13 used n 'int'
| |-ParmVarDecl 0x55a307cdbd38 <col:16, col:22> col:20 used b 'int *':'int *'
| |-ParmVarDecl 0x55a307cdbdb8 <col:25, col:29> col:29 used size 'int'
| `-CompoundStmt 0x55a307cfe798 <col:35, line:29:1>
|   |-DeclStmt 0x55a307cdc168 <line:21:5, col:16>
|   | |-VarDecl 0x55a307cdc068 <col:5, col:12> col:9 used a 'int [n]'
|   | `-VarDecl 0x55a307cdc0e8 <col:5, col:15> col:15 used i 'int'
|   |-ForStmt 0x55a307cdc418 <line:22:5, line:24:5>
|   | |-BinaryOperator 0x55a307cdc1c0 <line:22:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x55a307cdc180 <col:10> 'int' lvalue Var 0x55a307cdc0e8 'i' 'int'
|   | | `-IntegerLiteral 0x55a307cdc1a0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55a307cdc250 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x55a307cdc220 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55a307cdc1e0 <col:17> 'int' lvalue Var 0x55a307cdc0e8 'i' 'int'
|   | | `-ImplicitCastExpr 0x55a307cdc238 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55a307cdc200 <col:21> 'int' lvalue ParmVar 0x55a307cdbdb8 'size' 'int'
|   | |-UnaryOperator 0x55a307cdc290 <col:27, col:28> 'int' postfix '++'
|   | | `-DeclRefExpr 0x55a307cdc270 <col:27> 'int' lvalue Var 0x55a307cdc0e8 'i' 'int'
|   | `-CompoundStmt 0x55a307cdc400 <col:32, line:24:5>
|   |   `-BinaryOperator 0x55a307cdc3e0 <line:23:6, col:16> 'int' '='
|   |     |-ArraySubscriptExpr 0x55a307cdc318 <col:6, col:9> 'int' lvalue
|   |     | |-ImplicitCastExpr 0x55a307cdc2e8 <col:6> 'int *' <ArrayToPointerDecay>
|   |     | | `-DeclRefExpr 0x55a307cdc2a8 <col:6> 'int [n]' lvalue Var 0x55a307cdc068 'a' 'int [n]'
|   |     | `-ImplicitCastExpr 0x55a307cdc300 <col:8> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a307cdc2c8 <col:8> 'int' lvalue Var 0x55a307cdc0e8 'i' 'int'
|   |     `-ImplicitCastExpr 0x55a307cdc3c8 <col:13, col:16> 'int' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x55a307cdc3a8 <col:13, col:16> 'int' lvalue
|   |         |-ImplicitCastExpr 0x55a307cdc378 <col:13> 'int *':'int *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x55a307cdc338 <col:13> 'int *':'int *' lvalue ParmVar 0x55a307cdbd38 'b' 'int *':'int *'
|   |         `-ImplicitCastExpr 0x55a307cdc390 <col:15> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x55a307cdc358 <col:15> 'int' lvalue Var 0x55a307cdc0e8 'i' 'int'
|   |-IfStmt 0x55a307cfe738 <line:25:5, line:27:5>
|   | |-CallExpr 0x55a307cfe678 <line:25:9, col:20> 'int'
|   | | |-ImplicitCastExpr 0x55a307cfe660 <col:9> 'int (*)(int *, int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55a307cdc450 <col:9> 'int (int *, int)' Function 0x55a307cdb738 'bar' 'int (int *, int)'
|   | | |-ImplicitCastExpr 0x55a307cfe6a8 <col:13> 'int *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x55a307cfe5c0 <col:13> 'int [n]' lvalue Var 0x55a307cdc068 'a' 'int [n]'
|   | | `-ImplicitCastExpr 0x55a307cfe6c0 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55a307cfe5e0 <col:16> 'int' lvalue ParmVar 0x55a307cdbdb8 'size' 'int'
|   | `-CompoundStmt 0x55a307cfe720 <col:23, line:27:5>
|   |   `-ReturnStmt 0x55a307cfe710 <line:26:6, col:13>
|   |     `-ImplicitCastExpr 0x55a307cfe6f8 <col:13> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x55a307cfe6d8 <col:13> 'int' lvalue ParmVar 0x55a307cdbdb8 'size' 'int'
|   `-ReturnStmt 0x55a307cfe788 <line:28:2, col:9>
|     `-ImplicitCastExpr 0x55a307cfe770 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a307cfe750 <col:9> 'int' lvalue Var 0x55a307cdc0e8 'i' 'int'
`-FunctionDecl 0x55a307cfe858 <line:31:1, line:42:1> line:31:5 main 'int ()'
  `-CompoundStmt 0x55a307cff218 <col:12, line:42:1>
    |-DeclStmt 0x55a307cfea98 <line:32:2, col:15>
    | |-VarDecl 0x55a307cfe910 <col:2, col:6> col:6 used i 'int'
    | `-VarDecl 0x55a307cfea18 <col:2, col:14> col:9 used b 'int [100]'
    |-ForStmt 0x55a307cfee48 <line:33:2, line:35:2>
    | |-BinaryOperator 0x55a307cfeaf0 <line:33:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x55a307cfeab0 <col:7> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    | | `-IntegerLiteral 0x55a307cfead0 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55a307cfeb68 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x55a307cfeb50 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55a307cfeb10 <col:14> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    | | `-IntegerLiteral 0x55a307cfeb30 <col:18> 'int' 100
    | |-UnaryOperator 0x55a307cfeba8 <col:23, col:24> 'int' postfix '++'
    | | `-DeclRefExpr 0x55a307cfeb88 <col:23> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    | `-CompoundStmt 0x55a307cfee30 <col:28, line:35:2>
    |   `-BinaryOperator 0x55a307cfee10 <line:34:3, col:25> 'int' '='
    |     |-ArraySubscriptExpr 0x55a307cfec30 <col:3, col:6> 'int' lvalue
    |     | |-ImplicitCastExpr 0x55a307cfec00 <col:3> 'int *' <ArrayToPointerDecay>
    |     | | `-DeclRefExpr 0x55a307cfebc0 <col:3> 'int [100]' lvalue Var 0x55a307cfea18 'b' 'int [100]'
    |     | `-ImplicitCastExpr 0x55a307cfec18 <col:5> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a307cfebe0 <col:5> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    |     `-CallExpr 0x55a307cfeda8 <col:10, col:25> 'int'
    |       |-ImplicitCastExpr 0x55a307cfed90 <col:10> 'int (*)(int, int *, int)' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x55a307cfec50 <col:10> 'int (int, int *, int)' Function 0x55a307cdbef8 'foo' 'int (int, int *, int)'
    |       |-ImplicitCastExpr 0x55a307cfede0 <col:14> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a307cfec70 <col:14> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    |       |-ImplicitCastExpr 0x55a307cfedf8 <col:17> 'int *' <ArrayToPointerDecay>
    |       | `-DeclRefExpr 0x55a307cfec90 <col:17> 'int [100]' lvalue Var 0x55a307cfea18 'b' 'int [100]'
    |       `-BinaryOperator 0x55a307cfed08 <col:20, col:24> 'int' '+'
    |         |-ImplicitCastExpr 0x55a307cfecf0 <col:20> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x55a307cfecb0 <col:20> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    |         `-IntegerLiteral 0x55a307cfecd0 <col:24> 'int' 1
    |-ForStmt 0x55a307cff1b0 <line:36:2, line:40:2>
    | |-BinaryOperator 0x55a307cfeec0 <line:36:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x55a307cfee80 <col:7> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    | | `-IntegerLiteral 0x55a307cfeea0 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55a307cfef38 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x55a307cfef20 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55a307cfeee0 <col:14> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    | | `-IntegerLiteral 0x55a307cfef00 <col:18> 'int' 100
    | |-ImplicitCastExpr 0x55a307cfef78 <col:23> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x55a307cfef58 <col:23> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    | `-CompoundStmt 0x55a307cff198 <col:26, line:40:2>
    |   `-IfStmt 0x55a307cff180 <line:37:3, line:39:3>
    |     |-BinaryOperator 0x55a307cff0b0 <line:37:7, col:19> 'int' '!='
    |     | |-ImplicitCastExpr 0x55a307cff098 <col:7, col:10> 'int' <LValueToRValue>
    |     | | `-ArraySubscriptExpr 0x55a307cff000 <col:7, col:10> 'int' lvalue
    |     | |   |-ImplicitCastExpr 0x55a307cfefd0 <col:7> 'int *' <ArrayToPointerDecay>
    |     | |   | `-DeclRefExpr 0x55a307cfef90 <col:7> 'int [100]' lvalue Var 0x55a307cfea18 'b' 'int [100]'
    |     | |   `-ImplicitCastExpr 0x55a307cfefe8 <col:9> 'int' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55a307cfefb0 <col:9> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    |     | `-BinaryOperator 0x55a307cff078 <col:15, col:19> 'int' '+'
    |     |   |-ImplicitCastExpr 0x55a307cff060 <col:15> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x55a307cff020 <col:15> 'int' lvalue Var 0x55a307cfe910 'i' 'int'
    |     |   `-IntegerLiteral 0x55a307cff040 <col:19> 'int' 1
    |     `-CompoundStmt 0x55a307cff168 <col:22, line:39:3>
    |       `-LabelStmt 0x55a307cff150 <line:38:4, col:18> 'ERROR'
    |         `-ReturnStmt 0x55a307cff0f0 <col:11, col:18>
    |           `-IntegerLiteral 0x55a307cff0d0 <col:18> 'int' 1
    `-ReturnStmt 0x55a307cff208 <line:41:2, col:9>
      `-IntegerLiteral 0x55a307cff1e8 <col:9> 'int' 0
