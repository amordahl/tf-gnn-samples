TranslationUnitDecl 0x562dadab9698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x562dadab9f58 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x562dadab9c30 '__int128'
|-TypedefDecl 0x562dadab9fc8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x562dadab9c50 'unsigned __int128'
|-TypedefDecl 0x562dadaba2d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x562dadaba0a0 'struct __NSConstantString_tag'
|   `-Record 0x562dadaba020 '__NSConstantString_tag'
|-TypedefDecl 0x562dadaba378 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x562dadaba330 'char *'
|   `-BuiltinType 0x562dadab9730 'char'
|-TypedefDecl 0x562dadaf98b0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x562dadaba610 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x562dadaba450 'struct __va_list_tag'
|     `-Record 0x562dadaba3d0 '__va_list_tag'
|-FunctionDecl 0x562dadaf99d8 <termination-crafted-lit/HarrisLalNoriRajamani-SAS2010-Fig2_false-no-overflow.c:11:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-FunctionDecl 0x562dadaf9b60 <line:17:1, line:49:1> line:17:5 used foo 'int (void)'
| `-CompoundStmt 0x562dadafa538 <col:15, line:49:1>
|   |-DeclStmt 0x562dadaf9d08 <line:18:2, col:33>
|   | `-VarDecl 0x562dadaf9c18 <col:2, col:32> col:6 used y 'int' cinit
|   |   `-CallExpr 0x562dadaf9ce8 <col:10, col:32> 'int'
|   |     `-ImplicitCastExpr 0x562dadaf9cd0 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x562dadaf9c80 <col:10> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
|   |-IfStmt 0x562dadafa4c8 <line:19:2, line:47:2> has_else
|   | |-CallExpr 0x562dadaf9d58 <line:19:6, col:28> 'int'
|   | | `-ImplicitCastExpr 0x562dadaf9d40 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x562dadaf9d20 <col:6> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
|   | |-CompoundStmt 0x562dadafa108 <col:31, line:33:2>
|   | | `-IfStmt 0x562dadafa0e0 <line:20:3, line:32:3> has_else
|   | |   |-CallExpr 0x562dadaf9db0 <line:20:7, col:29> 'int'
|   | |   | `-ImplicitCastExpr 0x562dadaf9d98 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
|   | |   |   `-DeclRefExpr 0x562dadaf9d78 <col:7> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
|   | |   |-CompoundStmt 0x562dadaf9f40 <col:32, line:26:3>
|   | |   | `-IfStmt 0x562dadaf9f18 <line:21:4, line:25:4> has_else
|   | |   |   |-CallExpr 0x562dadaf9e08 <line:21:8, col:30> 'int'
|   | |   |   | `-ImplicitCastExpr 0x562dadaf9df0 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |   |   |   `-DeclRefExpr 0x562dadaf9dd0 <col:8> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
|   | |   |   |-CompoundStmt 0x562dadaf9e88 <col:33, line:23:4>
|   | |   |   | `-BinaryOperator 0x562dadaf9e68 <line:22:5, col:9> 'int' '='
|   | |   |   |   |-DeclRefExpr 0x562dadaf9e28 <col:5> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
|   | |   |   |   `-IntegerLiteral 0x562dadaf9e48 <col:9> 'int' 0
|   | |   |   `-CompoundStmt 0x562dadaf9f00 <line:23:11, line:25:4>
|   | |   |     `-BinaryOperator 0x562dadaf9ee0 <line:24:5, col:9> 'int' '='
|   | |   |       |-DeclRefExpr 0x562dadaf9ea0 <col:5> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
|   | |   |       `-IntegerLiteral 0x562dadaf9ec0 <col:9> 'int' 1
|   | |   `-CompoundStmt 0x562dadafa0c8 <line:26:10, line:32:3>
|   | |     `-IfStmt 0x562dadafa0a0 <line:27:4, line:31:4> has_else
|   | |       |-CallExpr 0x562dadaf9f90 <line:27:8, col:30> 'int'
|   | |       | `-ImplicitCastExpr 0x562dadaf9f78 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |       |   `-DeclRefExpr 0x562dadaf9f58 <col:8> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
|   | |       |-CompoundStmt 0x562dadafa010 <col:33, line:29:4>
|   | |       | `-BinaryOperator 0x562dadaf9ff0 <line:28:5, col:9> 'int' '='
|   | |       |   |-DeclRefExpr 0x562dadaf9fb0 <col:5> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
|   | |       |   `-IntegerLiteral 0x562dadaf9fd0 <col:9> 'int' 2
|   | |       `-CompoundStmt 0x562dadafa088 <line:29:11, line:31:4>
|   | |         `-BinaryOperator 0x562dadafa068 <line:30:5, col:9> 'int' '='
|   | |           |-DeclRefExpr 0x562dadafa028 <col:5> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
|   | |           `-IntegerLiteral 0x562dadafa048 <col:9> 'int' 3
|   | `-CompoundStmt 0x562dadafa4b0 <line:33:9, line:47:2>
|   |   `-IfStmt 0x562dadafa488 <line:34:3, line:46:3> has_else
|   |     |-CallExpr 0x562dadafa158 <line:34:7, col:29> 'int'
|   |     | `-ImplicitCastExpr 0x562dadafa140 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
|   |     |   `-DeclRefExpr 0x562dadafa120 <col:7> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
|   |     |-CompoundStmt 0x562dadafa2e8 <col:32, line:40:3>
|   |     | `-IfStmt 0x562dadafa2c0 <line:35:4, line:39:4> has_else
|   |     |   |-CallExpr 0x562dadafa1b0 <line:35:8, col:30> 'int'
|   |     |   | `-ImplicitCastExpr 0x562dadafa198 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   |     |   |   `-DeclRefExpr 0x562dadafa178 <col:8> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
|   |     |   |-CompoundStmt 0x562dadafa230 <col:33, line:37:4>
|   |     |   | `-BinaryOperator 0x562dadafa210 <line:36:5, col:9> 'int' '='
|   |     |   |   |-DeclRefExpr 0x562dadafa1d0 <col:5> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
|   |     |   |   `-IntegerLiteral 0x562dadafa1f0 <col:9> 'int' 4
|   |     |   `-CompoundStmt 0x562dadafa2a8 <line:37:11, line:39:4>
|   |     |     `-BinaryOperator 0x562dadafa288 <line:38:5, col:9> 'int' '='
|   |     |       |-DeclRefExpr 0x562dadafa248 <col:5> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
|   |     |       `-IntegerLiteral 0x562dadafa268 <col:9> 'int' 5
|   |     `-CompoundStmt 0x562dadafa470 <line:40:10, line:46:3>
|   |       `-IfStmt 0x562dadafa448 <line:41:4, line:45:4> has_else
|   |         |-CallExpr 0x562dadafa338 <line:41:8, col:30> 'int'
|   |         | `-ImplicitCastExpr 0x562dadafa320 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   |         |   `-DeclRefExpr 0x562dadafa300 <col:8> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
|   |         |-CompoundStmt 0x562dadafa3b8 <col:33, line:43:4>
|   |         | `-BinaryOperator 0x562dadafa398 <line:42:5, col:9> 'int' '='
|   |         |   |-DeclRefExpr 0x562dadafa358 <col:5> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
|   |         |   `-IntegerLiteral 0x562dadafa378 <col:9> 'int' 6
|   |         `-CompoundStmt 0x562dadafa430 <line:43:11, line:45:4>
|   |           `-BinaryOperator 0x562dadafa410 <line:44:5, col:9> 'int' '='
|   |             |-DeclRefExpr 0x562dadafa3d0 <col:5> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
|   |             `-IntegerLiteral 0x562dadafa3f0 <col:9> 'int' 7
|   `-ReturnStmt 0x562dadafa528 <line:48:2, col:9>
|     `-ImplicitCastExpr 0x562dadafa510 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x562dadafa4f0 <col:9> 'int' lvalue Var 0x562dadaf9c18 'y' 'int'
`-FunctionDecl 0x562dadafa5b8 <line:52:1, line:84:1> line:52:5 main 'int ()'
  `-CompoundStmt 0x562dadb1d860 <col:12, line:84:1>
    |-DeclStmt 0x562dadafa6f8 <line:53:2, col:11>
    | `-VarDecl 0x562dadafa670 <col:2, col:10> col:6 used d 'int' cinit
    |   `-IntegerLiteral 0x562dadafa6d8 <col:10> 'int' 1
    |-DeclStmt 0x562dadafa7e8 <line:54:2, col:33>
    | `-VarDecl 0x562dadafa728 <col:2, col:32> col:6 used x 'int' cinit
    |   `-CallExpr 0x562dadafa7c8 <col:10, col:32> 'int'
    |     `-ImplicitCastExpr 0x562dadafa7b0 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x562dadafa790 <col:10> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x562dadb1d1e0 <line:56:2, line:58:2>
    | |-CallExpr 0x562dadafa838 <line:56:6, col:28> 'int'
    | | `-ImplicitCastExpr 0x562dadafa820 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x562dadafa800 <col:6> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
    | `-CompoundStmt 0x562dadb1d1c8 <col:31, line:58:2>
    |   `-BinaryOperator 0x562dadb1d1a8 <line:57:3, col:11> 'int' '='
    |     |-DeclRefExpr 0x562dadafa858 <col:3> 'int' lvalue Var 0x562dadafa670 'd' 'int'
    |     `-BinaryOperator 0x562dadb1d188 <col:7, col:11> 'int' '-'
    |       |-ImplicitCastExpr 0x562dadb1d170 <col:7> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x562dadafa878 <col:7> 'int' lvalue Var 0x562dadafa670 'd' 'int'
    |       `-IntegerLiteral 0x562dadb1d150 <col:11> 'int' 1
    |-IfStmt 0x562dadb1d2c0 <line:61:2, line:63:2>
    | |-CallExpr 0x562dadb1d230 <line:61:6, col:28> 'int'
    | | `-ImplicitCastExpr 0x562dadb1d218 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x562dadb1d1f8 <col:6> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
    | `-CompoundStmt 0x562dadb1d2a8 <col:31, line:63:2>
    |   `-CallExpr 0x562dadb1d288 <line:62:3, col:7> 'int'
    |     `-ImplicitCastExpr 0x562dadb1d270 <col:3> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x562dadb1d250 <col:3> 'int (void)' Function 0x562dadaf9b60 'foo' 'int (void)'
    |-IfStmt 0x562dadb1d3a0 <line:64:2, line:66:2>
    | |-CallExpr 0x562dadb1d310 <line:64:6, col:28> 'int'
    | | `-ImplicitCastExpr 0x562dadb1d2f8 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x562dadb1d2d8 <col:6> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
    | `-CompoundStmt 0x562dadb1d388 <col:31, line:66:2>
    |   `-CallExpr 0x562dadb1d368 <line:65:3, col:7> 'int'
    |     `-ImplicitCastExpr 0x562dadb1d350 <col:3> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x562dadb1d330 <col:3> 'int (void)' Function 0x562dadaf9b60 'foo' 'int (void)'
    |-IfStmt 0x562dadb1d480 <line:67:2, line:69:2>
    | |-CallExpr 0x562dadb1d3f0 <line:67:6, col:28> 'int'
    | | `-ImplicitCastExpr 0x562dadb1d3d8 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x562dadb1d3b8 <col:6> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
    | `-CompoundStmt 0x562dadb1d468 <col:31, line:69:2>
    |   `-CallExpr 0x562dadb1d448 <line:68:3, col:7> 'int'
    |     `-ImplicitCastExpr 0x562dadb1d430 <col:3> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x562dadb1d410 <col:3> 'int (void)' Function 0x562dadaf9b60 'foo' 'int (void)'
    |-IfStmt 0x562dadb1d560 <line:70:2, line:72:2>
    | |-CallExpr 0x562dadb1d4d0 <line:70:6, col:28> 'int'
    | | `-ImplicitCastExpr 0x562dadb1d4b8 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x562dadb1d498 <col:6> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
    | `-CompoundStmt 0x562dadb1d548 <col:31, line:72:2>
    |   `-CallExpr 0x562dadb1d528 <line:71:3, col:7> 'int'
    |     `-ImplicitCastExpr 0x562dadb1d510 <col:3> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x562dadb1d4f0 <col:3> 'int (void)' Function 0x562dadaf9b60 'foo' 'int (void)'
    |-IfStmt 0x562dadb1d6a0 <line:76:2, line:78:2>
    | |-CallExpr 0x562dadb1d5b0 <line:76:6, col:28> 'int'
    | | `-ImplicitCastExpr 0x562dadb1d598 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x562dadb1d578 <col:6> 'int (void)' Function 0x562dadaf99d8 '__VERIFIER_nondet_int' 'int (void)'
    | `-CompoundStmt 0x562dadb1d688 <col:31, line:78:2>
    |   `-BinaryOperator 0x562dadb1d668 <line:77:3, col:11> 'int' '='
    |     |-DeclRefExpr 0x562dadb1d5d0 <col:3> 'int' lvalue Var 0x562dadafa670 'd' 'int'
    |     `-BinaryOperator 0x562dadb1d648 <col:7, col:11> 'int' '-'
    |       |-ImplicitCastExpr 0x562dadb1d630 <col:7> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x562dadb1d5f0 <col:7> 'int' lvalue Var 0x562dadafa670 'd' 'int'
    |       `-IntegerLiteral 0x562dadb1d610 <col:11> 'int' 1
    |-WhileStmt 0x562dadb1d818 <line:80:2, line:82:2>
    | |-BinaryOperator 0x562dadb1d710 <line:80:9, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x562dadb1d6f8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x562dadb1d6b8 <col:9> 'int' lvalue Var 0x562dadafa728 'x' 'int'
    | | `-IntegerLiteral 0x562dadb1d6d8 <col:13> 'int' 0
    | `-CompoundStmt 0x562dadb1d800 <col:16, line:82:2>
    |   `-BinaryOperator 0x562dadb1d7e0 <line:81:3, col:11> 'int' '='
    |     |-DeclRefExpr 0x562dadb1d730 <col:3> 'int' lvalue Var 0x562dadafa728 'x' 'int'
    |     `-BinaryOperator 0x562dadb1d7c0 <col:7, col:11> 'int' '-'
    |       |-ImplicitCastExpr 0x562dadb1d790 <col:7> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x562dadb1d750 <col:7> 'int' lvalue Var 0x562dadafa728 'x' 'int'
    |       `-ImplicitCastExpr 0x562dadb1d7a8 <col:11> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x562dadb1d770 <col:11> 'int' lvalue Var 0x562dadafa670 'd' 'int'
    `-ReturnStmt 0x562dadb1d850 <line:83:2, col:9>
      `-IntegerLiteral 0x562dadb1d830 <col:9> 'int' 0
