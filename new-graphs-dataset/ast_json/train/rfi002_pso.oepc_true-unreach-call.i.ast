TranslationUnitDecl 0x559e9da39f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x559e9da3a848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x559e9da3a520 '__int128'
|-TypedefDecl 0x559e9da3a8b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x559e9da3a540 'unsigned __int128'
|-TypedefDecl 0x559e9da3abc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x559e9da3a990 'struct __NSConstantString_tag'
|   `-Record 0x559e9da3a910 '__NSConstantString_tag'
|-TypedefDecl 0x559e9da3ac68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x559e9da3ac20 'char *'
|   `-BuiltinType 0x559e9da3a020 'char'
|-TypedefDecl 0x559e9da79b60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x559e9da3af00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x559e9da3ad40 'struct __va_list_tag'
|     `-Record 0x559e9da3acc0 '__va_list_tag'
|-FunctionDecl 0x559e9da79c80 <pthread-wmm/rfi002_pso.oepc_true-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x559e9da79e50 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x559e9da79d80 <col:31> col:34 'int'
|-FunctionDecl 0x559e9da79fc8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x559e9da7a0f0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x559e9da7a238 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x559e9da7a1a8 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x559e9da7a468 <col:40, col:99>
|   |-IfStmt 0x559e9da7a438 <col:42, col:88>
|   | |-UnaryOperator 0x559e9da7a318 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x559e9da7a300 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559e9da7a2e0 <col:47> 'int' lvalue ParmVar 0x559e9da7a1a8 'expression' 'int'
|   | `-CompoundStmt 0x559e9da7a420 <col:59, col:88>
|   |   `-LabelStmt 0x559e9da7a408 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x559e9da7a398 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x559e9da7a380 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x559e9da7a330 <col:68> 'void () __attribute__((noreturn))' Function 0x559e9da7a0f0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x559e9da7a450 <col:89>
|   `-ReturnStmt 0x559e9da7a458 <col:91>
|-FunctionDecl 0x559e9da7a4b0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x559e9da7a570 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x559e9da7a8f0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x559e9da7a628 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x559e9da7a6a8 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x559e9da7a728 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x559e9da7a7a8 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x559e9da7a9b0 <line:11:22>
|-FunctionDecl 0x559e9da9ff10 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x559e9da7aa20 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x559e9da7aaa0 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x559e9da9fd40 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x559e9da9fdc0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x559e9da9ffd0 <line:14:22>
|-FunctionDecl 0x559e9daa0280 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x559e9daa0040 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x559e9daa00c0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x559e9daa0140 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x559e9daa0338 <line:16:22>
|-TypedefDecl 0x559e9daa03a8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x559e9da3a0e0 'unsigned char'
|-TypedefDecl 0x559e9daa0418 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x559e9da3a100 'unsigned short'
|-TypedefDecl 0x559e9daa0488 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-TypedefDecl 0x559e9daa04f8 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa0568 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x559e9da3a040 'signed char'
|-TypedefDecl 0x559e9daa05d8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x559e9da3a0e0 'unsigned char'
|-TypedefDecl 0x559e9daa0648 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x559e9da3a060 'short'
|-TypedefDecl 0x559e9daa06b8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x559e9da3a100 'unsigned short'
|-TypedefDecl 0x559e9daa0728 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x559e9da3a080 'int'
|-TypedefDecl 0x559e9daa0798 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-TypedefDecl 0x559e9daa0808 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa0878 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa08e8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa0958 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa09c8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa0a38 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-TypedefDecl 0x559e9daa0aa8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-TypedefDecl 0x559e9daa0b18 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa0b88 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa0bf8 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-TypedefDecl 0x559e9daa0c68 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa0cd8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa0d68 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa0dd8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x559e9da3a080 'int'
|-RecordDecl 0x559e9daa0e30 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x559e9daa0f78 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x559e9daa1030 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x559e9daa0fd0 'struct __fsid_t' sugar
|   `-RecordType 0x559e9daa0eb0 '__fsid_t'
|     `-Record 0x559e9daa0e30 ''
|-TypedefDecl 0x559e9daa10b8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa1128 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa1198 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa1208 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-TypedefDecl 0x559e9daa1278 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa12e8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-TypedefDecl 0x559e9daa1358 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa13c8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x559e9da3a080 'int'
|-TypedefDecl 0x559e9daa1438 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x559e9da3a080 'int'
|-TypedefDecl 0x559e9daa14a8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x559e9da3a080 'int'
|-TypedefDecl 0x559e9daa1518 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x559e9da3a7a0 'void *'
|   `-BuiltinType 0x559e9da39fe0 'void'
|-TypedefDecl 0x559e9daa1588 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa15f8 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa1668 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa16d8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa1748 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa17b8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa1828 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa1898 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa1908 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa1978 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa19e8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa1a78 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x559e9daa1a40 '__off64_t' sugar
|   |-Typedef 0x559e9daa0d68 '__off64_t'
|   `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa1b70 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x559e9daa1b30 '__quad_t *'
|   `-TypedefType 0x559e9daa1ad0 '__quad_t' sugar
|     |-Typedef 0x559e9daa08e8 '__quad_t'
|     `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa1be0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x559e9da3ac20 'char *'
|   `-BuiltinType 0x559e9da3a020 'char'
|-TypedefDecl 0x559e9daa1c50 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa1cc0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-FunctionDecl 0x559e9daa1e38 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x559e9daa1d60 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x559e9daa2148 <line:72:1, line:74:1>
|   `-ReturnStmt 0x559e9daa2138 <line:73:3, col:34>
|     `-CallExpr 0x559e9daa20f8 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x559e9daa20e0 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x559e9daa2070 <col:10> '<builtin fn type>' Function 0x559e9daa1ee0 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x559e9daa2120 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x559e9daa2090 <col:29> 'unsigned int' lvalue ParmVar 0x559e9daa1d60 '__bsx' 'unsigned int'
|-FunctionDecl 0x559e9daa1ee0 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x559e9daa1f80 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x559e9daa1ff0 <col:10> Implicit
| `-ConstAttr 0x559e9daa2048 <col:10> Implicit
|-FunctionDecl 0x559e9daa22a0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x559e9daa2198 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x559e9daa25b8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x559e9daa25a8 <line:78:3, col:34>
|     `-CallExpr 0x559e9daa2568 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x559e9daa2550 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x559e9daa24d8 <col:10> '<builtin fn type>' Function 0x559e9daa2348 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x559e9daa2590 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x559e9daa24f8 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x559e9daa2198 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x559e9daa2348 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x559e9daa23e8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x559e9daa2458 <col:10> Implicit
| `-ConstAttr 0x559e9daa24b0 <col:10> Implicit
|-TypedefDecl 0x559e9daa25e8 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-TypedefDecl 0x559e9daa2678 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x559e9daa2640 '__time_t' sugar
|   |-Typedef 0x559e9daa1278 '__time_t'
|   `-BuiltinType 0x559e9da3a0a0 'long'
|-RecordDecl 0x559e9daa26d0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x559e9daa2788 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x559e9daa2818 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x559e9daa28a8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x559e9daa2870 '__pid_t' sugar
|   |-Typedef 0x559e9daa0dd8 '__pid_t'
|   `-BuiltinType 0x559e9da3a080 'int'
|-RecordDecl 0x559e9daa2900 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x559e9daa29c0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x559e9daa2a10 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x559e9daa2ad0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x559e9daa2b38 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-RecordDecl 0x559e9daa2b90 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x559e9daa4e70 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x559e9daa4f20 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x559e9daa4ec0 'struct cpu_set_t' sugar
|   `-RecordType 0x559e9daa2c10 'cpu_set_t'
|     `-Record 0x559e9daa2b90 ''
|-FunctionDecl 0x559e9daa51f8 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x559e9daa4fc8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x559e9daa50d0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x559e9daa52a8 <line:108:19>
|-FunctionDecl 0x559e9daa5480 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x559e9daa5310 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x559e9daa5528 <col:69>
|-FunctionDecl 0x559e9daa56a0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x559e9daa5590 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x559e9daa5748 <col:64>
|-FunctionDecl 0x559e9daa5a08 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x559e9daa57b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x559e9daa58e8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x559e9daa5ab8 <line:114:22>
|-FunctionDecl 0x559e9daa5e60 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x559e9daa5b20 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x559e9daa5c18 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x559e9daa5f10 <col:88>
|-FunctionDecl 0x559e9daa61c8 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x559e9daa5f78 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x559e9daa5ff8 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x559e9daa6088 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x559e9daa6280 <col:62>
|-FunctionDecl 0x559e9daa63f8 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x559e9daa62e8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x559e9daa64a0 <col:63>
|-FunctionDecl 0x559e9daa65c8 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x559e9daa6668 <col:47>
|-FunctionDecl 0x559e9daa6770 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x559e9daa66d8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x559e9daa6818 <col:69>
|-FunctionDecl 0x559e9daa6920 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x559e9daa6888 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x559e9daa69c8 <col:69>
|-FunctionDecl 0x559e9daa6c88 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x559e9daa6a30 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x559e9daa6b68 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x559e9daa6d38 <col:88>
|-TypedefDecl 0x559e9daa6dc8 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x559e9daa6d90 '__clock_t' sugar
|   |-Typedef 0x559e9daa10b8 '__clock_t'
|   `-BuiltinType 0x559e9da3a0a0 'long'
|-TypedefDecl 0x559e9daa77e0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x559e9daa6e20 '__clockid_t' sugar
|   |-Typedef 0x559e9daa14a8 '__clockid_t'
|   `-BuiltinType 0x559e9da3a080 'int'
|-TypedefDecl 0x559e9daa7878 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x559e9daa7840 '__timer_t' sugar
|   |-Typedef 0x559e9daa1518 '__timer_t'
|   `-PointerType 0x559e9da3a7a0 'void *'
|     `-BuiltinType 0x559e9da39fe0 'void'
|-RecordDecl 0x559e9daa78d0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x559e9daa7990 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x559e9daa79f8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x559e9daa7a60 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x559e9daa7ac8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x559e9daa7b30 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x559e9daa7b98 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x559e9daa7c00 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x559e9daa7c68 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x559e9daa7cd0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x559e9daa7d38 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x559e9daa7da0 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x559e9daa7df0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x559e9daa7eb8 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x559e9daa7f28 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x559e9daa7fd0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x559e9daa81a0 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x559e9daa8240 <col:45>
|-FunctionDecl 0x559e9daa8420 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x559e9daa8310 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x559e9daa84c8 <col:54>
|-FunctionDecl 0x559e9daa86c8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x559e9daa8530 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x559e9daa85a8 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x559e9daa8778 <line:158:22>
| `-ConstAttr 0x559e9daa9410 <col:63>
|-FunctionDecl 0x559e9daa9610 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x559e9daa9508 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x559e9daa96b8 <col:56>
|-FunctionDecl 0x559e9daa9a60 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x559e9daa9728 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x559e9daa97a0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x559e9daa9820 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x559e9daa9918 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x559e9daa9b20 <col:54>
|-RecordDecl 0x559e9daa9b78 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x559e9daa9c28 parent 0x559e9da39f88 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x559e9daa9e88 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x559e9daa9f28 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x559e9daa9f90 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x559e9daa9ff8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x559e9daaa0e8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x559e9daaa208 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x559e9daaa1b0 'struct __locale_struct *'
|   `-ElaboratedType 0x559e9daaa140 'struct __locale_struct' sugar
|     `-RecordType 0x559e9daa9c00 'struct __locale_struct'
|       `-Record 0x559e9daa9b78 '__locale_struct'
|-TypedefDecl 0x559e9daaa2b8 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x559e9daaa280 '__locale_t' sugar
|   |-Typedef 0x559e9daaa208 '__locale_t'
|   `-PointerType 0x559e9daaa1b0 'struct __locale_struct *'
|     `-ElaboratedType 0x559e9daaa140 'struct __locale_struct' sugar
|       `-RecordType 0x559e9daa9c00 'struct __locale_struct'
|         `-Record 0x559e9daa9b78 '__locale_struct'
|-FunctionDecl 0x559e9daaa6b0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x559e9daaa328 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x559e9daaa3a0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x559e9daaa438 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x559e9daaa4c8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x559e9daaa540 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x559e9daaa778 <col:40>
|-FunctionDecl 0x559e9daaa968 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x559e9daaa840 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x559e9daaaa10 <col:66>
|-FunctionDecl 0x559e9daaab20 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x559e9daaaa78 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x559e9daaabc8 <col:69>
|-FunctionDecl 0x559e9daaadf8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x559e9daaac30 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x559e9daaacc0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x559e9daaaea8 <col:52>
|-FunctionDecl 0x559e9daab050 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x559e9daaaf10 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x559e9daaafa0 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x559e9daab100 <col:55>
|-FunctionDecl 0x559e9daab298 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x559e9daab180 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x559e9daab340 <col:62>
|-FunctionDecl 0x559e9daab578 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x559e9daab3a8 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x559e9daab620 <col:60>
|-FunctionDecl 0x559e9daab848 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x559e9daab6a0 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x559e9daab720 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x559e9daab8f8 <col:44>
|-FunctionDecl 0x559e9daabb08 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x559e9daab960 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x559e9daab9e0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x559e9daabbb8 <col:49>
|-VarDecl 0x559e9daabcb8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x559e9daabd38 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x559e9daabdb8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x559e9daabe80 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x559e9daabfb0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x559e9daac050 <col:42>
|-VarDecl 0x559e9daac0c0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x559e9daac140 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x559e9daac2c8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x559e9daac1b8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x559e9daac370 <col:57>
|-FunctionDecl 0x559e9daad4f0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x559e9daac3f0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x559e9daad598 <col:56>
|-FunctionDecl 0x559e9daad6a8 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x559e9daad618 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x559e9daad750 <col:59>
|-FunctionDecl 0x559e9daad858 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x559e9daad7c0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x559e9daad900 <col:48>
| `-ConstAttr 0x559e9daad958 <col:89>
|-FunctionDecl 0x559e9daadbb8 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x559e9daada08 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x559e9daada98 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x559e9daade18 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x559e9daadca8 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x559e9daadd38 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x559e9daadec8 <col:88>
|-FunctionDecl 0x559e9daae060 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x559e9daadf30 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x559e9daadfc0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x559e9daae110 <col:88>
|-FunctionDecl 0x559e9daae328 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x559e9daae178 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x559e9daae208 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x559e9daae3d8 <line:209:22>
|-FunctionDecl 0x559e9daae778 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x559e9daae440 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x559e9daae500 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x559e9daae590 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x559e9daae620 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x559e9daaea78 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x559e9daae878 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x559e9daae950 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x559e9daaeb28 <col:85>
|-FunctionDecl 0x559e9daaef18 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x559e9daaeb90 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x559e9daaecc8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x559e9daaedd0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x559e9daaefd0 <col:52>
|-FunctionDecl 0x559e9daaf148 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x559e9daaf038 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x559e9daaf1f0 <col:61>
|-FunctionDecl 0x559e9daaf668 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x559e9daaf258 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x559e9daaf2d8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x559e9daaf408 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x559e9daaf510 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x559e9daaf728 <col:62>
|-FunctionDecl 0x559e9daaf948 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x559e9daaf790 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x559e9daaf820 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x559e9daaf9f8 <line:222:22>
|-FunctionDecl 0x559e9daafaf8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x559e9daafa60 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x559e9daafba0 <col:65>
|-TypedefDecl 0x559e9daafc10 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x559e9da3a140 'unsigned long'
|-RecordDecl 0x559e9daafc68 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x559e9daafdb0 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x559e9daafe18 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x559e9daafec8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x559e9daafe70 'union pthread_attr_t' sugar
|   `-RecordType 0x559e9daafcf0 'union pthread_attr_t'
|     `-Record 0x559e9daafc68 'pthread_attr_t'
|-RecordDecl 0x559e9daaff20 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x559e9dab0098 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x559e9dab0110 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x559e9dab01c0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x559e9dab0160 'struct __pthread_internal_list' sugar
|   `-RecordType 0x559e9daaffa0 'struct __pthread_internal_list'
|     `-Record 0x559e9daaff20 '__pthread_internal_list'
|-RecordDecl 0x559e9dab0230 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x559e9dab02d8 parent 0x559e9da39f88 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x559e9dab03b0 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x559e9dab0418 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x559e9dab0480 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x559e9dab4530 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x559e9dab4598 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x559e9dab4600 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x559e9dab4688 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x559e9dab4740 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x559e9dab4830 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x559e9dab4898 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x559e9dab4a20 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x559e9dab49c0 'union pthread_mutex_t' sugar
|   `-RecordType 0x559e9dab02b0 'pthread_mutex_t'
|     `-Record 0x559e9dab0230 ''
|-RecordDecl 0x559e9dab4a90 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x559e9dab4bd0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x559e9dab4c38 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x559e9dab4cf0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x559e9dab4c90 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x559e9dab4b10 'pthread_mutexattr_t'
|     `-Record 0x559e9dab4a90 ''
|-RecordDecl 0x559e9dab4d60 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x559e9dab4e08 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x559e9dab4ed0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x559e9dab4f38 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x559e9dab4fa0 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x559e9dab5008 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x559e9dab5070 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x559e9dab50d8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x559e9dab5140 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x559e9dab51a8 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x559e9dab5260 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at pthread-wmm/rfi002_pso.oepc_true-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/rfi002_pso.oepc_true-unreach-call.i:259:3)'
| |-FieldDecl 0x559e9dab5350 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x559e9dab53b8 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x559e9dab5540 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x559e9dab5490 'union pthread_cond_t' sugar
|   `-RecordType 0x559e9dab4de0 'pthread_cond_t'
|     `-Record 0x559e9dab4d60 ''
|-RecordDecl 0x559e9dab55b0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x559e9dab56b0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x559e9dab5718 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x559e9dab57d0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x559e9dab5770 'union pthread_condattr_t' sugar
|   `-RecordType 0x559e9dab5630 'pthread_condattr_t'
|     `-Record 0x559e9dab55b0 ''
|-TypedefDecl 0x559e9dab5858 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x559e9da3a120 'unsigned int'
|-TypedefDecl 0x559e9dab58c8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x559e9da3a080 'int'
|-RecordDecl 0x559e9dab5920 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x559e9dab59c8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x559e9dab5a90 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x559e9dab5af8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x559e9dab5b60 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x559e9dab5bc8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x559e9dab5c30 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x559e9dab5c98 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x559e9dab5d00 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x559e9dab5d68 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x559e9dab5dd0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x559e9dab5e38 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x559e9dab5ea0 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x559e9dab5f50 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at pthread-wmm/rfi002_pso.oepc_true-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/rfi002_pso.oepc_true-unreach-call.i:282:3)'
| |-FieldDecl 0x559e9dab5ff8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x559e9dab6060 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x559e9dab61b0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x559e9dab6150 'union pthread_rwlock_t' sugar
|   `-RecordType 0x559e9dab59a0 'pthread_rwlock_t'
|     `-Record 0x559e9dab5920 ''
|-RecordDecl 0x559e9dab6220 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x559e9dab6360 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x559e9dab63c8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x559e9dab6480 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x559e9dab6420 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x559e9dab62a0 'pthread_rwlockattr_t'
|     `-Record 0x559e9dab6220 ''
|-TypedefDecl 0x559e9dab8560 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x559e9da3a084 'volatile int' volatile
|   `-BuiltinType 0x559e9da3a080 'int'
|-RecordDecl 0x559e9dab85b8 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x559e9dab8700 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x559e9dab8768 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x559e9dab8820 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x559e9dab87c0 'union pthread_barrier_t' sugar
|   `-RecordType 0x559e9dab8640 'pthread_barrier_t'
|     `-Record 0x559e9dab85b8 ''
|-RecordDecl 0x559e9dab8890 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x559e9dab8990 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x559e9dab89f8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x559e9dab8ab0 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x559e9dab8a50 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x559e9dab8910 'pthread_barrierattr_t'
|     `-Record 0x559e9dab8890 ''
|-TypedefDecl 0x559e9dab8bc8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x559e9dab8b60 'long [8]' 8 
|   `-BuiltinType 0x559e9da3a0a0 'long'
|-EnumDecl 0x559e9dab8c20 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x559e9dab8ce8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x559e9dab8d38 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x559e9dab8d88 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x559e9dab8e58 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x559e9dab8ea8 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x559e9dab8ef8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x559e9dab8f48 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x559e9dab8fd0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x559e9dab8fb8 <col:26> 'int'
| |   `-DeclRefExpr 0x559e9dab8f98 <col:26> 'int' EnumConstant 0x559e9dab8e58 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x559e9dab9058 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x559e9dab9040 <col:29> 'int'
| |   `-DeclRefExpr 0x559e9dab9020 <col:29> 'int' EnumConstant 0x559e9dab8ea8 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x559e9dab90e0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x559e9dab90c8 <col:30> 'int'
| |   `-DeclRefExpr 0x559e9dab90a8 <col:30> 'int' EnumConstant 0x559e9dab8ef8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x559e9dab9168 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x559e9dab9150 <col:27> 'int'
|     `-DeclRefExpr 0x559e9dab9130 <col:27> 'int' EnumConstant 0x559e9dab8fd0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x559e9dab91b8 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x559e9dab9288 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x559e9dab9310 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x559e9dab92f8 <col:30> 'int'
| |   `-DeclRefExpr 0x559e9dab92d8 <col:30> 'int' EnumConstant 0x559e9dab9288 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x559e9dab9360 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x559e9dab93e8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x559e9dab93d0 <col:29> 'int'
|     `-DeclRefExpr 0x559e9dab93b0 <col:29> 'int' EnumConstant 0x559e9dab9360 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x559e9dab9438 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x559e9dab9508 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x559e9dab9570 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x559e9dab95c0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x559e9dab9610 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x559e9dab96d8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x559e9dab9728 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x559e9dab9778 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x559e9dab9800 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x559e9dab97e8 <col:31> 'int'
|     `-DeclRefExpr 0x559e9dab97c8 <col:31> 'int' EnumConstant 0x559e9dab96d8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x559e9dab9850 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x559e9dab9918 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x559e9dab9968 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x559e9dab99b8 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x559e9dab9a88 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x559e9dab9ad8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x559e9dab9b28 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x559e9dab9bf8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x559e9dab9c48 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x559e9dab9c98 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x559e9dab9ed8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x559e9dab9f40 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x559e9dab9fa8 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x559e9daba0c8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x559e9daba118 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x559e9daba1e8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x559e9daba238 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x559e9daba288 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x559e9daba358 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x559e9daba3a8 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x559e9daba9d8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x559e9daba4a0 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x559e9daba5c0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9daba7c0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x559e9daba840 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x559e9dabaa98 <col:47>
| |-NonNullAttr 0x559e9dabaaf0 <col:77, col:94> 1 3
| `-CallbackAttr 0x559e9dabab28 <line:386:12> Implicit 2 3
|-FunctionDecl 0x559e9dabac50 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x559e9dabab80 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x559e9dabaea8 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x559e9dabad08 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x559e9dabad88 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x559e9dabb078 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x559e9dabaf68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x559e9dabb120 <col:60>
|-FunctionDecl 0x559e9dabb270 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x559e9dabb310 <col:54>
| `-ConstAttr 0x559e9dabb368 <col:95>
|-FunctionDecl 0x559e9dabbda0 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x559e9dabb3a0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x559e9dabb418 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x559e9dabbe50 <line:395:19>
| `-ConstAttr 0x559e9dabbea8 <col:60>
|-FunctionDecl 0x559e9dabc078 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x559e9dabbf40 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x559e9dabc120 <col:71>
| `-NonNullAttr 0x559e9dabc178 <col:112, col:126> 1
|-FunctionDecl 0x559e9dabc280 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x559e9dabc1c8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x559e9dabc328 <line:398:22>
| `-NonNullAttr 0x559e9dabc380 <col:63, col:77> 1
|-FunctionDecl 0x559e9dabc5a8 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x559e9dabc3c8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x559e9dabc448 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x559e9dabc658 <line:401:22>
| `-NonNullAttr 0x559e9dabc6b0 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dabc8b8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x559e9dabc6f8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x559e9dabc778 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x559e9dabc968 <line:404:22>
| `-NonNullAttr 0x559e9dabc9c0 <col:63, col:77> 1
|-FunctionDecl 0x559e9dabcc18 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x559e9dabca08 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x559e9dabcab0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x559e9dabccc8 <line:407:22>
| `-NonNullAttr 0x559e9dabcd20 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dabdf78 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x559e9dabddc0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x559e9dabde38 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x559e9dabe028 <line:410:22>
| `-NonNullAttr 0x559e9dabe080 <col:63, col:77> 1
|-FunctionDecl 0x559e9dabe2b8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x559e9dabe0c8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9dabe158 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x559e9dabe368 <line:413:22>
| `-NonNullAttr 0x559e9dabe3c0 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dabe5f8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x559e9dabe408 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9dabe498 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x559e9dabe6a8 <col:37>
| `-NonNullAttr 0x559e9dabe700 <col:78, col:95> 1 2
|-FunctionDecl 0x559e9dabe8e8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dabe748 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9dabe7c8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x559e9dabe998 <line:419:22>
| `-NonNullAttr 0x559e9dabe9f0 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dabeb78 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x559e9dabea38 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x559e9dabeab8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x559e9dabec28 <line:421:22>
| `-NonNullAttr 0x559e9dabec80 <col:63, col:77> 1
|-FunctionDecl 0x559e9dabfe58 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dabecc8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9dabed48 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x559e9dabff08 <line:424:22>
| `-NonNullAttr 0x559e9dabff60 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac00e8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x559e9dabffa8 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x559e9dac0028 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x559e9dac0198 <line:427:22>
| `-NonNullAttr 0x559e9dac01f0 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac0398 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dac0238 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9dac02b8 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x559e9dac0448 <line:430:22>
| `-NonNullAttr 0x559e9dac04a0 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac0628 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x559e9dac04e8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x559e9dac0568 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x559e9dac06d8 <line:432:22>
| `-NonNullAttr 0x559e9dac0730 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac0958 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x559e9dac0778 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9dac07f8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x559e9dac0a08 <line:435:22>
| |-NonNullAttr 0x559e9dac0a60 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x559e9dac0a98 <col:100> "" ""
|-FunctionDecl 0x559e9dac0ca8 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x559e9dac0ae8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x559e9dac0b68 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x559e9dac0d58 <line:438:22>
| |-NonNullAttr 0x559e9dac0db0 <col:63, col:77> 1
| `-DeprecatedAttr 0x559e9dac0df8 <col:97> "" ""
|-FunctionDecl 0x559e9dac0fe8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x559e9dac0e48 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9dac0ec0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x559e9dac1098 <line:441:22>
| `-NonNullAttr 0x559e9dac10f0 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac1270 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x559e9dac1138 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x559e9dac11b0 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x559e9dac1320 <line:444:22>
| `-NonNullAttr 0x559e9dac1378 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac1668 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x559e9dac13c8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x559e9dac1448 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x559e9dac14c0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x559e9dac1720 <line:448:22>
| `-NonNullAttr 0x559e9dac1778 <col:63, col:83> 1 2 3
|-FunctionDecl 0x559e9dac1a28 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x559e9dac17d0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x559e9dac1850 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x559e9dac18c8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x559e9dac1ae0 <col:43>
| `-NonNullAttr 0x559e9dac1b38 <col:84, col:98> 1
|-FunctionDecl 0x559e9dac1e40 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x559e9dac1b88 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x559e9dac1c08 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x559e9dac1c98 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x559e9dac1ef8 <line:453:22>
| `-NonNullAttr 0x559e9dac1f50 <col:63, col:77> 3
|-FunctionDecl 0x559e9dac2228 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x559e9dac1f98 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x559e9dac2018 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x559e9dac20a8 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x559e9dac22e0 <line:457:22>
| `-NonNullAttr 0x559e9dac2338 <col:63, col:80> 2 3
|-FunctionDecl 0x559e9dac2528 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x559e9dac2388 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x559e9dac2408 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x559e9dac25d8 <line:459:22>
|-FunctionDecl 0x559e9dac29a8 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x559e9dac26a0 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x559e9dac2840 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x559e9dac2a58 <col:52, col:69> 1 2
|-FunctionDecl 0x559e9dac2c00 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x559e9dac2ae0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x559e9dac2b60 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x559e9dac2e10 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x559e9dac2cc8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x559e9dac2d48 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x559e9dac2f68 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x559e9dac2ed0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x559e9dac30a8 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x559e9dac3148 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x559e9dac31f8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x559e9dac32e8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x559e9dac3350 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x559e9dac3520 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/rfi002_pso.oepc_true-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x559e9dac3618 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x559e9dac36d0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x559e9dac3670 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x559e9dac31d0 '__pthread_unwind_buf_t'
| |   `-Record 0x559e9dac3148 ''
| `-AlignedAttr 0x559e9dac3728 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x559e9dac37a0 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x559e9dac3900 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x559e9dac3968 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x559e9dac39d0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x559e9dac3a38 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x559e9dac3c40 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x559e9dac3b30 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x559e9dac3e20 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x559e9dac3cf8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x559e9dac3fe0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x559e9dac3ed8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x559e9dac4088 <line:488:22>
|-RecordDecl 0x559e9dac40e0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x559e9dac43f8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x559e9dac4258 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x559e9dac42d8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x559e9dac44a8 <col:86>
| `-ReturnsTwiceAttr 0x559e9dac4500 <col:12> Implicit
|-FunctionDecl 0x559e9dac4828 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x559e9dac45d0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x559e9dac46e0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x559e9dac48d8 <line:494:22>
| `-NonNullAttr 0x559e9dac4930 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac4aa8 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x559e9dac4978 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x559e9dac4b50 <line:496:22>
| `-NonNullAttr 0x559e9dac4ba8 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac4cb0 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x559e9dac4bf8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x559e9dac4d58 <line:498:22>
| `-NonNullAttr 0x559e9dac4db0 <col:52, col:66> 1
|-FunctionDecl 0x559e9dac4ee8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x559e9dac4e30 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x559e9dac4f90 <line:500:22>
| `-NonNullAttr 0x559e9dac4fe8 <col:52, col:66> 1
|-FunctionDecl 0x559e9dac5228 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x559e9dac5038 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x559e9dac50c8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x559e9dac52d8 <col:36>
| `-NonNullAttr 0x559e9dac5330 <col:66, col:83> 1 2
|-FunctionDecl 0x559e9dac5430 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x559e9dac5378 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x559e9dac54d8 <line:505:22>
| `-NonNullAttr 0x559e9dac5530 <col:52, col:66> 1
|-FunctionDecl 0x559e9dac57c8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dac55e0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x559e9dac5660 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x559e9dac5878 <line:509:22>
| `-NonNullAttr 0x559e9dac58d0 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac5b98 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x559e9dac5918 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x559e9dac5998 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x559e9dac5a18 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x559e9dac5c50 <line:513:22>
| `-NonNullAttr 0x559e9dac5ca8 <col:63, col:80> 1 3
|-FunctionDecl 0x559e9dac5e40 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x559e9dac5cf8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x559e9dac5ee8 <line:515:22>
| `-NonNullAttr 0x559e9dac5f40 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac6128 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x559e9dac5ff0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x559e9dac61d0 <line:517:22>
| `-NonNullAttr 0x559e9dac6228 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac6330 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x559e9dac6278 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x559e9dac63d8 <line:519:22>
| `-NonNullAttr 0x559e9dac6430 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac6658 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dac6478 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x559e9dac64f8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x559e9dac6708 <line:523:22>
| `-NonNullAttr 0x559e9dac6760 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac6968 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dac67a8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x559e9dac6828 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x559e9dac6a18 <line:526:22>
| `-NonNullAttr 0x559e9dac6a70 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac6c18 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dac6ab8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x559e9dac6b38 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x559e9dac6cc8 <line:529:22>
| `-NonNullAttr 0x559e9dac6d20 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac7f20 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dac6d68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x559e9dac7e60 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x559e9dac7fd0 <line:531:22>
| `-NonNullAttr 0x559e9dac8028 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac81d8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dac8078 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x559e9dac80f8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x559e9dac8288 <line:535:22>
| `-NonNullAttr 0x559e9dac82e0 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac8468 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dac8328 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x559e9dac83a8 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x559e9dac8518 <line:538:22>
| `-NonNullAttr 0x559e9dac8570 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac8718 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dac85b8 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x559e9dac8638 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x559e9dac87c8 <line:542:22>
| `-NonNullAttr 0x559e9dac8820 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac89a8 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dac8868 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x559e9dac88e8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x559e9dac8a58 <line:545:22>
| `-NonNullAttr 0x559e9dac8ab0 <col:63, col:77> 1
|-FunctionDecl 0x559e9dac8c98 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x559e9dac8af8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x559e9dac8b78 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x559e9dac8d48 <line:548:22>
| `-NonNullAttr 0x559e9dac8da0 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dac9f58 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dac8de8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x559e9dac9e98 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x559e9daca008 <line:551:22>
| `-NonNullAttr 0x559e9daca060 <col:63, col:77> 1
|-FunctionDecl 0x559e9daca398 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x559e9daca140 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x559e9daca250 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x559e9daca448 <col:29>
| `-NonNullAttr 0x559e9daca4a0 <col:70, col:84> 1
|-FunctionDecl 0x559e9daca618 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x559e9daca4e8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x559e9daca6c0 <line:556:22>
| `-NonNullAttr 0x559e9daca718 <col:63, col:77> 1
|-FunctionDecl 0x559e9daca820 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x559e9daca768 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x559e9daca8c8 <line:558:22>
| `-NonNullAttr 0x559e9daca920 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacaa20 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x559e9daca968 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x559e9dacaac8 <line:560:19>
| `-NonNullAttr 0x559e9dacab20 <col:49, col:63> 1
|-FunctionDecl 0x559e9dacad58 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x559e9dacab68 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x559e9dacabf8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x559e9dacae08 <col:39>
| `-NonNullAttr 0x559e9dacae90 <col:69, col:86> 1 2
|-FunctionDecl 0x559e9dacaf90 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x559e9dacaed8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x559e9dacb038 <line:565:22>
| `-NonNullAttr 0x559e9dacb090 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacb190 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x559e9dacb0d8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x559e9dacb238 <line:567:22>
| `-NonNullAttr 0x559e9dacb290 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacb448 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x559e9dacb2d8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x559e9dacb368 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x559e9dacb4f8 <col:39>
| `-NonNullAttr 0x559e9dacb550 <col:69, col:86> 1 2
|-FunctionDecl 0x559e9dacb650 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x559e9dacb598 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x559e9dacb6f8 <line:572:22>
| `-NonNullAttr 0x559e9dacb750 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacb938 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x559e9dacb800 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x559e9dacb9e0 <line:574:22>
| `-NonNullAttr 0x559e9dacba38 <col:63, col:77> 1
|-FunctionDecl 0x559e9dacbb40 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x559e9dacba88 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x559e9dacbbe8 <line:576:22>
| `-NonNullAttr 0x559e9dacbc40 <col:63, col:77> 1
|-FunctionDecl 0x559e9dacbea0 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dacbc88 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x559e9dacbd08 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x559e9dacbf50 <line:580:22>
| `-NonNullAttr 0x559e9dacbfa8 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dacc1b8 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dacbff8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x559e9dacc078 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x559e9dacc268 <line:583:22>
| `-NonNullAttr 0x559e9dacc2c0 <col:63, col:77> 1
|-FunctionDecl 0x559e9dacc468 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dacc308 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x559e9dacc388 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x559e9dacc518 <line:587:22>
| `-NonNullAttr 0x559e9dacc570 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dacc6f8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dacc5b8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x559e9dacc638 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x559e9dacc7a8 <col:36>
| `-NonNullAttr 0x559e9dacc800 <col:77, col:91> 1
|-FunctionDecl 0x559e9daccb38 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x559e9dacc8e0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x559e9dacc9f0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x559e9daccbe8 <line:592:22>
| `-NonNullAttr 0x559e9daccc40 <col:63, col:77> 1
|-FunctionDecl 0x559e9daccdb8 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x559e9daccc88 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x559e9dacce60 <line:594:22>
| `-NonNullAttr 0x559e9daccee0 <col:63, col:77> 1
|-FunctionDecl 0x559e9daccfe0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x559e9daccf28 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x559e9dacd088 <line:596:22>
| `-NonNullAttr 0x559e9dacd0e0 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacd1e0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x559e9dacd128 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x559e9dacd288 <line:598:22>
| `-NonNullAttr 0x559e9dacd2e0 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacd508 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x559e9dacd328 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x559e9dacd3a0 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x559e9dacd5b8 <line:601:22, col:39> 1 2
|-FunctionDecl 0x559e9dacd8e8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x559e9dacd638 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x559e9dacd6b0 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x559e9dacd740 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x559e9dacd9a0 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x559e9dacdbb8 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x559e9dacda80 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x559e9dacdc60 <line:607:22>
| `-NonNullAttr 0x559e9dacdcb8 <col:63, col:77> 1
|-FunctionDecl 0x559e9dacddc0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x559e9dacdd08 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x559e9dacde68 <line:609:22>
| `-NonNullAttr 0x559e9dacdef0 <col:63, col:77> 1
|-FunctionDecl 0x559e9dace118 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dacdf38 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x559e9dacdfb8 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x559e9dace1c8 <line:613:22>
| `-NonNullAttr 0x559e9dace220 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dace428 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dace268 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x559e9dace2e8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x559e9dace4d8 <col:37>
| `-NonNullAttr 0x559e9dace530 <col:78, col:92> 1
|-FunctionDecl 0x559e9dace748 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x559e9dace578 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x559e9dace620 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x559e9dace7f8 <line:619:22>
| `-NonNullAttr 0x559e9dace850 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dacea18 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x559e9dace898 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x559e9dace910 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x559e9daceac8 <line:622:22>
| `-NonNullAttr 0x559e9daceb20 <col:63, col:77> 1
|-FunctionDecl 0x559e9dacedc8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x559e9dacec00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x559e9dacec80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x559e9dacee78 <line:624:22>
| `-NonNullAttr 0x559e9dacef00 <col:63, col:77> 1
|-FunctionDecl 0x559e9dacf078 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x559e9dacef48 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x559e9dacf120 <line:626:22>
| `-NonNullAttr 0x559e9dacf178 <col:63, col:77> 1
|-FunctionDecl 0x559e9dacf280 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x559e9dacf1c8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x559e9dacf328 <line:628:22>
| `-NonNullAttr 0x559e9dacf380 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacf480 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x559e9dacf3c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x559e9dacf528 <line:630:22>
| `-NonNullAttr 0x559e9dacf580 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacf680 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x559e9dacf5c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x559e9dacf728 <line:632:22>
| `-NonNullAttr 0x559e9dacf780 <col:52, col:66> 1
|-FunctionDecl 0x559e9dacfb58 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x559e9dacf860 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x559e9dacf970 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x559e9dacf9f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x559e9dacfc10 <line:636:22>
| `-NonNullAttr 0x559e9dacfc68 <col:63, col:77> 1
|-FunctionDecl 0x559e9dacfde8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x559e9dacfcb8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x559e9dacfe90 <line:638:22>
| `-NonNullAttr 0x559e9dacff10 <col:63, col:77> 1
|-FunctionDecl 0x559e9dad0010 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x559e9dacff58 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x559e9dad00b8 <line:640:22>
| `-NonNullAttr 0x559e9dad0110 <col:52, col:66> 1
|-FunctionDecl 0x559e9dad02f8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x559e9dad01c0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x559e9dad03a0 <line:642:22>
| `-NonNullAttr 0x559e9dad03f8 <col:63, col:77> 1
|-FunctionDecl 0x559e9dad0500 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x559e9dad0448 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x559e9dad05a8 <line:644:22>
| `-NonNullAttr 0x559e9dad0600 <col:63, col:77> 1
|-FunctionDecl 0x559e9dad0828 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x559e9dad0648 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x559e9dad06c8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x559e9dad08d8 <line:648:22>
| `-NonNullAttr 0x559e9dad0930 <col:63, col:80> 1 2
|-FunctionDecl 0x559e9dad0b38 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x559e9dad0978 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x559e9dad09f8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x559e9dad0be8 <line:651:22>
| `-NonNullAttr 0x559e9dad0c40 <col:63, col:77> 1
|-FunctionDecl 0x559e9dad0fa8 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x559e9dad0d20 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x559e9dad0e40 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x559e9dad1058 <line:654:22>
| `-NonNullAttr 0x559e9dad10b0 <col:63, col:77> 1
|-FunctionDecl 0x559e9dad1208 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x559e9dad10f8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x559e9dad12b0 <col:69>
|-FunctionDecl 0x559e9dad1428 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x559e9dad1318 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x559e9dad14d0 <col:72>
|-FunctionDecl 0x559e9dad1708 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x559e9dad1538 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x559e9dad15e8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x559e9dad17b8 <col:44>
|-FunctionDecl 0x559e9dad19d8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x559e9dad1820 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x559e9dad1898 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x559e9dad1a88 <line:661:22>
| `-NonNullAttr 0x559e9dad1ae0 <col:63, col:77> 2
|-FunctionDecl 0x559e9dad2f50 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x559e9dad1bc0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x559e9dad1cd0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x559e9dad1de0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x559e9dad3008 <col:47>
|-FunctionDecl 0x559e9dad3110 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x559e9dad3078 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x559e9dad3268 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x559e9dad31d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x559e9dad3330 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x559e9dad33f0 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x559e9dad34b0 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x559e9dad3568 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x559e9dad35e8 prev 0x559e9dad3568 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x559e9dad3650 <col:24> 'int' 0
|-VarDecl 0x559e9dad3688 <line:673:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x559e9dad3708 prev 0x559e9dad3688 <line:674:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x559e9dad3770 <col:27> 'int' 0
|-VarDecl 0x559e9dad37a8 <line:675:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x559e9dad3828 prev 0x559e9dad37a8 <line:676:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x559e9dad3890 <col:27> 'int' 0
|-VarDecl 0x559e9dad38c8 <line:677:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x559e9dad3948 prev 0x559e9dad38c8 <line:678:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x559e9dad39b0 <col:27> 'int' 0
|-VarDecl 0x559e9dad39e0 <line:679:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x559e9dad3a58 <line:680:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x559e9dad3ad8 <line:681:1, col:5> col:5 used x 'int'
|-VarDecl 0x559e9dad3b58 prev 0x559e9dad3ad8 <line:682:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x559e9dad3bc0 <col:9> 'int' 0
|-VarDecl 0x559e9dad3bf0 <line:683:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x559e9dad3c70 <line:684:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x559e9dad3ce8 <line:685:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x559e9dad3d60 <line:686:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x559e9dad3dd8 <line:687:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x559e9dad3e50 <line:688:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x559e9dad3f20 <line:689:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x559e9dad3f98 <line:690:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x559e9dad4010 <line:691:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x559e9dad4090 <line:692:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x559e9dad4110 <line:693:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x559e9dad4188 <line:694:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x559e9dad4208 <line:695:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x559e9dad4280 <line:696:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x559e9dad4300 <line:697:1, col:5> col:5 used y 'int'
|-VarDecl 0x559e9dad4380 prev 0x559e9dad4300 <line:698:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x559e9dad43e8 <col:9> 'int' 0
|-VarDecl 0x559e9dad4418 <line:699:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x559e9dad4490 <line:700:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x559e9dad45a8 prev 0x559e9dad3110 <line:701:1, line:740:1> line:701:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x559e9dad4510 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x559e9dad8fa0 <line:702:1, line:740:1>
|   |-CallExpr 0x559e9dad46b8 <line:703:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad46a0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad4650 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad4718 <line:704:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x559e9dad46d8 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   | `-IntegerLiteral 0x559e9dad46f8 <col:7> 'int' 1
|   |-CallExpr 0x559e9dad4770 <line:705:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dad4758 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad4738 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dad47c8 <line:706:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad47b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad4790 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad4ab0 <line:707:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x559e9dad47e8 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   | `-ConditionalOperator 0x559e9dad4a80 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x559e9dad48a8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x559e9dad4860 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x559e9dad4848 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559e9dad4808 <col:7> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x559e9dad4890 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x559e9dad4878 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x559e9dad4828 <col:25> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dad4a68 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dad48c8 <col:42> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x559e9dad4a48 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x559e9dad4a18 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x559e9dad4988 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x559e9dad4940 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x559e9dad4928 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x559e9dad48e8 <col:55> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x559e9dad4970 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x559e9dad4958 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x559e9dad4908 <col:73> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dad49e8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dad49a8 <col:90> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x559e9dad4a00 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad49c8 <col:102> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dad4cb8 <line:708:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad4ad0 <col:3> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad4ca0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad4c70 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x559e9dad4b90 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x559e9dad4b48 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x559e9dad4b30 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559e9dad4af0 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x559e9dad4b78 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x559e9dad4b60 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x559e9dad4b10 <col:38> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad4c28 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dad4be0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dad4bb0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dad4c58 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dad4c40 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad4c08 <col:66> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x559e9dad4fc0 <line:709:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad4cd8 <col:3> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad4fa8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad4f78 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x559e9dad4e78 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x559e9dad4d98 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x559e9dad4d50 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x559e9dad4d38 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x559e9dad4cf8 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x559e9dad4d80 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x559e9dad4d68 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x559e9dad4d18 <col:38> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x559e9dad4e58 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x559e9dad4e10 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x559e9dad4df8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x559e9dad4db8 <col:56> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x559e9dad4e40 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x559e9dad4e28 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x559e9dad4dd8 <col:74> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad4f30 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dad4ec8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dad4e98 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dad4f60 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dad4f48 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad4ef0 <col:102> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x559e9dad51c8 <line:710:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad4fe0 <col:3> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad51b0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad5180 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x559e9dad50a0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x559e9dad5058 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x559e9dad5040 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559e9dad5000 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x559e9dad5088 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x559e9dad5070 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x559e9dad5020 <col:38> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad5138 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dad50f0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dad50c0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dad5168 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dad5150 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad5118 <col:66> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x559e9dad54b0 <line:711:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad51e8 <col:3> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad5498 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad5468 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x559e9dad5388 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x559e9dad52a8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x559e9dad5260 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x559e9dad5248 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x559e9dad5208 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x559e9dad5290 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x559e9dad5278 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x559e9dad5228 <col:38> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x559e9dad5368 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x559e9dad5320 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x559e9dad5308 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x559e9dad52c8 <col:56> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x559e9dad5350 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x559e9dad5338 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x559e9dad52e8 <col:74> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad5420 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dad53d8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dad53a8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dad5450 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dad5438 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad5400 <col:102> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x559e9dad5508 <line:712:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dad54f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad54d0 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dad5560 <line:713:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad5548 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad5528 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad5628 <line:714:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad5580 <col:3> '_Bool' lvalue Var 0x559e9dad4418 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x559e9dad5608 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x559e9dad55f0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x559e9dad55a0 <col:19> '_Bool (void)' Function 0x559e9da79c80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x559e9dad56c0 <line:715:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad5648 <col:3> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x559e9dad56a0 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x559e9dad5688 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x559e9dad5668 <col:19> '_Bool (void)' Function 0x559e9da79c80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x559e9dad5738 <line:716:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad56e0 <col:3> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad5720 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad5700 <col:21> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x559e9dad57b0 <line:717:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x559e9dad5758 <col:3> 'int' lvalue Var 0x559e9dad3c70 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x559e9dad5798 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad5778 <col:15> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dad5be8 <line:718:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x559e9dad57d0 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   | `-ConditionalOperator 0x559e9dad5bb8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x559e9dad59e0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x559e9dad5900 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x559e9dad5828 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x559e9dad5810 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x559e9dad57f0 <col:8> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x559e9dad58e0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x559e9dad5878 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x559e9dad5860 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x559e9dad5840 <col:27> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x559e9dad58c8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x559e9dad58b0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x559e9dad5890 <col:46> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x559e9dad59c0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x559e9dad5958 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x559e9dad5940 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x559e9dad5920 <col:65> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x559e9dad59a8 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x559e9dad5990 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x559e9dad5970 <col:84> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dad5ba0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dad5a00 <col:101> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |   `-ParenExpr 0x559e9dad5b80 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x559e9dad5b50 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x559e9dad5ac0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x559e9dad5a78 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x559e9dad5a60 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x559e9dad5a20 <col:106> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x559e9dad5aa8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x559e9dad5a90 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x559e9dad5a40 <col:124> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dad5b20 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dad5ae0 <col:141> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x559e9dad5b38 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad5b00 <col:153> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |-BinaryOperator 0x559e9dad6118 <line:719:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x559e9dad5c08 <col:3> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x559e9dad60e8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x559e9dad60b8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x559e9dad60a0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x559e9dad5c28 <col:15> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dad60d0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dad5c48 <col:31> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x559e9dad6080 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x559e9dad6050 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x559e9dad5e58 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x559e9dad5d78 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x559e9dad5ca0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x559e9dad5c88 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x559e9dad5c68 <col:45> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x559e9dad5d58 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x559e9dad5cf0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x559e9dad5cd8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x559e9dad5cb8 <col:64> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x559e9dad5d40 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x559e9dad5d28 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x559e9dad5d08 <col:83> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x559e9dad5e38 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x559e9dad5dd0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x559e9dad5db8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x559e9dad5d98 <col:102> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x559e9dad5e20 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x559e9dad5e08 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x559e9dad5de8 <col:121> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dad6038 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dad5e78 <col:138> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x559e9dad6018 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x559e9dad5fe8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x559e9dad5f58 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x559e9dad5ef0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x559e9dad5ed8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x559e9dad5e98 <col:151> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x559e9dad5f40 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x559e9dad5f08 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x559e9dad5eb8 <col:169> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x559e9dad5fb8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x559e9dad5f78 <col:186> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x559e9dad5fd0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x559e9dad5f98 <col:198> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |-BinaryOperator 0x559e9dad6628 <line:720:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x559e9dad6138 <col:3> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x559e9dad65f8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x559e9dad65c8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x559e9dad65b0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x559e9dad6158 <col:15> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dad65e0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dad6178 <col:31> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x559e9dad6590 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x559e9dad6560 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x559e9dad6388 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x559e9dad62a8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x559e9dad61d0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x559e9dad61b8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x559e9dad6198 <col:45> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x559e9dad6288 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x559e9dad6220 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x559e9dad6208 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x559e9dad61e8 <col:64> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x559e9dad6270 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x559e9dad6258 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x559e9dad6238 <col:83> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x559e9dad6368 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x559e9dad6300 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x559e9dad62e8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x559e9dad62c8 <col:102> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x559e9dad6350 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x559e9dad6338 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x559e9dad6318 <col:121> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dad6548 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dad63a8 <col:138> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x559e9dad6528 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x559e9dad64f8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x559e9dad6468 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x559e9dad6420 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x559e9dad6408 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x559e9dad63c8 <col:151> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x559e9dad6450 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x559e9dad6438 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x559e9dad63e8 <col:169> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x559e9dad64c8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x559e9dad6488 <col:186> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x559e9dad64e0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x559e9dad64a8 <col:198> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |-BinaryOperator 0x559e9dad6bd0 <line:721:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad6648 <col:3> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad6bb8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad6b88 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x559e9dad6b40 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dad6b28 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dad6668 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad6b70 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dad6b58 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dad6688 <col:36> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x559e9dad6b08 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x559e9dad6ad8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x559e9dad6898 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x559e9dad67b8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x559e9dad66e0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x559e9dad66c8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x559e9dad66a8 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x559e9dad6798 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x559e9dad6730 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x559e9dad6718 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x559e9dad66f8 <col:74> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x559e9dad6780 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x559e9dad6768 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x559e9dad6748 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x559e9dad6878 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x559e9dad6810 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x559e9dad67f8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x559e9dad67d8 <col:112> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x559e9dad6860 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x559e9dad6848 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x559e9dad6828 <col:131> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x559e9dad6ac0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x559e9dad6aa8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559e9dad68b8 <col:148> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x559e9dad6a88 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x559e9dad6a58 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x559e9dad6978 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x559e9dad6930 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x559e9dad6918 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x559e9dad68d8 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x559e9dad6960 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x559e9dad6948 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x559e9dad68f8 <col:184> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x559e9dad6a10 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x559e9dad69c8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x559e9dad6998 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x559e9dad6a40 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x559e9dad6a28 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x559e9dad69f0 <col:212> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x559e9dad71a8 <line:722:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad6bf0 <col:3> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad7190 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad7160 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x559e9dad7118 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dad7100 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dad6c10 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad7148 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dad7130 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dad6c30 <col:36> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x559e9dad70e0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x559e9dad70b0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x559e9dad6e40 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x559e9dad6d60 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x559e9dad6c88 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x559e9dad6c70 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x559e9dad6c50 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x559e9dad6d40 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x559e9dad6cd8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x559e9dad6cc0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x559e9dad6ca0 <col:74> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x559e9dad6d28 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x559e9dad6d10 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x559e9dad6cf0 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x559e9dad6e20 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x559e9dad6db8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x559e9dad6da0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x559e9dad6d80 <col:112> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x559e9dad6e08 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x559e9dad6df0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x559e9dad6dd0 <col:131> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x559e9dad7098 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x559e9dad7080 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559e9dad6e60 <col:148> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x559e9dad7060 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x559e9dad7030 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x559e9dad6f20 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x559e9dad6ed8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x559e9dad6ec0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x559e9dad6e80 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x559e9dad6f08 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x559e9dad6ef0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x559e9dad6ea0 <col:184> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x559e9dad7000 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x559e9dad6f80 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x559e9dad6f50 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x559e9dad7018 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x559e9dad6fd8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x559e9dad6fa8 <col:219> 'int' 0
|   |-BinaryOperator 0x559e9dad7750 <line:723:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad71c8 <col:3> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad7738 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad7708 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x559e9dad76c0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dad76a8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dad71e8 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad76f0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dad76d8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dad7208 <col:36> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x559e9dad7688 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x559e9dad7658 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x559e9dad7418 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x559e9dad7338 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x559e9dad7260 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x559e9dad7248 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x559e9dad7228 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x559e9dad7318 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x559e9dad72b0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x559e9dad7298 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x559e9dad7278 <col:74> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x559e9dad7300 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x559e9dad72e8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x559e9dad72c8 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x559e9dad73f8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x559e9dad7390 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x559e9dad7378 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x559e9dad7358 <col:112> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x559e9dad73e0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x559e9dad73c8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x559e9dad73a8 <col:131> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x559e9dad7640 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x559e9dad7628 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559e9dad7438 <col:148> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x559e9dad7608 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x559e9dad75d8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x559e9dad74f8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x559e9dad74b0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x559e9dad7498 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x559e9dad7458 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x559e9dad74e0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x559e9dad74c8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x559e9dad7478 <col:184> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x559e9dad7590 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x559e9dad7548 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x559e9dad7518 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x559e9dad75c0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x559e9dad75a8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x559e9dad7570 <col:212> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x559e9dad7d18 <line:724:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad7770 <col:3> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad7d00 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad7cd0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x559e9dad7c88 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dad7c70 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dad7790 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad7cb8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dad7ca0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dad77b0 <col:36> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x559e9dad7c50 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x559e9dad7c20 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x559e9dad79c0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x559e9dad78e0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x559e9dad7808 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x559e9dad77f0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x559e9dad77d0 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x559e9dad78c0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x559e9dad7858 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x559e9dad7840 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x559e9dad7820 <col:74> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x559e9dad78a8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x559e9dad7890 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x559e9dad7870 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x559e9dad79a0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x559e9dad7938 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x559e9dad7920 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x559e9dad7900 <col:112> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x559e9dad7988 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x559e9dad7970 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x559e9dad7950 <col:131> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x559e9dad7c08 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x559e9dad7bf0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559e9dad79e0 <col:148> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x559e9dad7bd0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x559e9dad7ba0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x559e9dad7aa0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x559e9dad7a58 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x559e9dad7a40 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x559e9dad7a00 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x559e9dad7a88 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x559e9dad7a70 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x559e9dad7a20 <col:184> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x559e9dad7b70 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x559e9dad7af0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x559e9dad7ac0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x559e9dad7b88 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x559e9dad7b48 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x559e9dad7b18 <col:219> 'int' 0
|   |-BinaryOperator 0x559e9dad7d90 <line:725:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x559e9dad7d38 <col:3> 'int' lvalue Var 0x559e9dad3708 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x559e9dad7d78 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad7d58 <col:25> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dad7ec0 <line:726:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x559e9dad7db0 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   | `-ConditionalOperator 0x559e9dad7e90 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x559e9dad7e48 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x559e9dad7e30 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x559e9dad7dd0 <col:7> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dad7e60 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dad7df0 <col:25> 'int' lvalue Var 0x559e9dad3c70 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x559e9dad7e78 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x559e9dad7e10 <col:37> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dad7f88 <line:727:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad7ee0 <col:3> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x559e9dad7f60 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x559e9dad7f00 <col:28> 'int' 0
|   |-CallExpr 0x559e9dad7fe0 <line:728:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dad7fc8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad7fa8 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dad8038 <line:729:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad8020 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad8000 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad8320 <line:730:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x559e9dad8058 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   | `-ConditionalOperator 0x559e9dad82f0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x559e9dad8118 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x559e9dad80d0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x559e9dad80b8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559e9dad8078 <col:7> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x559e9dad8100 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x559e9dad80e8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x559e9dad8098 <col:25> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dad82d8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dad8138 <col:42> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x559e9dad82b8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x559e9dad8288 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x559e9dad81f8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x559e9dad81b0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x559e9dad8198 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x559e9dad8158 <col:55> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x559e9dad81e0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x559e9dad81c8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x559e9dad8178 <col:73> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dad8258 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dad8218 <col:90> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x559e9dad8270 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad8238 <col:102> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dad8528 <line:731:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad8340 <col:3> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad8510 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad84e0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x559e9dad8400 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x559e9dad83b8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x559e9dad83a0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559e9dad8360 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x559e9dad83e8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x559e9dad83d0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x559e9dad8380 <col:38> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad8498 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dad8450 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dad8420 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dad84c8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dad84b0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad8478 <col:66> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x559e9dad8810 <line:732:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad8548 <col:3> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad87f8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad87c8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x559e9dad86e8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x559e9dad8608 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x559e9dad85c0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x559e9dad85a8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x559e9dad8568 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x559e9dad85f0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x559e9dad85d8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x559e9dad8588 <col:38> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x559e9dad86c8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x559e9dad8680 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x559e9dad8668 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x559e9dad8628 <col:56> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x559e9dad86b0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x559e9dad8698 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x559e9dad8648 <col:74> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad8780 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dad8738 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dad8708 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dad87b0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dad8798 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad8760 <col:102> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x559e9dad8a18 <line:733:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad8830 <col:3> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad8a00 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad89d0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x559e9dad88f0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x559e9dad88a8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x559e9dad8890 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559e9dad8850 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x559e9dad88d8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x559e9dad88c0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x559e9dad8870 <col:38> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad8988 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dad8940 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dad8910 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dad89b8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dad89a0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad8968 <col:66> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x559e9dad8d00 <line:734:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad8a38 <col:3> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad8ce8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dad8cb8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x559e9dad8bd8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x559e9dad8af8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x559e9dad8ab0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x559e9dad8a98 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x559e9dad8a58 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x559e9dad8ae0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x559e9dad8ac8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x559e9dad8a78 <col:38> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x559e9dad8bb8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x559e9dad8b70 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x559e9dad8b58 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x559e9dad8b18 <col:56> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x559e9dad8ba0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x559e9dad8b88 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x559e9dad8b38 <col:74> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dad8c70 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dad8c28 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dad8bf8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dad8ca0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dad8c88 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dad8c50 <col:102> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x559e9dad8d58 <line:735:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dad8d40 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad8d20 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dad8db0 <line:736:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad8d98 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad8d78 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad8e68 <line:737:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x559e9dad8dd0 <col:3> 'int' lvalue Var 0x559e9dad35e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x559e9dad8e48 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x559e9dad8e30 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dad8df0 <col:22> 'int' lvalue Var 0x559e9dad35e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x559e9dad8e10 <col:41> 'int' 1
|   |-CallExpr 0x559e9dad8ec0 <line:738:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dad8ea8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad8e88 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x559e9dad8f90 <line:739:3, col:36>
|     `-CallExpr 0x559e9dad8f70 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x559e9dad8f30 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x559e9dad8ee0 <col:10> 'void *(void)' Function 0x559e9da79fc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x559e9dad9188 prev 0x559e9dad3268 <line:741:1, line:787:1> line:741:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x559e9dad90f0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x559e9dadd4a0 <line:742:1, line:787:1>
|   |-CallExpr 0x559e9dad9268 <line:743:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad9250 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad9230 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad92e0 <line:744:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x559e9dad9288 <col:3> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x559e9dad92c8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad92a8 <col:15> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |-BinaryOperator 0x559e9dad9340 <line:745:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x559e9dad9300 <col:3> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x559e9dad9320 <col:15> 'int' 2
|   |-BinaryOperator 0x559e9dad93b8 <line:746:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad9360 <col:3> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad93a0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad9380 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x559e9dad9450 <line:747:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad93d8 <col:3> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x559e9dad9428 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x559e9dad93f8 <col:27> 'int' 1
|   |-CallExpr 0x559e9dad95d8 <line:748:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x559e9dad95c0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559e9dad9470 <col:3> 'void (int)' Function 0x559e9da7a238 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x559e9dad9570 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x559e9dad9550 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x559e9dad9530 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x559e9dad94e8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x559e9dad94d0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x559e9dad9490 <col:23> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x559e9dad9518 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x559e9dad9500 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x559e9dad94b0 <col:41> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x559e9dad9658 <line:749:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad9600 <col:3> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad9640 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad9620 <col:20> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x559e9dad96d0 <line:750:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad9678 <col:3> '_Bool' lvalue Var 0x559e9dad3f20 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad96b8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad9698 <col:20> '_Bool' lvalue Var 0x559e9dad3d60 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x559e9dad9748 <line:751:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad96f0 <col:3> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad9730 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad9710 <col:20> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x559e9dad97e0 <line:752:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad9768 <col:3> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x559e9dad97b8 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x559e9dad9788 <col:27> 'int' 1
|   |-CallExpr 0x559e9dad9838 <line:753:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dad9820 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad9800 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dad9890 <line:754:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad9878 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad9858 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad98f0 <line:755:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x559e9dad98b0 <col:3> 'int' lvalue Var 0x559e9dad4380 'y' 'int'
|   | `-IntegerLiteral 0x559e9dad98d0 <col:7> 'int' 1
|   |-CallExpr 0x559e9dad9948 <line:756:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dad9930 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad9910 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dad99a0 <line:757:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad9988 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad9968 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad9a18 <line:758:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x559e9dad99c0 <col:3> 'int' lvalue Var 0x559e9dad3828 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x559e9dad9a00 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad99e0 <col:25> 'int' lvalue Var 0x559e9dad4380 'y' 'int'
|   |-CallExpr 0x559e9dad9a70 <line:759:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dad9a58 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad9a38 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dad9ac8 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dad9ab0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dad9a90 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dad9b60 <line:761:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad9ae8 <col:3> '_Bool' lvalue Var 0x559e9dad4418 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x559e9dad9b40 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x559e9dad9b28 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x559e9dad9b08 <col:19> '_Bool (void)' Function 0x559e9da79c80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x559e9dad9bf8 <line:762:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad9b80 <col:3> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x559e9dad9bd8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x559e9dad9bc0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x559e9dad9ba0 <col:19> '_Bool (void)' Function 0x559e9da79c80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x559e9dad9c70 <line:763:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dad9c18 <col:3> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dad9c58 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad9c38 <col:21> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x559e9dad9ce8 <line:764:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x559e9dad9c90 <col:3> 'int' lvalue Var 0x559e9dad3c70 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x559e9dad9cd0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dad9cb0 <col:15> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dada148 <line:765:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x559e9dad9d08 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   | `-ConditionalOperator 0x559e9dada118 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x559e9dad9f18 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x559e9dad9e38 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x559e9dad9d60 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x559e9dad9d48 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x559e9dad9d28 <col:8> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x559e9dad9e18 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x559e9dad9db0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x559e9dad9d98 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x559e9dad9d78 <col:27> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x559e9dad9e00 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x559e9dad9de8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x559e9dad9dc8 <col:46> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x559e9dad9ef8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x559e9dad9e90 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x559e9dad9e78 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x559e9dad9e58 <col:65> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x559e9dad9ee0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x559e9dad9ec8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x559e9dad9ea8 <col:84> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dada100 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dad9f38 <col:101> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |   `-ParenExpr 0x559e9dada0e0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x559e9dada0b0 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x559e9dada020 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x559e9dad9fd8 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x559e9dad9fc0 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x559e9dad9f80 <col:106> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x559e9dada008 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x559e9dad9ff0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x559e9dad9fa0 <col:124> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dada080 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dada040 <col:141> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x559e9dada098 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dada060 <col:153> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |-BinaryOperator 0x559e9dada658 <line:766:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x559e9dada168 <col:3> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x559e9dada628 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x559e9dada5f8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x559e9dada5e0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x559e9dada188 <col:15> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dada610 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dada1a8 <col:31> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x559e9dada5c0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x559e9dada590 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x559e9dada3b8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x559e9dada2d8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x559e9dada200 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x559e9dada1e8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x559e9dada1c8 <col:45> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x559e9dada2b8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x559e9dada250 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x559e9dada238 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x559e9dada218 <col:64> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x559e9dada2a0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x559e9dada288 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x559e9dada268 <col:83> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x559e9dada398 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x559e9dada330 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x559e9dada318 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x559e9dada2f8 <col:102> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x559e9dada380 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x559e9dada368 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x559e9dada348 <col:121> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dada578 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dada3d8 <col:138> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x559e9dada558 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x559e9dada528 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x559e9dada498 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x559e9dada450 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x559e9dada438 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x559e9dada3f8 <col:151> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x559e9dada480 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x559e9dada468 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x559e9dada418 <col:169> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x559e9dada4f8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x559e9dada4b8 <col:186> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x559e9dada510 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x559e9dada4d8 <col:198> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |-BinaryOperator 0x559e9dadab68 <line:767:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x559e9dada678 <col:3> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x559e9dadab38 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x559e9dadab08 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x559e9dadaaf0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x559e9dada698 <col:15> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dadab20 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dada6b8 <col:31> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x559e9dadaad0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x559e9dadaaa0 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x559e9dada8c8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x559e9dada7e8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x559e9dada710 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x559e9dada6f8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x559e9dada6d8 <col:45> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x559e9dada7c8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x559e9dada760 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x559e9dada748 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x559e9dada728 <col:64> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x559e9dada7b0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x559e9dada798 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x559e9dada778 <col:83> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x559e9dada8a8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x559e9dada840 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x559e9dada828 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x559e9dada808 <col:102> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x559e9dada890 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x559e9dada878 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x559e9dada858 <col:121> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dadaa88 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dada8e8 <col:138> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x559e9dadaa68 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x559e9dadaa38 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x559e9dada9a8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x559e9dada960 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x559e9dada948 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x559e9dada908 <col:151> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x559e9dada990 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x559e9dada978 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x559e9dada928 <col:169> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x559e9dadaa08 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x559e9dada9c8 <col:186> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x559e9dadaa20 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x559e9dada9e8 <col:198> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |-BinaryOperator 0x559e9dadb120 <line:768:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadab88 <col:3> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dadb108 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dadb0d8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x559e9dadb090 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dadb078 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dadaba8 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dadb0c0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dadb0a8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dadabc8 <col:36> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x559e9dadb058 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x559e9dadb028 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x559e9dadadd8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x559e9dadacf8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x559e9dadac20 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x559e9dadac08 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x559e9dadabe8 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x559e9dadacd8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x559e9dadac70 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x559e9dadac58 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x559e9dadac38 <col:74> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x559e9dadacc0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x559e9dadaca8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x559e9dadac88 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x559e9dadadb8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x559e9dadad50 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x559e9dadad38 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x559e9dadad18 <col:112> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x559e9dadada0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x559e9dadad88 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x559e9dadad68 <col:131> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x559e9dadb010 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x559e9dadaff8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559e9dadadf8 <col:148> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x559e9dadafd8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x559e9dadafa8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x559e9dadaeb8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x559e9dadae70 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x559e9dadae58 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x559e9dadae18 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x559e9dadaea0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x559e9dadae88 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x559e9dadae38 <col:184> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x559e9dadaf50 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x559e9dadaf08 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x559e9dadaed8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x559e9dadaf90 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x559e9dadaf68 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x559e9dadaf30 <col:212> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x559e9dadb6e8 <line:769:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadb140 <col:3> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dadb6d0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dadb6a0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x559e9dadb658 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dadb640 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dadb160 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dadb688 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dadb670 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dadb180 <col:36> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x559e9dadb620 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x559e9dadb5f0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x559e9dadb390 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x559e9dadb2b0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x559e9dadb1d8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x559e9dadb1c0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x559e9dadb1a0 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x559e9dadb290 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x559e9dadb228 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x559e9dadb210 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x559e9dadb1f0 <col:74> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x559e9dadb278 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x559e9dadb260 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x559e9dadb240 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x559e9dadb370 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x559e9dadb308 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x559e9dadb2f0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x559e9dadb2d0 <col:112> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x559e9dadb358 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x559e9dadb340 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x559e9dadb320 <col:131> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x559e9dadb5d8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x559e9dadb5c0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559e9dadb3b0 <col:148> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x559e9dadb5a0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x559e9dadb570 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x559e9dadb470 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x559e9dadb428 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x559e9dadb410 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x559e9dadb3d0 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x559e9dadb458 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x559e9dadb440 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x559e9dadb3f0 <col:184> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x559e9dadb540 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x559e9dadb4c0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x559e9dadb490 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x559e9dadb558 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x559e9dadb518 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x559e9dadb4e8 <col:219> 'int' 0
|   |-BinaryOperator 0x559e9dadbc90 <line:770:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadb708 <col:3> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dadbc78 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dadbc48 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x559e9dadbc00 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dadbbe8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dadb728 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dadbc30 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dadbc18 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dadb748 <col:36> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x559e9dadbbc8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x559e9dadbb98 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x559e9dadb958 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x559e9dadb878 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x559e9dadb7a0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x559e9dadb788 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x559e9dadb768 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x559e9dadb858 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x559e9dadb7f0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x559e9dadb7d8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x559e9dadb7b8 <col:74> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x559e9dadb840 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x559e9dadb828 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x559e9dadb808 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x559e9dadb938 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x559e9dadb8d0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x559e9dadb8b8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x559e9dadb898 <col:112> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x559e9dadb920 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x559e9dadb908 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x559e9dadb8e8 <col:131> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x559e9dadbb80 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x559e9dadbb68 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559e9dadb978 <col:148> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x559e9dadbb48 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x559e9dadbb18 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x559e9dadba38 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x559e9dadb9f0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x559e9dadb9d8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x559e9dadb998 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x559e9dadba20 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x559e9dadba08 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x559e9dadb9b8 <col:184> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x559e9dadbad0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x559e9dadba88 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x559e9dadba58 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x559e9dadbb00 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x559e9dadbae8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x559e9dadbab0 <col:212> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x559e9dadc278 <line:771:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadbcb0 <col:3> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dadc260 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dadc230 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x559e9dadc1e8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dadc1d0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dadbcd0 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dadc218 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x559e9dadc200 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x559e9dadbcf0 <col:36> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x559e9dadc1b0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x559e9dadc180 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x559e9dadbf00 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x559e9dadbe20 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x559e9dadbd48 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x559e9dadbd30 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x559e9dadbd10 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x559e9dadbe00 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x559e9dadbd98 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x559e9dadbd80 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x559e9dadbd60 <col:74> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x559e9dadbde8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x559e9dadbdd0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x559e9dadbdb0 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x559e9dadbee0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x559e9dadbe78 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x559e9dadbe60 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x559e9dadbe40 <col:112> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x559e9dadbec8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x559e9dadbeb0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x559e9dadbe90 <col:131> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x559e9dadc168 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x559e9dadc150 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559e9dadbf20 <col:148> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x559e9dadc130 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x559e9dadc100 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x559e9dadc000 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x559e9dadbfb8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x559e9dadbfa0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x559e9dadbf40 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x559e9dadbfe8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x559e9dadbfd0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x559e9dadbf60 <col:184> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x559e9dadc0d0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x559e9dadc050 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x559e9dadc020 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x559e9dadc0e8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x559e9dadc0a8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x559e9dadc078 <col:219> 'int' 0
|   |-BinaryOperator 0x559e9dadc2f0 <line:772:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x559e9dadc298 <col:3> 'int' lvalue Var 0x559e9dad3948 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x559e9dadc2d8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559e9dadc2b8 <col:25> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dadc420 <line:773:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x559e9dadc310 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   | `-ConditionalOperator 0x559e9dadc3f0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x559e9dadc3a8 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x559e9dadc390 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x559e9dadc330 <col:7> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dadc3c0 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dadc350 <col:25> 'int' lvalue Var 0x559e9dad3c70 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x559e9dadc3d8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x559e9dadc370 <col:37> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dadc4b8 <line:774:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadc440 <col:3> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x559e9dadc490 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x559e9dadc460 <col:28> 'int' 0
|   |-CallExpr 0x559e9dadc510 <line:775:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dadc4f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dadc4d8 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dadc568 <line:776:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dadc550 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dadc530 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dadc850 <line:777:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x559e9dadc588 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   | `-ConditionalOperator 0x559e9dadc820 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x559e9dadc648 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x559e9dadc600 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x559e9dadc5e8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559e9dadc5a8 <col:7> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x559e9dadc630 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x559e9dadc618 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x559e9dadc5c8 <col:25> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x559e9dadc808 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dadc668 <col:42> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x559e9dadc7e8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x559e9dadc7b8 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x559e9dadc728 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x559e9dadc6e0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x559e9dadc6c8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x559e9dadc688 <col:55> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x559e9dadc710 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x559e9dadc6f8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x559e9dadc6a8 <col:73> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x559e9dadc788 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x559e9dadc748 <col:90> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x559e9dadc7a0 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dadc768 <col:102> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
|   |-BinaryOperator 0x559e9dadca58 <line:778:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadc870 <col:3> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dadca40 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dadca10 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x559e9dadc930 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x559e9dadc8e8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x559e9dadc8d0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559e9dadc890 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x559e9dadc918 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x559e9dadc900 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x559e9dadc8b0 <col:38> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dadc9c8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dadc980 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dadc950 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dadc9f8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dadc9e0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dadc9a8 <col:66> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x559e9dadcd40 <line:779:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadca78 <col:3> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dadcd28 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dadccf8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x559e9dadcc18 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x559e9dadcb38 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x559e9dadcaf0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x559e9dadcad8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x559e9dadca98 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x559e9dadcb20 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x559e9dadcb08 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x559e9dadcab8 <col:38> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x559e9dadcbf8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x559e9dadcbb0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x559e9dadcb98 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x559e9dadcb58 <col:56> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x559e9dadcbe0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x559e9dadcbc8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x559e9dadcb78 <col:74> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dadccb0 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dadcc68 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dadcc38 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dadcce0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dadccc8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dadcc90 <col:102> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x559e9dadcf48 <line:780:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadcd60 <col:3> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dadcf30 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dadcf00 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x559e9dadce20 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x559e9dadcdd8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x559e9dadcdc0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x559e9dadcd80 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x559e9dadce08 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x559e9dadcdf0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x559e9dadcda0 <col:38> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dadceb8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dadce70 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dadce40 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dadcee8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dadced0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dadce98 <col:66> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x559e9dadd258 <line:781:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x559e9dadcf68 <col:3> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x559e9dadd240 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x559e9dadd210 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x559e9dadd130 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x559e9dadd050 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x559e9dadd008 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x559e9dadcff0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x559e9dadcfb0 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x559e9dadd038 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x559e9dadd020 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x559e9dadcfd0 <col:38> '_Bool' lvalue Var 0x559e9dad3dd8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x559e9dadd110 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x559e9dadd0c8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x559e9dadd0b0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x559e9dadd070 <col:56> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x559e9dadd0f8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x559e9dadd0e0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x559e9dadd090 <col:74> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x559e9dadd1c8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x559e9dadd180 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x559e9dadd150 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x559e9dadd1f8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x559e9dadd1e0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x559e9dadd1a8 <col:102> '_Bool' lvalue Var 0x559e9dad3f98 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x559e9dadd2b0 <line:782:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dadd298 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dadd278 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x559e9dadd308 <line:783:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x559e9dadd2f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dadd2d0 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x559e9dadd3c0 <line:784:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x559e9dadd328 <col:3> 'int' lvalue Var 0x559e9dad35e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x559e9dadd3a0 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x559e9dadd388 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559e9dadd348 <col:22> 'int' lvalue Var 0x559e9dad35e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x559e9dadd368 <col:41> 'int' 1
|   |-CallExpr 0x559e9dadd418 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x559e9dadd400 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x559e9dadd3e0 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x559e9dadd490 <line:786:3, col:36>
|     `-CallExpr 0x559e9dadd470 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x559e9dadd458 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x559e9dadd438 <col:10> 'void *(void)' Function 0x559e9da79fc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x559e9dadd630 prev 0x559e9dad3330 <line:788:1, line:790:1> line:788:6 fence 'void ()'
| `-CompoundStmt 0x559e9dadd6d0 <line:789:1, line:790:1>
|-FunctionDecl 0x559e9dadd700 prev 0x559e9dad33f0 <line:791:1, line:793:1> line:791:6 isync 'void ()'
| `-CompoundStmt 0x559e9dadd7a0 <line:792:1, line:793:1>
|-FunctionDecl 0x559e9dadd7d0 prev 0x559e9dad34b0 <line:794:1, line:796:1> line:794:6 lwfence 'void ()'
| `-CompoundStmt 0x559e9dadd870 <line:795:1, line:796:1>
`-FunctionDecl 0x559e9dadd8d8 <line:797:1, line:832:1> line:797:5 main 'int ()'
  `-CompoundStmt 0x559e9dae1c70 <line:798:1, line:832:1>
    |-DeclStmt 0x559e9dadd9f0 <line:799:3, col:18>
    | `-VarDecl 0x559e9dadd988 <col:3, col:13> col:13 used t1623 'pthread_t':'unsigned long'
    |-CallExpr 0x559e9daddbf8 <line:800:3, col:54> 'int'
    | |-ImplicitCastExpr 0x559e9daddbe0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559e9dadda08 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x559e9daba9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x559e9dadda48 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x559e9dadda28 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x559e9dadd988 't1623' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x559e9daddc38 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x559e9daddac0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x559e9dadda98 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x559e9dadda60 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x559e9daddc50 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559e9daddae0 <col:39> 'void *(void *)' Function 0x559e9dad45a8 'P0' 'void *(void *)'
    | `-ParenExpr 0x559e9daddb60 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x559e9daddb38 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x559e9daddb00 <col:52> 'int' 0
    |-DeclStmt 0x559e9daddce0 <line:801:3, col:18>
    | `-VarDecl 0x559e9daddc78 <col:3, col:13> col:13 used t1624 'pthread_t':'unsigned long'
    |-CallExpr 0x559e9dadde88 <line:802:3, col:54> 'int'
    | |-ImplicitCastExpr 0x559e9dadde70 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559e9daddcf8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x559e9daba9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x559e9daddd38 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x559e9daddd18 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x559e9daddc78 't1624' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x559e9daddec8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x559e9dadddb0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x559e9daddd88 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x559e9daddd50 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x559e9daddee0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559e9dadddd0 <col:39> 'void *(void *)' Function 0x559e9dad9188 'P1' 'void *(void *)'
    | `-ParenExpr 0x559e9dadde50 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x559e9dadde28 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x559e9dadddf0 <col:52> 'int' 0
    |-CallExpr 0x559e9daddf30 <line:803:3, col:27> 'void'
    | `-ImplicitCastExpr 0x559e9daddf18 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x559e9daddef8 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x559e9dade010 <line:804:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x559e9daddf50 <col:3> '_Bool' lvalue Var 0x559e9dad39e0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x559e9daddff8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x559e9daddfd8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x559e9daddfc0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x559e9daddf70 <col:21> 'int' lvalue Var 0x559e9dad35e8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x559e9daddf90 <col:41> 'int' 2
    |-CallExpr 0x559e9dade068 <line:805:3, col:25> 'void'
    | `-ImplicitCastExpr 0x559e9dade050 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x559e9dade030 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x559e9dade0e0 <line:806:3, col:36> 'void'
    | |-ImplicitCastExpr 0x559e9dade0c8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559e9dade088 <col:3> 'void (int)' Function 0x559e9da79e50 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x559e9dade120 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x559e9dade108 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x559e9dade0a8 <col:21> '_Bool' lvalue Var 0x559e9dad39e0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x559e9dade170 <line:807:3, col:27> 'void'
    | `-ImplicitCastExpr 0x559e9dade158 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x559e9dade138 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x559e9dade458 <line:808:3, col:103> 'int' '='
    | |-DeclRefExpr 0x559e9dade190 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
    | `-ConditionalOperator 0x559e9dade428 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x559e9dade250 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x559e9dade208 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x559e9dade1f0 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x559e9dade1b0 <col:7> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x559e9dade238 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x559e9dade220 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x559e9dade1d0 <col:25> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x559e9dade410 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x559e9dade270 <col:42> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
    |   `-ParenExpr 0x559e9dade3f0 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x559e9dade3c0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x559e9dade330 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x559e9dade2e8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x559e9dade2d0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x559e9dade290 <col:55> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x559e9dade318 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x559e9dade300 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x559e9dade2b0 <col:73> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x559e9dade390 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x559e9dade350 <col:90> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x559e9dade3a8 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x559e9dade370 <col:102> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
    |-BinaryOperator 0x559e9dade660 <line:809:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x559e9dade478 <col:3> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x559e9dade648 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x559e9dade618 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x559e9dade538 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x559e9dade4f0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x559e9dade4d8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x559e9dade498 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x559e9dade520 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x559e9dade508 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x559e9dade4b8 <col:38> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x559e9dade5d0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x559e9dade588 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x559e9dade558 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x559e9dade600 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x559e9dade5e8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x559e9dade5b0 <col:66> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x559e9dade948 <line:810:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x559e9dade680 <col:3> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x559e9dade930 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x559e9dade900 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x559e9dade820 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x559e9dade740 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x559e9dade6f8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x559e9dade6e0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x559e9dade6a0 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x559e9dade728 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x559e9dade710 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x559e9dade6c0 <col:38> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x559e9dade800 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x559e9dade7b8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x559e9dade7a0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x559e9dade760 <col:56> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x559e9dade7e8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x559e9dade7d0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x559e9dade780 <col:74> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x559e9dade8b8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x559e9dade870 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x559e9dade840 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x559e9dade8e8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x559e9dade8d0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x559e9dade898 <col:102> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x559e9dadeb50 <line:811:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x559e9dade968 <col:3> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x559e9dadeb38 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x559e9dadeb08 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x559e9dadea28 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x559e9dade9e0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x559e9dade9c8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x559e9dade988 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x559e9dadea10 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x559e9dade9f8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x559e9dade9a8 <col:38> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x559e9dadeac0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x559e9dadea78 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x559e9dadea48 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x559e9dadeaf0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x559e9dadead8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x559e9dadeaa0 <col:66> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x559e9dadee38 <line:812:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x559e9dadeb70 <col:3> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x559e9dadee20 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x559e9dadedf0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x559e9daded10 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x559e9dadec30 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x559e9dadebe8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x559e9dadebd0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x559e9dadeb90 <col:20> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x559e9dadec18 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x559e9dadec00 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x559e9dadebb0 <col:38> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x559e9dadecf0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x559e9dadeca8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x559e9dadec90 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x559e9dadec50 <col:56> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x559e9dadecd8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x559e9dadecc0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x559e9dadec70 <col:74> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x559e9dadeda8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x559e9daded60 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x559e9daded30 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x559e9dadedd8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x559e9dadedc0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x559e9daded88 <col:102> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x559e9dadee90 <line:813:3, col:25> 'void'
    | `-ImplicitCastExpr 0x559e9dadee78 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x559e9dadee58 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x559e9dadeee8 <line:814:3, col:27> 'void'
    | `-ImplicitCastExpr 0x559e9dadeed0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x559e9dadeeb0 <col:3> 'void ()' Function 0x559e9da7a4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x559e9dadef80 <line:815:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x559e9dadef08 <col:3> '_Bool' lvalue Var 0x559e9dad4418 'weak$$choice0' '_Bool'
    | `-CallExpr 0x559e9dadef60 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x559e9dadef48 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x559e9dadef28 <col:19> '_Bool (void)' Function 0x559e9da79c80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x559e9dadf028 <line:816:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x559e9dadefa0 <col:3> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
    | `-CallExpr 0x559e9dadf008 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x559e9dadeff0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x559e9dadefd0 <col:19> '_Bool (void)' Function 0x559e9da79c80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x559e9dadf0a0 <line:817:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x559e9dadf048 <col:3> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x559e9dadf088 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x559e9dadf068 <col:21> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x559e9dadf118 <line:818:3, col:15> 'int' '='
    | |-DeclRefExpr 0x559e9dadf0c0 <col:3> 'int' lvalue Var 0x559e9dad3c70 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x559e9dadf100 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x559e9dadf0e0 <col:15> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
    |-BinaryOperator 0x559e9dadf550 <line:819:3, col:162> 'int' '='
    | |-DeclRefExpr 0x559e9dadf138 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
    | `-ConditionalOperator 0x559e9dadf520 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x559e9dadf348 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x559e9dadf268 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x559e9dadf190 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x559e9dadf178 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x559e9dadf158 <col:8> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x559e9dadf248 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x559e9dadf1e0 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x559e9dadf1c8 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x559e9dadf1a8 <col:27> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x559e9dadf230 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x559e9dadf218 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x559e9dadf1f8 <col:46> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x559e9dadf328 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x559e9dadf2c0 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x559e9dadf2a8 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x559e9dadf288 <col:65> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x559e9dadf310 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x559e9dadf2f8 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x559e9dadf2d8 <col:84> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x559e9dadf508 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x559e9dadf368 <col:101> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
    |   `-ParenExpr 0x559e9dadf4e8 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x559e9dadf4b8 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x559e9dadf428 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x559e9dadf3e0 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x559e9dadf3c8 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x559e9dadf388 <col:106> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x559e9dadf410 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x559e9dadf3f8 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x559e9dadf3a8 <col:124> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x559e9dadf488 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x559e9dadf448 <col:141> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x559e9dadf4a0 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x559e9dadf468 <col:153> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
    |-BinaryOperator 0x559e9dadfa60 <line:820:3, col:208> 'int' '='
    | |-DeclRefExpr 0x559e9dadf570 <col:3> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x559e9dadfa30 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x559e9dadfa00 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x559e9dadf9e8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x559e9dadf590 <col:15> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x559e9dadfa18 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x559e9dadf5b0 <col:31> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
    |   `-ParenExpr 0x559e9dadf9c8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x559e9dadf998 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x559e9dadf7c0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x559e9dadf6e0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x559e9dadf608 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x559e9dadf5f0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x559e9dadf5d0 <col:45> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x559e9dadf6c0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x559e9dadf658 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x559e9dadf640 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x559e9dadf620 <col:64> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x559e9dadf6a8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x559e9dadf690 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x559e9dadf670 <col:83> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x559e9dadf7a0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x559e9dadf738 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x559e9dadf720 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x559e9dadf700 <col:102> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x559e9dadf788 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x559e9dadf770 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x559e9dadf750 <col:121> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x559e9dadf980 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x559e9dadf7e0 <col:138> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
    |       `-ParenExpr 0x559e9dadf960 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x559e9dadf930 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x559e9dadf8a0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x559e9dadf858 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x559e9dadf840 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x559e9dadf800 <col:151> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x559e9dadf888 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x559e9dadf870 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x559e9dadf820 <col:169> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x559e9dadf900 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x559e9dadf8c0 <col:186> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x559e9dadf918 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x559e9dadf8e0 <col:198> 'int' lvalue Var 0x559e9dad4110 'x$w_buff0' 'int'
    |-BinaryOperator 0x559e9dadff70 <line:821:3, col:208> 'int' '='
    | |-DeclRefExpr 0x559e9dadfa80 <col:3> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x559e9dadff40 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x559e9dadff10 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x559e9dadfef8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x559e9dadfaa0 <col:15> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x559e9dadff28 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x559e9dadfac0 <col:31> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
    |   `-ParenExpr 0x559e9dadfed8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x559e9dadfea8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x559e9dadfcd0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x559e9dadfbf0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x559e9dadfb18 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x559e9dadfb00 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x559e9dadfae0 <col:45> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x559e9dadfbd0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x559e9dadfb68 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x559e9dadfb50 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x559e9dadfb30 <col:64> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x559e9dadfbb8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x559e9dadfba0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x559e9dadfb80 <col:83> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x559e9dadfcb0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x559e9dadfc48 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x559e9dadfc30 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x559e9dadfc10 <col:102> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x559e9dadfc98 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x559e9dadfc80 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x559e9dadfc60 <col:121> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x559e9dadfe90 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x559e9dadfcf0 <col:138> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
    |       `-ParenExpr 0x559e9dadfe70 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x559e9dadfe40 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x559e9dadfdb0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x559e9dadfd68 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x559e9dadfd50 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x559e9dadfd10 <col:151> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x559e9dadfd98 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x559e9dadfd80 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x559e9dadfd30 <col:169> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x559e9dadfe10 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x559e9dadfdd0 <col:186> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x559e9dadfe28 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x559e9dadfdf0 <col:198> 'int' lvalue Var 0x559e9dad4208 'x$w_buff1' 'int'
    |-BinaryOperator 0x559e9dae0528 <line:822:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x559e9dadff90 <col:3> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x559e9dae0510 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x559e9dae04e0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x559e9dae0498 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x559e9dae0480 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559e9dadffb0 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x559e9dae04c8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x559e9dae04b0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559e9dadffe0 <col:36> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x559e9dae0460 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x559e9dae0430 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x559e9dae01f0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x559e9dae0110 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x559e9dae0038 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x559e9dae0020 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x559e9dae0000 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x559e9dae00f0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x559e9dae0088 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x559e9dae0070 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x559e9dae0050 <col:74> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x559e9dae00d8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x559e9dae00c0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x559e9dae00a0 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x559e9dae01d0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x559e9dae0168 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x559e9dae0150 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x559e9dae0130 <col:112> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x559e9dae01b8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x559e9dae01a0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x559e9dae0180 <col:131> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x559e9dae0418 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x559e9dae0400 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x559e9dae0210 <col:148> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x559e9dae03e0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x559e9dae03b0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x559e9dae02d0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x559e9dae0288 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x559e9dae0270 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x559e9dae0230 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x559e9dae02b8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x559e9dae02a0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x559e9dae0250 <col:184> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x559e9dae0368 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x559e9dae0320 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x559e9dae02f0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x559e9dae0398 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x559e9dae0380 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x559e9dae0348 <col:212> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x559e9dae0af0 <line:823:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x559e9dae0548 <col:3> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x559e9dae0ad8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x559e9dae0aa8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x559e9dae0a60 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x559e9dae0a48 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559e9dae0568 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x559e9dae0a90 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x559e9dae0a78 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559e9dae0588 <col:36> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x559e9dae0a28 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x559e9dae09f8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x559e9dae0798 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x559e9dae06b8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x559e9dae05e0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x559e9dae05c8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x559e9dae05a8 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x559e9dae0698 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x559e9dae0630 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x559e9dae0618 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x559e9dae05f8 <col:74> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x559e9dae0680 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x559e9dae0668 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x559e9dae0648 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x559e9dae0778 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x559e9dae0710 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x559e9dae06f8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x559e9dae06d8 <col:112> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x559e9dae0760 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x559e9dae0748 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x559e9dae0728 <col:131> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x559e9dae09e0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x559e9dae09c8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x559e9dae07b8 <col:148> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x559e9dae09a8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x559e9dae0978 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x559e9dae0878 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x559e9dae0830 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x559e9dae0818 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x559e9dae07d8 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x559e9dae0860 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x559e9dae0848 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x559e9dae07f8 <col:184> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x559e9dae0948 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x559e9dae08c8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x559e9dae0898 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x559e9dae0960 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x559e9dae0920 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x559e9dae08f0 <col:219> 'int' 0
    |-BinaryOperator 0x559e9dae10b8 <line:824:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x559e9dae0b10 <col:3> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x559e9dae10a0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x559e9dae1070 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x559e9dae1028 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x559e9dae1010 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559e9dae0b30 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x559e9dae1058 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x559e9dae1040 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559e9dae0b50 <col:36> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x559e9dae0ff0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x559e9dae0fa0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x559e9dae0d60 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x559e9dae0c80 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x559e9dae0ba8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x559e9dae0b90 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x559e9dae0b70 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x559e9dae0c60 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x559e9dae0bf8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x559e9dae0be0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x559e9dae0bc0 <col:74> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x559e9dae0c48 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x559e9dae0c30 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x559e9dae0c10 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x559e9dae0d40 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x559e9dae0cd8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x559e9dae0cc0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x559e9dae0ca0 <col:112> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x559e9dae0d28 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x559e9dae0d10 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x559e9dae0cf0 <col:131> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x559e9dae0f88 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x559e9dae0f70 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x559e9dae0d80 <col:148> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x559e9dae0f50 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x559e9dae0f20 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x559e9dae0e40 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x559e9dae0df8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x559e9dae0de0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x559e9dae0da0 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x559e9dae0e28 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x559e9dae0e10 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x559e9dae0dc0 <col:184> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x559e9dae0ed8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x559e9dae0e90 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x559e9dae0e60 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x559e9dae0f08 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x559e9dae0ef0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x559e9dae0eb8 <col:212> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x559e9dae1680 <line:825:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x559e9dae10d8 <col:3> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x559e9dae1668 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x559e9dae1638 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x559e9dae15f0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x559e9dae15d8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559e9dae10f8 <col:20> '_Bool' lvalue Var 0x559e9dad4490 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x559e9dae1620 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x559e9dae1608 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559e9dae1118 <col:36> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x559e9dae15b8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x559e9dae1588 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x559e9dae1328 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x559e9dae1248 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x559e9dae1170 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x559e9dae1158 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x559e9dae1138 <col:55> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x559e9dae1228 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x559e9dae11c0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x559e9dae11a8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x559e9dae1188 <col:74> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x559e9dae1210 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x559e9dae11f8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x559e9dae11d8 <col:93> '_Bool' lvalue Var 0x559e9dad4280 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x559e9dae1308 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x559e9dae12a0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x559e9dae1288 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x559e9dae1268 <col:112> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x559e9dae12f0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x559e9dae12d8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x559e9dae12b8 <col:131> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x559e9dae1570 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x559e9dae1558 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x559e9dae1348 <col:148> '_Bool' lvalue Var 0x559e9dad3e50 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x559e9dae1538 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x559e9dae1508 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x559e9dae1408 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x559e9dae13c0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x559e9dae13a8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x559e9dae1368 <col:166> '_Bool' lvalue Var 0x559e9dad4188 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x559e9dae13f0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x559e9dae13d8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x559e9dae1388 <col:184> '_Bool' lvalue Var 0x559e9dad3ce8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x559e9dae14d8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x559e9dae1458 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x559e9dae1428 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x559e9dae14f0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x559e9dae14b0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x559e9dae1480 <col:219> 'int' 0
    |-BinaryOperator 0x559e9dae1950 <line:826:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x559e9dae16a0 <col:3> '_Bool' lvalue Var 0x559e9dad3a58 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x559e9dae1938 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x559e9dae1920 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x559e9dae1900 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x559e9dae18e0 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x559e9dae1848 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x559e9dae17b0 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x559e9dae1718 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x559e9dae1700 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x559e9dae16c0 <col:23> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
    |         | | | `-IntegerLiteral 0x559e9dae16e0 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x559e9dae1790 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x559e9dae1778 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x559e9dae1738 <col:33> 'int' lvalue Var 0x559e9dad3708 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x559e9dae1758 <col:56> 'int' 1
    |         | `-BinaryOperator 0x559e9dae1828 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x559e9dae1810 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x559e9dae17d0 <col:61> 'int' lvalue Var 0x559e9dad3828 '__unbuffered_p1_EAX' 'int'
    |         |   `-IntegerLiteral 0x559e9dae17f0 <col:84> 'int' 1
    |         `-BinaryOperator 0x559e9dae18c0 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x559e9dae18a8 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x559e9dae1868 <col:89> 'int' lvalue Var 0x559e9dad3948 '__unbuffered_p1_EBX' 'int'
    |           `-IntegerLiteral 0x559e9dae1888 <col:112> 'int' 0
    |-BinaryOperator 0x559e9dae1a80 <line:827:3, col:37> 'int' '='
    | |-DeclRefExpr 0x559e9dae1970 <col:3> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
    | `-ConditionalOperator 0x559e9dae1a50 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x559e9dae1a08 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x559e9dae19f0 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x559e9dae1990 <col:7> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x559e9dae1a20 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x559e9dae19b0 <col:25> 'int' lvalue Var 0x559e9dad3c70 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x559e9dae1a38 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x559e9dae19d0 <col:37> 'int' lvalue Var 0x559e9dad3b58 'x' 'int'
    |-BinaryOperator 0x559e9dae1b18 <line:828:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x559e9dae1aa0 <col:3> '_Bool' lvalue Var 0x559e9dad3bf0 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x559e9dae1af0 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x559e9dae1ac0 <col:28> 'int' 0
    |-CallExpr 0x559e9dae1b70 <line:829:3, col:25> 'void'
    | `-ImplicitCastExpr 0x559e9dae1b58 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x559e9dae1b38 <col:3> 'void ()' Function 0x559e9da7a570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x559e9dae1be8 <line:830:3, col:36> 'void'
    | |-ImplicitCastExpr 0x559e9dae1bd0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x559e9dae1b90 <col:3> 'void (int)' Function 0x559e9da7a238 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x559e9dae1c28 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x559e9dae1c10 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x559e9dae1bb0 <col:21> '_Bool' lvalue Var 0x559e9dad3a58 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x559e9dae1c60 <line:831:3, col:10>
      `-IntegerLiteral 0x559e9dae1c40 <col:10> 'int' 0
