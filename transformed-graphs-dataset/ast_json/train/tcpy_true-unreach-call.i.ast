TranslationUnitDecl 0x557920910d58 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x557920911618 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5579209112f0 '__int128'
|-TypedefDecl 0x557920911688 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x557920911310 'unsigned __int128'
|-TypedefDecl 0x557920911990 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x557920911760 'struct __NSConstantString_tag'
|   `-Record 0x5579209116e0 '__NSConstantString_tag'
|-TypedefDecl 0x557920911a38 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5579209119f0 'char *'
|   `-BuiltinType 0x557920910df0 'char'
|-TypedefDecl 0x557920950c30 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x557920911cd0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x557920911b10 'struct __va_list_tag'
|     `-Record 0x557920911a90 '__va_list_tag'
|-FunctionDecl 0x557920950d10 <array-tiling/tcpy_true-unreach-call.i:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x557920950ee0 <line:4:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x557920950e10 <col:31> col:34 'int'
|-FunctionDecl 0x557920951030 <line:5:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x557920950fa0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x557920951270 <col:34, col:79>
|   `-IfStmt 0x557920951258 <col:36, col:77>
|     |-UnaryOperator 0x557920951130 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x557920951118 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x5579209510f8 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x5579209510d8 <col:41> 'int' lvalue ParmVar 0x557920950fa0 'cond' 'int'
|     `-CompoundStmt 0x557920951240 <col:48, col:77>
|       `-LabelStmt 0x557920951228 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x5579209511b8 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x5579209511a0 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x557920951148 <col:57> 'void () __attribute__((noreturn))' Function 0x557920950d10 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|-FunctionDecl 0x557920951358 <line:6:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-VarDecl 0x557920951410 <line:8:1, col:5> col:5 used SIZE 'int'
`-FunctionDecl 0x5579209514d8 <line:10:1, line:35:1> line:10:5 main 'int ()'
  `-CompoundStmt 0x557920976b40 <line:11:1, line:35:1>
    |-BinaryOperator 0x557920951628 <line:12:2, col:31> 'int' '='
    | |-DeclRefExpr 0x557920951578 <col:2> 'int' lvalue Var 0x557920951410 'SIZE' 'int'
    | `-CallExpr 0x557920951608 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x5579209515f0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x557920951598 <col:9> 'int (void)' Function 0x557920951358 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x557920976af8 <line:13:2, line:33:2>
    | |-BinaryOperator 0x5579209516a0 <line:13:5, col:12> 'int' '>'
    | | |-ImplicitCastExpr 0x557920951688 <col:5> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x557920951648 <col:5> 'int' lvalue Var 0x557920951410 'SIZE' 'int'
    | | `-IntegerLiteral 0x557920951668 <col:12> 'int' 1
    | `-CompoundStmt 0x557920976ab0 <line:14:2, line:33:2>
    |   |-DeclStmt 0x557920951740 <line:15:3, col:8>
    |   | `-VarDecl 0x5579209516d8 <col:3, col:7> col:7 used i 'int'
    |   |-DeclStmt 0x557920951880 <line:16:3, col:14>
    |   | `-VarDecl 0x557920951818 <col:3, col:13> col:7 used a 'int [SIZE]'
    |   |-DeclStmt 0x5579209519c0 <line:17:3, col:18>
    |   | `-VarDecl 0x557920951958 <col:3, col:17> col:7 used acopy 'int [SIZE]'
    |   |-IfStmt 0x557920951ad8 <line:19:3, col:33>
    |   | |-BinaryOperator 0x557920951a70 <col:6, col:18> 'int' '!='
    |   | | |-BinaryOperator 0x557920951a30 <col:6, col:13> 'int' '%'
    |   | | | |-ImplicitCastExpr 0x557920951a18 <col:6> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x5579209519d8 <col:6> 'int' lvalue Var 0x557920951410 'SIZE' 'int'
    |   | | | `-IntegerLiteral 0x5579209519f8 <col:13> 'int' 2
    |   | | `-IntegerLiteral 0x557920951a50 <col:18> 'int' 0
    |   | `-CompoundStmt 0x557920951ac0 <col:21, col:33>
    |   |   `-ReturnStmt 0x557920951ab0 <col:23, col:30>
    |   |     `-IntegerLiteral 0x557920951a90 <col:30> 'int' 1
    |   |-CallExpr 0x557920976170 <line:21:3, col:34> 'void'
    |   | |-ImplicitCastExpr 0x557920951c00 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x557920951af0 <col:3> 'void (int)' Function 0x557920950ee0 '__VERIFIER_assume' 'void (int)'
    |   | `-BinaryOperator 0x557920951ba8 <col:21, col:33> 'int' '=='
    |   |   |-BinaryOperator 0x557920951b68 <col:21, col:28> 'int' '%'
    |   |   | |-ImplicitCastExpr 0x557920951b50 <col:21> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x557920951b10 <col:21> 'int' lvalue Var 0x557920951410 'SIZE' 'int'
    |   |   | `-IntegerLiteral 0x557920951b30 <col:28> 'int' 2
    |   |   `-IntegerLiteral 0x557920951b88 <col:33> 'int' 0
    |   |-ForStmt 0x557920976730 <line:22:3, line:26:3>
    |   | |-BinaryOperator 0x5579209761d8 <line:22:7, col:9> 'int' '='
    |   | | |-DeclRefExpr 0x557920976198 <col:7> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |   | | `-IntegerLiteral 0x5579209761b8 <col:9> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x5579209762a8 <col:12, col:19> 'int' '<'
    |   | | |-ImplicitCastExpr 0x557920976290 <col:12> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x5579209761f8 <col:12> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |   | | `-BinaryOperator 0x557920976270 <col:14, col:19> 'int' '/'
    |   | |   |-ImplicitCastExpr 0x557920976258 <col:14> 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x557920976218 <col:14> 'int' lvalue Var 0x557920951410 'SIZE' 'int'
    |   | |   `-IntegerLiteral 0x557920976238 <col:19> 'int' 2
    |   | |-UnaryOperator 0x5579209762e8 <col:22, col:23> 'int' postfix '++'
    |   | | `-DeclRefExpr 0x5579209762c8 <col:22> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |   | `-CompoundStmt 0x557920976710 <line:23:3, line:26:3>
    |   |   |-BinaryOperator 0x557920976598 <line:24:4, col:32> 'int' '='
    |   |   | |-ArraySubscriptExpr 0x557920976438 <col:4, col:18> 'int' lvalue
    |   |   | | |-ImplicitCastExpr 0x557920976420 <col:4> 'int *' <ArrayToPointerDecay>
    |   |   | | | `-DeclRefExpr 0x557920976300 <col:4> 'int [SIZE]' lvalue Var 0x557920951958 'acopy' 'int [SIZE]'
    |   |   | | `-BinaryOperator 0x5579209763d0 <col:10, col:17> 'int' '-'
    |   |   | |   |-BinaryOperator 0x557920976390 <col:10, col:15> 'int' '-'
    |   |   | |   | |-ImplicitCastExpr 0x557920976360 <col:10> 'int' <LValueToRValue>
    |   |   | |   | | `-DeclRefExpr 0x557920976320 <col:10> 'int' lvalue Var 0x557920951410 'SIZE' 'int'
    |   |   | |   | `-ImplicitCastExpr 0x557920976378 <col:15> 'int' <LValueToRValue>
    |   |   | |   |   `-DeclRefExpr 0x557920976340 <col:15> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |   |   | |   `-IntegerLiteral 0x5579209763b0 <col:17> 'int' 1
    |   |   | `-ImplicitCastExpr 0x557920976580 <col:22, col:32> 'int' <LValueToRValue>
    |   |   |   `-ArraySubscriptExpr 0x557920976560 <col:22, col:32> 'int' lvalue
    |   |   |     |-ImplicitCastExpr 0x557920976548 <col:22> 'int *' <ArrayToPointerDecay>
    |   |   |     | `-DeclRefExpr 0x557920976458 <col:22> 'int [SIZE]' lvalue Var 0x557920951818 'a' 'int [SIZE]'
    |   |   |     `-BinaryOperator 0x557920976528 <col:24, col:31> 'int' '-'
    |   |   |       |-BinaryOperator 0x5579209764e8 <col:24, col:29> 'int' '-'
    |   |   |       | |-ImplicitCastExpr 0x5579209764b8 <col:24> 'int' <LValueToRValue>
    |   |   |       | | `-DeclRefExpr 0x557920976478 <col:24> 'int' lvalue Var 0x557920951410 'SIZE' 'int'
    |   |   |       | `-ImplicitCastExpr 0x5579209764d0 <col:29> 'int' <LValueToRValue>
    |   |   |       |   `-DeclRefExpr 0x557920976498 <col:29> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |   |   |       `-IntegerLiteral 0x557920976508 <col:31> 'int' 1
    |   |   `-BinaryOperator 0x5579209766f0 <line:25:4, col:18> 'int' '='
    |   |     |-ArraySubscriptExpr 0x557920976628 <col:4, col:11> 'int' lvalue
    |   |     | |-ImplicitCastExpr 0x5579209765f8 <col:4> 'int *' <ArrayToPointerDecay>
    |   |     | | `-DeclRefExpr 0x5579209765b8 <col:4> 'int [SIZE]' lvalue Var 0x557920951958 'acopy' 'int [SIZE]'
    |   |     | `-ImplicitCastExpr 0x557920976610 <col:10> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x5579209765d8 <col:10> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |   |     `-ImplicitCastExpr 0x5579209766d8 <col:15, col:18> 'int' <LValueToRValue>
    |   |       `-ArraySubscriptExpr 0x5579209766b8 <col:15, col:18> 'int' lvalue
    |   |         |-ImplicitCastExpr 0x557920976688 <col:15> 'int *' <ArrayToPointerDecay>
    |   |         | `-DeclRefExpr 0x557920976648 <col:15> 'int [SIZE]' lvalue Var 0x557920951818 'a' 'int [SIZE]'
    |   |         `-ImplicitCastExpr 0x5579209766a0 <col:17> 'int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x557920976668 <col:17> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |   `-ForStmt 0x557920976a78 <line:29:3, line:32:3>
    |     |-BinaryOperator 0x5579209767a8 <line:29:7, col:9> 'int' '='
    |     | |-DeclRefExpr 0x557920976768 <col:7> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |     | `-IntegerLiteral 0x557920976788 <col:9> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x557920976838 <col:12, col:14> 'int' '<'
    |     | |-ImplicitCastExpr 0x557920976808 <col:12> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x5579209767c8 <col:12> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |     | `-ImplicitCastExpr 0x557920976820 <col:14> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5579209767e8 <col:14> 'int' lvalue Var 0x557920951410 'SIZE' 'int'
    |     |-UnaryOperator 0x557920976878 <col:20, col:21> 'int' postfix '++'
    |     | `-DeclRefExpr 0x557920976858 <col:20> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |     `-CompoundStmt 0x557920976a60 <line:30:3, line:32:3>
    |       `-CallExpr 0x557920976a38 <line:31:4, col:38> 'void'
    |         |-ImplicitCastExpr 0x557920976a20 <col:4> 'void (*)(int)' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x557920976890 <col:4> 'void (int)' Function 0x557920951030 '__VERIFIER_assert' 'void (int)'
    |         `-BinaryOperator 0x557920976a00 <col:22, col:37> 'int' '=='
    |           |-ImplicitCastExpr 0x5579209769d0 <col:22, col:29> 'int' <LValueToRValue>
    |           | `-ArraySubscriptExpr 0x557920976920 <col:22, col:29> 'int' lvalue
    |           |   |-ImplicitCastExpr 0x5579209768f0 <col:22> 'int *' <ArrayToPointerDecay>
    |           |   | `-DeclRefExpr 0x5579209768b0 <col:22> 'int [SIZE]' lvalue Var 0x557920951958 'acopy' 'int [SIZE]'
    |           |   `-ImplicitCastExpr 0x557920976908 <col:28> 'int' <LValueToRValue>
    |           |     `-DeclRefExpr 0x5579209768d0 <col:28> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    |           `-ImplicitCastExpr 0x5579209769e8 <col:34, col:37> 'int' <LValueToRValue>
    |             `-ArraySubscriptExpr 0x5579209769b0 <col:34, col:37> 'int' lvalue
    |               |-ImplicitCastExpr 0x557920976980 <col:34> 'int *' <ArrayToPointerDecay>
    |               | `-DeclRefExpr 0x557920976940 <col:34> 'int [SIZE]' lvalue Var 0x557920951818 'a' 'int [SIZE]'
    |               `-ImplicitCastExpr 0x557920976998 <col:36> 'int' <LValueToRValue>
    |                 `-DeclRefExpr 0x557920976960 <col:36> 'int' lvalue Var 0x5579209516d8 'i' 'int'
    `-ReturnStmt 0x557920976b30 <line:34:2, col:9>
      `-IntegerLiteral 0x557920976b10 <col:9> 'int' 1
