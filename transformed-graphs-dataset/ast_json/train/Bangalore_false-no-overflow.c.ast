TranslationUnitDecl 0x5632f23e74d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5632f23e7d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5632f23e7a70 '__int128'
|-TypedefDecl 0x5632f23e7e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5632f23e7a90 'unsigned __int128'
|-TypedefDecl 0x5632f23e8110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5632f23e7ee0 'struct __NSConstantString_tag'
|   `-Record 0x5632f23e7e60 '__NSConstantString_tag'
|-TypedefDecl 0x5632f23e81b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5632f23e8170 'char *'
|   `-BuiltinType 0x5632f23e7570 'char'
|-TypedefDecl 0x5632f24272f0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5632f23e8450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5632f23e8290 'struct __va_list_tag'
|     `-Record 0x5632f23e8210 '__va_list_tag'
|-EnumDecl 0x5632f2427348 <termination-crafted/Bangalore_false-no-overflow.c:7:9, col:26> col:9
| |-EnumConstantDecl 0x5632f2427418 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x5632f2427468 <col:22> col:22 true 'int'
|-TypedefDecl 0x5632f2427520 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x5632f24274c0 'enum bool' sugar
|   `-EnumType 0x5632f24273f0 'bool'
|     `-Enum 0x5632f2427348 ''
|-FunctionDecl 0x5632f2427668 <line:9:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x5632f24277a8 <line:11:1, line:23:1> line:11:5 main 'int ()'
  `-CompoundStmt 0x5632f2427d30 <line:12:1, line:23:1>
    |-DeclStmt 0x5632f24278c8 <line:13:5, col:10>
    | `-VarDecl 0x5632f2427860 <col:5, col:9> col:9 used x 'int'
    |-DeclStmt 0x5632f2427960 <line:14:5, col:10>
    | `-VarDecl 0x5632f24278f8 <col:5, col:9> col:9 used y 'int'
    |-BinaryOperator 0x5632f2427a28 <line:15:5, col:31> 'int' '='
    | |-DeclRefExpr 0x5632f2427978 <col:5> 'int' lvalue Var 0x5632f2427860 'x' 'int'
    | `-CallExpr 0x5632f2427a08 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x5632f24279f0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5632f2427998 <col:9> 'int (void)' Function 0x5632f2427668 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x5632f2427ac0 <line:16:5, col:31> 'int' '='
    | |-DeclRefExpr 0x5632f2427a48 <col:5> 'int' lvalue Var 0x5632f24278f8 'y' 'int'
    | `-CallExpr 0x5632f2427aa0 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x5632f2427a88 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5632f2427a68 <col:9> 'int (void)' Function 0x5632f2427668 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x5632f2427ce8 <line:17:2, line:21:2>
    | |-BinaryOperator 0x5632f2427b38 <line:17:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x5632f2427b20 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x5632f2427ae0 <col:6> 'int' lvalue Var 0x5632f24278f8 'y' 'int'
    | | `-IntegerLiteral 0x5632f2427b00 <col:10> 'int' 1
    | `-CompoundStmt 0x5632f2427cd0 <col:13, line:21:2>
    |   `-WhileStmt 0x5632f2427cb8 <line:18:6, line:20:6>
    |     |-BinaryOperator 0x5632f2427bb0 <line:18:13, col:18> 'int' '>='
    |     | |-ImplicitCastExpr 0x5632f2427b98 <col:13> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x5632f2427b58 <col:13> 'int' lvalue Var 0x5632f2427860 'x' 'int'
    |     | `-IntegerLiteral 0x5632f2427b78 <col:18> 'int' 0
    |     `-CompoundStmt 0x5632f2427ca0 <col:21, line:20:6>
    |       `-BinaryOperator 0x5632f2427c80 <line:19:7, col:15> 'int' '='
    |         |-DeclRefExpr 0x5632f2427bd0 <col:7> 'int' lvalue Var 0x5632f2427860 'x' 'int'
    |         `-BinaryOperator 0x5632f2427c60 <col:11, col:15> 'int' '-'
    |           |-ImplicitCastExpr 0x5632f2427c30 <col:11> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x5632f2427bf0 <col:11> 'int' lvalue Var 0x5632f2427860 'x' 'int'
    |           `-ImplicitCastExpr 0x5632f2427c48 <col:15> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x5632f2427c10 <col:15> 'int' lvalue Var 0x5632f24278f8 'y' 'int'
    `-ReturnStmt 0x5632f2427d20 <line:22:2, col:9>
      `-IntegerLiteral 0x5632f2427d00 <col:9> 'int' 0
