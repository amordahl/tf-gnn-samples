TranslationUnitDecl 0x5583d90a8538 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5583d90a8df8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5583d90a8ad0 '__int128'
|-TypedefDecl 0x5583d90a8e68 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5583d90a8af0 'unsigned __int128'
|-TypedefDecl 0x5583d90a9170 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5583d90a8f40 'struct __NSConstantString_tag'
|   `-Record 0x5583d90a8ec0 '__NSConstantString_tag'
|-TypedefDecl 0x5583d90a9218 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5583d90a91d0 'char *'
|   `-BuiltinType 0x5583d90a85d0 'char'
|-TypedefDecl 0x5583d90e8240 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5583d90a94b0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5583d90a92f0 'struct __va_list_tag'
|     `-Record 0x5583d90a9270 '__va_list_tag'
|-EnumDecl 0x5583d90e8298 <termination-crafted/NonTerminationSimple2_false-no-overflow.c:8:9, col:26> col:9
| |-EnumConstantDecl 0x5583d90e8368 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x5583d90e83b8 <col:22> col:22 true 'int'
|-TypedefDecl 0x5583d90e8470 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x5583d90e8410 'enum bool' sugar
|   `-EnumType 0x5583d90e8340 'bool'
|     `-Enum 0x5583d90e8298 ''
|-FunctionDecl 0x5583d90e85b8 <line:10:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x5583d90e86f8 <line:12:1, line:20:1> line:12:5 main 'int ()'
  `-CompoundStmt 0x5583d90e8a88 <line:13:1, line:20:1>
    |-DeclStmt 0x5583d90e8818 <line:14:2, col:7>
    | `-VarDecl 0x5583d90e87b0 <col:2, col:6> col:6 used x 'int'
    |-BinaryOperator 0x5583d90e88d8 <line:15:5, col:31> 'int' '='
    | |-DeclRefExpr 0x5583d90e8830 <col:5> 'int' lvalue Var 0x5583d90e87b0 'x' 'int'
    | `-CallExpr 0x5583d90e88b8 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x5583d90e88a0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5583d90e8850 <col:9> 'int (void)' Function 0x5583d90e85b8 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x5583d90e8a40 <line:16:2, line:18:2>
    | |-BinaryOperator 0x5583d90e8950 <line:16:9, col:14> 'int' '>='
    | | |-ImplicitCastExpr 0x5583d90e8938 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x5583d90e88f8 <col:9> 'int' lvalue Var 0x5583d90e87b0 'x' 'int'
    | | `-IntegerLiteral 0x5583d90e8918 <col:14> 'int' 0
    | `-CompoundStmt 0x5583d90e8a28 <col:17, line:18:2>
    |   `-BinaryOperator 0x5583d90e8a08 <line:17:3, col:11> 'int' '='
    |     |-DeclRefExpr 0x5583d90e8970 <col:3> 'int' lvalue Var 0x5583d90e87b0 'x' 'int'
    |     `-BinaryOperator 0x5583d90e89e8 <col:7, col:11> 'int' '+'
    |       |-ImplicitCastExpr 0x5583d90e89d0 <col:7> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5583d90e8990 <col:7> 'int' lvalue Var 0x5583d90e87b0 'x' 'int'
    |       `-IntegerLiteral 0x5583d90e89b0 <col:11> 'int' 1
    `-ReturnStmt 0x5583d90e8a78 <line:19:5, col:12>
      `-IntegerLiteral 0x5583d90e8a58 <col:12> 'int' 0
