TranslationUnitDecl 0x561197ab8698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x561197ab8f58 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x561197ab8c30 '__int128'
|-TypedefDecl 0x561197ab8fc8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x561197ab8c50 'unsigned __int128'
|-TypedefDecl 0x561197ab92d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x561197ab90a0 'struct __NSConstantString_tag'
|   `-Record 0x561197ab9020 '__NSConstantString_tag'
|-TypedefDecl 0x561197ab9378 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x561197ab9330 'char *'
|   `-BuiltinType 0x561197ab8730 'char'
|-TypedefDecl 0x561197af8670 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x561197ab9610 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x561197ab9450 'struct __va_list_tag'
|     `-Record 0x561197ab93d0 '__va_list_tag'
|-EnumDecl 0x561197af86c8 <termination-crafted-lit/ChenFlurMukhopadhyay-SAS2012-Ex3.02_false-no-overflow.c:18:9, col:26> col:9
| |-EnumConstantDecl 0x561197af8798 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x561197af87e8 <col:22> col:22 true 'int'
|-TypedefDecl 0x561197af88a0 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x561197af8840 'enum bool' sugar
|   `-EnumType 0x561197af8770 'bool'
|     `-Enum 0x561197af86c8 ''
|-FunctionDecl 0x561197af89e8 <line:20:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x561197af8b28 <line:22:1, line:32:1> line:22:5 main 'int ()'
  `-CompoundStmt 0x561197af91f8 <col:12, line:32:1>
    |-DeclStmt 0x561197af8d68 <line:23:5, col:16>
    | |-VarDecl 0x561197af8be0 <col:5, col:9> col:9 used x 'int'
    | |-VarDecl 0x561197af8c60 <col:5, col:12> col:12 used y 'int'
    | `-VarDecl 0x561197af8ce0 <col:5, col:15> col:15 used z 'int'
    |-BinaryOperator 0x561197af8e28 <line:24:5, col:31> 'int' '='
    | |-DeclRefExpr 0x561197af8d80 <col:5> 'int' lvalue Var 0x561197af8be0 'x' 'int'
    | `-CallExpr 0x561197af8e08 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x561197af8df0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x561197af8da0 <col:9> 'int (void)' Function 0x561197af89e8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x561197af8ec0 <line:25:5, col:31> 'int' '='
    | |-DeclRefExpr 0x561197af8e48 <col:5> 'int' lvalue Var 0x561197af8c60 'y' 'int'
    | `-CallExpr 0x561197af8ea0 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x561197af8e88 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x561197af8e68 <col:9> 'int (void)' Function 0x561197af89e8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x561197af8f58 <line:26:5, col:31> 'int' '='
    | |-DeclRefExpr 0x561197af8ee0 <col:5> 'int' lvalue Var 0x561197af8ce0 'z' 'int'
    | `-CallExpr 0x561197af8f38 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x561197af8f20 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x561197af8f00 <col:9> 'int (void)' Function 0x561197af89e8 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x561197af91b0 <line:27:5, line:30:5>
    | |-BinaryOperator 0x561197af8fd0 <line:27:12, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x561197af8fb8 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x561197af8f78 <col:12> 'int' lvalue Var 0x561197af8be0 'x' 'int'
    | | `-IntegerLiteral 0x561197af8f98 <col:16> 'int' 0
    | `-CompoundStmt 0x561197af9190 <col:19, line:30:5>
    |   |-BinaryOperator 0x561197af90a0 <line:28:9, col:17> 'int' '='
    |   | |-DeclRefExpr 0x561197af8ff0 <col:9> 'int' lvalue Var 0x561197af8be0 'x' 'int'
    |   | `-BinaryOperator 0x561197af9080 <col:13, col:17> 'int' '+'
    |   |   |-ImplicitCastExpr 0x561197af9050 <col:13> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x561197af9010 <col:13> 'int' lvalue Var 0x561197af8be0 'x' 'int'
    |   |   `-ImplicitCastExpr 0x561197af9068 <col:17> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x561197af9030 <col:17> 'int' lvalue Var 0x561197af8c60 'y' 'int'
    |   `-BinaryOperator 0x561197af9170 <line:29:9, col:17> 'int' '='
    |     |-DeclRefExpr 0x561197af90c0 <col:9> 'int' lvalue Var 0x561197af8c60 'y' 'int'
    |     `-BinaryOperator 0x561197af9150 <col:13, col:17> 'int' '+'
    |       |-ImplicitCastExpr 0x561197af9120 <col:13> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x561197af90e0 <col:13> 'int' lvalue Var 0x561197af8c60 'y' 'int'
    |       `-ImplicitCastExpr 0x561197af9138 <col:17> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x561197af9100 <col:17> 'int' lvalue Var 0x561197af8ce0 'z' 'int'
    `-ReturnStmt 0x561197af91e8 <line:31:5, col:12>
      `-IntegerLiteral 0x561197af91c8 <col:12> 'int' 0
