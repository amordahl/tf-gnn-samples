TranslationUnitDecl 0x558f08b06f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x558f08b07848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x558f08b07520 '__int128'
|-TypedefDecl 0x558f08b078b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x558f08b07540 'unsigned __int128'
|-TypedefDecl 0x558f08b07bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x558f08b07990 'struct __NSConstantString_tag'
|   `-Record 0x558f08b07910 '__NSConstantString_tag'
|-TypedefDecl 0x558f08b07c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x558f08b07c20 'char *'
|   `-BuiltinType 0x558f08b07020 'char'
|-TypedefDecl 0x558f08b46dc0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x558f08b07f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x558f08b07d40 'struct __va_list_tag'
|     `-Record 0x558f08b07cc0 '__va_list_tag'
|-FunctionDecl 0x558f08b46ea0 <array-tiling/rewnifrev_true-unreach-call.i:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x558f08b47070 <line:4:1, col:34> col:13 __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x558f08b46fa0 <col:31> col:34 'int'
|-FunctionDecl 0x558f08b471c0 <line:5:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x558f08b47130 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x558f08b47400 <col:34, col:79>
|   `-IfStmt 0x558f08b473e8 <col:36, col:77>
|     |-UnaryOperator 0x558f08b472c0 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x558f08b472a8 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x558f08b47288 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x558f08b47268 <col:41> 'int' lvalue ParmVar 0x558f08b47130 'cond' 'int'
|     `-CompoundStmt 0x558f08b473d0 <col:48, col:77>
|       `-LabelStmt 0x558f08b473b8 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x558f08b47348 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x558f08b47330 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x558f08b472d8 <col:57> 'void () __attribute__((noreturn))' Function 0x558f08b46ea0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|-FunctionDecl 0x558f08b474e8 <line:6:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-VarDecl 0x558f08b475a0 <line:8:1, col:5> col:5 used SIZE 'int'
`-FunctionDecl 0x558f08b47668 <line:10:1, line:33:1> line:10:5 main 'int ()'
  `-CompoundStmt 0x558f08b6cbb8 <line:11:1, line:33:1>
    |-BinaryOperator 0x558f08b477b8 <line:12:2, col:31> 'int' '='
    | |-DeclRefExpr 0x558f08b47708 <col:2> 'int' lvalue Var 0x558f08b475a0 'SIZE' 'int'
    | `-CallExpr 0x558f08b47798 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x558f08b47780 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x558f08b47728 <col:9> 'int (void)' Function 0x558f08b474e8 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x558f08b6cb70 <line:13:2, line:31:2>
    | |-BinaryOperator 0x558f08b47830 <line:13:5, col:12> 'int' '>'
    | | |-ImplicitCastExpr 0x558f08b47818 <col:5> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x558f08b477d8 <col:5> 'int' lvalue Var 0x558f08b475a0 'SIZE' 'int'
    | | `-IntegerLiteral 0x558f08b477f8 <col:12> 'int' 1
    | `-CompoundStmt 0x558f08b6cb40 <line:14:2, line:31:2>
    |   |-DeclStmt 0x558f08b478d0 <line:15:3, col:8>
    |   | `-VarDecl 0x558f08b47868 <col:3, col:7> col:7 used i 'int'
    |   |-DeclStmt 0x558f08b47a10 <line:16:3, col:14>
    |   | `-VarDecl 0x558f08b479a8 <col:3, col:13> col:7 used a 'int [SIZE]'
    |   |-ForStmt 0x558f08b6c7f8 <line:18:3, line:25:3>
    |   | |-BinaryOperator 0x558f08b47ac0 <line:18:8, col:15> 'int' '='
    |   | | |-DeclRefExpr 0x558f08b47a28 <col:8> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |   | | `-BinaryOperator 0x558f08b47aa0 <col:10, col:15> 'int' '-'
    |   | |   |-ImplicitCastExpr 0x558f08b47a88 <col:10> 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x558f08b47a48 <col:10> 'int' lvalue Var 0x558f08b475a0 'SIZE' 'int'
    |   | |   `-IntegerLiteral 0x558f08b47a68 <col:15> 'int' 1
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x558f08b47b38 <col:18, col:21> 'int' '>='
    |   | | |-ImplicitCastExpr 0x558f08b47b20 <col:18> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x558f08b47ae0 <col:18> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |   | | `-IntegerLiteral 0x558f08b47b00 <col:21> 'int' 0
    |   | |-UnaryOperator 0x558f08b47b78 <col:24, col:25> 'int' postfix '--'
    |   | | `-DeclRefExpr 0x558f08b47b58 <col:24> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |   | `-CompoundStmt 0x558f08b6c7d8 <line:19:3, line:25:3>
    |   |   |-IfStmt 0x558f08b6c6d8 <line:20:4, line:23:4>
    |   |   | |-BinaryOperator 0x558f08b47c48 <line:20:7, col:16> 'int' '>='
    |   |   | | |-ParenExpr 0x558f08b47c08 <col:7, col:11> 'int'
    |   |   | | | `-BinaryOperator 0x558f08b47be8 <col:8, col:10> 'int' '-'
    |   |   | | |   |-ImplicitCastExpr 0x558f08b47bd0 <col:8> 'int' <LValueToRValue>
    |   |   | | |   | `-DeclRefExpr 0x558f08b47b90 <col:8> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |   |   | | |   `-IntegerLiteral 0x558f08b47bb0 <col:10> 'int' 1
    |   |   | | `-IntegerLiteral 0x558f08b47c28 <col:16> 'int' 0
    |   |   | `-CompoundStmt 0x558f08b6c6c0 <line:21:4, line:23:4>
    |   |   |   `-BinaryOperator 0x558f08b6c6a0 <line:22:5, col:16> 'int' '='
    |   |   |     |-ArraySubscriptExpr 0x558f08b47d48 <col:5, col:10> 'int' lvalue
    |   |   |     | |-ImplicitCastExpr 0x558f08b47d30 <col:5> 'int *' <ArrayToPointerDecay>
    |   |   |     | | `-DeclRefExpr 0x558f08b47c68 <col:5> 'int [SIZE]' lvalue Var 0x558f08b479a8 'a' 'int [SIZE]'
    |   |   |     | `-BinaryOperator 0x558f08b47ce0 <col:7, col:9> 'int' '-'
    |   |   |     |   |-ImplicitCastExpr 0x558f08b47cc8 <col:7> 'int' <LValueToRValue>
    |   |   |     |   | `-DeclRefExpr 0x558f08b47c88 <col:7> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |   |   |     |   `-IntegerLiteral 0x558f08b47ca8 <col:9> 'int' 1
    |   |   |     `-BinaryOperator 0x558f08b6c680 <col:14, col:16> 'int' '-'
    |   |   |       |-ImplicitCastExpr 0x558f08b47da8 <col:14> 'int' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x558f08b47d68 <col:14> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |   |   |       `-IntegerLiteral 0x558f08b47d88 <col:16> 'int' 2
    |   |   `-BinaryOperator 0x558f08b6c7b8 <line:24:4, col:11> 'int' '='
    |   |     |-ArraySubscriptExpr 0x558f08b6c760 <col:4, col:7> 'int' lvalue
    |   |     | |-ImplicitCastExpr 0x558f08b6c730 <col:4> 'int *' <ArrayToPointerDecay>
    |   |     | | `-DeclRefExpr 0x558f08b6c6f0 <col:4> 'int [SIZE]' lvalue Var 0x558f08b479a8 'a' 'int [SIZE]'
    |   |     | `-ImplicitCastExpr 0x558f08b6c748 <col:6> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x558f08b6c710 <col:6> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |   |     `-ImplicitCastExpr 0x558f08b6c7a0 <col:11> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x558f08b6c780 <col:11> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |   `-ForStmt 0x558f08b6cb08 <line:27:3, line:30:3>
    |     |-BinaryOperator 0x558f08b6c870 <line:27:7, col:11> 'int' '='
    |     | |-DeclRefExpr 0x558f08b6c830 <col:7> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |     | `-IntegerLiteral 0x558f08b6c850 <col:11> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x558f08b6c900 <col:14, col:18> 'int' '<'
    |     | |-ImplicitCastExpr 0x558f08b6c8d0 <col:14> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x558f08b6c890 <col:14> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |     | `-ImplicitCastExpr 0x558f08b6c8e8 <col:18> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x558f08b6c8b0 <col:18> 'int' lvalue Var 0x558f08b475a0 'SIZE' 'int'
    |     |-UnaryOperator 0x558f08b6c940 <col:24, col:25> 'int' postfix '++'
    |     | `-DeclRefExpr 0x558f08b6c920 <col:24> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |     `-CompoundStmt 0x558f08b6caf0 <line:28:3, line:30:3>
    |       `-CallExpr 0x558f08b6cac8 <line:29:4, col:33> 'void'
    |         |-ImplicitCastExpr 0x558f08b6cab0 <col:4> 'void (*)(int)' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x558f08b6c958 <col:4> 'void (int)' Function 0x558f08b471c0 '__VERIFIER_assert' 'void (int)'
    |         `-BinaryOperator 0x558f08b6ca58 <col:23, col:31> 'int' '>='
    |           |-ImplicitCastExpr 0x558f08b6ca28 <col:23, col:26> 'int' <LValueToRValue>
    |           | `-ArraySubscriptExpr 0x558f08b6c9e8 <col:23, col:26> 'int' lvalue
    |           |   |-ImplicitCastExpr 0x558f08b6c9b8 <col:23> 'int *' <ArrayToPointerDecay>
    |           |   | `-DeclRefExpr 0x558f08b6c978 <col:23> 'int [SIZE]' lvalue Var 0x558f08b479a8 'a' 'int [SIZE]'
    |           |   `-ImplicitCastExpr 0x558f08b6c9d0 <col:25> 'int' <LValueToRValue>
    |           |     `-DeclRefExpr 0x558f08b6c998 <col:25> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    |           `-ImplicitCastExpr 0x558f08b6ca40 <col:31> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x558f08b6ca08 <col:31> 'int' lvalue Var 0x558f08b47868 'i' 'int'
    `-ReturnStmt 0x558f08b6cba8 <line:32:2, col:9>
      `-IntegerLiteral 0x558f08b6cb88 <col:9> 'int' 1
