TranslationUnitDecl 0x564e76e3e4d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x564e76e3ed98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x564e76e3ea70 '__int128'
|-TypedefDecl 0x564e76e3ee08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x564e76e3ea90 'unsigned __int128'
|-TypedefDecl 0x564e76e3f110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x564e76e3eee0 'struct __NSConstantString_tag'
|   `-Record 0x564e76e3ee60 '__NSConstantString_tag'
|-TypedefDecl 0x564e76e3f1b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x564e76e3f170 'char *'
|   `-BuiltinType 0x564e76e3e570 'char'
|-TypedefDecl 0x564e76e7e2f0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x564e76e3f450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x564e76e3f290 'struct __va_list_tag'
|     `-Record 0x564e76e3f210 '__va_list_tag'
|-EnumDecl 0x564e76e7e348 <termination-crafted/Hanoi_plus_false-no-overflow.c:6:9, col:26> col:9
| |-EnumConstantDecl 0x564e76e7e418 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x564e76e7e468 <col:22> col:22 true 'int'
|-TypedefDecl 0x564e76e7e520 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x564e76e7e4c0 'enum bool' sugar
|   `-EnumType 0x564e76e7e3f0 'bool'
|     `-Enum 0x564e76e7e348 ''
|-FunctionDecl 0x564e76e7e668 <line:8:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x564e76e7e7a8 <line:10:1, line:22:1> line:10:5 main 'int ()'
  `-CompoundStmt 0x564e76e7ef50 <line:11:1, line:22:1>
    |-DeclStmt 0x564e76e7e9e8 <line:12:5, col:16>
    | |-VarDecl 0x564e76e7e860 <col:5, col:9> col:9 used x 'int'
    | |-VarDecl 0x564e76e7e8e0 <col:5, col:12> col:12 used y 'int'
    | `-VarDecl 0x564e76e7e960 <col:5, col:15> col:15 used z 'int'
    |-BinaryOperator 0x564e76e7eaa8 <line:13:5, col:31> 'int' '='
    | |-DeclRefExpr 0x564e76e7ea00 <col:5> 'int' lvalue Var 0x564e76e7e860 'x' 'int'
    | `-CallExpr 0x564e76e7ea88 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x564e76e7ea70 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x564e76e7ea20 <col:9> 'int (void)' Function 0x564e76e7e668 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x564e76e7eb40 <line:14:5, col:31> 'int' '='
    | |-DeclRefExpr 0x564e76e7eac8 <col:5> 'int' lvalue Var 0x564e76e7e8e0 'y' 'int'
    | `-CallExpr 0x564e76e7eb20 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x564e76e7eb08 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x564e76e7eae8 <col:9> 'int (void)' Function 0x564e76e7e668 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x564e76e7ebd8 <line:15:5, col:31> 'int' '='
    | |-DeclRefExpr 0x564e76e7eb60 <col:5> 'int' lvalue Var 0x564e76e7e960 'z' 'int'
    | `-CallExpr 0x564e76e7ebb8 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x564e76e7eba0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x564e76e7eb80 <col:9> 'int (void)' Function 0x564e76e7e668 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x564e76e7ef08 <line:16:5, line:20:5>
    | |-BinaryOperator 0x564e76e7ec50 <line:16:12, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x564e76e7ec38 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x564e76e7ebf8 <col:12> 'int' lvalue Var 0x564e76e7e860 'x' 'int'
    | | `-IntegerLiteral 0x564e76e7ec18 <col:16> 'int' 0
    | `-CompoundStmt 0x564e76e7eee0 <col:19, line:20:5>
    |   |-BinaryOperator 0x564e76e7ed20 <line:17:9, col:17> 'int' '='
    |   | |-DeclRefExpr 0x564e76e7ec70 <col:9> 'int' lvalue Var 0x564e76e7e860 'x' 'int'
    |   | `-BinaryOperator 0x564e76e7ed00 <col:13, col:17> 'int' '+'
    |   |   |-ImplicitCastExpr 0x564e76e7ecd0 <col:13> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x564e76e7ec90 <col:13> 'int' lvalue Var 0x564e76e7e860 'x' 'int'
    |   |   `-ImplicitCastExpr 0x564e76e7ece8 <col:17> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x564e76e7ecb0 <col:17> 'int' lvalue Var 0x564e76e7e8e0 'y' 'int'
    |   |-BinaryOperator 0x564e76e7edf0 <line:18:9, col:17> 'int' '='
    |   | |-DeclRefExpr 0x564e76e7ed40 <col:9> 'int' lvalue Var 0x564e76e7e8e0 'y' 'int'
    |   | `-BinaryOperator 0x564e76e7edd0 <col:13, col:17> 'int' '+'
    |   |   |-ImplicitCastExpr 0x564e76e7eda0 <col:13> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x564e76e7ed60 <col:13> 'int' lvalue Var 0x564e76e7e8e0 'y' 'int'
    |   |   `-ImplicitCastExpr 0x564e76e7edb8 <col:17> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x564e76e7ed80 <col:17> 'int' lvalue Var 0x564e76e7e960 'z' 'int'
    |   `-BinaryOperator 0x564e76e7eec0 <line:19:9, col:17> 'int' '='
    |     |-DeclRefExpr 0x564e76e7ee10 <col:9> 'int' lvalue Var 0x564e76e7e960 'z' 'int'
    |     `-BinaryOperator 0x564e76e7eea0 <col:13, col:17> 'int' '+'
    |       |-ImplicitCastExpr 0x564e76e7ee70 <col:13> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x564e76e7ee30 <col:13> 'int' lvalue Var 0x564e76e7e960 'z' 'int'
    |       `-ImplicitCastExpr 0x564e76e7ee88 <col:17> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x564e76e7ee50 <col:17> 'int' lvalue Var 0x564e76e7e860 'x' 'int'
    `-ReturnStmt 0x564e76e7ef40 <line:21:5, col:12>
      `-IntegerLiteral 0x564e76e7ef20 <col:12> 'int' 0
