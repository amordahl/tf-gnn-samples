TranslationUnitDecl 0x563e0ba4bf88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x563e0ba4c848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x563e0ba4c520 '__int128'
|-TypedefDecl 0x563e0ba4c8b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x563e0ba4c540 'unsigned __int128'
|-TypedefDecl 0x563e0ba4cbc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x563e0ba4c990 'struct __NSConstantString_tag'
|   `-Record 0x563e0ba4c910 '__NSConstantString_tag'
|-TypedefDecl 0x563e0ba4cc68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x563e0ba4cc20 'char *'
|   `-BuiltinType 0x563e0ba4c020 'char'
|-TypedefDecl 0x563e0ba8bb60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x563e0ba4cf00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x563e0ba4cd40 'struct __va_list_tag'
|     `-Record 0x563e0ba4ccc0 '__va_list_tag'
|-FunctionDecl 0x563e0ba8bc80 <pthread-wmm/safe014_rmo.opt_false-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x563e0ba8be50 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x563e0ba8bd80 <col:31> col:34 'int'
|-FunctionDecl 0x563e0ba8bfc8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x563e0ba8c0f0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x563e0ba8c238 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x563e0ba8c1a8 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x563e0ba8c468 <col:40, col:99>
|   |-IfStmt 0x563e0ba8c438 <col:42, col:88>
|   | |-UnaryOperator 0x563e0ba8c318 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x563e0ba8c300 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x563e0ba8c2e0 <col:47> 'int' lvalue ParmVar 0x563e0ba8c1a8 'expression' 'int'
|   | `-CompoundStmt 0x563e0ba8c420 <col:59, col:88>
|   |   `-LabelStmt 0x563e0ba8c408 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x563e0ba8c398 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x563e0ba8c380 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x563e0ba8c330 <col:68> 'void () __attribute__((noreturn))' Function 0x563e0ba8c0f0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x563e0ba8c450 <col:89>
|   `-ReturnStmt 0x563e0ba8c458 <col:91>
|-FunctionDecl 0x563e0ba8c4b0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x563e0ba8c570 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x563e0ba8c8f0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x563e0ba8c628 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x563e0ba8c6a8 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x563e0ba8c728 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x563e0ba8c7a8 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x563e0ba8c9b0 <line:11:22>
|-FunctionDecl 0x563e0bab1f10 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x563e0ba8ca20 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x563e0ba8caa0 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x563e0bab1d40 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x563e0bab1dc0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x563e0bab1fd0 <line:14:22>
|-FunctionDecl 0x563e0bab2280 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x563e0bab2040 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x563e0bab20c0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x563e0bab2140 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x563e0bab2338 <line:16:22>
|-TypedefDecl 0x563e0bab23a8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x563e0ba4c0e0 'unsigned char'
|-TypedefDecl 0x563e0bab2418 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x563e0ba4c100 'unsigned short'
|-TypedefDecl 0x563e0bab2488 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-TypedefDecl 0x563e0bab24f8 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab2568 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x563e0ba4c040 'signed char'
|-TypedefDecl 0x563e0bab25d8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x563e0ba4c0e0 'unsigned char'
|-TypedefDecl 0x563e0bab2648 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x563e0ba4c060 'short'
|-TypedefDecl 0x563e0bab26b8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x563e0ba4c100 'unsigned short'
|-TypedefDecl 0x563e0bab2728 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x563e0ba4c080 'int'
|-TypedefDecl 0x563e0bab2798 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-TypedefDecl 0x563e0bab2808 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab2878 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab28e8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab2958 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab29c8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab2a38 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-TypedefDecl 0x563e0bab2aa8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-TypedefDecl 0x563e0bab2b18 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab2b88 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab2bf8 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-TypedefDecl 0x563e0bab2c68 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab2cd8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab2d68 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab2dd8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x563e0ba4c080 'int'
|-RecordDecl 0x563e0bab2e30 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x563e0bab2f78 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x563e0bab3030 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x563e0bab2fd0 'struct __fsid_t' sugar
|   `-RecordType 0x563e0bab2eb0 '__fsid_t'
|     `-Record 0x563e0bab2e30 ''
|-TypedefDecl 0x563e0bab30b8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab3128 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab3198 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab3208 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-TypedefDecl 0x563e0bab3278 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab32e8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-TypedefDecl 0x563e0bab3358 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab33c8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x563e0ba4c080 'int'
|-TypedefDecl 0x563e0bab3438 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x563e0ba4c080 'int'
|-TypedefDecl 0x563e0bab34a8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x563e0ba4c080 'int'
|-TypedefDecl 0x563e0bab3518 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x563e0ba4c7a0 'void *'
|   `-BuiltinType 0x563e0ba4bfe0 'void'
|-TypedefDecl 0x563e0bab3588 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab35f8 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab3668 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab36d8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab3748 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab37b8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab3828 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab3898 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab3908 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab3978 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab39e8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab3a78 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x563e0bab3a40 '__off64_t' sugar
|   |-Typedef 0x563e0bab2d68 '__off64_t'
|   `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab3b70 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x563e0bab3b30 '__quad_t *'
|   `-TypedefType 0x563e0bab3ad0 '__quad_t' sugar
|     |-Typedef 0x563e0bab28e8 '__quad_t'
|     `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab3be0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x563e0ba4cc20 'char *'
|   `-BuiltinType 0x563e0ba4c020 'char'
|-TypedefDecl 0x563e0bab3c50 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab3cc0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-FunctionDecl 0x563e0bab3e38 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x563e0bab3d60 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x563e0bab4148 <line:72:1, line:74:1>
|   `-ReturnStmt 0x563e0bab4138 <line:73:3, col:34>
|     `-CallExpr 0x563e0bab40f8 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x563e0bab40e0 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x563e0bab4070 <col:10> '<builtin fn type>' Function 0x563e0bab3ee0 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x563e0bab4120 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x563e0bab4090 <col:29> 'unsigned int' lvalue ParmVar 0x563e0bab3d60 '__bsx' 'unsigned int'
|-FunctionDecl 0x563e0bab3ee0 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x563e0bab3f80 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x563e0bab3ff0 <col:10> Implicit
| `-ConstAttr 0x563e0bab4048 <col:10> Implicit
|-FunctionDecl 0x563e0bab42a0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x563e0bab4198 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x563e0bab45b8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x563e0bab45a8 <line:78:3, col:34>
|     `-CallExpr 0x563e0bab4568 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x563e0bab4550 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x563e0bab44d8 <col:10> '<builtin fn type>' Function 0x563e0bab4348 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x563e0bab4590 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x563e0bab44f8 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x563e0bab4198 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x563e0bab4348 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x563e0bab43e8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x563e0bab4458 <col:10> Implicit
| `-ConstAttr 0x563e0bab44b0 <col:10> Implicit
|-TypedefDecl 0x563e0bab45e8 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-TypedefDecl 0x563e0bab4678 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x563e0bab4640 '__time_t' sugar
|   |-Typedef 0x563e0bab3278 '__time_t'
|   `-BuiltinType 0x563e0ba4c0a0 'long'
|-RecordDecl 0x563e0bab46d0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x563e0bab4788 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x563e0bab4818 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x563e0bab48a8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x563e0bab4870 '__pid_t' sugar
|   |-Typedef 0x563e0bab2dd8 '__pid_t'
|   `-BuiltinType 0x563e0ba4c080 'int'
|-RecordDecl 0x563e0bab4900 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x563e0bab49c0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x563e0bab4a10 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x563e0bab4ad0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x563e0bab4b38 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-RecordDecl 0x563e0bab4b90 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x563e0bab6e70 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x563e0bab6f20 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x563e0bab6ec0 'struct cpu_set_t' sugar
|   `-RecordType 0x563e0bab4c10 'cpu_set_t'
|     `-Record 0x563e0bab4b90 ''
|-FunctionDecl 0x563e0bab71f8 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x563e0bab6fc8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x563e0bab70d0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x563e0bab72a8 <line:108:19>
|-FunctionDecl 0x563e0bab7480 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x563e0bab7310 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x563e0bab7528 <col:69>
|-FunctionDecl 0x563e0bab76a0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x563e0bab7590 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x563e0bab7748 <col:64>
|-FunctionDecl 0x563e0bab7a08 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x563e0bab77b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x563e0bab78e8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x563e0bab7ab8 <line:114:22>
|-FunctionDecl 0x563e0bab7e60 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x563e0bab7b20 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x563e0bab7c18 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x563e0bab7f10 <col:88>
|-FunctionDecl 0x563e0bab81c8 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x563e0bab7f78 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x563e0bab7ff8 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x563e0bab8088 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x563e0bab8280 <col:62>
|-FunctionDecl 0x563e0bab83f8 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x563e0bab82e8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x563e0bab84a0 <col:63>
|-FunctionDecl 0x563e0bab85c8 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x563e0bab8668 <col:47>
|-FunctionDecl 0x563e0bab8770 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x563e0bab86d8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x563e0bab8818 <col:69>
|-FunctionDecl 0x563e0bab8920 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x563e0bab8888 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x563e0bab89c8 <col:69>
|-FunctionDecl 0x563e0bab8c88 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x563e0bab8a30 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x563e0bab8b68 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x563e0bab8d38 <col:88>
|-TypedefDecl 0x563e0bab8dc8 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x563e0bab8d90 '__clock_t' sugar
|   |-Typedef 0x563e0bab30b8 '__clock_t'
|   `-BuiltinType 0x563e0ba4c0a0 'long'
|-TypedefDecl 0x563e0bab97e0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x563e0bab8e20 '__clockid_t' sugar
|   |-Typedef 0x563e0bab34a8 '__clockid_t'
|   `-BuiltinType 0x563e0ba4c080 'int'
|-TypedefDecl 0x563e0bab9878 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x563e0bab9840 '__timer_t' sugar
|   |-Typedef 0x563e0bab3518 '__timer_t'
|   `-PointerType 0x563e0ba4c7a0 'void *'
|     `-BuiltinType 0x563e0ba4bfe0 'void'
|-RecordDecl 0x563e0bab98d0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x563e0bab9990 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x563e0bab99f8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x563e0bab9a60 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x563e0bab9ac8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x563e0bab9b30 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x563e0bab9b98 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x563e0bab9c00 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x563e0bab9c68 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x563e0bab9cd0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x563e0bab9d38 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x563e0bab9da0 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x563e0bab9df0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x563e0bab9eb8 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x563e0bab9f28 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x563e0bab9fd0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x563e0baba1a0 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x563e0baba240 <col:45>
|-FunctionDecl 0x563e0baba420 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x563e0baba310 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x563e0baba4c8 <col:54>
|-FunctionDecl 0x563e0baba6c8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x563e0baba530 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x563e0baba5a8 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x563e0baba778 <line:158:22>
| `-ConstAttr 0x563e0babb410 <col:63>
|-FunctionDecl 0x563e0babb610 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x563e0babb508 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x563e0babb6b8 <col:56>
|-FunctionDecl 0x563e0babba60 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x563e0babb728 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x563e0babb7a0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x563e0babb820 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x563e0babb918 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x563e0babbb20 <col:54>
|-RecordDecl 0x563e0babbb78 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x563e0babbc28 parent 0x563e0ba4bf88 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x563e0babbe88 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x563e0babbf28 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x563e0babbf90 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x563e0babbff8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x563e0babc0e8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x563e0babc208 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x563e0babc1b0 'struct __locale_struct *'
|   `-ElaboratedType 0x563e0babc140 'struct __locale_struct' sugar
|     `-RecordType 0x563e0babbc00 'struct __locale_struct'
|       `-Record 0x563e0babbb78 '__locale_struct'
|-TypedefDecl 0x563e0babc2b8 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x563e0babc280 '__locale_t' sugar
|   |-Typedef 0x563e0babc208 '__locale_t'
|   `-PointerType 0x563e0babc1b0 'struct __locale_struct *'
|     `-ElaboratedType 0x563e0babc140 'struct __locale_struct' sugar
|       `-RecordType 0x563e0babbc00 'struct __locale_struct'
|         `-Record 0x563e0babbb78 '__locale_struct'
|-FunctionDecl 0x563e0babc6b0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x563e0babc328 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x563e0babc3a0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x563e0babc438 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x563e0babc4c8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x563e0babc540 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x563e0babc778 <col:40>
|-FunctionDecl 0x563e0babc968 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x563e0babc840 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x563e0babca10 <col:66>
|-FunctionDecl 0x563e0babcb20 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x563e0babca78 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x563e0babcbc8 <col:69>
|-FunctionDecl 0x563e0babcdf8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x563e0babcc30 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x563e0babccc0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x563e0babcea8 <col:52>
|-FunctionDecl 0x563e0babd050 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x563e0babcf10 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x563e0babcfa0 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x563e0babd100 <col:55>
|-FunctionDecl 0x563e0babd298 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x563e0babd180 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x563e0babd340 <col:62>
|-FunctionDecl 0x563e0babd578 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x563e0babd3a8 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x563e0babd620 <col:60>
|-FunctionDecl 0x563e0babd848 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x563e0babd6a0 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x563e0babd720 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x563e0babd8f8 <col:44>
|-FunctionDecl 0x563e0babdb08 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x563e0babd960 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x563e0babd9e0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x563e0babdbb8 <col:49>
|-VarDecl 0x563e0babdcb8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x563e0babdd38 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x563e0babddb8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x563e0babde80 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x563e0babdfb0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x563e0babe050 <col:42>
|-VarDecl 0x563e0babe0c0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x563e0babe140 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x563e0babe2c8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x563e0babe1b8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x563e0babe370 <col:57>
|-FunctionDecl 0x563e0babf4f0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x563e0babe3f0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x563e0babf598 <col:56>
|-FunctionDecl 0x563e0babf6a8 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x563e0babf618 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x563e0babf750 <col:59>
|-FunctionDecl 0x563e0babf858 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x563e0babf7c0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x563e0babf900 <col:48>
| `-ConstAttr 0x563e0babf958 <col:89>
|-FunctionDecl 0x563e0babfbb8 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x563e0babfa08 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x563e0babfa98 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x563e0babfe18 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x563e0babfca8 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x563e0babfd38 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x563e0babfec8 <col:88>
|-FunctionDecl 0x563e0bac0060 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x563e0babff30 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x563e0babffc0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x563e0bac0110 <col:88>
|-FunctionDecl 0x563e0bac0328 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x563e0bac0178 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x563e0bac0208 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x563e0bac03d8 <line:209:22>
|-FunctionDecl 0x563e0bac0778 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x563e0bac0440 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x563e0bac0500 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x563e0bac0590 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x563e0bac0620 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x563e0bac0a78 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x563e0bac0878 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x563e0bac0950 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x563e0bac0b28 <col:85>
|-FunctionDecl 0x563e0bac0f18 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x563e0bac0b90 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x563e0bac0cc8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x563e0bac0dd0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x563e0bac0fd0 <col:52>
|-FunctionDecl 0x563e0bac1148 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x563e0bac1038 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x563e0bac11f0 <col:61>
|-FunctionDecl 0x563e0bac1668 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x563e0bac1258 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x563e0bac12d8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x563e0bac1408 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x563e0bac1510 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x563e0bac1728 <col:62>
|-FunctionDecl 0x563e0bac1948 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x563e0bac1790 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x563e0bac1820 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x563e0bac19f8 <line:222:22>
|-FunctionDecl 0x563e0bac1af8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x563e0bac1a60 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x563e0bac1ba0 <col:65>
|-TypedefDecl 0x563e0bac1c10 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x563e0ba4c140 'unsigned long'
|-RecordDecl 0x563e0bac1c68 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x563e0bac1db0 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x563e0bac1e18 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x563e0bac1ec8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x563e0bac1e70 'union pthread_attr_t' sugar
|   `-RecordType 0x563e0bac1cf0 'union pthread_attr_t'
|     `-Record 0x563e0bac1c68 'pthread_attr_t'
|-RecordDecl 0x563e0bac1f20 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x563e0bac2098 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x563e0bac2110 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x563e0bac21c0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x563e0bac2160 'struct __pthread_internal_list' sugar
|   `-RecordType 0x563e0bac1fa0 'struct __pthread_internal_list'
|     `-Record 0x563e0bac1f20 '__pthread_internal_list'
|-RecordDecl 0x563e0bac2230 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x563e0bac22d8 parent 0x563e0ba4bf88 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x563e0bac23b0 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x563e0bac2418 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x563e0bac2480 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x563e0bac6530 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x563e0bac6598 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x563e0bac6600 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x563e0bac6688 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x563e0bac6740 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x563e0bac6830 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x563e0bac6898 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x563e0bac6a20 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x563e0bac69c0 'union pthread_mutex_t' sugar
|   `-RecordType 0x563e0bac22b0 'pthread_mutex_t'
|     `-Record 0x563e0bac2230 ''
|-RecordDecl 0x563e0bac6a90 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x563e0bac6bd0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x563e0bac6c38 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x563e0bac6cf0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x563e0bac6c90 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x563e0bac6b10 'pthread_mutexattr_t'
|     `-Record 0x563e0bac6a90 ''
|-RecordDecl 0x563e0bac6d60 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x563e0bac6e08 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x563e0bac6ed0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x563e0bac6f38 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x563e0bac6fa0 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x563e0bac7008 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x563e0bac7070 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x563e0bac70d8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x563e0bac7140 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x563e0bac71a8 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x563e0bac7260 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe014_rmo.opt_false-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/safe014_rmo.opt_false-unreach-call.i:259:3)'
| |-FieldDecl 0x563e0bac7350 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x563e0bac73b8 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x563e0bac7540 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x563e0bac7490 'union pthread_cond_t' sugar
|   `-RecordType 0x563e0bac6de0 'pthread_cond_t'
|     `-Record 0x563e0bac6d60 ''
|-RecordDecl 0x563e0bac75b0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x563e0bac76b0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x563e0bac7718 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x563e0bac77d0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x563e0bac7770 'union pthread_condattr_t' sugar
|   `-RecordType 0x563e0bac7630 'pthread_condattr_t'
|     `-Record 0x563e0bac75b0 ''
|-TypedefDecl 0x563e0bac7858 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x563e0ba4c120 'unsigned int'
|-TypedefDecl 0x563e0bac78c8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x563e0ba4c080 'int'
|-RecordDecl 0x563e0bac7920 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x563e0bac79c8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x563e0bac7a90 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x563e0bac7af8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x563e0bac7b60 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x563e0bac7bc8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x563e0bac7c30 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x563e0bac7c98 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x563e0bac7d00 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x563e0bac7d68 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x563e0bac7dd0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x563e0bac7e38 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x563e0bac7ea0 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x563e0bac7f50 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe014_rmo.opt_false-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/safe014_rmo.opt_false-unreach-call.i:282:3)'
| |-FieldDecl 0x563e0bac7ff8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x563e0bac8060 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x563e0bac81b0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x563e0bac8150 'union pthread_rwlock_t' sugar
|   `-RecordType 0x563e0bac79a0 'pthread_rwlock_t'
|     `-Record 0x563e0bac7920 ''
|-RecordDecl 0x563e0bac8220 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x563e0bac8360 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x563e0bac83c8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x563e0bac8480 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x563e0bac8420 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x563e0bac82a0 'pthread_rwlockattr_t'
|     `-Record 0x563e0bac8220 ''
|-TypedefDecl 0x563e0baca560 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x563e0ba4c084 'volatile int' volatile
|   `-BuiltinType 0x563e0ba4c080 'int'
|-RecordDecl 0x563e0baca5b8 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x563e0baca700 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x563e0baca768 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x563e0baca820 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x563e0baca7c0 'union pthread_barrier_t' sugar
|   `-RecordType 0x563e0baca640 'pthread_barrier_t'
|     `-Record 0x563e0baca5b8 ''
|-RecordDecl 0x563e0baca890 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x563e0baca990 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x563e0baca9f8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x563e0bacaab0 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x563e0bacaa50 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x563e0baca910 'pthread_barrierattr_t'
|     `-Record 0x563e0baca890 ''
|-TypedefDecl 0x563e0bacabc8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x563e0bacab60 'long [8]' 8 
|   `-BuiltinType 0x563e0ba4c0a0 'long'
|-EnumDecl 0x563e0bacac20 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x563e0bacace8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x563e0bacad38 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x563e0bacad88 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x563e0bacae58 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x563e0bacaea8 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x563e0bacaef8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x563e0bacaf48 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x563e0bacafd0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x563e0bacafb8 <col:26> 'int'
| |   `-DeclRefExpr 0x563e0bacaf98 <col:26> 'int' EnumConstant 0x563e0bacae58 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x563e0bacb058 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x563e0bacb040 <col:29> 'int'
| |   `-DeclRefExpr 0x563e0bacb020 <col:29> 'int' EnumConstant 0x563e0bacaea8 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x563e0bacb0e0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x563e0bacb0c8 <col:30> 'int'
| |   `-DeclRefExpr 0x563e0bacb0a8 <col:30> 'int' EnumConstant 0x563e0bacaef8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x563e0bacb168 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x563e0bacb150 <col:27> 'int'
|     `-DeclRefExpr 0x563e0bacb130 <col:27> 'int' EnumConstant 0x563e0bacafd0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x563e0bacb1b8 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x563e0bacb288 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x563e0bacb310 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x563e0bacb2f8 <col:30> 'int'
| |   `-DeclRefExpr 0x563e0bacb2d8 <col:30> 'int' EnumConstant 0x563e0bacb288 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x563e0bacb360 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x563e0bacb3e8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x563e0bacb3d0 <col:29> 'int'
|     `-DeclRefExpr 0x563e0bacb3b0 <col:29> 'int' EnumConstant 0x563e0bacb360 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x563e0bacb438 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x563e0bacb508 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x563e0bacb570 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x563e0bacb5c0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x563e0bacb610 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x563e0bacb6d8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x563e0bacb728 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x563e0bacb778 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x563e0bacb800 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x563e0bacb7e8 <col:31> 'int'
|     `-DeclRefExpr 0x563e0bacb7c8 <col:31> 'int' EnumConstant 0x563e0bacb6d8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x563e0bacb850 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x563e0bacb918 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x563e0bacb968 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x563e0bacb9b8 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x563e0bacba88 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x563e0bacbad8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x563e0bacbb28 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x563e0bacbbf8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x563e0bacbc48 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x563e0bacbc98 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x563e0bacbed8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x563e0bacbf40 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x563e0bacbfa8 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x563e0bacc0c8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x563e0bacc118 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x563e0bacc1e8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x563e0bacc238 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x563e0bacc288 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x563e0bacc358 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x563e0bacc3a8 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x563e0bacc9d8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x563e0bacc4a0 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x563e0bacc5c0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bacc7c0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x563e0bacc840 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x563e0bacca98 <col:47>
| |-NonNullAttr 0x563e0baccaf0 <col:77, col:94> 1 3
| `-CallbackAttr 0x563e0baccb28 <line:386:12> Implicit 2 3
|-FunctionDecl 0x563e0baccc50 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x563e0baccb80 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x563e0baccea8 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x563e0baccd08 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x563e0baccd88 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x563e0bacd078 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x563e0baccf68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x563e0bacd120 <col:60>
|-FunctionDecl 0x563e0bacd270 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x563e0bacd310 <col:54>
| `-ConstAttr 0x563e0bacd368 <col:95>
|-FunctionDecl 0x563e0bacdda0 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x563e0bacd3a0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x563e0bacd418 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x563e0bacde50 <line:395:19>
| `-ConstAttr 0x563e0bacdea8 <col:60>
|-FunctionDecl 0x563e0bace078 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x563e0bacdf40 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x563e0bace120 <col:71>
| `-NonNullAttr 0x563e0bace178 <col:112, col:126> 1
|-FunctionDecl 0x563e0bace280 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x563e0bace1c8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x563e0bace328 <line:398:22>
| `-NonNullAttr 0x563e0bace380 <col:63, col:77> 1
|-FunctionDecl 0x563e0bace5a8 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x563e0bace3c8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x563e0bace448 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x563e0bace658 <line:401:22>
| `-NonNullAttr 0x563e0bace6b0 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bace8b8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x563e0bace6f8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x563e0bace778 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x563e0bace968 <line:404:22>
| `-NonNullAttr 0x563e0bace9c0 <col:63, col:77> 1
|-FunctionDecl 0x563e0bacec18 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x563e0bacea08 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x563e0baceab0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x563e0bacecc8 <line:407:22>
| `-NonNullAttr 0x563e0baced20 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bacff78 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x563e0bacfdc0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x563e0bacfe38 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x563e0bad0028 <line:410:22>
| `-NonNullAttr 0x563e0bad0080 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad02b8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x563e0bad00c8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bad0158 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x563e0bad0368 <line:413:22>
| `-NonNullAttr 0x563e0bad03c0 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bad05f8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x563e0bad0408 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bad0498 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x563e0bad06a8 <col:37>
| `-NonNullAttr 0x563e0bad0700 <col:78, col:95> 1 2
|-FunctionDecl 0x563e0bad08e8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bad0748 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bad07c8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x563e0bad0998 <line:419:22>
| `-NonNullAttr 0x563e0bad09f0 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bad0b78 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x563e0bad0a38 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x563e0bad0ab8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x563e0bad0c28 <line:421:22>
| `-NonNullAttr 0x563e0bad0c80 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad1e58 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bad0cc8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bad0d48 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x563e0bad1f08 <line:424:22>
| `-NonNullAttr 0x563e0bad1f60 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bad20e8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x563e0bad1fa8 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x563e0bad2028 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x563e0bad2198 <line:427:22>
| `-NonNullAttr 0x563e0bad21f0 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad2398 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bad2238 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bad22b8 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x563e0bad2448 <line:430:22>
| `-NonNullAttr 0x563e0bad24a0 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bad2628 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x563e0bad24e8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x563e0bad2568 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x563e0bad26d8 <line:432:22>
| `-NonNullAttr 0x563e0bad2730 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad2958 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x563e0bad2778 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bad27f8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x563e0bad2a08 <line:435:22>
| |-NonNullAttr 0x563e0bad2a60 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x563e0bad2a98 <col:100> "" ""
|-FunctionDecl 0x563e0bad2ca8 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x563e0bad2ae8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x563e0bad2b68 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x563e0bad2d58 <line:438:22>
| |-NonNullAttr 0x563e0bad2db0 <col:63, col:77> 1
| `-DeprecatedAttr 0x563e0bad2df8 <col:97> "" ""
|-FunctionDecl 0x563e0bad2fe8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x563e0bad2e48 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bad2ec0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x563e0bad3098 <line:441:22>
| `-NonNullAttr 0x563e0bad30f0 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bad3270 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x563e0bad3138 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x563e0bad31b0 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x563e0bad3320 <line:444:22>
| `-NonNullAttr 0x563e0bad3378 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad3668 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x563e0bad33c8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x563e0bad3448 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x563e0bad34c0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x563e0bad3720 <line:448:22>
| `-NonNullAttr 0x563e0bad3778 <col:63, col:83> 1 2 3
|-FunctionDecl 0x563e0bad3a28 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x563e0bad37d0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x563e0bad3850 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x563e0bad38c8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x563e0bad3ae0 <col:43>
| `-NonNullAttr 0x563e0bad3b38 <col:84, col:98> 1
|-FunctionDecl 0x563e0bad3e40 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x563e0bad3b88 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x563e0bad3c08 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x563e0bad3c98 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x563e0bad3ef8 <line:453:22>
| `-NonNullAttr 0x563e0bad3f50 <col:63, col:77> 3
|-FunctionDecl 0x563e0bad4228 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x563e0bad3f98 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x563e0bad4018 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x563e0bad40a8 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x563e0bad42e0 <line:457:22>
| `-NonNullAttr 0x563e0bad4338 <col:63, col:80> 2 3
|-FunctionDecl 0x563e0bad4528 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x563e0bad4388 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x563e0bad4408 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x563e0bad45d8 <line:459:22>
|-FunctionDecl 0x563e0bad49a8 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x563e0bad46a0 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x563e0bad4840 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x563e0bad4a58 <col:52, col:69> 1 2
|-FunctionDecl 0x563e0bad4c00 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x563e0bad4ae0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x563e0bad4b60 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x563e0bad4e10 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x563e0bad4cc8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x563e0bad4d48 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x563e0bad4f68 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x563e0bad4ed0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x563e0bad50a8 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x563e0bad5148 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x563e0bad51f8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x563e0bad52e8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x563e0bad5350 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x563e0bad5520 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/safe014_rmo.opt_false-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x563e0bad5618 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x563e0bad56d0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x563e0bad5670 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x563e0bad51d0 '__pthread_unwind_buf_t'
| |   `-Record 0x563e0bad5148 ''
| `-AlignedAttr 0x563e0bad5728 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x563e0bad57a0 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x563e0bad5900 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x563e0bad5968 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x563e0bad59d0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x563e0bad5a38 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x563e0bad5c40 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x563e0bad5b30 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x563e0bad5e20 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x563e0bad5cf8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x563e0bad5fe0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x563e0bad5ed8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x563e0bad6088 <line:488:22>
|-RecordDecl 0x563e0bad60e0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x563e0bad63f8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x563e0bad6258 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x563e0bad62d8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x563e0bad64a8 <col:86>
| `-ReturnsTwiceAttr 0x563e0bad6500 <col:12> Implicit
|-FunctionDecl 0x563e0bad6828 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x563e0bad65d0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x563e0bad66e0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x563e0bad68d8 <line:494:22>
| `-NonNullAttr 0x563e0bad6930 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad6aa8 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x563e0bad6978 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x563e0bad6b50 <line:496:22>
| `-NonNullAttr 0x563e0bad6ba8 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad6cb0 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x563e0bad6bf8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x563e0bad6d58 <line:498:22>
| `-NonNullAttr 0x563e0bad6db0 <col:52, col:66> 1
|-FunctionDecl 0x563e0bad6ee8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x563e0bad6e30 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x563e0bad6f90 <line:500:22>
| `-NonNullAttr 0x563e0bad6fe8 <col:52, col:66> 1
|-FunctionDecl 0x563e0bad7228 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x563e0bad7038 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x563e0bad70c8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x563e0bad72d8 <col:36>
| `-NonNullAttr 0x563e0bad7330 <col:66, col:83> 1 2
|-FunctionDecl 0x563e0bad7430 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x563e0bad7378 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x563e0bad74d8 <line:505:22>
| `-NonNullAttr 0x563e0bad7530 <col:52, col:66> 1
|-FunctionDecl 0x563e0bad77c8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bad75e0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x563e0bad7660 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x563e0bad7878 <line:509:22>
| `-NonNullAttr 0x563e0bad78d0 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bad7b98 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x563e0bad7918 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x563e0bad7998 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x563e0bad7a18 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x563e0bad7c50 <line:513:22>
| `-NonNullAttr 0x563e0bad7ca8 <col:63, col:80> 1 3
|-FunctionDecl 0x563e0bad7e40 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x563e0bad7cf8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x563e0bad7ee8 <line:515:22>
| `-NonNullAttr 0x563e0bad7f40 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad8128 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x563e0bad7ff0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x563e0bad81d0 <line:517:22>
| `-NonNullAttr 0x563e0bad8228 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad8330 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x563e0bad8278 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x563e0bad83d8 <line:519:22>
| `-NonNullAttr 0x563e0bad8430 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad8658 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bad8478 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x563e0bad84f8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x563e0bad8708 <line:523:22>
| `-NonNullAttr 0x563e0bad8760 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bad8968 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x563e0bad87a8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x563e0bad8828 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x563e0bad8a18 <line:526:22>
| `-NonNullAttr 0x563e0bad8a70 <col:63, col:77> 1
|-FunctionDecl 0x563e0bad8c18 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bad8ab8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x563e0bad8b38 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x563e0bad8cc8 <line:529:22>
| `-NonNullAttr 0x563e0bad8d20 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bad9f20 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x563e0bad8d68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x563e0bad9e60 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x563e0bad9fd0 <line:531:22>
| `-NonNullAttr 0x563e0bada028 <col:63, col:77> 1
|-FunctionDecl 0x563e0bada1d8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bada078 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x563e0bada0f8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x563e0bada288 <line:535:22>
| `-NonNullAttr 0x563e0bada2e0 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bada468 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x563e0bada328 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x563e0bada3a8 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x563e0bada518 <line:538:22>
| `-NonNullAttr 0x563e0bada570 <col:63, col:77> 1
|-FunctionDecl 0x563e0bada718 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bada5b8 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x563e0bada638 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x563e0bada7c8 <line:542:22>
| `-NonNullAttr 0x563e0bada820 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bada9a8 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x563e0bada868 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x563e0bada8e8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x563e0badaa58 <line:545:22>
| `-NonNullAttr 0x563e0badaab0 <col:63, col:77> 1
|-FunctionDecl 0x563e0badac98 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x563e0badaaf8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x563e0badab78 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x563e0badad48 <line:548:22>
| `-NonNullAttr 0x563e0badada0 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0badbf58 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x563e0badade8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x563e0badbe98 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x563e0badc008 <line:551:22>
| `-NonNullAttr 0x563e0badc060 <col:63, col:77> 1
|-FunctionDecl 0x563e0badc398 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x563e0badc140 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x563e0badc250 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x563e0badc448 <col:29>
| `-NonNullAttr 0x563e0badc4a0 <col:70, col:84> 1
|-FunctionDecl 0x563e0badc618 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x563e0badc4e8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x563e0badc6c0 <line:556:22>
| `-NonNullAttr 0x563e0badc718 <col:63, col:77> 1
|-FunctionDecl 0x563e0badc820 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x563e0badc768 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x563e0badc8c8 <line:558:22>
| `-NonNullAttr 0x563e0badc920 <col:52, col:66> 1
|-FunctionDecl 0x563e0badca20 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x563e0badc968 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x563e0badcac8 <line:560:19>
| `-NonNullAttr 0x563e0badcb20 <col:49, col:63> 1
|-FunctionDecl 0x563e0badcd58 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x563e0badcb68 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x563e0badcbf8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x563e0badce08 <col:39>
| `-NonNullAttr 0x563e0badce90 <col:69, col:86> 1 2
|-FunctionDecl 0x563e0badcf90 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x563e0badced8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x563e0badd038 <line:565:22>
| `-NonNullAttr 0x563e0badd090 <col:52, col:66> 1
|-FunctionDecl 0x563e0badd190 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x563e0badd0d8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x563e0badd238 <line:567:22>
| `-NonNullAttr 0x563e0badd290 <col:52, col:66> 1
|-FunctionDecl 0x563e0badd448 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x563e0badd2d8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x563e0badd368 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x563e0badd4f8 <col:39>
| `-NonNullAttr 0x563e0badd550 <col:69, col:86> 1 2
|-FunctionDecl 0x563e0badd650 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x563e0badd598 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x563e0badd6f8 <line:572:22>
| `-NonNullAttr 0x563e0badd750 <col:52, col:66> 1
|-FunctionDecl 0x563e0badd938 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x563e0badd800 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x563e0badd9e0 <line:574:22>
| `-NonNullAttr 0x563e0badda38 <col:63, col:77> 1
|-FunctionDecl 0x563e0baddb40 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x563e0badda88 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x563e0baddbe8 <line:576:22>
| `-NonNullAttr 0x563e0baddc40 <col:63, col:77> 1
|-FunctionDecl 0x563e0baddea0 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0baddc88 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x563e0baddd08 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x563e0baddf50 <line:580:22>
| `-NonNullAttr 0x563e0baddfa8 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bade1b8 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x563e0baddff8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x563e0bade078 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x563e0bade268 <line:583:22>
| `-NonNullAttr 0x563e0bade2c0 <col:63, col:77> 1
|-FunctionDecl 0x563e0bade468 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bade308 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x563e0bade388 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x563e0bade518 <line:587:22>
| `-NonNullAttr 0x563e0bade570 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bade6f8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x563e0bade5b8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x563e0bade638 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x563e0bade7a8 <col:36>
| `-NonNullAttr 0x563e0bade800 <col:77, col:91> 1
|-FunctionDecl 0x563e0badeb38 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x563e0bade8e0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x563e0bade9f0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x563e0badebe8 <line:592:22>
| `-NonNullAttr 0x563e0badec40 <col:63, col:77> 1
|-FunctionDecl 0x563e0badedb8 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x563e0badec88 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x563e0badee60 <line:594:22>
| `-NonNullAttr 0x563e0badeee0 <col:63, col:77> 1
|-FunctionDecl 0x563e0badefe0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x563e0badef28 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x563e0badf088 <line:596:22>
| `-NonNullAttr 0x563e0badf0e0 <col:52, col:66> 1
|-FunctionDecl 0x563e0badf1e0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x563e0badf128 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x563e0badf288 <line:598:22>
| `-NonNullAttr 0x563e0badf2e0 <col:52, col:66> 1
|-FunctionDecl 0x563e0badf508 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x563e0badf328 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x563e0badf3a0 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x563e0badf5b8 <line:601:22, col:39> 1 2
|-FunctionDecl 0x563e0badf8e8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x563e0badf638 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x563e0badf6b0 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x563e0badf740 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x563e0badf9a0 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x563e0badfbb8 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x563e0badfa80 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x563e0badfc60 <line:607:22>
| `-NonNullAttr 0x563e0badfcb8 <col:63, col:77> 1
|-FunctionDecl 0x563e0badfdc0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x563e0badfd08 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x563e0badfe68 <line:609:22>
| `-NonNullAttr 0x563e0badfef0 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae0118 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0badff38 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x563e0badffb8 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x563e0bae01c8 <line:613:22>
| `-NonNullAttr 0x563e0bae0220 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bae0428 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x563e0bae0268 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x563e0bae02e8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x563e0bae04d8 <col:37>
| `-NonNullAttr 0x563e0bae0530 <col:78, col:92> 1
|-FunctionDecl 0x563e0bae0748 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x563e0bae0578 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x563e0bae0620 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x563e0bae07f8 <line:619:22>
| `-NonNullAttr 0x563e0bae0850 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bae0a18 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x563e0bae0898 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x563e0bae0910 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x563e0bae0ac8 <line:622:22>
| `-NonNullAttr 0x563e0bae0b20 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae0dc8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x563e0bae0c00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x563e0bae0c80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x563e0bae0e78 <line:624:22>
| `-NonNullAttr 0x563e0bae0f00 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae1078 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x563e0bae0f48 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x563e0bae1120 <line:626:22>
| `-NonNullAttr 0x563e0bae1178 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae1280 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x563e0bae11c8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x563e0bae1328 <line:628:22>
| `-NonNullAttr 0x563e0bae1380 <col:52, col:66> 1
|-FunctionDecl 0x563e0bae1480 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x563e0bae13c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x563e0bae1528 <line:630:22>
| `-NonNullAttr 0x563e0bae1580 <col:52, col:66> 1
|-FunctionDecl 0x563e0bae1680 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x563e0bae15c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x563e0bae1728 <line:632:22>
| `-NonNullAttr 0x563e0bae1780 <col:52, col:66> 1
|-FunctionDecl 0x563e0bae1b58 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x563e0bae1860 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x563e0bae1970 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x563e0bae19f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x563e0bae1c10 <line:636:22>
| `-NonNullAttr 0x563e0bae1c68 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae1de8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x563e0bae1cb8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x563e0bae1e90 <line:638:22>
| `-NonNullAttr 0x563e0bae1f10 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae2010 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x563e0bae1f58 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x563e0bae20b8 <line:640:22>
| `-NonNullAttr 0x563e0bae2110 <col:52, col:66> 1
|-FunctionDecl 0x563e0bae22f8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x563e0bae21c0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x563e0bae23a0 <line:642:22>
| `-NonNullAttr 0x563e0bae23f8 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae2500 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x563e0bae2448 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x563e0bae25a8 <line:644:22>
| `-NonNullAttr 0x563e0bae2600 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae2828 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x563e0bae2648 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x563e0bae26c8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x563e0bae28d8 <line:648:22>
| `-NonNullAttr 0x563e0bae2930 <col:63, col:80> 1 2
|-FunctionDecl 0x563e0bae2b38 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x563e0bae2978 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x563e0bae29f8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x563e0bae2be8 <line:651:22>
| `-NonNullAttr 0x563e0bae2c40 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae2fa8 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x563e0bae2d20 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x563e0bae2e40 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x563e0bae3058 <line:654:22>
| `-NonNullAttr 0x563e0bae30b0 <col:63, col:77> 1
|-FunctionDecl 0x563e0bae3208 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x563e0bae30f8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x563e0bae32b0 <col:69>
|-FunctionDecl 0x563e0bae3428 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x563e0bae3318 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x563e0bae34d0 <col:72>
|-FunctionDecl 0x563e0bae3708 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x563e0bae3538 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x563e0bae35e8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x563e0bae37b8 <col:44>
|-FunctionDecl 0x563e0bae39d8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x563e0bae3820 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x563e0bae3898 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x563e0bae3a88 <line:661:22>
| `-NonNullAttr 0x563e0bae3ae0 <col:63, col:77> 2
|-FunctionDecl 0x563e0bae4f50 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x563e0bae3bc0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x563e0bae3cd0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x563e0bae3de0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x563e0bae5008 <col:47>
|-FunctionDecl 0x563e0bae5110 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x563e0bae5078 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x563e0bae5268 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x563e0bae51d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x563e0bae53c0 <line:668:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x563e0bae5328 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x563e0bae5488 <line:669:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x563e0bae5548 <line:670:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x563e0bae5608 <line:671:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x563e0bae56c0 <line:672:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x563e0bae5740 prev 0x563e0bae56c0 <line:673:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x563e0bae57a8 <col:24> 'int' 0
|-VarDecl 0x563e0bae57e0 <line:674:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x563e0bae5860 prev 0x563e0bae57e0 <line:675:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x563e0bae58c8 <col:27> 'int' 0
|-VarDecl 0x563e0bae5900 <line:676:1, col:5> col:5 used __unbuffered_p0_EBX 'int'
|-VarDecl 0x563e0bae5980 prev 0x563e0bae5900 <line:677:1, col:27> col:5 used __unbuffered_p0_EBX 'int' cinit
| `-IntegerLiteral 0x563e0bae59e8 <col:27> 'int' 0
|-VarDecl 0x563e0bae5a20 <line:678:1, col:5> col:5 used __unbuffered_p2_EAX 'int'
|-VarDecl 0x563e0bae5aa0 prev 0x563e0bae5a20 <line:679:1, col:27> col:5 used __unbuffered_p2_EAX 'int' cinit
| `-IntegerLiteral 0x563e0bae5b08 <col:27> 'int' 0
|-VarDecl 0x563e0bae5b38 <line:680:1, col:7> col:7 __unbuffered_p2_EAX$flush_delayed '_Bool'
|-VarDecl 0x563e0bae5bb8 <line:681:1, col:5> col:5 __unbuffered_p2_EAX$mem_tmp 'int'
|-VarDecl 0x563e0bae5c30 <line:682:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd0 '_Bool'
|-VarDecl 0x563e0bae5ca8 <line:683:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd1 '_Bool'
|-VarDecl 0x563e0bae5d20 <line:684:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd2 '_Bool'
|-VarDecl 0x563e0bae5d98 <line:685:1, col:7> col:7 __unbuffered_p2_EAX$r_buff0_thd3 '_Bool'
|-VarDecl 0x563e0bae5e10 <line:686:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd0 '_Bool'
|-VarDecl 0x563e0bae5e88 <line:687:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd1 '_Bool'
|-VarDecl 0x563e0bae5f20 <line:688:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd2 '_Bool'
|-VarDecl 0x563e0bae5f98 <line:689:1, col:7> col:7 __unbuffered_p2_EAX$r_buff1_thd3 '_Bool'
|-VarDecl 0x563e0bae6010 <line:690:1, col:7> col:7 used __unbuffered_p2_EAX$read_delayed '_Bool'
|-VarDecl 0x563e0bae6090 <line:691:1, col:6> col:6 used __unbuffered_p2_EAX$read_delayed_var 'int *'
|-VarDecl 0x563e0bae6110 <line:692:1, col:5> col:5 __unbuffered_p2_EAX$w_buff0 'int'
|-VarDecl 0x563e0bae6188 <line:693:1, col:7> col:7 __unbuffered_p2_EAX$w_buff0_used '_Bool'
|-VarDecl 0x563e0bae6208 <line:694:1, col:5> col:5 __unbuffered_p2_EAX$w_buff1 'int'
|-VarDecl 0x563e0bae6280 <line:695:1, col:7> col:7 __unbuffered_p2_EAX$w_buff1_used '_Bool'
|-VarDecl 0x563e0bae62f8 <line:696:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x563e0bae6370 <line:697:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x563e0bae63f0 <line:698:1, col:5> col:5 used x 'int'
|-VarDecl 0x563e0bae6470 prev 0x563e0bae63f0 <line:699:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x563e0bae64d8 <col:9> 'int' 0
|-VarDecl 0x563e0bae6508 <line:700:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x563e0bae6588 <line:701:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x563e0bae6600 <line:702:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x563e0bae6678 <line:703:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x563e0bae66f0 <line:704:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x563e0bae6768 <line:705:1, col:7> col:7 used x$r_buff0_thd3 '_Bool'
|-VarDecl 0x563e0bae67e0 <line:706:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x563e0bae6858 <line:707:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x563e0bae68d0 <line:708:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x563e0bae6948 <line:709:1, col:7> col:7 used x$r_buff1_thd3 '_Bool'
|-VarDecl 0x563e0bae69c0 <line:710:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x563e0bae6a40 <line:711:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x563e0bae6ac0 <line:712:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x563e0bae6b38 <line:713:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x563e0bae6bb8 <line:714:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x563e0bae6c30 <line:715:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x563e0bae6cb0 <line:716:1, col:5> col:5 used y 'int'
|-VarDecl 0x563e0bae6d30 prev 0x563e0bae6cb0 <line:717:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x563e0bae6d98 <col:9> 'int' 0
|-VarDecl 0x563e0bae6dc8 <line:718:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x563e0bae6e40 <line:719:1, col:7> col:7 used weak$$choice1 '_Bool'
|-VarDecl 0x563e0bae6eb8 <line:720:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x563e0bae6fe0 prev 0x563e0bae5110 <line:721:1, line:748:1> line:721:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x563e0bae6f48 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x563e0bae9f60 <line:722:1, line:748:1>
|   |-CallExpr 0x563e0bae70f8 <line:723:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0bae70e0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0bae7088 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0bae7170 <line:724:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x563e0bae7118 <col:3> 'int' lvalue Var 0x563e0bae5860 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x563e0bae7158 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563e0bae7138 <col:25> 'int' lvalue Var 0x563e0bae6d30 'y' 'int'
|   |-CallExpr 0x563e0bae71c8 <line:725:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0bae71b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0bae7190 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0bae7220 <line:726:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0bae7208 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0bae71e8 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0bae72e8 <line:727:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x563e0bae7240 <col:3> '_Bool' lvalue Var 0x563e0bae6dc8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x563e0bae72c8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x563e0bae72b0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x563e0bae7260 <col:19> '_Bool (void)' Function 0x563e0ba8bc80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x563e0bae7380 <line:728:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x563e0bae7308 <col:3> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x563e0bae7360 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x563e0bae7348 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x563e0bae7328 <col:19> '_Bool (void)' Function 0x563e0ba8bc80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x563e0bae73f8 <line:729:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x563e0bae73a0 <col:3> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x563e0bae73e0 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x563e0bae73c0 <col:21> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x563e0bae7470 <line:730:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x563e0bae7418 <col:3> 'int' lvalue Var 0x563e0bae6588 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x563e0bae7458 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563e0bae7438 <col:15> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0bae78a8 <line:731:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x563e0bae7490 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   | `-ConditionalOperator 0x563e0bae7878 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x563e0bae76a0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x563e0bae75c0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x563e0bae74e8 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x563e0bae74d0 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x563e0bae74b0 <col:8> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x563e0bae75a0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x563e0bae7538 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x563e0bae7520 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x563e0bae7500 <col:27> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x563e0bae7588 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x563e0bae7570 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x563e0bae7550 <col:46> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x563e0bae7680 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x563e0bae7618 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x563e0bae7600 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x563e0bae75e0 <col:65> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x563e0bae7668 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x563e0bae7650 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x563e0bae7630 <col:84> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0bae7860 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0bae76c0 <col:101> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |   `-ParenExpr 0x563e0bae7840 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x563e0bae7810 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x563e0bae7780 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x563e0bae7738 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x563e0bae7720 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x563e0bae76e0 <col:106> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x563e0bae7768 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x563e0bae7750 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x563e0bae7700 <col:124> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x563e0bae77e0 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e0bae77a0 <col:141> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x563e0bae77f8 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0bae77c0 <col:153> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x563e0bae7db8 <line:732:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x563e0bae78c8 <col:3> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x563e0bae7d88 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x563e0bae7d58 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x563e0bae7d40 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563e0bae78e8 <col:15> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0bae7d70 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0bae7908 <col:31> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x563e0bae7d20 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x563e0bae7cf0 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x563e0bae7b18 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x563e0bae7a38 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x563e0bae7960 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x563e0bae7948 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x563e0bae7928 <col:45> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x563e0bae7a18 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x563e0bae79b0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x563e0bae7998 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x563e0bae7978 <col:64> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x563e0bae7a00 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x563e0bae79e8 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x563e0bae79c8 <col:83> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x563e0bae7af8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x563e0bae7a90 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x563e0bae7a78 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x563e0bae7a58 <col:102> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x563e0bae7ae0 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x563e0bae7ac8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x563e0bae7aa8 <col:121> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x563e0bae7cd8 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e0bae7b38 <col:138> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x563e0bae7cb8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x563e0bae7c88 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x563e0bae7bf8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x563e0bae7bb0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x563e0bae7b98 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x563e0bae7b58 <col:151> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x563e0bae7be0 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x563e0bae7bc8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x563e0bae7b78 <col:169> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x563e0bae7c58 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x563e0bae7c18 <col:186> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x563e0bae7c70 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x563e0bae7c38 <col:198> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x563e0bae82e0 <line:733:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x563e0bae7dd8 <col:3> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x563e0bae82b0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x563e0bae8280 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x563e0bae8268 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563e0bae7df8 <col:15> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0bae8298 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0bae7e18 <col:31> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x563e0bae8248 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x563e0bae8218 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x563e0bae8040 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x563e0bae7f60 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x563e0bae7e70 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x563e0bae7e58 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x563e0bae7e38 <col:45> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x563e0bae7f40 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x563e0bae7ec0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x563e0bae7ea8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x563e0bae7e88 <col:64> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x563e0bae7f10 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x563e0bae7ef8 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x563e0bae7ed8 <col:83> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x563e0bae8020 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x563e0bae7fb8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x563e0bae7fa0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x563e0bae7f80 <col:102> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x563e0bae8008 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x563e0bae7ff0 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x563e0bae7fd0 <col:121> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x563e0bae8200 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e0bae8060 <col:138> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x563e0bae81e0 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x563e0bae81b0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x563e0bae8120 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x563e0bae80d8 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x563e0bae80c0 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x563e0bae8080 <col:151> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x563e0bae8108 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x563e0bae80f0 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x563e0bae80a0 <col:169> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x563e0bae8180 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x563e0bae8140 <col:186> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x563e0bae8198 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x563e0bae8160 <col:198> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x563e0bae8888 <line:734:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x563e0bae8300 <col:3> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x563e0bae8870 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0bae8840 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x563e0bae87f8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0bae87e0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0bae8320 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0bae8828 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0bae8810 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0bae8340 <col:36> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x563e0bae87c0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x563e0bae8790 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x563e0bae8550 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x563e0bae8470 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x563e0bae8398 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x563e0bae8380 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x563e0bae8360 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x563e0bae8450 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x563e0bae83e8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x563e0bae83d0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x563e0bae83b0 <col:74> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x563e0bae8438 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x563e0bae8420 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x563e0bae8400 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x563e0bae8530 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x563e0bae84c8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x563e0bae84b0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x563e0bae8490 <col:112> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x563e0bae8518 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x563e0bae8500 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x563e0bae84e0 <col:131> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x563e0bae8778 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x563e0bae8760 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x563e0bae8570 <col:148> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x563e0bae8740 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x563e0bae8710 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x563e0bae8630 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x563e0bae85e8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x563e0bae85d0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x563e0bae8590 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x563e0bae8618 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x563e0bae8600 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x563e0bae85b0 <col:184> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x563e0bae86c8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x563e0bae8680 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x563e0bae8650 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x563e0bae86f8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x563e0bae86e0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x563e0bae86a8 <col:212> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x563e0bae8e50 <line:735:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x563e0bae88a8 <col:3> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x563e0bae8e38 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0bae8e08 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x563e0bae8dc0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0bae8da8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0bae88c8 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0bae8df0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0bae8dd8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0bae88e8 <col:36> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x563e0bae8d88 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x563e0bae8d58 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x563e0bae8af8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x563e0bae8a18 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x563e0bae8940 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x563e0bae8928 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x563e0bae8908 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x563e0bae89f8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x563e0bae8990 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x563e0bae8978 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x563e0bae8958 <col:74> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x563e0bae89e0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x563e0bae89c8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x563e0bae89a8 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x563e0bae8ad8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x563e0bae8a70 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x563e0bae8a58 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x563e0bae8a38 <col:112> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x563e0bae8ac0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x563e0bae8aa8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x563e0bae8a88 <col:131> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x563e0bae8d40 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x563e0bae8d28 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x563e0bae8b18 <col:148> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x563e0bae8d08 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x563e0bae8cd8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x563e0bae8bd8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x563e0bae8b90 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x563e0bae8b78 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x563e0bae8b38 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x563e0bae8bc0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x563e0bae8ba8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x563e0bae8b58 <col:184> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x563e0bae8ca8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x563e0bae8c28 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x563e0bae8bf8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x563e0bae8cc0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x563e0bae8c80 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x563e0bae8c50 <col:219> 'int' 0
|   |-BinaryOperator 0x563e0bae9408 <line:736:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x563e0bae8e70 <col:3> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x563e0bae93f0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0bae93c0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x563e0bae9378 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0bae9360 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0bae8e90 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0bae93a8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0bae9390 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0bae8eb0 <col:36> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x563e0bae9340 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x563e0bae9310 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x563e0bae90d0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x563e0bae8ff0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x563e0bae8f08 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x563e0bae8ef0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x563e0bae8ed0 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x563e0bae8fd0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x563e0bae8f68 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x563e0bae8f50 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x563e0bae8f20 <col:74> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x563e0bae8fb8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x563e0bae8fa0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x563e0bae8f80 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x563e0bae90b0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x563e0bae9048 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x563e0bae9030 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x563e0bae9010 <col:112> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x563e0bae9098 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x563e0bae9080 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x563e0bae9060 <col:131> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x563e0bae92f8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x563e0bae92e0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x563e0bae90f0 <col:148> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x563e0bae92c0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x563e0bae9290 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x563e0bae91b0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x563e0bae9168 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x563e0bae9150 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x563e0bae9110 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x563e0bae9198 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x563e0bae9180 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x563e0bae9130 <col:184> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x563e0bae9248 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x563e0bae9200 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x563e0bae91d0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x563e0bae9278 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x563e0bae9260 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x563e0bae9228 <col:212> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x563e0bae99d0 <line:737:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x563e0bae9428 <col:3> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x563e0bae99b8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0bae9988 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x563e0bae9940 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0bae9928 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0bae9448 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0bae9970 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0bae9958 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0bae9468 <col:36> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x563e0bae9908 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x563e0bae98d8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x563e0bae9678 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x563e0bae9598 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x563e0bae94c0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x563e0bae94a8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x563e0bae9488 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x563e0bae9578 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x563e0bae9510 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x563e0bae94f8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x563e0bae94d8 <col:74> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x563e0bae9560 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x563e0bae9548 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x563e0bae9528 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x563e0bae9658 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x563e0bae95f0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x563e0bae95d8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x563e0bae95b8 <col:112> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x563e0bae9640 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x563e0bae9628 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x563e0bae9608 <col:131> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x563e0bae98c0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x563e0bae98a8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x563e0bae9698 <col:148> '_Bool' lvalue Var 0x563e0bae6858 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x563e0bae9888 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x563e0bae9858 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x563e0bae9758 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x563e0bae9710 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x563e0bae96f8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x563e0bae96b8 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x563e0bae9740 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x563e0bae9728 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x563e0bae96d8 <col:184> '_Bool' lvalue Var 0x563e0bae6678 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x563e0bae9828 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x563e0bae97a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x563e0bae9778 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x563e0bae9840 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x563e0bae9800 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x563e0bae97d0 <col:219> 'int' 0
|   |-BinaryOperator 0x563e0bae9a48 <line:738:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x563e0bae99f0 <col:3> 'int' lvalue Var 0x563e0bae5980 '__unbuffered_p0_EBX' 'int'
|   | `-ImplicitCastExpr 0x563e0bae9a30 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563e0bae9a10 <col:25> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0bae9b78 <line:739:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x563e0bae9a68 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   | `-ConditionalOperator 0x563e0bae9b48 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x563e0bae9b00 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x563e0bae9ae8 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563e0bae9a88 <col:7> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0bae9b18 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0bae9aa8 <col:25> 'int' lvalue Var 0x563e0bae6588 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x563e0bae9b30 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x563e0bae9ac8 <col:37> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0bae9c10 <line:740:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x563e0bae9b98 <col:3> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x563e0bae9be8 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x563e0bae9bb8 <col:28> 'int' 0
|   |-CallExpr 0x563e0bae9c68 <line:741:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0bae9c50 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0bae9c30 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0bae9cc0 <line:742:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0bae9ca8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0bae9c88 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x563e0bae9d18 <line:743:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0bae9d00 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0bae9ce0 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0bae9d70 <line:744:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0bae9d58 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0bae9d38 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0bae9e28 <line:745:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x563e0bae9d90 <col:3> 'int' lvalue Var 0x563e0bae5740 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x563e0bae9e08 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x563e0bae9df0 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0bae9db0 <col:22> 'int' lvalue Var 0x563e0bae5740 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x563e0bae9dd0 <col:41> 'int' 1
|   |-CallExpr 0x563e0bae9e80 <line:746:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0bae9e68 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0bae9e48 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x563e0bae9f28 <line:747:3, col:36>
|     `-CallExpr 0x563e0bae9f08 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x563e0bae9ef0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x563e0bae9ea0 <col:10> 'void *(void)' Function 0x563e0ba8bfc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x563e0baea0e8 prev 0x563e0bae5268 <line:749:1, line:768:1> line:749:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x563e0baea050 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x563e0baeb318 <line:750:1, line:768:1>
|   |-CallExpr 0x563e0baea1c8 <line:751:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0baea1b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baea190 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0baea228 <line:752:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x563e0baea1e8 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   | `-IntegerLiteral 0x563e0baea208 <col:7> 'int' 1
|   |-CallExpr 0x563e0baea280 <line:753:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0baea268 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baea248 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0baea2d8 <line:754:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0baea2c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baea2a0 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0baea338 <line:755:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x563e0baea2f8 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   | `-IntegerLiteral 0x563e0baea318 <col:7> 'int' 2
|   |-CallExpr 0x563e0baea390 <line:756:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0baea378 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baea358 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0baea3e8 <line:757:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0baea3d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baea3b0 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0baea6d0 <line:758:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x563e0baea408 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   | `-ConditionalOperator 0x563e0baea6a0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x563e0baea4c8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x563e0baea480 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x563e0baea468 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x563e0baea428 <col:7> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x563e0baea4b0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x563e0baea498 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x563e0baea448 <col:25> '_Bool' lvalue Var 0x563e0bae66f0 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0baea688 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0baea4e8 <col:42> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x563e0baea668 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x563e0baea638 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x563e0baea5a8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x563e0baea560 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x563e0baea548 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x563e0baea508 <col:55> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x563e0baea590 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x563e0baea578 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x563e0baea528 <col:73> '_Bool' lvalue Var 0x563e0bae68d0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x563e0baea608 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e0baea5c8 <col:90> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x563e0baea620 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baea5e8 <col:102> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0baea8d8 <line:759:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baea6f0 <col:3> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baea8c0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baea890 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x563e0baea7b0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x563e0baea768 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x563e0baea750 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x563e0baea710 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x563e0baea798 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x563e0baea780 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x563e0baea730 <col:38> '_Bool' lvalue Var 0x563e0bae66f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baea848 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x563e0baea800 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x563e0baea7d0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x563e0baea878 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x563e0baea860 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baea828 <col:66> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x563e0baeabc0 <line:760:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baea8f8 <col:3> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baeaba8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baeab78 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x563e0baeaa98 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x563e0baea9b8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x563e0baea970 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x563e0baea958 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x563e0baea918 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x563e0baea9a0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x563e0baea988 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x563e0baea938 <col:38> '_Bool' lvalue Var 0x563e0bae66f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x563e0baeaa78 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x563e0baeaa30 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x563e0baeaa18 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x563e0baea9d8 <col:56> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x563e0baeaa60 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x563e0baeaa48 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x563e0baea9f8 <col:74> '_Bool' lvalue Var 0x563e0bae68d0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baeab30 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x563e0baeaae8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x563e0baeaab8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x563e0baeab60 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x563e0baeab48 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baeab10 <col:102> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x563e0baeadc8 <line:761:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baeabe0 <col:3> '_Bool' lvalue Var 0x563e0bae66f0 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baeadb0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baead80 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x563e0baeaca0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x563e0baeac58 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x563e0baeac40 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x563e0baeac00 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x563e0baeac88 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x563e0baeac70 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x563e0baeac20 <col:38> '_Bool' lvalue Var 0x563e0bae66f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baead38 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x563e0baeacf0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x563e0baeacc0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x563e0baead68 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x563e0baead50 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baead18 <col:66> '_Bool' lvalue Var 0x563e0bae66f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x563e0baeb0d0 <line:762:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baeade8 <col:3> '_Bool' lvalue Var 0x563e0bae68d0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baeb0b8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baeb088 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x563e0baeafa8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x563e0baeaea8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x563e0baeae60 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x563e0baeae48 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x563e0baeae08 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x563e0baeae90 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x563e0baeae78 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x563e0baeae28 <col:38> '_Bool' lvalue Var 0x563e0bae66f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x563e0baeaf88 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x563e0baeaf20 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x563e0baeaf08 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x563e0baeaec8 <col:56> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x563e0baeaf70 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x563e0baeaf38 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x563e0baeaee8 <col:74> '_Bool' lvalue Var 0x563e0bae68d0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baeb040 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x563e0baeaff8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x563e0baeafc8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x563e0baeb070 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x563e0baeb058 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baeb020 <col:102> '_Bool' lvalue Var 0x563e0bae68d0 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x563e0baeb128 <line:763:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0baeb110 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baeb0f0 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0baeb180 <line:764:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0baeb168 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baeb148 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0baeb238 <line:765:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x563e0baeb1a0 <col:3> 'int' lvalue Var 0x563e0bae5740 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x563e0baeb218 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x563e0baeb200 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0baeb1c0 <col:22> 'int' lvalue Var 0x563e0bae5740 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x563e0baeb1e0 <col:41> 'int' 1
|   |-CallExpr 0x563e0baeb290 <line:766:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0baeb278 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baeb258 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x563e0baeb308 <line:767:3, col:36>
|     `-CallExpr 0x563e0baeb2e8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x563e0baeb2d0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x563e0baeb2b0 <col:10> 'void *(void)' Function 0x563e0ba8bfc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x563e0baeb460 prev 0x563e0bae53c0 <line:769:1, line:803:1> line:769:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x563e0baeb3c8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x563e0baef128 <line:770:1, line:803:1>
|   |-CallExpr 0x563e0baeb540 <line:771:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0baeb528 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baeb508 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0baeb5d8 <line:772:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baeb560 <col:3> '_Bool' lvalue Var 0x563e0bae6dc8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x563e0baeb5b8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x563e0baeb5a0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x563e0baeb580 <col:19> '_Bool (void)' Function 0x563e0ba8bc80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x563e0baeb670 <line:773:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baeb5f8 <col:3> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x563e0baeb650 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x563e0baeb638 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x563e0baeb618 <col:19> '_Bool (void)' Function 0x563e0ba8bc80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x563e0baeb6e8 <line:774:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baeb690 <col:3> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baeb6d0 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x563e0baeb6b0 <col:21> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x563e0baeb760 <line:775:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x563e0baeb708 <col:3> 'int' lvalue Var 0x563e0bae6588 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x563e0baeb748 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563e0baeb728 <col:15> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0baebb98 <line:776:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x563e0baeb780 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   | `-ConditionalOperator 0x563e0baebb68 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x563e0baeb990 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x563e0baeb8b0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x563e0baeb7d8 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x563e0baeb7c0 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x563e0baeb7a0 <col:8> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x563e0baeb890 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x563e0baeb828 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x563e0baeb810 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x563e0baeb7f0 <col:27> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |   | |   `-UnaryOperator 0x563e0baeb878 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x563e0baeb860 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x563e0baeb840 <col:46> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x563e0baeb970 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x563e0baeb908 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x563e0baeb8f0 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x563e0baeb8d0 <col:65> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |   |   `-UnaryOperator 0x563e0baeb958 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x563e0baeb940 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x563e0baeb920 <col:84> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0baebb50 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0baeb9b0 <col:101> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |   `-ParenExpr 0x563e0baebb30 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x563e0baebb00 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x563e0baeba70 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x563e0baeba28 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x563e0baeba10 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x563e0baeb9d0 <col:106> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x563e0baeba58 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x563e0baeba40 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x563e0baeb9f0 <col:124> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x563e0baebad0 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e0baeba90 <col:141> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x563e0baebae8 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baebab0 <col:153> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x563e0baec0c8 <line:777:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x563e0baebbb8 <col:3> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x563e0baec098 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x563e0baec068 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x563e0baec050 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563e0baebbd8 <col:15> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0baec080 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0baebbf8 <col:31> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x563e0baec030 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x563e0baec000 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x563e0baebe08 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x563e0baebd28 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x563e0baebc50 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x563e0baebc38 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x563e0baebc18 <col:45> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x563e0baebd08 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x563e0baebca0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x563e0baebc88 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x563e0baebc68 <col:64> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x563e0baebcf0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x563e0baebcd8 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x563e0baebcb8 <col:83> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x563e0baebde8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x563e0baebd80 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x563e0baebd68 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x563e0baebd48 <col:102> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x563e0baebdd0 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x563e0baebdb8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x563e0baebd98 <col:121> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x563e0baebfe8 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e0baebe28 <col:138> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x563e0baebfc8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x563e0baebf98 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x563e0baebee8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x563e0baebea0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x563e0baebe88 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x563e0baebe48 <col:151> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x563e0baebed0 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x563e0baebeb8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x563e0baebe68 <col:169> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x563e0baebf48 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x563e0baebf08 <col:186> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x563e0baebf80 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x563e0baebf28 <col:198> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x563e0baec5d8 <line:778:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x563e0baec0e8 <col:3> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x563e0baec5a8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x563e0baec578 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x563e0baec560 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563e0baec108 <col:15> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0baec590 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0baec128 <col:31> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x563e0baec540 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x563e0baec510 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x563e0baec338 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x563e0baec258 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x563e0baec180 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x563e0baec168 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x563e0baec148 <col:45> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x563e0baec238 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x563e0baec1d0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x563e0baec1b8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x563e0baec198 <col:64> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x563e0baec220 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x563e0baec208 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x563e0baec1e8 <col:83> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x563e0baec318 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x563e0baec2b0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x563e0baec298 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x563e0baec278 <col:102> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x563e0baec300 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x563e0baec2e8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x563e0baec2c8 <col:121> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x563e0baec4f8 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e0baec358 <col:138> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x563e0baec4d8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x563e0baec4a8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x563e0baec418 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x563e0baec3d0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x563e0baec3b8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x563e0baec378 <col:151> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x563e0baec400 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x563e0baec3e8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x563e0baec398 <col:169> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x563e0baec478 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x563e0baec438 <col:186> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x563e0baec490 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x563e0baec458 <col:198> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x563e0baecb80 <line:779:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baec5f8 <col:3> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baecb68 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baecb38 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x563e0baecaf0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0baecad8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0baec618 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baecb20 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0baecb08 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0baec638 <col:36> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x563e0baecab8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x563e0baeca88 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x563e0baec848 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x563e0baec768 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x563e0baec690 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x563e0baec678 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x563e0baec658 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x563e0baec748 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x563e0baec6e0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x563e0baec6c8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x563e0baec6a8 <col:74> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x563e0baec730 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x563e0baec718 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x563e0baec6f8 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x563e0baec828 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x563e0baec7c0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x563e0baec7a8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x563e0baec788 <col:112> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x563e0baec810 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x563e0baec7f8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x563e0baec7d8 <col:131> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x563e0baeca70 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x563e0baeca58 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x563e0baec868 <col:148> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x563e0baeca38 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x563e0baeca08 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x563e0baec928 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x563e0baec8e0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x563e0baec8c8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x563e0baec888 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x563e0baec910 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x563e0baec8f8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x563e0baec8a8 <col:184> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x563e0baec9c0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x563e0baec978 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x563e0baec948 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x563e0baec9f0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x563e0baec9d8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x563e0baec9a0 <col:212> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x563e0baed160 <line:780:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baecba0 <col:3> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baed148 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baed118 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x563e0baed0d0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0baed0b8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0baecbc0 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baed100 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0baed0e8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0baecbe0 <col:36> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x563e0baed098 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x563e0baed068 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x563e0baecdf0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x563e0baecd10 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x563e0baecc38 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x563e0baecc20 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x563e0baecc00 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x563e0baeccf0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x563e0baecc88 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x563e0baecc70 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x563e0baecc50 <col:74> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x563e0baeccd8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x563e0baeccc0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x563e0baecca0 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x563e0baecdd0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x563e0baecd68 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x563e0baecd50 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x563e0baecd30 <col:112> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x563e0baecdb8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x563e0baecda0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x563e0baecd80 <col:131> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x563e0baed050 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x563e0baed038 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x563e0baece10 <col:148> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x563e0baed018 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x563e0baecfe8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x563e0baeced0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x563e0baece88 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x563e0baece70 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x563e0baece30 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x563e0baeceb8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x563e0baecea0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x563e0baece50 <col:184> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x563e0baecfb8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x563e0baecf20 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x563e0baecef0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x563e0baecfd0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x563e0baecf90 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x563e0baecf48 <col:219> 'int' 0
|   |-BinaryOperator 0x563e0baed708 <line:781:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baed180 <col:3> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baed6f0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baed6c0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x563e0baed678 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0baed660 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0baed1a0 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baed6a8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0baed690 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0baed1c0 <col:36> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x563e0baed640 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x563e0baed610 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x563e0baed3d0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x563e0baed2f0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x563e0baed218 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x563e0baed200 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x563e0baed1e0 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x563e0baed2d0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x563e0baed268 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x563e0baed250 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x563e0baed230 <col:74> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x563e0baed2b8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x563e0baed2a0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x563e0baed280 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x563e0baed3b0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x563e0baed348 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x563e0baed330 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x563e0baed310 <col:112> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x563e0baed398 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x563e0baed380 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x563e0baed360 <col:131> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x563e0baed5f8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x563e0baed5e0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x563e0baed3f0 <col:148> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x563e0baed5c0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x563e0baed590 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x563e0baed4b0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x563e0baed468 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x563e0baed450 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x563e0baed410 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x563e0baed498 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x563e0baed480 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x563e0baed430 <col:184> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x563e0baed548 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x563e0baed500 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x563e0baed4d0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x563e0baed578 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x563e0baed560 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x563e0baed528 <col:212> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x563e0baedcd0 <line:782:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baed728 <col:3> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baedcb8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baedc88 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x563e0baedc40 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0baedc28 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0baed748 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baedc70 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x563e0baedc58 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x563e0baed768 <col:36> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x563e0baedc08 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x563e0baedbd8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x563e0baed978 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x563e0baed898 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x563e0baed7c0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x563e0baed7a8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x563e0baed788 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x563e0baed878 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x563e0baed810 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x563e0baed7f8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x563e0baed7d8 <col:74> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x563e0baed860 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x563e0baed848 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x563e0baed828 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x563e0baed958 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x563e0baed8f0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x563e0baed8d8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x563e0baed8b8 <col:112> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x563e0baed940 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x563e0baed928 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x563e0baed908 <col:131> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x563e0baedbc0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x563e0baedba8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x563e0baed998 <col:148> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x563e0baedb88 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x563e0baedb58 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x563e0baeda58 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x563e0baeda10 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x563e0baed9f8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x563e0baed9b8 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x563e0baeda40 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x563e0baeda28 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x563e0baed9d8 <col:184> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x563e0baedb28 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x563e0baedaa8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x563e0baeda78 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x563e0baedb40 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x563e0baedb00 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x563e0baedad0 <col:219> 'int' 0
|   |-BinaryOperator 0x563e0baedd68 <line:783:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baedcf0 <col:3> '_Bool' lvalue Var 0x563e0bae6010 '__unbuffered_p2_EAX$read_delayed' '_Bool'
|   | `-CStyleCastExpr 0x563e0baedd40 <col:38, col:45> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x563e0baedd10 <col:45> 'int' 1
|   |-BinaryOperator 0x563e0baedde0 <line:784:3, col:43> 'int *' '='
|   | |-DeclRefExpr 0x563e0baedd88 <col:3> 'int *' lvalue Var 0x563e0bae6090 '__unbuffered_p2_EAX$read_delayed_var' 'int *'
|   | `-UnaryOperator 0x563e0baeddc8 <col:42, col:43> 'int *' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x563e0baedda8 <col:43> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0baede58 <line:785:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x563e0baede00 <col:3> 'int' lvalue Var 0x563e0bae5aa0 '__unbuffered_p2_EAX' 'int'
|   | `-ImplicitCastExpr 0x563e0baede40 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563e0baede20 <col:25> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0baedfa0 <line:786:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x563e0baede78 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   | `-ConditionalOperator 0x563e0baedf58 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x563e0baedf10 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x563e0baedef8 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563e0baede98 <col:7> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0baedf28 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0baedeb8 <col:25> 'int' lvalue Var 0x563e0bae6588 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x563e0baedf40 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x563e0baeded8 <col:37> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0baee038 <line:787:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baedfc0 <col:3> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x563e0baee010 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x563e0baedfe0 <col:28> 'int' 0
|   |-CallExpr 0x563e0baee090 <line:788:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0baee078 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baee058 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0baee0e8 <line:789:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0baee0d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baee0b0 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0baee148 <line:790:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x563e0baee108 <col:3> 'int' lvalue Var 0x563e0bae6d30 'y' 'int'
|   | `-IntegerLiteral 0x563e0baee128 <col:7> 'int' 1
|   |-CallExpr 0x563e0baee1a0 <line:791:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0baee188 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baee168 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0baee1f8 <line:792:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0baee1e0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baee1c0 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0baee4e0 <line:793:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x563e0baee218 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   | `-ConditionalOperator 0x563e0baee4b0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x563e0baee2d8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x563e0baee290 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x563e0baee278 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x563e0baee238 <col:7> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x563e0baee2c0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x563e0baee2a8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x563e0baee258 <col:25> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x563e0baee498 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0baee2f8 <col:42> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x563e0baee478 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x563e0baee448 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x563e0baee3b8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x563e0baee370 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x563e0baee358 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x563e0baee318 <col:55> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x563e0baee3a0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x563e0baee388 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x563e0baee338 <col:73> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x563e0baee418 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e0baee3d8 <col:90> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x563e0baee430 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baee3f8 <col:102> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
|   |-BinaryOperator 0x563e0baee6e8 <line:794:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baee500 <col:3> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baee6d0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baee6a0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x563e0baee5c0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x563e0baee578 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x563e0baee560 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x563e0baee520 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x563e0baee5a8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x563e0baee590 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x563e0baee540 <col:38> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baee658 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x563e0baee610 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x563e0baee5e0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x563e0baee688 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x563e0baee670 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baee638 <col:66> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x563e0baee9d0 <line:795:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baee708 <col:3> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baee9b8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baee988 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x563e0baee8a8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x563e0baee7c8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x563e0baee780 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x563e0baee768 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x563e0baee728 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x563e0baee7b0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x563e0baee798 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x563e0baee748 <col:38> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x563e0baee888 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x563e0baee840 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x563e0baee828 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x563e0baee7e8 <col:56> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x563e0baee870 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x563e0baee858 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x563e0baee808 <col:74> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baee940 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x563e0baee8f8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x563e0baee8c8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x563e0baee970 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x563e0baee958 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baee920 <col:102> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x563e0baeebd8 <line:796:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baee9f0 <col:3> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baeebc0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baeeb90 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x563e0baeeab0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x563e0baeea68 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x563e0baeea50 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x563e0baeea10 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x563e0baeea98 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x563e0baeea80 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x563e0baeea30 <col:38> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baeeb48 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x563e0baeeb00 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x563e0baeead0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x563e0baeeb78 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x563e0baeeb60 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baeeb28 <col:66> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x563e0baeeec0 <line:797:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x563e0baeebf8 <col:3> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x563e0baeeea8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x563e0baeee78 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x563e0baeed98 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x563e0baeecb8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x563e0baeec70 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x563e0baeec58 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x563e0baeec18 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x563e0baeeca0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x563e0baeec88 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x563e0baeec38 <col:38> '_Bool' lvalue Var 0x563e0bae6768 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x563e0baeed78 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x563e0baeed30 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x563e0baeed18 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x563e0baeecd8 <col:56> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x563e0baeed60 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x563e0baeed48 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x563e0baeecf8 <col:74> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x563e0baeee30 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x563e0baeede8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x563e0baeedb8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x563e0baeee60 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x563e0baeee48 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e0baeee10 <col:102> '_Bool' lvalue Var 0x563e0bae6948 'x$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x563e0baeef18 <line:798:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0baeef00 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baeeee0 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x563e0baeef70 <line:799:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x563e0baeef58 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baeef38 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x563e0baef048 <line:800:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x563e0baeefb0 <col:3> 'int' lvalue Var 0x563e0bae5740 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x563e0baef028 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x563e0baef010 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e0baeefd0 <col:22> 'int' lvalue Var 0x563e0bae5740 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x563e0baeeff0 <col:41> 'int' 1
|   |-CallExpr 0x563e0baef0a0 <line:801:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x563e0baef088 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563e0baef068 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x563e0baef118 <line:802:3, col:36>
|     `-CallExpr 0x563e0baef0f8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x563e0baef0e0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x563e0baef0c0 <col:10> 'void *(void)' Function 0x563e0ba8bfc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x563e0baef258 prev 0x563e0bae5488 <line:804:1, line:806:1> line:804:6 fence 'void ()'
| `-CompoundStmt 0x563e0baef2f8 <line:805:1, line:806:1>
|-FunctionDecl 0x563e0baef328 prev 0x563e0bae5548 <line:807:1, line:809:1> line:807:6 isync 'void ()'
| `-CompoundStmt 0x563e0baef3c8 <line:808:1, line:809:1>
|-FunctionDecl 0x563e0baef3f8 prev 0x563e0bae5608 <line:810:1, line:812:1> line:810:6 lwfence 'void ()'
| `-CompoundStmt 0x563e0baef498 <line:811:1, line:812:1>
`-FunctionDecl 0x563e0baef508 <line:813:1, line:852:1> line:813:5 main 'int ()'
  `-CompoundStmt 0x563e0baf3e58 <line:814:1, line:852:1>
    |-DeclStmt 0x563e0baef620 <line:815:3, col:18>
    | `-VarDecl 0x563e0baef5b8 <col:3, col:13> col:13 used t2114 'pthread_t':'unsigned long'
    |-CallExpr 0x563e0baef828 <line:816:3, col:54> 'int'
    | |-ImplicitCastExpr 0x563e0baef810 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e0baef638 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x563e0bacc9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x563e0baef678 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x563e0baef658 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x563e0baef5b8 't2114' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x563e0baef868 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x563e0baef6f0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x563e0baef6c8 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x563e0baef690 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x563e0baef880 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e0baef710 <col:39> 'void *(void *)' Function 0x563e0bae6fe0 'P0' 'void *(void *)'
    | `-ParenExpr 0x563e0baef790 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x563e0baef768 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x563e0baef730 <col:52> 'int' 0
    |-DeclStmt 0x563e0baef910 <line:817:3, col:18>
    | `-VarDecl 0x563e0baef8a8 <col:3, col:13> col:13 used t2115 'pthread_t':'unsigned long'
    |-CallExpr 0x563e0baefab8 <line:818:3, col:54> 'int'
    | |-ImplicitCastExpr 0x563e0baefaa0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e0baef928 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x563e0bacc9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x563e0baef968 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x563e0baef948 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x563e0baef8a8 't2115' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x563e0baefaf8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x563e0baef9e0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x563e0baef9b8 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x563e0baef980 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x563e0baefb10 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e0baefa00 <col:39> 'void *(void *)' Function 0x563e0baea0e8 'P1' 'void *(void *)'
    | `-ParenExpr 0x563e0baefa80 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x563e0baefa58 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x563e0baefa20 <col:52> 'int' 0
    |-DeclStmt 0x563e0baefba0 <line:819:3, col:18>
    | `-VarDecl 0x563e0baefb38 <col:3, col:13> col:13 used t2116 'pthread_t':'unsigned long'
    |-CallExpr 0x563e0baefd48 <line:820:3, col:54> 'int'
    | |-ImplicitCastExpr 0x563e0baefd30 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e0baefbb8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x563e0bacc9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x563e0baefbf8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x563e0baefbd8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x563e0baefb38 't2116' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x563e0baefd88 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x563e0baefc70 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x563e0baefc48 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x563e0baefc10 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x563e0baefda0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e0baefc90 <col:39> 'void *(void *)' Function 0x563e0baeb460 'P2' 'void *(void *)'
    | `-ParenExpr 0x563e0baefd10 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x563e0baefce8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x563e0baefcb0 <col:52> 'int' 0
    |-CallExpr 0x563e0baefdf0 <line:821:3, col:27> 'void'
    | `-ImplicitCastExpr 0x563e0baefdd8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x563e0baefdb8 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x563e0baefec0 <line:822:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x563e0baefe10 <col:3> '_Bool' lvalue Var 0x563e0bae62f8 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x563e0baefea8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x563e0baefe88 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x563e0baefe70 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x563e0baefe30 <col:21> 'int' lvalue Var 0x563e0bae5740 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x563e0baefe50 <col:41> 'int' 3
    |-CallExpr 0x563e0baeff18 <line:823:3, col:25> 'void'
    | `-ImplicitCastExpr 0x563e0baeff00 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x563e0baefee0 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x563e0baeffd8 <line:824:3, col:36> 'void'
    | |-ImplicitCastExpr 0x563e0baeffc0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e0baeff38 <col:3> 'void (int)' Function 0x563e0ba8be50 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x563e0baf0018 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x563e0baf0000 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x563e0baeff58 <col:21> '_Bool' lvalue Var 0x563e0bae62f8 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x563e0baf0068 <line:825:3, col:27> 'void'
    | `-ImplicitCastExpr 0x563e0baf0050 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x563e0baf0030 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x563e0baf0350 <line:826:3, col:103> 'int' '='
    | |-DeclRefExpr 0x563e0baf0088 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
    | `-ConditionalOperator 0x563e0baf0320 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x563e0baf0148 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x563e0baf0100 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x563e0baf00e8 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x563e0baf00a8 <col:7> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x563e0baf0130 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x563e0baf0118 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x563e0baf00c8 <col:25> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x563e0baf0308 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x563e0baf0168 <col:42> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x563e0baf02e8 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x563e0baf02b8 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x563e0baf0228 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x563e0baf01e0 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x563e0baf01c8 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x563e0baf0188 <col:55> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x563e0baf0210 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x563e0baf01f8 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x563e0baf01a8 <col:73> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x563e0baf0288 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x563e0baf0248 <col:90> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x563e0baf02a0 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x563e0baf0268 <col:102> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
    |-BinaryOperator 0x563e0baf0558 <line:827:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf0370 <col:3> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf0540 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x563e0baf0510 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x563e0baf0430 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x563e0baf03e8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x563e0baf03d0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x563e0baf0390 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x563e0baf0418 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x563e0baf0400 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x563e0baf03b0 <col:38> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x563e0baf04c8 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x563e0baf0480 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x563e0baf0450 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x563e0baf04f8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x563e0baf04e0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x563e0baf04a8 <col:66> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x563e0baf0840 <line:828:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf0578 <col:3> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf0828 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x563e0baf07f8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x563e0baf0718 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x563e0baf0638 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x563e0baf05f0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x563e0baf05d8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x563e0baf0598 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x563e0baf0620 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x563e0baf0608 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x563e0baf05b8 <col:38> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x563e0baf06f8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x563e0baf06b0 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x563e0baf0698 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x563e0baf0658 <col:56> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x563e0baf06e0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x563e0baf06c8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x563e0baf0678 <col:74> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x563e0baf07b0 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x563e0baf0768 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x563e0baf0738 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x563e0baf07e0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x563e0baf07c8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x563e0baf0790 <col:102> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x563e0baf0a48 <line:829:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf0860 <col:3> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf0a30 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x563e0baf0a00 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x563e0baf0920 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x563e0baf08d8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x563e0baf08c0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x563e0baf0880 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x563e0baf0908 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x563e0baf08f0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x563e0baf08a0 <col:38> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x563e0baf09b8 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x563e0baf0970 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x563e0baf0940 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x563e0baf09e8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x563e0baf09d0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x563e0baf0998 <col:66> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x563e0baf0d30 <line:830:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf0a68 <col:3> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf0d18 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x563e0baf0ce8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x563e0baf0c08 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x563e0baf0b28 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x563e0baf0ae0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x563e0baf0ac8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x563e0baf0a88 <col:20> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x563e0baf0b10 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x563e0baf0af8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x563e0baf0aa8 <col:38> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x563e0baf0be8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x563e0baf0ba0 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x563e0baf0b88 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x563e0baf0b48 <col:56> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x563e0baf0bd0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x563e0baf0bb8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x563e0baf0b68 <col:74> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x563e0baf0ca0 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x563e0baf0c58 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x563e0baf0c28 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x563e0baf0cd0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x563e0baf0cb8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x563e0baf0c80 <col:102> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x563e0baf0d88 <line:831:3, col:25> 'void'
    | `-ImplicitCastExpr 0x563e0baf0d70 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x563e0baf0d50 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x563e0baf0de0 <line:832:3, col:27> 'void'
    | `-ImplicitCastExpr 0x563e0baf0dc8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x563e0baf0da8 <col:3> 'void ()' Function 0x563e0ba8c4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x563e0baf0e78 <line:833:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf0e00 <col:3> '_Bool' lvalue Var 0x563e0bae6dc8 'weak$$choice0' '_Bool'
    | `-CallExpr 0x563e0baf0e58 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x563e0baf0e40 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x563e0baf0e20 <col:19> '_Bool (void)' Function 0x563e0ba8bc80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x563e0baf0f10 <line:834:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf0e98 <col:3> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
    | `-CallExpr 0x563e0baf0ef0 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x563e0baf0ed8 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x563e0baf0eb8 <col:19> '_Bool (void)' Function 0x563e0ba8bc80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x563e0baf0f88 <line:835:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf0f30 <col:3> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf0f70 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x563e0baf0f50 <col:21> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x563e0baf1028 <line:836:3, col:15> 'int' '='
    | |-DeclRefExpr 0x563e0baf0fd0 <col:3> 'int' lvalue Var 0x563e0bae6588 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x563e0baf1010 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x563e0baf0ff0 <col:15> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
    |-BinaryOperator 0x563e0baf1460 <line:837:3, col:162> 'int' '='
    | |-DeclRefExpr 0x563e0baf1048 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
    | `-ConditionalOperator 0x563e0baf1430 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x563e0baf1258 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x563e0baf1178 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x563e0baf10a0 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x563e0baf1088 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x563e0baf1068 <col:8> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x563e0baf1158 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x563e0baf10f0 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x563e0baf10d8 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x563e0baf10b8 <col:27> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x563e0baf1140 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x563e0baf1128 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x563e0baf1108 <col:46> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x563e0baf1238 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x563e0baf11d0 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x563e0baf11b8 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x563e0baf1198 <col:65> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x563e0baf1220 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x563e0baf1208 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x563e0baf11e8 <col:84> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x563e0baf1418 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x563e0baf1278 <col:101> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
    |   `-ParenExpr 0x563e0baf13f8 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x563e0baf13c8 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x563e0baf1338 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x563e0baf12f0 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x563e0baf12d8 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x563e0baf1298 <col:106> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x563e0baf1320 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x563e0baf1308 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x563e0baf12b8 <col:124> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x563e0baf1398 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x563e0baf1358 <col:141> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x563e0baf13b0 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x563e0baf1378 <col:153> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
    |-BinaryOperator 0x563e0baf1970 <line:838:3, col:208> 'int' '='
    | |-DeclRefExpr 0x563e0baf1480 <col:3> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x563e0baf1940 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x563e0baf1910 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x563e0baf18f8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x563e0baf14a0 <col:15> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x563e0baf1928 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x563e0baf14c0 <col:31> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x563e0baf18d8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x563e0baf18a8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x563e0baf16d0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x563e0baf15f0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x563e0baf1518 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x563e0baf1500 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x563e0baf14e0 <col:45> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x563e0baf15d0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x563e0baf1568 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x563e0baf1550 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x563e0baf1530 <col:64> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x563e0baf15b8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x563e0baf15a0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x563e0baf1580 <col:83> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x563e0baf16b0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x563e0baf1648 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x563e0baf1630 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x563e0baf1610 <col:102> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x563e0baf1698 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x563e0baf1680 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x563e0baf1660 <col:121> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x563e0baf1890 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x563e0baf16f0 <col:138> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
    |       `-ParenExpr 0x563e0baf1870 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x563e0baf1840 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x563e0baf17b0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x563e0baf1768 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x563e0baf1750 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x563e0baf1710 <col:151> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x563e0baf1798 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x563e0baf1780 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x563e0baf1730 <col:169> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x563e0baf1810 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x563e0baf17d0 <col:186> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x563e0baf1828 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x563e0baf17f0 <col:198> 'int' lvalue Var 0x563e0bae6ac0 'x$w_buff0' 'int'
    |-BinaryOperator 0x563e0baf1e80 <line:839:3, col:208> 'int' '='
    | |-DeclRefExpr 0x563e0baf1990 <col:3> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x563e0baf1e50 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x563e0baf1e20 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x563e0baf1e08 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x563e0baf19b0 <col:15> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x563e0baf1e38 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x563e0baf19d0 <col:31> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
    |   `-ParenExpr 0x563e0baf1de8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x563e0baf1db8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x563e0baf1be0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x563e0baf1b00 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x563e0baf1a28 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x563e0baf1a10 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x563e0baf19f0 <col:45> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x563e0baf1ae0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x563e0baf1a78 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x563e0baf1a60 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x563e0baf1a40 <col:64> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x563e0baf1ac8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x563e0baf1ab0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x563e0baf1a90 <col:83> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x563e0baf1bc0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x563e0baf1b58 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x563e0baf1b40 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x563e0baf1b20 <col:102> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x563e0baf1ba8 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x563e0baf1b90 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x563e0baf1b70 <col:121> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x563e0baf1da0 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x563e0baf1c00 <col:138> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
    |       `-ParenExpr 0x563e0baf1d80 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x563e0baf1d50 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x563e0baf1cc0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x563e0baf1c78 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x563e0baf1c60 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x563e0baf1c20 <col:151> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x563e0baf1ca8 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x563e0baf1c90 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x563e0baf1c40 <col:169> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x563e0baf1d20 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x563e0baf1ce0 <col:186> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x563e0baf1d38 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x563e0baf1d00 <col:198> 'int' lvalue Var 0x563e0bae6bb8 'x$w_buff1' 'int'
    |-BinaryOperator 0x563e0baf2448 <line:840:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf1ea0 <col:3> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf2430 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x563e0baf2400 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x563e0baf23b8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x563e0baf23a0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x563e0baf1ec0 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x563e0baf23e8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x563e0baf23d0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x563e0baf1ee0 <col:36> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x563e0baf2380 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x563e0baf2350 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x563e0baf2110 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x563e0baf2030 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x563e0baf1f38 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x563e0baf1f20 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x563e0baf1f00 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x563e0baf2010 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x563e0baf1f88 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x563e0baf1f70 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x563e0baf1f50 <col:74> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x563e0baf1ff8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x563e0baf1fe0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x563e0baf1fa0 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x563e0baf20f0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x563e0baf2088 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x563e0baf2070 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x563e0baf2050 <col:112> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x563e0baf20d8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x563e0baf20c0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x563e0baf20a0 <col:131> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x563e0baf2338 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x563e0baf2320 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x563e0baf2130 <col:148> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x563e0baf2300 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x563e0baf22d0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x563e0baf21f0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x563e0baf21a8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x563e0baf2190 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x563e0baf2150 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x563e0baf21d8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x563e0baf21c0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x563e0baf2170 <col:184> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x563e0baf2288 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x563e0baf2240 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x563e0baf2210 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x563e0baf22b8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x563e0baf22a0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x563e0baf2268 <col:212> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x563e0baf2a10 <line:841:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf2468 <col:3> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf29f8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x563e0baf29c8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x563e0baf2980 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x563e0baf2968 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x563e0baf2488 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x563e0baf29b0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x563e0baf2998 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x563e0baf24a8 <col:36> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x563e0baf2948 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x563e0baf2918 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x563e0baf26b8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x563e0baf25d8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x563e0baf2500 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x563e0baf24e8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x563e0baf24c8 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x563e0baf25b8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x563e0baf2550 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x563e0baf2538 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x563e0baf2518 <col:74> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x563e0baf25a0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x563e0baf2588 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x563e0baf2568 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x563e0baf2698 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x563e0baf2630 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x563e0baf2618 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x563e0baf25f8 <col:112> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x563e0baf2680 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x563e0baf2668 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x563e0baf2648 <col:131> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x563e0baf2900 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x563e0baf28e8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x563e0baf26d8 <col:148> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x563e0baf28c8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x563e0baf2898 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x563e0baf2798 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x563e0baf2750 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x563e0baf2738 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x563e0baf26f8 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x563e0baf2780 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x563e0baf2768 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x563e0baf2718 <col:184> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x563e0baf2868 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x563e0baf27e8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x563e0baf27b8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x563e0baf2880 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x563e0baf2840 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x563e0baf2810 <col:219> 'int' 0
    |-BinaryOperator 0x563e0baf2fb8 <line:842:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf2a30 <col:3> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf2fa0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x563e0baf2f70 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x563e0baf2f28 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x563e0baf2f10 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x563e0baf2a50 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x563e0baf2f58 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x563e0baf2f40 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x563e0baf2a70 <col:36> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x563e0baf2ef0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x563e0baf2ec0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x563e0baf2c80 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x563e0baf2ba0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x563e0baf2ac8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x563e0baf2ab0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x563e0baf2a90 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x563e0baf2b80 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x563e0baf2b18 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x563e0baf2b00 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x563e0baf2ae0 <col:74> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x563e0baf2b68 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x563e0baf2b50 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x563e0baf2b30 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x563e0baf2c60 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x563e0baf2bf8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x563e0baf2be0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x563e0baf2bc0 <col:112> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x563e0baf2c48 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x563e0baf2c30 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x563e0baf2c10 <col:131> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x563e0baf2ea8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x563e0baf2e90 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x563e0baf2ca0 <col:148> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x563e0baf2e70 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x563e0baf2e40 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x563e0baf2d60 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x563e0baf2d18 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x563e0baf2d00 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x563e0baf2cc0 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x563e0baf2d48 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x563e0baf2d30 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x563e0baf2ce0 <col:184> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x563e0baf2df8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x563e0baf2db0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x563e0baf2d80 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x563e0baf2e28 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x563e0baf2e10 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x563e0baf2dd8 <col:212> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x563e0baf3598 <line:843:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf2ff0 <col:3> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf3580 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x563e0baf3550 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x563e0baf3508 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x563e0baf34f0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x563e0baf3010 <col:20> '_Bool' lvalue Var 0x563e0bae6eb8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x563e0baf3538 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x563e0baf3520 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x563e0baf3030 <col:36> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x563e0baf34d0 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x563e0baf34a0 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x563e0baf3240 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x563e0baf3160 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x563e0baf3088 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x563e0baf3070 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x563e0baf3050 <col:55> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x563e0baf3140 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x563e0baf30d8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x563e0baf30c0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x563e0baf30a0 <col:74> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x563e0baf3128 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x563e0baf3110 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x563e0baf30f0 <col:93> '_Bool' lvalue Var 0x563e0bae6c30 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x563e0baf3220 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x563e0baf31b8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x563e0baf31a0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x563e0baf3180 <col:112> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x563e0baf3208 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x563e0baf31f0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x563e0baf31d0 <col:131> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x563e0baf3488 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x563e0baf3470 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x563e0baf3260 <col:148> '_Bool' lvalue Var 0x563e0bae67e0 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x563e0baf3450 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x563e0baf3420 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x563e0baf3320 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x563e0baf32d8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x563e0baf32c0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x563e0baf3280 <col:166> '_Bool' lvalue Var 0x563e0bae6b38 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x563e0baf3308 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x563e0baf32f0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x563e0baf32a0 <col:184> '_Bool' lvalue Var 0x563e0bae6600 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x563e0baf33f0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x563e0baf3370 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x563e0baf3340 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x563e0baf3408 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x563e0baf33c8 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x563e0baf3398 <col:219> 'int' 0
    |-BinaryOperator 0x563e0baf3630 <line:844:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf35b8 <col:3> '_Bool' lvalue Var 0x563e0bae6e40 'weak$$choice1' '_Bool'
    | `-CallExpr 0x563e0baf3610 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x563e0baf35f8 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x563e0baf35d8 <col:19> '_Bool (void)' Function 0x563e0ba8bc80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x563e0baf3868 <line:845:3, col:140> 'int' '='
    | |-DeclRefExpr 0x563e0baf3650 <col:3> 'int' lvalue Var 0x563e0bae5aa0 '__unbuffered_p2_EAX' 'int'
    | `-ConditionalOperator 0x563e0baf3838 <col:25, col:140> 'int'
    |   |-ImplicitCastExpr 0x563e0baf3808 <col:25> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x563e0baf37f0 <col:25> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x563e0baf3670 <col:25> '_Bool' lvalue Var 0x563e0bae6010 '__unbuffered_p2_EAX$read_delayed' '_Bool'
    |   |-ParenExpr 0x563e0baf37b0 <col:60, col:136> 'int'
    |   | `-ConditionalOperator 0x563e0baf3780 <col:61, col:117> 'int'
    |   |   |-ImplicitCastExpr 0x563e0baf3738 <col:61> 'int' <IntegralCast>
    |   |   | `-ImplicitCastExpr 0x563e0baf3720 <col:61> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x563e0baf3690 <col:61> '_Bool' lvalue Var 0x563e0bae6e40 'weak$$choice1' '_Bool'
    |   |   |-ImplicitCastExpr 0x563e0baf3750 <col:77, col:78> 'int' <LValueToRValue>
    |   |   | `-UnaryOperator 0x563e0baf36e8 <col:77, col:78> 'int' lvalue prefix '*' cannot overflow
    |   |   |   `-ImplicitCastExpr 0x563e0baf36d0 <col:78> 'int *' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x563e0baf36b0 <col:78> 'int *' lvalue Var 0x563e0bae6090 '__unbuffered_p2_EAX$read_delayed_var' 'int *'
    |   |   `-ImplicitCastExpr 0x563e0baf3768 <col:117> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x563e0baf3700 <col:117> 'int' lvalue Var 0x563e0bae5aa0 '__unbuffered_p2_EAX' 'int'
    |   `-ImplicitCastExpr 0x563e0baf3820 <col:140> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x563e0baf37d0 <col:140> 'int' lvalue Var 0x563e0bae5aa0 '__unbuffered_p2_EAX' 'int'
    |-BinaryOperator 0x563e0baf3b38 <line:846:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf3888 <col:3> '_Bool' lvalue Var 0x563e0bae6370 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x563e0baf3b20 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x563e0baf3b08 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x563e0baf3ae8 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x563e0baf3ac8 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x563e0baf3a30 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x563e0baf3998 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x563e0baf3900 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x563e0baf38e8 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x563e0baf38a8 <col:23> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
    |         | | | `-IntegerLiteral 0x563e0baf38c8 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x563e0baf3978 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x563e0baf3960 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x563e0baf3920 <col:33> 'int' lvalue Var 0x563e0bae5860 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x563e0baf3940 <col:56> 'int' 1
    |         | `-BinaryOperator 0x563e0baf3a10 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x563e0baf39f8 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x563e0baf39b8 <col:61> 'int' lvalue Var 0x563e0bae5980 '__unbuffered_p0_EBX' 'int'
    |         |   `-IntegerLiteral 0x563e0baf39d8 <col:84> 'int' 0
    |         `-BinaryOperator 0x563e0baf3aa8 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x563e0baf3a90 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x563e0baf3a50 <col:89> 'int' lvalue Var 0x563e0bae5aa0 '__unbuffered_p2_EAX' 'int'
    |           `-IntegerLiteral 0x563e0baf3a70 <col:112> 'int' 2
    |-BinaryOperator 0x563e0baf3c68 <line:847:3, col:37> 'int' '='
    | |-DeclRefExpr 0x563e0baf3b58 <col:3> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
    | `-ConditionalOperator 0x563e0baf3c38 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x563e0baf3bf0 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x563e0baf3bd8 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x563e0baf3b78 <col:7> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x563e0baf3c08 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x563e0baf3b98 <col:25> 'int' lvalue Var 0x563e0bae6588 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x563e0baf3c20 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x563e0baf3bb8 <col:37> 'int' lvalue Var 0x563e0bae6470 'x' 'int'
    |-BinaryOperator 0x563e0baf3d00 <line:848:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x563e0baf3c88 <col:3> '_Bool' lvalue Var 0x563e0bae6508 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x563e0baf3cd8 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x563e0baf3ca8 <col:28> 'int' 0
    |-CallExpr 0x563e0baf3d58 <line:849:3, col:25> 'void'
    | `-ImplicitCastExpr 0x563e0baf3d40 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x563e0baf3d20 <col:3> 'void ()' Function 0x563e0ba8c570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x563e0baf3dd0 <line:850:3, col:36> 'void'
    | |-ImplicitCastExpr 0x563e0baf3db8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e0baf3d78 <col:3> 'void (int)' Function 0x563e0ba8c238 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x563e0baf3e10 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x563e0baf3df8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x563e0baf3d98 <col:21> '_Bool' lvalue Var 0x563e0bae6370 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x563e0baf3e48 <line:851:3, col:10>
      `-IntegerLiteral 0x563e0baf3e28 <col:10> 'int' 0
