TranslationUnitDecl 0x55c220146f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55c220147848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55c220147520 '__int128'
|-TypedefDecl 0x55c2201478b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55c220147540 'unsigned __int128'
|-TypedefDecl 0x55c220147bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55c220147990 'struct __NSConstantString_tag'
|   `-Record 0x55c220147910 '__NSConstantString_tag'
|-TypedefDecl 0x55c220147c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55c220147c20 'char *'
|   `-BuiltinType 0x55c220147020 'char'
|-TypedefDecl 0x55c220186b60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55c220147f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55c220147d40 'struct __va_list_tag'
|     `-Record 0x55c220147cc0 '__va_list_tag'
|-FunctionDecl 0x55c220186c80 <pthread-wmm/rfi002_rmo.opt_true-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x55c220186e50 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55c220186d80 <col:31> col:34 'int'
|-FunctionDecl 0x55c220186fc8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x55c2201870f0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55c220187238 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55c2201871a8 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x55c220187468 <col:40, col:99>
|   |-IfStmt 0x55c220187438 <col:42, col:88>
|   | |-UnaryOperator 0x55c220187318 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x55c220187300 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55c2201872e0 <col:47> 'int' lvalue ParmVar 0x55c2201871a8 'expression' 'int'
|   | `-CompoundStmt 0x55c220187420 <col:59, col:88>
|   |   `-LabelStmt 0x55c220187408 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x55c220187398 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x55c220187380 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x55c220187330 <col:68> 'void () __attribute__((noreturn))' Function 0x55c2201870f0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x55c220187450 <col:89>
|   `-ReturnStmt 0x55c220187458 <col:91>
|-FunctionDecl 0x55c2201874b0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x55c220187570 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x55c2201878f0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55c220187628 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x55c2201876a8 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x55c220187728 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55c2201877a8 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55c2201879b0 <line:11:22>
|-FunctionDecl 0x55c2201acf10 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55c220187a20 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x55c220187aa0 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x55c2201acd40 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55c2201acdc0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55c2201acfd0 <line:14:22>
|-FunctionDecl 0x55c2201ad280 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55c2201ad040 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x55c2201ad0c0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x55c2201ad140 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x55c2201ad338 <line:16:22>
|-TypedefDecl 0x55c2201ad3a8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x55c2201470e0 'unsigned char'
|-TypedefDecl 0x55c2201ad418 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x55c220147100 'unsigned short'
|-TypedefDecl 0x55c2201ad488 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-TypedefDecl 0x55c2201ad4f8 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ad568 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x55c220147040 'signed char'
|-TypedefDecl 0x55c2201ad5d8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x55c2201470e0 'unsigned char'
|-TypedefDecl 0x55c2201ad648 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x55c220147060 'short'
|-TypedefDecl 0x55c2201ad6b8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x55c220147100 'unsigned short'
|-TypedefDecl 0x55c2201ad728 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x55c220147080 'int'
|-TypedefDecl 0x55c2201ad798 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-TypedefDecl 0x55c2201ad808 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ad878 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ad8e8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ad958 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ad9c8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ada38 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-TypedefDecl 0x55c2201adaa8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-TypedefDecl 0x55c2201adb18 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201adb88 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201adbf8 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-TypedefDecl 0x55c2201adc68 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201adcd8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201add68 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201addd8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x55c220147080 'int'
|-RecordDecl 0x55c2201ade30 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x55c2201adf78 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x55c2201ae030 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x55c2201adfd0 'struct __fsid_t' sugar
|   `-RecordType 0x55c2201adeb0 '__fsid_t'
|     `-Record 0x55c2201ade30 ''
|-TypedefDecl 0x55c2201ae0b8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae128 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ae198 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ae208 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-TypedefDecl 0x55c2201ae278 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae2e8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-TypedefDecl 0x55c2201ae358 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae3c8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x55c220147080 'int'
|-TypedefDecl 0x55c2201ae438 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x55c220147080 'int'
|-TypedefDecl 0x55c2201ae4a8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x55c220147080 'int'
|-TypedefDecl 0x55c2201ae518 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x55c2201477a0 'void *'
|   `-BuiltinType 0x55c220146fe0 'void'
|-TypedefDecl 0x55c2201ae588 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae5f8 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae668 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae6d8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ae748 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ae7b8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ae828 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201ae898 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae908 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae978 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201ae9e8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201aea78 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x55c2201aea40 '__off64_t' sugar
|   |-Typedef 0x55c2201add68 '__off64_t'
|   `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201aeb70 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x55c2201aeb30 '__quad_t *'
|   `-TypedefType 0x55c2201aead0 '__quad_t' sugar
|     |-Typedef 0x55c2201ad8e8 '__quad_t'
|     `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201aebe0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x55c220147c20 'char *'
|   `-BuiltinType 0x55c220147020 'char'
|-TypedefDecl 0x55c2201aec50 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201aecc0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-FunctionDecl 0x55c2201aee38 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x55c2201aed60 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x55c2201af148 <line:72:1, line:74:1>
|   `-ReturnStmt 0x55c2201af138 <line:73:3, col:34>
|     `-CallExpr 0x55c2201af0f8 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x55c2201af0e0 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55c2201af070 <col:10> '<builtin fn type>' Function 0x55c2201aeee0 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x55c2201af120 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55c2201af090 <col:29> 'unsigned int' lvalue ParmVar 0x55c2201aed60 '__bsx' 'unsigned int'
|-FunctionDecl 0x55c2201aeee0 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x55c2201aef80 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x55c2201aeff0 <col:10> Implicit
| `-ConstAttr 0x55c2201af048 <col:10> Implicit
|-FunctionDecl 0x55c2201af2a0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x55c2201af198 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x55c2201af5b8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x55c2201af5a8 <line:78:3, col:34>
|     `-CallExpr 0x55c2201af568 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x55c2201af550 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55c2201af4d8 <col:10> '<builtin fn type>' Function 0x55c2201af348 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x55c2201af590 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55c2201af4f8 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x55c2201af198 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x55c2201af348 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x55c2201af3e8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x55c2201af458 <col:10> Implicit
| `-ConstAttr 0x55c2201af4b0 <col:10> Implicit
|-TypedefDecl 0x55c2201af5e8 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-TypedefDecl 0x55c2201af678 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x55c2201af640 '__time_t' sugar
|   |-Typedef 0x55c2201ae278 '__time_t'
|   `-BuiltinType 0x55c2201470a0 'long'
|-RecordDecl 0x55c2201af6d0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x55c2201af788 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x55c2201af818 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x55c2201af8a8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x55c2201af870 '__pid_t' sugar
|   |-Typedef 0x55c2201addd8 '__pid_t'
|   `-BuiltinType 0x55c220147080 'int'
|-RecordDecl 0x55c2201af900 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x55c2201af9c0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x55c2201afa10 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x55c2201afad0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x55c2201afb38 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-RecordDecl 0x55c2201afb90 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x55c2201b1e70 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x55c2201b1f20 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x55c2201b1ec0 'struct cpu_set_t' sugar
|   `-RecordType 0x55c2201afc10 'cpu_set_t'
|     `-Record 0x55c2201afb90 ''
|-FunctionDecl 0x55c2201b21f8 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x55c2201b1fc8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55c2201b20d0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x55c2201b22a8 <line:108:19>
|-FunctionDecl 0x55c2201b2480 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x55c2201b2310 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x55c2201b2528 <col:69>
|-FunctionDecl 0x55c2201b26a0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x55c2201b2590 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x55c2201b2748 <col:64>
|-FunctionDecl 0x55c2201b2a08 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x55c2201b27b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55c2201b28e8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55c2201b2ab8 <line:114:22>
|-FunctionDecl 0x55c2201b2e60 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x55c2201b2b20 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55c2201b2c18 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x55c2201b2f10 <col:88>
|-FunctionDecl 0x55c2201b31c8 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55c2201b2f78 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55c2201b2ff8 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x55c2201b3088 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55c2201b3280 <col:62>
|-FunctionDecl 0x55c2201b33f8 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x55c2201b32e8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x55c2201b34a0 <col:63>
|-FunctionDecl 0x55c2201b35c8 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x55c2201b3668 <col:47>
|-FunctionDecl 0x55c2201b3770 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x55c2201b36d8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55c2201b3818 <col:69>
|-FunctionDecl 0x55c2201b3920 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x55c2201b3888 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55c2201b39c8 <col:69>
|-FunctionDecl 0x55c2201b3c88 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55c2201b3a30 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55c2201b3b68 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x55c2201b3d38 <col:88>
|-TypedefDecl 0x55c2201b3dc8 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x55c2201b3d90 '__clock_t' sugar
|   |-Typedef 0x55c2201ae0b8 '__clock_t'
|   `-BuiltinType 0x55c2201470a0 'long'
|-TypedefDecl 0x55c2201b47e0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x55c2201b3e20 '__clockid_t' sugar
|   |-Typedef 0x55c2201ae4a8 '__clockid_t'
|   `-BuiltinType 0x55c220147080 'int'
|-TypedefDecl 0x55c2201b4878 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x55c2201b4840 '__timer_t' sugar
|   |-Typedef 0x55c2201ae518 '__timer_t'
|   `-PointerType 0x55c2201477a0 'void *'
|     `-BuiltinType 0x55c220146fe0 'void'
|-RecordDecl 0x55c2201b48d0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x55c2201b4990 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x55c2201b49f8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x55c2201b4a60 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x55c2201b4ac8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x55c2201b4b30 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x55c2201b4b98 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x55c2201b4c00 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x55c2201b4c68 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x55c2201b4cd0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x55c2201b4d38 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x55c2201b4da0 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x55c2201b4df0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x55c2201b4eb8 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x55c2201b4f28 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x55c2201b4fd0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x55c2201b51a0 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x55c2201b5240 <col:45>
|-FunctionDecl 0x55c2201b5420 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x55c2201b5310 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x55c2201b54c8 <col:54>
|-FunctionDecl 0x55c2201b56c8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x55c2201b5530 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x55c2201b55a8 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x55c2201b5778 <line:158:22>
| `-ConstAttr 0x55c2201b6410 <col:63>
|-FunctionDecl 0x55c2201b6610 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55c2201b6508 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55c2201b66b8 <col:56>
|-FunctionDecl 0x55c2201b6a60 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x55c2201b6728 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x55c2201b67a0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55c2201b6820 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x55c2201b6918 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x55c2201b6b20 <col:54>
|-RecordDecl 0x55c2201b6b78 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x55c2201b6c28 parent 0x55c220146f88 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x55c2201b6e88 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x55c2201b6f28 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x55c2201b6f90 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x55c2201b6ff8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x55c2201b70e8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x55c2201b7208 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x55c2201b71b0 'struct __locale_struct *'
|   `-ElaboratedType 0x55c2201b7140 'struct __locale_struct' sugar
|     `-RecordType 0x55c2201b6c00 'struct __locale_struct'
|       `-Record 0x55c2201b6b78 '__locale_struct'
|-TypedefDecl 0x55c2201b72b8 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x55c2201b7280 '__locale_t' sugar
|   |-Typedef 0x55c2201b7208 '__locale_t'
|   `-PointerType 0x55c2201b71b0 'struct __locale_struct *'
|     `-ElaboratedType 0x55c2201b7140 'struct __locale_struct' sugar
|       `-RecordType 0x55c2201b6c00 'struct __locale_struct'
|         `-Record 0x55c2201b6b78 '__locale_struct'
|-FunctionDecl 0x55c2201b76b0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x55c2201b7328 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x55c2201b73a0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55c2201b7438 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x55c2201b74c8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55c2201b7540 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x55c2201b7778 <col:40>
|-FunctionDecl 0x55c2201b7968 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55c2201b7840 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x55c2201b7a10 <col:66>
|-FunctionDecl 0x55c2201b7b20 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55c2201b7a78 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x55c2201b7bc8 <col:69>
|-FunctionDecl 0x55c2201b7df8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55c2201b7c30 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55c2201b7cc0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55c2201b7ea8 <col:52>
|-FunctionDecl 0x55c2201b8050 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55c2201b7f10 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55c2201b7fa0 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55c2201b8100 <col:55>
|-FunctionDecl 0x55c2201b8298 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x55c2201b8180 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x55c2201b8340 <col:62>
|-FunctionDecl 0x55c2201b8578 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x55c2201b83a8 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x55c2201b8620 <col:60>
|-FunctionDecl 0x55c2201b8848 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55c2201b86a0 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55c2201b8720 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x55c2201b88f8 <col:44>
|-FunctionDecl 0x55c2201b8b08 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55c2201b8960 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55c2201b89e0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x55c2201b8bb8 <col:49>
|-VarDecl 0x55c2201b8cb8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x55c2201b8d38 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x55c2201b8db8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x55c2201b8e80 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x55c2201b8fb0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x55c2201b9050 <col:42>
|-VarDecl 0x55c2201b90c0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x55c2201b9140 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x55c2201b92c8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x55c2201b91b8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x55c2201b9370 <col:57>
|-FunctionDecl 0x55c2201ba4f0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55c2201b93f0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55c2201ba598 <col:56>
|-FunctionDecl 0x55c2201ba6a8 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55c2201ba618 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x55c2201ba750 <col:59>
|-FunctionDecl 0x55c2201ba858 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x55c2201ba7c0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x55c2201ba900 <col:48>
| `-ConstAttr 0x55c2201ba958 <col:89>
|-FunctionDecl 0x55c2201babb8 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55c2201baa08 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x55c2201baa98 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x55c2201bae18 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55c2201baca8 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55c2201bad38 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x55c2201baec8 <col:88>
|-FunctionDecl 0x55c2201bb060 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55c2201baf30 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55c2201bafc0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x55c2201bb110 <col:88>
|-FunctionDecl 0x55c2201bb328 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x55c2201bb178 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55c2201bb208 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x55c2201bb3d8 <line:209:22>
|-FunctionDecl 0x55c2201bb778 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55c2201bb440 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55c2201bb500 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x55c2201bb590 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x55c2201bb620 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x55c2201bba78 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x55c2201bb878 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x55c2201bb950 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x55c2201bbb28 <col:85>
|-FunctionDecl 0x55c2201bbf18 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x55c2201bbb90 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55c2201bbcc8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x55c2201bbdd0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x55c2201bbfd0 <col:52>
|-FunctionDecl 0x55c2201bc148 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x55c2201bc038 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55c2201bc1f0 <col:61>
|-FunctionDecl 0x55c2201bc668 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x55c2201bc258 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55c2201bc2d8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x55c2201bc408 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x55c2201bc510 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x55c2201bc728 <col:62>
|-FunctionDecl 0x55c2201bc948 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x55c2201bc790 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55c2201bc820 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x55c2201bc9f8 <line:222:22>
|-FunctionDecl 0x55c2201bcaf8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x55c2201bca60 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55c2201bcba0 <col:65>
|-TypedefDecl 0x55c2201bcc10 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x55c220147140 'unsigned long'
|-RecordDecl 0x55c2201bcc68 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x55c2201bcdb0 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55c2201bce18 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55c2201bcec8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x55c2201bce70 'union pthread_attr_t' sugar
|   `-RecordType 0x55c2201bccf0 'union pthread_attr_t'
|     `-Record 0x55c2201bcc68 'pthread_attr_t'
|-RecordDecl 0x55c2201bcf20 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x55c2201bd098 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x55c2201bd110 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x55c2201bd1c0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x55c2201bd160 'struct __pthread_internal_list' sugar
|   `-RecordType 0x55c2201bcfa0 'struct __pthread_internal_list'
|     `-Record 0x55c2201bcf20 '__pthread_internal_list'
|-RecordDecl 0x55c2201bd230 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x55c2201bd2d8 parent 0x55c220146f88 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x55c2201bd3b0 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55c2201bd418 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x55c2201bd480 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x55c2201c1530 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x55c2201c1598 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x55c2201c1600 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x55c2201c1688 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x55c2201c1740 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x55c2201c1830 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x55c2201c1898 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55c2201c1a20 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x55c2201c19c0 'union pthread_mutex_t' sugar
|   `-RecordType 0x55c2201bd2b0 'pthread_mutex_t'
|     `-Record 0x55c2201bd230 ''
|-RecordDecl 0x55c2201c1a90 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x55c2201c1bd0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55c2201c1c38 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55c2201c1cf0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x55c2201c1c90 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x55c2201c1b10 'pthread_mutexattr_t'
|     `-Record 0x55c2201c1a90 ''
|-RecordDecl 0x55c2201c1d60 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x55c2201c1e08 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x55c2201c1ed0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55c2201c1f38 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x55c2201c1fa0 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x55c2201c2008 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x55c2201c2070 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x55c2201c20d8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x55c2201c2140 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x55c2201c21a8 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x55c2201c2260 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at pthread-wmm/rfi002_rmo.opt_true-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/rfi002_rmo.opt_true-unreach-call.i:259:3)'
| |-FieldDecl 0x55c2201c2350 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x55c2201c23b8 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x55c2201c2540 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x55c2201c2490 'union pthread_cond_t' sugar
|   `-RecordType 0x55c2201c1de0 'pthread_cond_t'
|     `-Record 0x55c2201c1d60 ''
|-RecordDecl 0x55c2201c25b0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x55c2201c26b0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55c2201c2718 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55c2201c27d0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x55c2201c2770 'union pthread_condattr_t' sugar
|   `-RecordType 0x55c2201c2630 'pthread_condattr_t'
|     `-Record 0x55c2201c25b0 ''
|-TypedefDecl 0x55c2201c2858 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x55c220147120 'unsigned int'
|-TypedefDecl 0x55c2201c28c8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x55c220147080 'int'
|-RecordDecl 0x55c2201c2920 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x55c2201c29c8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x55c2201c2a90 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55c2201c2af8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x55c2201c2b60 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x55c2201c2bc8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x55c2201c2c30 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x55c2201c2c98 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x55c2201c2d00 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x55c2201c2d68 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x55c2201c2dd0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x55c2201c2e38 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x55c2201c2ea0 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x55c2201c2f50 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at pthread-wmm/rfi002_rmo.opt_true-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/rfi002_rmo.opt_true-unreach-call.i:282:3)'
| |-FieldDecl 0x55c2201c2ff8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55c2201c3060 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55c2201c31b0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x55c2201c3150 'union pthread_rwlock_t' sugar
|   `-RecordType 0x55c2201c29a0 'pthread_rwlock_t'
|     `-Record 0x55c2201c2920 ''
|-RecordDecl 0x55c2201c3220 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x55c2201c3360 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x55c2201c33c8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55c2201c3480 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x55c2201c3420 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x55c2201c32a0 'pthread_rwlockattr_t'
|     `-Record 0x55c2201c3220 ''
|-TypedefDecl 0x55c2201c5560 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x55c220147084 'volatile int' volatile
|   `-BuiltinType 0x55c220147080 'int'
|-RecordDecl 0x55c2201c55b8 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x55c2201c5700 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x55c2201c5768 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55c2201c5820 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x55c2201c57c0 'union pthread_barrier_t' sugar
|   `-RecordType 0x55c2201c5640 'pthread_barrier_t'
|     `-Record 0x55c2201c55b8 ''
|-RecordDecl 0x55c2201c5890 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x55c2201c5990 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55c2201c59f8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55c2201c5ab0 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x55c2201c5a50 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x55c2201c5910 'pthread_barrierattr_t'
|     `-Record 0x55c2201c5890 ''
|-TypedefDecl 0x55c2201c5bc8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x55c2201c5b60 'long [8]' 8 
|   `-BuiltinType 0x55c2201470a0 'long'
|-EnumDecl 0x55c2201c5c20 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x55c2201c5ce8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x55c2201c5d38 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x55c2201c5d88 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x55c2201c5e58 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x55c2201c5ea8 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x55c2201c5ef8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x55c2201c5f48 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x55c2201c5fd0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x55c2201c5fb8 <col:26> 'int'
| |   `-DeclRefExpr 0x55c2201c5f98 <col:26> 'int' EnumConstant 0x55c2201c5e58 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x55c2201c6058 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x55c2201c6040 <col:29> 'int'
| |   `-DeclRefExpr 0x55c2201c6020 <col:29> 'int' EnumConstant 0x55c2201c5ea8 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x55c2201c60e0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x55c2201c60c8 <col:30> 'int'
| |   `-DeclRefExpr 0x55c2201c60a8 <col:30> 'int' EnumConstant 0x55c2201c5ef8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x55c2201c6168 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x55c2201c6150 <col:27> 'int'
|     `-DeclRefExpr 0x55c2201c6130 <col:27> 'int' EnumConstant 0x55c2201c5fd0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x55c2201c61b8 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x55c2201c6288 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x55c2201c6310 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x55c2201c62f8 <col:30> 'int'
| |   `-DeclRefExpr 0x55c2201c62d8 <col:30> 'int' EnumConstant 0x55c2201c6288 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x55c2201c6360 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x55c2201c63e8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x55c2201c63d0 <col:29> 'int'
|     `-DeclRefExpr 0x55c2201c63b0 <col:29> 'int' EnumConstant 0x55c2201c6360 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x55c2201c6438 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x55c2201c6508 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x55c2201c6570 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x55c2201c65c0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x55c2201c6610 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x55c2201c66d8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x55c2201c6728 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x55c2201c6778 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x55c2201c6800 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x55c2201c67e8 <col:31> 'int'
|     `-DeclRefExpr 0x55c2201c67c8 <col:31> 'int' EnumConstant 0x55c2201c66d8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x55c2201c6850 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x55c2201c6918 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x55c2201c6968 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x55c2201c69b8 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x55c2201c6a88 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x55c2201c6ad8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x55c2201c6b28 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x55c2201c6bf8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x55c2201c6c48 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x55c2201c6c98 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x55c2201c6ed8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x55c2201c6f40 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x55c2201c6fa8 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x55c2201c70c8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x55c2201c7118 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x55c2201c71e8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x55c2201c7238 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x55c2201c7288 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x55c2201c7358 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x55c2201c73a8 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x55c2201c79d8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x55c2201c74a0 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x55c2201c75c0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201c77c0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x55c2201c7840 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x55c2201c7a98 <col:47>
| |-NonNullAttr 0x55c2201c7af0 <col:77, col:94> 1 3
| `-CallbackAttr 0x55c2201c7b28 <line:386:12> Implicit 2 3
|-FunctionDecl 0x55c2201c7c50 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x55c2201c7b80 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x55c2201c7ea8 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x55c2201c7d08 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x55c2201c7d88 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x55c2201c8078 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x55c2201c7f68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x55c2201c8120 <col:60>
|-FunctionDecl 0x55c2201c8270 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x55c2201c8310 <col:54>
| `-ConstAttr 0x55c2201c8368 <col:95>
|-FunctionDecl 0x55c2201c8da0 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x55c2201c83a0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55c2201c8418 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x55c2201c8e50 <line:395:19>
| `-ConstAttr 0x55c2201c8ea8 <col:60>
|-FunctionDecl 0x55c2201c9078 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55c2201c8f40 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55c2201c9120 <col:71>
| `-NonNullAttr 0x55c2201c9178 <col:112, col:126> 1
|-FunctionDecl 0x55c2201c9280 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55c2201c91c8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55c2201c9328 <line:398:22>
| `-NonNullAttr 0x55c2201c9380 <col:63, col:77> 1
|-FunctionDecl 0x55c2201c95a8 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x55c2201c93c8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55c2201c9448 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x55c2201c9658 <line:401:22>
| `-NonNullAttr 0x55c2201c96b0 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201c98b8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55c2201c96f8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55c2201c9778 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x55c2201c9968 <line:404:22>
| `-NonNullAttr 0x55c2201c99c0 <col:63, col:77> 1
|-FunctionDecl 0x55c2201c9c18 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x55c2201c9a08 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55c2201c9ab0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x55c2201c9cc8 <line:407:22>
| `-NonNullAttr 0x55c2201c9d20 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201caf78 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55c2201cadc0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55c2201cae38 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55c2201cb028 <line:410:22>
| `-NonNullAttr 0x55c2201cb080 <col:63, col:77> 1
|-FunctionDecl 0x55c2201cb2b8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55c2201cb0c8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201cb158 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55c2201cb368 <line:413:22>
| `-NonNullAttr 0x55c2201cb3c0 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201cb5f8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55c2201cb408 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201cb498 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x55c2201cb6a8 <col:37>
| `-NonNullAttr 0x55c2201cb700 <col:78, col:95> 1 2
|-FunctionDecl 0x55c2201cb8e8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201cb748 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201cb7c8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x55c2201cb998 <line:419:22>
| `-NonNullAttr 0x55c2201cb9f0 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201cbb78 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55c2201cba38 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55c2201cbab8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x55c2201cbc28 <line:421:22>
| `-NonNullAttr 0x55c2201cbc80 <col:63, col:77> 1
|-FunctionDecl 0x55c2201cce58 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201cbcc8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201cbd48 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x55c2201ccf08 <line:424:22>
| `-NonNullAttr 0x55c2201ccf60 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201cd0e8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55c2201ccfa8 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55c2201cd028 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x55c2201cd198 <line:427:22>
| `-NonNullAttr 0x55c2201cd1f0 <col:63, col:77> 1
|-FunctionDecl 0x55c2201cd398 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201cd238 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201cd2b8 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x55c2201cd448 <line:430:22>
| `-NonNullAttr 0x55c2201cd4a0 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201cd628 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55c2201cd4e8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55c2201cd568 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x55c2201cd6d8 <line:432:22>
| `-NonNullAttr 0x55c2201cd730 <col:63, col:77> 1
|-FunctionDecl 0x55c2201cd958 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x55c2201cd778 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201cd7f8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x55c2201cda08 <line:435:22>
| |-NonNullAttr 0x55c2201cda60 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x55c2201cda98 <col:100> "" ""
|-FunctionDecl 0x55c2201cdca8 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x55c2201cdae8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55c2201cdb68 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x55c2201cdd58 <line:438:22>
| |-NonNullAttr 0x55c2201cddb0 <col:63, col:77> 1
| `-DeprecatedAttr 0x55c2201cddf8 <col:97> "" ""
|-FunctionDecl 0x55c2201cdfe8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55c2201cde48 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201cdec0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55c2201ce098 <line:441:22>
| `-NonNullAttr 0x55c2201ce0f0 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201ce270 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55c2201ce138 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55c2201ce1b0 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55c2201ce320 <line:444:22>
| `-NonNullAttr 0x55c2201ce378 <col:63, col:77> 1
|-FunctionDecl 0x55c2201ce668 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55c2201ce3c8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55c2201ce448 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x55c2201ce4c0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55c2201ce720 <line:448:22>
| `-NonNullAttr 0x55c2201ce778 <col:63, col:83> 1 2 3
|-FunctionDecl 0x55c2201cea28 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x55c2201ce7d0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55c2201ce850 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x55c2201ce8c8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55c2201ceae0 <col:43>
| `-NonNullAttr 0x55c2201ceb38 <col:84, col:98> 1
|-FunctionDecl 0x55c2201cee40 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55c2201ceb88 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55c2201cec08 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x55c2201cec98 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x55c2201ceef8 <line:453:22>
| `-NonNullAttr 0x55c2201cef50 <col:63, col:77> 3
|-FunctionDecl 0x55c2201cf228 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55c2201cef98 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55c2201cf018 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x55c2201cf0a8 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55c2201cf2e0 <line:457:22>
| `-NonNullAttr 0x55c2201cf338 <col:63, col:80> 2 3
|-FunctionDecl 0x55c2201cf528 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x55c2201cf388 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55c2201cf408 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x55c2201cf5d8 <line:459:22>
|-FunctionDecl 0x55c2201cf9a8 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x55c2201cf6a0 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x55c2201cf840 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x55c2201cfa58 <col:52, col:69> 1 2
|-FunctionDecl 0x55c2201cfc00 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x55c2201cfae0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x55c2201cfb60 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x55c2201cfe10 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x55c2201cfcc8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x55c2201cfd48 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x55c2201cff68 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x55c2201cfed0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x55c2201d00a8 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x55c2201d0148 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x55c2201d01f8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x55c2201d02e8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x55c2201d0350 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x55c2201d0520 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/rfi002_rmo.opt_true-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x55c2201d0618 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x55c2201d06d0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x55c2201d0670 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x55c2201d01d0 '__pthread_unwind_buf_t'
| |   `-Record 0x55c2201d0148 ''
| `-AlignedAttr 0x55c2201d0728 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x55c2201d07a0 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x55c2201d0900 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x55c2201d0968 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x55c2201d09d0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x55c2201d0a38 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x55c2201d0c40 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55c2201d0b30 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55c2201d0e20 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55c2201d0cf8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55c2201d0fe0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55c2201d0ed8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x55c2201d1088 <line:488:22>
|-RecordDecl 0x55c2201d10e0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x55c2201d13f8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x55c2201d1258 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x55c2201d12d8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x55c2201d14a8 <col:86>
| `-ReturnsTwiceAttr 0x55c2201d1500 <col:12> Implicit
|-FunctionDecl 0x55c2201d1828 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55c2201d15d0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x55c2201d16e0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x55c2201d18d8 <line:494:22>
| `-NonNullAttr 0x55c2201d1930 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d1aa8 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55c2201d1978 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55c2201d1b50 <line:496:22>
| `-NonNullAttr 0x55c2201d1ba8 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d1cb0 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55c2201d1bf8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55c2201d1d58 <line:498:22>
| `-NonNullAttr 0x55c2201d1db0 <col:52, col:66> 1
|-FunctionDecl 0x55c2201d1ee8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55c2201d1e30 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55c2201d1f90 <line:500:22>
| `-NonNullAttr 0x55c2201d1fe8 <col:52, col:66> 1
|-FunctionDecl 0x55c2201d2228 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55c2201d2038 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55c2201d20c8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55c2201d22d8 <col:36>
| `-NonNullAttr 0x55c2201d2330 <col:66, col:83> 1 2
|-FunctionDecl 0x55c2201d2430 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55c2201d2378 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55c2201d24d8 <line:505:22>
| `-NonNullAttr 0x55c2201d2530 <col:52, col:66> 1
|-FunctionDecl 0x55c2201d27c8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201d25e0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55c2201d2660 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55c2201d2878 <line:509:22>
| `-NonNullAttr 0x55c2201d28d0 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201d2b98 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x55c2201d2918 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55c2201d2998 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x55c2201d2a18 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x55c2201d2c50 <line:513:22>
| `-NonNullAttr 0x55c2201d2ca8 <col:63, col:80> 1 3
|-FunctionDecl 0x55c2201d2e40 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55c2201d2cf8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55c2201d2ee8 <line:515:22>
| `-NonNullAttr 0x55c2201d2f40 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d3128 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55c2201d2ff0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55c2201d31d0 <line:517:22>
| `-NonNullAttr 0x55c2201d3228 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d3330 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55c2201d3278 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55c2201d33d8 <line:519:22>
| `-NonNullAttr 0x55c2201d3430 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d3658 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201d3478 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55c2201d34f8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x55c2201d3708 <line:523:22>
| `-NonNullAttr 0x55c2201d3760 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201d3968 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201d37a8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55c2201d3828 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x55c2201d3a18 <line:526:22>
| `-NonNullAttr 0x55c2201d3a70 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d3c18 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201d3ab8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55c2201d3b38 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x55c2201d3cc8 <line:529:22>
| `-NonNullAttr 0x55c2201d3d20 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201d4f20 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201d3d68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55c2201d4e60 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x55c2201d4fd0 <line:531:22>
| `-NonNullAttr 0x55c2201d5028 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d51d8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201d5078 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55c2201d50f8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x55c2201d5288 <line:535:22>
| `-NonNullAttr 0x55c2201d52e0 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201d5468 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201d5328 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55c2201d53a8 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x55c2201d5518 <line:538:22>
| `-NonNullAttr 0x55c2201d5570 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d5718 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201d55b8 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55c2201d5638 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55c2201d57c8 <line:542:22>
| `-NonNullAttr 0x55c2201d5820 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201d59a8 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201d5868 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55c2201d58e8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x55c2201d5a58 <line:545:22>
| `-NonNullAttr 0x55c2201d5ab0 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d5c98 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x55c2201d5af8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x55c2201d5b78 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x55c2201d5d48 <line:548:22>
| `-NonNullAttr 0x55c2201d5da0 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201d6f58 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201d5de8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55c2201d6e98 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x55c2201d7008 <line:551:22>
| `-NonNullAttr 0x55c2201d7060 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d7398 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x55c2201d7140 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55c2201d7250 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x55c2201d7448 <col:29>
| `-NonNullAttr 0x55c2201d74a0 <col:70, col:84> 1
|-FunctionDecl 0x55c2201d7618 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55c2201d74e8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55c2201d76c0 <line:556:22>
| `-NonNullAttr 0x55c2201d7718 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d7820 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55c2201d7768 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55c2201d78c8 <line:558:22>
| `-NonNullAttr 0x55c2201d7920 <col:52, col:66> 1
|-FunctionDecl 0x55c2201d7a20 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55c2201d7968 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55c2201d7ac8 <line:560:19>
| `-NonNullAttr 0x55c2201d7b20 <col:49, col:63> 1
|-FunctionDecl 0x55c2201d7d58 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55c2201d7b68 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55c2201d7bf8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55c2201d7e08 <col:39>
| `-NonNullAttr 0x55c2201d7e90 <col:69, col:86> 1 2
|-FunctionDecl 0x55c2201d7f90 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55c2201d7ed8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55c2201d8038 <line:565:22>
| `-NonNullAttr 0x55c2201d8090 <col:52, col:66> 1
|-FunctionDecl 0x55c2201d8190 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55c2201d80d8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55c2201d8238 <line:567:22>
| `-NonNullAttr 0x55c2201d8290 <col:52, col:66> 1
|-FunctionDecl 0x55c2201d8448 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55c2201d82d8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55c2201d8368 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55c2201d84f8 <col:39>
| `-NonNullAttr 0x55c2201d8550 <col:69, col:86> 1 2
|-FunctionDecl 0x55c2201d8650 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55c2201d8598 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55c2201d86f8 <line:572:22>
| `-NonNullAttr 0x55c2201d8750 <col:52, col:66> 1
|-FunctionDecl 0x55c2201d8938 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55c2201d8800 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55c2201d89e0 <line:574:22>
| `-NonNullAttr 0x55c2201d8a38 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d8b40 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55c2201d8a88 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55c2201d8be8 <line:576:22>
| `-NonNullAttr 0x55c2201d8c40 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d8ea0 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201d8c88 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55c2201d8d08 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x55c2201d8f50 <line:580:22>
| `-NonNullAttr 0x55c2201d8fa8 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201d91b8 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201d8ff8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55c2201d9078 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x55c2201d9268 <line:583:22>
| `-NonNullAttr 0x55c2201d92c0 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d9468 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201d9308 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55c2201d9388 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x55c2201d9518 <line:587:22>
| `-NonNullAttr 0x55c2201d9570 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201d96f8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201d95b8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55c2201d9638 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x55c2201d97a8 <col:36>
| `-NonNullAttr 0x55c2201d9800 <col:77, col:91> 1
|-FunctionDecl 0x55c2201d9b38 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x55c2201d98e0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55c2201d99f0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x55c2201d9be8 <line:592:22>
| `-NonNullAttr 0x55c2201d9c40 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d9db8 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55c2201d9c88 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55c2201d9e60 <line:594:22>
| `-NonNullAttr 0x55c2201d9ee0 <col:63, col:77> 1
|-FunctionDecl 0x55c2201d9fe0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55c2201d9f28 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55c2201da088 <line:596:22>
| `-NonNullAttr 0x55c2201da0e0 <col:52, col:66> 1
|-FunctionDecl 0x55c2201da1e0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55c2201da128 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55c2201da288 <line:598:22>
| `-NonNullAttr 0x55c2201da2e0 <col:52, col:66> 1
|-FunctionDecl 0x55c2201da508 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x55c2201da328 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55c2201da3a0 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x55c2201da5b8 <line:601:22, col:39> 1 2
|-FunctionDecl 0x55c2201da8e8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55c2201da638 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55c2201da6b0 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55c2201da740 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x55c2201da9a0 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x55c2201dabb8 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55c2201daa80 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55c2201dac60 <line:607:22>
| `-NonNullAttr 0x55c2201dacb8 <col:63, col:77> 1
|-FunctionDecl 0x55c2201dadc0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55c2201dad08 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55c2201dae68 <line:609:22>
| `-NonNullAttr 0x55c2201daef0 <col:63, col:77> 1
|-FunctionDecl 0x55c2201db118 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201daf38 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55c2201dafb8 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x55c2201db1c8 <line:613:22>
| `-NonNullAttr 0x55c2201db220 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201db428 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201db268 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55c2201db2e8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x55c2201db4d8 <col:37>
| `-NonNullAttr 0x55c2201db530 <col:78, col:92> 1
|-FunctionDecl 0x55c2201db748 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x55c2201db578 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55c2201db620 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x55c2201db7f8 <line:619:22>
| `-NonNullAttr 0x55c2201db850 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201dba18 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x55c2201db898 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55c2201db910 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x55c2201dbac8 <line:622:22>
| `-NonNullAttr 0x55c2201dbb20 <col:63, col:77> 1
|-FunctionDecl 0x55c2201dbdc8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x55c2201dbc00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x55c2201dbc80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x55c2201dbe78 <line:624:22>
| `-NonNullAttr 0x55c2201dbf00 <col:63, col:77> 1
|-FunctionDecl 0x55c2201dc078 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55c2201dbf48 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55c2201dc120 <line:626:22>
| `-NonNullAttr 0x55c2201dc178 <col:63, col:77> 1
|-FunctionDecl 0x55c2201dc280 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55c2201dc1c8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55c2201dc328 <line:628:22>
| `-NonNullAttr 0x55c2201dc380 <col:52, col:66> 1
|-FunctionDecl 0x55c2201dc480 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55c2201dc3c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55c2201dc528 <line:630:22>
| `-NonNullAttr 0x55c2201dc580 <col:52, col:66> 1
|-FunctionDecl 0x55c2201dc680 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55c2201dc5c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55c2201dc728 <line:632:22>
| `-NonNullAttr 0x55c2201dc780 <col:52, col:66> 1
|-FunctionDecl 0x55c2201dcb58 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x55c2201dc860 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x55c2201dc970 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55c2201dc9f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x55c2201dcc10 <line:636:22>
| `-NonNullAttr 0x55c2201dcc68 <col:63, col:77> 1
|-FunctionDecl 0x55c2201dcde8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55c2201dccb8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55c2201dce90 <line:638:22>
| `-NonNullAttr 0x55c2201dcf10 <col:63, col:77> 1
|-FunctionDecl 0x55c2201dd010 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55c2201dcf58 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55c2201dd0b8 <line:640:22>
| `-NonNullAttr 0x55c2201dd110 <col:52, col:66> 1
|-FunctionDecl 0x55c2201dd2f8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55c2201dd1c0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55c2201dd3a0 <line:642:22>
| `-NonNullAttr 0x55c2201dd3f8 <col:63, col:77> 1
|-FunctionDecl 0x55c2201dd500 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55c2201dd448 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55c2201dd5a8 <line:644:22>
| `-NonNullAttr 0x55c2201dd600 <col:63, col:77> 1
|-FunctionDecl 0x55c2201dd828 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55c2201dd648 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55c2201dd6c8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x55c2201dd8d8 <line:648:22>
| `-NonNullAttr 0x55c2201dd930 <col:63, col:80> 1 2
|-FunctionDecl 0x55c2201ddb38 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x55c2201dd978 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x55c2201dd9f8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x55c2201ddbe8 <line:651:22>
| `-NonNullAttr 0x55c2201ddc40 <col:63, col:77> 1
|-FunctionDecl 0x55c2201ddfa8 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x55c2201ddd20 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x55c2201dde40 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x55c2201de058 <line:654:22>
| `-NonNullAttr 0x55c2201de0b0 <col:63, col:77> 1
|-FunctionDecl 0x55c2201de208 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x55c2201de0f8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55c2201de2b0 <col:69>
|-FunctionDecl 0x55c2201de428 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x55c2201de318 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55c2201de4d0 <col:72>
|-FunctionDecl 0x55c2201de708 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x55c2201de538 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x55c2201de5e8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x55c2201de7b8 <col:44>
|-FunctionDecl 0x55c2201de9d8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x55c2201de820 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55c2201de898 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x55c2201dea88 <line:661:22>
| `-NonNullAttr 0x55c2201deae0 <col:63, col:77> 2
|-FunctionDecl 0x55c2201dff50 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x55c2201debc0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x55c2201decd0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x55c2201dede0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x55c2201e0008 <col:47>
|-FunctionDecl 0x55c2201e0110 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x55c2201e0078 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55c2201e0268 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x55c2201e01d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55c2201e0330 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x55c2201e03f0 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x55c2201e04b0 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x55c2201e0568 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x55c2201e05e8 prev 0x55c2201e0568 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x55c2201e0650 <col:24> 'int' 0
|-VarDecl 0x55c2201e0688 <line:673:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x55c2201e0708 prev 0x55c2201e0688 <line:674:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x55c2201e0770 <col:27> 'int' 0
|-VarDecl 0x55c2201e07a8 <line:675:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x55c2201e0828 prev 0x55c2201e07a8 <line:676:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x55c2201e0890 <col:27> 'int' 0
|-VarDecl 0x55c2201e08c8 <line:677:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x55c2201e0948 prev 0x55c2201e08c8 <line:678:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x55c2201e09b0 <col:27> 'int' 0
|-VarDecl 0x55c2201e09e0 <line:679:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x55c2201e0a58 <line:680:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x55c2201e0ad8 <line:681:1, col:5> col:5 used x 'int'
|-VarDecl 0x55c2201e0b58 prev 0x55c2201e0ad8 <line:682:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x55c2201e0bc0 <col:9> 'int' 0
|-VarDecl 0x55c2201e0bf0 <line:683:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x55c2201e0c70 <line:684:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x55c2201e0ce8 <line:685:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x55c2201e0d60 <line:686:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x55c2201e0dd8 <line:687:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x55c2201e0e50 <line:688:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x55c2201e0f20 <line:689:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x55c2201e0f98 <line:690:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x55c2201e1010 <line:691:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x55c2201e1090 <line:692:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x55c2201e1110 <line:693:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x55c2201e1188 <line:694:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x55c2201e1208 <line:695:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x55c2201e1280 <line:696:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x55c2201e1300 <line:697:1, col:5> col:5 used y 'int'
|-VarDecl 0x55c2201e1380 prev 0x55c2201e1300 <line:698:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x55c2201e13e8 <col:9> 'int' 0
|-VarDecl 0x55c2201e1418 <line:699:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x55c2201e1490 <line:700:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x55c2201e15a8 prev 0x55c2201e0110 <line:701:1, line:740:1> line:701:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x55c2201e1510 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55c2201e5fa0 <line:702:1, line:740:1>
|   |-CallExpr 0x55c2201e16b8 <line:703:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e16a0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e1650 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e1718 <line:704:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55c2201e16d8 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   | `-IntegerLiteral 0x55c2201e16f8 <col:7> 'int' 1
|   |-CallExpr 0x55c2201e1770 <line:705:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e1758 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e1738 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201e17c8 <line:706:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e17b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e1790 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e1ab0 <line:707:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55c2201e17e8 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   | `-ConditionalOperator 0x55c2201e1a80 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55c2201e18a8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55c2201e1860 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55c2201e1848 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55c2201e1808 <col:7> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55c2201e1890 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55c2201e1878 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55c2201e1828 <col:25> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e1a68 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e18c8 <col:42> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55c2201e1a48 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55c2201e1a18 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55c2201e1988 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55c2201e1940 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55c2201e1928 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55c2201e18e8 <col:55> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55c2201e1970 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55c2201e1958 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55c2201e1908 <col:73> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e19e8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e19a8 <col:90> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55c2201e1a00 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e19c8 <col:102> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e1cb8 <line:708:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e1ad0 <col:3> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e1ca0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e1c70 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55c2201e1b90 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55c2201e1b48 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55c2201e1b30 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55c2201e1af0 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55c2201e1b78 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55c2201e1b60 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55c2201e1b10 <col:38> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e1c28 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e1be0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e1bb0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e1c58 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e1c40 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e1c08 <col:66> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55c2201e1fc0 <line:709:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e1cd8 <col:3> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e1fa8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e1f78 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55c2201e1e78 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55c2201e1d98 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55c2201e1d50 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55c2201e1d38 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55c2201e1cf8 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55c2201e1d80 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55c2201e1d68 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55c2201e1d18 <col:38> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55c2201e1e58 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55c2201e1e10 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55c2201e1df8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55c2201e1db8 <col:56> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55c2201e1e40 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55c2201e1e28 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55c2201e1dd8 <col:74> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e1f30 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e1ec8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e1e98 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e1f60 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e1f48 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e1ef0 <col:102> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55c2201e21c8 <line:710:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e1fe0 <col:3> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e21b0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e2180 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55c2201e20a0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55c2201e2058 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55c2201e2040 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55c2201e2000 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55c2201e2088 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55c2201e2070 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55c2201e2020 <col:38> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e2138 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e20f0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e20c0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e2168 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e2150 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e2118 <col:66> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55c2201e24b0 <line:711:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e21e8 <col:3> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e2498 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e2468 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55c2201e2388 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55c2201e22a8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55c2201e2260 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55c2201e2248 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55c2201e2208 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55c2201e2290 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55c2201e2278 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55c2201e2228 <col:38> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55c2201e2368 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55c2201e2320 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55c2201e2308 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55c2201e22c8 <col:56> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55c2201e2350 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55c2201e2338 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55c2201e22e8 <col:74> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e2420 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e23d8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e23a8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e2450 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e2438 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e2400 <col:102> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x55c2201e2508 <line:712:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e24f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e24d0 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201e2560 <line:713:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e2548 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e2528 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e2628 <line:714:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e2580 <col:3> '_Bool' lvalue Var 0x55c2201e1418 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x55c2201e2608 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55c2201e25f0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55c2201e25a0 <col:19> '_Bool (void)' Function 0x55c220186c80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55c2201e26c0 <line:715:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e2648 <col:3> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x55c2201e26a0 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55c2201e2688 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55c2201e2668 <col:19> '_Bool (void)' Function 0x55c220186c80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55c2201e2738 <line:716:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e26e0 <col:3> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e2720 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e2700 <col:21> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55c2201e27b0 <line:717:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55c2201e2758 <col:3> 'int' lvalue Var 0x55c2201e0c70 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55c2201e2798 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e2778 <col:15> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e2be8 <line:718:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55c2201e27d0 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   | `-ConditionalOperator 0x55c2201e2bb8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55c2201e29e0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55c2201e2900 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55c2201e2828 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55c2201e2810 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55c2201e27f0 <col:8> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55c2201e28e0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55c2201e2878 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55c2201e2860 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55c2201e2840 <col:27> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x55c2201e28c8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55c2201e28b0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55c2201e2890 <col:46> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55c2201e29c0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55c2201e2958 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55c2201e2940 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55c2201e2920 <col:65> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x55c2201e29a8 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55c2201e2990 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55c2201e2970 <col:84> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e2ba0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e2a00 <col:101> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |   `-ParenExpr 0x55c2201e2b80 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55c2201e2b50 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55c2201e2ac0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55c2201e2a78 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55c2201e2a60 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55c2201e2a20 <col:106> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55c2201e2aa8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55c2201e2a90 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55c2201e2a40 <col:124> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e2b20 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e2ae0 <col:141> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55c2201e2b38 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e2b00 <col:153> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55c2201e3118 <line:719:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55c2201e2c08 <col:3> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x55c2201e30e8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55c2201e30b8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55c2201e30a0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55c2201e2c28 <col:15> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e30d0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e2c48 <col:31> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55c2201e3080 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55c2201e3050 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55c2201e2e58 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55c2201e2d78 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55c2201e2ca0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55c2201e2c88 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55c2201e2c68 <col:45> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55c2201e2d58 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55c2201e2cf0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55c2201e2cd8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55c2201e2cb8 <col:64> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x55c2201e2d40 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55c2201e2d28 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55c2201e2d08 <col:83> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55c2201e2e38 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55c2201e2dd0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55c2201e2db8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55c2201e2d98 <col:102> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x55c2201e2e20 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55c2201e2e08 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55c2201e2de8 <col:121> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e3038 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e2e78 <col:138> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x55c2201e3018 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55c2201e2fe8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55c2201e2f58 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55c2201e2ef0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55c2201e2ed8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55c2201e2e98 <col:151> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55c2201e2f40 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55c2201e2f08 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55c2201e2eb8 <col:169> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x55c2201e2fb8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55c2201e2f78 <col:186> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55c2201e2fd0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55c2201e2f98 <col:198> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55c2201e3628 <line:720:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55c2201e3138 <col:3> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x55c2201e35f8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55c2201e35c8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55c2201e35b0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55c2201e3158 <col:15> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e35e0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e3178 <col:31> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x55c2201e3590 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55c2201e3560 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55c2201e3388 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55c2201e32a8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55c2201e31d0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55c2201e31b8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55c2201e3198 <col:45> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55c2201e3288 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55c2201e3220 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55c2201e3208 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55c2201e31e8 <col:64> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x55c2201e3270 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55c2201e3258 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55c2201e3238 <col:83> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55c2201e3368 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55c2201e3300 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55c2201e32e8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55c2201e32c8 <col:102> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x55c2201e3350 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55c2201e3338 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55c2201e3318 <col:121> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e3548 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e33a8 <col:138> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x55c2201e3528 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55c2201e34f8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55c2201e3468 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55c2201e3420 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55c2201e3408 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55c2201e33c8 <col:151> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55c2201e3450 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55c2201e3438 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55c2201e33e8 <col:169> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x55c2201e34c8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55c2201e3488 <col:186> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55c2201e34e0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55c2201e34a8 <col:198> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55c2201e3bd0 <line:721:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e3648 <col:3> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e3bb8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e3b88 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55c2201e3b40 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e3b28 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e3668 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e3b70 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e3b58 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e3688 <col:36> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55c2201e3b08 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55c2201e3ad8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55c2201e3898 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55c2201e37b8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55c2201e36e0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55c2201e36c8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55c2201e36a8 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55c2201e3798 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55c2201e3730 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55c2201e3718 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55c2201e36f8 <col:74> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55c2201e3780 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55c2201e3768 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55c2201e3748 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55c2201e3878 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55c2201e3810 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55c2201e37f8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55c2201e37d8 <col:112> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55c2201e3860 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55c2201e3848 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55c2201e3828 <col:131> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55c2201e3ac0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55c2201e3aa8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55c2201e38b8 <col:148> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55c2201e3a88 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55c2201e3a58 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55c2201e3978 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55c2201e3930 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55c2201e3918 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55c2201e38d8 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55c2201e3960 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55c2201e3948 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55c2201e38f8 <col:184> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55c2201e3a10 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55c2201e39c8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55c2201e3998 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55c2201e3a40 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55c2201e3a28 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55c2201e39f0 <col:212> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55c2201e41a8 <line:722:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e3bf0 <col:3> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e4190 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e4160 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55c2201e4118 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e4100 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e3c10 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e4148 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e4130 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e3c30 <col:36> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55c2201e40e0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55c2201e40b0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55c2201e3e40 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55c2201e3d60 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55c2201e3c88 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55c2201e3c70 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55c2201e3c50 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55c2201e3d40 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55c2201e3cd8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55c2201e3cc0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55c2201e3ca0 <col:74> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55c2201e3d28 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55c2201e3d10 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55c2201e3cf0 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55c2201e3e20 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55c2201e3db8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55c2201e3da0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55c2201e3d80 <col:112> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55c2201e3e08 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55c2201e3df0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55c2201e3dd0 <col:131> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55c2201e4098 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55c2201e4080 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55c2201e3e60 <col:148> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55c2201e4060 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55c2201e4030 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55c2201e3f20 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55c2201e3ed8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55c2201e3ec0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55c2201e3e80 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55c2201e3f08 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55c2201e3ef0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55c2201e3ea0 <col:184> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55c2201e4000 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55c2201e3f80 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55c2201e3f50 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55c2201e4018 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55c2201e3fd8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55c2201e3fa8 <col:219> 'int' 0
|   |-BinaryOperator 0x55c2201e4750 <line:723:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e41c8 <col:3> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e4738 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e4708 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55c2201e46c0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e46a8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e41e8 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e46f0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e46d8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e4208 <col:36> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x55c2201e4688 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55c2201e4658 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55c2201e4418 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55c2201e4338 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55c2201e4260 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55c2201e4248 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55c2201e4228 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55c2201e4318 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55c2201e42b0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55c2201e4298 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55c2201e4278 <col:74> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55c2201e4300 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55c2201e42e8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55c2201e42c8 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55c2201e43f8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55c2201e4390 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55c2201e4378 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55c2201e4358 <col:112> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55c2201e43e0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55c2201e43c8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55c2201e43a8 <col:131> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55c2201e4640 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55c2201e4628 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55c2201e4438 <col:148> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x55c2201e4608 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55c2201e45d8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55c2201e44f8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55c2201e44b0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55c2201e4498 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55c2201e4458 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55c2201e44e0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55c2201e44c8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55c2201e4478 <col:184> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55c2201e4590 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55c2201e4548 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55c2201e4518 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55c2201e45c0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55c2201e45a8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55c2201e4570 <col:212> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55c2201e4d18 <line:724:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e4770 <col:3> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e4d00 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e4cd0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55c2201e4c88 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e4c70 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e4790 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e4cb8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e4ca0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e47b0 <col:36> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x55c2201e4c50 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55c2201e4c20 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55c2201e49c0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55c2201e48e0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55c2201e4808 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55c2201e47f0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55c2201e47d0 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55c2201e48c0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55c2201e4858 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55c2201e4840 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55c2201e4820 <col:74> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55c2201e48a8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55c2201e4890 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55c2201e4870 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55c2201e49a0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55c2201e4938 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55c2201e4920 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55c2201e4900 <col:112> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55c2201e4988 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55c2201e4970 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55c2201e4950 <col:131> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55c2201e4c08 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55c2201e4bf0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55c2201e49e0 <col:148> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x55c2201e4bd0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55c2201e4ba0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55c2201e4aa0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55c2201e4a58 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55c2201e4a40 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55c2201e4a00 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55c2201e4a88 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55c2201e4a70 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55c2201e4a20 <col:184> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55c2201e4b70 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55c2201e4af0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55c2201e4ac0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55c2201e4b88 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55c2201e4b48 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55c2201e4b18 <col:219> 'int' 0
|   |-BinaryOperator 0x55c2201e4d90 <line:725:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55c2201e4d38 <col:3> 'int' lvalue Var 0x55c2201e0708 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x55c2201e4d78 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e4d58 <col:25> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e4ec0 <line:726:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55c2201e4db0 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   | `-ConditionalOperator 0x55c2201e4e90 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55c2201e4e48 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55c2201e4e30 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55c2201e4dd0 <col:7> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e4e60 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e4df0 <col:25> 'int' lvalue Var 0x55c2201e0c70 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55c2201e4e78 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55c2201e4e10 <col:37> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e4f88 <line:727:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e4ee0 <col:3> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55c2201e4f60 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55c2201e4f00 <col:28> 'int' 0
|   |-CallExpr 0x55c2201e4fe0 <line:728:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e4fc8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e4fa8 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201e5038 <line:729:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e5020 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e5000 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e5320 <line:730:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55c2201e5058 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   | `-ConditionalOperator 0x55c2201e52f0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55c2201e5118 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55c2201e50d0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55c2201e50b8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55c2201e5078 <col:7> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55c2201e5100 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55c2201e50e8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55c2201e5098 <col:25> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e52d8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e5138 <col:42> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55c2201e52b8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55c2201e5288 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55c2201e51f8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55c2201e51b0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55c2201e5198 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55c2201e5158 <col:55> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55c2201e51e0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55c2201e51c8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55c2201e5178 <col:73> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e5258 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e5218 <col:90> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55c2201e5270 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e5238 <col:102> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e5528 <line:731:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e5340 <col:3> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e5510 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e54e0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55c2201e5400 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55c2201e53b8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55c2201e53a0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55c2201e5360 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55c2201e53e8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55c2201e53d0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55c2201e5380 <col:38> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e5498 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e5450 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e5420 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e54c8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e54b0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e5478 <col:66> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55c2201e5810 <line:732:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e5548 <col:3> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e57f8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e57c8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55c2201e56e8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55c2201e5608 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55c2201e55c0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55c2201e55a8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55c2201e5568 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55c2201e55f0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55c2201e55d8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55c2201e5588 <col:38> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55c2201e56c8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55c2201e5680 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55c2201e5668 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55c2201e5628 <col:56> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55c2201e56b0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55c2201e5698 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55c2201e5648 <col:74> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e5780 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e5738 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e5708 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e57b0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e5798 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e5760 <col:102> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55c2201e5a18 <line:733:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e5830 <col:3> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e5a00 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e59d0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55c2201e58f0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55c2201e58a8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55c2201e5890 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55c2201e5850 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55c2201e58d8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55c2201e58c0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55c2201e5870 <col:38> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e5988 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e5940 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e5910 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e59b8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e59a0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e5968 <col:66> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55c2201e5d00 <line:734:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e5a38 <col:3> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e5ce8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e5cb8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55c2201e5bd8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55c2201e5af8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55c2201e5ab0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55c2201e5a98 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55c2201e5a58 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55c2201e5ae0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55c2201e5ac8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55c2201e5a78 <col:38> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55c2201e5bb8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55c2201e5b70 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55c2201e5b58 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55c2201e5b18 <col:56> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55c2201e5ba0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55c2201e5b88 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55c2201e5b38 <col:74> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e5c70 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e5c28 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e5bf8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e5ca0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e5c88 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e5c50 <col:102> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x55c2201e5d58 <line:735:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e5d40 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e5d20 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201e5db0 <line:736:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e5d98 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e5d78 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e5e68 <line:737:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55c2201e5dd0 <col:3> 'int' lvalue Var 0x55c2201e05e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55c2201e5e48 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55c2201e5e30 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e5df0 <col:22> 'int' lvalue Var 0x55c2201e05e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55c2201e5e10 <col:41> 'int' 1
|   |-CallExpr 0x55c2201e5ec0 <line:738:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e5ea8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e5e88 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55c2201e5f90 <line:739:3, col:36>
|     `-CallExpr 0x55c2201e5f70 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55c2201e5f30 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55c2201e5ee0 <col:10> 'void *(void)' Function 0x55c220186fc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55c2201e6188 prev 0x55c2201e0268 <line:741:1, line:787:1> line:741:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x55c2201e60f0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55c2201ea4a0 <line:742:1, line:787:1>
|   |-CallExpr 0x55c2201e6268 <line:743:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e6250 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e6230 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e62e0 <line:744:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55c2201e6288 <col:3> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x55c2201e62c8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e62a8 <col:15> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55c2201e6340 <line:745:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55c2201e6300 <col:3> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x55c2201e6320 <col:15> 'int' 2
|   |-BinaryOperator 0x55c2201e63b8 <line:746:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e6360 <col:3> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e63a0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e6380 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55c2201e6450 <line:747:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e63d8 <col:3> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x55c2201e6428 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55c2201e63f8 <col:27> 'int' 1
|   |-CallExpr 0x55c2201e65d8 <line:748:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x55c2201e65c0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55c2201e6470 <col:3> 'void (int)' Function 0x55c220187238 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x55c2201e6570 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x55c2201e6550 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x55c2201e6530 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x55c2201e64e8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x55c2201e64d0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55c2201e6490 <col:23> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x55c2201e6518 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x55c2201e6500 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x55c2201e64b0 <col:41> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55c2201e6658 <line:749:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e6600 <col:3> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e6640 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e6620 <col:20> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x55c2201e66d0 <line:750:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e6678 <col:3> '_Bool' lvalue Var 0x55c2201e0f20 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e66b8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e6698 <col:20> '_Bool' lvalue Var 0x55c2201e0d60 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55c2201e6748 <line:751:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e66f0 <col:3> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e6730 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e6710 <col:20> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55c2201e67e0 <line:752:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e6768 <col:3> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x55c2201e67b8 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55c2201e6788 <col:27> 'int' 1
|   |-CallExpr 0x55c2201e6838 <line:753:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e6820 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e6800 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201e6890 <line:754:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e6878 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e6858 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e68f0 <line:755:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55c2201e68b0 <col:3> 'int' lvalue Var 0x55c2201e1380 'y' 'int'
|   | `-IntegerLiteral 0x55c2201e68d0 <col:7> 'int' 1
|   |-CallExpr 0x55c2201e6948 <line:756:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e6930 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e6910 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201e69a0 <line:757:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e6988 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e6968 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e6a18 <line:758:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55c2201e69c0 <col:3> 'int' lvalue Var 0x55c2201e0828 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x55c2201e6a00 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e69e0 <col:25> 'int' lvalue Var 0x55c2201e1380 'y' 'int'
|   |-CallExpr 0x55c2201e6a70 <line:759:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e6a58 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e6a38 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201e6ac8 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e6ab0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e6a90 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e6b60 <line:761:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e6ae8 <col:3> '_Bool' lvalue Var 0x55c2201e1418 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x55c2201e6b40 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55c2201e6b28 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55c2201e6b08 <col:19> '_Bool (void)' Function 0x55c220186c80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55c2201e6bf8 <line:762:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e6b80 <col:3> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x55c2201e6bd8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55c2201e6bc0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55c2201e6ba0 <col:19> '_Bool (void)' Function 0x55c220186c80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55c2201e6c70 <line:763:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e6c18 <col:3> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e6c58 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e6c38 <col:21> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55c2201e6ce8 <line:764:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55c2201e6c90 <col:3> 'int' lvalue Var 0x55c2201e0c70 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55c2201e6cd0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e6cb0 <col:15> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e7148 <line:765:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55c2201e6d08 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   | `-ConditionalOperator 0x55c2201e7118 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55c2201e6f18 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55c2201e6e38 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55c2201e6d60 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55c2201e6d48 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55c2201e6d28 <col:8> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55c2201e6e18 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55c2201e6db0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55c2201e6d98 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55c2201e6d78 <col:27> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x55c2201e6e00 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55c2201e6de8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55c2201e6dc8 <col:46> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55c2201e6ef8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55c2201e6e90 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55c2201e6e78 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55c2201e6e58 <col:65> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x55c2201e6ee0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55c2201e6ec8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55c2201e6ea8 <col:84> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e7100 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e6f38 <col:101> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |   `-ParenExpr 0x55c2201e70e0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55c2201e70b0 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55c2201e7020 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55c2201e6fd8 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55c2201e6fc0 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55c2201e6f80 <col:106> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55c2201e7008 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55c2201e6ff0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55c2201e6fa0 <col:124> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e7080 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e7040 <col:141> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55c2201e7098 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e7060 <col:153> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55c2201e7658 <line:766:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55c2201e7168 <col:3> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x55c2201e7628 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55c2201e75f8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55c2201e75e0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55c2201e7188 <col:15> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e7610 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e71a8 <col:31> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55c2201e75c0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55c2201e7590 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55c2201e73b8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55c2201e72d8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55c2201e7200 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55c2201e71e8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55c2201e71c8 <col:45> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55c2201e72b8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55c2201e7250 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55c2201e7238 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55c2201e7218 <col:64> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x55c2201e72a0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55c2201e7288 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55c2201e7268 <col:83> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55c2201e7398 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55c2201e7330 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55c2201e7318 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55c2201e72f8 <col:102> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x55c2201e7380 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55c2201e7368 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55c2201e7348 <col:121> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e7578 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e73d8 <col:138> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x55c2201e7558 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55c2201e7528 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55c2201e7498 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55c2201e7450 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55c2201e7438 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55c2201e73f8 <col:151> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55c2201e7480 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55c2201e7468 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55c2201e7418 <col:169> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x55c2201e74f8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55c2201e74b8 <col:186> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55c2201e7510 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55c2201e74d8 <col:198> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55c2201e7b68 <line:767:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55c2201e7678 <col:3> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x55c2201e7b38 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55c2201e7b08 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55c2201e7af0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55c2201e7698 <col:15> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e7b20 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e76b8 <col:31> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x55c2201e7ad0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55c2201e7aa0 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55c2201e78c8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55c2201e77e8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55c2201e7710 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55c2201e76f8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55c2201e76d8 <col:45> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55c2201e77c8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55c2201e7760 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55c2201e7748 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55c2201e7728 <col:64> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x55c2201e77b0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55c2201e7798 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55c2201e7778 <col:83> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55c2201e78a8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55c2201e7840 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55c2201e7828 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55c2201e7808 <col:102> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x55c2201e7890 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55c2201e7878 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55c2201e7858 <col:121> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e7a88 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e78e8 <col:138> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x55c2201e7a68 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55c2201e7a38 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55c2201e79a8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55c2201e7960 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55c2201e7948 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55c2201e7908 <col:151> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55c2201e7990 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55c2201e7978 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55c2201e7928 <col:169> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x55c2201e7a08 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55c2201e79c8 <col:186> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55c2201e7a20 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55c2201e79e8 <col:198> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55c2201e8120 <line:768:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e7b88 <col:3> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e8108 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e80d8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55c2201e8090 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e8078 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e7ba8 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e80c0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e80a8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e7bc8 <col:36> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55c2201e8058 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55c2201e8028 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55c2201e7dd8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55c2201e7cf8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55c2201e7c20 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55c2201e7c08 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55c2201e7be8 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55c2201e7cd8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55c2201e7c70 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55c2201e7c58 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55c2201e7c38 <col:74> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55c2201e7cc0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55c2201e7ca8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55c2201e7c88 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55c2201e7db8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55c2201e7d50 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55c2201e7d38 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55c2201e7d18 <col:112> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55c2201e7da0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55c2201e7d88 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55c2201e7d68 <col:131> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55c2201e8010 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55c2201e7ff8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55c2201e7df8 <col:148> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55c2201e7fd8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55c2201e7fa8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55c2201e7eb8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55c2201e7e70 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55c2201e7e58 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55c2201e7e18 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55c2201e7ea0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55c2201e7e88 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55c2201e7e38 <col:184> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55c2201e7f50 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55c2201e7f08 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55c2201e7ed8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55c2201e7f90 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55c2201e7f68 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55c2201e7f30 <col:212> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55c2201e86e8 <line:769:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e8140 <col:3> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e86d0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e86a0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55c2201e8658 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e8640 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e8160 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e8688 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e8670 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e8180 <col:36> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55c2201e8620 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55c2201e85f0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55c2201e8390 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55c2201e82b0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55c2201e81d8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55c2201e81c0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55c2201e81a0 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55c2201e8290 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55c2201e8228 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55c2201e8210 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55c2201e81f0 <col:74> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55c2201e8278 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55c2201e8260 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55c2201e8240 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55c2201e8370 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55c2201e8308 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55c2201e82f0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55c2201e82d0 <col:112> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55c2201e8358 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55c2201e8340 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55c2201e8320 <col:131> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55c2201e85d8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55c2201e85c0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55c2201e83b0 <col:148> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55c2201e85a0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55c2201e8570 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55c2201e8470 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55c2201e8428 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55c2201e8410 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55c2201e83d0 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55c2201e8458 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55c2201e8440 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55c2201e83f0 <col:184> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55c2201e8540 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55c2201e84c0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55c2201e8490 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55c2201e8558 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55c2201e8518 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55c2201e84e8 <col:219> 'int' 0
|   |-BinaryOperator 0x55c2201e8c90 <line:770:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e8708 <col:3> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e8c78 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e8c48 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55c2201e8c00 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e8be8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e8728 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e8c30 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e8c18 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e8748 <col:36> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x55c2201e8bc8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55c2201e8b98 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55c2201e8958 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55c2201e8878 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55c2201e87a0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55c2201e8788 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55c2201e8768 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55c2201e8858 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55c2201e87f0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55c2201e87d8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55c2201e87b8 <col:74> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55c2201e8840 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55c2201e8828 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55c2201e8808 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55c2201e8938 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55c2201e88d0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55c2201e88b8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55c2201e8898 <col:112> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55c2201e8920 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55c2201e8908 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55c2201e88e8 <col:131> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55c2201e8b80 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55c2201e8b68 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55c2201e8978 <col:148> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x55c2201e8b48 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55c2201e8b18 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55c2201e8a38 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55c2201e89f0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55c2201e89d8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55c2201e8998 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55c2201e8a20 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55c2201e8a08 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55c2201e89b8 <col:184> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55c2201e8ad0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55c2201e8a88 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55c2201e8a58 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55c2201e8b00 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55c2201e8ae8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55c2201e8ab0 <col:212> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55c2201e9278 <line:771:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e8cb0 <col:3> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e9260 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e9230 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55c2201e91e8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e91d0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e8cd0 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e9218 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55c2201e9200 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55c2201e8cf0 <col:36> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x55c2201e91b0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55c2201e9180 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55c2201e8f00 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55c2201e8e20 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55c2201e8d48 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55c2201e8d30 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55c2201e8d10 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55c2201e8e00 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55c2201e8d98 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55c2201e8d80 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55c2201e8d60 <col:74> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55c2201e8de8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55c2201e8dd0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55c2201e8db0 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55c2201e8ee0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55c2201e8e78 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55c2201e8e60 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55c2201e8e40 <col:112> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55c2201e8ec8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55c2201e8eb0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55c2201e8e90 <col:131> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55c2201e9168 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55c2201e9150 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55c2201e8f20 <col:148> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x55c2201e9130 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55c2201e9100 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55c2201e9000 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55c2201e8fb8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55c2201e8fa0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55c2201e8f40 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55c2201e8fe8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55c2201e8fd0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55c2201e8f60 <col:184> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55c2201e90d0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55c2201e9050 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55c2201e9020 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55c2201e90e8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55c2201e90a8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55c2201e9078 <col:219> 'int' 0
|   |-BinaryOperator 0x55c2201e92f0 <line:772:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55c2201e9298 <col:3> 'int' lvalue Var 0x55c2201e0948 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x55c2201e92d8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c2201e92b8 <col:25> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e9420 <line:773:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55c2201e9310 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   | `-ConditionalOperator 0x55c2201e93f0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55c2201e93a8 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55c2201e9390 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55c2201e9330 <col:7> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e93c0 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e9350 <col:25> 'int' lvalue Var 0x55c2201e0c70 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55c2201e93d8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55c2201e9370 <col:37> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e94b8 <line:774:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e9440 <col:3> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55c2201e9490 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55c2201e9460 <col:28> 'int' 0
|   |-CallExpr 0x55c2201e9510 <line:775:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201e94f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e94d8 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201e9568 <line:776:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201e9550 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201e9530 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201e9850 <line:777:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55c2201e9588 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   | `-ConditionalOperator 0x55c2201e9820 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55c2201e9648 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55c2201e9600 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55c2201e95e8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55c2201e95a8 <col:7> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55c2201e9630 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55c2201e9618 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55c2201e95c8 <col:25> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55c2201e9808 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201e9668 <col:42> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55c2201e97e8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55c2201e97b8 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55c2201e9728 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55c2201e96e0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55c2201e96c8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55c2201e9688 <col:55> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55c2201e9710 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55c2201e96f8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55c2201e96a8 <col:73> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55c2201e9788 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55c2201e9748 <col:90> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55c2201e97a0 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e9768 <col:102> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
|   |-BinaryOperator 0x55c2201e9a58 <line:778:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e9870 <col:3> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e9a40 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e9a10 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55c2201e9930 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55c2201e98e8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55c2201e98d0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55c2201e9890 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55c2201e9918 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55c2201e9900 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55c2201e98b0 <col:38> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e99c8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e9980 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e9950 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e99f8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e99e0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e99a8 <col:66> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55c2201e9d40 <line:779:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e9a78 <col:3> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e9d28 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e9cf8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55c2201e9c18 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55c2201e9b38 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55c2201e9af0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55c2201e9ad8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55c2201e9a98 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55c2201e9b20 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55c2201e9b08 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55c2201e9ab8 <col:38> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55c2201e9bf8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55c2201e9bb0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55c2201e9b98 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55c2201e9b58 <col:56> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55c2201e9be0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55c2201e9bc8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55c2201e9b78 <col:74> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e9cb0 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e9c68 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e9c38 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e9ce0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e9cc8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e9c90 <col:102> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55c2201e9f48 <line:780:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e9d60 <col:3> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201e9f30 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201e9f00 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55c2201e9e20 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55c2201e9dd8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55c2201e9dc0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55c2201e9d80 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55c2201e9e08 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55c2201e9df0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55c2201e9da0 <col:38> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201e9eb8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201e9e70 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201e9e40 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201e9ee8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201e9ed0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201e9e98 <col:66> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55c2201ea258 <line:781:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55c2201e9f68 <col:3> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55c2201ea240 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55c2201ea210 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55c2201ea130 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55c2201ea050 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55c2201ea008 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55c2201e9ff0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55c2201e9fb0 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55c2201ea038 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55c2201ea020 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55c2201e9fd0 <col:38> '_Bool' lvalue Var 0x55c2201e0dd8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55c2201ea110 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55c2201ea0c8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55c2201ea0b0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55c2201ea070 <col:56> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55c2201ea0f8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55c2201ea0e0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55c2201ea090 <col:74> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55c2201ea1c8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55c2201ea180 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55c2201ea150 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55c2201ea1f8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55c2201ea1e0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55c2201ea1a8 <col:102> '_Bool' lvalue Var 0x55c2201e0f98 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x55c2201ea2b0 <line:782:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201ea298 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201ea278 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55c2201ea308 <line:783:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55c2201ea2f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201ea2d0 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55c2201ea3c0 <line:784:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55c2201ea328 <col:3> 'int' lvalue Var 0x55c2201e05e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55c2201ea3a0 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55c2201ea388 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c2201ea348 <col:22> 'int' lvalue Var 0x55c2201e05e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55c2201ea368 <col:41> 'int' 1
|   |-CallExpr 0x55c2201ea418 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55c2201ea400 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55c2201ea3e0 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55c2201ea490 <line:786:3, col:36>
|     `-CallExpr 0x55c2201ea470 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55c2201ea458 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55c2201ea438 <col:10> 'void *(void)' Function 0x55c220186fc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55c2201ea630 prev 0x55c2201e0330 <line:788:1, line:790:1> line:788:6 fence 'void ()'
| `-CompoundStmt 0x55c2201ea6d0 <line:789:1, line:790:1>
|-FunctionDecl 0x55c2201ea700 prev 0x55c2201e03f0 <line:791:1, line:793:1> line:791:6 isync 'void ()'
| `-CompoundStmt 0x55c2201ea7a0 <line:792:1, line:793:1>
|-FunctionDecl 0x55c2201ea7d0 prev 0x55c2201e04b0 <line:794:1, line:796:1> line:794:6 lwfence 'void ()'
| `-CompoundStmt 0x55c2201ea870 <line:795:1, line:796:1>
`-FunctionDecl 0x55c2201ea8d8 <line:797:1, line:832:1> line:797:5 main 'int ()'
  `-CompoundStmt 0x55c2201eec70 <line:798:1, line:832:1>
    |-DeclStmt 0x55c2201ea9f0 <line:799:3, col:18>
    | `-VarDecl 0x55c2201ea988 <col:3, col:13> col:13 used t1629 'pthread_t':'unsigned long'
    |-CallExpr 0x55c2201eabf8 <line:800:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55c2201eabe0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55c2201eaa08 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55c2201c79d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55c2201eaa48 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55c2201eaa28 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55c2201ea988 't1629' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55c2201eac38 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55c2201eaac0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55c2201eaa98 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55c2201eaa60 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55c2201eac50 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55c2201eaae0 <col:39> 'void *(void *)' Function 0x55c2201e15a8 'P0' 'void *(void *)'
    | `-ParenExpr 0x55c2201eab60 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55c2201eab38 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55c2201eab00 <col:52> 'int' 0
    |-DeclStmt 0x55c2201eace0 <line:801:3, col:18>
    | `-VarDecl 0x55c2201eac78 <col:3, col:13> col:13 used t1630 'pthread_t':'unsigned long'
    |-CallExpr 0x55c2201eae88 <line:802:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55c2201eae70 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55c2201eacf8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55c2201c79d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55c2201ead38 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55c2201ead18 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55c2201eac78 't1630' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55c2201eaec8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55c2201eadb0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55c2201ead88 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55c2201ead50 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55c2201eaee0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55c2201eadd0 <col:39> 'void *(void *)' Function 0x55c2201e6188 'P1' 'void *(void *)'
    | `-ParenExpr 0x55c2201eae50 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55c2201eae28 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55c2201eadf0 <col:52> 'int' 0
    |-CallExpr 0x55c2201eaf30 <line:803:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55c2201eaf18 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55c2201eaef8 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55c2201eb010 <line:804:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x55c2201eaf50 <col:3> '_Bool' lvalue Var 0x55c2201e09e0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x55c2201eaff8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x55c2201eafd8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x55c2201eafc0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x55c2201eaf70 <col:21> 'int' lvalue Var 0x55c2201e05e8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x55c2201eaf90 <col:41> 'int' 2
    |-CallExpr 0x55c2201eb068 <line:805:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55c2201eb050 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55c2201eb030 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55c2201eb0e0 <line:806:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55c2201eb0c8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55c2201eb088 <col:3> 'void (int)' Function 0x55c220186e50 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x55c2201eb120 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55c2201eb108 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55c2201eb0a8 <col:21> '_Bool' lvalue Var 0x55c2201e09e0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x55c2201eb170 <line:807:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55c2201eb158 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55c2201eb138 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55c2201eb458 <line:808:3, col:103> 'int' '='
    | |-DeclRefExpr 0x55c2201eb190 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
    | `-ConditionalOperator 0x55c2201eb428 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x55c2201eb250 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x55c2201eb208 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x55c2201eb1f0 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55c2201eb1b0 <col:7> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x55c2201eb238 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x55c2201eb220 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55c2201eb1d0 <col:25> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55c2201eb410 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55c2201eb270 <col:42> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
    |   `-ParenExpr 0x55c2201eb3f0 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x55c2201eb3c0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x55c2201eb330 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55c2201eb2e8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55c2201eb2d0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55c2201eb290 <col:55> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55c2201eb318 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55c2201eb300 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55c2201eb2b0 <col:73> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55c2201eb390 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55c2201eb350 <col:90> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x55c2201eb3a8 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55c2201eb370 <col:102> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
    |-BinaryOperator 0x55c2201eb660 <line:809:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55c2201eb478 <col:3> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55c2201eb648 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55c2201eb618 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55c2201eb538 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55c2201eb4f0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55c2201eb4d8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55c2201eb498 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55c2201eb520 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55c2201eb508 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55c2201eb4b8 <col:38> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55c2201eb5d0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55c2201eb588 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55c2201eb558 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55c2201eb600 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55c2201eb5e8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55c2201eb5b0 <col:66> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55c2201eb948 <line:810:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55c2201eb680 <col:3> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55c2201eb930 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55c2201eb900 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55c2201eb820 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55c2201eb740 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55c2201eb6f8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55c2201eb6e0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55c2201eb6a0 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55c2201eb728 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55c2201eb710 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55c2201eb6c0 <col:38> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55c2201eb800 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55c2201eb7b8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55c2201eb7a0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55c2201eb760 <col:56> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55c2201eb7e8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55c2201eb7d0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55c2201eb780 <col:74> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55c2201eb8b8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55c2201eb870 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55c2201eb840 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55c2201eb8e8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55c2201eb8d0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55c2201eb898 <col:102> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x55c2201ebb50 <line:811:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55c2201eb968 <col:3> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55c2201ebb38 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55c2201ebb08 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55c2201eba28 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55c2201eb9e0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55c2201eb9c8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55c2201eb988 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55c2201eba10 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55c2201eb9f8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55c2201eb9a8 <col:38> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55c2201ebac0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55c2201eba78 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55c2201eba48 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55c2201ebaf0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55c2201ebad8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55c2201ebaa0 <col:66> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55c2201ebe38 <line:812:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55c2201ebb70 <col:3> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55c2201ebe20 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55c2201ebdf0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55c2201ebd10 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55c2201ebc30 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55c2201ebbe8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55c2201ebbd0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55c2201ebb90 <col:20> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55c2201ebc18 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55c2201ebc00 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55c2201ebbb0 <col:38> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55c2201ebcf0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55c2201ebca8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55c2201ebc90 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55c2201ebc50 <col:56> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55c2201ebcd8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55c2201ebcc0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55c2201ebc70 <col:74> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55c2201ebda8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55c2201ebd60 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55c2201ebd30 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55c2201ebdd8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55c2201ebdc0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55c2201ebd88 <col:102> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x55c2201ebe90 <line:813:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55c2201ebe78 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55c2201ebe58 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55c2201ebee8 <line:814:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55c2201ebed0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55c2201ebeb0 <col:3> 'void ()' Function 0x55c2201874b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55c2201ebf80 <line:815:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x55c2201ebf08 <col:3> '_Bool' lvalue Var 0x55c2201e1418 'weak$$choice0' '_Bool'
    | `-CallExpr 0x55c2201ebf60 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x55c2201ebf48 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55c2201ebf28 <col:19> '_Bool (void)' Function 0x55c220186c80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x55c2201ec028 <line:816:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x55c2201ebfa0 <col:3> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
    | `-CallExpr 0x55c2201ec008 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x55c2201ebff0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55c2201ebfd0 <col:19> '_Bool (void)' Function 0x55c220186c80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x55c2201ec0a0 <line:817:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x55c2201ec048 <col:3> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x55c2201ec088 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x55c2201ec068 <col:21> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x55c2201ec118 <line:818:3, col:15> 'int' '='
    | |-DeclRefExpr 0x55c2201ec0c0 <col:3> 'int' lvalue Var 0x55c2201e0c70 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x55c2201ec100 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55c2201ec0e0 <col:15> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
    |-BinaryOperator 0x55c2201ec550 <line:819:3, col:162> 'int' '='
    | |-DeclRefExpr 0x55c2201ec138 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
    | `-ConditionalOperator 0x55c2201ec520 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x55c2201ec348 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x55c2201ec268 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x55c2201ec190 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x55c2201ec178 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x55c2201ec158 <col:8> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x55c2201ec248 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x55c2201ec1e0 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x55c2201ec1c8 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x55c2201ec1a8 <col:27> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x55c2201ec230 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x55c2201ec218 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x55c2201ec1f8 <col:46> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x55c2201ec328 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x55c2201ec2c0 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x55c2201ec2a8 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x55c2201ec288 <col:65> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x55c2201ec310 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x55c2201ec2f8 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55c2201ec2d8 <col:84> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55c2201ec508 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55c2201ec368 <col:101> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
    |   `-ParenExpr 0x55c2201ec4e8 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x55c2201ec4b8 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x55c2201ec428 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55c2201ec3e0 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55c2201ec3c8 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55c2201ec388 <col:106> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55c2201ec410 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55c2201ec3f8 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55c2201ec3a8 <col:124> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55c2201ec488 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55c2201ec448 <col:141> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x55c2201ec4a0 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55c2201ec468 <col:153> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
    |-BinaryOperator 0x55c2201eca60 <line:820:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55c2201ec570 <col:3> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x55c2201eca30 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55c2201eca00 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55c2201ec9e8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55c2201ec590 <col:15> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55c2201eca18 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55c2201ec5b0 <col:31> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
    |   `-ParenExpr 0x55c2201ec9c8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55c2201ec998 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55c2201ec7c0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55c2201ec6e0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55c2201ec608 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55c2201ec5f0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55c2201ec5d0 <col:45> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55c2201ec6c0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55c2201ec658 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55c2201ec640 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55c2201ec620 <col:64> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55c2201ec6a8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55c2201ec690 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55c2201ec670 <col:83> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55c2201ec7a0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55c2201ec738 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55c2201ec720 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55c2201ec700 <col:102> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55c2201ec788 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55c2201ec770 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55c2201ec750 <col:121> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55c2201ec980 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55c2201ec7e0 <col:138> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
    |       `-ParenExpr 0x55c2201ec960 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55c2201ec930 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55c2201ec8a0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55c2201ec858 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55c2201ec840 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55c2201ec800 <col:151> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55c2201ec888 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55c2201ec870 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55c2201ec820 <col:169> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55c2201ec900 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55c2201ec8c0 <col:186> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x55c2201ec918 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55c2201ec8e0 <col:198> 'int' lvalue Var 0x55c2201e1110 'x$w_buff0' 'int'
    |-BinaryOperator 0x55c2201ecf70 <line:821:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55c2201eca80 <col:3> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x55c2201ecf40 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55c2201ecf10 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55c2201ecef8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55c2201ecaa0 <col:15> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55c2201ecf28 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55c2201ecac0 <col:31> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
    |   `-ParenExpr 0x55c2201eced8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55c2201ecea8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55c2201eccd0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55c2201ecbf0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55c2201ecb18 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55c2201ecb00 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55c2201ecae0 <col:45> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55c2201ecbd0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55c2201ecb68 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55c2201ecb50 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55c2201ecb30 <col:64> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55c2201ecbb8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55c2201ecba0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55c2201ecb80 <col:83> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55c2201eccb0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55c2201ecc48 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55c2201ecc30 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55c2201ecc10 <col:102> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55c2201ecc98 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55c2201ecc80 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55c2201ecc60 <col:121> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55c2201ece90 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55c2201eccf0 <col:138> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
    |       `-ParenExpr 0x55c2201ece70 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55c2201ece40 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55c2201ecdb0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55c2201ecd68 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55c2201ecd50 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55c2201ecd10 <col:151> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55c2201ecd98 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55c2201ecd80 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55c2201ecd30 <col:169> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55c2201ece10 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55c2201ecdd0 <col:186> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x55c2201ece28 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55c2201ecdf0 <col:198> 'int' lvalue Var 0x55c2201e1208 'x$w_buff1' 'int'
    |-BinaryOperator 0x55c2201ed528 <line:822:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55c2201ecf90 <col:3> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55c2201ed510 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55c2201ed4e0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55c2201ed498 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55c2201ed480 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55c2201ecfb0 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55c2201ed4c8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55c2201ed4b0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55c2201ecfe0 <col:36> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x55c2201ed460 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55c2201ed430 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55c2201ed1f0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55c2201ed110 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55c2201ed038 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55c2201ed020 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55c2201ed000 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55c2201ed0f0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55c2201ed088 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55c2201ed070 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55c2201ed050 <col:74> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55c2201ed0d8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55c2201ed0c0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55c2201ed0a0 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55c2201ed1d0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55c2201ed168 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55c2201ed150 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55c2201ed130 <col:112> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55c2201ed1b8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55c2201ed1a0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55c2201ed180 <col:131> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55c2201ed418 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55c2201ed400 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55c2201ed210 <col:148> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x55c2201ed3e0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55c2201ed3b0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55c2201ed2d0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55c2201ed288 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55c2201ed270 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55c2201ed230 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55c2201ed2b8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55c2201ed2a0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55c2201ed250 <col:184> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55c2201ed368 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55c2201ed320 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55c2201ed2f0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55c2201ed398 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55c2201ed380 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55c2201ed348 <col:212> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55c2201edaf0 <line:823:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55c2201ed548 <col:3> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55c2201edad8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55c2201edaa8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55c2201eda60 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55c2201eda48 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55c2201ed568 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55c2201eda90 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55c2201eda78 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55c2201ed588 <col:36> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x55c2201eda28 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55c2201ed9f8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55c2201ed798 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55c2201ed6b8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55c2201ed5e0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55c2201ed5c8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55c2201ed5a8 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55c2201ed698 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55c2201ed630 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55c2201ed618 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55c2201ed5f8 <col:74> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55c2201ed680 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55c2201ed668 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55c2201ed648 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55c2201ed778 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55c2201ed710 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55c2201ed6f8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55c2201ed6d8 <col:112> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55c2201ed760 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55c2201ed748 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55c2201ed728 <col:131> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55c2201ed9e0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55c2201ed9c8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55c2201ed7b8 <col:148> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x55c2201ed9a8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55c2201ed978 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55c2201ed878 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55c2201ed830 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55c2201ed818 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55c2201ed7d8 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55c2201ed860 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55c2201ed848 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55c2201ed7f8 <col:184> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55c2201ed948 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55c2201ed8c8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55c2201ed898 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55c2201ed960 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55c2201ed920 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55c2201ed8f0 <col:219> 'int' 0
    |-BinaryOperator 0x55c2201ee0b8 <line:824:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55c2201edb10 <col:3> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55c2201ee0a0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55c2201ee070 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55c2201ee028 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55c2201ee010 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55c2201edb30 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55c2201ee058 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55c2201ee040 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55c2201edb50 <col:36> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x55c2201edff0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55c2201edfa0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55c2201edd60 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55c2201edc80 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55c2201edba8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55c2201edb90 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55c2201edb70 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55c2201edc60 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55c2201edbf8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55c2201edbe0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55c2201edbc0 <col:74> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55c2201edc48 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55c2201edc30 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55c2201edc10 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55c2201edd40 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55c2201edcd8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55c2201edcc0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55c2201edca0 <col:112> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55c2201edd28 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55c2201edd10 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55c2201edcf0 <col:131> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55c2201edf88 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55c2201edf70 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55c2201edd80 <col:148> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x55c2201edf50 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55c2201edf20 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55c2201ede40 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55c2201eddf8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55c2201edde0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55c2201edda0 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55c2201ede28 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55c2201ede10 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55c2201eddc0 <col:184> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55c2201eded8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55c2201ede90 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55c2201ede60 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55c2201edf08 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55c2201edef0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55c2201edeb8 <col:212> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55c2201ee680 <line:825:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55c2201ee0d8 <col:3> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55c2201ee668 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55c2201ee638 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55c2201ee5f0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55c2201ee5d8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55c2201ee0f8 <col:20> '_Bool' lvalue Var 0x55c2201e1490 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55c2201ee620 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55c2201ee608 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55c2201ee118 <col:36> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x55c2201ee5b8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55c2201ee588 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55c2201ee328 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55c2201ee248 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55c2201ee170 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55c2201ee158 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55c2201ee138 <col:55> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55c2201ee228 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55c2201ee1c0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55c2201ee1a8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55c2201ee188 <col:74> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55c2201ee210 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55c2201ee1f8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55c2201ee1d8 <col:93> '_Bool' lvalue Var 0x55c2201e1280 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55c2201ee308 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55c2201ee2a0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55c2201ee288 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55c2201ee268 <col:112> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55c2201ee2f0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55c2201ee2d8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55c2201ee2b8 <col:131> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55c2201ee570 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55c2201ee558 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55c2201ee348 <col:148> '_Bool' lvalue Var 0x55c2201e0e50 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x55c2201ee538 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55c2201ee508 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55c2201ee408 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55c2201ee3c0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55c2201ee3a8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55c2201ee368 <col:166> '_Bool' lvalue Var 0x55c2201e1188 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55c2201ee3f0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55c2201ee3d8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55c2201ee388 <col:184> '_Bool' lvalue Var 0x55c2201e0ce8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55c2201ee4d8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55c2201ee458 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55c2201ee428 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55c2201ee4f0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55c2201ee4b0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55c2201ee480 <col:219> 'int' 0
    |-BinaryOperator 0x55c2201ee950 <line:826:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x55c2201ee6a0 <col:3> '_Bool' lvalue Var 0x55c2201e0a58 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x55c2201ee938 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x55c2201ee920 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x55c2201ee900 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x55c2201ee8e0 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x55c2201ee848 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x55c2201ee7b0 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x55c2201ee718 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x55c2201ee700 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x55c2201ee6c0 <col:23> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
    |         | | | `-IntegerLiteral 0x55c2201ee6e0 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x55c2201ee790 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x55c2201ee778 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x55c2201ee738 <col:33> 'int' lvalue Var 0x55c2201e0708 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x55c2201ee758 <col:56> 'int' 1
    |         | `-BinaryOperator 0x55c2201ee828 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x55c2201ee810 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x55c2201ee7d0 <col:61> 'int' lvalue Var 0x55c2201e0828 '__unbuffered_p1_EAX' 'int'
    |         |   `-IntegerLiteral 0x55c2201ee7f0 <col:84> 'int' 1
    |         `-BinaryOperator 0x55c2201ee8c0 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x55c2201ee8a8 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55c2201ee868 <col:89> 'int' lvalue Var 0x55c2201e0948 '__unbuffered_p1_EBX' 'int'
    |           `-IntegerLiteral 0x55c2201ee888 <col:112> 'int' 0
    |-BinaryOperator 0x55c2201eea80 <line:827:3, col:37> 'int' '='
    | |-DeclRefExpr 0x55c2201ee970 <col:3> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
    | `-ConditionalOperator 0x55c2201eea50 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x55c2201eea08 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55c2201ee9f0 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55c2201ee990 <col:7> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x55c2201eea20 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55c2201ee9b0 <col:25> 'int' lvalue Var 0x55c2201e0c70 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x55c2201eea38 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x55c2201ee9d0 <col:37> 'int' lvalue Var 0x55c2201e0b58 'x' 'int'
    |-BinaryOperator 0x55c2201eeb18 <line:828:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x55c2201eeaa0 <col:3> '_Bool' lvalue Var 0x55c2201e0bf0 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x55c2201eeaf0 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x55c2201eeac0 <col:28> 'int' 0
    |-CallExpr 0x55c2201eeb70 <line:829:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55c2201eeb58 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55c2201eeb38 <col:3> 'void ()' Function 0x55c220187570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55c2201eebe8 <line:830:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55c2201eebd0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55c2201eeb90 <col:3> 'void (int)' Function 0x55c220187238 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x55c2201eec28 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55c2201eec10 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55c2201eebb0 <col:21> '_Bool' lvalue Var 0x55c2201e0a58 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x55c2201eec60 <line:831:3, col:10>
      `-IntegerLiteral 0x55c2201eec40 <col:10> 'int' 0
