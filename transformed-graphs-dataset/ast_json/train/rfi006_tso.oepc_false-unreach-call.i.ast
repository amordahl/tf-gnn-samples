TranslationUnitDecl 0x56142e012f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x56142e013848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x56142e013520 '__int128'
|-TypedefDecl 0x56142e0138b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x56142e013540 'unsigned __int128'
|-TypedefDecl 0x56142e013bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x56142e013990 'struct __NSConstantString_tag'
|   `-Record 0x56142e013910 '__NSConstantString_tag'
|-TypedefDecl 0x56142e013c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x56142e013c20 'char *'
|   `-BuiltinType 0x56142e013020 'char'
|-TypedefDecl 0x56142e052b60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x56142e013f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x56142e013d40 'struct __va_list_tag'
|     `-Record 0x56142e013cc0 '__va_list_tag'
|-FunctionDecl 0x56142e052ca0 <pthread-wmm/rfi006_tso.oepc_false-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x56142e052bd0 <col:31> col:34 'int'
|-FunctionDecl 0x56142e052e68 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x56142e052f90 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x56142e0530d8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x56142e053048 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x56142e053308 <col:40, col:99>
|   |-IfStmt 0x56142e0532d8 <col:42, col:88>
|   | |-UnaryOperator 0x56142e0531b8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x56142e0531a0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56142e053180 <col:47> 'int' lvalue ParmVar 0x56142e053048 'expression' 'int'
|   | `-CompoundStmt 0x56142e0532c0 <col:59, col:88>
|   |   `-LabelStmt 0x56142e0532a8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x56142e053238 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x56142e053220 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x56142e0531d0 <col:68> 'void () __attribute__((noreturn))' Function 0x56142e052f90 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x56142e0532f0 <col:89>
|   `-ReturnStmt 0x56142e0532f8 <col:91>
|-FunctionDecl 0x56142e053350 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x56142e053410 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x56142e053790 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56142e0534c8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x56142e053548 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x56142e0535c8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x56142e053648 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56142e053850 <line:10:22>
|-FunctionDecl 0x56142e0798a0 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56142e0538c0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x56142e053940 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x56142e0539c0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x56142e053a40 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56142e079960 <line:13:22>
|-FunctionDecl 0x56142e079c10 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56142e0799d0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x56142e079a50 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x56142e079ad0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x56142e079cc8 <line:15:22>
|-TypedefDecl 0x56142e079d38 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x56142e0130e0 'unsigned char'
|-TypedefDecl 0x56142e079da8 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x56142e013100 'unsigned short'
|-TypedefDecl 0x56142e079e18 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-TypedefDecl 0x56142e079e88 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e079ef8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x56142e013040 'signed char'
|-TypedefDecl 0x56142e079f68 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x56142e0130e0 'unsigned char'
|-TypedefDecl 0x56142e079fd8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x56142e013060 'short'
|-TypedefDecl 0x56142e07a048 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x56142e013100 'unsigned short'
|-TypedefDecl 0x56142e07a0b8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x56142e013080 'int'
|-TypedefDecl 0x56142e07a128 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-TypedefDecl 0x56142e07a198 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07a208 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07a278 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07a2e8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07a358 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07a3c8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-TypedefDecl 0x56142e07a438 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-TypedefDecl 0x56142e07a4a8 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07a518 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07a588 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-TypedefDecl 0x56142e07a5f8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07a668 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07a6d8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07a748 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x56142e013080 'int'
|-RecordDecl 0x56142e07a7a0 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x56142e07a918 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x56142e07a9d0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x56142e07a970 'struct __fsid_t' sugar
|   `-RecordType 0x56142e07a820 '__fsid_t'
|     `-Record 0x56142e07a7a0 ''
|-TypedefDecl 0x56142e07aa58 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07aac8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07ab38 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07aba8 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-TypedefDecl 0x56142e07ac18 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07ac88 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-TypedefDecl 0x56142e07acf8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07ad68 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x56142e013080 'int'
|-TypedefDecl 0x56142e07add8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x56142e013080 'int'
|-TypedefDecl 0x56142e07ae48 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x56142e013080 'int'
|-TypedefDecl 0x56142e07aeb8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x56142e0137a0 'void *'
|   `-BuiltinType 0x56142e012fe0 'void'
|-TypedefDecl 0x56142e07af28 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07af98 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07b008 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07b078 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07b0e8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07b158 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07b1c8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07b238 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07b2a8 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07b318 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07b388 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07b418 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x56142e07b3e0 '__off64_t' sugar
|   |-Typedef 0x56142e07a6d8 '__off64_t'
|   `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07b510 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x56142e07b4d0 '__quad_t *'
|   `-TypedefType 0x56142e07b470 '__quad_t' sugar
|     |-Typedef 0x56142e07a278 '__quad_t'
|     `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07b580 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x56142e013c20 'char *'
|   `-BuiltinType 0x56142e013020 'char'
|-TypedefDecl 0x56142e07b5f0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e07b660 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-FunctionDecl 0x56142e07b7a8 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x56142e07b6d0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x56142e07bae8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x56142e07bad8 <line:72:3, col:34>
|     `-CallExpr 0x56142e07ba98 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x56142e07ba80 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56142e07ba10 <col:10> '<builtin fn type>' Function 0x56142e07b880 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x56142e07bac0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56142e07ba30 <col:29> 'unsigned int' lvalue ParmVar 0x56142e07b6d0 '__bsx' 'unsigned int'
|-FunctionDecl 0x56142e07b880 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x56142e07b920 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x56142e07b990 <col:10> Implicit
| `-ConstAttr 0x56142e07b9e8 <col:10> Implicit
|-FunctionDecl 0x56142e07bc40 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x56142e07bb38 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x56142e07bf58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x56142e07bf48 <line:77:3, col:34>
|     `-CallExpr 0x56142e07bf08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x56142e07bef0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56142e07be78 <col:10> '<builtin fn type>' Function 0x56142e07bce8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x56142e07bf30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x56142e07be98 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x56142e07bb38 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x56142e07bce8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x56142e07bd88 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x56142e07bdf8 <col:10> Implicit
| `-ConstAttr 0x56142e07be50 <col:10> Implicit
|-TypedefDecl 0x56142e07bf88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-TypedefDecl 0x56142e07c018 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x56142e07bfe0 '__time_t' sugar
|   |-Typedef 0x56142e07ac18 '__time_t'
|   `-BuiltinType 0x56142e0130a0 'long'
|-RecordDecl 0x56142e07c070 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x56142e07c128 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x56142e07c1b8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x56142e07c248 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x56142e07c210 '__pid_t' sugar
|   |-Typedef 0x56142e07a748 '__pid_t'
|   `-BuiltinType 0x56142e013080 'int'
|-RecordDecl 0x56142e07c2a0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x56142e07c360 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x56142e07c3b0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x56142e07c470 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x56142e07c4d8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-RecordDecl 0x56142e07c530 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x56142e07c7c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x56142e07e8b0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x56142e07c810 'struct cpu_set_t' sugar
|   `-RecordType 0x56142e07c5b0 'cpu_set_t'
|     `-Record 0x56142e07c530 ''
|-FunctionDecl 0x56142e07eb88 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x56142e07e958 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56142e07ea60 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x56142e07ec38 <line:107:19>
|-FunctionDecl 0x56142e07ee10 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x56142e07eca0 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x56142e07eeb8 <col:69>
|-FunctionDecl 0x56142e07f030 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x56142e07ef20 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x56142e07f0d8 <col:64>
|-FunctionDecl 0x56142e07f398 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x56142e07f140 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56142e07f278 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x56142e07f448 <line:113:22>
|-FunctionDecl 0x56142e07f6c8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x56142e07f4b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56142e07f5a8 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x56142e07f778 <col:88>
|-FunctionDecl 0x56142e07fa98 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x56142e07f7e0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56142e07f8c0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x56142e07f950 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x56142e07fb50 <col:62>
|-FunctionDecl 0x56142e07fcc8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x56142e07fbb8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x56142e07fd70 <col:63>
|-FunctionDecl 0x56142e07fe98 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x56142e07ff38 <col:47>
|-FunctionDecl 0x56142e080040 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x56142e07ffa8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x56142e0800e8 <col:69>
|-FunctionDecl 0x56142e0801f0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x56142e080158 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x56142e080298 <col:69>
|-FunctionDecl 0x56142e080558 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56142e080300 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56142e080438 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x56142e080608 <col:88>
|-TypedefDecl 0x56142e080698 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x56142e080660 '__clock_t' sugar
|   |-Typedef 0x56142e07aa58 '__clock_t'
|   `-BuiltinType 0x56142e0130a0 'long'
|-TypedefDecl 0x56142e080728 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x56142e0806f0 '__clockid_t' sugar
|   |-Typedef 0x56142e07ae48 '__clockid_t'
|   `-BuiltinType 0x56142e013080 'int'
|-TypedefDecl 0x56142e0807b8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x56142e080780 '__timer_t' sugar
|   |-Typedef 0x56142e07aeb8 '__timer_t'
|   `-PointerType 0x56142e0137a0 'void *'
|     `-BuiltinType 0x56142e012fe0 'void'
|-RecordDecl 0x56142e080810 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x56142e0808e8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x56142e080950 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x56142e0809b8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x56142e080a20 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x56142e080a88 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x56142e080af0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x56142e080b58 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x56142e080bc0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x56142e080c28 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x56142e080c90 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x56142e080cf8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x56142e080d48 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x56142e080e18 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x56142e080e88 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x56142e080f30 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x56142e081100 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x56142e0811a0 <col:45>
|-FunctionDecl 0x56142e081380 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x56142e081270 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x56142e081428 <col:54>
|-FunctionDecl 0x56142e081628 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x56142e081490 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x56142e081508 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x56142e0816d8 <line:157:22>
| `-ConstAttr 0x56142e081730 <col:63>
|-FunctionDecl 0x56142e082560 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56142e081828 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x56142e082608 <col:56>
|-FunctionDecl 0x56142e0829b0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x56142e082678 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x56142e0826f0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56142e082770 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x56142e082868 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x56142e082a70 <col:54>
|-RecordDecl 0x56142e082ac8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x56142e082b78 parent 0x56142e012f88 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x56142e082dd8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x56142e082e78 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x56142e082ee0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x56142e082f48 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x56142e083038 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x56142e083158 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x56142e083100 'struct __locale_struct *'
|   `-ElaboratedType 0x56142e083090 'struct __locale_struct' sugar
|     `-RecordType 0x56142e082b50 'struct __locale_struct'
|       `-Record 0x56142e082ac8 '__locale_struct'
|-TypedefDecl 0x56142e083208 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x56142e0831d0 '__locale_t' sugar
|   |-Typedef 0x56142e083158 '__locale_t'
|   `-PointerType 0x56142e083100 'struct __locale_struct *'
|     `-ElaboratedType 0x56142e083090 'struct __locale_struct' sugar
|       `-RecordType 0x56142e082b50 'struct __locale_struct'
|         `-Record 0x56142e082ac8 '__locale_struct'
|-FunctionDecl 0x56142e083610 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x56142e083278 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x56142e0832f0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56142e083370 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x56142e083400 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x56142e083478 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x56142e0836d8 <col:40>
|-FunctionDecl 0x56142e0838c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x56142e0837a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x56142e083970 <col:66>
|-FunctionDecl 0x56142e083a80 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x56142e0839d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x56142e083b28 <col:69>
|-FunctionDecl 0x56142e083d58 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x56142e083b90 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56142e083c20 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x56142e083e08 <col:52>
|-FunctionDecl 0x56142e083fb0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x56142e083e70 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56142e083f00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x56142e084060 <col:55>
|-FunctionDecl 0x56142e0841f8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x56142e0840e0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x56142e0842a0 <col:62>
|-FunctionDecl 0x56142e084418 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x56142e084308 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x56142e0844c0 <col:60>
|-FunctionDecl 0x56142e084718 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x56142e084578 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x56142e0845f8 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x56142e0847c8 <col:44>
|-FunctionDecl 0x56142e0849d8 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x56142e084830 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56142e0848b0 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x56142e084a88 <col:49>
|-VarDecl 0x56142e084b88 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x56142e084c08 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x56142e084c88 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x56142e084d50 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x56142e084e80 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x56142e084f20 <col:42>
|-VarDecl 0x56142e084f90 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x56142e085010 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x56142e085198 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x56142e085088 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x56142e085240 <col:57>
|-FunctionDecl 0x56142e085350 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56142e0852c0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x56142e0853f8 <col:56>
|-FunctionDecl 0x56142e086540 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56142e085478 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x56142e0865e8 <col:59>
|-FunctionDecl 0x56142e0866f0 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x56142e086658 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x56142e086798 <col:48>
| `-ConstAttr 0x56142e0867f0 <col:89>
|-FunctionDecl 0x56142e086a58 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x56142e0868a8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x56142e086938 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x56142e086cb8 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56142e086b48 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56142e086bd8 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x56142e086d68 <col:88>
|-FunctionDecl 0x56142e086f00 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56142e086dd0 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56142e086e60 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x56142e086fb0 <col:88>
|-FunctionDecl 0x56142e0871c8 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x56142e087018 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56142e0870a8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x56142e087278 <line:208:22>
|-FunctionDecl 0x56142e0875e8 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x56142e0872e0 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56142e087360 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x56142e0873f0 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x56142e087480 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x56142e0878e8 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x56142e0876e8 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x56142e0877c0 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x56142e087998 <col:85>
|-FunctionDecl 0x56142e087d88 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x56142e087a00 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56142e087b38 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x56142e087c40 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x56142e087e40 <col:52>
|-FunctionDecl 0x56142e087fb8 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x56142e087ea8 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56142e088060 <col:61>
|-FunctionDecl 0x56142e088560 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x56142e0880c8 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56142e088148 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x56142e088278 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x56142e088368 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x56142e088620 <col:62>
|-FunctionDecl 0x56142e088838 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x56142e088688 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56142e088718 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x56142e0888e8 <line:221:22>
|-FunctionDecl 0x56142e0889e8 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x56142e088950 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56142e088a90 <col:65>
|-TypedefDecl 0x56142e088b00 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x56142e013140 'unsigned long'
|-RecordDecl 0x56142e088b58 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x56142e088ca0 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56142e088d08 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56142e088db8 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x56142e088d60 'union pthread_attr_t' sugar
|   `-RecordType 0x56142e088be0 'union pthread_attr_t'
|     `-Record 0x56142e088b58 'pthread_attr_t'
|-RecordDecl 0x56142e088e10 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x56142e088f88 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x56142e089000 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x56142e0890b0 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x56142e089050 'struct __pthread_internal_list' sugar
|   `-RecordType 0x56142e088e90 'struct __pthread_internal_list'
|     `-Record 0x56142e088e10 '__pthread_internal_list'
|-RecordDecl 0x56142e089120 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x56142e0891c8 parent 0x56142e012f88 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x56142e0892a0 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56142e089308 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x56142e089370 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x56142e0893d8 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x56142e089440 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x56142e0894a8 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x56142e08d580 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x56142e08d630 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x56142e08d720 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x56142e08d788 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56142e08d910 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x56142e08d8b0 'union pthread_mutex_t' sugar
|   `-RecordType 0x56142e0891a0 'pthread_mutex_t'
|     `-Record 0x56142e089120 ''
|-RecordDecl 0x56142e08d980 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x56142e08dac0 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56142e08db28 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56142e08dbe0 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x56142e08db80 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x56142e08da00 'pthread_mutexattr_t'
|     `-Record 0x56142e08d980 ''
|-RecordDecl 0x56142e08dc50 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x56142e08dcf8 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x56142e08ddc0 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56142e08de28 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x56142e08de90 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x56142e08def8 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x56142e08df60 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x56142e08dfc8 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x56142e08e030 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x56142e08e098 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x56142e08e150 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at pthread-wmm/rfi006_tso.oepc_false-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/rfi006_tso.oepc_false-unreach-call.i:258:3)'
| |-FieldDecl 0x56142e08e240 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x56142e08e2a8 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x56142e08e3e0 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x56142e08e380 'union pthread_cond_t' sugar
|   `-RecordType 0x56142e08dcd0 'pthread_cond_t'
|     `-Record 0x56142e08dc50 ''
|-RecordDecl 0x56142e08e450 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x56142e08e590 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56142e08e5f8 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56142e08e6b0 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x56142e08e650 'union pthread_condattr_t' sugar
|   `-RecordType 0x56142e08e4d0 'pthread_condattr_t'
|     `-Record 0x56142e08e450 ''
|-TypedefDecl 0x56142e08e738 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x56142e013120 'unsigned int'
|-TypedefDecl 0x56142e08e7a8 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x56142e013080 'int'
|-RecordDecl 0x56142e08e800 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x56142e08e8a8 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x56142e08e970 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56142e08e9d8 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x56142e08ea40 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x56142e08eaa8 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x56142e08eb10 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x56142e08eb78 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x56142e08ebe0 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x56142e08ec48 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x56142e08ecb0 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x56142e08ed18 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x56142e08ed80 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x56142e08ee30 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at pthread-wmm/rfi006_tso.oepc_false-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/rfi006_tso.oepc_false-unreach-call.i:281:3)'
| |-FieldDecl 0x56142e08eed8 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56142e08ef40 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56142e08f090 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x56142e08f030 'union pthread_rwlock_t' sugar
|   `-RecordType 0x56142e08e880 'pthread_rwlock_t'
|     `-Record 0x56142e08e800 ''
|-RecordDecl 0x56142e08f100 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x56142e08f240 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x56142e08f2a8 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56142e08f360 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x56142e08f300 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x56142e08f180 'pthread_rwlockattr_t'
|     `-Record 0x56142e08f100 ''
|-TypedefDecl 0x56142e08f3e8 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x56142e013084 'volatile int' volatile
|   `-BuiltinType 0x56142e013080 'int'
|-RecordDecl 0x56142e08f440 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x56142e0915b0 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x56142e091618 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56142e0916d0 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x56142e091670 'union pthread_barrier_t' sugar
|   `-RecordType 0x56142e08f4c0 'pthread_barrier_t'
|     `-Record 0x56142e08f440 ''
|-RecordDecl 0x56142e091740 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x56142e091840 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56142e0918a8 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56142e091960 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x56142e091900 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x56142e0917c0 'pthread_barrierattr_t'
|     `-Record 0x56142e091740 ''
|-TypedefDecl 0x56142e091a78 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x56142e091a10 'long [8]' 8 
|   `-BuiltinType 0x56142e0130a0 'long'
|-EnumDecl 0x56142e091ad0 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x56142e091b98 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x56142e091be8 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x56142e091c38 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x56142e091d08 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x56142e091d58 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x56142e091da8 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x56142e091df8 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x56142e091e80 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x56142e091e68 <col:26> 'int'
| |   `-DeclRefExpr 0x56142e091e48 <col:26> 'int' EnumConstant 0x56142e091d08 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x56142e091f08 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x56142e091ef0 <col:29> 'int'
| |   `-DeclRefExpr 0x56142e091ed0 <col:29> 'int' EnumConstant 0x56142e091d58 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x56142e091f90 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x56142e091f78 <col:30> 'int'
| |   `-DeclRefExpr 0x56142e091f58 <col:30> 'int' EnumConstant 0x56142e091da8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x56142e092018 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x56142e092000 <col:27> 'int'
|     `-DeclRefExpr 0x56142e091fe0 <col:27> 'int' EnumConstant 0x56142e091e80 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x56142e092068 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x56142e092138 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x56142e0921c0 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x56142e0921a8 <col:30> 'int'
| |   `-DeclRefExpr 0x56142e092188 <col:30> 'int' EnumConstant 0x56142e092138 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x56142e092210 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x56142e092298 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x56142e092280 <col:29> 'int'
|     `-DeclRefExpr 0x56142e092260 <col:29> 'int' EnumConstant 0x56142e092210 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x56142e0922e8 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x56142e0923b8 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x56142e092408 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x56142e092458 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x56142e0924a8 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x56142e0925c0 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x56142e092610 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x56142e092660 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x56142e0926e8 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x56142e0926d0 <col:31> 'int'
|     `-DeclRefExpr 0x56142e0926b0 <col:31> 'int' EnumConstant 0x56142e0925c0 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x56142e092738 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x56142e092808 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x56142e092858 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x56142e0928a8 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x56142e092978 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x56142e0929c8 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x56142e092a18 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x56142e092ae8 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x56142e092b38 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x56142e092b88 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x56142e092dc8 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x56142e092e30 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x56142e092e98 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x56142e092fb8 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x56142e093008 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x56142e0930d8 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x56142e093128 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x56142e093178 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x56142e093248 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x56142e093298 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x56142e0938f8 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x56142e093390 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x56142e0934a0 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e0936e0 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x56142e093760 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x56142e0939b8 <col:47>
| |-NonNullAttr 0x56142e093a10 <col:77, col:94> 1 3
| `-CallbackAttr 0x56142e093a48 <line:385:12> Implicit 2 3
|-FunctionDecl 0x56142e093b70 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x56142e093aa0 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x56142e093dc8 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x56142e093c28 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x56142e093ca8 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x56142e093f98 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x56142e093e88 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x56142e094040 <col:60>
|-FunctionDecl 0x56142e094190 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x56142e094230 <col:54>
| `-ConstAttr 0x56142e094288 <col:95>
|-FunctionDecl 0x56142e094458 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x56142e0942c0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56142e094338 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x56142e094508 <line:394:19>
| `-ConstAttr 0x56142e094560 <col:60>
|-FunctionDecl 0x56142e094f68 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x56142e094e30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x56142e095010 <col:71>
| `-NonNullAttr 0x56142e095068 <col:112, col:126> 1
|-FunctionDecl 0x56142e095170 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x56142e0950b8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x56142e095218 <line:397:22>
| `-NonNullAttr 0x56142e095270 <col:63, col:77> 1
|-FunctionDecl 0x56142e095498 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x56142e0952b8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x56142e095338 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x56142e095548 <line:400:22>
| `-NonNullAttr 0x56142e0955a0 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0957a8 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56142e0955e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56142e095668 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x56142e095858 <line:403:22>
| `-NonNullAttr 0x56142e0958b0 <col:63, col:77> 1
|-FunctionDecl 0x56142e095b08 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x56142e0958f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x56142e0959a0 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x56142e095bb8 <line:406:22>
| `-NonNullAttr 0x56142e095c10 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e096e48 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x56142e095c58 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56142e095cd0 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56142e096ef8 <line:409:22>
| `-NonNullAttr 0x56142e096f50 <col:63, col:77> 1
|-FunctionDecl 0x56142e097188 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56142e096f98 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e097028 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x56142e097238 <line:412:22>
| `-NonNullAttr 0x56142e097290 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0974c8 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56142e0972d8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e097368 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x56142e097578 <col:37>
| `-NonNullAttr 0x56142e0975d0 <col:78, col:95> 1 2
|-FunctionDecl 0x56142e0977b8 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e097618 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e097698 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x56142e097868 <line:418:22>
| `-NonNullAttr 0x56142e0978c0 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e097a48 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56142e097908 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56142e097988 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x56142e097af8 <line:420:22>
| `-NonNullAttr 0x56142e097b50 <col:63, col:77> 1
|-FunctionDecl 0x56142e097cf8 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e097b98 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e097c18 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x56142e097da8 <line:423:22>
| `-NonNullAttr 0x56142e098e30 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e098fb8 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56142e098e78 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56142e098ef8 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x56142e099068 <line:426:22>
| `-NonNullAttr 0x56142e0990c0 <col:63, col:77> 1
|-FunctionDecl 0x56142e099268 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e099108 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e099188 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x56142e099318 <line:429:22>
| `-NonNullAttr 0x56142e099370 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0994f8 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56142e0993b8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56142e099438 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x56142e0995a8 <line:431:22>
| `-NonNullAttr 0x56142e099600 <col:63, col:77> 1
|-FunctionDecl 0x56142e099828 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x56142e099648 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e0996c8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x56142e0998d8 <line:434:22>
| |-NonNullAttr 0x56142e099930 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x56142e099968 <col:100> "" ""
|-FunctionDecl 0x56142e099b78 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x56142e0999b8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56142e099a38 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x56142e099c28 <line:437:22>
| |-NonNullAttr 0x56142e099c80 <col:63, col:77> 1
| `-DeprecatedAttr 0x56142e099cb8 <col:97> "" ""
|-FunctionDecl 0x56142e099eb8 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x56142e099d08 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e099d80 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x56142e099f68 <line:440:22>
| `-NonNullAttr 0x56142e099fc0 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e09a140 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x56142e09a008 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56142e09a080 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56142e09a1f0 <line:443:22>
| `-NonNullAttr 0x56142e09a248 <col:63, col:77> 1
|-FunctionDecl 0x56142e09a538 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x56142e09a298 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56142e09a318 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x56142e09a390 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x56142e09a5f0 <line:447:22>
| `-NonNullAttr 0x56142e09a648 <col:63, col:83> 1 2 3
|-FunctionDecl 0x56142e09a8f8 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x56142e09a6a0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56142e09a720 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x56142e09a798 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56142e09a9b0 <col:43>
| `-NonNullAttr 0x56142e09aa08 <col:84, col:98> 1
|-FunctionDecl 0x56142e09acc8 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x56142e09aa58 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56142e09aad8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x56142e09ab68 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x56142e09ad80 <line:452:22>
| `-NonNullAttr 0x56142e09add8 <col:63, col:77> 3
|-FunctionDecl 0x56142e09b0e8 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56142e09ae50 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56142e09aed0 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x56142e09af60 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x56142e09b1a0 <line:456:22>
| `-NonNullAttr 0x56142e09b1f8 <col:63, col:80> 2 3
|-FunctionDecl 0x56142e09b3e8 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x56142e09b248 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56142e09b2c8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x56142e09b498 <line:458:22>
|-FunctionDecl 0x56142e09b868 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x56142e09b560 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x56142e09b700 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x56142e09b918 <col:52, col:69> 1 2
|-FunctionDecl 0x56142e09bac0 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x56142e09b9a0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x56142e09ba20 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x56142e09bca8 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x56142e09bb88 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x56142e09bc08 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x56142e09be60 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x56142e09bd68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x56142e09bfa0 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x56142e09c040 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x56142e09c0e8 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x56142e09c1d8 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x56142e09c240 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x56142e09c410 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/rfi006_tso.oepc_false-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x56142e09c508 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x56142e09c5c0 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x56142e09c560 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x56142e09c0c0 '__pthread_unwind_buf_t'
| |   `-Record 0x56142e09c040 ''
| `-AlignedAttr 0x56142e09c618 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x56142e09c690 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x56142e09c7f0 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x56142e09c858 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x56142e09c8c0 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x56142e09c928 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x56142e09cb30 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x56142e09ca20 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x56142e09cc78 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x56142e09cbe8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x56142e09ce70 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56142e09cd30 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x56142e09cf18 <line:487:22>
|-RecordDecl 0x56142e09cf70 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x56142e09d288 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x56142e09d0e8 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x56142e09d168 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x56142e09d338 <col:86>
| `-ReturnsTwiceAttr 0x56142e09d390 <col:12> Implicit
|-FunctionDecl 0x56142e09d6b8 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56142e09d460 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x56142e09d570 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x56142e09d768 <line:493:22>
| `-NonNullAttr 0x56142e09d7c0 <col:63, col:77> 1
|-FunctionDecl 0x56142e09d938 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56142e09d808 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56142e09d9e0 <line:495:22>
| `-NonNullAttr 0x56142e09da38 <col:63, col:77> 1
|-FunctionDecl 0x56142e09db40 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56142e09da88 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56142e09dbe8 <line:497:22>
| `-NonNullAttr 0x56142e09dc40 <col:52, col:66> 1
|-FunctionDecl 0x56142e09dd40 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56142e09dc88 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56142e09dde8 <line:499:22>
| `-NonNullAttr 0x56142e09de40 <col:52, col:66> 1
|-FunctionDecl 0x56142e09e088 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56142e09de98 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56142e09df28 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56142e09e138 <col:36>
| `-NonNullAttr 0x56142e09e190 <col:66, col:83> 1 2
|-FunctionDecl 0x56142e09e290 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56142e09e1d8 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56142e09e338 <line:504:22>
| `-NonNullAttr 0x56142e09e390 <col:52, col:66> 1
|-FunctionDecl 0x56142e09e628 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e09e440 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56142e09e4c0 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x56142e09e6d8 <line:508:22>
| `-NonNullAttr 0x56142e09e730 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e09e9f8 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x56142e09e778 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56142e09e7f8 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x56142e09e878 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x56142e09eab0 <line:512:22>
| `-NonNullAttr 0x56142e09eb08 <col:63, col:80> 1 3
|-FunctionDecl 0x56142e09ec10 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56142e09eb58 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56142e09ecb8 <line:514:22>
| `-NonNullAttr 0x56142e09ed10 <col:63, col:77> 1
|-FunctionDecl 0x56142e09ef38 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56142e09edc0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x56142e09efe0 <line:516:22>
| `-NonNullAttr 0x56142e09f038 <col:63, col:77> 1
|-FunctionDecl 0x56142e09f140 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56142e09f088 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x56142e09f1e8 <line:518:22>
| `-NonNullAttr 0x56142e09f240 <col:63, col:77> 1
|-FunctionDecl 0x56142e09f468 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e09f288 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56142e09f308 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x56142e09f518 <line:522:22>
| `-NonNullAttr 0x56142e09f570 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e09f778 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56142e09f5b8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56142e09f638 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x56142e09f828 <line:525:22>
| `-NonNullAttr 0x56142e09f880 <col:63, col:77> 1
|-FunctionDecl 0x56142e09fa28 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e09f8c8 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56142e09f948 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x56142e09fad8 <line:528:22>
| `-NonNullAttr 0x56142e09fb30 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e09fcb8 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56142e09fb78 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56142e09fbf8 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x56142e09fd68 <line:530:22>
| `-NonNullAttr 0x56142e09fdc0 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a0f90 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e09fe08 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56142e0a0eb0 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x56142e0a1040 <line:534:22>
| `-NonNullAttr 0x56142e0a1098 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0a1228 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56142e0a10e8 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56142e0a1168 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x56142e0a12d8 <line:537:22>
| `-NonNullAttr 0x56142e0a1330 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a14d8 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e0a1378 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56142e0a13f8 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x56142e0a1588 <line:541:22>
| `-NonNullAttr 0x56142e0a15e0 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0a1768 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56142e0a1628 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56142e0a16a8 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x56142e0a1818 <line:544:22>
| `-NonNullAttr 0x56142e0a1870 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a1a58 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x56142e0a18b8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x56142e0a1938 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x56142e0a1b08 <line:547:22>
| `-NonNullAttr 0x56142e0a1b60 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0a1ce8 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56142e0a1ba8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56142e0a1c28 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x56142e0a1d98 <line:550:22>
| `-NonNullAttr 0x56142e0a1df0 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a3168 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x56142e0a2f10 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56142e0a3020 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x56142e0a3218 <col:29>
| `-NonNullAttr 0x56142e0a3270 <col:70, col:84> 1
|-FunctionDecl 0x56142e0a33e8 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56142e0a32b8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56142e0a3490 <line:555:22>
| `-NonNullAttr 0x56142e0a34e8 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a35f0 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56142e0a3538 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56142e0a3698 <line:557:22>
| `-NonNullAttr 0x56142e0a36f0 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a37f0 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56142e0a3738 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56142e0a3898 <line:559:19>
| `-NonNullAttr 0x56142e0a38f0 <col:49, col:63> 1
|-FunctionDecl 0x56142e0a3b28 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56142e0a3938 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56142e0a39c8 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56142e0a3bd8 <col:39>
| `-NonNullAttr 0x56142e0a3c30 <col:69, col:86> 1 2
|-FunctionDecl 0x56142e0a3d30 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56142e0a3c78 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56142e0a3dd8 <line:564:22>
| `-NonNullAttr 0x56142e0a3e30 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a3f98 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56142e0a3ee0 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56142e0a4040 <line:566:22>
| `-NonNullAttr 0x56142e0a4098 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a4258 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56142e0a40e8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56142e0a4178 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56142e0a4308 <col:39>
| `-NonNullAttr 0x56142e0a4360 <col:69, col:86> 1 2
|-FunctionDecl 0x56142e0a4460 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56142e0a43a8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56142e0a4508 <line:571:22>
| `-NonNullAttr 0x56142e0a4560 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a4748 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x56142e0a4610 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x56142e0a47f0 <line:573:22>
| `-NonNullAttr 0x56142e0a4848 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a4950 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x56142e0a4898 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x56142e0a49f8 <line:575:22>
| `-NonNullAttr 0x56142e0a4a50 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a4c78 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e0a4a98 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x56142e0a4b18 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x56142e0a4d28 <line:579:22>
| `-NonNullAttr 0x56142e0a4d80 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0a4fa8 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x56142e0a4dc8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x56142e0a4e48 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x56142e0a5058 <line:582:22>
| `-NonNullAttr 0x56142e0a50b0 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a5258 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e0a50f8 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x56142e0a5178 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x56142e0a5308 <line:586:22>
| `-NonNullAttr 0x56142e0a5360 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0a54e8 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x56142e0a53a8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x56142e0a5428 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x56142e0a5598 <col:36>
| `-NonNullAttr 0x56142e0a55f0 <col:77, col:91> 1
|-FunctionDecl 0x56142e0a5928 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x56142e0a56d0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56142e0a57e0 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x56142e0a59d8 <line:591:22>
| `-NonNullAttr 0x56142e0a5a30 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a5ba8 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56142e0a5a78 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56142e0a5c50 <line:593:22>
| `-NonNullAttr 0x56142e0a5ca8 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a5db0 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56142e0a5cf8 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56142e0a5e58 <line:595:22>
| `-NonNullAttr 0x56142e0a5eb0 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a5fc8 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56142e0a5f10 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56142e0a6070 <line:597:22>
| `-NonNullAttr 0x56142e0a60c8 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a62f8 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x56142e0a6118 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56142e0a6190 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x56142e0a63a8 <line:600:22, col:39> 1 2
|-FunctionDecl 0x56142e0a66d8 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56142e0a6428 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56142e0a64a0 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56142e0a6530 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x56142e0a6790 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x56142e0a69a8 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x56142e0a6870 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x56142e0a6a50 <line:606:22>
| `-NonNullAttr 0x56142e0a6aa8 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a6bb0 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x56142e0a6af8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x56142e0a6c58 <line:608:22>
| `-NonNullAttr 0x56142e0a6cb0 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a6f10 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e0a6cf8 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x56142e0a6d78 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x56142e0a6fc0 <line:612:22>
| `-NonNullAttr 0x56142e0a7018 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0a7228 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x56142e0a7068 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x56142e0a70e8 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x56142e0a72d8 <col:37>
| `-NonNullAttr 0x56142e0a7330 <col:78, col:92> 1
|-FunctionDecl 0x56142e0a7548 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x56142e0a7378 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x56142e0a7420 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x56142e0a75f8 <line:618:22>
| `-NonNullAttr 0x56142e0a7650 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0a7818 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x56142e0a7698 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x56142e0a7710 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x56142e0a78c8 <line:621:22>
| `-NonNullAttr 0x56142e0a7920 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a7bc8 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x56142e0a7a00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x56142e0a7a80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x56142e0a7c78 <line:623:22>
| `-NonNullAttr 0x56142e0a7cd0 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a7e48 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56142e0a7d18 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56142e0a7f20 <line:625:22>
| `-NonNullAttr 0x56142e0a7f78 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a8080 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56142e0a7fc8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56142e0a8128 <line:627:22>
| `-NonNullAttr 0x56142e0a8180 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a8280 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56142e0a81c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56142e0a8328 <line:629:22>
| `-NonNullAttr 0x56142e0a8380 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a8480 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56142e0a83c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56142e0a8528 <line:631:22>
| `-NonNullAttr 0x56142e0a8580 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a8958 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x56142e0a8660 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x56142e0a8770 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x56142e0a87f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x56142e0a8a10 <line:635:22>
| `-NonNullAttr 0x56142e0a8a68 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a8be8 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x56142e0a8ab8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x56142e0a8c90 <line:637:22>
| `-NonNullAttr 0x56142e0a8ce8 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a8df0 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x56142e0a8d38 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x56142e0a8e98 <line:639:22>
| `-NonNullAttr 0x56142e0a8ef0 <col:52, col:66> 1
|-FunctionDecl 0x56142e0a90e8 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x56142e0a8fb0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x56142e0a9190 <line:641:22>
| `-NonNullAttr 0x56142e0a91e8 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a92f0 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x56142e0a9238 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x56142e0a9398 <line:643:22>
| `-NonNullAttr 0x56142e0a93f0 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a9618 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56142e0a9438 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x56142e0a94b8 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x56142e0a96c8 <line:647:22>
| `-NonNullAttr 0x56142e0a9720 <col:63, col:80> 1 2
|-FunctionDecl 0x56142e0a9928 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x56142e0a9768 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x56142e0a97e8 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x56142e0a99d8 <line:650:22>
| `-NonNullAttr 0x56142e0a9a30 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a9d78 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x56142e0a9b10 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x56142e0a9c30 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x56142e0a9e28 <line:653:22>
| `-NonNullAttr 0x56142e0a9e80 <col:63, col:77> 1
|-FunctionDecl 0x56142e0a9fe8 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x56142e0a9ec8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x56142e0aa090 <col:69>
|-FunctionDecl 0x56142e0aa208 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x56142e0aa0f8 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x56142e0aa2b0 <col:72>
|-FunctionDecl 0x56142e0aa4e8 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x56142e0aa318 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x56142e0aa3c8 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x56142e0aa598 <col:44>
|-FunctionDecl 0x56142e0aa7b8 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x56142e0aa600 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56142e0aa678 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x56142e0aa868 <line:660:22>
| `-NonNullAttr 0x56142e0aa8c0 <col:63, col:77> 2
|-FunctionDecl 0x56142e0aad08 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x56142e0aa9a0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x56142e0aaab0 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x56142e0aabc0 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x56142e0aadc0 <col:47>
|-FunctionDecl 0x56142e0abf60 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x56142e0aae30 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56142e0ac0b8 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x56142e0ac020 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56142e0ac210 <line:667:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x56142e0ac178 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56142e0ac2d8 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x56142e0ac398 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x56142e0ac458 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x56142e0ac510 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x56142e0ac590 prev 0x56142e0ac510 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x56142e0ac5f8 <col:24> 'int' 0
|-VarDecl 0x56142e0ac630 <line:673:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x56142e0ac6b0 prev 0x56142e0ac630 <line:674:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x56142e0ac718 <col:27> 'int' 0
|-VarDecl 0x56142e0ac750 <line:675:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x56142e0ac7d0 prev 0x56142e0ac750 <line:676:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x56142e0ac838 <col:27> 'int' 0
|-VarDecl 0x56142e0ac870 <line:677:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x56142e0ac8f0 prev 0x56142e0ac870 <line:678:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x56142e0ac958 <col:27> 'int' 0
|-VarDecl 0x56142e0ac988 <line:679:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x56142e0aca00 <line:680:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x56142e0aca80 <line:681:1, col:5> col:5 used x 'int'
|-VarDecl 0x56142e0acb00 prev 0x56142e0aca80 <line:682:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x56142e0acb68 <col:9> 'int' 0
|-VarDecl 0x56142e0acba0 <line:683:1, col:5> col:5 used y 'int'
|-VarDecl 0x56142e0acc20 prev 0x56142e0acba0 <line:684:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x56142e0acc88 <col:9> 'int' 0
|-VarDecl 0x56142e0accb8 <line:685:1, col:7> col:7 used y$flush_delayed '_Bool'
|-VarDecl 0x56142e0acd38 <line:686:1, col:5> col:5 used y$mem_tmp 'int'
|-VarDecl 0x56142e0acdb0 <line:687:1, col:7> col:7 used y$r_buff0_thd0 '_Bool'
|-VarDecl 0x56142e0ace28 <line:688:1, col:7> col:7 used y$r_buff0_thd1 '_Bool'
|-VarDecl 0x56142e0acea0 <line:689:1, col:7> col:7 used y$r_buff0_thd2 '_Bool'
|-VarDecl 0x56142e0acf70 <line:690:1, col:7> col:7 used y$r_buff0_thd3 '_Bool'
|-VarDecl 0x56142e0acfe8 <line:691:1, col:7> col:7 used y$r_buff1_thd0 '_Bool'
|-VarDecl 0x56142e0ad060 <line:692:1, col:7> col:7 used y$r_buff1_thd1 '_Bool'
|-VarDecl 0x56142e0ad0d8 <line:693:1, col:7> col:7 used y$r_buff1_thd2 '_Bool'
|-VarDecl 0x56142e0ad150 <line:694:1, col:7> col:7 used y$r_buff1_thd3 '_Bool'
|-VarDecl 0x56142e0ad1c8 <line:695:1, col:7> col:7 y$read_delayed '_Bool'
|-VarDecl 0x56142e0ad248 <line:696:1, col:6> col:6 y$read_delayed_var 'int *'
|-VarDecl 0x56142e0ad2c8 <line:697:1, col:5> col:5 used y$w_buff0 'int'
|-VarDecl 0x56142e0ad340 <line:698:1, col:7> col:7 used y$w_buff0_used '_Bool'
|-VarDecl 0x56142e0ad3c0 <line:699:1, col:5> col:5 used y$w_buff1 'int'
|-VarDecl 0x56142e0ad438 <line:700:1, col:7> col:7 used y$w_buff1_used '_Bool'
|-VarDecl 0x56142e0ad4b0 <line:701:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x56142e0ad528 <line:702:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x56142e0ad640 prev 0x56142e0abf60 <line:703:1, line:722:1> line:703:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x56142e0ad5a8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56142e0ae8f8 <line:704:1, line:722:1>
|   |-CallExpr 0x56142e0ad758 <line:705:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0ad740 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0ad6e8 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0ad7d0 <line:706:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56142e0ad778 <col:3> 'int' lvalue Var 0x56142e0ac6b0 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x56142e0ad7b8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0ad798 <col:25> 'int' lvalue Var 0x56142e0acb00 'x' 'int'
|   |-CallExpr 0x56142e0ad828 <line:707:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0ad810 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0ad7f0 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0ad880 <line:708:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0ad868 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0ad848 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0ad8e0 <line:709:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56142e0ad8a0 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   | `-IntegerLiteral 0x56142e0ad8c0 <col:7> 'int' 1
|   |-CallExpr 0x56142e0ad938 <line:710:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0ad920 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0ad900 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0ad990 <line:711:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0ad978 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0ad958 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0adc78 <line:712:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56142e0ad9b0 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   | `-ConditionalOperator 0x56142e0adc48 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56142e0ada70 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56142e0ada28 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56142e0ada10 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56142e0ad9d0 <col:7> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56142e0ada58 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56142e0ada40 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56142e0ad9f0 <col:25> '_Bool' lvalue Var 0x56142e0ace28 'y$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x56142e0adc30 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0ada90 <col:42> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x56142e0adc10 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56142e0adbe0 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56142e0adb50 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56142e0adb08 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56142e0adaf0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56142e0adab0 <col:55> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56142e0adb38 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56142e0adb20 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56142e0adad0 <col:73> '_Bool' lvalue Var 0x56142e0ad060 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x56142e0adbb0 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56142e0adb70 <col:90> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56142e0adbc8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0adb90 <col:102> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   |-BinaryOperator 0x56142e0ade80 <line:713:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0adc98 <col:3> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0ade68 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0ade38 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56142e0add58 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56142e0add10 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56142e0adcf8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56142e0adcb8 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56142e0add40 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56142e0add28 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56142e0adcd8 <col:38> '_Bool' lvalue Var 0x56142e0ace28 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0addf0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0adda8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0add78 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0ade20 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0ade08 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0addd0 <col:66> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56142e0ae188 <line:714:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0adea0 <col:3> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0ae170 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0ae140 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56142e0ae060 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56142e0adf80 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56142e0adf18 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56142e0adf00 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56142e0adec0 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56142e0adf48 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56142e0adf30 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56142e0adee0 <col:38> '_Bool' lvalue Var 0x56142e0ace28 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x56142e0ae040 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56142e0adff8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56142e0adfe0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56142e0adfa0 <col:56> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56142e0ae028 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56142e0ae010 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56142e0adfc0 <col:74> '_Bool' lvalue Var 0x56142e0ad060 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0ae0f8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0ae0b0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0ae080 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0ae128 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0ae110 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0ae0d8 <col:102> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56142e0ae390 <line:715:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0ae1a8 <col:3> '_Bool' lvalue Var 0x56142e0ace28 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0ae378 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0ae348 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56142e0ae268 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56142e0ae220 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56142e0ae208 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56142e0ae1c8 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56142e0ae250 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56142e0ae238 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56142e0ae1e8 <col:38> '_Bool' lvalue Var 0x56142e0ace28 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0ae300 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0ae2b8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0ae288 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0ae330 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0ae318 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0ae2e0 <col:66> '_Bool' lvalue Var 0x56142e0ace28 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56142e0ae678 <line:716:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0ae3b0 <col:3> '_Bool' lvalue Var 0x56142e0ad060 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0ae660 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0ae630 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56142e0ae550 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56142e0ae470 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56142e0ae428 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56142e0ae410 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56142e0ae3d0 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56142e0ae458 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56142e0ae440 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56142e0ae3f0 <col:38> '_Bool' lvalue Var 0x56142e0ace28 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x56142e0ae530 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56142e0ae4e8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56142e0ae4d0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56142e0ae490 <col:56> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56142e0ae518 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56142e0ae500 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56142e0ae4b0 <col:74> '_Bool' lvalue Var 0x56142e0ad060 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0ae5e8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0ae5a0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0ae570 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0ae618 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0ae600 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0ae5c8 <col:102> '_Bool' lvalue Var 0x56142e0ad060 'y$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x56142e0ae6d0 <line:717:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0ae6b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0ae698 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0ae728 <line:718:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0ae710 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0ae6f0 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0ae7e0 <line:719:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56142e0ae748 <col:3> 'int' lvalue Var 0x56142e0ac590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56142e0ae7c0 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56142e0ae7a8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0ae768 <col:22> 'int' lvalue Var 0x56142e0ac590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56142e0ae788 <col:41> 'int' 1
|   |-CallExpr 0x56142e0ae838 <line:720:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0ae820 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0ae800 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56142e0ae8e8 <line:721:3, col:36>
|     `-CallExpr 0x56142e0ae8c8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56142e0ae8b0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56142e0ae858 <col:10> 'void *(void)' Function 0x56142e052e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56142e0aea40 prev 0x56142e0ac0b8 <line:723:1, line:767:1> line:723:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x56142e0ae9a8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56142e0b2cd0 <line:724:1, line:767:1>
|   |-CallExpr 0x56142e0aeb20 <line:725:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0aeb08 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0aeae8 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0aeb98 <line:726:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56142e0aeb40 <col:3> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x56142e0aeb80 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0aeb60 <col:15> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |-BinaryOperator 0x56142e0aebf8 <line:727:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56142e0aebb8 <col:3> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   | `-IntegerLiteral 0x56142e0aebd8 <col:15> 'int' 2
|   |-BinaryOperator 0x56142e0aec70 <line:728:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0aec18 <col:3> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0aec58 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0aec38 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56142e0aed08 <line:729:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0aec90 <col:3> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x56142e0aece0 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56142e0aecb0 <col:27> 'int' 1
|   |-CallExpr 0x56142e0aee88 <line:730:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x56142e0aee70 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56142e0aed28 <col:3> 'void (int)' Function 0x56142e0530d8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x56142e0aee28 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x56142e0aee08 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x56142e0aede8 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x56142e0aeda0 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x56142e0aed88 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56142e0aed48 <col:23> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x56142e0aedd0 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x56142e0aedb8 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x56142e0aed68 <col:41> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56142e0aef08 <line:731:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0aeeb0 <col:3> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0aeef0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0aeed0 <col:20> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x56142e0aef90 <line:732:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0aef28 <col:3> '_Bool' lvalue Var 0x56142e0ad060 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0aef68 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0aef48 <col:20> '_Bool' lvalue Var 0x56142e0ace28 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56142e0af008 <line:733:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0aefb0 <col:3> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0aeff0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0aefd0 <col:20> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56142e0af080 <line:734:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0af028 <col:3> '_Bool' lvalue Var 0x56142e0ad150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0af068 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0af048 <col:20> '_Bool' lvalue Var 0x56142e0acf70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56142e0af118 <line:735:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0af0a0 <col:3> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x56142e0af0f0 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56142e0af0c0 <col:27> 'int' 1
|   |-CallExpr 0x56142e0af170 <line:736:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0af158 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0af138 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0af1c8 <line:737:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0af1b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0af190 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0af278 <line:738:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0af1e8 <col:3> '_Bool' lvalue Var 0x56142e0ad4b0 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0af260 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x56142e0af240 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x56142e0af228 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x56142e0af208 <col:19> 'void *(void)' Function 0x56142e052e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x56142e0af328 <line:739:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0af298 <col:3> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0af310 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x56142e0af2f0 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x56142e0af2d8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x56142e0af2b8 <col:19> 'void *(void)' Function 0x56142e052e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x56142e0af3a0 <line:740:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0af348 <col:3> '_Bool' lvalue Var 0x56142e0accb8 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0af388 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0af368 <col:21> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x56142e0af418 <line:741:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56142e0af3c0 <col:3> 'int' lvalue Var 0x56142e0acd38 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x56142e0af400 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0af3e0 <col:15> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   |-BinaryOperator 0x56142e0af850 <line:742:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x56142e0af438 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   | `-ConditionalOperator 0x56142e0af820 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x56142e0af648 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x56142e0af568 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x56142e0af490 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x56142e0af478 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x56142e0af458 <col:8> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x56142e0af548 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x56142e0af4e0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x56142e0af4c8 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x56142e0af4a8 <col:27> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x56142e0af530 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x56142e0af518 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x56142e0af4f8 <col:46> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x56142e0af628 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x56142e0af5c0 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x56142e0af5a8 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x56142e0af588 <col:65> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x56142e0af610 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x56142e0af5f8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x56142e0af5d8 <col:84> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x56142e0af808 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0af668 <col:101> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   |   `-ParenExpr 0x56142e0af7e8 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x56142e0af7b8 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x56142e0af728 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56142e0af6e0 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56142e0af6c8 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56142e0af688 <col:106> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56142e0af710 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56142e0af6f8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56142e0af6a8 <col:124> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56142e0af788 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56142e0af748 <col:141> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x56142e0af7a0 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0af768 <col:153> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x56142e0afd60 <line:743:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56142e0af870 <col:3> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x56142e0afd30 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56142e0afd00 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56142e0afce8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56142e0af890 <col:15> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56142e0afd18 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0af8b0 <col:31> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x56142e0afcc8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56142e0afc98 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56142e0afac0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56142e0af9e0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56142e0af908 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56142e0af8f0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56142e0af8d0 <col:45> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56142e0af9c0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56142e0af958 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56142e0af940 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56142e0af920 <col:64> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x56142e0af9a8 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56142e0af990 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56142e0af970 <col:83> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56142e0afaa0 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56142e0afa38 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56142e0afa20 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56142e0afa00 <col:102> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x56142e0afa88 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56142e0afa70 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56142e0afa50 <col:121> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56142e0afc80 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56142e0afae0 <col:138> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x56142e0afc60 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56142e0afc30 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56142e0afba0 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56142e0afb58 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56142e0afb40 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56142e0afb00 <col:151> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56142e0afb88 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56142e0afb70 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56142e0afb20 <col:169> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x56142e0afc00 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56142e0afbc0 <col:186> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x56142e0afc18 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56142e0afbe0 <col:198> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |-BinaryOperator 0x56142e0b0290 <line:744:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56142e0afd80 <col:3> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x56142e0b0260 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56142e0b0230 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56142e0b0218 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56142e0afda0 <col:15> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56142e0b0248 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0afdc0 <col:31> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x56142e0b01f8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56142e0b01c8 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56142e0afff0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56142e0afef0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56142e0afe18 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56142e0afe00 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56142e0afde0 <col:45> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56142e0afed0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56142e0afe68 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56142e0afe50 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56142e0afe30 <col:64> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x56142e0afeb8 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56142e0afea0 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56142e0afe80 <col:83> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56142e0affd0 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56142e0aff48 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56142e0aff30 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56142e0aff10 <col:102> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x56142e0affb8 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56142e0affa0 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56142e0aff60 <col:121> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56142e0b01b0 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56142e0b0010 <col:138> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x56142e0b0190 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56142e0b0160 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56142e0b00d0 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56142e0b0088 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56142e0b0070 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56142e0b0030 <col:151> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56142e0b00b8 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56142e0b00a0 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56142e0b0050 <col:169> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x56142e0b0130 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56142e0b00f0 <col:186> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x56142e0b0148 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56142e0b0110 <col:198> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x56142e0b0838 <line:745:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b02b0 <col:3> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b0820 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b07f0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56142e0b07a8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56142e0b0790 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56142e0b02d0 <col:20> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b07d8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56142e0b07c0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56142e0b02f0 <col:36> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x56142e0b0770 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56142e0b0740 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56142e0b0500 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56142e0b0420 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56142e0b0348 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56142e0b0330 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56142e0b0310 <col:55> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56142e0b0400 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56142e0b0398 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56142e0b0380 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56142e0b0360 <col:74> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56142e0b03e8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56142e0b03d0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56142e0b03b0 <col:93> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56142e0b04e0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56142e0b0478 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56142e0b0460 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56142e0b0440 <col:112> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56142e0b04c8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56142e0b04b0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56142e0b0490 <col:131> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56142e0b0728 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56142e0b0710 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56142e0b0520 <col:148> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x56142e0b06f0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56142e0b06c0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56142e0b05e0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56142e0b0598 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56142e0b0580 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56142e0b0540 <col:166> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56142e0b05c8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56142e0b05b0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56142e0b0560 <col:184> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56142e0b0678 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56142e0b0630 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56142e0b0600 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56142e0b06a8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56142e0b0690 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56142e0b0658 <col:212> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56142e0b0e00 <line:746:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b0858 <col:3> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b0de8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b0db8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56142e0b0d70 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56142e0b0d58 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56142e0b0878 <col:20> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b0da0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56142e0b0d88 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56142e0b0898 <col:36> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x56142e0b0d38 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56142e0b0d08 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56142e0b0aa8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56142e0b09c8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56142e0b08f0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56142e0b08d8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56142e0b08b8 <col:55> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56142e0b09a8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56142e0b0940 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56142e0b0928 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56142e0b0908 <col:74> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56142e0b0990 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56142e0b0978 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56142e0b0958 <col:93> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56142e0b0a88 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56142e0b0a20 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56142e0b0a08 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56142e0b09e8 <col:112> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56142e0b0a70 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56142e0b0a58 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56142e0b0a38 <col:131> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56142e0b0cf0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56142e0b0cd8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56142e0b0ac8 <col:148> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x56142e0b0cb8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56142e0b0c88 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56142e0b0b88 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56142e0b0b40 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56142e0b0b28 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56142e0b0ae8 <col:166> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56142e0b0b70 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56142e0b0b58 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56142e0b0b08 <col:184> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56142e0b0c58 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56142e0b0bd8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56142e0b0ba8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56142e0b0c70 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56142e0b0c30 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56142e0b0c00 <col:219> 'int' 0
|   |-BinaryOperator 0x56142e0b13c8 <line:747:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b0e20 <col:3> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b13b0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b1380 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56142e0b1338 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56142e0b1320 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56142e0b0e40 <col:20> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b1368 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56142e0b1350 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56142e0b0e60 <col:36> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x56142e0b1300 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56142e0b12d0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56142e0b1090 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56142e0b0fb0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56142e0b0eb8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56142e0b0ea0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56142e0b0e80 <col:55> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56142e0b0f70 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56142e0b0f08 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56142e0b0ef0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56142e0b0ed0 <col:74> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56142e0b0f58 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56142e0b0f40 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56142e0b0f20 <col:93> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56142e0b1070 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56142e0b1008 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56142e0b0ff0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56142e0b0fd0 <col:112> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56142e0b1058 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56142e0b1040 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56142e0b1020 <col:131> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56142e0b12b8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56142e0b12a0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56142e0b10b0 <col:148> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x56142e0b1280 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56142e0b1250 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56142e0b1170 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56142e0b1128 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56142e0b1110 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56142e0b10d0 <col:166> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56142e0b1158 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56142e0b1140 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56142e0b10f0 <col:184> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56142e0b1208 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56142e0b11c0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56142e0b1190 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56142e0b1238 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56142e0b1220 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56142e0b11e8 <col:212> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56142e0b1990 <line:748:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b13e8 <col:3> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b1978 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b1948 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56142e0b1900 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56142e0b18e8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56142e0b1408 <col:20> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b1930 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56142e0b1918 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56142e0b1428 <col:36> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x56142e0b18c8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56142e0b1898 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56142e0b1638 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56142e0b1558 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56142e0b1480 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56142e0b1468 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56142e0b1448 <col:55> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56142e0b1538 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56142e0b14d0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56142e0b14b8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56142e0b1498 <col:74> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56142e0b1520 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56142e0b1508 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56142e0b14e8 <col:93> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56142e0b1618 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56142e0b15b0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56142e0b1598 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56142e0b1578 <col:112> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56142e0b1600 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56142e0b15e8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56142e0b15c8 <col:131> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56142e0b1880 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56142e0b1868 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56142e0b1658 <col:148> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x56142e0b1848 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56142e0b1818 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56142e0b1718 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56142e0b16d0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56142e0b16b8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56142e0b1678 <col:166> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56142e0b1700 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56142e0b16e8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56142e0b1698 <col:184> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56142e0b17e8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56142e0b1768 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56142e0b1738 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56142e0b1800 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56142e0b17c0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56142e0b1790 <col:219> 'int' 0
|   |-BinaryOperator 0x56142e0b1a08 <line:749:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56142e0b19b0 <col:3> 'int' lvalue Var 0x56142e0ac7d0 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x56142e0b19f0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0b19d0 <col:25> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   |-BinaryOperator 0x56142e0b1b38 <line:750:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x56142e0b1a28 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   | `-ConditionalOperator 0x56142e0b1b08 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x56142e0b1ac0 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56142e0b1aa8 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56142e0b1a48 <col:7> '_Bool' lvalue Var 0x56142e0accb8 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x56142e0b1ad8 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0b1a68 <col:25> 'int' lvalue Var 0x56142e0acd38 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x56142e0b1af0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x56142e0b1a88 <col:37> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   |-BinaryOperator 0x56142e0b1bd0 <line:751:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b1b58 <col:3> '_Bool' lvalue Var 0x56142e0accb8 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x56142e0b1ba8 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56142e0b1b78 <col:28> 'int' 0
|   |-CallExpr 0x56142e0b1c28 <line:752:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0b1c10 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b1bf0 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0b1c80 <line:753:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0b1c68 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b1c48 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0b1cf8 <line:754:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56142e0b1ca0 <col:3> 'int' lvalue Var 0x56142e0ac8f0 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x56142e0b1ce0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56142e0b1cc0 <col:25> 'int' lvalue Var 0x56142e0acb00 'x' 'int'
|   |-CallExpr 0x56142e0b1d50 <line:755:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0b1d38 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b1d18 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0b1da8 <line:756:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0b1d90 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b1d70 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0b20a8 <line:757:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56142e0b1dc8 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   | `-ConditionalOperator 0x56142e0b2078 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56142e0b1e88 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56142e0b1e40 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56142e0b1e28 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56142e0b1de8 <col:7> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56142e0b1e70 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56142e0b1e58 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56142e0b1e08 <col:25> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x56142e0b2060 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0b1ea8 <col:42> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x56142e0b2040 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56142e0b2010 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56142e0b1f68 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56142e0b1f20 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56142e0b1f08 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56142e0b1ec8 <col:55> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56142e0b1f50 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56142e0b1f38 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56142e0b1ee8 <col:73> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56142e0b1fe0 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56142e0b1f88 <col:90> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56142e0b1ff8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b1fc0 <col:102> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   |-BinaryOperator 0x56142e0b22b0 <line:758:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b20c8 <col:3> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b2298 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b2268 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56142e0b2188 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56142e0b2140 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56142e0b2128 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56142e0b20e8 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56142e0b2170 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56142e0b2158 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56142e0b2108 <col:38> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b2220 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0b21d8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0b21a8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0b2250 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0b2238 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b2200 <col:66> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56142e0b2598 <line:759:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b22d0 <col:3> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b2580 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b2550 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56142e0b2470 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56142e0b2390 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56142e0b2348 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56142e0b2330 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56142e0b22f0 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56142e0b2378 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56142e0b2360 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56142e0b2310 <col:38> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56142e0b2450 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56142e0b2408 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56142e0b23f0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56142e0b23b0 <col:56> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56142e0b2438 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56142e0b2420 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56142e0b23d0 <col:74> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b2508 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0b24c0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0b2490 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0b2538 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0b2520 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b24e8 <col:102> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56142e0b27a0 <line:760:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b25b8 <col:3> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b2788 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b2758 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56142e0b2678 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56142e0b2630 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56142e0b2618 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56142e0b25d8 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56142e0b2660 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56142e0b2648 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56142e0b25f8 <col:38> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b2710 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0b26c8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0b2698 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0b2740 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0b2728 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b26f0 <col:66> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56142e0b2a88 <line:761:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b27c0 <col:3> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b2a70 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b2a40 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56142e0b2960 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56142e0b2880 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56142e0b2838 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56142e0b2820 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56142e0b27e0 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56142e0b2868 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56142e0b2850 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56142e0b2800 <col:38> '_Bool' lvalue Var 0x56142e0acea0 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56142e0b2940 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56142e0b28f8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56142e0b28e0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56142e0b28a0 <col:56> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56142e0b2928 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56142e0b2910 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56142e0b28c0 <col:74> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b29f8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0b29b0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0b2980 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0b2a28 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0b2a10 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b29d8 <col:102> '_Bool' lvalue Var 0x56142e0ad0d8 'y$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x56142e0b2ae0 <line:762:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0b2ac8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b2aa8 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0b2b38 <line:763:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0b2b20 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b2b00 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0b2bf0 <line:764:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56142e0b2b58 <col:3> 'int' lvalue Var 0x56142e0ac590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56142e0b2bd0 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56142e0b2bb8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0b2b78 <col:22> 'int' lvalue Var 0x56142e0ac590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56142e0b2b98 <col:41> 'int' 1
|   |-CallExpr 0x56142e0b2c48 <line:765:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0b2c30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b2c10 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56142e0b2cc0 <line:766:3, col:36>
|     `-CallExpr 0x56142e0b2ca0 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56142e0b2c88 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56142e0b2c68 <col:10> 'void *(void)' Function 0x56142e052e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56142e0b2ee0 prev 0x56142e0ac210 <line:768:1, line:784:1> line:768:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x56142e0b2e48 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56142e0b4010 <line:769:1, line:784:1>
|   |-CallExpr 0x56142e0b2fd0 <line:770:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0b2fa8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b2f88 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0b3030 <line:771:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56142e0b2ff0 <col:3> 'int' lvalue Var 0x56142e0acb00 'x' 'int'
|   | `-IntegerLiteral 0x56142e0b3010 <col:7> 'int' 1
|   |-CallExpr 0x56142e0b3088 <line:772:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0b3070 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b3050 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0b30e0 <line:773:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0b30c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b30a8 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0b33c8 <line:774:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56142e0b3100 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   | `-ConditionalOperator 0x56142e0b3398 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56142e0b31c0 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56142e0b3178 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56142e0b3160 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56142e0b3120 <col:7> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56142e0b31a8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56142e0b3190 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56142e0b3140 <col:25> '_Bool' lvalue Var 0x56142e0acf70 'y$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x56142e0b3380 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0b31e0 <col:42> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x56142e0b3360 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56142e0b3330 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56142e0b32a0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56142e0b3258 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56142e0b3240 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56142e0b3200 <col:55> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56142e0b3288 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56142e0b3270 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56142e0b3220 <col:73> '_Bool' lvalue Var 0x56142e0ad150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x56142e0b3300 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56142e0b32c0 <col:90> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56142e0b3318 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b32e0 <col:102> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
|   |-BinaryOperator 0x56142e0b35d0 <line:775:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b33e8 <col:3> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b35b8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b3588 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56142e0b34a8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56142e0b3460 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56142e0b3448 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56142e0b3408 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56142e0b3490 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56142e0b3478 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56142e0b3428 <col:38> '_Bool' lvalue Var 0x56142e0acf70 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b3540 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0b34f8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0b34c8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0b3570 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0b3558 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b3520 <col:66> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56142e0b38b8 <line:776:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b35f0 <col:3> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b38a0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b3870 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56142e0b3790 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56142e0b36b0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56142e0b3668 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56142e0b3650 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56142e0b3610 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56142e0b3698 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56142e0b3680 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56142e0b3630 <col:38> '_Bool' lvalue Var 0x56142e0acf70 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56142e0b3770 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56142e0b3728 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56142e0b3710 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56142e0b36d0 <col:56> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56142e0b3758 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56142e0b3740 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56142e0b36f0 <col:74> '_Bool' lvalue Var 0x56142e0ad150 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b3828 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0b37e0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0b37b0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0b3858 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0b3840 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b3808 <col:102> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56142e0b3ac0 <line:777:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b38d8 <col:3> '_Bool' lvalue Var 0x56142e0acf70 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b3aa8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b3a78 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56142e0b3998 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56142e0b3950 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56142e0b3938 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56142e0b38f8 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56142e0b3980 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56142e0b3968 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56142e0b3918 <col:38> '_Bool' lvalue Var 0x56142e0acf70 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b3a30 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0b39e8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0b39b8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0b3a60 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0b3a48 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b3a10 <col:66> '_Bool' lvalue Var 0x56142e0acf70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56142e0b3da8 <line:778:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56142e0b3ae0 <col:3> '_Bool' lvalue Var 0x56142e0ad150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56142e0b3d90 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56142e0b3d60 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56142e0b3c80 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56142e0b3ba0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56142e0b3b58 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56142e0b3b40 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56142e0b3b00 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56142e0b3b88 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56142e0b3b70 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56142e0b3b20 <col:38> '_Bool' lvalue Var 0x56142e0acf70 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56142e0b3c60 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56142e0b3c18 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56142e0b3c00 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56142e0b3bc0 <col:56> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56142e0b3c48 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56142e0b3c30 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56142e0b3be0 <col:74> '_Bool' lvalue Var 0x56142e0ad150 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56142e0b3d18 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56142e0b3cd0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56142e0b3ca0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56142e0b3d48 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56142e0b3d30 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56142e0b3cf8 <col:102> '_Bool' lvalue Var 0x56142e0ad150 'y$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x56142e0b3e00 <line:779:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0b3de8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b3dc8 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56142e0b3e58 <line:780:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56142e0b3e40 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b3e20 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56142e0b3f10 <line:781:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56142e0b3e78 <col:3> 'int' lvalue Var 0x56142e0ac590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56142e0b3ef0 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56142e0b3ed8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56142e0b3e98 <col:22> 'int' lvalue Var 0x56142e0ac590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56142e0b3eb8 <col:41> 'int' 1
|   |-CallExpr 0x56142e0b3f68 <line:782:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56142e0b3f50 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56142e0b3f30 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56142e0b4000 <line:783:3, col:36>
|     `-CallExpr 0x56142e0b3fe0 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56142e0b3fa8 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56142e0b3f88 <col:10> 'void *(void)' Function 0x56142e052e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56142e0b40b0 prev 0x56142e0ac2d8 <line:785:1, line:787:1> line:785:6 fence 'void ()'
| `-CompoundStmt 0x56142e0b4150 <line:786:1, line:787:1>
|-FunctionDecl 0x56142e0b4180 prev 0x56142e0ac398 <line:788:1, line:790:1> line:788:6 isync 'void ()'
| `-CompoundStmt 0x56142e0b4220 <line:789:1, line:790:1>
|-FunctionDecl 0x56142e0b4250 prev 0x56142e0ac458 <line:791:1, line:793:1> line:791:6 lwfence 'void ()'
| `-CompoundStmt 0x56142e0b42f0 <line:792:1, line:793:1>
`-FunctionDecl 0x56142e0b4358 <line:794:1, line:831:1> line:794:5 main 'int ()'
  `-CompoundStmt 0x56142e0b89b8 <line:795:1, line:831:1>
    |-DeclStmt 0x56142e0b4470 <line:796:3, col:18>
    | `-VarDecl 0x56142e0b4408 <col:3, col:13> col:13 used t1701 'pthread_t':'unsigned long'
    |-CallExpr 0x56142e0b4678 <line:797:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56142e0b4660 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56142e0b4488 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56142e0938f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56142e0b44c8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56142e0b44a8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56142e0b4408 't1701' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56142e0b46b8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56142e0b4540 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56142e0b4518 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56142e0b44e0 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56142e0b46d0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56142e0b4560 <col:39> 'void *(void *)' Function 0x56142e0ad640 'P0' 'void *(void *)'
    | `-ParenExpr 0x56142e0b45e0 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56142e0b45b8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56142e0b4580 <col:52> 'int' 0
    |-DeclStmt 0x56142e0b4760 <line:798:3, col:18>
    | `-VarDecl 0x56142e0b46f8 <col:3, col:13> col:13 used t1702 'pthread_t':'unsigned long'
    |-CallExpr 0x56142e0b4908 <line:799:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56142e0b48f0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56142e0b4778 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56142e0938f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56142e0b47b8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56142e0b4798 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56142e0b46f8 't1702' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56142e0b4948 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56142e0b4830 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56142e0b4808 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56142e0b47d0 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56142e0b4960 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56142e0b4850 <col:39> 'void *(void *)' Function 0x56142e0aea40 'P1' 'void *(void *)'
    | `-ParenExpr 0x56142e0b48d0 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56142e0b48a8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56142e0b4870 <col:52> 'int' 0
    |-DeclStmt 0x56142e0b49f0 <line:800:3, col:18>
    | `-VarDecl 0x56142e0b4988 <col:3, col:13> col:13 used t1703 'pthread_t':'unsigned long'
    |-CallExpr 0x56142e0b4b98 <line:801:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56142e0b4b80 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56142e0b4a08 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56142e0938f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56142e0b4a48 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56142e0b4a28 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56142e0b4988 't1703' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56142e0b4bd8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56142e0b4ac0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56142e0b4a98 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56142e0b4a60 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56142e0b4bf0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56142e0b4ae0 <col:39> 'void *(void *)' Function 0x56142e0b2ee0 'P2' 'void *(void *)'
    | `-ParenExpr 0x56142e0b4b60 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56142e0b4b38 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56142e0b4b00 <col:52> 'int' 0
    |-CallExpr 0x56142e0b4c40 <line:802:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56142e0b4c28 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56142e0b4c08 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56142e0b4d10 <line:803:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b4c60 <col:3> '_Bool' lvalue Var 0x56142e0ac988 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b4cf8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x56142e0b4cd8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x56142e0b4cc0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x56142e0b4c80 <col:21> 'int' lvalue Var 0x56142e0ac590 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x56142e0b4ca0 <col:41> 'int' 3
    |-CallExpr 0x56142e0b4d68 <line:804:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56142e0b4d50 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56142e0b4d30 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56142e0b4de0 <line:805:3, col:36> 'void'
    | |-ImplicitCastExpr 0x56142e0b4dc8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56142e0b4d88 <col:3> 'void (int)' Function 0x56142e052ca0 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x56142e0b4e20 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x56142e0b4e08 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x56142e0b4da8 <col:21> '_Bool' lvalue Var 0x56142e0ac988 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x56142e0b4e70 <line:806:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56142e0b4e58 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56142e0b4e38 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56142e0b5178 <line:807:3, col:103> 'int' '='
    | |-DeclRefExpr 0x56142e0b4e90 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
    | `-ConditionalOperator 0x56142e0b5148 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x56142e0b4f50 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x56142e0b4f08 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x56142e0b4ef0 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x56142e0b4eb0 <col:7> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x56142e0b4f38 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x56142e0b4f20 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x56142e0b4ed0 <col:25> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56142e0b5130 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56142e0b4f70 <col:42> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
    |   `-ParenExpr 0x56142e0b5110 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x56142e0b50e0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x56142e0b5050 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56142e0b5008 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56142e0b4ff0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56142e0b4f90 <col:55> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56142e0b5038 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56142e0b5020 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56142e0b4fb0 <col:73> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56142e0b50b0 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56142e0b5070 <col:90> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x56142e0b50c8 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56142e0b5090 <col:102> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
    |-BinaryOperator 0x56142e0b5380 <line:808:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b5198 <col:3> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b5368 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56142e0b5338 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56142e0b5258 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56142e0b5210 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56142e0b51f8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56142e0b51b8 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56142e0b5240 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56142e0b5228 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56142e0b51d8 <col:38> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56142e0b52f0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56142e0b52a8 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56142e0b5278 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56142e0b5320 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56142e0b5308 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56142e0b52d0 <col:66> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56142e0b5668 <line:809:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b53a0 <col:3> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b5650 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56142e0b5620 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56142e0b5540 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56142e0b5460 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56142e0b5418 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56142e0b5400 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56142e0b53c0 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56142e0b5448 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56142e0b5430 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56142e0b53e0 <col:38> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56142e0b5520 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56142e0b54d8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56142e0b54c0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56142e0b5480 <col:56> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56142e0b5508 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56142e0b54f0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56142e0b54a0 <col:74> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56142e0b55d8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56142e0b5590 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56142e0b5560 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56142e0b5608 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56142e0b55f0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56142e0b55b8 <col:102> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |-BinaryOperator 0x56142e0b5870 <line:810:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b5688 <col:3> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b5858 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56142e0b5828 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56142e0b5748 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56142e0b5700 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56142e0b56e8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56142e0b56a8 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56142e0b5730 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56142e0b5718 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56142e0b56c8 <col:38> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56142e0b57e0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56142e0b5798 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56142e0b5768 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56142e0b5810 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56142e0b57f8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56142e0b57c0 <col:66> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56142e0b5b58 <line:811:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b5890 <col:3> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b5b40 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56142e0b5b10 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56142e0b5a30 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56142e0b5950 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56142e0b5908 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56142e0b58f0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56142e0b58b0 <col:20> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56142e0b5938 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56142e0b5920 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56142e0b58d0 <col:38> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56142e0b5a10 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56142e0b59c8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56142e0b59b0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56142e0b5970 <col:56> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56142e0b59f8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56142e0b59e0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56142e0b5990 <col:74> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56142e0b5ac8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56142e0b5a80 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56142e0b5a50 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56142e0b5af8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56142e0b5ae0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56142e0b5aa8 <col:102> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |-CallExpr 0x56142e0b5bb0 <line:812:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56142e0b5b98 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56142e0b5b78 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56142e0b5c08 <line:813:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56142e0b5bf0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56142e0b5bd0 <col:3> 'void ()' Function 0x56142e053350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56142e0b5cb8 <line:814:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b5c28 <col:3> '_Bool' lvalue Var 0x56142e0ad4b0 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b5ca0 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x56142e0b5c80 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x56142e0b5c68 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x56142e0b5c48 <col:19> 'void *(void)' Function 0x56142e052e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x56142e0b5d68 <line:815:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b5cd8 <col:3> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b5d50 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x56142e0b5d30 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x56142e0b5d18 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x56142e0b5cf8 <col:19> 'void *(void)' Function 0x56142e052e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x56142e0b5de0 <line:816:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b5d88 <col:3> '_Bool' lvalue Var 0x56142e0accb8 'y$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b5dc8 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x56142e0b5da8 <col:21> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x56142e0b5e58 <line:817:3, col:15> 'int' '='
    | |-DeclRefExpr 0x56142e0b5e00 <col:3> 'int' lvalue Var 0x56142e0acd38 'y$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x56142e0b5e40 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x56142e0b5e20 <col:15> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
    |-BinaryOperator 0x56142e0b62a8 <line:818:3, col:162> 'int' '='
    | |-DeclRefExpr 0x56142e0b5e78 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
    | `-ConditionalOperator 0x56142e0b6278 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x56142e0b60a0 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x56142e0b5fa8 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x56142e0b5ed0 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x56142e0b5eb8 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x56142e0b5e98 <col:8> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x56142e0b5f88 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x56142e0b5f20 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x56142e0b5f08 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x56142e0b5ee8 <col:27> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x56142e0b5f70 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x56142e0b5f58 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x56142e0b5f38 <col:46> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x56142e0b6080 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x56142e0b6018 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x56142e0b6000 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x56142e0b5fc8 <col:65> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x56142e0b6068 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x56142e0b6050 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x56142e0b6030 <col:84> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56142e0b6260 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56142e0b60c0 <col:101> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
    |   `-ParenExpr 0x56142e0b6240 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x56142e0b6210 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x56142e0b6180 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56142e0b6138 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56142e0b6120 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56142e0b60e0 <col:106> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56142e0b6168 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56142e0b6150 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56142e0b6100 <col:124> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56142e0b61e0 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56142e0b61a0 <col:141> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x56142e0b61f8 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56142e0b61c0 <col:153> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
    |-BinaryOperator 0x56142e0b67b8 <line:819:3, col:208> 'int' '='
    | |-DeclRefExpr 0x56142e0b62c8 <col:3> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
    | `-ConditionalOperator 0x56142e0b6788 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x56142e0b6758 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56142e0b6740 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56142e0b62e8 <col:15> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x56142e0b6770 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56142e0b6308 <col:31> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
    |   `-ParenExpr 0x56142e0b6720 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x56142e0b66f0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x56142e0b6518 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x56142e0b6438 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x56142e0b6360 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x56142e0b6348 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x56142e0b6328 <col:45> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x56142e0b6418 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x56142e0b63b0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x56142e0b6398 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x56142e0b6378 <col:64> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x56142e0b6400 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x56142e0b63e8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x56142e0b63c8 <col:83> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x56142e0b64f8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x56142e0b6490 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x56142e0b6478 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x56142e0b6458 <col:102> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x56142e0b64e0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x56142e0b64c8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x56142e0b64a8 <col:121> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56142e0b66d8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56142e0b6538 <col:138> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
    |       `-ParenExpr 0x56142e0b66b8 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x56142e0b6688 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x56142e0b65f8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x56142e0b65b0 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x56142e0b6598 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x56142e0b6558 <col:151> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x56142e0b65e0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x56142e0b65c8 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56142e0b6578 <col:169> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x56142e0b6658 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56142e0b6618 <col:186> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x56142e0b6670 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x56142e0b6638 <col:198> 'int' lvalue Var 0x56142e0ad2c8 'y$w_buff0' 'int'
    |-BinaryOperator 0x56142e0b6cc8 <line:820:3, col:208> 'int' '='
    | |-DeclRefExpr 0x56142e0b67d8 <col:3> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
    | `-ConditionalOperator 0x56142e0b6c98 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x56142e0b6c68 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56142e0b6c50 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56142e0b67f8 <col:15> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x56142e0b6c80 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56142e0b6818 <col:31> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
    |   `-ParenExpr 0x56142e0b6c30 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x56142e0b6c00 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x56142e0b6a28 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x56142e0b6948 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x56142e0b6870 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x56142e0b6858 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x56142e0b6838 <col:45> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x56142e0b6928 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x56142e0b68c0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x56142e0b68a8 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x56142e0b6888 <col:64> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x56142e0b6910 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x56142e0b68f8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x56142e0b68d8 <col:83> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x56142e0b6a08 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x56142e0b69a0 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x56142e0b6988 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x56142e0b6968 <col:102> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x56142e0b69f0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x56142e0b69d8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x56142e0b69b8 <col:121> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56142e0b6be8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56142e0b6a48 <col:138> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
    |       `-ParenExpr 0x56142e0b6bc8 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x56142e0b6b98 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x56142e0b6b08 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x56142e0b6ac0 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x56142e0b6aa8 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x56142e0b6a68 <col:151> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x56142e0b6af0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x56142e0b6ad8 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56142e0b6a88 <col:169> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x56142e0b6b68 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56142e0b6b28 <col:186> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x56142e0b6b80 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x56142e0b6b48 <col:198> 'int' lvalue Var 0x56142e0ad3c0 'y$w_buff1' 'int'
    |-BinaryOperator 0x56142e0b7280 <line:821:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b6ce8 <col:3> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b7268 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56142e0b7238 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x56142e0b71f0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56142e0b71d8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56142e0b6d08 <col:20> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56142e0b7220 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56142e0b7208 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56142e0b6d28 <col:36> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x56142e0b71b8 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x56142e0b7188 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x56142e0b6f38 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56142e0b6e58 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56142e0b6d80 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56142e0b6d68 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56142e0b6d48 <col:55> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56142e0b6e38 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56142e0b6dd0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56142e0b6db8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56142e0b6d98 <col:74> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56142e0b6e20 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56142e0b6e08 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56142e0b6de8 <col:93> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56142e0b6f18 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56142e0b6eb0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56142e0b6e98 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56142e0b6e78 <col:112> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56142e0b6f00 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56142e0b6ee8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56142e0b6ec8 <col:131> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56142e0b7170 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56142e0b7158 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56142e0b6f58 <col:148> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x56142e0b7138 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x56142e0b7108 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x56142e0b7028 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56142e0b6fd0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56142e0b6fb8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56142e0b6f78 <col:166> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56142e0b7010 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56142e0b6fe8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56142e0b6f98 <col:184> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56142e0b70c0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56142e0b7078 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56142e0b7048 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56142e0b70f0 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x56142e0b70d8 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x56142e0b70a0 <col:212> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56142e0b7848 <line:822:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b72a0 <col:3> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b7830 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56142e0b7800 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x56142e0b77b8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56142e0b77a0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56142e0b72c0 <col:20> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56142e0b77e8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56142e0b77d0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56142e0b72e0 <col:36> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x56142e0b7780 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x56142e0b7750 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x56142e0b74f0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56142e0b7410 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56142e0b7338 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56142e0b7320 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56142e0b7300 <col:55> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56142e0b73f0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56142e0b7388 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56142e0b7370 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56142e0b7350 <col:74> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56142e0b73d8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56142e0b73c0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56142e0b73a0 <col:93> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56142e0b74d0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56142e0b7468 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56142e0b7450 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56142e0b7430 <col:112> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56142e0b74b8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56142e0b74a0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56142e0b7480 <col:131> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56142e0b7738 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56142e0b7720 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56142e0b7510 <col:148> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x56142e0b7700 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x56142e0b76d0 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x56142e0b75d0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56142e0b7588 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56142e0b7570 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56142e0b7530 <col:166> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56142e0b75b8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56142e0b75a0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56142e0b7550 <col:184> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56142e0b76a0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56142e0b7620 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56142e0b75f0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56142e0b76b8 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x56142e0b7678 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x56142e0b7648 <col:219> 'int' 0
    |-BinaryOperator 0x56142e0b7df0 <line:823:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b7868 <col:3> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b7dd8 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56142e0b7da8 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x56142e0b7d60 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56142e0b7d48 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56142e0b7888 <col:20> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56142e0b7d90 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56142e0b7d78 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56142e0b78a8 <col:36> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x56142e0b7d28 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x56142e0b7cf8 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x56142e0b7ab8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56142e0b79d8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56142e0b7900 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56142e0b78e8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56142e0b78c8 <col:55> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56142e0b79b8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56142e0b7950 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56142e0b7938 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56142e0b7918 <col:74> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56142e0b79a0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56142e0b7988 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56142e0b7968 <col:93> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56142e0b7a98 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56142e0b7a30 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56142e0b7a18 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56142e0b79f8 <col:112> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56142e0b7a80 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56142e0b7a68 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56142e0b7a48 <col:131> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56142e0b7ce0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56142e0b7cc8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56142e0b7ad8 <col:148> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x56142e0b7ca8 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x56142e0b7c78 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x56142e0b7b98 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56142e0b7b50 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56142e0b7b38 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56142e0b7af8 <col:166> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56142e0b7b80 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56142e0b7b68 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56142e0b7b18 <col:184> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56142e0b7c30 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56142e0b7be8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56142e0b7bb8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56142e0b7c60 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x56142e0b7c48 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x56142e0b7c10 <col:212> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56142e0b83c8 <line:824:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b7e10 <col:3> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b83b0 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56142e0b8380 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x56142e0b8338 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56142e0b8320 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56142e0b7e30 <col:20> '_Bool' lvalue Var 0x56142e0ad528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56142e0b8368 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56142e0b8350 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56142e0b7e50 <col:36> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x56142e0b8300 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x56142e0b82d0 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x56142e0b8070 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56142e0b7f80 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56142e0b7ea8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56142e0b7e90 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56142e0b7e70 <col:55> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56142e0b7f60 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56142e0b7ef8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56142e0b7ee0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56142e0b7ec0 <col:74> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56142e0b7f48 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56142e0b7f30 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56142e0b7f10 <col:93> '_Bool' lvalue Var 0x56142e0ad438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56142e0b8050 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56142e0b7fd8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56142e0b7fc0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56142e0b7fa0 <col:112> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56142e0b8038 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56142e0b8020 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56142e0b7ff0 <col:131> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56142e0b82b8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56142e0b82a0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56142e0b8090 <col:148> '_Bool' lvalue Var 0x56142e0acfe8 'y$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x56142e0b8280 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x56142e0b8250 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x56142e0b8150 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56142e0b8108 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56142e0b80f0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56142e0b80b0 <col:166> '_Bool' lvalue Var 0x56142e0ad340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56142e0b8138 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56142e0b8120 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56142e0b80d0 <col:184> '_Bool' lvalue Var 0x56142e0acdb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56142e0b8220 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56142e0b81a0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56142e0b8170 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56142e0b8238 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x56142e0b81f8 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x56142e0b81c8 <col:219> 'int' 0
    |-BinaryOperator 0x56142e0b8698 <line:825:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b83e8 <col:3> '_Bool' lvalue Var 0x56142e0aca00 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x56142e0b8680 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x56142e0b8668 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x56142e0b8648 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x56142e0b8628 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x56142e0b8590 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x56142e0b84f8 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x56142e0b8460 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x56142e0b8448 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x56142e0b8408 <col:23> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
    |         | | | `-IntegerLiteral 0x56142e0b8428 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x56142e0b84d8 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x56142e0b84c0 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x56142e0b8480 <col:33> 'int' lvalue Var 0x56142e0ac6b0 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x56142e0b84a0 <col:56> 'int' 1
    |         | `-BinaryOperator 0x56142e0b8570 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x56142e0b8558 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x56142e0b8518 <col:61> 'int' lvalue Var 0x56142e0ac7d0 '__unbuffered_p1_EAX' 'int'
    |         |   `-IntegerLiteral 0x56142e0b8538 <col:84> 'int' 2
    |         `-BinaryOperator 0x56142e0b8608 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x56142e0b85f0 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56142e0b85b0 <col:89> 'int' lvalue Var 0x56142e0ac8f0 '__unbuffered_p1_EBX' 'int'
    |           `-IntegerLiteral 0x56142e0b85d0 <col:112> 'int' 0
    |-BinaryOperator 0x56142e0b87c8 <line:826:3, col:37> 'int' '='
    | |-DeclRefExpr 0x56142e0b86b8 <col:3> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
    | `-ConditionalOperator 0x56142e0b8798 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x56142e0b8750 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56142e0b8738 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56142e0b86d8 <col:7> '_Bool' lvalue Var 0x56142e0accb8 'y$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x56142e0b8768 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56142e0b86f8 <col:25> 'int' lvalue Var 0x56142e0acd38 'y$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x56142e0b8780 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x56142e0b8718 <col:37> 'int' lvalue Var 0x56142e0acc20 'y' 'int'
    |-BinaryOperator 0x56142e0b8860 <line:827:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x56142e0b87e8 <col:3> '_Bool' lvalue Var 0x56142e0accb8 'y$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x56142e0b8838 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x56142e0b8808 <col:28> 'int' 0
    |-CallExpr 0x56142e0b88b8 <line:828:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56142e0b88a0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56142e0b8880 <col:3> 'void ()' Function 0x56142e053410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56142e0b8930 <line:829:3, col:36> 'void'
    | |-ImplicitCastExpr 0x56142e0b8918 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56142e0b88d8 <col:3> 'void (int)' Function 0x56142e0530d8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x56142e0b8970 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x56142e0b8958 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x56142e0b88f8 <col:21> '_Bool' lvalue Var 0x56142e0aca00 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x56142e0b89a8 <line:830:3, col:10>
      `-IntegerLiteral 0x56142e0b8988 <col:10> 'int' 0
