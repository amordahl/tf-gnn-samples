TranslationUnitDecl 0x561e7a808698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x561e7a808f58 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x561e7a808c30 '__int128'
|-TypedefDecl 0x561e7a808fc8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x561e7a808c50 'unsigned __int128'
|-TypedefDecl 0x561e7a8092d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x561e7a8090a0 'struct __NSConstantString_tag'
|   `-Record 0x561e7a809020 '__NSConstantString_tag'
|-TypedefDecl 0x561e7a809378 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x561e7a809330 'char *'
|   `-BuiltinType 0x561e7a808730 'char'
|-TypedefDecl 0x561e7a848330 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x561e7a809610 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x561e7a809450 'struct __va_list_tag'
|     `-Record 0x561e7a8093d0 '__va_list_tag'
|-EnumDecl 0x561e7a848388 <termination-crafted-lit/ChenFlurMukhopadhyay-SAS2012-Ex2.10_false-no-overflow.c:18:9, col:26> col:9
| |-EnumConstantDecl 0x561e7a848458 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x561e7a8484a8 <col:22> col:22 true 'int'
|-TypedefDecl 0x561e7a848560 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x561e7a848500 'enum bool' sugar
|   `-EnumType 0x561e7a848430 'bool'
|     `-Enum 0x561e7a848388 ''
|-FunctionDecl 0x561e7a8486a8 <line:20:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x561e7a8487e8 <line:22:1, line:31:1> line:22:5 main 'int ()'
  `-CompoundStmt 0x561e7a848e20 <col:12, line:31:1>
    |-DeclStmt 0x561e7a8489a0 <line:23:5, col:13>
    | |-VarDecl 0x561e7a8488a0 <col:5, col:9> col:9 used x 'int'
    | `-VarDecl 0x561e7a848920 <col:5, col:12> col:12 used y 'int'
    |-BinaryOperator 0x561e7a848a68 <line:24:5, col:31> 'int' '='
    | |-DeclRefExpr 0x561e7a8489b8 <col:5> 'int' lvalue Var 0x561e7a8488a0 'x' 'int'
    | `-CallExpr 0x561e7a848a48 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x561e7a848a30 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x561e7a8489d8 <col:9> 'int (void)' Function 0x561e7a8486a8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x561e7a848b00 <line:25:5, col:31> 'int' '='
    | |-DeclRefExpr 0x561e7a848a88 <col:5> 'int' lvalue Var 0x561e7a848920 'y' 'int'
    | `-CallExpr 0x561e7a848ae0 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x561e7a848ac8 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x561e7a848aa8 <col:9> 'int (void)' Function 0x561e7a8486a8 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x561e7a848dd8 <line:26:5, line:29:5>
    | |-BinaryOperator 0x561e7a848c10 <line:26:12, col:25> 'int' '&&'
    | | |-BinaryOperator 0x561e7a848b78 <col:12, col:16> 'int' '>'
    | | | |-ImplicitCastExpr 0x561e7a848b60 <col:12> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x561e7a848b20 <col:12> 'int' lvalue Var 0x561e7a8488a0 'x' 'int'
    | | | `-IntegerLiteral 0x561e7a848b40 <col:16> 'int' 0
    | | `-BinaryOperator 0x561e7a848bf0 <col:21, col:25> 'int' '<'
    | |   |-ImplicitCastExpr 0x561e7a848bd8 <col:21> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x561e7a848b98 <col:21> 'int' lvalue Var 0x561e7a848920 'y' 'int'
    | |   `-IntegerLiteral 0x561e7a848bb8 <col:25> 'int' 0
    | `-CompoundStmt 0x561e7a848db8 <col:28, line:29:5>
    |   |-BinaryOperator 0x561e7a848ce0 <line:27:9, col:17> 'int' '='
    |   | |-DeclRefExpr 0x561e7a848c30 <col:9> 'int' lvalue Var 0x561e7a8488a0 'x' 'int'
    |   | `-BinaryOperator 0x561e7a848cc0 <col:13, col:17> 'int' '+'
    |   |   |-ImplicitCastExpr 0x561e7a848c90 <col:13> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x561e7a848c50 <col:13> 'int' lvalue Var 0x561e7a8488a0 'x' 'int'
    |   |   `-ImplicitCastExpr 0x561e7a848ca8 <col:17> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x561e7a848c70 <col:17> 'int' lvalue Var 0x561e7a848920 'y' 'int'
    |   `-BinaryOperator 0x561e7a848d98 <line:28:9, col:17> 'int' '='
    |     |-DeclRefExpr 0x561e7a848d00 <col:9> 'int' lvalue Var 0x561e7a848920 'y' 'int'
    |     `-BinaryOperator 0x561e7a848d78 <col:13, col:17> 'int' '-'
    |       |-ImplicitCastExpr 0x561e7a848d60 <col:13> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x561e7a848d20 <col:13> 'int' lvalue Var 0x561e7a848920 'y' 'int'
    |       `-IntegerLiteral 0x561e7a848d40 <col:17> 'int' 1
    `-ReturnStmt 0x561e7a848e10 <line:30:5, col:12>
      `-IntegerLiteral 0x561e7a848df0 <col:12> 'int' 0
