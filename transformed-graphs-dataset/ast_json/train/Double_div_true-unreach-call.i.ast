TranslationUnitDecl 0x557ffe3d3f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x557ffe3d4848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x557ffe3d4520 '__int128'
|-TypedefDecl 0x557ffe3d48b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x557ffe3d4540 'unsigned __int128'
|-TypedefDecl 0x557ffe3d4bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x557ffe3d4990 'struct __NSConstantString_tag'
|   `-Record 0x557ffe3d4910 '__NSConstantString_tag'
|-TypedefDecl 0x557ffe3d4c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x557ffe3d4c20 'char *'
|   `-BuiltinType 0x557ffe3d4020 'char'
|-TypedefDecl 0x557ffe413cf0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x557ffe3d4f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x557ffe3d4d40 'struct __va_list_tag'
|     `-Record 0x557ffe3d4cc0 '__va_list_tag'
|-FunctionDecl 0x557ffe413dd0 <floats-esbmc-regression/Double_div_true-unreach-call.i:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x557ffe413fa0 <line:2:1, col:88> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x557ffe413ed0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x557ffe4141f0 <col:34, col:88>
|   |-IfStmt 0x557ffe4141c8 <col:36, col:78>
|   | |-UnaryOperator 0x557ffe4140a0 <col:40, col:46> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x557ffe414088 <col:41, col:46> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x557ffe414068 <col:41, col:46> 'int' lvalue
|   | |     `-DeclRefExpr 0x557ffe414048 <col:42> 'int' lvalue ParmVar 0x557ffe413ed0 'cond' 'int'
|   | `-CompoundStmt 0x557ffe4141b0 <col:49, col:78>
|   |   `-LabelStmt 0x557ffe414198 <col:51, col:75> 'ERROR'
|   |     `-CallExpr 0x557ffe414128 <col:58, col:75> 'void'
|   |       `-ImplicitCastExpr 0x557ffe414110 <col:58> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x557ffe4140b8 <col:58> 'void () __attribute__((noreturn))' Function 0x557ffe413dd0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x557ffe4141e0 <col:80>
`-FunctionDecl 0x557ffe414268 <line:7:1, line:20:1> line:7:5 main 'int ()'
  `-CompoundStmt 0x557ffe414820 <line:8:1, line:20:1>
    |-DeclStmt 0x557ffe4143a8 <line:9:3, col:17>
    | `-VarDecl 0x557ffe414320 <col:3, col:14> col:10 used x 'double' cinit
    |   `-FloatingLiteral 0x557ffe414388 <col:14> 'double' 1.000000e+00
    |-DeclStmt 0x557ffe4144b8 <line:10:3, col:20>
    | `-VarDecl 0x557ffe4143d8 <col:3, col:17> col:10 used x1 'double' cinit
    |   `-BinaryOperator 0x557ffe414498 <col:15, col:17> 'double' '/'
    |     |-ImplicitCastExpr 0x557ffe414480 <col:15> 'double' <LValueToRValue>
    |     | `-DeclRefExpr 0x557ffe414440 <col:15> 'double' lvalue Var 0x557ffe414320 'x' 'double'
    |     `-FloatingLiteral 0x557ffe414460 <col:17> 'double' 2.500000e+00
    |-WhileStmt 0x557ffe4146b0 <line:12:3, line:16:3>
    | |-BinaryOperator 0x557ffe414540 <line:12:9, col:15> 'int' '!='
    | | |-ImplicitCastExpr 0x557ffe414510 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x557ffe4144d0 <col:9> 'double' lvalue Var 0x557ffe4143d8 'x1' 'double'
    | | `-ImplicitCastExpr 0x557ffe414528 <col:15> 'double' <LValueToRValue>
    | |   `-DeclRefExpr 0x557ffe4144f0 <col:15> 'double' lvalue Var 0x557ffe414320 'x' 'double'
    | `-CompoundStmt 0x557ffe414690 <line:13:3, line:16:3>
    |   |-BinaryOperator 0x557ffe4145b8 <line:14:5, col:9> 'double' '='
    |   | |-DeclRefExpr 0x557ffe414560 <col:5> 'double' lvalue Var 0x557ffe414320 'x' 'double'
    |   | `-ImplicitCastExpr 0x557ffe4145a0 <col:9> 'double' <LValueToRValue>
    |   |   `-DeclRefExpr 0x557ffe414580 <col:9> 'double' lvalue Var 0x557ffe4143d8 'x1' 'double'
    |   `-BinaryOperator 0x557ffe414670 <line:15:5, col:12> 'double' '='
    |     |-DeclRefExpr 0x557ffe4145d8 <col:5> 'double' lvalue Var 0x557ffe4143d8 'x1' 'double'
    |     `-BinaryOperator 0x557ffe414650 <col:10, col:12> 'double' '/'
    |       |-ImplicitCastExpr 0x557ffe414638 <col:10> 'double' <LValueToRValue>
    |       | `-DeclRefExpr 0x557ffe4145f8 <col:10> 'double' lvalue Var 0x557ffe414320 'x' 'double'
    |       `-FloatingLiteral 0x557ffe414618 <col:12> 'double' 2.500000e+00
    |-CallExpr 0x557ffe4147c8 <line:18:3, col:27> 'void'
    | |-ImplicitCastExpr 0x557ffe4147b0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x557ffe4146c8 <col:3> 'void (int)' Function 0x557ffe413fa0 '__VERIFIER_assert' 'void (int)'
    | `-BinaryOperator 0x557ffe414758 <col:21, col:26> 'int' '=='
    |   |-ImplicitCastExpr 0x557ffe414728 <col:21> 'double' <LValueToRValue>
    |   | `-DeclRefExpr 0x557ffe4146e8 <col:21> 'double' lvalue Var 0x557ffe414320 'x' 'double'
    |   `-ImplicitCastExpr 0x557ffe414740 <col:26> 'double' <IntegralToFloating>
    |     `-IntegerLiteral 0x557ffe414708 <col:26> 'int' 0
    `-ReturnStmt 0x557ffe414810 <line:19:3, col:10>
      `-IntegerLiteral 0x557ffe4147f0 <col:10> 'int' 0
