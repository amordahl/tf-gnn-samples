TranslationUnitDecl 0x55df510bf698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55df510bff58 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55df510bfc30 '__int128'
|-TypedefDecl 0x55df510bffc8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55df510bfc50 'unsigned __int128'
|-TypedefDecl 0x55df510c02d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55df510c00a0 'struct __NSConstantString_tag'
|   `-Record 0x55df510c0020 '__NSConstantString_tag'
|-TypedefDecl 0x55df510c0378 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55df510c0330 'char *'
|   `-BuiltinType 0x55df510bf730 'char'
|-TypedefDecl 0x55df510ff630 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55df510c0610 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55df510c0450 'struct __va_list_tag'
|     `-Record 0x55df510c03d0 '__va_list_tag'
|-FunctionDecl 0x55df510ff758 <termination-crafted-lit/LeeJonesBen-Amram-POPL2001-Ex6_false-no-overflow.c:11:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-FunctionDecl 0x55df510ff9b8 <line:13:1, col:19> col:5 used f 'int (int, int)'
| |-ParmVarDecl 0x55df510ff858 <col:7, col:11> col:11 a 'int'
| `-ParmVarDecl 0x55df510ff8d8 <col:14, col:18> col:18 b 'int'
|-FunctionDecl 0x55df510ffba0 <line:15:1, col:19> col:5 used g 'int (int, int)'
| |-ParmVarDecl 0x55df510ffa80 <col:7, col:11> col:11 c 'int'
| `-ParmVarDecl 0x55df510ffb00 <col:14, col:18> col:18 d 'int'
|-FunctionDecl 0x55df510ffd88 prev 0x55df510ff9b8 <line:17:1, line:23:1> line:17:5 used f 'int (int, int)'
| |-ParmVarDecl 0x55df510ffc68 <col:7, col:11> col:11 used a 'int'
| |-ParmVarDecl 0x55df510ffce8 <col:14, col:18> col:18 used b 'int'
| `-CompoundStmt 0x55df51100170 <col:21, line:23:1>
|   `-IfStmt 0x55df51100148 <line:18:2, line:22:2> has_else
|     |-BinaryOperator 0x55df510ffe90 <line:18:6, col:11> 'int' '=='
|     | |-ImplicitCastExpr 0x55df510ffe78 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55df510ffe38 <col:6> 'int' lvalue ParmVar 0x55df510ffce8 'b' 'int'
|     | `-IntegerLiteral 0x55df510ffe58 <col:11> 'int' 0
|     |-CompoundStmt 0x55df510fffb0 <col:14, line:20:2>
|     | `-ReturnStmt 0x55df510fffa0 <line:19:3, col:16>
|     |   `-CallExpr 0x55df510fff58 <col:10, col:16> 'int'
|     |     |-ImplicitCastExpr 0x55df510fff40 <col:10> 'int (*)(int, int)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55df510ffeb0 <col:10> 'int (int, int)' Function 0x55df510ffba0 'g' 'int (int, int)'
|     |     |-ImplicitCastExpr 0x55df510fff88 <col:12> 'int' <LValueToRValue>
|     |     | `-DeclRefExpr 0x55df510ffed0 <col:12> 'int' lvalue ParmVar 0x55df510ffc68 'a' 'int'
|     |     `-IntegerLiteral 0x55df510ffef0 <col:15> 'int' 0
|     `-CompoundStmt 0x55df51100130 <line:20:9, line:22:2>
|       `-ReturnStmt 0x55df51100120 <line:21:3, col:20>
|         `-CallExpr 0x55df511000f0 <col:10, col:20> 'int'
|           |-ImplicitCastExpr 0x55df511000d8 <col:10> 'int (*)(int, int)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55df510fffc8 <col:10> 'int (int, int)' Function 0x55df510ffd88 'f' 'int (int, int)'
|           |-BinaryOperator 0x55df51100040 <col:12, col:14> 'int' '+'
|           | |-IntegerLiteral 0x55df510fffe8 <col:12> 'int' 1
|           | `-ImplicitCastExpr 0x55df51100028 <col:14> 'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55df51100008 <col:14> 'int' lvalue ParmVar 0x55df510ffc68 'a' 'int'
|           `-BinaryOperator 0x55df511000b8 <col:17, col:19> 'int' '-'
|             |-ImplicitCastExpr 0x55df511000a0 <col:17> 'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55df51100060 <col:17> 'int' lvalue ParmVar 0x55df510ffce8 'b' 'int'
|             `-IntegerLiteral 0x55df51100080 <col:19> 'int' 1
|-FunctionDecl 0x55df511002c0 prev 0x55df510ffba0 <line:25:1, line:31:1> line:25:5 used g 'int (int, int)'
| |-ParmVarDecl 0x55df511001a0 <col:7, col:11> col:11 used c 'int'
| |-ParmVarDecl 0x55df51100220 <col:14, col:18> col:18 used d 'int'
| `-CompoundStmt 0x55df511005f0 <col:21, line:31:1>
|   `-IfStmt 0x55df511005c8 <line:26:2, line:30:2> has_else
|     |-BinaryOperator 0x55df511003c8 <line:26:6, col:11> 'int' '=='
|     | |-ImplicitCastExpr 0x55df511003b0 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55df51100370 <col:6> 'int' lvalue ParmVar 0x55df511001a0 'c' 'int'
|     | `-IntegerLiteral 0x55df51100390 <col:11> 'int' 0
|     |-CompoundStmt 0x55df51100430 <col:14, line:28:2>
|     | `-ReturnStmt 0x55df51100420 <line:27:3, col:10>
|     |   `-ImplicitCastExpr 0x55df51100408 <col:10> 'int' <LValueToRValue>
|     |     `-DeclRefExpr 0x55df511003e8 <col:10> 'int' lvalue ParmVar 0x55df51100220 'd' 'int'
|     `-CompoundStmt 0x55df511005b0 <line:28:9, line:30:2>
|       `-ReturnStmt 0x55df511005a0 <line:29:3, col:20>
|         `-CallExpr 0x55df51100570 <col:10, col:20> 'int'
|           |-ImplicitCastExpr 0x55df51100558 <col:10> 'int (*)(int, int)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55df51100448 <col:10> 'int (int, int)' Function 0x55df511002c0 'g' 'int (int, int)'
|           |-BinaryOperator 0x55df511004c0 <col:12, col:14> 'int' '-'
|           | |-ImplicitCastExpr 0x55df511004a8 <col:12> 'int' <LValueToRValue>
|           | | `-DeclRefExpr 0x55df51100468 <col:12> 'int' lvalue ParmVar 0x55df511001a0 'c' 'int'
|           | `-IntegerLiteral 0x55df51100488 <col:14> 'int' 1
|           `-BinaryOperator 0x55df51100538 <col:17, col:19> 'int' '+'
|             |-IntegerLiteral 0x55df511004e0 <col:17> 'int' 1
|             `-ImplicitCastExpr 0x55df51100520 <col:19> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55df51100500 <col:19> 'int' lvalue ParmVar 0x55df51100220 'd' 'int'
`-FunctionDecl 0x55df51122828 <line:33:1, line:40:1> line:33:5 main 'int ()'
  `-CompoundStmt 0x55df51122d28 <col:12, line:40:1>
    |-DeclStmt 0x55df511229d8 <line:34:2, col:33>
    | `-VarDecl 0x55df511228e0 <col:2, col:32> col:6 used a 'int' cinit
    |   `-CallExpr 0x55df511229b8 <col:10, col:32> 'int'
    |     `-ImplicitCastExpr 0x55df511229a0 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x55df51122948 <col:10> 'int (void)' Function 0x55df510ff758 '__VERIFIER_nondet_int' 'int (void)'
    |-DeclStmt 0x55df51122ac8 <line:35:2, col:33>
    | `-VarDecl 0x55df51122a08 <col:2, col:32> col:6 used b 'int' cinit
    |   `-CallExpr 0x55df51122aa8 <col:10, col:32> 'int'
    |     `-ImplicitCastExpr 0x55df51122a90 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x55df51122a70 <col:10> 'int (void)' Function 0x55df510ff758 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x55df51122ce0 <line:36:2, line:38:2>
    | |-BinaryOperator 0x55df51122bd0 <line:36:6, col:21> 'int' '&&'
    | | |-BinaryOperator 0x55df51122b38 <col:6, col:11> 'int' '>='
    | | | |-ImplicitCastExpr 0x55df51122b20 <col:6> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x55df51122ae0 <col:6> 'int' lvalue Var 0x55df511228e0 'a' 'int'
    | | | `-IntegerLiteral 0x55df51122b00 <col:11> 'int' 0
    | | `-BinaryOperator 0x55df51122bb0 <col:16, col:21> 'int' '>='
    | |   |-ImplicitCastExpr 0x55df51122b98 <col:16> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x55df51122b58 <col:16> 'int' lvalue Var 0x55df51122a08 'b' 'int'
    | |   `-IntegerLiteral 0x55df51122b78 <col:21> 'int' 0
    | `-CompoundStmt 0x55df51122cc8 <col:24, line:38:2>
    |   `-CallExpr 0x55df51122c68 <line:37:3, col:9> 'int'
    |     |-ImplicitCastExpr 0x55df51122c50 <col:3> 'int (*)(int, int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x55df51122bf0 <col:3> 'int (int, int)' Function 0x55df510ffd88 'f' 'int (int, int)'
    |     |-ImplicitCastExpr 0x55df51122c98 <col:5> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x55df51122c10 <col:5> 'int' lvalue Var 0x55df511228e0 'a' 'int'
    |     `-ImplicitCastExpr 0x55df51122cb0 <col:8> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x55df51122c30 <col:8> 'int' lvalue Var 0x55df51122a08 'b' 'int'
    `-ReturnStmt 0x55df51122d18 <line:39:2, col:9>
      `-IntegerLiteral 0x55df51122cf8 <col:9> 'int' 0
