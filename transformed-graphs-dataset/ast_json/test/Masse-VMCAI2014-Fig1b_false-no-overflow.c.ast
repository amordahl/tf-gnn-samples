TranslationUnitDecl 0x5654582c3538 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5654582c3df8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5654582c3ad0 '__int128'
|-TypedefDecl 0x5654582c3e68 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5654582c3af0 'unsigned __int128'
|-TypedefDecl 0x5654582c4170 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5654582c3f40 'struct __NSConstantString_tag'
|   `-Record 0x5654582c3ec0 '__NSConstantString_tag'
|-TypedefDecl 0x5654582c4218 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5654582c41d0 'char *'
|   `-BuiltinType 0x5654582c35d0 'char'
|-TypedefDecl 0x5654583032c0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5654582c44b0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5654582c42f0 'struct __va_list_tag'
|     `-Record 0x5654582c4270 '__va_list_tag'
|-EnumDecl 0x565458303318 <termination-crafted-lit/Masse-VMCAI2014-Fig1b_false-no-overflow.c:9:9, col:26> col:9
| |-EnumConstantDecl 0x5654583033e8 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x565458303438 <col:22> col:22 true 'int'
|-TypedefDecl 0x5654583034f0 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x565458303490 'enum bool' sugar
|   `-EnumType 0x5654583033c0 'bool'
|     `-Enum 0x565458303318 ''
|-FunctionDecl 0x565458303638 <line:11:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x565458303778 <line:13:1, line:24:1> line:13:5 main 'int ()'
  `-CompoundStmt 0x565458303d60 <col:12, line:24:1>
    |-DeclStmt 0x565458303898 <line:14:2, col:7>
    | `-VarDecl 0x565458303830 <col:2, col:6> col:6 used x 'int'
    |-BinaryOperator 0x565458303958 <line:15:5, col:31> 'int' '='
    | |-DeclRefExpr 0x5654583038b0 <col:5> 'int' lvalue Var 0x565458303830 'x' 'int'
    | `-CallExpr 0x565458303938 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x565458303920 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5654583038d0 <col:9> 'int (void)' Function 0x565458303638 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x565458303d18 <line:16:2, line:22:2>
    | |-BinaryOperator 0x5654583039d0 <line:16:9, col:14> 'int' '<='
    | | |-ImplicitCastExpr 0x5654583039b8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x565458303978 <col:9> 'int' lvalue Var 0x565458303830 'x' 'int'
    | | `-IntegerLiteral 0x565458303998 <col:14> 'int' 100
    | `-CompoundStmt 0x565458303d00 <col:19, line:22:2>
    |   `-IfStmt 0x565458303cd8 <line:17:3, line:21:3> has_else
    |     |-BinaryOperator 0x565458303a68 <line:17:7, col:34> 'int' '!='
    |     | |-CallExpr 0x565458303a28 <col:7, col:29> 'int'
    |     | | `-ImplicitCastExpr 0x565458303a10 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
    |     | |   `-DeclRefExpr 0x5654583039f0 <col:7> 'int (void)' Function 0x565458303638 '__VERIFIER_nondet_int' 'int (void)'
    |     | `-IntegerLiteral 0x565458303a48 <col:34> 'int' 0
    |     |-CompoundStmt 0x565458303b98 <col:37, line:19:3>
    |     | `-BinaryOperator 0x565458303b78 <line:18:4, col:15> 'int' '='
    |     |   |-DeclRefExpr 0x565458303a88 <col:4> 'int' lvalue Var 0x565458303830 'x' 'int'
    |     |   `-BinaryOperator 0x565458303b58 <col:8, col:15> 'int' '+'
    |     |     |-BinaryOperator 0x565458303b18 <col:8, col:11> 'int' '*'
    |     |     | |-UnaryOperator 0x565458303ac8 <col:8, col:9> 'int' prefix '-'
    |     |     | | `-IntegerLiteral 0x565458303aa8 <col:9> 'int' 2
    |     |     | `-ImplicitCastExpr 0x565458303b00 <col:11> 'int' <LValueToRValue>
    |     |     |   `-DeclRefExpr 0x565458303ae0 <col:11> 'int' lvalue Var 0x565458303830 'x' 'int'
    |     |     `-IntegerLiteral 0x565458303b38 <col:15> 'int' 2
    |     `-CompoundStmt 0x565458303cc0 <line:19:10, line:21:3>
    |       `-BinaryOperator 0x565458303ca0 <line:20:4, col:15> 'int' '='
    |         |-DeclRefExpr 0x565458303bb0 <col:4> 'int' lvalue Var 0x565458303830 'x' 'int'
    |         `-BinaryOperator 0x565458303c80 <col:8, col:15> 'int' '-'
    |           |-BinaryOperator 0x565458303c40 <col:8, col:11> 'int' '*'
    |           | |-UnaryOperator 0x565458303bf0 <col:8, col:9> 'int' prefix '-'
    |           | | `-IntegerLiteral 0x565458303bd0 <col:9> 'int' 3
    |           | `-ImplicitCastExpr 0x565458303c28 <col:11> 'int' <LValueToRValue>
    |           |   `-DeclRefExpr 0x565458303c08 <col:11> 'int' lvalue Var 0x565458303830 'x' 'int'
    |           `-IntegerLiteral 0x565458303c60 <col:15> 'int' 2
    `-ReturnStmt 0x565458303d50 <line:23:2, col:9>
      `-IntegerLiteral 0x565458303d30 <col:9> 'int' 0
