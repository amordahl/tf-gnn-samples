TranslationUnitDecl 0x556eff661f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x556eff662848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x556eff662520 '__int128'
|-TypedefDecl 0x556eff6628b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x556eff662540 'unsigned __int128'
|-TypedefDecl 0x556eff662bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x556eff662990 'struct __NSConstantString_tag'
|   `-Record 0x556eff662910 '__NSConstantString_tag'
|-TypedefDecl 0x556eff662c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x556eff662c20 'char *'
|   `-BuiltinType 0x556eff662020 'char'
|-TypedefDecl 0x556eff6a1b60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x556eff662f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x556eff662d40 'struct __va_list_tag'
|     `-Record 0x556eff662cc0 '__va_list_tag'
|-FunctionDecl 0x556eff6a1ca0 <pthread-wmm/safe004_power.oepc_false-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x556eff6a1bd0 <col:31> col:34 'int'
|-FunctionDecl 0x556eff6a1e68 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x556eff6a1f90 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x556eff6a20d8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x556eff6a2048 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x556eff6a2308 <col:40, col:99>
|   |-IfStmt 0x556eff6a22d8 <col:42, col:88>
|   | |-UnaryOperator 0x556eff6a21b8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x556eff6a21a0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x556eff6a2180 <col:47> 'int' lvalue ParmVar 0x556eff6a2048 'expression' 'int'
|   | `-CompoundStmt 0x556eff6a22c0 <col:59, col:88>
|   |   `-LabelStmt 0x556eff6a22a8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x556eff6a2238 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x556eff6a2220 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x556eff6a21d0 <col:68> 'void () __attribute__((noreturn))' Function 0x556eff6a1f90 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x556eff6a22f0 <col:89>
|   `-ReturnStmt 0x556eff6a22f8 <col:91>
|-FunctionDecl 0x556eff6a2350 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x556eff6a2410 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x556eff6a2790 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556eff6a24c8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x556eff6a2548 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x556eff6a25c8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x556eff6a2648 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x556eff6a2850 <line:10:22>
|-FunctionDecl 0x556eff6c88a0 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556eff6a28c0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x556eff6a2940 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x556eff6a29c0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x556eff6a2a40 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x556eff6c8960 <line:13:22>
|-FunctionDecl 0x556eff6c8c10 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556eff6c89d0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x556eff6c8a50 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x556eff6c8ad0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x556eff6c8cc8 <line:15:22>
|-TypedefDecl 0x556eff6c8d38 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x556eff6620e0 'unsigned char'
|-TypedefDecl 0x556eff6c8da8 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x556eff662100 'unsigned short'
|-TypedefDecl 0x556eff6c8e18 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-TypedefDecl 0x556eff6c8e88 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c8ef8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x556eff662040 'signed char'
|-TypedefDecl 0x556eff6c8f68 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x556eff6620e0 'unsigned char'
|-TypedefDecl 0x556eff6c8fd8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x556eff662060 'short'
|-TypedefDecl 0x556eff6c9048 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x556eff662100 'unsigned short'
|-TypedefDecl 0x556eff6c90b8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x556eff662080 'int'
|-TypedefDecl 0x556eff6c9128 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-TypedefDecl 0x556eff6c9198 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6c9208 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c9278 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6c92e8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c9358 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c93c8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-TypedefDecl 0x556eff6c9438 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-TypedefDecl 0x556eff6c94a8 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c9518 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c9588 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-TypedefDecl 0x556eff6c95f8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c9668 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6c96d8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6c9748 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x556eff662080 'int'
|-RecordDecl 0x556eff6c97a0 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x556eff6c9918 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x556eff6c99d0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x556eff6c9970 'struct __fsid_t' sugar
|   `-RecordType 0x556eff6c9820 '__fsid_t'
|     `-Record 0x556eff6c97a0 ''
|-TypedefDecl 0x556eff6c9a58 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6c9ac8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c9b38 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6c9ba8 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-TypedefDecl 0x556eff6c9c18 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6c9c88 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-TypedefDecl 0x556eff6c9cf8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6c9d68 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x556eff662080 'int'
|-TypedefDecl 0x556eff6c9dd8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x556eff662080 'int'
|-TypedefDecl 0x556eff6c9e48 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x556eff662080 'int'
|-TypedefDecl 0x556eff6c9eb8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x556eff6627a0 'void *'
|   `-BuiltinType 0x556eff661fe0 'void'
|-TypedefDecl 0x556eff6c9f28 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6c9f98 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6ca008 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6ca078 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6ca0e8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6ca158 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6ca1c8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6ca238 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6ca2a8 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6ca318 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6ca388 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6ca418 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x556eff6ca3e0 '__off64_t' sugar
|   |-Typedef 0x556eff6c96d8 '__off64_t'
|   `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6ca510 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x556eff6ca4d0 '__quad_t *'
|   `-TypedefType 0x556eff6ca470 '__quad_t' sugar
|     |-Typedef 0x556eff6c9278 '__quad_t'
|     `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6ca580 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x556eff662c20 'char *'
|   `-BuiltinType 0x556eff662020 'char'
|-TypedefDecl 0x556eff6ca5f0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6ca660 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-FunctionDecl 0x556eff6ca7a8 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x556eff6ca6d0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x556eff6caae8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x556eff6caad8 <line:72:3, col:34>
|     `-CallExpr 0x556eff6caa98 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x556eff6caa80 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x556eff6caa10 <col:10> '<builtin fn type>' Function 0x556eff6ca880 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x556eff6caac0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556eff6caa30 <col:29> 'unsigned int' lvalue ParmVar 0x556eff6ca6d0 '__bsx' 'unsigned int'
|-FunctionDecl 0x556eff6ca880 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x556eff6ca920 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x556eff6ca990 <col:10> Implicit
| `-ConstAttr 0x556eff6ca9e8 <col:10> Implicit
|-FunctionDecl 0x556eff6cac40 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x556eff6cab38 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x556eff6caf58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x556eff6caf48 <line:77:3, col:34>
|     `-CallExpr 0x556eff6caf08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x556eff6caef0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x556eff6cae78 <col:10> '<builtin fn type>' Function 0x556eff6cace8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x556eff6caf30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x556eff6cae98 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x556eff6cab38 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x556eff6cace8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x556eff6cad88 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x556eff6cadf8 <col:10> Implicit
| `-ConstAttr 0x556eff6cae50 <col:10> Implicit
|-TypedefDecl 0x556eff6caf88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-TypedefDecl 0x556eff6cb018 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x556eff6cafe0 '__time_t' sugar
|   |-Typedef 0x556eff6c9c18 '__time_t'
|   `-BuiltinType 0x556eff6620a0 'long'
|-RecordDecl 0x556eff6cb070 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x556eff6cb128 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x556eff6cb1b8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x556eff6cb248 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x556eff6cb210 '__pid_t' sugar
|   |-Typedef 0x556eff6c9748 '__pid_t'
|   `-BuiltinType 0x556eff662080 'int'
|-RecordDecl 0x556eff6cb2a0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x556eff6cb360 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x556eff6cb3b0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x556eff6cb470 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x556eff6cb4d8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-RecordDecl 0x556eff6cb530 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x556eff6cb7c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x556eff6cd8b0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x556eff6cb810 'struct cpu_set_t' sugar
|   `-RecordType 0x556eff6cb5b0 'cpu_set_t'
|     `-Record 0x556eff6cb530 ''
|-FunctionDecl 0x556eff6cdb88 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x556eff6cd958 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x556eff6cda60 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x556eff6cdc38 <line:107:19>
|-FunctionDecl 0x556eff6cde10 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x556eff6cdca0 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x556eff6cdeb8 <col:69>
|-FunctionDecl 0x556eff6ce030 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x556eff6cdf20 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x556eff6ce0d8 <col:64>
|-FunctionDecl 0x556eff6ce398 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x556eff6ce140 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x556eff6ce278 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x556eff6ce448 <line:113:22>
|-FunctionDecl 0x556eff6ce6c8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x556eff6ce4b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x556eff6ce5a8 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x556eff6ce778 <col:88>
|-FunctionDecl 0x556eff6cea98 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x556eff6ce7e0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x556eff6ce8c0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x556eff6ce950 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x556eff6ceb50 <col:62>
|-FunctionDecl 0x556eff6cecc8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x556eff6cebb8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x556eff6ced70 <col:63>
|-FunctionDecl 0x556eff6cee98 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x556eff6cef38 <col:47>
|-FunctionDecl 0x556eff6cf040 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x556eff6cefa8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x556eff6cf0e8 <col:69>
|-FunctionDecl 0x556eff6cf1f0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x556eff6cf158 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x556eff6cf298 <col:69>
|-FunctionDecl 0x556eff6cf558 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x556eff6cf300 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x556eff6cf438 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x556eff6cf608 <col:88>
|-TypedefDecl 0x556eff6cf698 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x556eff6cf660 '__clock_t' sugar
|   |-Typedef 0x556eff6c9a58 '__clock_t'
|   `-BuiltinType 0x556eff6620a0 'long'
|-TypedefDecl 0x556eff6cf728 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x556eff6cf6f0 '__clockid_t' sugar
|   |-Typedef 0x556eff6c9e48 '__clockid_t'
|   `-BuiltinType 0x556eff662080 'int'
|-TypedefDecl 0x556eff6cf7b8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x556eff6cf780 '__timer_t' sugar
|   |-Typedef 0x556eff6c9eb8 '__timer_t'
|   `-PointerType 0x556eff6627a0 'void *'
|     `-BuiltinType 0x556eff661fe0 'void'
|-RecordDecl 0x556eff6cf810 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x556eff6cf8e8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x556eff6cf950 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x556eff6cf9b8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x556eff6cfa20 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x556eff6cfa88 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x556eff6cfaf0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x556eff6cfb58 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x556eff6cfbc0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x556eff6cfc28 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x556eff6cfc90 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x556eff6cfcf8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x556eff6cfd48 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x556eff6cfe18 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x556eff6cfe88 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x556eff6cff30 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x556eff6d0100 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x556eff6d01a0 <col:45>
|-FunctionDecl 0x556eff6d0380 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x556eff6d0270 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x556eff6d0428 <col:54>
|-FunctionDecl 0x556eff6d0628 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x556eff6d0490 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x556eff6d0508 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x556eff6d06d8 <line:157:22>
| `-ConstAttr 0x556eff6d0730 <col:63>
|-FunctionDecl 0x556eff6d1560 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x556eff6d0828 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x556eff6d1608 <col:56>
|-FunctionDecl 0x556eff6d19b0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x556eff6d1678 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x556eff6d16f0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x556eff6d1770 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x556eff6d1868 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x556eff6d1a70 <col:54>
|-RecordDecl 0x556eff6d1ac8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x556eff6d1b78 parent 0x556eff661f88 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x556eff6d1dd8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x556eff6d1e78 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x556eff6d1ee0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x556eff6d1f48 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x556eff6d2038 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x556eff6d2158 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x556eff6d2100 'struct __locale_struct *'
|   `-ElaboratedType 0x556eff6d2090 'struct __locale_struct' sugar
|     `-RecordType 0x556eff6d1b50 'struct __locale_struct'
|       `-Record 0x556eff6d1ac8 '__locale_struct'
|-TypedefDecl 0x556eff6d2208 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x556eff6d21d0 '__locale_t' sugar
|   |-Typedef 0x556eff6d2158 '__locale_t'
|   `-PointerType 0x556eff6d2100 'struct __locale_struct *'
|     `-ElaboratedType 0x556eff6d2090 'struct __locale_struct' sugar
|       `-RecordType 0x556eff6d1b50 'struct __locale_struct'
|         `-Record 0x556eff6d1ac8 '__locale_struct'
|-FunctionDecl 0x556eff6d2610 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x556eff6d2278 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x556eff6d22f0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x556eff6d2370 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x556eff6d2400 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x556eff6d2478 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x556eff6d26d8 <col:40>
|-FunctionDecl 0x556eff6d28c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x556eff6d27a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x556eff6d2970 <col:66>
|-FunctionDecl 0x556eff6d2a80 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x556eff6d29d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x556eff6d2b28 <col:69>
|-FunctionDecl 0x556eff6d2d58 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x556eff6d2b90 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x556eff6d2c20 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x556eff6d2e08 <col:52>
|-FunctionDecl 0x556eff6d2fb0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x556eff6d2e70 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x556eff6d2f00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x556eff6d3060 <col:55>
|-FunctionDecl 0x556eff6d31f8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x556eff6d30e0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x556eff6d32a0 <col:62>
|-FunctionDecl 0x556eff6d3418 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x556eff6d3308 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x556eff6d34c0 <col:60>
|-FunctionDecl 0x556eff6d3718 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x556eff6d3578 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x556eff6d35f8 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x556eff6d37c8 <col:44>
|-FunctionDecl 0x556eff6d39d8 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x556eff6d3830 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x556eff6d38b0 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x556eff6d3a88 <col:49>
|-VarDecl 0x556eff6d3b88 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x556eff6d3c08 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x556eff6d3c88 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x556eff6d3d50 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x556eff6d3e80 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x556eff6d3f20 <col:42>
|-VarDecl 0x556eff6d3f90 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x556eff6d4010 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x556eff6d4198 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x556eff6d4088 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x556eff6d4240 <col:57>
|-FunctionDecl 0x556eff6d4350 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x556eff6d42c0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x556eff6d43f8 <col:56>
|-FunctionDecl 0x556eff6d5540 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x556eff6d4478 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x556eff6d55e8 <col:59>
|-FunctionDecl 0x556eff6d56f0 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x556eff6d5658 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x556eff6d5798 <col:48>
| `-ConstAttr 0x556eff6d57f0 <col:89>
|-FunctionDecl 0x556eff6d5a58 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x556eff6d58a8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x556eff6d5938 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x556eff6d5cb8 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x556eff6d5b48 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556eff6d5bd8 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x556eff6d5d68 <col:88>
|-FunctionDecl 0x556eff6d5f00 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x556eff6d5dd0 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556eff6d5e60 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x556eff6d5fb0 <col:88>
|-FunctionDecl 0x556eff6d61c8 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x556eff6d6018 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556eff6d60a8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x556eff6d6278 <line:208:22>
|-FunctionDecl 0x556eff6d65e8 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x556eff6d62e0 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556eff6d6360 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x556eff6d63f0 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x556eff6d6480 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x556eff6d68e8 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x556eff6d66e8 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x556eff6d67c0 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x556eff6d6998 <col:85>
|-FunctionDecl 0x556eff6d6d88 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x556eff6d6a00 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556eff6d6b38 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x556eff6d6c40 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x556eff6d6e40 <col:52>
|-FunctionDecl 0x556eff6d6fb8 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x556eff6d6ea8 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x556eff6d7060 <col:61>
|-FunctionDecl 0x556eff6d7560 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x556eff6d70c8 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x556eff6d7148 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x556eff6d7278 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x556eff6d7368 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x556eff6d7620 <col:62>
|-FunctionDecl 0x556eff6d7838 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x556eff6d7688 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x556eff6d7718 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x556eff6d78e8 <line:221:22>
|-FunctionDecl 0x556eff6d79e8 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x556eff6d7950 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x556eff6d7a90 <col:65>
|-TypedefDecl 0x556eff6d7b00 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x556eff662140 'unsigned long'
|-RecordDecl 0x556eff6d7b58 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x556eff6d7ca0 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x556eff6d7d08 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556eff6d7db8 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x556eff6d7d60 'union pthread_attr_t' sugar
|   `-RecordType 0x556eff6d7be0 'union pthread_attr_t'
|     `-Record 0x556eff6d7b58 'pthread_attr_t'
|-RecordDecl 0x556eff6d7e10 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x556eff6d7f88 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x556eff6d8000 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x556eff6d80b0 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x556eff6d8050 'struct __pthread_internal_list' sugar
|   `-RecordType 0x556eff6d7e90 'struct __pthread_internal_list'
|     `-Record 0x556eff6d7e10 '__pthread_internal_list'
|-RecordDecl 0x556eff6d8120 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x556eff6d81c8 parent 0x556eff661f88 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x556eff6d82a0 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x556eff6d8308 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x556eff6d8370 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x556eff6d83d8 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x556eff6d8440 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x556eff6d84a8 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x556eff6dc580 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x556eff6dc630 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x556eff6dc720 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x556eff6dc788 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556eff6dc910 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x556eff6dc8b0 'union pthread_mutex_t' sugar
|   `-RecordType 0x556eff6d81a0 'pthread_mutex_t'
|     `-Record 0x556eff6d8120 ''
|-RecordDecl 0x556eff6dc980 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x556eff6dcac0 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x556eff6dcb28 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x556eff6dcbe0 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x556eff6dcb80 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x556eff6dca00 'pthread_mutexattr_t'
|     `-Record 0x556eff6dc980 ''
|-RecordDecl 0x556eff6dcc50 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x556eff6dccf8 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x556eff6dcdc0 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x556eff6dce28 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x556eff6dce90 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x556eff6dcef8 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x556eff6dcf60 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x556eff6dcfc8 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x556eff6dd030 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x556eff6dd098 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x556eff6dd150 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe004_power.oepc_false-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/safe004_power.oepc_false-unreach-call.i:258:3)'
| |-FieldDecl 0x556eff6dd240 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x556eff6dd2a8 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x556eff6dd3e0 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x556eff6dd380 'union pthread_cond_t' sugar
|   `-RecordType 0x556eff6dccd0 'pthread_cond_t'
|     `-Record 0x556eff6dcc50 ''
|-RecordDecl 0x556eff6dd450 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x556eff6dd590 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x556eff6dd5f8 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x556eff6dd6b0 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x556eff6dd650 'union pthread_condattr_t' sugar
|   `-RecordType 0x556eff6dd4d0 'pthread_condattr_t'
|     `-Record 0x556eff6dd450 ''
|-TypedefDecl 0x556eff6dd738 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x556eff662120 'unsigned int'
|-TypedefDecl 0x556eff6dd7a8 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x556eff662080 'int'
|-RecordDecl 0x556eff6dd800 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x556eff6dd8a8 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x556eff6dd970 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x556eff6dd9d8 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x556eff6dda40 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x556eff6ddaa8 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x556eff6ddb10 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x556eff6ddb78 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x556eff6ddbe0 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x556eff6ddc48 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x556eff6ddcb0 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x556eff6ddd18 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x556eff6ddd80 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x556eff6dde30 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe004_power.oepc_false-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/safe004_power.oepc_false-unreach-call.i:281:3)'
| |-FieldDecl 0x556eff6dded8 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x556eff6ddf40 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556eff6de090 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x556eff6de030 'union pthread_rwlock_t' sugar
|   `-RecordType 0x556eff6dd880 'pthread_rwlock_t'
|     `-Record 0x556eff6dd800 ''
|-RecordDecl 0x556eff6de100 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x556eff6de240 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x556eff6de2a8 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556eff6de360 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x556eff6de300 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x556eff6de180 'pthread_rwlockattr_t'
|     `-Record 0x556eff6de100 ''
|-TypedefDecl 0x556eff6de3e8 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x556eff662084 'volatile int' volatile
|   `-BuiltinType 0x556eff662080 'int'
|-RecordDecl 0x556eff6de440 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x556eff6e05b0 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x556eff6e0618 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556eff6e06d0 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x556eff6e0670 'union pthread_barrier_t' sugar
|   `-RecordType 0x556eff6de4c0 'pthread_barrier_t'
|     `-Record 0x556eff6de440 ''
|-RecordDecl 0x556eff6e0740 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x556eff6e0840 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x556eff6e08a8 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x556eff6e0960 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x556eff6e0900 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x556eff6e07c0 'pthread_barrierattr_t'
|     `-Record 0x556eff6e0740 ''
|-TypedefDecl 0x556eff6e0a78 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x556eff6e0a10 'long [8]' 8 
|   `-BuiltinType 0x556eff6620a0 'long'
|-EnumDecl 0x556eff6e0ad0 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x556eff6e0b98 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x556eff6e0be8 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x556eff6e0c38 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x556eff6e0d08 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x556eff6e0d58 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x556eff6e0da8 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x556eff6e0df8 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x556eff6e0e80 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x556eff6e0e68 <col:26> 'int'
| |   `-DeclRefExpr 0x556eff6e0e48 <col:26> 'int' EnumConstant 0x556eff6e0d08 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x556eff6e0f08 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x556eff6e0ef0 <col:29> 'int'
| |   `-DeclRefExpr 0x556eff6e0ed0 <col:29> 'int' EnumConstant 0x556eff6e0d58 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x556eff6e0f90 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x556eff6e0f78 <col:30> 'int'
| |   `-DeclRefExpr 0x556eff6e0f58 <col:30> 'int' EnumConstant 0x556eff6e0da8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x556eff6e1018 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x556eff6e1000 <col:27> 'int'
|     `-DeclRefExpr 0x556eff6e0fe0 <col:27> 'int' EnumConstant 0x556eff6e0e80 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x556eff6e1068 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x556eff6e1138 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x556eff6e11c0 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x556eff6e11a8 <col:30> 'int'
| |   `-DeclRefExpr 0x556eff6e1188 <col:30> 'int' EnumConstant 0x556eff6e1138 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x556eff6e1210 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x556eff6e1298 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x556eff6e1280 <col:29> 'int'
|     `-DeclRefExpr 0x556eff6e1260 <col:29> 'int' EnumConstant 0x556eff6e1210 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x556eff6e12e8 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x556eff6e13b8 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x556eff6e1408 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x556eff6e1458 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x556eff6e14a8 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x556eff6e15c0 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x556eff6e1610 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x556eff6e1660 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x556eff6e16e8 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x556eff6e16d0 <col:31> 'int'
|     `-DeclRefExpr 0x556eff6e16b0 <col:31> 'int' EnumConstant 0x556eff6e15c0 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x556eff6e1738 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x556eff6e1808 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x556eff6e1858 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x556eff6e18a8 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x556eff6e1978 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x556eff6e19c8 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x556eff6e1a18 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x556eff6e1ae8 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x556eff6e1b38 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x556eff6e1b88 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x556eff6e1dc8 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x556eff6e1e30 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x556eff6e1e98 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x556eff6e1fb8 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x556eff6e2008 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x556eff6e20d8 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x556eff6e2128 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x556eff6e2178 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x556eff6e2248 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x556eff6e2298 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x556eff6e28f8 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x556eff6e2390 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x556eff6e24a0 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e26e0 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x556eff6e2760 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x556eff6e29b8 <col:47>
| |-NonNullAttr 0x556eff6e2a10 <col:77, col:94> 1 3
| `-CallbackAttr 0x556eff6e2a48 <line:385:12> Implicit 2 3
|-FunctionDecl 0x556eff6e2b70 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x556eff6e2aa0 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x556eff6e2dc8 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x556eff6e2c28 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x556eff6e2ca8 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x556eff6e2f98 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x556eff6e2e88 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x556eff6e3040 <col:60>
|-FunctionDecl 0x556eff6e3190 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x556eff6e3230 <col:54>
| `-ConstAttr 0x556eff6e3288 <col:95>
|-FunctionDecl 0x556eff6e3458 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x556eff6e32c0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556eff6e3338 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x556eff6e3508 <line:394:19>
| `-ConstAttr 0x556eff6e3560 <col:60>
|-FunctionDecl 0x556eff6e3f68 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x556eff6e3e30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x556eff6e4010 <col:71>
| `-NonNullAttr 0x556eff6e4068 <col:112, col:126> 1
|-FunctionDecl 0x556eff6e4170 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x556eff6e40b8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x556eff6e4218 <line:397:22>
| `-NonNullAttr 0x556eff6e4270 <col:63, col:77> 1
|-FunctionDecl 0x556eff6e4498 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x556eff6e42b8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e4338 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x556eff6e4548 <line:400:22>
| `-NonNullAttr 0x556eff6e45a0 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6e47a8 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x556eff6e45e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e4668 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x556eff6e4858 <line:403:22>
| `-NonNullAttr 0x556eff6e48b0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6e4b08 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x556eff6e48f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e49a0 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x556eff6e4bb8 <line:406:22>
| `-NonNullAttr 0x556eff6e4c10 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6e5e48 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x556eff6e4c58 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e4cd0 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x556eff6e5ef8 <line:409:22>
| `-NonNullAttr 0x556eff6e5f50 <col:63, col:77> 1
|-FunctionDecl 0x556eff6e6188 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x556eff6e5f98 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e6028 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x556eff6e6238 <line:412:22>
| `-NonNullAttr 0x556eff6e6290 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6e64c8 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x556eff6e62d8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e6368 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x556eff6e6578 <col:37>
| `-NonNullAttr 0x556eff6e65d0 <col:78, col:95> 1 2
|-FunctionDecl 0x556eff6e67b8 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6e6618 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e6698 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x556eff6e6868 <line:418:22>
| `-NonNullAttr 0x556eff6e68c0 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6e6a48 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x556eff6e6908 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e6988 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x556eff6e6af8 <line:420:22>
| `-NonNullAttr 0x556eff6e6b50 <col:63, col:77> 1
|-FunctionDecl 0x556eff6e6cf8 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6e6b98 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e6c18 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x556eff6e6da8 <line:423:22>
| `-NonNullAttr 0x556eff6e7e30 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6e7fb8 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x556eff6e7e78 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e7ef8 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x556eff6e8068 <line:426:22>
| `-NonNullAttr 0x556eff6e80c0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6e8268 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6e8108 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e8188 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x556eff6e8318 <line:429:22>
| `-NonNullAttr 0x556eff6e8370 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6e84f8 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x556eff6e83b8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e8438 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x556eff6e85a8 <line:431:22>
| `-NonNullAttr 0x556eff6e8600 <col:63, col:77> 1
|-FunctionDecl 0x556eff6e8828 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x556eff6e8648 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e86c8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x556eff6e88d8 <line:434:22>
| |-NonNullAttr 0x556eff6e8930 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x556eff6e8968 <col:100> "" ""
|-FunctionDecl 0x556eff6e8b78 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x556eff6e89b8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e8a38 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x556eff6e8c28 <line:437:22>
| |-NonNullAttr 0x556eff6e8c80 <col:63, col:77> 1
| `-DeprecatedAttr 0x556eff6e8cb8 <col:97> "" ""
|-FunctionDecl 0x556eff6e8eb8 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x556eff6e8d08 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e8d80 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x556eff6e8f68 <line:440:22>
| `-NonNullAttr 0x556eff6e8fc0 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6e9140 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x556eff6e9008 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e9080 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x556eff6e91f0 <line:443:22>
| `-NonNullAttr 0x556eff6e9248 <col:63, col:77> 1
|-FunctionDecl 0x556eff6e9538 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x556eff6e9298 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556eff6e9318 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x556eff6e9390 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x556eff6e95f0 <line:447:22>
| `-NonNullAttr 0x556eff6e9648 <col:63, col:83> 1 2 3
|-FunctionDecl 0x556eff6e98f8 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x556eff6e96a0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556eff6e9720 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x556eff6e9798 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x556eff6e99b0 <col:43>
| `-NonNullAttr 0x556eff6e9a08 <col:84, col:98> 1
|-FunctionDecl 0x556eff6e9cc8 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x556eff6e9a58 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556eff6e9ad8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x556eff6e9b68 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x556eff6e9d80 <line:452:22>
| `-NonNullAttr 0x556eff6e9dd8 <col:63, col:77> 3
|-FunctionDecl 0x556eff6ea0e8 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x556eff6e9e50 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556eff6e9ed0 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x556eff6e9f60 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x556eff6ea1a0 <line:456:22>
| `-NonNullAttr 0x556eff6ea1f8 <col:63, col:80> 2 3
|-FunctionDecl 0x556eff6ea3e8 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x556eff6ea248 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556eff6ea2c8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x556eff6ea498 <line:458:22>
|-FunctionDecl 0x556eff6ea868 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x556eff6ea560 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x556eff6ea700 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x556eff6ea918 <col:52, col:69> 1 2
|-FunctionDecl 0x556eff6eaac0 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x556eff6ea9a0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x556eff6eaa20 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x556eff6eaca8 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x556eff6eab88 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x556eff6eac08 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x556eff6eae60 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x556eff6ead68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x556eff6eafa0 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x556eff6eb040 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x556eff6eb0e8 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x556eff6eb1d8 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x556eff6eb240 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x556eff6eb410 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/safe004_power.oepc_false-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x556eff6eb508 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x556eff6eb5c0 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x556eff6eb560 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x556eff6eb0c0 '__pthread_unwind_buf_t'
| |   `-Record 0x556eff6eb040 ''
| `-AlignedAttr 0x556eff6eb618 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x556eff6eb690 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x556eff6eb7f0 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x556eff6eb858 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x556eff6eb8c0 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x556eff6eb928 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x556eff6ebb30 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x556eff6eba20 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x556eff6ebc78 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x556eff6ebbe8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x556eff6ebe70 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556eff6ebd30 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x556eff6ebf18 <line:487:22>
|-RecordDecl 0x556eff6ebf70 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x556eff6ec288 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x556eff6ec0e8 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x556eff6ec168 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x556eff6ec338 <col:86>
| `-ReturnsTwiceAttr 0x556eff6ec390 <col:12> Implicit
|-FunctionDecl 0x556eff6ec6b8 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x556eff6ec460 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x556eff6ec570 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x556eff6ec768 <line:493:22>
| `-NonNullAttr 0x556eff6ec7c0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6ec938 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556eff6ec808 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556eff6ec9e0 <line:495:22>
| `-NonNullAttr 0x556eff6eca38 <col:63, col:77> 1
|-FunctionDecl 0x556eff6ecb40 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556eff6eca88 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556eff6ecbe8 <line:497:22>
| `-NonNullAttr 0x556eff6ecc40 <col:52, col:66> 1
|-FunctionDecl 0x556eff6ecd40 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556eff6ecc88 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556eff6ecde8 <line:499:22>
| `-NonNullAttr 0x556eff6ece40 <col:52, col:66> 1
|-FunctionDecl 0x556eff6ed088 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x556eff6ece98 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x556eff6ecf28 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x556eff6ed138 <col:36>
| `-NonNullAttr 0x556eff6ed190 <col:66, col:83> 1 2
|-FunctionDecl 0x556eff6ed290 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556eff6ed1d8 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556eff6ed338 <line:504:22>
| `-NonNullAttr 0x556eff6ed390 <col:52, col:66> 1
|-FunctionDecl 0x556eff6ed628 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6ed440 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x556eff6ed4c0 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x556eff6ed6d8 <line:508:22>
| `-NonNullAttr 0x556eff6ed730 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6ed9f8 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x556eff6ed778 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x556eff6ed7f8 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x556eff6ed878 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x556eff6edab0 <line:512:22>
| `-NonNullAttr 0x556eff6edb08 <col:63, col:80> 1 3
|-FunctionDecl 0x556eff6edc10 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556eff6edb58 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556eff6edcb8 <line:514:22>
| `-NonNullAttr 0x556eff6edd10 <col:63, col:77> 1
|-FunctionDecl 0x556eff6edf38 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x556eff6eddc0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x556eff6edfe0 <line:516:22>
| `-NonNullAttr 0x556eff6ee038 <col:63, col:77> 1
|-FunctionDecl 0x556eff6ee140 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x556eff6ee088 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x556eff6ee1e8 <line:518:22>
| `-NonNullAttr 0x556eff6ee240 <col:63, col:77> 1
|-FunctionDecl 0x556eff6ee468 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6ee288 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x556eff6ee308 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x556eff6ee518 <line:522:22>
| `-NonNullAttr 0x556eff6ee570 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6ee778 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6ee5b8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556eff6ee638 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x556eff6ee828 <line:525:22>
| `-NonNullAttr 0x556eff6ee880 <col:63, col:77> 1
|-FunctionDecl 0x556eff6eea28 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6ee8c8 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x556eff6ee948 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x556eff6eead8 <line:528:22>
| `-NonNullAttr 0x556eff6eeb30 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6eecb8 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6eeb78 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556eff6eebf8 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x556eff6eed68 <line:530:22>
| `-NonNullAttr 0x556eff6eedc0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6eff90 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6eee08 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x556eff6efeb0 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x556eff6f0040 <line:534:22>
| `-NonNullAttr 0x556eff6f0098 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6f0228 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6f00e8 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556eff6f0168 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x556eff6f02d8 <line:537:22>
| `-NonNullAttr 0x556eff6f0330 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f04d8 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6f0378 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x556eff6f03f8 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x556eff6f0588 <line:541:22>
| `-NonNullAttr 0x556eff6f05e0 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6f0768 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6f0628 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556eff6f06a8 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x556eff6f0818 <line:544:22>
| `-NonNullAttr 0x556eff6f0870 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f0a58 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x556eff6f08b8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x556eff6f0938 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x556eff6f0b08 <line:547:22>
| `-NonNullAttr 0x556eff6f0b60 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6f0ce8 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6f0ba8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556eff6f0c28 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x556eff6f0d98 <line:550:22>
| `-NonNullAttr 0x556eff6f0df0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f2168 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x556eff6f1f10 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x556eff6f2020 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x556eff6f2218 <col:29>
| `-NonNullAttr 0x556eff6f2270 <col:70, col:84> 1
|-FunctionDecl 0x556eff6f23e8 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556eff6f22b8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556eff6f2490 <line:555:22>
| `-NonNullAttr 0x556eff6f24e8 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f25f0 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556eff6f2538 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556eff6f2698 <line:557:22>
| `-NonNullAttr 0x556eff6f26f0 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f27f0 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556eff6f2738 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556eff6f2898 <line:559:19>
| `-NonNullAttr 0x556eff6f28f0 <col:49, col:63> 1
|-FunctionDecl 0x556eff6f2b28 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x556eff6f2938 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x556eff6f29c8 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x556eff6f2bd8 <col:39>
| `-NonNullAttr 0x556eff6f2c30 <col:69, col:86> 1 2
|-FunctionDecl 0x556eff6f2d30 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556eff6f2c78 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556eff6f2dd8 <line:564:22>
| `-NonNullAttr 0x556eff6f2e30 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f2f98 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556eff6f2ee0 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556eff6f3040 <line:566:22>
| `-NonNullAttr 0x556eff6f3098 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f3258 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x556eff6f30e8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x556eff6f3178 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x556eff6f3308 <col:39>
| `-NonNullAttr 0x556eff6f3360 <col:69, col:86> 1 2
|-FunctionDecl 0x556eff6f3460 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556eff6f33a8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556eff6f3508 <line:571:22>
| `-NonNullAttr 0x556eff6f3560 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f3748 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x556eff6f3610 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x556eff6f37f0 <line:573:22>
| `-NonNullAttr 0x556eff6f3848 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f3950 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x556eff6f3898 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x556eff6f39f8 <line:575:22>
| `-NonNullAttr 0x556eff6f3a50 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f3c78 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6f3a98 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x556eff6f3b18 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x556eff6f3d28 <line:579:22>
| `-NonNullAttr 0x556eff6f3d80 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6f3fa8 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6f3dc8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x556eff6f3e48 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x556eff6f4058 <line:582:22>
| `-NonNullAttr 0x556eff6f40b0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f4258 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6f40f8 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x556eff6f4178 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x556eff6f4308 <line:586:22>
| `-NonNullAttr 0x556eff6f4360 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6f44e8 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6f43a8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x556eff6f4428 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x556eff6f4598 <col:36>
| `-NonNullAttr 0x556eff6f45f0 <col:77, col:91> 1
|-FunctionDecl 0x556eff6f4928 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x556eff6f46d0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x556eff6f47e0 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x556eff6f49d8 <line:591:22>
| `-NonNullAttr 0x556eff6f4a30 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f4ba8 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x556eff6f4a78 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x556eff6f4c50 <line:593:22>
| `-NonNullAttr 0x556eff6f4ca8 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f4db0 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x556eff6f4cf8 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x556eff6f4e58 <line:595:22>
| `-NonNullAttr 0x556eff6f4eb0 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f4fc8 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x556eff6f4f10 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x556eff6f5070 <line:597:22>
| `-NonNullAttr 0x556eff6f50c8 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f52f8 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x556eff6f5118 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x556eff6f5190 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x556eff6f53a8 <line:600:22, col:39> 1 2
|-FunctionDecl 0x556eff6f56d8 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x556eff6f5428 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x556eff6f54a0 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x556eff6f5530 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x556eff6f5790 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x556eff6f59a8 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x556eff6f5870 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x556eff6f5a50 <line:606:22>
| `-NonNullAttr 0x556eff6f5aa8 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f5bb0 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x556eff6f5af8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x556eff6f5c58 <line:608:22>
| `-NonNullAttr 0x556eff6f5cb0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f5f10 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6f5cf8 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x556eff6f5d78 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x556eff6f5fc0 <line:612:22>
| `-NonNullAttr 0x556eff6f6018 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6f6228 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6f6068 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x556eff6f60e8 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x556eff6f62d8 <col:37>
| `-NonNullAttr 0x556eff6f6330 <col:78, col:92> 1
|-FunctionDecl 0x556eff6f6548 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x556eff6f6378 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x556eff6f6420 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x556eff6f65f8 <line:618:22>
| `-NonNullAttr 0x556eff6f6650 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6f6818 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x556eff6f6698 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x556eff6f6710 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x556eff6f68c8 <line:621:22>
| `-NonNullAttr 0x556eff6f6920 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f6bc8 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x556eff6f6a00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x556eff6f6a80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x556eff6f6c78 <line:623:22>
| `-NonNullAttr 0x556eff6f6cd0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f6e48 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x556eff6f6d18 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x556eff6f6f20 <line:625:22>
| `-NonNullAttr 0x556eff6f6f78 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f7080 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x556eff6f6fc8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x556eff6f7128 <line:627:22>
| `-NonNullAttr 0x556eff6f7180 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f7280 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x556eff6f71c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x556eff6f7328 <line:629:22>
| `-NonNullAttr 0x556eff6f7380 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f7480 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x556eff6f73c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x556eff6f7528 <line:631:22>
| `-NonNullAttr 0x556eff6f7580 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f7958 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x556eff6f7660 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x556eff6f7770 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x556eff6f77f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x556eff6f7a10 <line:635:22>
| `-NonNullAttr 0x556eff6f7a68 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f7be8 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x556eff6f7ab8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x556eff6f7c90 <line:637:22>
| `-NonNullAttr 0x556eff6f7ce8 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f7df0 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x556eff6f7d38 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x556eff6f7e98 <line:639:22>
| `-NonNullAttr 0x556eff6f7ef0 <col:52, col:66> 1
|-FunctionDecl 0x556eff6f80e8 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x556eff6f7fb0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x556eff6f8190 <line:641:22>
| `-NonNullAttr 0x556eff6f81e8 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f82f0 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x556eff6f8238 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x556eff6f8398 <line:643:22>
| `-NonNullAttr 0x556eff6f83f0 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f8618 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556eff6f8438 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x556eff6f84b8 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x556eff6f86c8 <line:647:22>
| `-NonNullAttr 0x556eff6f8720 <col:63, col:80> 1 2
|-FunctionDecl 0x556eff6f8928 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x556eff6f8768 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x556eff6f87e8 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x556eff6f89d8 <line:650:22>
| `-NonNullAttr 0x556eff6f8a30 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f8d78 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x556eff6f8b10 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x556eff6f8c30 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x556eff6f8e28 <line:653:22>
| `-NonNullAttr 0x556eff6f8e80 <col:63, col:77> 1
|-FunctionDecl 0x556eff6f8fe8 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x556eff6f8ec8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x556eff6f9090 <col:69>
|-FunctionDecl 0x556eff6f9208 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x556eff6f90f8 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x556eff6f92b0 <col:72>
|-FunctionDecl 0x556eff6f94e8 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x556eff6f9318 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x556eff6f93c8 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x556eff6f9598 <col:44>
|-FunctionDecl 0x556eff6f97b8 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x556eff6f9600 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556eff6f9678 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x556eff6f9868 <line:660:22>
| `-NonNullAttr 0x556eff6f98c0 <col:63, col:77> 2
|-FunctionDecl 0x556eff6f9d08 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x556eff6f99a0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x556eff6f9ab0 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x556eff6f9bc0 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x556eff6f9dc0 <col:47>
|-FunctionDecl 0x556eff6faf60 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x556eff6f9e30 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x556eff6fb0b8 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x556eff6fb020 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x556eff6fb210 <line:667:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x556eff6fb178 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x556eff6fb2d8 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x556eff6fb398 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x556eff6fb458 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x556eff6fb510 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x556eff6fb590 prev 0x556eff6fb510 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x556eff6fb5f8 <col:24> 'int' 0
|-VarDecl 0x556eff6fb630 <line:673:1, col:5> col:5 used __unbuffered_p2_EAX 'int'
|-VarDecl 0x556eff6fb6b0 prev 0x556eff6fb630 <line:674:1, col:27> col:5 used __unbuffered_p2_EAX 'int' cinit
| `-IntegerLiteral 0x556eff6fb718 <col:27> 'int' 0
|-VarDecl 0x556eff6fb750 <line:675:1, col:5> col:5 used __unbuffered_p2_EBX 'int'
|-VarDecl 0x556eff6fb7d0 prev 0x556eff6fb750 <line:676:1, col:27> col:5 used __unbuffered_p2_EBX 'int' cinit
| `-IntegerLiteral 0x556eff6fb838 <col:27> 'int' 0
|-VarDecl 0x556eff6fb868 <line:677:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x556eff6fb8e0 <line:678:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x556eff6fb960 <line:679:1, col:5> col:5 used x 'int'
|-VarDecl 0x556eff6fb9e0 prev 0x556eff6fb960 <line:680:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x556eff6fba48 <col:9> 'int' 0
|-VarDecl 0x556eff6fba80 <line:681:1, col:5> col:5 used y 'int'
|-VarDecl 0x556eff6fbb00 prev 0x556eff6fba80 <line:682:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x556eff6fbb68 <col:9> 'int' 0
|-VarDecl 0x556eff6fbb98 <line:683:1, col:7> col:7 used y$flush_delayed '_Bool'
|-VarDecl 0x556eff6fbc18 <line:684:1, col:5> col:5 used y$mem_tmp 'int'
|-VarDecl 0x556eff6fbc90 <line:685:1, col:7> col:7 used y$r_buff0_thd0 '_Bool'
|-VarDecl 0x556eff6fbd08 <line:686:1, col:7> col:7 used y$r_buff0_thd1 '_Bool'
|-VarDecl 0x556eff6fbd80 <line:687:1, col:7> col:7 used y$r_buff0_thd2 '_Bool'
|-VarDecl 0x556eff6fbdf8 <line:688:1, col:7> col:7 used y$r_buff0_thd3 '_Bool'
|-VarDecl 0x556eff6fbe70 <line:689:1, col:7> col:7 used y$r_buff1_thd0 '_Bool'
|-VarDecl 0x556eff6fbee8 <line:690:1, col:7> col:7 used y$r_buff1_thd1 '_Bool'
|-VarDecl 0x556eff6fbf70 <line:691:1, col:7> col:7 used y$r_buff1_thd2 '_Bool'
|-VarDecl 0x556eff6fbfe8 <line:692:1, col:7> col:7 used y$r_buff1_thd3 '_Bool'
|-VarDecl 0x556eff6fc060 <line:693:1, col:7> col:7 y$read_delayed '_Bool'
|-VarDecl 0x556eff6fc0e0 <line:694:1, col:6> col:6 y$read_delayed_var 'int *'
|-VarDecl 0x556eff6fc160 <line:695:1, col:5> col:5 used y$w_buff0 'int'
|-VarDecl 0x556eff6fc1d8 <line:696:1, col:7> col:7 used y$w_buff0_used '_Bool'
|-VarDecl 0x556eff6fc258 <line:697:1, col:5> col:5 used y$w_buff1 'int'
|-VarDecl 0x556eff6fc2d0 <line:698:1, col:7> col:7 used y$w_buff1_used '_Bool'
|-VarDecl 0x556eff6fc348 <line:699:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x556eff6fc3c0 <line:700:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x556eff6fc4d8 prev 0x556eff6faf60 <line:701:1, line:729:1> line:701:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x556eff6fc440 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x556eff6fdd08 <line:702:1, line:729:1>
|   |-CallExpr 0x556eff6fc5e8 <line:703:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6fc5d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fc580 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6fc660 <line:704:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x556eff6fc608 <col:3> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x556eff6fc648 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff6fc628 <col:15> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |-BinaryOperator 0x556eff6fc6c0 <line:705:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x556eff6fc680 <col:3> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   | `-IntegerLiteral 0x556eff6fc6a0 <col:15> 'int' 2
|   |-BinaryOperator 0x556eff6fc738 <line:706:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fc6e0 <col:3> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fc720 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff6fc700 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556eff6fc7d0 <line:707:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fc758 <col:3> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x556eff6fc7a8 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x556eff6fc778 <col:27> 'int' 1
|   |-CallExpr 0x556eff6fc958 <line:708:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x556eff6fc940 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556eff6fc7f0 <col:3> 'void (int)' Function 0x556eff6a20d8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x556eff6fc8f0 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x556eff6fc8d0 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x556eff6fc8b0 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x556eff6fc868 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x556eff6fc850 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x556eff6fc810 <col:23> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x556eff6fc898 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x556eff6fc880 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x556eff6fc830 <col:41> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556eff6fc9d8 <line:709:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fc980 <col:3> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fc9c0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff6fc9a0 <col:20> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x556eff6fca50 <line:710:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fc9f8 <col:3> '_Bool' lvalue Var 0x556eff6fbee8 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fca38 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff6fca18 <col:20> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x556eff6fcac8 <line:711:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fca70 <col:3> '_Bool' lvalue Var 0x556eff6fbf70 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fcab0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff6fca90 <col:20> '_Bool' lvalue Var 0x556eff6fbd80 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x556eff6fcb40 <line:712:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fcae8 <col:3> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fcb28 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff6fcb08 <col:20> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x556eff6fcbd8 <line:713:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fcb60 <col:3> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   | `-CStyleCastExpr 0x556eff6fcbb0 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x556eff6fcb80 <col:27> 'int' 1
|   |-CallExpr 0x556eff6fcc30 <line:714:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff6fcc18 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fcbf8 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff6fcc88 <line:715:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6fcc70 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fcc50 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6fcce8 <line:716:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x556eff6fcca8 <col:3> 'int' lvalue Var 0x556eff6fb9e0 'x' 'int'
|   | `-IntegerLiteral 0x556eff6fccc8 <col:7> 'int' 1
|   |-CallExpr 0x556eff6fcd40 <line:717:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff6fcd28 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fcd08 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff6fcd98 <line:718:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6fcd80 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fcd60 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6fd0a8 <line:719:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x556eff6fcdb8 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   | `-ConditionalOperator 0x556eff6fd078 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x556eff6fce78 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x556eff6fce30 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x556eff6fce18 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x556eff6fcdd8 <col:7> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x556eff6fce60 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x556eff6fce48 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x556eff6fcdf8 <col:25> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff6fd060 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff6fce98 <col:42> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x556eff6fd040 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x556eff6fd010 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x556eff6fcf80 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556eff6fcf10 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556eff6fcef8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556eff6fceb8 <col:55> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556eff6fcf40 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556eff6fcf28 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556eff6fced8 <col:73> '_Bool' lvalue Var 0x556eff6fbee8 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff6fcfe0 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff6fcfa0 <col:90> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x556eff6fcff8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fcfc0 <col:102> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff6fd2b0 <line:720:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fd0c8 <col:3> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fd298 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff6fd268 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556eff6fd188 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556eff6fd140 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556eff6fd128 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556eff6fd0e8 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556eff6fd170 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556eff6fd158 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556eff6fd108 <col:38> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff6fd220 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff6fd1d8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff6fd1a8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff6fd250 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff6fd238 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fd200 <col:66> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556eff6fd598 <line:721:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fd2d0 <col:3> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fd580 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff6fd550 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556eff6fd470 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556eff6fd390 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556eff6fd348 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556eff6fd330 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556eff6fd2f0 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556eff6fd378 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556eff6fd360 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556eff6fd310 <col:38> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x556eff6fd450 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556eff6fd408 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556eff6fd3f0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556eff6fd3b0 <col:56> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556eff6fd438 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556eff6fd420 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556eff6fd3d0 <col:74> '_Bool' lvalue Var 0x556eff6fbee8 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff6fd508 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff6fd4c0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff6fd490 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff6fd538 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff6fd520 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fd4e8 <col:102> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x556eff6fd7a0 <line:722:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fd5b8 <col:3> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fd788 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff6fd758 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556eff6fd678 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556eff6fd630 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556eff6fd618 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556eff6fd5d8 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556eff6fd660 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556eff6fd648 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556eff6fd5f8 <col:38> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff6fd710 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff6fd6c8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff6fd698 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff6fd740 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff6fd728 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fd6f0 <col:66> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x556eff6fda88 <line:723:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fd7c0 <col:3> '_Bool' lvalue Var 0x556eff6fbee8 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fda70 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff6fda40 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556eff6fd960 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556eff6fd880 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556eff6fd838 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556eff6fd820 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556eff6fd7e0 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556eff6fd868 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556eff6fd850 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556eff6fd800 <col:38> '_Bool' lvalue Var 0x556eff6fbd08 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x556eff6fd940 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556eff6fd8f8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556eff6fd8e0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556eff6fd8a0 <col:56> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556eff6fd928 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556eff6fd910 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556eff6fd8c0 <col:74> '_Bool' lvalue Var 0x556eff6fbee8 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff6fd9f8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff6fd9b0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff6fd980 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff6fda28 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff6fda10 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fd9d8 <col:102> '_Bool' lvalue Var 0x556eff6fbee8 'y$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x556eff6fdae0 <line:724:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff6fdac8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fdaa8 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff6fdb38 <line:725:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6fdb20 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fdb00 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6fdbf0 <line:726:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x556eff6fdb58 <col:3> 'int' lvalue Var 0x556eff6fb590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x556eff6fdbd0 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x556eff6fdbb8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff6fdb78 <col:22> 'int' lvalue Var 0x556eff6fb590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x556eff6fdb98 <col:41> 'int' 1
|   |-CallExpr 0x556eff6fdc48 <line:727:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff6fdc30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fdc10 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x556eff6fdcf8 <line:728:3, col:36>
|     `-CallExpr 0x556eff6fdcd8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x556eff6fdcc0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556eff6fdc68 <col:10> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x556eff6fde98 prev 0x556eff6fb0b8 <line:730:1, line:749:1> line:730:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x556eff6fde00 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x556eff6ff0d8 <line:731:1, line:749:1>
|   |-CallExpr 0x556eff6fdf90 <line:732:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6fdf60 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fdf40 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6fdff0 <line:733:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x556eff6fdfb0 <col:3> 'int' lvalue Var 0x556eff6fb9e0 'x' 'int'
|   | `-IntegerLiteral 0x556eff6fdfd0 <col:7> 'int' 2
|   |-CallExpr 0x556eff6fe048 <line:734:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff6fe030 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fe010 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff6fe0a0 <line:735:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6fe088 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fe068 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6fe100 <line:736:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x556eff6fe0c0 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   | `-IntegerLiteral 0x556eff6fe0e0 <col:7> 'int' 1
|   |-CallExpr 0x556eff6fe158 <line:737:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff6fe140 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fe120 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff6fe1b0 <line:738:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6fe198 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fe178 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6fe498 <line:739:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x556eff6fe1d0 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   | `-ConditionalOperator 0x556eff6fe468 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x556eff6fe290 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x556eff6fe248 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x556eff6fe230 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x556eff6fe1f0 <col:7> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x556eff6fe278 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x556eff6fe260 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x556eff6fe210 <col:25> '_Bool' lvalue Var 0x556eff6fbd80 'y$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff6fe450 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff6fe2b0 <col:42> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x556eff6fe430 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x556eff6fe400 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x556eff6fe370 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556eff6fe328 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556eff6fe310 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556eff6fe2d0 <col:55> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556eff6fe358 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556eff6fe340 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556eff6fe2f0 <col:73> '_Bool' lvalue Var 0x556eff6fbf70 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff6fe3d0 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff6fe390 <col:90> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x556eff6fe3e8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fe3b0 <col:102> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff6fe6a0 <line:740:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fe4b8 <col:3> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fe688 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff6fe658 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556eff6fe578 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556eff6fe530 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556eff6fe518 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556eff6fe4d8 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556eff6fe560 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556eff6fe548 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556eff6fe4f8 <col:38> '_Bool' lvalue Var 0x556eff6fbd80 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff6fe610 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff6fe5c8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff6fe598 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff6fe640 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff6fe628 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fe5f0 <col:66> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556eff6fe988 <line:741:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fe6c0 <col:3> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fe970 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff6fe940 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556eff6fe860 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556eff6fe780 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556eff6fe738 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556eff6fe720 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556eff6fe6e0 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556eff6fe768 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556eff6fe750 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556eff6fe700 <col:38> '_Bool' lvalue Var 0x556eff6fbd80 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x556eff6fe840 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556eff6fe7f8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556eff6fe7e0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556eff6fe7a0 <col:56> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556eff6fe828 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556eff6fe810 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556eff6fe7c0 <col:74> '_Bool' lvalue Var 0x556eff6fbf70 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff6fe8f8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff6fe8b0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff6fe880 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff6fe928 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff6fe910 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fe8d8 <col:102> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x556eff6feb90 <line:742:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6fe9a8 <col:3> '_Bool' lvalue Var 0x556eff6fbd80 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6feb78 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff6feb48 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556eff6fea68 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556eff6fea20 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556eff6fea08 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556eff6fe9c8 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556eff6fea50 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556eff6fea38 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556eff6fe9e8 <col:38> '_Bool' lvalue Var 0x556eff6fbd80 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff6feb00 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff6feab8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff6fea88 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff6feb30 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff6feb18 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6feae0 <col:66> '_Bool' lvalue Var 0x556eff6fbd80 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x556eff6fee78 <line:743:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6febb0 <col:3> '_Bool' lvalue Var 0x556eff6fbf70 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6fee60 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff6fee30 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556eff6fed50 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556eff6fec70 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556eff6fec28 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556eff6fec10 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556eff6febd0 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556eff6fec58 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556eff6fec40 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556eff6febf0 <col:38> '_Bool' lvalue Var 0x556eff6fbd80 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x556eff6fed30 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556eff6fece8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556eff6fecd0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556eff6fec90 <col:56> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556eff6fed18 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556eff6fed00 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556eff6fecb0 <col:74> '_Bool' lvalue Var 0x556eff6fbf70 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff6fede8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff6feda0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff6fed70 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff6fee18 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff6fee00 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6fedc8 <col:102> '_Bool' lvalue Var 0x556eff6fbf70 'y$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x556eff6feed0 <line:744:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff6feeb8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6fee98 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff6fef28 <line:745:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6fef10 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6feef0 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6feff8 <line:746:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x556eff6fef48 <col:3> 'int' lvalue Var 0x556eff6fb590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x556eff6fefd8 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x556eff6fefc0 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff6fef68 <col:22> 'int' lvalue Var 0x556eff6fb590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x556eff6fefa0 <col:41> 'int' 1
|   |-CallExpr 0x556eff6ff050 <line:747:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff6ff038 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6ff018 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x556eff6ff0c8 <line:748:3, col:36>
|     `-CallExpr 0x556eff6ff0a8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x556eff6ff090 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556eff6ff070 <col:10> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x556eff6ff220 prev 0x556eff6fb210 <line:750:1, line:795:1> line:750:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x556eff6ff188 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x556eff705798 <line:751:1, line:795:1>
|   |-CallExpr 0x556eff6ff300 <line:752:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff6ff2e8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff6ff2c8 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff6ff3b0 <line:753:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6ff320 <col:3> '_Bool' lvalue Var 0x556eff6fc348 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6ff398 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x556eff6ff378 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x556eff6ff360 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x556eff6ff340 <col:19> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x556eff6ff460 <line:754:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6ff3d0 <col:3> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6ff448 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x556eff6ff428 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x556eff6ff410 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x556eff6ff3f0 <col:19> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x556eff6ff4d8 <line:755:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x556eff6ff480 <col:3> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x556eff6ff4c0 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff6ff4a0 <col:21> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x556eff6ff550 <line:756:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x556eff6ff4f8 <col:3> 'int' lvalue Var 0x556eff6fbc18 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x556eff6ff538 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff6ff518 <col:15> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff6ff988 <line:757:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x556eff6ff570 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   | `-ConditionalOperator 0x556eff6ff958 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x556eff6ff780 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x556eff6ff6a0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x556eff6ff5c8 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x556eff6ff5b0 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x556eff6ff590 <col:8> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x556eff6ff680 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x556eff6ff618 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x556eff6ff600 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x556eff6ff5e0 <col:27> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |   | |   `-UnaryOperator 0x556eff6ff668 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x556eff6ff650 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x556eff6ff630 <col:46> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x556eff6ff760 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x556eff6ff6f8 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x556eff6ff6e0 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x556eff6ff6c0 <col:65> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |   |   `-UnaryOperator 0x556eff6ff748 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x556eff6ff730 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x556eff6ff710 <col:84> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff6ff940 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff6ff7a0 <col:101> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |   `-ParenExpr 0x556eff6ff920 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x556eff6ff8f0 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x556eff6ff860 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556eff6ff818 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556eff6ff800 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556eff6ff7c0 <col:106> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556eff6ff848 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556eff6ff830 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556eff6ff7e0 <col:124> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff6ff8c0 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff6ff880 <col:141> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x556eff6ff8d8 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff6ff8a0 <col:153> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |-BinaryOperator 0x556eff6ffe98 <line:758:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x556eff6ff9a8 <col:3> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x556eff6ffe68 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x556eff6ffe38 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556eff6ffe20 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556eff6ff9c8 <col:15> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff6ffe50 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff6ff9e8 <col:31> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x556eff6ffe00 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x556eff6ffdd0 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x556eff6ffbf8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x556eff6ffb18 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x556eff6ffa40 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x556eff6ffa28 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x556eff6ffa08 <col:45> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x556eff6ffaf8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x556eff6ffa90 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x556eff6ffa78 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x556eff6ffa58 <col:64> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x556eff6ffae0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x556eff6ffac8 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x556eff6ffaa8 <col:83> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x556eff6ffbd8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x556eff6ffb70 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x556eff6ffb58 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x556eff6ffb38 <col:102> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x556eff6ffbc0 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x556eff6ffba8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x556eff6ffb88 <col:121> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff6ffdb8 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff6ffc18 <col:138> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x556eff6ffd98 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x556eff6ffd68 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x556eff6ffcd8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x556eff6ffc90 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x556eff6ffc78 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x556eff6ffc38 <col:151> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x556eff6ffcc0 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x556eff6ffca8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x556eff6ffc58 <col:169> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x556eff6ffd38 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x556eff6ffcf8 <col:186> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x556eff6ffd50 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x556eff6ffd18 <col:198> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |-BinaryOperator 0x556eff7003b8 <line:759:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x556eff6ffeb8 <col:3> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x556eff700388 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x556eff700358 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556eff700340 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556eff6ffed8 <col:15> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff700370 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff6ffef8 <col:31> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x556eff700320 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x556eff7002f0 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x556eff700118 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x556eff700038 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x556eff6fff50 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x556eff6fff38 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x556eff6fff18 <col:45> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x556eff700018 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x556eff6fffb0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x556eff6fff88 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x556eff6fff68 <col:64> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x556eff700000 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x556eff6fffe8 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x556eff6fffc8 <col:83> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x556eff7000f8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x556eff700090 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x556eff700078 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x556eff700058 <col:102> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x556eff7000e0 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x556eff7000c8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x556eff7000a8 <col:121> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff7002d8 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff700138 <col:138> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x556eff7002b8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x556eff700288 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x556eff7001f8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x556eff7001b0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x556eff700198 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x556eff700158 <col:151> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x556eff7001e0 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x556eff7001c8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x556eff700178 <col:169> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x556eff700258 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x556eff700218 <col:186> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x556eff700270 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x556eff700238 <col:198> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |-BinaryOperator 0x556eff700960 <line:760:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x556eff7003d8 <col:3> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff700948 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff700918 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x556eff7008d0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff7008b8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff7003f8 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff700900 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff7008e8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff700418 <col:36> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x556eff700898 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x556eff700868 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x556eff700628 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556eff700548 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556eff700470 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556eff700458 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556eff700438 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556eff700528 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556eff7004c0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556eff7004a8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556eff700488 <col:74> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x556eff700510 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556eff7004f8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556eff7004d8 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556eff700608 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556eff7005a0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556eff700588 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556eff700568 <col:112> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x556eff7005f0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556eff7005d8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556eff7005b8 <col:131> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x556eff700850 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556eff700838 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556eff700648 <col:148> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x556eff700818 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x556eff7007e8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x556eff700708 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556eff7006c0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556eff7006a8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556eff700668 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556eff7006f0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556eff7006d8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556eff700688 <col:184> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x556eff7007a0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556eff700758 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556eff700728 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556eff7007d0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x556eff7007b8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x556eff700780 <col:212> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556eff700f28 <line:761:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x556eff700980 <col:3> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff700f10 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff700ee0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x556eff700e98 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff700e80 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff7009a0 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff700ec8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff700eb0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff7009c0 <col:36> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x556eff700e60 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x556eff700e30 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x556eff700bd0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556eff700af0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556eff700a18 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556eff700a00 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556eff7009e0 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556eff700ad0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556eff700a68 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556eff700a50 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556eff700a30 <col:74> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x556eff700ab8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556eff700aa0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556eff700a80 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556eff700bb0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556eff700b48 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556eff700b30 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556eff700b10 <col:112> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x556eff700b98 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556eff700b80 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556eff700b60 <col:131> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x556eff700e18 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556eff700e00 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556eff700bf0 <col:148> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x556eff700de0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x556eff700db0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x556eff700cb0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556eff700c68 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556eff700c50 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556eff700c10 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556eff700c98 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556eff700c80 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556eff700c30 <col:184> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x556eff700d80 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556eff700d00 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556eff700cd0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556eff700d98 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x556eff700d58 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x556eff700d28 <col:219> 'int' 0
|   |-BinaryOperator 0x556eff7014e8 <line:762:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x556eff700f48 <col:3> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556eff7014d0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff7014a0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x556eff701458 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff701440 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff700f68 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff701488 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff701470 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff700f88 <col:36> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x556eff701420 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x556eff7013f0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x556eff7011b0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556eff7010d0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556eff700ff8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556eff700fe0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556eff700fc0 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556eff7010b0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556eff701048 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556eff701030 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556eff701010 <col:74> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x556eff701098 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556eff701080 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556eff701060 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556eff701190 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556eff701128 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556eff701110 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556eff7010f0 <col:112> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x556eff701178 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556eff701160 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556eff701140 <col:131> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x556eff7013d8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556eff7013c0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556eff7011d0 <col:148> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x556eff7013a0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x556eff701370 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x556eff701290 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556eff701248 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556eff701230 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556eff7011f0 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556eff701278 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556eff701260 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556eff701210 <col:184> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x556eff701328 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556eff7012e0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556eff7012b0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556eff701358 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x556eff701340 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x556eff701308 <col:212> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x556eff701ab0 <line:763:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x556eff701508 <col:3> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556eff701a98 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff701a68 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x556eff701a20 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff701a08 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff701528 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff701a50 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff701a38 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff701548 <col:36> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x556eff7019e8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x556eff7019b8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x556eff701758 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556eff701678 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556eff7015a0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556eff701588 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556eff701568 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556eff701658 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556eff7015f0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556eff7015d8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556eff7015b8 <col:74> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x556eff701640 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556eff701628 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556eff701608 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556eff701738 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556eff7016d0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556eff7016b8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556eff701698 <col:112> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x556eff701720 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556eff701708 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556eff7016e8 <col:131> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x556eff7019a0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556eff701988 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556eff701778 <col:148> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x556eff701968 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x556eff701938 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x556eff701838 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556eff7017f0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556eff7017d8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556eff701798 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556eff701820 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556eff701808 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556eff7017b8 <col:184> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x556eff701908 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556eff701888 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556eff701858 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556eff701920 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x556eff7018e0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x556eff7018b0 <col:219> 'int' 0
|   |-BinaryOperator 0x556eff701b28 <line:764:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x556eff701ad0 <col:3> 'int' lvalue Var 0x556eff6fb6b0 '__unbuffered_p2_EAX' 'int'
|   | `-ImplicitCastExpr 0x556eff701b10 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff701af0 <col:25> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff701c58 <line:765:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x556eff701b48 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   | `-ConditionalOperator 0x556eff701c28 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x556eff701be0 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556eff701bc8 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556eff701b68 <col:7> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff701bf8 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff701b88 <col:25> 'int' lvalue Var 0x556eff6fbc18 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x556eff701c10 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x556eff701ba8 <col:37> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff701cf0 <line:766:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x556eff701c78 <col:3> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x556eff701cc8 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x556eff701c98 <col:28> 'int' 0
|   |-CallExpr 0x556eff701d48 <line:767:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff701d30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff701d10 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff701da0 <line:768:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff701d88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff701d68 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff701e50 <line:769:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x556eff701dc0 <col:3> '_Bool' lvalue Var 0x556eff6fc348 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x556eff701e38 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x556eff701e18 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x556eff701e00 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x556eff701de0 <col:19> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x556eff701f00 <line:770:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x556eff701e70 <col:3> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x556eff701ee8 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x556eff701ec8 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x556eff701eb0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x556eff701e90 <col:19> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x556eff701f78 <line:771:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x556eff701f20 <col:3> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x556eff701f60 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff701f40 <col:21> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x556eff702008 <line:772:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x556eff701f98 <col:3> 'int' lvalue Var 0x556eff6fbc18 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x556eff701ff0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff701fd0 <col:15> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff702440 <line:773:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x556eff702028 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   | `-ConditionalOperator 0x556eff702410 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x556eff702238 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x556eff702158 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x556eff702080 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x556eff702068 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x556eff702048 <col:8> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x556eff702138 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x556eff7020d0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x556eff7020b8 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x556eff702098 <col:27> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |   | |   `-UnaryOperator 0x556eff702120 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x556eff702108 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x556eff7020e8 <col:46> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x556eff702218 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x556eff7021b0 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x556eff702198 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x556eff702178 <col:65> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |   |   `-UnaryOperator 0x556eff702200 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x556eff7021e8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x556eff7021c8 <col:84> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff7023f8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff702258 <col:101> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |   `-ParenExpr 0x556eff7023d8 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x556eff7023a8 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x556eff702318 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556eff7022d0 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556eff7022b8 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556eff702278 <col:106> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556eff702300 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556eff7022e8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556eff702298 <col:124> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff702378 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff702338 <col:141> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x556eff702390 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff702358 <col:153> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |-BinaryOperator 0x556eff702950 <line:774:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x556eff702460 <col:3> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x556eff702920 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x556eff7028f0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556eff7028d8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556eff702480 <col:15> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff702908 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff7024a0 <col:31> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x556eff7028b8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x556eff702888 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x556eff7026b0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x556eff7025d0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x556eff7024f8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x556eff7024e0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x556eff7024c0 <col:45> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x556eff7025b0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x556eff702548 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x556eff702530 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x556eff702510 <col:64> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x556eff702598 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x556eff702580 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x556eff702560 <col:83> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x556eff702690 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x556eff702628 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x556eff702610 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x556eff7025f0 <col:102> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x556eff702678 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x556eff702660 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x556eff702640 <col:121> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff702870 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff7026d0 <col:138> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x556eff702850 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x556eff702820 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x556eff702790 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x556eff702748 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x556eff702730 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x556eff7026f0 <col:151> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x556eff702778 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x556eff702760 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x556eff702710 <col:169> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x556eff7027f0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x556eff7027b0 <col:186> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x556eff702808 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x556eff7027d0 <col:198> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |-BinaryOperator 0x556eff702e60 <line:775:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x556eff702970 <col:3> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x556eff702e30 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x556eff702e00 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556eff702de8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556eff702990 <col:15> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff702e18 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff7029b0 <col:31> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x556eff702dc8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x556eff702d98 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x556eff702bc0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x556eff702ae0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x556eff702a08 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x556eff7029f0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x556eff7029d0 <col:45> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x556eff702ac0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x556eff702a58 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x556eff702a40 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x556eff702a20 <col:64> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x556eff702aa8 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x556eff702a90 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x556eff702a70 <col:83> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x556eff702ba0 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x556eff702b38 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x556eff702b20 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x556eff702b00 <col:102> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x556eff702b88 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x556eff702b70 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x556eff702b50 <col:121> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff702d80 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff702be0 <col:138> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x556eff702d60 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x556eff702d30 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x556eff702ca0 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x556eff702c58 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x556eff702c40 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x556eff702c00 <col:151> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x556eff702c88 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x556eff702c70 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x556eff702c20 <col:169> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x556eff702d00 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x556eff702cc0 <col:186> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x556eff702d18 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x556eff702ce0 <col:198> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |-BinaryOperator 0x556eff703418 <line:776:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x556eff702e80 <col:3> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff703400 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff7033d0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x556eff703388 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff703370 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff702ea0 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff7033b8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff7033a0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff702ec0 <col:36> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x556eff703350 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x556eff703320 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x556eff7030e0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556eff703000 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556eff702f18 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556eff702f00 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556eff702ee0 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556eff702fe0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556eff702f68 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556eff702f50 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556eff702f30 <col:74> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x556eff702fb8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556eff702fa0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556eff702f80 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556eff7030c0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556eff703058 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556eff703040 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556eff703020 <col:112> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x556eff7030a8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556eff703090 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556eff703070 <col:131> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x556eff703308 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556eff7032f0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556eff703100 <col:148> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x556eff7032d0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x556eff7032a0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x556eff7031c0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556eff703178 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556eff703160 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556eff703120 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556eff7031a8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556eff703190 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556eff703140 <col:184> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x556eff703258 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556eff703210 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556eff7031e0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556eff703288 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x556eff703270 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x556eff703238 <col:212> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556eff7039e0 <line:777:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x556eff703438 <col:3> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff7039c8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff703998 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x556eff703950 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff703938 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff703458 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff703980 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff703968 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff703478 <col:36> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x556eff703918 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x556eff7038e8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x556eff703688 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556eff7035a8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556eff7034d0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556eff7034b8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556eff703498 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556eff703588 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556eff703520 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556eff703508 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556eff7034e8 <col:74> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x556eff703570 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556eff703558 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556eff703538 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556eff703668 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556eff703600 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556eff7035e8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556eff7035c8 <col:112> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x556eff703650 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556eff703638 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556eff703618 <col:131> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x556eff7038d0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556eff7038b8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556eff7036a8 <col:148> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x556eff703898 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x556eff703868 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x556eff703768 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556eff703720 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556eff703708 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556eff7036c8 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556eff703750 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556eff703738 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556eff7036e8 <col:184> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x556eff703838 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556eff7037b8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556eff703788 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556eff703850 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x556eff703810 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x556eff7037e0 <col:219> 'int' 0
|   |-BinaryOperator 0x556eff703f88 <line:778:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x556eff703a00 <col:3> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556eff703f70 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff703f40 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x556eff703ef8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff703ee0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff703a20 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff703f28 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff703f10 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff703a40 <col:36> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x556eff703ec0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x556eff703e90 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x556eff703c50 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556eff703b70 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556eff703a98 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556eff703a80 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556eff703a60 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556eff703b50 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556eff703ae8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556eff703ad0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556eff703ab0 <col:74> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x556eff703b38 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556eff703b20 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556eff703b00 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556eff703c30 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556eff703bc8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556eff703bb0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556eff703b90 <col:112> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x556eff703c18 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556eff703c00 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556eff703be0 <col:131> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x556eff703e78 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556eff703e60 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556eff703c70 <col:148> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x556eff703e40 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x556eff703e10 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x556eff703d30 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556eff703ce8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556eff703cd0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556eff703c90 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556eff703d18 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556eff703d00 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556eff703cb0 <col:184> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x556eff703dc8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556eff703d80 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556eff703d50 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556eff703df8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x556eff703de0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x556eff703da8 <col:212> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x556eff704578 <line:779:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x556eff703fa8 <col:3> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556eff704560 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff704530 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x556eff7044e8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff7044d0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff703ff0 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff704518 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556eff704500 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556eff704010 <col:36> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x556eff7044b0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x556eff704480 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x556eff704220 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556eff704140 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556eff704068 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556eff704050 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556eff704030 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556eff704120 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556eff7040b8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556eff7040a0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556eff704080 <col:74> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x556eff704108 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556eff7040f0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556eff7040d0 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556eff704200 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556eff704198 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556eff704180 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556eff704160 <col:112> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x556eff7041e8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556eff7041d0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556eff7041b0 <col:131> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x556eff704468 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556eff704450 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556eff704240 <col:148> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x556eff704430 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x556eff704400 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x556eff704300 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556eff7042b8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556eff7042a0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556eff704260 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556eff7042e8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556eff7042d0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556eff704280 <col:184> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x556eff7043d0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556eff704350 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556eff704320 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556eff7043e8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x556eff7043a8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x556eff704378 <col:219> 'int' 0
|   |-BinaryOperator 0x556eff7045f0 <line:780:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x556eff704598 <col:3> 'int' lvalue Var 0x556eff6fb7d0 '__unbuffered_p2_EBX' 'int'
|   | `-ImplicitCastExpr 0x556eff7045d8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556eff7045b8 <col:25> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff704720 <line:781:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x556eff704610 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   | `-ConditionalOperator 0x556eff7046f0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x556eff7046a8 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556eff704690 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556eff704630 <col:7> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff7046c0 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff704650 <col:25> 'int' lvalue Var 0x556eff6fbc18 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x556eff7046d8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x556eff704670 <col:37> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff7047b8 <line:782:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x556eff704740 <col:3> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x556eff704790 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x556eff704760 <col:28> 'int' 0
|   |-CallExpr 0x556eff704810 <line:783:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff7047f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff7047d8 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff704868 <line:784:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff704850 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff704830 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff704b50 <line:785:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x556eff704888 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   | `-ConditionalOperator 0x556eff704b20 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x556eff704948 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x556eff704900 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x556eff7048e8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x556eff7048a8 <col:7> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x556eff704930 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x556eff704918 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x556eff7048c8 <col:25> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x556eff704b08 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff704968 <col:42> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x556eff704ae8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x556eff704ab8 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x556eff704a28 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556eff7049e0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556eff7049c8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556eff704988 <col:55> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556eff704a10 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556eff7049f8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556eff7049a8 <col:73> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x556eff704a88 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556eff704a48 <col:90> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x556eff704aa0 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff704a68 <col:102> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
|   |-BinaryOperator 0x556eff704d58 <line:786:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556eff704b70 <col:3> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff704d40 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff704d10 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556eff704c30 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556eff704be8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556eff704bd0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556eff704b90 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556eff704c18 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556eff704c00 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556eff704bb0 <col:38> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff704cc8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff704c80 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff704c50 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff704cf8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff704ce0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff704ca8 <col:66> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556eff705060 <line:787:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556eff704d78 <col:3> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556eff705048 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff705018 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556eff704f18 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556eff704e38 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556eff704df0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556eff704dd8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556eff704d98 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556eff704e20 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556eff704e08 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556eff704db8 <col:38> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x556eff704ef8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556eff704eb0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556eff704e98 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556eff704e58 <col:56> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556eff704ee0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556eff704ec8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556eff704e78 <col:74> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff704fb0 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff704f68 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff704f38 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff705000 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff704fc8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff704f90 <col:102> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x556eff705268 <line:788:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556eff705080 <col:3> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556eff705250 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff705220 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556eff705140 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556eff7050f8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556eff7050e0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556eff7050a0 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556eff705128 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556eff705110 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556eff7050c0 <col:38> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff7051d8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff705190 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff705160 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff705208 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff7051f0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff7051b8 <col:66> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x556eff705550 <line:789:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556eff705288 <col:3> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556eff705538 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556eff705508 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556eff705428 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556eff705348 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556eff705300 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556eff7052e8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556eff7052a8 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556eff705330 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556eff705318 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556eff7052c8 <col:38> '_Bool' lvalue Var 0x556eff6fbdf8 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x556eff705408 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556eff7053c0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556eff7053a8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556eff705368 <col:56> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556eff7053f0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556eff7053d8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556eff705388 <col:74> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x556eff7054c0 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556eff705478 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556eff705448 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556eff7054f0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556eff7054d8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556eff7054a0 <col:102> '_Bool' lvalue Var 0x556eff6fbfe8 'y$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x556eff7055a8 <line:790:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff705590 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff705570 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556eff705600 <line:791:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556eff7055e8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff7055c8 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556eff7056b8 <line:792:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x556eff705620 <col:3> 'int' lvalue Var 0x556eff6fb590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x556eff705698 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x556eff705680 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556eff705640 <col:22> 'int' lvalue Var 0x556eff6fb590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x556eff705660 <col:41> 'int' 1
|   |-CallExpr 0x556eff705710 <line:793:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556eff7056f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556eff7056d8 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x556eff705788 <line:794:3, col:36>
|     `-CallExpr 0x556eff705768 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x556eff705750 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556eff705730 <col:10> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x556eff705920 prev 0x556eff6fb2d8 <line:796:1, line:798:1> line:796:6 fence 'void ()'
| `-CompoundStmt 0x556eff7059c0 <line:797:1, line:798:1>
|-FunctionDecl 0x556eff7059f0 prev 0x556eff6fb398 <line:799:1, line:801:1> line:799:6 isync 'void ()'
| `-CompoundStmt 0x556eff705a90 <line:800:1, line:801:1>
|-FunctionDecl 0x556eff705ac0 prev 0x556eff6fb458 <line:802:1, line:804:1> line:802:6 lwfence 'void ()'
| `-CompoundStmt 0x556eff705b60 <line:803:1, line:804:1>
`-FunctionDecl 0x556eff705bc8 <line:805:1, line:842:1> line:805:5 main 'int ()'
  `-CompoundStmt 0x556eff70a288 <line:806:1, line:842:1>
    |-DeclStmt 0x556eff705ce0 <line:807:3, col:18>
    | `-VarDecl 0x556eff705c78 <col:3, col:13> col:13 used t1875 'pthread_t':'unsigned long'
    |-CallExpr 0x556eff705ee8 <line:808:3, col:54> 'int'
    | |-ImplicitCastExpr 0x556eff705ed0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556eff705cf8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x556eff6e28f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x556eff705d38 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x556eff705d18 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x556eff705c78 't1875' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x556eff705f28 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x556eff705db0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x556eff705d88 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x556eff705d50 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x556eff705f40 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556eff705dd0 <col:39> 'void *(void *)' Function 0x556eff6fc4d8 'P0' 'void *(void *)'
    | `-ParenExpr 0x556eff705e50 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x556eff705e28 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x556eff705df0 <col:52> 'int' 0
    |-DeclStmt 0x556eff705fd0 <line:809:3, col:18>
    | `-VarDecl 0x556eff705f68 <col:3, col:13> col:13 used t1876 'pthread_t':'unsigned long'
    |-CallExpr 0x556eff7061a0 <line:810:3, col:54> 'int'
    | |-ImplicitCastExpr 0x556eff706188 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556eff706010 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x556eff6e28f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x556eff706050 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x556eff706030 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x556eff705f68 't1876' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x556eff7061e0 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x556eff7060c8 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x556eff7060a0 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x556eff706068 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x556eff7061f8 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556eff7060e8 <col:39> 'void *(void *)' Function 0x556eff6fde98 'P1' 'void *(void *)'
    | `-ParenExpr 0x556eff706168 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x556eff706140 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x556eff706108 <col:52> 'int' 0
    |-DeclStmt 0x556eff706288 <line:811:3, col:18>
    | `-VarDecl 0x556eff706220 <col:3, col:13> col:13 used t1877 'pthread_t':'unsigned long'
    |-CallExpr 0x556eff706430 <line:812:3, col:54> 'int'
    | |-ImplicitCastExpr 0x556eff706418 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556eff7062a0 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x556eff6e28f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x556eff7062e0 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x556eff7062c0 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x556eff706220 't1877' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x556eff706470 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x556eff706358 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x556eff706330 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x556eff7062f8 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x556eff706488 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556eff706378 <col:39> 'void *(void *)' Function 0x556eff6ff220 'P2' 'void *(void *)'
    | `-ParenExpr 0x556eff7063f8 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x556eff7063d0 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x556eff706398 <col:52> 'int' 0
    |-CallExpr 0x556eff7064d8 <line:813:3, col:27> 'void'
    | `-ImplicitCastExpr 0x556eff7064c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556eff7064a0 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x556eff7065a8 <line:814:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x556eff7064f8 <col:3> '_Bool' lvalue Var 0x556eff6fb868 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x556eff706590 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x556eff706570 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x556eff706558 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x556eff706518 <col:21> 'int' lvalue Var 0x556eff6fb590 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x556eff706538 <col:41> 'int' 3
    |-CallExpr 0x556eff706600 <line:815:3, col:25> 'void'
    | `-ImplicitCastExpr 0x556eff7065e8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556eff7065c8 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x556eff706678 <line:816:3, col:36> 'void'
    | |-ImplicitCastExpr 0x556eff706660 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556eff706620 <col:3> 'void (int)' Function 0x556eff6a1ca0 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x556eff7066b8 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x556eff7066a0 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x556eff706640 <col:21> '_Bool' lvalue Var 0x556eff6fb868 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x556eff706708 <line:817:3, col:27> 'void'
    | `-ImplicitCastExpr 0x556eff7066f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556eff7066d0 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x556eff7069f0 <line:818:3, col:103> 'int' '='
    | |-DeclRefExpr 0x556eff706728 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
    | `-ConditionalOperator 0x556eff7069c0 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x556eff7067e8 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x556eff7067a0 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x556eff706788 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x556eff706748 <col:7> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x556eff7067d0 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x556eff7067b8 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x556eff706768 <col:25> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x556eff7069a8 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556eff706808 <col:42> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
    |   `-ParenExpr 0x556eff706988 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x556eff706958 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x556eff7068c8 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x556eff706880 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x556eff706868 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x556eff706828 <col:55> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x556eff7068b0 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x556eff706898 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x556eff706848 <col:73> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x556eff706928 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x556eff7068e8 <col:90> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x556eff706940 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x556eff706908 <col:102> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
    |-BinaryOperator 0x556eff706bf8 <line:819:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x556eff706a10 <col:3> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x556eff706be0 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556eff706bb0 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x556eff706ad0 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x556eff706a88 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x556eff706a70 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x556eff706a30 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x556eff706ab8 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x556eff706aa0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x556eff706a50 <col:38> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x556eff706b68 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x556eff706b20 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x556eff706af0 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x556eff706b98 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x556eff706b80 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x556eff706b48 <col:66> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x556eff706ee0 <line:820:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x556eff706c18 <col:3> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x556eff706ec8 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556eff706e98 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x556eff706db8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x556eff706cd8 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x556eff706c90 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x556eff706c78 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x556eff706c38 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x556eff706cc0 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x556eff706ca8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x556eff706c58 <col:38> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x556eff706d98 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x556eff706d50 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x556eff706d38 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x556eff706cf8 <col:56> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x556eff706d80 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x556eff706d68 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x556eff706d18 <col:74> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x556eff706e50 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x556eff706e08 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x556eff706dd8 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x556eff706e80 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x556eff706e68 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x556eff706e30 <col:102> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |-BinaryOperator 0x556eff7070f8 <line:821:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x556eff706f00 <col:3> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x556eff7070e0 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556eff7070b0 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x556eff706fc0 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x556eff706f78 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x556eff706f60 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x556eff706f20 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x556eff706fa8 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x556eff706f90 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x556eff706f40 <col:38> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x556eff707068 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x556eff707020 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x556eff706fe0 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x556eff707098 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x556eff707080 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x556eff707048 <col:66> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x556eff7073e0 <line:822:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x556eff707118 <col:3> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x556eff7073c8 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556eff707398 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x556eff7072b8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x556eff7071d8 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x556eff707190 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x556eff707178 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x556eff707138 <col:20> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x556eff7071c0 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x556eff7071a8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x556eff707158 <col:38> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x556eff707298 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x556eff707250 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x556eff707238 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x556eff7071f8 <col:56> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x556eff707280 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x556eff707268 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x556eff707218 <col:74> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x556eff707350 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x556eff707308 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x556eff7072d8 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x556eff707380 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x556eff707368 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x556eff707330 <col:102> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |-CallExpr 0x556eff707438 <line:823:3, col:25> 'void'
    | `-ImplicitCastExpr 0x556eff707420 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556eff707400 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x556eff707490 <line:824:3, col:27> 'void'
    | `-ImplicitCastExpr 0x556eff707478 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556eff707458 <col:3> 'void ()' Function 0x556eff6a2350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x556eff707540 <line:825:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x556eff7074b0 <col:3> '_Bool' lvalue Var 0x556eff6fc348 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x556eff707528 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x556eff707508 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x556eff7074f0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x556eff7074d0 <col:19> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x556eff7075f0 <line:826:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x556eff707560 <col:3> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x556eff7075d8 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x556eff7075b8 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x556eff7075a0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x556eff707580 <col:19> 'void *(void)' Function 0x556eff6a1e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x556eff707668 <line:827:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x556eff707610 <col:3> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x556eff707650 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x556eff707630 <col:21> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x556eff7076e0 <line:828:3, col:15> 'int' '='
    | |-DeclRefExpr 0x556eff707688 <col:3> 'int' lvalue Var 0x556eff6fbc18 'y$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x556eff7076c8 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x556eff7076a8 <col:15> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
    |-BinaryOperator 0x556eff707b18 <line:829:3, col:162> 'int' '='
    | |-DeclRefExpr 0x556eff707700 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
    | `-ConditionalOperator 0x556eff707ae8 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x556eff707910 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x556eff707830 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x556eff707758 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x556eff707740 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x556eff707720 <col:8> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x556eff707810 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x556eff7077a8 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x556eff707790 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x556eff707770 <col:27> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x556eff7077f8 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x556eff7077e0 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x556eff7077c0 <col:46> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x556eff7078f0 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x556eff707888 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x556eff707870 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x556eff707850 <col:65> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x556eff7078d8 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x556eff7078c0 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x556eff7078a0 <col:84> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x556eff707ad0 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556eff707930 <col:101> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
    |   `-ParenExpr 0x556eff707ab0 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x556eff707a80 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x556eff7079f0 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x556eff7079a8 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x556eff707990 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x556eff707950 <col:106> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x556eff7079d8 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x556eff7079c0 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x556eff707970 <col:124> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x556eff707a50 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x556eff707a10 <col:141> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x556eff707a68 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x556eff707a30 <col:153> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
    |-BinaryOperator 0x556eff708060 <line:830:3, col:208> 'int' '='
    | |-DeclRefExpr 0x556eff707b38 <col:3> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
    | `-ConditionalOperator 0x556eff708030 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x556eff707fc8 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x556eff707fb0 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x556eff707b58 <col:15> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x556eff707fe0 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556eff707b78 <col:31> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
    |   `-ParenExpr 0x556eff707f90 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x556eff707f60 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x556eff707d88 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x556eff707ca8 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x556eff707bd0 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x556eff707bb8 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x556eff707b98 <col:45> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x556eff707c88 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x556eff707c20 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x556eff707c08 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x556eff707be8 <col:64> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x556eff707c70 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x556eff707c58 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x556eff707c38 <col:83> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x556eff707d68 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x556eff707d00 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x556eff707ce8 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x556eff707cc8 <col:102> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x556eff707d50 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x556eff707d38 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x556eff707d18 <col:121> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x556eff707f48 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x556eff707da8 <col:138> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
    |       `-ParenExpr 0x556eff707f28 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x556eff707ef8 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x556eff707e68 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x556eff707e20 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x556eff707e08 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x556eff707dc8 <col:151> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x556eff707e50 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x556eff707e38 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x556eff707de8 <col:169> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x556eff707ec8 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x556eff707e88 <col:186> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x556eff707ee0 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x556eff707ea8 <col:198> 'int' lvalue Var 0x556eff6fc160 'y$w_buff0' 'int'
    |-BinaryOperator 0x556eff708570 <line:831:3, col:208> 'int' '='
    | |-DeclRefExpr 0x556eff708080 <col:3> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
    | `-ConditionalOperator 0x556eff708540 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x556eff708510 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x556eff7084f8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x556eff7080a0 <col:15> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x556eff708528 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556eff7080c0 <col:31> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
    |   `-ParenExpr 0x556eff7084d8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x556eff7084a8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x556eff7082d0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x556eff7081f0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x556eff708118 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x556eff708100 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x556eff7080e0 <col:45> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x556eff7081d0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x556eff708168 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x556eff708150 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x556eff708130 <col:64> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x556eff7081b8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x556eff7081a0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x556eff708180 <col:83> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x556eff7082b0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x556eff708248 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x556eff708230 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x556eff708210 <col:102> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x556eff708298 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x556eff708280 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x556eff708260 <col:121> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x556eff708490 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x556eff7082f0 <col:138> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
    |       `-ParenExpr 0x556eff708470 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x556eff708440 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x556eff7083b0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x556eff708368 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x556eff708350 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x556eff708310 <col:151> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x556eff708398 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x556eff708380 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x556eff708330 <col:169> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x556eff708410 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x556eff7083d0 <col:186> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x556eff708428 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x556eff7083f0 <col:198> 'int' lvalue Var 0x556eff6fc258 'y$w_buff1' 'int'
    |-BinaryOperator 0x556eff708b18 <line:832:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x556eff708590 <col:3> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x556eff708b00 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556eff708ad0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x556eff708a88 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556eff708a70 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556eff7085b0 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x556eff708ab8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556eff708aa0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556eff7085d0 <col:36> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x556eff708a50 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x556eff708a20 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x556eff7087e0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x556eff708700 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x556eff708628 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x556eff708610 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x556eff7085f0 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x556eff7086e0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x556eff708678 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x556eff708660 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x556eff708640 <col:74> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x556eff7086c8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x556eff7086b0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x556eff708690 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x556eff7087c0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x556eff708758 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x556eff708740 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x556eff708720 <col:112> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x556eff7087a8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x556eff708790 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x556eff708770 <col:131> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x556eff708a08 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x556eff7089f0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x556eff708800 <col:148> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x556eff7089d0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x556eff7089a0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x556eff7088c0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x556eff708878 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x556eff708860 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x556eff708820 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x556eff7088a8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x556eff708890 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x556eff708840 <col:184> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x556eff708958 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x556eff708910 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x556eff7088e0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x556eff708988 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x556eff708970 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x556eff708938 <col:212> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x556eff709108 <line:833:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x556eff708b38 <col:3> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x556eff7090f0 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556eff7090c0 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x556eff709078 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556eff709060 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556eff708b58 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x556eff7090a8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556eff709090 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556eff708b78 <col:36> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x556eff709040 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x556eff708fe8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x556eff708d88 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x556eff708ca8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x556eff708bd0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x556eff708bb8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x556eff708b98 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x556eff708c88 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x556eff708c20 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x556eff708c08 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x556eff708be8 <col:74> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x556eff708c70 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x556eff708c58 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x556eff708c38 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x556eff708d68 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x556eff708d00 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x556eff708ce8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x556eff708cc8 <col:112> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x556eff708d50 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x556eff708d38 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x556eff708d18 <col:131> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x556eff708fd0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x556eff708fb8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x556eff708da8 <col:148> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x556eff708f98 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x556eff708f68 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x556eff708e68 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x556eff708e20 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x556eff708e08 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x556eff708dc8 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x556eff708e50 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x556eff708e38 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x556eff708de8 <col:184> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x556eff708f38 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x556eff708eb8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x556eff708e88 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x556eff708f50 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x556eff708f10 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x556eff708ee0 <col:219> 'int' 0
    |-BinaryOperator 0x556eff7096b0 <line:834:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x556eff709128 <col:3> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x556eff709698 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556eff709668 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x556eff709620 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556eff709608 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556eff709148 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x556eff709650 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556eff709638 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556eff709168 <col:36> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x556eff7095e8 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x556eff7095b8 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x556eff709378 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x556eff709298 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x556eff7091c0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x556eff7091a8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x556eff709188 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x556eff709278 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x556eff709210 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x556eff7091f8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x556eff7091d8 <col:74> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x556eff709260 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x556eff709248 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x556eff709228 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x556eff709358 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x556eff7092f0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x556eff7092d8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x556eff7092b8 <col:112> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x556eff709340 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x556eff709328 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x556eff709308 <col:131> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x556eff7095a0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x556eff709588 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x556eff709398 <col:148> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x556eff709568 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x556eff709538 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x556eff709458 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x556eff709410 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x556eff7093f8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x556eff7093b8 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x556eff709440 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x556eff709428 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x556eff7093d8 <col:184> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x556eff7094f0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x556eff7094a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x556eff709478 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x556eff709520 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x556eff709508 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x556eff7094d0 <col:212> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x556eff709c78 <line:835:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x556eff7096d0 <col:3> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x556eff709c60 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556eff709c30 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x556eff709be8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556eff709bd0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556eff7096f0 <col:20> '_Bool' lvalue Var 0x556eff6fc3c0 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x556eff709c18 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556eff709c00 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556eff709710 <col:36> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x556eff709bb0 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x556eff709b80 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x556eff709920 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x556eff709840 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x556eff709768 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x556eff709750 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x556eff709730 <col:55> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x556eff709820 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x556eff7097b8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x556eff7097a0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x556eff709780 <col:74> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x556eff709808 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x556eff7097f0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x556eff7097d0 <col:93> '_Bool' lvalue Var 0x556eff6fc2d0 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x556eff709900 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x556eff709898 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x556eff709880 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x556eff709860 <col:112> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x556eff7098e8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x556eff7098d0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x556eff7098b0 <col:131> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x556eff709b68 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x556eff709b50 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x556eff709940 <col:148> '_Bool' lvalue Var 0x556eff6fbe70 'y$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x556eff709b30 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x556eff709b00 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x556eff709a00 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x556eff7099b8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x556eff7099a0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x556eff709960 <col:166> '_Bool' lvalue Var 0x556eff6fc1d8 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x556eff7099e8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x556eff7099d0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x556eff709980 <col:184> '_Bool' lvalue Var 0x556eff6fbc90 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x556eff709ad0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x556eff709a50 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x556eff709a20 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x556eff709ae8 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x556eff709aa8 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x556eff709a78 <col:219> 'int' 0
    |-BinaryOperator 0x556eff709f48 <line:836:3, col:95> '_Bool' '='
    | |-DeclRefExpr 0x556eff709c98 <col:3> '_Bool' lvalue Var 0x556eff6fb8e0 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x556eff709f30 <col:21, col:95> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x556eff709f18 <col:21, col:95> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x556eff709ef8 <col:22, col:95> 'int'
    |       `-BinaryOperator 0x556eff709ed8 <col:23, col:94> 'int' '&&'
    |         |-BinaryOperator 0x556eff709e40 <col:23, col:66> 'int' '&&'
    |         | |-BinaryOperator 0x556eff709da8 <col:23, col:38> 'int' '&&'
    |         | | |-BinaryOperator 0x556eff709d10 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x556eff709cf8 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x556eff709cb8 <col:23> 'int' lvalue Var 0x556eff6fb9e0 'x' 'int'
    |         | | | `-IntegerLiteral 0x556eff709cd8 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x556eff709d88 <col:33, col:38> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x556eff709d70 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x556eff709d30 <col:33> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
    |         | |   `-IntegerLiteral 0x556eff709d50 <col:38> 'int' 2
    |         | `-BinaryOperator 0x556eff709e20 <col:43, col:66> 'int' '=='
    |         |   |-ImplicitCastExpr 0x556eff709e08 <col:43> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x556eff709dc8 <col:43> 'int' lvalue Var 0x556eff6fb6b0 '__unbuffered_p2_EAX' 'int'
    |         |   `-IntegerLiteral 0x556eff709de8 <col:66> 'int' 1
    |         `-BinaryOperator 0x556eff709eb8 <col:71, col:94> 'int' '=='
    |           |-ImplicitCastExpr 0x556eff709ea0 <col:71> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x556eff709e60 <col:71> 'int' lvalue Var 0x556eff6fb7d0 '__unbuffered_p2_EBX' 'int'
    |           `-IntegerLiteral 0x556eff709e80 <col:94> 'int' 1
    |-BinaryOperator 0x556eff70a098 <line:837:3, col:37> 'int' '='
    | |-DeclRefExpr 0x556eff709f68 <col:3> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
    | `-ConditionalOperator 0x556eff70a068 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x556eff70a000 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x556eff709fe8 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x556eff709f88 <col:7> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x556eff70a018 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556eff709fa8 <col:25> 'int' lvalue Var 0x556eff6fbc18 'y$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x556eff70a050 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x556eff709fc8 <col:37> 'int' lvalue Var 0x556eff6fbb00 'y' 'int'
    |-BinaryOperator 0x556eff70a130 <line:838:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x556eff70a0b8 <col:3> '_Bool' lvalue Var 0x556eff6fbb98 'y$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x556eff70a108 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x556eff70a0d8 <col:28> 'int' 0
    |-CallExpr 0x556eff70a188 <line:839:3, col:25> 'void'
    | `-ImplicitCastExpr 0x556eff70a170 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556eff70a150 <col:3> 'void ()' Function 0x556eff6a2410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x556eff70a200 <line:840:3, col:36> 'void'
    | |-ImplicitCastExpr 0x556eff70a1e8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556eff70a1a8 <col:3> 'void (int)' Function 0x556eff6a20d8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x556eff70a240 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x556eff70a228 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x556eff70a1c8 <col:21> '_Bool' lvalue Var 0x556eff6fb8e0 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x556eff70a278 <line:841:3, col:10>
      `-IntegerLiteral 0x556eff70a258 <col:10> 'int' 0
