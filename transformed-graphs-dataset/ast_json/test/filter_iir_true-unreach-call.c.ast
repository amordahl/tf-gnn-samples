TranslationUnitDecl 0x5599a2f994d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5599a2f99d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5599a2f99a70 '__int128'
|-TypedefDecl 0x5599a2f99e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5599a2f99a90 'unsigned __int128'
|-TypedefDecl 0x5599a2f9a110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5599a2f99ee0 'struct __NSConstantString_tag'
|   `-Record 0x5599a2f99e60 '__NSConstantString_tag'
|-TypedefDecl 0x5599a2f9a1b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5599a2f9a170 'char *'
|   `-BuiltinType 0x5599a2f99570 'char'
|-TypedefDecl 0x5599a2fd9620 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5599a2f9a450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5599a2f9a290 'struct __va_list_tag'
|     `-Record 0x5599a2f9a210 '__va_list_tag'
|-FunctionDecl 0x5599a2fd9700 <float-benchs/filter_iir_true-unreach-call.c:1:1, col:54> col:6 used __VERIFIER_error 'void () __attribute__((noreturn))'
|-FunctionDecl 0x5599a2fd9848 <line:6:1, col:40> col:15 used __VERIFIER_nondet_double 'double ()' extern
|-FunctionDecl 0x5599a2fd99d0 <line:7:1, col:45> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x5599a2fd9900 <col:31, col:35> col:35 expression 'int'
|-FunctionDecl 0x5599a2fd9b20 <line:8:1, col:88> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x5599a2fd9a90 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x5599a2fd9d70 <col:34, col:88>
|   |-IfStmt 0x5599a2fd9d48 <col:36, col:78>
|   | |-UnaryOperator 0x5599a2fd9c20 <col:40, col:46> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x5599a2fd9c08 <col:41, col:46> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x5599a2fd9be8 <col:41, col:46> 'int' lvalue
|   | |     `-DeclRefExpr 0x5599a2fd9bc8 <col:42> 'int' lvalue ParmVar 0x5599a2fd9a90 'cond' 'int'
|   | `-CompoundStmt 0x5599a2fd9d30 <col:49, col:78>
|   |   `-LabelStmt 0x5599a2fd9d18 <col:51, col:75> 'ERROR'
|   |     `-CallExpr 0x5599a2fd9ca8 <col:58, col:75> 'void'
|   |       `-ImplicitCastExpr 0x5599a2fd9c90 <col:58> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5599a2fd9c38 <col:58> 'void () __attribute__((noreturn))' Function 0x5599a2fd9700 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x5599a2fd9d60 <col:80>
|-VarDecl 0x5599a2fd9e38 <line:11:1, col:42> col:8 used A1 'double [3]' cinit
| `-InitListExpr 0x5599a2fd9f68 <col:16, col:42> 'double [3]'
|   |-ImplicitCastExpr 0x5599a2fd9fc0 <col:18> 'double' <IntegralToFloating>
|   | `-IntegerLiteral 0x5599a2fd9ea0 <col:18> 'int' 1
|   |-FloatingLiteral 0x5599a2fd9ec0 <col:21> 'double' 5.179422e-01
|   `-FloatingLiteral 0x5599a2fd9ee0 <col:38> 'double' 1.000000e+00
|-VarDecl 0x5599a2fda078 <line:12:1, col:50> col:8 used b1 'double [2]' cinit
| `-InitListExpr 0x5599a2fda180 <col:16, col:50> 'double [2]'
|   |-FloatingLiteral 0x5599a2fda0e0 <col:18> 'double' 1.470768e+00
|   `-FloatingLiteral 0x5599a2fda100 <col:34> 'double' 5.522073e-01
|-VarDecl 0x5599a2fda230 <line:13:1, col:41> col:8 used A2 'double [3]' cinit
| `-InitListExpr 0x5599a2fda360 <col:16, col:41> 'double [3]'
|   |-ImplicitCastExpr 0x5599a2fda3b8 <col:18> 'double' <IntegralToFloating>
|   | `-IntegerLiteral 0x5599a2fda298 <col:18> 'int' 1
|   |-FloatingLiteral 0x5599a2fda2b8 <col:21> 'double' 1.633102e+00
|   `-FloatingLiteral 0x5599a2fda2d8 <col:37> 'double' 1.000000e+00
|-VarDecl 0x5599a2fda430 <line:14:1, col:49> col:8 used b2 'double [2]' cinit
| `-InitListExpr 0x5599a2fda538 <col:16, col:49> 'double [2]'
|   |-FloatingLiteral 0x5599a2fda498 <col:18> 'double' 1.742320e+00
|   `-FloatingLiteral 0x5599a2fda4b8 <col:34> 'double' 8.209397e-01
|-VarDecl 0x5599a2ffe7e0 <line:16:1, col:12> col:8 used D1 'double [2]'
|-VarDecl 0x5599a2ffe8a8 <col:1, col:19> col:15 used D2 'double [2]'
|-VarDecl 0x5599a2ffe940 <line:17:1, col:8> col:8 used P 'double'
|-VarDecl 0x5599a2ffe9c0 <col:1, col:11> col:11 used X 'double'
|-FunctionDecl 0x5599a2ffebe0 <line:19:1, line:34:1> line:19:6 used iir4 'void (double *, double *)'
| |-ParmVarDecl 0x5599a2ffea88 <col:11, col:19> col:19 used x 'double *'
| |-ParmVarDecl 0x5599a2ffeb08 <col:22, col:30> col:30 used y 'double *'
| `-CompoundStmt 0x5599a3000228 <line:20:1, line:34:1>
|   |-DeclStmt 0x5599a2ffeeb8 <line:21:3, col:24>
|   | |-VarDecl 0x5599a2ffeca8 <col:3, col:10> col:10 used x1 'double'
|   | |-VarDecl 0x5599a2ffed28 <col:3, col:14> col:14 used y1 'double'
|   | |-VarDecl 0x5599a2ffeda8 <col:3, col:18> col:18 used t1 'double'
|   | `-VarDecl 0x5599a2ffee28 <col:3, col:22> col:22 used t2 'double'
|   |-BinaryOperator 0x5599a2ffef98 <line:23:3, col:30> 'double' '='
|   | |-DeclRefExpr 0x5599a2ffeed0 <col:3> 'double' lvalue Var 0x5599a2ffeca8 'x1' 'double'
|   | `-BinaryOperator 0x5599a2ffef78 <col:8, col:30> 'double' '*'
|   |   |-FloatingLiteral 0x5599a2ffeef0 <col:8> 'double' 1.177494e-02
|   |   `-ImplicitCastExpr 0x5599a2ffef60 <col:29, col:30> 'double' <LValueToRValue>
|   |     `-UnaryOperator 0x5599a2ffef48 <col:29, col:30> 'double' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x5599a2ffef30 <col:30> 'double *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5599a2ffef10 <col:30> 'double *' lvalue ParmVar 0x5599a2ffea88 'x' 'double *'
|   |-BinaryOperator 0x5599a2fff2d0 <line:25:3, col:37> 'double' '='
|   | |-DeclRefExpr 0x5599a2ffefb8 <col:3> 'double' lvalue Var 0x5599a2ffeda8 't1' 'double'
|   | `-BinaryOperator 0x5599a2fff2b0 <col:8, col:37> 'double' '-'
|   |   |-BinaryOperator 0x5599a2fff150 <col:8, col:23> 'double' '+'
|   |   | |-ImplicitCastExpr 0x5599a2fff138 <col:8> 'double' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5599a2ffefd8 <col:8> 'double' lvalue Var 0x5599a2ffeca8 'x1' 'double'
|   |   | `-BinaryOperator 0x5599a2fff118 <col:13, col:23> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x5599a2fff0e8 <col:13, col:17> 'double' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x5599a2fff050 <col:13, col:17> 'double' lvalue
|   |   |   |   |-ImplicitCastExpr 0x5599a2fff038 <col:13> 'double *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x5599a2ffeff8 <col:13> 'double [2]' lvalue Var 0x5599a2fda078 'b1' 'double [2]'
|   |   |   |   `-IntegerLiteral 0x5599a2fff018 <col:16> 'int' 0
|   |   |   `-ImplicitCastExpr 0x5599a2fff100 <col:19, col:23> 'double' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x5599a2fff0c8 <col:19, col:23> 'double' lvalue
|   |   |       |-ImplicitCastExpr 0x5599a2fff0b0 <col:19> 'double *' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5599a2fff070 <col:19> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
|   |   |       `-IntegerLiteral 0x5599a2fff090 <col:22> 'int' 0
|   |   `-BinaryOperator 0x5599a2fff290 <col:27, col:37> 'double' '*'
|   |     |-ImplicitCastExpr 0x5599a2fff260 <col:27, col:31> 'double' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x5599a2fff1c8 <col:27, col:31> 'double' lvalue
|   |     |   |-ImplicitCastExpr 0x5599a2fff1b0 <col:27> 'double *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x5599a2fff170 <col:27> 'double [2]' lvalue Var 0x5599a2fda078 'b1' 'double [2]'
|   |     |   `-IntegerLiteral 0x5599a2fff190 <col:30> 'int' 1
|   |     `-ImplicitCastExpr 0x5599a2fff278 <col:33, col:37> 'double' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x5599a2fff240 <col:33, col:37> 'double' lvalue
|   |         |-ImplicitCastExpr 0x5599a2fff228 <col:33> 'double *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x5599a2fff1e8 <col:33> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
|   |         `-IntegerLiteral 0x5599a2fff208 <col:36> 'int' 1
|   |-BinaryOperator 0x5599a2fff6b8 <line:26:3, col:43> 'double' '='
|   | |-DeclRefExpr 0x5599a2fff2f0 <col:3> 'double' lvalue Var 0x5599a2ffed28 'y1' 'double'
|   | `-BinaryOperator 0x5599a2fff698 <col:8, col:43> 'double' '+'
|   |   |-BinaryOperator 0x5599a2fff538 <col:8, col:29> 'double' '-'
|   |   | |-BinaryOperator 0x5599a2fff3d8 <col:8, col:14> 'double' '*'
|   |   | | |-ImplicitCastExpr 0x5599a2fff3a8 <col:8, col:12> 'double' <LValueToRValue>
|   |   | | | `-ArraySubscriptExpr 0x5599a2fff368 <col:8, col:12> 'double' lvalue
|   |   | | |   |-ImplicitCastExpr 0x5599a2fff350 <col:8> 'double *' <ArrayToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x5599a2fff310 <col:8> 'double [3]' lvalue Var 0x5599a2fd9e38 'A1' 'double [3]'
|   |   | | |   `-IntegerLiteral 0x5599a2fff330 <col:11> 'int' 0
|   |   | | `-ImplicitCastExpr 0x5599a2fff3c0 <col:14> 'double' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5599a2fff388 <col:14> 'double' lvalue Var 0x5599a2ffeda8 't1' 'double'
|   |   | `-BinaryOperator 0x5599a2fff518 <col:19, col:29> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x5599a2fff4e8 <col:19, col:23> 'double' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x5599a2fff450 <col:19, col:23> 'double' lvalue
|   |   |   |   |-ImplicitCastExpr 0x5599a2fff438 <col:19> 'double *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x5599a2fff3f8 <col:19> 'double [3]' lvalue Var 0x5599a2fd9e38 'A1' 'double [3]'
|   |   |   |   `-IntegerLiteral 0x5599a2fff418 <col:22> 'int' 1
|   |   |   `-ImplicitCastExpr 0x5599a2fff500 <col:25, col:29> 'double' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x5599a2fff4c8 <col:25, col:29> 'double' lvalue
|   |   |       |-ImplicitCastExpr 0x5599a2fff4b0 <col:25> 'double *' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5599a2fff470 <col:25> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
|   |   |       `-IntegerLiteral 0x5599a2fff490 <col:28> 'int' 0
|   |   `-BinaryOperator 0x5599a2fff678 <col:33, col:43> 'double' '*'
|   |     |-ImplicitCastExpr 0x5599a2fff648 <col:33, col:37> 'double' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x5599a2fff5b0 <col:33, col:37> 'double' lvalue
|   |     |   |-ImplicitCastExpr 0x5599a2fff598 <col:33> 'double *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x5599a2fff558 <col:33> 'double [3]' lvalue Var 0x5599a2fd9e38 'A1' 'double [3]'
|   |     |   `-IntegerLiteral 0x5599a2fff578 <col:36> 'int' 2
|   |     `-ImplicitCastExpr 0x5599a2fff660 <col:39, col:43> 'double' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x5599a2fff628 <col:39, col:43> 'double' lvalue
|   |         |-ImplicitCastExpr 0x5599a2fff610 <col:39> 'double *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x5599a2fff5d0 <col:39> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
|   |         `-IntegerLiteral 0x5599a2fff5f0 <col:42> 'int' 1
|   |-BinaryOperator 0x5599a2fff7f0 <line:27:3, col:15> 'double' '='
|   | |-ArraySubscriptExpr 0x5599a2fff730 <col:3, col:7> 'double' lvalue
|   | | |-ImplicitCastExpr 0x5599a2fff718 <col:3> 'double *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x5599a2fff6d8 <col:3> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
|   | | `-IntegerLiteral 0x5599a2fff6f8 <col:6> 'int' 1
|   | `-ImplicitCastExpr 0x5599a2fff7c8 <col:11, col:15> 'double' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x5599a2fff7a8 <col:11, col:15> 'double' lvalue
|   |     |-ImplicitCastExpr 0x5599a2fff790 <col:11> 'double *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x5599a2fff750 <col:11> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
|   |     `-IntegerLiteral 0x5599a2fff770 <col:14> 'int' 0
|   |-BinaryOperator 0x5599a2fff8c0 <line:28:3, col:11> 'double' '='
|   | |-ArraySubscriptExpr 0x5599a2fff868 <col:3, col:7> 'double' lvalue
|   | | |-ImplicitCastExpr 0x5599a2fff850 <col:3> 'double *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x5599a2fff810 <col:3> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
|   | | `-IntegerLiteral 0x5599a2fff830 <col:6> 'int' 0
|   | `-ImplicitCastExpr 0x5599a2fff8a8 <col:11> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x5599a2fff888 <col:11> 'double' lvalue Var 0x5599a2ffeda8 't1' 'double'
|   |-BinaryOperator 0x5599a2fffbf8 <line:30:3, col:37> 'double' '='
|   | |-DeclRefExpr 0x5599a2fff8e0 <col:3> 'double' lvalue Var 0x5599a2ffee28 't2' 'double'
|   | `-BinaryOperator 0x5599a2fffbd8 <col:8, col:37> 'double' '-'
|   |   |-BinaryOperator 0x5599a2fffa78 <col:8, col:23> 'double' '+'
|   |   | |-ImplicitCastExpr 0x5599a2fffa60 <col:8> 'double' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5599a2fff900 <col:8> 'double' lvalue Var 0x5599a2ffed28 'y1' 'double'
|   |   | `-BinaryOperator 0x5599a2fffa40 <col:13, col:23> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x5599a2fffa10 <col:13, col:17> 'double' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x5599a2fff978 <col:13, col:17> 'double' lvalue
|   |   |   |   |-ImplicitCastExpr 0x5599a2fff960 <col:13> 'double *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x5599a2fff920 <col:13> 'double [2]' lvalue Var 0x5599a2fda430 'b2' 'double [2]'
|   |   |   |   `-IntegerLiteral 0x5599a2fff940 <col:16> 'int' 0
|   |   |   `-ImplicitCastExpr 0x5599a2fffa28 <col:19, col:23> 'double' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x5599a2fff9f0 <col:19, col:23> 'double' lvalue
|   |   |       |-ImplicitCastExpr 0x5599a2fff9d8 <col:19> 'double *' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5599a2fff998 <col:19> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
|   |   |       `-IntegerLiteral 0x5599a2fff9b8 <col:22> 'int' 0
|   |   `-BinaryOperator 0x5599a2fffbb8 <col:27, col:37> 'double' '*'
|   |     |-ImplicitCastExpr 0x5599a2fffb88 <col:27, col:31> 'double' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x5599a2fffaf0 <col:27, col:31> 'double' lvalue
|   |     |   |-ImplicitCastExpr 0x5599a2fffad8 <col:27> 'double *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x5599a2fffa98 <col:27> 'double [2]' lvalue Var 0x5599a2fda430 'b2' 'double [2]'
|   |     |   `-IntegerLiteral 0x5599a2fffab8 <col:30> 'int' 1
|   |     `-ImplicitCastExpr 0x5599a2fffba0 <col:33, col:37> 'double' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x5599a2fffb68 <col:33, col:37> 'double' lvalue
|   |         |-ImplicitCastExpr 0x5599a2fffb50 <col:33> 'double *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x5599a2fffb10 <col:33> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
|   |         `-IntegerLiteral 0x5599a2fffb30 <col:36> 'int' 1
|   |-BinaryOperator 0x5599a3000010 <line:31:3, col:43> 'double' '='
|   | |-UnaryOperator 0x5599a2fffc50 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x5599a2fffc38 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5599a2fffc18 <col:4> 'double *' lvalue ParmVar 0x5599a2ffeb08 'y' 'double *'
|   | `-BinaryOperator 0x5599a2fffff0 <col:8, col:43> 'double' '+'
|   |   |-BinaryOperator 0x5599a2fffe90 <col:8, col:29> 'double' '-'
|   |   | |-BinaryOperator 0x5599a2fffd30 <col:8, col:14> 'double' '*'
|   |   | | |-ImplicitCastExpr 0x5599a2fffd00 <col:8, col:12> 'double' <LValueToRValue>
|   |   | | | `-ArraySubscriptExpr 0x5599a2fffcc0 <col:8, col:12> 'double' lvalue
|   |   | | |   |-ImplicitCastExpr 0x5599a2fffca8 <col:8> 'double *' <ArrayToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x5599a2fffc68 <col:8> 'double [3]' lvalue Var 0x5599a2fda230 'A2' 'double [3]'
|   |   | | |   `-IntegerLiteral 0x5599a2fffc88 <col:11> 'int' 0
|   |   | | `-ImplicitCastExpr 0x5599a2fffd18 <col:14> 'double' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5599a2fffce0 <col:14> 'double' lvalue Var 0x5599a2ffee28 't2' 'double'
|   |   | `-BinaryOperator 0x5599a2fffe70 <col:19, col:29> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x5599a2fffe40 <col:19, col:23> 'double' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x5599a2fffda8 <col:19, col:23> 'double' lvalue
|   |   |   |   |-ImplicitCastExpr 0x5599a2fffd90 <col:19> 'double *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x5599a2fffd50 <col:19> 'double [3]' lvalue Var 0x5599a2fda230 'A2' 'double [3]'
|   |   |   |   `-IntegerLiteral 0x5599a2fffd70 <col:22> 'int' 1
|   |   |   `-ImplicitCastExpr 0x5599a2fffe58 <col:25, col:29> 'double' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x5599a2fffe20 <col:25, col:29> 'double' lvalue
|   |   |       |-ImplicitCastExpr 0x5599a2fffe08 <col:25> 'double *' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5599a2fffdc8 <col:25> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
|   |   |       `-IntegerLiteral 0x5599a2fffde8 <col:28> 'int' 0
|   |   `-BinaryOperator 0x5599a2ffffd0 <col:33, col:43> 'double' '*'
|   |     |-ImplicitCastExpr 0x5599a2ffffa0 <col:33, col:37> 'double' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x5599a2ffff08 <col:33, col:37> 'double' lvalue
|   |     |   |-ImplicitCastExpr 0x5599a2fffef0 <col:33> 'double *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x5599a2fffeb0 <col:33> 'double [3]' lvalue Var 0x5599a2fda230 'A2' 'double [3]'
|   |     |   `-IntegerLiteral 0x5599a2fffed0 <col:36> 'int' 2
|   |     `-ImplicitCastExpr 0x5599a2ffffb8 <col:39, col:43> 'double' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x5599a2ffff80 <col:39, col:43> 'double' lvalue
|   |         |-ImplicitCastExpr 0x5599a2ffff68 <col:39> 'double *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x5599a2ffff28 <col:39> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
|   |         `-IntegerLiteral 0x5599a2ffff48 <col:42> 'int' 1
|   |-BinaryOperator 0x5599a3000138 <line:32:3, col:15> 'double' '='
|   | |-ArraySubscriptExpr 0x5599a3000088 <col:3, col:7> 'double' lvalue
|   | | |-ImplicitCastExpr 0x5599a3000070 <col:3> 'double *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x5599a3000030 <col:3> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
|   | | `-IntegerLiteral 0x5599a3000050 <col:6> 'int' 1
|   | `-ImplicitCastExpr 0x5599a3000120 <col:11, col:15> 'double' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x5599a3000100 <col:11, col:15> 'double' lvalue
|   |     |-ImplicitCastExpr 0x5599a30000e8 <col:11> 'double *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x5599a30000a8 <col:11> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
|   |     `-IntegerLiteral 0x5599a30000c8 <col:14> 'int' 0
|   `-BinaryOperator 0x5599a3000208 <line:33:3, col:11> 'double' '='
|     |-ArraySubscriptExpr 0x5599a30001b0 <col:3, col:7> 'double' lvalue
|     | |-ImplicitCastExpr 0x5599a3000198 <col:3> 'double *' <ArrayToPointerDecay>
|     | | `-DeclRefExpr 0x5599a3000158 <col:3> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
|     | `-IntegerLiteral 0x5599a3000178 <col:6> 'int' 0
|     `-ImplicitCastExpr 0x5599a30001f0 <col:11> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x5599a30001d0 <col:11> 'double' lvalue Var 0x5599a2ffee28 't2' 'double'
`-FunctionDecl 0x5599a30002e8 <line:36:1, line:52:1> line:36:5 main 'int ()'
  `-CompoundStmt 0x5599a3000ca8 <line:37:1, line:52:1>
    |-BinaryOperator 0x5599a3000420 <line:38:3, col:11> 'double' '='
    | |-ArraySubscriptExpr 0x5599a30003e0 <col:3, col:7> 'double' lvalue
    | | |-ImplicitCastExpr 0x5599a30003c8 <col:3> 'double *' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x5599a3000388 <col:3> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
    | | `-IntegerLiteral 0x5599a30003a8 <col:6> 'int' 0
    | `-FloatingLiteral 0x5599a3000400 <col:11> 'double' 0.000000e+00
    |-BinaryOperator 0x5599a30004d8 <col:15, col:23> 'double' '='
    | |-ArraySubscriptExpr 0x5599a3000498 <col:15, col:19> 'double' lvalue
    | | |-ImplicitCastExpr 0x5599a3000480 <col:15> 'double *' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x5599a3000440 <col:15> 'double [2]' lvalue Var 0x5599a2ffe7e0 'D1' 'double [2]'
    | | `-IntegerLiteral 0x5599a3000460 <col:18> 'int' 1
    | `-FloatingLiteral 0x5599a30004b8 <col:23> 'double' 0.000000e+00
    |-BinaryOperator 0x5599a3000590 <line:39:3, col:11> 'double' '='
    | |-ArraySubscriptExpr 0x5599a3000550 <col:3, col:7> 'double' lvalue
    | | |-ImplicitCastExpr 0x5599a3000538 <col:3> 'double *' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x5599a30004f8 <col:3> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
    | | `-IntegerLiteral 0x5599a3000518 <col:6> 'int' 0
    | `-FloatingLiteral 0x5599a3000570 <col:11> 'double' 0.000000e+00
    |-BinaryOperator 0x5599a3000648 <col:15, col:23> 'double' '='
    | |-ArraySubscriptExpr 0x5599a3000608 <col:15, col:19> 'double' lvalue
    | | |-ImplicitCastExpr 0x5599a30005f0 <col:15> 'double *' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x5599a30005b0 <col:15> 'double [2]' lvalue Var 0x5599a2ffe8a8 'D2' 'double [2]'
    | | `-IntegerLiteral 0x5599a30005d0 <col:18> 'int' 1
    | `-FloatingLiteral 0x5599a3000628 <col:23> 'double' 0.000000e+00
    |-BinaryOperator 0x5599a30006a8 <line:40:3, col:7> 'double' '='
    | |-DeclRefExpr 0x5599a3000668 <col:3> 'double' lvalue Var 0x5599a2ffe940 'P' 'double'
    | `-FloatingLiteral 0x5599a3000688 <col:7> 'double' 0.000000e+00
    |-WhileStmt 0x5599a3000c60 <line:42:3, line:50:3>
    | |-IntegerLiteral 0x5599a30006c8 <line:42:10> 'int' 1
    | `-CompoundStmt 0x5599a3000c30 <col:13, line:50:3>
    |   |-BinaryOperator 0x5599a3000798 <line:44:5, col:34> 'double' '='
    |   | |-DeclRefExpr 0x5599a30006e8 <col:5> 'double' lvalue Var 0x5599a2ffe9c0 'X' 'double'
    |   | `-CallExpr 0x5599a3000778 <col:9, col:34> 'double'
    |   |   `-ImplicitCastExpr 0x5599a3000760 <col:9> 'double (*)()' <FunctionToPointerDecay>
    |   |     `-DeclRefExpr 0x5599a3000708 <col:9> 'double ()' Function 0x5599a2fd9848 '__VERIFIER_nondet_double' 'double ()'
    |   |-CallExpr 0x5599a3000978 <line:45:5, col:44> 'void'
    |   | |-ImplicitCastExpr 0x5599a3000960 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x5599a30007b8 <col:5> 'void (int)' Function 0x5599a2fd99d0 '__VERIFIER_assume' 'void (int)'
    |   | `-BinaryOperator 0x5599a3000908 <col:23, col:41> 'int' '&&'
    |   |   |-BinaryOperator 0x5599a3000870 <col:23, col:29> 'int' '>='
    |   |   | |-ImplicitCastExpr 0x5599a3000858 <col:23> 'double' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x5599a3000800 <col:23> 'double' lvalue Var 0x5599a2ffe9c0 'X' 'double'
    |   |   | `-UnaryOperator 0x5599a3000840 <col:28, col:29> 'double' prefix '-'
    |   |   |   `-FloatingLiteral 0x5599a3000820 <col:29> 'double' 1.000000e+01
    |   |   `-BinaryOperator 0x5599a30008e8 <col:36, col:41> 'int' '<='
    |   |     |-ImplicitCastExpr 0x5599a30008d0 <col:36> 'double' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x5599a3000890 <col:36> 'double' lvalue Var 0x5599a2ffe9c0 'X' 'double'
    |   |     `-FloatingLiteral 0x5599a30008b0 <col:41> 'double' 1.000000e+01
    |   |-CallExpr 0x5599a3000a78 <line:47:5, col:16> 'void'
    |   | |-ImplicitCastExpr 0x5599a3000a60 <col:5> 'void (*)(double *, double *)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x5599a30009a0 <col:5> 'void (double *, double *)' Function 0x5599a2ffebe0 'iir4' 'void (double *, double *)'
    |   | |-UnaryOperator 0x5599a30009e0 <col:10, col:11> 'double *' prefix '&' cannot overflow
    |   | | `-DeclRefExpr 0x5599a30009c0 <col:11> 'double' lvalue Var 0x5599a2ffe9c0 'X' 'double'
    |   | `-UnaryOperator 0x5599a3000a18 <col:14, col:15> 'double *' prefix '&' cannot overflow
    |   |   `-DeclRefExpr 0x5599a30009f8 <col:15> 'double' lvalue Var 0x5599a2ffe940 'P' 'double'
    |   `-CallExpr 0x5599a3000c08 <line:49:5, col:46> 'void'
    |     |-ImplicitCastExpr 0x5599a3000bf0 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x5599a3000aa8 <col:5> 'void (int)' Function 0x5599a2fd9b20 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x5599a3000bd0 <col:23, col:42> 'int' '&&'
    |       |-BinaryOperator 0x5599a3000b38 <col:23, col:29> 'int' '>='
    |       | |-ImplicitCastExpr 0x5599a3000b20 <col:23> 'double' <LValueToRValue>
    |       | | `-DeclRefExpr 0x5599a3000ac8 <col:23> 'double' lvalue Var 0x5599a2ffe940 'P' 'double'
    |       | `-UnaryOperator 0x5599a3000b08 <col:28, col:29> 'double' prefix '-'
    |       |   `-FloatingLiteral 0x5599a3000ae8 <col:29> 'double' 1.000000e+30
    |       `-BinaryOperator 0x5599a3000bb0 <col:37, col:42> 'int' '<='
    |         |-ImplicitCastExpr 0x5599a3000b98 <col:37> 'double' <LValueToRValue>
    |         | `-DeclRefExpr 0x5599a3000b58 <col:37> 'double' lvalue Var 0x5599a2ffe940 'P' 'double'
    |         `-FloatingLiteral 0x5599a3000b78 <col:42> 'double' 1.000000e+30
    `-ReturnStmt 0x5599a3000c98 <line:51:3, col:10>
      `-IntegerLiteral 0x5599a3000c78 <col:10> 'int' 0
