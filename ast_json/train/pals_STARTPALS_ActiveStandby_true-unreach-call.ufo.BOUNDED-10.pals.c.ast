TranslationUnitDecl 0x562fceb126c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x562fceb12f88 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x562fceb12c60 '__int128'
|-TypedefDecl 0x562fceb12ff8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x562fceb12c80 'unsigned __int128'
|-TypedefDecl 0x562fceb13300 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x562fceb130d0 'struct __NSConstantString_tag'
|   `-Record 0x562fceb13050 '__NSConstantString_tag'
|-TypedefDecl 0x562fceb133a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x562fceb13360 'char *'
|   `-BuiltinType 0x562fceb12760 'char'
|-TypedefDecl 0x562fceb52360 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x562fceb13640 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x562fceb13480 'struct __va_list_tag'
|     `-Record 0x562fceb13400 '__va_list_tag'
|-FunctionDecl 0x562fceb52440 <seq-mthreaded/pals_STARTPALS_ActiveStandby_true-unreach-call.ufo.BOUNDED-10.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x562fceb52620 <line:61:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
| `-FullComment 0x562fceb927e0 <line:3:4, line:56:69>
|   |-ParagraphComment 0x562fceb91e10 <line:3:4, col:71>
|   | `-TextComment 0x562fceb91de0 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x562fceb91e60 <line:5:1, col:67>
|   | `-TextComment 0x562fceb91e30 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x562fceb91f00 <line:7:1, line:9:4>
|   | |-TextComment 0x562fceb91e80 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x562fceb91ea0 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x562fceb91ec0 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x562fceb91fa0 <line:11:1, line:13:12>
|   | |-TextComment 0x562fceb91f20 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x562fceb91f40 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x562fceb91f60 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x562fceb92040 <line:15:1, line:17:68>
|   | |-TextComment 0x562fceb91fc0 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x562fceb91fe0 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x562fceb92000 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x562fceb92130 <line:19:1, line:23:10>
|   | |-TextComment 0x562fceb92060 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x562fceb92080 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x562fceb920a0 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x562fceb920c0 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x562fceb920e0 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x562fceb92150 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x562fceb921b0 <col:15, col:23>
|   |   `-TextComment 0x562fceb92180 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x562fceb92250 <line:25:1, line:27:10>
|   | |-TextComment 0x562fceb921d0 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x562fceb921f0 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x562fceb92210 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x562fceb92270 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x562fceb922d0 <col:15, col:23>
|   |   `-TextComment 0x562fceb922a0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x562fceb92340 <line:29:1, line:30:15>
|   | |-TextComment 0x562fceb922f0 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x562fceb92310 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x562fceb92430 <line:32:1, line:36:7>
|   | |-TextComment 0x562fceb92360 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x562fceb92380 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x562fceb923a0 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x562fceb923c0 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x562fceb923e0 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x562fceb924d0 <line:38:1, line:40:61>
|   | |-TextComment 0x562fceb92450 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x562fceb92470 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x562fceb92490 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x562fceb92630 <line:42:1, line:49:37>
|   | |-TextComment 0x562fceb924f0 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x562fceb92510 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x562fceb92530 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x562fceb92550 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x562fceb92570 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x562fceb92590 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x562fceb925b0 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x562fceb925d0 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x562fceb926a0 <line:51:1, line:52:13>
|   | |-TextComment 0x562fceb92650 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x562fceb92670 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x562fceb926f0 <line:54:1, col:10>
|   | `-TextComment 0x562fceb926c0 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x562fceb92740 <line:56:2, col:69>
|     `-TextComment 0x562fceb92710 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x562fceb52758 prev 0x562fceb52620 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x562fceb528c0 <line:63:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
|-TypedefDecl 0x562fceb52970 <line:64:1, col:14> col:14 referenced int8_t 'char'
| `-BuiltinType 0x562fceb12760 'char'
|-TypedefDecl 0x562fceb52a08 <line:65:1, col:16> col:16 referenced msg_t 'int8_t':'char'
| `-TypedefType 0x562fceb529d0 'int8_t' sugar
|   |-Typedef 0x562fceb52970 'int8_t'
|   `-BuiltinType 0x562fceb12760 'char'
|-TypedefDecl 0x562fceb52a78 <line:66:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x562fceb127c0 'int'
|-FunctionDecl 0x562fceb52cc0 <line:67:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x562fceb52b08 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x562fceb52ba8 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x562fceb52e90 <line:68:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x562fceb52d80 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x562fceb52df8 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x562fceb52f50 <line:69:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x562fceb53000 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x562fceb52fd8 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x562fceb52fb8 <col:28> 'int' 1
|-VarDecl 0x562fceb53038 <line:70:1, col:8> col:8 cs1 'port_t':'int'
|-VarDecl 0x562fceb530b0 <line:71:1, col:8> col:8 used cs1_old 'int8_t':'char'
|-VarDecl 0x562fceb53128 <line:72:1, col:8> col:8 used cs1_new 'int8_t':'char'
|-VarDecl 0x562fceb531a0 <line:73:1, col:8> col:8 cs2 'port_t':'int'
|-VarDecl 0x562fceb53218 <line:74:1, col:8> col:8 used cs2_old 'int8_t':'char'
|-VarDecl 0x562fceb53290 <line:75:1, col:8> col:8 used cs2_new 'int8_t':'char'
|-VarDecl 0x562fceb7a070 <line:76:1, col:8> col:8 s1s2 'port_t':'int'
|-VarDecl 0x562fceb7a0e8 <line:77:1, col:8> col:8 used s1s2_old 'int8_t':'char'
|-VarDecl 0x562fceb7a160 <line:78:1, col:8> col:8 used s1s2_new 'int8_t':'char'
|-VarDecl 0x562fceb7a1d8 <line:79:1, col:8> col:8 s1s1 'port_t':'int'
|-VarDecl 0x562fceb7a250 <line:80:1, col:8> col:8 used s1s1_old 'int8_t':'char'
|-VarDecl 0x562fceb7a2c8 <line:81:1, col:8> col:8 used s1s1_new 'int8_t':'char'
|-VarDecl 0x562fceb7a340 <line:82:1, col:8> col:8 s2s1 'port_t':'int'
|-VarDecl 0x562fceb7a3b8 <line:83:1, col:8> col:8 used s2s1_old 'int8_t':'char'
|-VarDecl 0x562fceb7a430 <line:84:1, col:8> col:8 used s2s1_new 'int8_t':'char'
|-VarDecl 0x562fceb7a4a8 <line:85:1, col:8> col:8 s2s2 'port_t':'int'
|-VarDecl 0x562fceb7a520 <line:86:1, col:8> col:8 used s2s2_old 'int8_t':'char'
|-VarDecl 0x562fceb7a598 <line:87:1, col:8> col:8 used s2s2_new 'int8_t':'char'
|-VarDecl 0x562fceb7a610 <line:88:1, col:8> col:8 s1p 'port_t':'int'
|-VarDecl 0x562fceb7a688 <line:89:1, col:8> col:8 used s1p_old 'int8_t':'char'
|-VarDecl 0x562fceb7a700 <line:90:1, col:8> col:8 used s1p_new 'int8_t':'char'
|-VarDecl 0x562fceb7a778 <line:91:1, col:8> col:8 s2p 'port_t':'int'
|-VarDecl 0x562fceb7a7f0 <line:92:1, col:8> col:8 used s2p_old 'int8_t':'char'
|-VarDecl 0x562fceb7a868 <line:93:1, col:8> col:8 used s2p_new 'int8_t':'char'
|-FunctionDecl 0x562fceb7a920 prev 0x562fceb528c0 <line:94:1, col:37> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x562fceb7aa10 prev 0x562fceb52758 <line:95:1, col:36> col:13 used __VERIFIER_nondet_char 'char (void)' extern
|-VarDecl 0x562fceb7aac0 <line:96:1, col:7> col:7 used side1Failed '_Bool'
|-VarDecl 0x562fceb7ab38 <line:97:1, col:7> col:7 used side2Failed '_Bool'
|-VarDecl 0x562fceb7abb0 <line:98:1, col:7> col:7 used side1_written 'msg_t':'char'
|-VarDecl 0x562fceb7ac28 <line:99:1, col:7> col:7 used side2_written 'msg_t':'char'
|-FunctionDecl 0x562fceb7ad70 <line:100:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x562fceb7aca0 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x562fceb7af00 <line:101:1, col:39> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x562fceb7ae30 <col:31, col:35> col:35 arg 'int'
|-VarDecl 0x562fceb7afb8 <line:102:1, col:14> col:14 used side1Failed_History_0 '_Bool' static
|-VarDecl 0x562fceb7b080 <line:103:1, col:14> col:14 used side1Failed_History_1 '_Bool' static
|-VarDecl 0x562fceb7b0f8 <line:104:1, col:14> col:14 used side1Failed_History_2 '_Bool' static
|-VarDecl 0x562fceb7b170 <line:105:1, col:14> col:14 used side2Failed_History_0 '_Bool' static
|-VarDecl 0x562fceb7b1e8 <line:106:1, col:14> col:14 used side2Failed_History_1 '_Bool' static
|-VarDecl 0x562fceb7b260 <line:107:1, col:14> col:14 used side2Failed_History_2 '_Bool' static
|-VarDecl 0x562fceb7b2d8 <line:108:1, col:15> col:15 used active_side_History_0 'int8_t':'char' static
|-VarDecl 0x562fceb7b350 <line:109:1, col:15> col:15 used active_side_History_1 'int8_t':'char' static
|-VarDecl 0x562fceb7b3c8 <line:110:1, col:15> col:15 used active_side_History_2 'int8_t':'char' static
|-VarDecl 0x562fceb7b440 <line:111:1, col:14> col:14 used manual_selection_History_0 'msg_t':'char' static
|-VarDecl 0x562fceb7b4b8 <line:112:1, col:14> col:14 used manual_selection_History_1 'msg_t':'char' static
|-VarDecl 0x562fceb7b530 <line:113:1, col:14> col:14 used manual_selection_History_2 'msg_t':'char' static
|-FunctionDecl 0x562fceb7b638 <line:114:1, line:124:1> line:114:6 used write_side1_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x562fceb7b5a8 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x562fceb7b888 <line:115:1, line:124:1>
|   `-CompoundStmt 0x562fceb7b858 <line:118:3, line:123:1>
|     |-BinaryOperator 0x562fceb7b738 <line:119:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb7b6e0 <col:3> '_Bool' lvalue Var 0x562fceb7b0f8 'side1Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x562fceb7b720 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7b700 <col:27> '_Bool' lvalue Var 0x562fceb7b080 'side1Failed_History_1' '_Bool'
|     |-BinaryOperator 0x562fceb7b7b0 <line:120:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb7b758 <col:3> '_Bool' lvalue Var 0x562fceb7b080 'side1Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x562fceb7b798 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7b778 <col:27> '_Bool' lvalue Var 0x562fceb7afb8 'side1Failed_History_0' '_Bool'
|     |-BinaryOperator 0x562fceb7b828 <line:121:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb7b7d0 <col:3> '_Bool' lvalue Var 0x562fceb7afb8 'side1Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x562fceb7b810 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7b7f0 <col:27> '_Bool' lvalue ParmVar 0x562fceb7b5a8 'val' '_Bool'
|     `-ReturnStmt 0x562fceb7b848 <line:122:3>
|-FunctionDecl 0x562fceb7b980 <line:125:1, line:143:1> line:125:7 used read_side1_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x562fceb7b8b8 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x562fceb7bff8 <line:126:1, line:143:1>
|   `-CompoundStmt 0x562fceb7bfe0 <line:129:3, line:142:1>
|     `-IfStmt 0x562fceb7bfb8 <line:130:3, line:141:3> has_else
|       |-BinaryOperator 0x562fceb7bac0 <line:130:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x562fceb7ba78 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x562fceb7ba60 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x562fceb7ba28 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7b8b8 'index' 'unsigned char'
|       | `-IntegerLiteral 0x562fceb7baa0 <col:22> 'int' 0
|       |-CompoundStmt 0x562fceb7bb48 <col:25, line:132:3>
|       | `-ReturnStmt 0x562fceb7bb38 <line:131:5, col:34>
|       |   `-ImplicitCastExpr 0x562fceb7bb20 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x562fceb7bb00 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x562fceb7bae0 <col:13> '_Bool' lvalue Var 0x562fceb7afb8 'side1Failed_History_0' '_Bool'
|       `-IfStmt 0x562fceb7bf90 <line:133:3, line:141:3> has_else
|         |-BinaryOperator 0x562fceb7bbf8 <line:133:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x562fceb7bbb0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x562fceb7bb98 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x562fceb7bb60 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7b8b8 'index' 'unsigned char'
|         | `-IntegerLiteral 0x562fceb7bbd8 <col:22> 'int' 1
|         |-CompoundStmt 0x562fceb7bc80 <col:25, line:135:3>
|         | `-ReturnStmt 0x562fceb7bc70 <line:134:5, col:34>
|         |   `-ImplicitCastExpr 0x562fceb7bc58 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x562fceb7bc38 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x562fceb7bc18 <col:13> '_Bool' lvalue Var 0x562fceb7b080 'side1Failed_History_1' '_Bool'
|         `-IfStmt 0x562fceb7bf68 <line:136:3, line:141:3> has_else
|           |-BinaryOperator 0x562fceb7bd30 <line:136:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x562fceb7bce8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x562fceb7bcd0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x562fceb7bc98 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7b8b8 'index' 'unsigned char'
|           | `-IntegerLiteral 0x562fceb7bd10 <col:22> 'int' 2
|           |-CompoundStmt 0x562fceb7bdb8 <col:25, line:138:3>
|           | `-ReturnStmt 0x562fceb7bda8 <line:137:5, col:34>
|           |   `-ImplicitCastExpr 0x562fceb7bd90 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x562fceb7bd70 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x562fceb7bd50 <col:13> '_Bool' lvalue Var 0x562fceb7b0f8 'side1Failed_History_2' '_Bool'
|           `-CompoundStmt 0x562fceb7bf48 <line:138:10, line:141:3>
|             |-CallExpr 0x562fceb7be98 <line:139:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x562fceb7be80 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x562fceb7bdd0 <col:5> 'void (_Bool)' Function 0x562fceb7ad70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x562fceb7be20 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x562fceb7bdf0 <col:19> 'int' 0
|             `-ReturnStmt 0x562fceb7bf38 <line:140:5, col:21>
|               `-ParenExpr 0x562fceb7bf18 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x562fceb7bef0 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x562fceb7bec0 <col:20> 'int' 0
|-FunctionDecl 0x562fceb7d250 <line:144:1, line:154:1> line:144:6 used write_side2_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x562fceb7d1c0 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x562fceb7d4a0 <line:145:1, line:154:1>
|   `-CompoundStmt 0x562fceb7d470 <line:148:3, line:153:1>
|     |-BinaryOperator 0x562fceb7d350 <line:149:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb7d2f8 <col:3> '_Bool' lvalue Var 0x562fceb7b260 'side2Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x562fceb7d338 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7d318 <col:27> '_Bool' lvalue Var 0x562fceb7b1e8 'side2Failed_History_1' '_Bool'
|     |-BinaryOperator 0x562fceb7d3c8 <line:150:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb7d370 <col:3> '_Bool' lvalue Var 0x562fceb7b1e8 'side2Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x562fceb7d3b0 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7d390 <col:27> '_Bool' lvalue Var 0x562fceb7b170 'side2Failed_History_0' '_Bool'
|     |-BinaryOperator 0x562fceb7d440 <line:151:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb7d3e8 <col:3> '_Bool' lvalue Var 0x562fceb7b170 'side2Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x562fceb7d428 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7d408 <col:27> '_Bool' lvalue ParmVar 0x562fceb7d1c0 'val' '_Bool'
|     `-ReturnStmt 0x562fceb7d460 <line:152:3>
|-FunctionDecl 0x562fceb7d560 <line:155:1, line:173:1> line:155:7 used read_side2_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x562fceb7d4d0 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x562fceb7dba0 <line:156:1, line:173:1>
|   `-CompoundStmt 0x562fceb7db88 <line:159:3, line:172:1>
|     `-IfStmt 0x562fceb7db60 <line:160:3, line:171:3> has_else
|       |-BinaryOperator 0x562fceb7d6a0 <line:160:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x562fceb7d658 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x562fceb7d640 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x562fceb7d608 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7d4d0 'index' 'unsigned char'
|       | `-IntegerLiteral 0x562fceb7d680 <col:22> 'int' 0
|       |-CompoundStmt 0x562fceb7d728 <col:25, line:162:3>
|       | `-ReturnStmt 0x562fceb7d718 <line:161:5, col:34>
|       |   `-ImplicitCastExpr 0x562fceb7d700 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x562fceb7d6e0 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x562fceb7d6c0 <col:13> '_Bool' lvalue Var 0x562fceb7b170 'side2Failed_History_0' '_Bool'
|       `-IfStmt 0x562fceb7db38 <line:163:3, line:171:3> has_else
|         |-BinaryOperator 0x562fceb7d7d8 <line:163:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x562fceb7d790 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x562fceb7d778 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x562fceb7d740 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7d4d0 'index' 'unsigned char'
|         | `-IntegerLiteral 0x562fceb7d7b8 <col:22> 'int' 1
|         |-CompoundStmt 0x562fceb7d860 <col:25, line:165:3>
|         | `-ReturnStmt 0x562fceb7d850 <line:164:5, col:34>
|         |   `-ImplicitCastExpr 0x562fceb7d838 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x562fceb7d818 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x562fceb7d7f8 <col:13> '_Bool' lvalue Var 0x562fceb7b1e8 'side2Failed_History_1' '_Bool'
|         `-IfStmt 0x562fceb7db10 <line:166:3, line:171:3> has_else
|           |-BinaryOperator 0x562fceb7d910 <line:166:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x562fceb7d8c8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x562fceb7d8b0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x562fceb7d878 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7d4d0 'index' 'unsigned char'
|           | `-IntegerLiteral 0x562fceb7d8f0 <col:22> 'int' 2
|           |-CompoundStmt 0x562fceb7d998 <col:25, line:168:3>
|           | `-ReturnStmt 0x562fceb7d988 <line:167:5, col:34>
|           |   `-ImplicitCastExpr 0x562fceb7d970 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x562fceb7d950 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x562fceb7d930 <col:13> '_Bool' lvalue Var 0x562fceb7b260 'side2Failed_History_2' '_Bool'
|           `-CompoundStmt 0x562fceb7daf0 <line:168:10, line:171:3>
|             |-CallExpr 0x562fceb7da40 <line:169:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x562fceb7da28 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x562fceb7d9b0 <col:5> 'void (_Bool)' Function 0x562fceb7ad70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x562fceb7da00 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x562fceb7d9d0 <col:19> 'int' 0
|             `-ReturnStmt 0x562fceb7dae0 <line:170:5, col:21>
|               `-ParenExpr 0x562fceb7dac0 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x562fceb7da98 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x562fceb7da68 <col:20> 'int' 0
|-FunctionDecl 0x562fceb7dcd0 <line:174:1, line:184:1> line:174:6 used write_active_side_history 'void (int8_t)'
| |-ParmVarDecl 0x562fceb7dbc8 <col:32, col:39> col:39 used val 'int8_t':'char'
| `-CompoundStmt 0x562fceb7df20 <line:175:1, line:184:1>
|   `-CompoundStmt 0x562fceb7def0 <line:178:3, line:183:1>
|     |-BinaryOperator 0x562fceb7ddd0 <line:179:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb7dd78 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7b3c8 'active_side_History_2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb7ddb8 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7dd98 <col:27> 'int8_t':'char' lvalue Var 0x562fceb7b350 'active_side_History_1' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb7de48 <line:180:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb7ddf0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7b350 'active_side_History_1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb7de30 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7de10 <col:27> 'int8_t':'char' lvalue Var 0x562fceb7b2d8 'active_side_History_0' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb7dec0 <line:181:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb7de68 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7b2d8 'active_side_History_0' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb7dea8 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7de88 <col:27> 'int8_t':'char' lvalue ParmVar 0x562fceb7dbc8 'val' 'int8_t':'char'
|     `-ReturnStmt 0x562fceb7dee0 <line:182:3>
|-FunctionDecl 0x562fceb7e060 <line:185:1, line:203:1> line:185:8 used read_active_side_history 'int8_t (unsigned char)'
| |-ParmVarDecl 0x562fceb7df50 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x562fceb7ead8 <line:186:1, line:203:1>
|   `-CompoundStmt 0x562fceb7eac0 <line:189:3, line:202:1>
|     `-IfStmt 0x562fceb7ea98 <line:190:3, line:201:3> has_else
|       |-BinaryOperator 0x562fceb7e1a0 <line:190:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x562fceb7e158 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x562fceb7e140 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x562fceb7e108 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7df50 'index' 'unsigned char'
|       | `-IntegerLiteral 0x562fceb7e180 <col:22> 'int' 0
|       |-CompoundStmt 0x562fceb7e648 <col:25, line:192:3>
|       | `-ReturnStmt 0x562fceb7e638 <line:191:5, col:34>
|       |   `-ImplicitCastExpr 0x562fceb7e620 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x562fceb7e600 <col:12, col:34> 'int8_t':'char' lvalue
|       |       `-DeclRefExpr 0x562fceb7e5e0 <col:13> 'int8_t':'char' lvalue Var 0x562fceb7b2d8 'active_side_History_0' 'int8_t':'char'
|       `-IfStmt 0x562fceb7ea70 <line:193:3, line:201:3> has_else
|         |-BinaryOperator 0x562fceb7e6f8 <line:193:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x562fceb7e6b0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x562fceb7e698 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x562fceb7e660 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7df50 'index' 'unsigned char'
|         | `-IntegerLiteral 0x562fceb7e6d8 <col:22> 'int' 1
|         |-CompoundStmt 0x562fceb7e780 <col:25, line:195:3>
|         | `-ReturnStmt 0x562fceb7e770 <line:194:5, col:34>
|         |   `-ImplicitCastExpr 0x562fceb7e758 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x562fceb7e738 <col:12, col:34> 'int8_t':'char' lvalue
|         |       `-DeclRefExpr 0x562fceb7e718 <col:13> 'int8_t':'char' lvalue Var 0x562fceb7b350 'active_side_History_1' 'int8_t':'char'
|         `-IfStmt 0x562fceb7ea48 <line:196:3, line:201:3> has_else
|           |-BinaryOperator 0x562fceb7e830 <line:196:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x562fceb7e7e8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x562fceb7e7d0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x562fceb7e798 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7df50 'index' 'unsigned char'
|           | `-IntegerLiteral 0x562fceb7e810 <col:22> 'int' 2
|           |-CompoundStmt 0x562fceb7e8b8 <col:25, line:198:3>
|           | `-ReturnStmt 0x562fceb7e8a8 <line:197:5, col:34>
|           |   `-ImplicitCastExpr 0x562fceb7e890 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x562fceb7e870 <col:12, col:34> 'int8_t':'char' lvalue
|           |       `-DeclRefExpr 0x562fceb7e850 <col:13> 'int8_t':'char' lvalue Var 0x562fceb7b3c8 'active_side_History_2' 'int8_t':'char'
|           `-CompoundStmt 0x562fceb7ea28 <line:198:10, line:201:3>
|             |-CallExpr 0x562fceb7e960 <line:199:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x562fceb7e948 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x562fceb7e8d0 <col:5> 'void (_Bool)' Function 0x562fceb7ad70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x562fceb7e920 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x562fceb7e8f0 <col:19> 'int' 0
|             `-ReturnStmt 0x562fceb7ea18 <line:200:5, col:24>
|               `-ParenExpr 0x562fceb7e9f8 <col:12, col:24> 'int8_t':'char'
|                 `-CStyleCastExpr 0x562fceb7e9d0 <col:13, col:23> 'int8_t':'char' <IntegralCast>
|                   `-UnaryOperator 0x562fceb7e9a8 <col:22, col:23> 'int' prefix '-'
|                     `-IntegerLiteral 0x562fceb7e988 <col:23> 'int' 2
|-FunctionDecl 0x562fceb7ebd0 <line:204:1, line:214:1> line:204:6 used write_manual_selection_history 'void (msg_t)'
| |-ParmVarDecl 0x562fceb7eb00 <col:37, col:43> col:43 used val 'msg_t':'char'
| `-CompoundStmt 0x562fceb7ee20 <line:205:1, line:214:1>
|   `-CompoundStmt 0x562fceb7edf0 <line:208:3, line:213:1>
|     |-BinaryOperator 0x562fceb7ecd0 <line:209:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb7ec78 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7b530 'manual_selection_History_2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x562fceb7ecb8 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7ec98 <col:32> 'msg_t':'char' lvalue Var 0x562fceb7b4b8 'manual_selection_History_1' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb7ed48 <line:210:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb7ecf0 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7b4b8 'manual_selection_History_1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x562fceb7ed30 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7ed10 <col:32> 'msg_t':'char' lvalue Var 0x562fceb7b440 'manual_selection_History_0' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb7edc0 <line:211:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb7ed68 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7b440 'manual_selection_History_0' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x562fceb7eda8 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb7ed88 <col:32> 'msg_t':'char' lvalue ParmVar 0x562fceb7eb00 'val' 'msg_t':'char'
|     `-ReturnStmt 0x562fceb7ede0 <line:212:3>
|-FunctionDecl 0x562fceb7ef20 <line:215:1, line:233:1> line:215:7 used read_manual_selection_history 'msg_t (unsigned char)'
| |-ParmVarDecl 0x562fceb7ee50 <col:37, col:51> col:51 used index 'unsigned char'
| `-CompoundStmt 0x562fceb7f560 <line:216:1, line:233:1>
|   `-CompoundStmt 0x562fceb7f548 <line:219:3, line:232:1>
|     `-IfStmt 0x562fceb7f520 <line:220:3, line:231:3> has_else
|       |-BinaryOperator 0x562fceb7f060 <line:220:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x562fceb7f018 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x562fceb7f000 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x562fceb7efc8 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7ee50 'index' 'unsigned char'
|       | `-IntegerLiteral 0x562fceb7f040 <col:22> 'int' 0
|       |-CompoundStmt 0x562fceb7f0e8 <col:25, line:222:3>
|       | `-ReturnStmt 0x562fceb7f0d8 <line:221:5, col:39>
|       |   `-ImplicitCastExpr 0x562fceb7f0c0 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x562fceb7f0a0 <col:12, col:39> 'msg_t':'char' lvalue
|       |       `-DeclRefExpr 0x562fceb7f080 <col:13> 'msg_t':'char' lvalue Var 0x562fceb7b440 'manual_selection_History_0' 'msg_t':'char'
|       `-IfStmt 0x562fceb7f4f8 <line:223:3, line:231:3> has_else
|         |-BinaryOperator 0x562fceb7f198 <line:223:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x562fceb7f150 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x562fceb7f138 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x562fceb7f100 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7ee50 'index' 'unsigned char'
|         | `-IntegerLiteral 0x562fceb7f178 <col:22> 'int' 1
|         |-CompoundStmt 0x562fceb7f220 <col:25, line:225:3>
|         | `-ReturnStmt 0x562fceb7f210 <line:224:5, col:39>
|         |   `-ImplicitCastExpr 0x562fceb7f1f8 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x562fceb7f1d8 <col:12, col:39> 'msg_t':'char' lvalue
|         |       `-DeclRefExpr 0x562fceb7f1b8 <col:13> 'msg_t':'char' lvalue Var 0x562fceb7b4b8 'manual_selection_History_1' 'msg_t':'char'
|         `-IfStmt 0x562fceb7f4d0 <line:226:3, line:231:3> has_else
|           |-BinaryOperator 0x562fceb7f2d0 <line:226:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x562fceb7f288 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x562fceb7f270 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x562fceb7f238 <col:13> 'unsigned char' lvalue ParmVar 0x562fceb7ee50 'index' 'unsigned char'
|           | `-IntegerLiteral 0x562fceb7f2b0 <col:22> 'int' 2
|           |-CompoundStmt 0x562fceb7f358 <col:25, line:228:3>
|           | `-ReturnStmt 0x562fceb7f348 <line:227:5, col:39>
|           |   `-ImplicitCastExpr 0x562fceb7f330 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x562fceb7f310 <col:12, col:39> 'msg_t':'char' lvalue
|           |       `-DeclRefExpr 0x562fceb7f2f0 <col:13> 'msg_t':'char' lvalue Var 0x562fceb7b530 'manual_selection_History_2' 'msg_t':'char'
|           `-CompoundStmt 0x562fceb7f4b0 <line:228:10, line:231:3>
|             |-CallExpr 0x562fceb7f400 <line:229:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x562fceb7f3e8 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x562fceb7f370 <col:5> 'void (_Bool)' Function 0x562fceb7ad70 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x562fceb7f3c0 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x562fceb7f390 <col:19> 'int' 0
|             `-ReturnStmt 0x562fceb7f4a0 <line:230:5, col:22>
|               `-ParenExpr 0x562fceb7f480 <col:12, col:22> 'msg_t':'char'
|                 `-CStyleCastExpr 0x562fceb7f458 <col:13, col:21> 'msg_t':'char' <IntegralCast>
|                   `-IntegerLiteral 0x562fceb7f428 <col:21> 'int' 0
|-FunctionDecl 0x562fceb7f6b8 <line:234:1, line:277:1> line:234:5 used init 'int (void)'
| `-CompoundStmt 0x562fceb80728 <line:235:1, line:277:1>
|   `-CompoundStmt 0x562fceb806b0 <line:238:3, line:276:1>
|     |-IfStmt 0x562fceb7f878 <line:239:3, line:241:3>
|     | |-BinaryOperator 0x562fceb7f7f0 <line:239:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb7f7a8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb7f790 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb7f758 <col:13> '_Bool' lvalue Var 0x562fceb7afb8 'side1Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x562fceb7f7d0 <col:38> 'int' 0
|     | `-CompoundStmt 0x562fceb7f860 <col:41, line:241:3>
|     |   `-ReturnStmt 0x562fceb7f850 <line:240:5, col:14>
|     |     `-ParenExpr 0x562fceb7f830 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb7f810 <col:13> 'int' 0
|     |-IfStmt 0x562fceb7f9b0 <line:242:3, line:244:3>
|     | |-BinaryOperator 0x562fceb7f928 <line:242:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb7f8e0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb7f8c8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb7f890 <col:13> '_Bool' lvalue Var 0x562fceb7b170 'side2Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x562fceb7f908 <col:38> 'int' 0
|     | `-CompoundStmt 0x562fceb7f998 <col:41, line:244:3>
|     |   `-ReturnStmt 0x562fceb7f988 <line:243:5, col:14>
|     |     `-ParenExpr 0x562fceb7f968 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb7f948 <col:13> 'int' 0
|     |-IfStmt 0x562fceb7fb00 <line:245:3, line:247:3>
|     | |-BinaryOperator 0x562fceb7fa78 <line:245:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb7fa18 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb7fa00 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb7f9c8 <col:13> 'int8_t':'char' lvalue Var 0x562fceb7b2d8 'active_side_History_0' 'int8_t':'char'
|     | | `-UnaryOperator 0x562fceb7fa60 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x562fceb7fa40 <col:39> 'int' 2
|     | `-CompoundStmt 0x562fceb7fae8 <col:42, line:247:3>
|     |   `-ReturnStmt 0x562fceb7fad8 <line:246:5, col:14>
|     |     `-ParenExpr 0x562fceb7fab8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb7fa98 <col:13> 'int' 0
|     |-IfStmt 0x562fceb7fc38 <line:248:3, line:250:3>
|     | |-BinaryOperator 0x562fceb7fbb0 <line:248:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb7fb68 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb7fb50 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb7fb18 <col:13> 'msg_t':'char' lvalue Var 0x562fceb7b440 'manual_selection_History_0' 'msg_t':'char'
|     | | `-IntegerLiteral 0x562fceb7fb90 <col:43> 'int' 0
|     | `-CompoundStmt 0x562fceb7fc20 <col:46, line:250:3>
|     |   `-ReturnStmt 0x562fceb7fc10 <line:249:5, col:14>
|     |     `-ParenExpr 0x562fceb7fbf0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb7fbd0 <col:13> 'int' 0
|     |-IfStmt 0x562fceb7fd70 <line:251:3, line:253:3>
|     | |-BinaryOperator 0x562fceb7fce8 <line:251:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb7fca0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb7fc88 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb7fc50 <col:13> '_Bool' lvalue Var 0x562fceb7b080 'side1Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x562fceb7fcc8 <col:38> 'int' 0
|     | `-CompoundStmt 0x562fceb7fd58 <col:41, line:253:3>
|     |   `-ReturnStmt 0x562fceb7fd48 <line:252:5, col:14>
|     |     `-ParenExpr 0x562fceb7fd28 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb7fd08 <col:13> 'int' 0
|     |-IfStmt 0x562fceb7fea8 <line:254:3, line:256:3>
|     | |-BinaryOperator 0x562fceb7fe20 <line:254:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb7fdd8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb7fdc0 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb7fd88 <col:13> '_Bool' lvalue Var 0x562fceb7b1e8 'side2Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x562fceb7fe00 <col:38> 'int' 0
|     | `-CompoundStmt 0x562fceb7fe90 <col:41, line:256:3>
|     |   `-ReturnStmt 0x562fceb7fe80 <line:255:5, col:14>
|     |     `-ParenExpr 0x562fceb7fe60 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb7fe40 <col:13> 'int' 0
|     |-IfStmt 0x562fceb7fff8 <line:257:3, line:259:3>
|     | |-BinaryOperator 0x562fceb7ff70 <line:257:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb7ff10 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb7fef8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb7fec0 <col:13> 'int8_t':'char' lvalue Var 0x562fceb7b350 'active_side_History_1' 'int8_t':'char'
|     | | `-UnaryOperator 0x562fceb7ff58 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x562fceb7ff38 <col:39> 'int' 2
|     | `-CompoundStmt 0x562fceb7ffe0 <col:42, line:259:3>
|     |   `-ReturnStmt 0x562fceb7ffd0 <line:258:5, col:14>
|     |     `-ParenExpr 0x562fceb7ffb0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb7ff90 <col:13> 'int' 0
|     |-IfStmt 0x562fceb80130 <line:260:3, line:262:3>
|     | |-BinaryOperator 0x562fceb800a8 <line:260:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb80060 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb80048 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb80010 <col:13> 'msg_t':'char' lvalue Var 0x562fceb7b4b8 'manual_selection_History_1' 'msg_t':'char'
|     | | `-IntegerLiteral 0x562fceb80088 <col:43> 'int' 0
|     | `-CompoundStmt 0x562fceb80118 <col:46, line:262:3>
|     |   `-ReturnStmt 0x562fceb80108 <line:261:5, col:14>
|     |     `-ParenExpr 0x562fceb800e8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb800c8 <col:13> 'int' 0
|     |-IfStmt 0x562fceb80268 <line:263:3, line:265:3>
|     | |-BinaryOperator 0x562fceb801e0 <line:263:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb80198 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb80180 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb80148 <col:13> '_Bool' lvalue Var 0x562fceb7b0f8 'side1Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x562fceb801c0 <col:38> 'int' 0
|     | `-CompoundStmt 0x562fceb80250 <col:41, line:265:3>
|     |   `-ReturnStmt 0x562fceb80240 <line:264:5, col:14>
|     |     `-ParenExpr 0x562fceb80220 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb80200 <col:13> 'int' 0
|     |-IfStmt 0x562fceb803a0 <line:266:3, line:268:3>
|     | |-BinaryOperator 0x562fceb80318 <line:266:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb802d0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb802b8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb80280 <col:13> '_Bool' lvalue Var 0x562fceb7b260 'side2Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x562fceb802f8 <col:38> 'int' 0
|     | `-CompoundStmt 0x562fceb80388 <col:41, line:268:3>
|     |   `-ReturnStmt 0x562fceb80378 <line:267:5, col:14>
|     |     `-ParenExpr 0x562fceb80358 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb80338 <col:13> 'int' 0
|     |-IfStmt 0x562fceb804f0 <line:269:3, line:271:3>
|     | |-BinaryOperator 0x562fceb80468 <line:269:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb80408 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb803f0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb803b8 <col:13> 'int8_t':'char' lvalue Var 0x562fceb7b3c8 'active_side_History_2' 'int8_t':'char'
|     | | `-UnaryOperator 0x562fceb80450 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x562fceb80430 <col:39> 'int' 2
|     | `-CompoundStmt 0x562fceb804d8 <col:42, line:271:3>
|     |   `-ReturnStmt 0x562fceb804c8 <line:270:5, col:14>
|     |     `-ParenExpr 0x562fceb804a8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb80488 <col:13> 'int' 0
|     |-IfStmt 0x562fceb80648 <line:272:3, line:274:3>
|     | |-BinaryOperator 0x562fceb805a0 <line:272:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x562fceb80558 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb80540 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb80508 <col:13> 'msg_t':'char' lvalue Var 0x562fceb7b530 'manual_selection_History_2' 'msg_t':'char'
|     | | `-IntegerLiteral 0x562fceb80580 <col:43> 'int' 0
|     | `-CompoundStmt 0x562fceb80630 <col:46, line:274:3>
|     |   `-ReturnStmt 0x562fceb80620 <line:273:5, col:14>
|     |     `-ParenExpr 0x562fceb80600 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x562fceb805c0 <col:13> 'int' 0
|     `-ReturnStmt 0x562fceb806a0 <line:275:3, col:12>
|       `-ParenExpr 0x562fceb80680 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x562fceb80660 <col:11> 'int' 1
|-FunctionDecl 0x562fceb80860 <line:278:1, line:290:1> line:278:8 used flip_the_side 'int8_t (int8_t)'
| |-ParmVarDecl 0x562fceb80750 <col:22, col:29> col:29 used side 'int8_t':'char'
| `-CompoundStmt 0x562fceb80c30 <line:279:1, line:290:1>
|   |-DeclStmt 0x562fceb80988 <line:280:3, col:11>
|   | `-VarDecl 0x562fceb80920 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x562fceb80c10 <line:282:3, line:289:1>
|     |-IfStmt 0x562fceb80b48 <line:283:3, line:287:3> has_else
|     | |-BinaryOperator 0x562fceb80a38 <line:283:7, col:21> 'int' '=='
|     | | |-CStyleCastExpr 0x562fceb809f0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb809d8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb809a0 <col:13> 'int8_t':'char' lvalue ParmVar 0x562fceb80750 'side' 'int8_t':'char'
|     | | `-IntegerLiteral 0x562fceb80a18 <col:21> 'int' 1
|     | |-CompoundStmt 0x562fceb80ab8 <col:24, line:285:3>
|     | | `-BinaryOperator 0x562fceb80a98 <line:284:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x562fceb80a58 <col:5> 'int' lvalue Var 0x562fceb80920 'tmp' 'int'
|     | |   `-IntegerLiteral 0x562fceb80a78 <col:11> 'int' 0
|     | `-CompoundStmt 0x562fceb80b30 <line:285:10, line:287:3>
|     |   `-BinaryOperator 0x562fceb80b10 <line:286:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x562fceb80ad0 <col:5> 'int' lvalue Var 0x562fceb80920 'tmp' 'int'
|     |     `-IntegerLiteral 0x562fceb80af0 <col:11> 'int' 1
|     `-ReturnStmt 0x562fceb80c00 <line:288:3, col:23>
|       `-ParenExpr 0x562fceb80be0 <col:10, col:23> 'int8_t':'char'
|         `-CStyleCastExpr 0x562fceb80bb8 <col:11, col:20> 'int8_t':'char' <IntegralCast>
|           `-ImplicitCastExpr 0x562fceb80ba0 <col:20> 'int' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x562fceb80b70 <col:20> 'int' lvalue Var 0x562fceb80920 'tmp' 'int'
|-FunctionDecl 0x562fceb80d20 <line:291:1, line:305:1> line:291:6 used Console_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x562fceb817b0 <line:292:1, line:305:1>
|   |-DeclStmt 0x562fceb80e38 <line:293:3, col:26>
|   | `-VarDecl 0x562fceb80dd0 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x562fceb80ec8 <line:294:3, col:12>
|   | `-VarDecl 0x562fceb80e60 <col:3, col:8> col:8 used tmp 'char'
|   `-CompoundStmt 0x562fceb81768 <line:296:3, line:304:1>
|     |-BinaryOperator 0x562fceb80f88 <line:297:3, col:32> 'char' '='
|     | |-DeclRefExpr 0x562fceb80ee0 <col:3> 'char' lvalue Var 0x562fceb80e60 'tmp' 'char'
|     | `-CallExpr 0x562fceb80f68 <col:9, col:32> 'char'
|     |   `-ImplicitCastExpr 0x562fceb80f50 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x562fceb80f00 <col:9> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|     |-BinaryOperator 0x562fceb81000 <line:298:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb80fa8 <col:3> 'msg_t':'char' lvalue Var 0x562fceb80dd0 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x562fceb80fe8 <col:22> 'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb80fc8 <col:22> 'char' lvalue Var 0x562fceb80e60 'tmp' 'char'
|     |-CallExpr 0x562fceb810d8 <line:299:3, col:50> 'void'
|     | |-ImplicitCastExpr 0x562fceb810c0 <col:3> 'void (*)(msg_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x562fceb81020 <col:3> 'void (msg_t)' Function 0x562fceb7ebd0 'write_manual_selection_history' 'void (msg_t)'
|     | `-ImplicitCastExpr 0x562fceb81100 <col:34> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb81040 <col:34> 'msg_t':'char' lvalue Var 0x562fceb80dd0 'manual_selection' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb813c0 <line:300:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb81118 <col:3> 'int8_t':'char' lvalue Var 0x562fceb53128 'cs1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb813a8 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x562fceb81378 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x562fceb812b8 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x562fceb811d8 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x562fceb811a8 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x562fceb81178 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x562fceb81138 <col:13> 'msg_t':'char' lvalue Var 0x562fceb80dd0 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x562fceb811c0 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x562fceb81190 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x562fceb81158 <col:33> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x562fceb81298 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x562fceb81268 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x562fceb81238 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x562fceb811f8 <col:42> 'int8_t':'char' lvalue Var 0x562fceb53128 'cs1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x562fceb81280 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x562fceb81250 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x562fceb81218 <col:53> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x562fceb81330 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x562fceb81318 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb812d8 <col:61> 'msg_t':'char' lvalue Var 0x562fceb80dd0 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x562fceb81360 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x562fceb81348 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fceb812f8 <col:80> 'int8_t':'char' lvalue Var 0x562fceb53128 'cs1_new' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb816a0 <line:301:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb813e0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb53290 'cs2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb81688 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x562fceb81658 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x562fceb81580 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x562fceb814a0 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x562fceb81470 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x562fceb81440 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x562fceb81400 <col:13> 'msg_t':'char' lvalue Var 0x562fceb80dd0 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x562fceb81488 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x562fceb81458 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x562fceb81420 <col:33> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x562fceb81560 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x562fceb81530 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x562fceb81500 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x562fceb814c0 <col:42> 'int8_t':'char' lvalue Var 0x562fceb53290 'cs2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x562fceb81548 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x562fceb81518 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x562fceb814e0 <col:53> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x562fceb81610 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x562fceb815e0 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb815a0 <col:61> 'msg_t':'char' lvalue Var 0x562fceb80dd0 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x562fceb81640 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x562fceb81628 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fceb815c0 <col:80> 'int8_t':'char' lvalue Var 0x562fceb53290 'cs2_new' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb81738 <line:302:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb816c0 <col:3> 'msg_t':'char' lvalue Var 0x562fceb80dd0 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x562fceb81710 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x562fceb816e0 <col:30> 'int' 0
|     `-ReturnStmt 0x562fceb81758 <line:303:3>
|-FunctionDecl 0x562fceb81870 <line:306:1, line:362:1> line:306:6 used Side1_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x562fceb845e0 <line:307:1, line:362:1>
|   |-DeclStmt 0x562fceb81988 <line:308:3, col:16>
|   | `-VarDecl 0x562fceb81920 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x562fceb81a18 <line:309:3, col:16>
|   | `-VarDecl 0x562fceb819b0 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x562fceb81aa8 <line:310:3, col:26>
|   | `-VarDecl 0x562fceb81a40 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x562fceb81b38 <line:311:3, col:21>
|   | `-VarDecl 0x562fceb81ad0 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x562fceb84540 <line:313:3, line:361:1>
|     |-BinaryOperator 0x562fceb81ba8 <line:314:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb81b50 <col:3> 'int8_t':'char' lvalue Var 0x562fceb81920 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb81b90 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb81b70 <col:11> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb81c20 <line:315:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb81bc8 <col:3> 'int8_t':'char' lvalue Var 0x562fceb819b0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb81c08 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb81be8 <col:11> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb81cb8 <line:316:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb81c40 <col:3> 'msg_t':'char' lvalue Var 0x562fceb81a40 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x562fceb81c90 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x562fceb81c60 <col:30> 'int' 0
|     |-BinaryOperator 0x562fceb81d88 <line:317:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb81cd8 <col:3> '_Bool' lvalue Var 0x562fceb7aac0 'side1Failed' '_Bool'
|     | `-CallExpr 0x562fceb81d68 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x562fceb81d50 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x562fceb81cf8 <col:17> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x562fceb81e00 <line:318:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x562fceb81de8 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x562fceb81da8 <col:3> 'void (_Bool)' Function 0x562fceb7b638 'write_side1_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x562fceb81e28 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb81dc8 <col:30> '_Bool' lvalue Var 0x562fceb7aac0 'side1Failed' '_Bool'
|     |-IfStmt 0x562fceb828e8 <line:319:3, line:325:3>
|     | |-ImplicitCastExpr 0x562fceb81e60 <line:319:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x562fceb81e40 <col:7> '_Bool' lvalue Var 0x562fceb7aac0 'side1Failed' '_Bool'
|     | `-CompoundStmt 0x562fceb828b0 <col:20, line:325:3>
|     |   |-BinaryOperator 0x562fceb82120 <line:320:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb81e78 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x562fceb82108 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x562fceb820d8 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x562fceb82018 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x562fceb81f38 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x562fceb81f08 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x562fceb81ed8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x562fceb81e98 <col:16> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x562fceb81f20 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x562fceb81ef0 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x562fceb81eb8 <col:25> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x562fceb81ff8 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x562fceb81fc8 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x562fceb81f98 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x562fceb81f58 <col:34> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x562fceb81fe0 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x562fceb81fb0 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x562fceb81f78 <col:46> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x562fceb82090 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x562fceb82078 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x562fceb82038 <col:54> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x562fceb820c0 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x562fceb820a8 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x562fceb82058 <col:62> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x562fceb823e8 <line:321:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb82140 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x562fceb823d0 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x562fceb823a0 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x562fceb822e0 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x562fceb82200 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x562fceb821d0 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x562fceb821a0 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x562fceb82160 <col:16> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x562fceb821e8 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x562fceb821b8 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x562fceb82180 <col:25> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x562fceb822c0 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x562fceb82290 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x562fceb82260 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x562fceb82220 <col:34> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x562fceb822a8 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x562fceb82278 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x562fceb82240 <col:46> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x562fceb82358 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x562fceb82340 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x562fceb82300 <col:54> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x562fceb82388 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x562fceb82370 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x562fceb82320 <col:62> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x562fceb82808 <line:322:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb82408 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x562fceb827f0 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x562fceb827c0 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x562fceb825a8 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x562fceb824c8 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x562fceb82498 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x562fceb82468 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x562fceb82428 <col:15> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x562fceb824b0 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x562fceb82480 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x562fceb82448 <col:24> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x562fceb82588 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x562fceb82558 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x562fceb82528 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x562fceb824e8 <col:33> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x562fceb82570 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x562fceb82540 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x562fceb82508 <col:44> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x562fceb82778 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x562fceb82760 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x562fceb825c8 <col:52> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x562fceb827a8 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x562fceb82790 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x562fceb825e8 <col:60> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x562fceb82880 <line:323:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb82828 <col:5> 'msg_t':'char' lvalue Var 0x562fceb7abb0 'side1_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x562fceb82868 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x562fceb82848 <col:21> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x562fceb828a0 <line:324:5>
|     |-BinaryOperator 0x562fceb82958 <line:326:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb82900 <col:3> 'int8_t':'char' lvalue Var 0x562fceb81920 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb82940 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb82920 <col:11> 'int8_t':'char' lvalue Var 0x562fceb7a250 's1s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb829d0 <line:327:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb82978 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a250 's1s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb829b8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb82998 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb82a48 <line:328:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb829f0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb819b0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb82a30 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb82a10 <col:11> 'int8_t':'char' lvalue Var 0x562fceb7a3b8 's2s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb82ac0 <line:329:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb82a68 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a3b8 's2s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb82aa8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb82a88 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb82b38 <line:330:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb82ae0 <col:3> 'msg_t':'char' lvalue Var 0x562fceb81a40 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x562fceb82b20 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb82b00 <col:22> 'int8_t':'char' lvalue Var 0x562fceb530b0 'cs1_old' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb82bb0 <line:331:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb82b58 <col:3> 'int8_t':'char' lvalue Var 0x562fceb530b0 'cs1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb82b98 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb82b78 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x562fceb83c38 <line:332:3, line:355:3> has_else
|     | |-BinaryOperator 0x562fceb82cc0 <line:332:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x562fceb82c20 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb82c08 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb82bd0 <col:13> 'int8_t':'char' lvalue Var 0x562fceb81920 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x562fceb82c98 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x562fceb82c80 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x562fceb82c48 <col:28> 'int8_t':'char' lvalue Var 0x562fceb819b0 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x562fceb82d78 <col:35, line:334:3>
|     | | `-BinaryOperator 0x562fceb82d58 <line:333:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x562fceb82ce0 <col:5> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x562fceb82d30 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x562fceb82d00 <col:27> 'int' 1
|     | `-IfStmt 0x562fceb83c10 <line:335:3, line:355:3> has_else
|     |   |-BinaryOperator 0x562fceb82e80 <line:335:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x562fceb82de0 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x562fceb82dc8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x562fceb82d90 <col:13> 'int8_t':'char' lvalue Var 0x562fceb81920 'side1' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x562fceb82e58 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x562fceb82e40 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x562fceb82e08 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x562fceb83108 <col:35, line:341:3>
|     |   | `-IfStmt 0x562fceb830e0 <line:336:5, line:340:5> has_else
|     |   |   |-BinaryOperator 0x562fceb82f90 <line:336:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x562fceb82ef0 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x562fceb82ed8 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x562fceb82ea0 <col:15> 'int8_t':'char' lvalue Var 0x562fceb819b0 'side2' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x562fceb82f68 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x562fceb82f50 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x562fceb82f18 <col:30> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x562fceb83048 <col:37, line:338:5>
|     |   |   | `-BinaryOperator 0x562fceb83028 <line:337:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x562fceb82fb0 <col:7> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x562fceb83000 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x562fceb82fd0 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x562fceb830c8 <line:338:12, line:340:5>
|     |   |     `-GotoStmt 0x562fceb830b0 <line:339:7, col:12> '_L___0' 0x562fceb83060
|     |   `-LabelStmt 0x562fceb83bf8 <line:342:3, line:355:3> '_L___0'
|     |     `-IfStmt 0x562fceb83bd0 <line:343:3, line:355:3> has_else
|     |       |-BinaryOperator 0x562fceb83210 <line:343:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x562fceb83170 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x562fceb83158 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x562fceb83120 <col:13> 'int8_t':'char' lvalue Var 0x562fceb81920 'side1' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x562fceb831e8 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x562fceb831d0 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x562fceb83198 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x562fceb83498 <col:35, line:349:3>
|     |       | `-IfStmt 0x562fceb83470 <line:344:5, line:348:5> has_else
|     |       |   |-BinaryOperator 0x562fceb83320 <line:344:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x562fceb83280 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x562fceb83268 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x562fceb83230 <col:15> 'int8_t':'char' lvalue Var 0x562fceb819b0 'side2' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x562fceb832f8 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x562fceb832e0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x562fceb832a8 <col:30> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x562fceb833d8 <col:37, line:346:5>
|     |       |   | `-BinaryOperator 0x562fceb833b8 <line:345:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x562fceb83340 <col:7> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x562fceb83390 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x562fceb83360 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x562fceb83458 <line:346:12, line:348:5>
|     |       |     `-GotoStmt 0x562fceb83440 <line:347:7, col:12> '_L' 0x562fceb833f0
|     |       `-LabelStmt 0x562fceb83bb8 <line:350:3, line:355:3> '_L'
|     |         `-IfStmt 0x562fceb83b90 <line:351:3, line:355:3> has_else
|     |           |-BinaryOperator 0x562fceb83548 <line:351:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x562fceb83500 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x562fceb834e8 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x562fceb834b0 <col:13> 'msg_t':'char' lvalue Var 0x562fceb81a40 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x562fceb83528 <col:33> 'int' 1
|     |           |-CompoundStmt 0x562fceb836a8 <col:36, line:353:3>
|     |           | `-BinaryOperator 0x562fceb83688 <line:352:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x562fceb83568 <col:5> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x562fceb83648 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x562fceb83630 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x562fceb83588 <col:18> 'int8_t (int8_t)' Function 0x562fceb80860 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x562fceb83670 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x562fceb835a8 <col:32> 'int8_t':'char' lvalue Var 0x562fceb81920 'side1' 'int8_t':'char'
|     |           `-CompoundStmt 0x562fceb83738 <line:353:10, line:355:3>
|     |             `-BinaryOperator 0x562fceb83718 <line:354:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x562fceb836c0 <col:5> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x562fceb83700 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x562fceb836e0 <col:18> 'int8_t':'char' lvalue Var 0x562fceb81920 'side1' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb83f08 <line:356:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb83c60 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb83ef0 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x562fceb83ec0 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x562fceb83e00 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x562fceb83d20 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x562fceb83cf0 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x562fceb83cc0 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x562fceb83c80 <col:14> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x562fceb83d08 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x562fceb83cd8 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x562fceb83ca0 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x562fceb83de0 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x562fceb83db0 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x562fceb83d80 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x562fceb83d40 <col:37> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x562fceb83dc8 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x562fceb83d98 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x562fceb83d60 <col:49> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x562fceb83e78 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x562fceb83e60 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb83e20 <col:57> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x562fceb83ea8 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x562fceb83e90 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fceb83e40 <col:70> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb841d0 <line:357:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb83f28 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb841b8 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x562fceb84188 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x562fceb840c8 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x562fceb83fe8 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x562fceb83fb8 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x562fceb83f88 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x562fceb83f48 <col:14> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x562fceb83fd0 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x562fceb83fa0 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x562fceb83f68 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x562fceb840a8 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x562fceb84078 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x562fceb84048 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x562fceb84008 <col:37> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x562fceb84090 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x562fceb84060 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x562fceb84028 <col:49> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x562fceb84140 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x562fceb84128 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb840e8 <col:57> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x562fceb84170 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x562fceb84158 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fceb84108 <col:70> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb84498 <line:358:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb841f0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb84480 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x562fceb84450 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x562fceb84390 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x562fceb842b0 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x562fceb84280 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x562fceb84250 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x562fceb84210 <col:13> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x562fceb84298 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x562fceb84268 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x562fceb84230 <col:27> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x562fceb84370 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x562fceb84340 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x562fceb84310 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x562fceb842d0 <col:36> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x562fceb84358 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x562fceb84328 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x562fceb842f0 <col:47> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x562fceb84408 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x562fceb843f0 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb843b0 <col:55> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x562fceb84438 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x562fceb84420 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fceb843d0 <col:68> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb84510 <line:359:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb844b8 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7abb0 'side1_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x562fceb844f8 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb844d8 <col:19> 'int8_t':'char' lvalue Var 0x562fceb81ad0 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x562fceb84530 <line:360:3>
|-FunctionDecl 0x562fceb846b0 <line:363:1, line:419:1> line:363:6 used Side2_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x562fceb86e30 <line:364:1, line:419:1>
|   |-DeclStmt 0x562fceb847c8 <line:365:3, col:16>
|   | `-VarDecl 0x562fceb84760 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x562fceb84858 <line:366:3, col:16>
|   | `-VarDecl 0x562fceb847f0 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x562fceb848e8 <line:367:3, col:26>
|   | `-VarDecl 0x562fceb84880 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x562fceb84978 <line:368:3, col:21>
|   | `-VarDecl 0x562fceb84910 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x562fceb86d90 <line:370:3, line:418:1>
|     |-BinaryOperator 0x562fceb849e8 <line:371:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb84990 <col:3> 'int8_t':'char' lvalue Var 0x562fceb84760 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb849d0 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb849b0 <col:11> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb84a60 <line:372:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb84a08 <col:3> 'int8_t':'char' lvalue Var 0x562fceb847f0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb84a48 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb84a28 <col:11> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb84af8 <line:373:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb84a80 <col:3> 'msg_t':'char' lvalue Var 0x562fceb84880 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x562fceb84ad0 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x562fceb84aa0 <col:30> 'int' 0
|     |-BinaryOperator 0x562fceb84ba0 <line:374:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb84b18 <col:3> '_Bool' lvalue Var 0x562fceb7ab38 'side2Failed' '_Bool'
|     | `-CallExpr 0x562fceb84b70 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x562fceb84b58 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x562fceb84b38 <col:17> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x562fceb84c18 <line:375:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x562fceb84c00 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x562fceb84bc0 <col:3> 'void (_Bool)' Function 0x562fceb7d250 'write_side2_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x562fceb84c40 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb84be0 <col:30> '_Bool' lvalue Var 0x562fceb7ab38 'side2Failed' '_Bool'
|     |-IfStmt 0x562fceb855a8 <line:376:3, line:382:3>
|     | |-ImplicitCastExpr 0x562fceb84c78 <line:376:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x562fceb84c58 <col:7> '_Bool' lvalue Var 0x562fceb7ab38 'side2Failed' '_Bool'
|     | `-CompoundStmt 0x562fceb85570 <col:20, line:382:3>
|     |   |-BinaryOperator 0x562fceb84f38 <line:377:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb84c90 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x562fceb84f20 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x562fceb84ef0 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x562fceb84e30 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x562fceb84d50 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x562fceb84d20 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x562fceb84cf0 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x562fceb84cb0 <col:16> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x562fceb84d38 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x562fceb84d08 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x562fceb84cd0 <col:25> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x562fceb84e10 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x562fceb84de0 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x562fceb84db0 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x562fceb84d70 <col:34> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x562fceb84df8 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x562fceb84dc8 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x562fceb84d90 <col:46> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x562fceb84ea8 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x562fceb84e90 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x562fceb84e50 <col:54> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x562fceb84ed8 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x562fceb84ec0 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x562fceb84e70 <col:62> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x562fceb85200 <line:378:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb84f58 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x562fceb851e8 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x562fceb851b8 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x562fceb850f8 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x562fceb85018 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x562fceb84fe8 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x562fceb84fb8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x562fceb84f78 <col:16> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x562fceb85000 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x562fceb84fd0 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x562fceb84f98 <col:25> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x562fceb850d8 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x562fceb850a8 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x562fceb85078 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x562fceb85038 <col:34> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x562fceb850c0 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x562fceb85090 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x562fceb85058 <col:46> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x562fceb85170 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x562fceb85158 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x562fceb85118 <col:54> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x562fceb851a0 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x562fceb85188 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x562fceb85138 <col:62> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x562fceb854c8 <line:379:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb85220 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x562fceb854b0 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x562fceb85480 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x562fceb853c0 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x562fceb852e0 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x562fceb852b0 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x562fceb85280 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x562fceb85240 <col:15> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x562fceb852c8 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x562fceb85298 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x562fceb85260 <col:24> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x562fceb853a0 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x562fceb85370 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x562fceb85340 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x562fceb85300 <col:33> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x562fceb85388 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x562fceb85358 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x562fceb85320 <col:44> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x562fceb85438 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x562fceb85420 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x562fceb853e0 <col:52> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x562fceb85468 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x562fceb85450 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x562fceb85400 <col:60> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x562fceb85540 <line:380:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb854e8 <col:5> 'msg_t':'char' lvalue Var 0x562fceb7ac28 'side2_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x562fceb85528 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x562fceb85508 <col:21> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x562fceb85560 <line:381:5>
|     |-BinaryOperator 0x562fceb85618 <line:383:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb855c0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb84760 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb85600 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb855e0 <col:11> 'int8_t':'char' lvalue Var 0x562fceb7a0e8 's1s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb85690 <line:384:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb85638 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a0e8 's1s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb85678 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb85658 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb85708 <line:385:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb856b0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb847f0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb856f0 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb856d0 <col:11> 'int8_t':'char' lvalue Var 0x562fceb7a520 's2s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb85780 <line:386:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb85728 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a520 's2s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb85768 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb85748 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb857f8 <line:387:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb857a0 <col:3> 'msg_t':'char' lvalue Var 0x562fceb84880 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x562fceb857e0 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb857c0 <col:22> 'int8_t':'char' lvalue Var 0x562fceb53218 'cs2_old' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb85870 <line:388:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb85818 <col:3> 'int8_t':'char' lvalue Var 0x562fceb53218 'cs2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb85858 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb85838 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x562fceb86468 <line:389:3, line:412:3> has_else
|     | |-BinaryOperator 0x562fceb85980 <line:389:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x562fceb858e0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb858c8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb85890 <col:13> 'int8_t':'char' lvalue Var 0x562fceb84760 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x562fceb85958 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x562fceb85940 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x562fceb85908 <col:28> 'int8_t':'char' lvalue Var 0x562fceb847f0 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x562fceb85a38 <col:35, line:391:3>
|     | | `-BinaryOperator 0x562fceb85a18 <line:390:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x562fceb859a0 <col:5> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x562fceb859f0 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x562fceb859c0 <col:27> 'int' 0
|     | `-IfStmt 0x562fceb86440 <line:392:3, line:412:3> has_else
|     |   |-BinaryOperator 0x562fceb85b40 <line:392:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x562fceb85aa0 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x562fceb85a88 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x562fceb85a50 <col:13> 'int8_t':'char' lvalue Var 0x562fceb847f0 'side2' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x562fceb85b18 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x562fceb85b00 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x562fceb85ac8 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x562fceb85de0 <col:35, line:398:3>
|     |   | `-IfStmt 0x562fceb85db8 <line:393:5, line:397:5> has_else
|     |   |   |-BinaryOperator 0x562fceb85c68 <line:393:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x562fceb85bc8 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x562fceb85bb0 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x562fceb85b60 <col:15> 'int8_t':'char' lvalue Var 0x562fceb84760 'side1' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x562fceb85c40 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x562fceb85c28 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x562fceb85bf0 <col:30> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x562fceb85d20 <col:37, line:395:5>
|     |   |   | `-BinaryOperator 0x562fceb85d00 <line:394:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x562fceb85c88 <col:7> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x562fceb85cd8 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x562fceb85ca8 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x562fceb85da0 <line:395:12, line:397:5>
|     |   |     `-GotoStmt 0x562fceb85d88 <line:396:7, col:12> '_L___0' 0x562fceb85d38
|     |   `-LabelStmt 0x562fceb86428 <line:399:3, line:412:3> '_L___0'
|     |     `-IfStmt 0x562fceb86400 <line:400:3, line:412:3> has_else
|     |       |-BinaryOperator 0x562fceb85ee8 <line:400:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x562fceb85e48 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x562fceb85e30 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x562fceb85df8 <col:13> 'int8_t':'char' lvalue Var 0x562fceb847f0 'side2' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x562fceb85ec0 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x562fceb85ea8 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x562fceb85e70 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x562fceb86170 <col:35, line:406:3>
|     |       | `-IfStmt 0x562fceb86148 <line:401:5, line:405:5> has_else
|     |       |   |-BinaryOperator 0x562fceb85ff8 <line:401:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x562fceb85f58 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x562fceb85f40 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x562fceb85f08 <col:15> 'int8_t':'char' lvalue Var 0x562fceb84760 'side1' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x562fceb85fd0 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x562fceb85fb8 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x562fceb85f80 <col:30> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x562fceb860b0 <col:37, line:403:5>
|     |       |   | `-BinaryOperator 0x562fceb86090 <line:402:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x562fceb86018 <col:7> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x562fceb86068 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x562fceb86038 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x562fceb86130 <line:403:12, line:405:5>
|     |       |     `-GotoStmt 0x562fceb86118 <line:404:7, col:12> '_L' 0x562fceb860c8
|     |       `-LabelStmt 0x562fceb863e8 <line:407:3, line:412:3> '_L'
|     |         `-IfStmt 0x562fceb863c0 <line:408:3, line:412:3> has_else
|     |           |-BinaryOperator 0x562fceb86220 <line:408:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x562fceb861d8 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x562fceb861c0 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x562fceb86188 <col:13> 'msg_t':'char' lvalue Var 0x562fceb84880 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x562fceb86200 <col:33> 'int' 1
|     |           |-CompoundStmt 0x562fceb86318 <col:36, line:410:3>
|     |           | `-BinaryOperator 0x562fceb862f8 <line:409:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x562fceb86240 <col:5> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x562fceb862b8 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x562fceb862a0 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x562fceb86260 <col:18> 'int8_t (int8_t)' Function 0x562fceb80860 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x562fceb862e0 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x562fceb86280 <col:32> 'int8_t':'char' lvalue Var 0x562fceb847f0 'side2' 'int8_t':'char'
|     |           `-CompoundStmt 0x562fceb863a8 <line:410:10, line:412:3>
|     |             `-BinaryOperator 0x562fceb86388 <line:411:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x562fceb86330 <col:5> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x562fceb86370 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x562fceb86350 <col:18> 'int8_t':'char' lvalue Var 0x562fceb847f0 'side2' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb86738 <line:413:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb86490 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb86720 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x562fceb866f0 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x562fceb86630 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x562fceb86550 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x562fceb86520 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x562fceb864f0 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x562fceb864b0 <col:14> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x562fceb86538 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x562fceb86508 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x562fceb864d0 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x562fceb86610 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x562fceb865e0 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x562fceb865b0 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x562fceb86570 <col:37> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x562fceb865f8 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x562fceb865c8 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x562fceb86590 <col:49> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x562fceb866a8 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x562fceb86690 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb86650 <col:57> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x562fceb866d8 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x562fceb866c0 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fceb86670 <col:70> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb86a00 <line:414:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb86758 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb869e8 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x562fceb869b8 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x562fceb868f8 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x562fceb86818 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x562fceb867e8 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x562fceb867b8 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x562fceb86778 <col:14> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x562fceb86800 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x562fceb867d0 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x562fceb86798 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x562fceb868d8 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x562fceb868a8 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x562fceb86878 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x562fceb86838 <col:37> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x562fceb868c0 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x562fceb86890 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x562fceb86858 <col:49> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x562fceb86970 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x562fceb86958 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb86918 <col:57> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x562fceb869a0 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x562fceb86988 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fceb86938 <col:70> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb86ce8 <line:415:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb86a20 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb86cd0 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x562fceb86ca0 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x562fceb86be0 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x562fceb86ae0 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x562fceb86ab0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x562fceb86a80 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x562fceb86a40 <col:13> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x562fceb86ac8 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x562fceb86a98 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x562fceb86a60 <col:27> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x562fceb86bc0 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x562fceb86b70 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x562fceb86b40 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x562fceb86b00 <col:36> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x562fceb86b88 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x562fceb86b58 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x562fceb86b20 <col:47> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x562fceb86c58 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x562fceb86c40 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb86c00 <col:55> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x562fceb86c88 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x562fceb86c70 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x562fceb86c20 <col:68> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb86d60 <line:416:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb86d08 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7ac28 'side2_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x562fceb86d48 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb86d28 <col:19> 'int8_t':'char' lvalue Var 0x562fceb84910 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x562fceb86d80 <line:417:3>
|-FunctionDecl 0x562fceb86f00 <line:420:1, line:462:1> line:420:6 used Pendulum_prism_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x562fceb892d0 <line:421:1, line:462:1>
|   |-DeclStmt 0x562fceb87018 <line:422:3, col:22>
|   | `-VarDecl 0x562fceb86fb0 <col:3, col:10> col:10 used active_side 'int8_t':'char'
|   |-DeclStmt 0x562fceb870a8 <line:423:3, col:14>
|   | `-VarDecl 0x562fceb87040 <col:3, col:10> col:10 used tmp 'int8_t':'char'
|   |-DeclStmt 0x562fceb87138 <line:424:3, col:16>
|   | `-VarDecl 0x562fceb870d0 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x562fceb871c8 <line:425:3, col:16>
|   | `-VarDecl 0x562fceb87160 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   `-CompoundStmt 0x562fceb89268 <line:427:3, line:461:1>
|     |-BinaryOperator 0x562fceb87320 <line:428:3, col:50> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb871e0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb87040 'tmp' 'int8_t':'char'
|     | `-CallExpr 0x562fceb872f8 <col:9, col:50> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x562fceb872e0 <col:9> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x562fceb87200 <col:9> 'int8_t (unsigned char)' Function 0x562fceb7e060 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x562fceb87258 <col:34, col:49> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x562fceb87220 <col:49> 'int' 0
|     |-BinaryOperator 0x562fceb87398 <line:429:3, col:17> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb87340 <col:3> 'int8_t':'char' lvalue Var 0x562fceb86fb0 'active_side' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb87380 <col:17> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb87360 <col:17> 'int8_t':'char' lvalue Var 0x562fceb87040 'tmp' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb87410 <line:430:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb873b8 <col:3> 'int8_t':'char' lvalue Var 0x562fceb870d0 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb873f8 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb873d8 <col:11> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb87488 <line:431:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb87430 <col:3> 'int8_t':'char' lvalue Var 0x562fceb87160 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb87470 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb87450 <col:11> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb87500 <line:432:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb874a8 <col:3> 'int8_t':'char' lvalue Var 0x562fceb870d0 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb874e8 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb874c8 <col:11> 'int8_t':'char' lvalue Var 0x562fceb7a688 's1p_old' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb87578 <line:433:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb87520 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a688 's1p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb87560 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb87540 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x562fceb875f0 <line:434:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb87598 <col:3> 'int8_t':'char' lvalue Var 0x562fceb87160 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb875d8 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb875b8 <col:11> 'int8_t':'char' lvalue Var 0x562fceb7a7f0 's2p_old' 'int8_t':'char'
|     |-BinaryOperator 0x562fceb87668 <line:435:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb87610 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a7f0 's2p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x562fceb87650 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb87630 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x562fceb89160 <line:436:3, line:458:3> has_else
|     | |-BinaryOperator 0x562fceb87720 <line:436:7, col:22> 'int' '=='
|     | | |-CStyleCastExpr 0x562fceb876d8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb876c0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb87688 <col:13> 'int8_t':'char' lvalue Var 0x562fceb870d0 'side1' 'int8_t':'char'
|     | | `-IntegerLiteral 0x562fceb87700 <col:22> 'int' 1
|     | |-CompoundStmt 0x562fceb877d8 <col:25, line:438:3>
|     | | `-BinaryOperator 0x562fceb877b8 <line:437:5, col:28> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x562fceb87740 <col:5> 'int8_t':'char' lvalue Var 0x562fceb86fb0 'active_side' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x562fceb87790 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x562fceb87760 <col:28> 'int' 1
|     | `-IfStmt 0x562fceb89138 <line:439:3, line:458:3> has_else
|     |   |-BinaryOperator 0x562fceb87888 <line:439:7, col:22> 'int' '=='
|     |   | |-CStyleCastExpr 0x562fceb87840 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x562fceb87828 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x562fceb877f0 <col:13> 'int8_t':'char' lvalue Var 0x562fceb87160 'side2' 'int8_t':'char'
|     |   | `-IntegerLiteral 0x562fceb87868 <col:22> 'int' 1
|     |   |-CompoundStmt 0x562fceb87940 <col:25, line:441:3>
|     |   | `-BinaryOperator 0x562fceb87920 <line:440:5, col:28> 'int8_t':'char' '='
|     |   |   |-DeclRefExpr 0x562fceb878a8 <col:5> 'int8_t':'char' lvalue Var 0x562fceb86fb0 'active_side' 'int8_t':'char'
|     |   |   `-CStyleCastExpr 0x562fceb878f8 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x562fceb878c8 <col:28> 'int' 2
|     |   `-IfStmt 0x562fceb89110 <line:442:3, line:458:3> has_else
|     |     |-BinaryOperator 0x562fceb879f0 <line:442:7, col:22> 'int' '=='
|     |     | |-CStyleCastExpr 0x562fceb879a8 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x562fceb87990 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x562fceb87958 <col:13> 'int8_t':'char' lvalue Var 0x562fceb870d0 'side1' 'int8_t':'char'
|     |     | `-IntegerLiteral 0x562fceb879d0 <col:22> 'int' 0
|     |     |-CompoundStmt 0x562fceb88ca0 <col:25, line:448:3>
|     |     | `-IfStmt 0x562fceb88c78 <line:443:5, line:447:5> has_else
|     |     |   |-BinaryOperator 0x562fceb87b00 <line:443:9, col:30> 'int' '=='
|     |     |   | |-CStyleCastExpr 0x562fceb87a60 <col:9, col:15> 'int' <IntegralCast>
|     |     |   | | `-ImplicitCastExpr 0x562fceb87a48 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   | |   `-DeclRefExpr 0x562fceb87a10 <col:15> 'int8_t':'char' lvalue Var 0x562fceb87160 'side2' 'int8_t':'char'
|     |     |   | `-CStyleCastExpr 0x562fceb87ad8 <col:24, col:30> 'int' <IntegralCast>
|     |     |   |   `-ImplicitCastExpr 0x562fceb87ac0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   |     `-DeclRefExpr 0x562fceb87a88 <col:30> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |     |   |-CompoundStmt 0x562fceb88be0 <col:37, line:445:5>
|     |     |   | `-BinaryOperator 0x562fceb87b98 <line:444:7, col:30> 'int8_t':'char' '='
|     |     |   |   |-DeclRefExpr 0x562fceb87b20 <col:7> 'int8_t':'char' lvalue Var 0x562fceb86fb0 'active_side' 'int8_t':'char'
|     |     |   |   `-CStyleCastExpr 0x562fceb87b70 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |     |   |     `-IntegerLiteral 0x562fceb87b40 <col:30> 'int' 1
|     |     |   `-CompoundStmt 0x562fceb88c60 <line:445:12, line:447:5>
|     |     |     `-GotoStmt 0x562fceb88c48 <line:446:7, col:12> '_L' 0x562fceb88bf8
|     |     `-LabelStmt 0x562fceb890f8 <line:449:3, line:458:3> '_L'
|     |       `-IfStmt 0x562fceb890d0 <line:450:3, line:458:3> has_else
|     |         |-BinaryOperator 0x562fceb88da8 <line:450:7, col:28> 'int' '=='
|     |         | |-CStyleCastExpr 0x562fceb88d08 <col:7, col:13> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x562fceb88cf0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x562fceb88cb8 <col:13> 'int8_t':'char' lvalue Var 0x562fceb870d0 'side1' 'int8_t':'char'
|     |         | `-CStyleCastExpr 0x562fceb88d80 <col:22, col:28> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x562fceb88d68 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x562fceb88d30 <col:28> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|     |         |-CompoundStmt 0x562fceb89008 <col:35, line:456:3>
|     |         | `-IfStmt 0x562fceb88fe0 <line:451:5, line:455:5> has_else
|     |         |   |-BinaryOperator 0x562fceb88e60 <line:451:9, col:24> 'int' '=='
|     |         |   | |-CStyleCastExpr 0x562fceb88e18 <col:9, col:15> 'int' <IntegralCast>
|     |         |   | | `-ImplicitCastExpr 0x562fceb88e00 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |   | |   `-DeclRefExpr 0x562fceb88dc8 <col:15> 'int8_t':'char' lvalue Var 0x562fceb87160 'side2' 'int8_t':'char'
|     |         |   | `-IntegerLiteral 0x562fceb88e40 <col:24> 'int' 0
|     |         |   |-CompoundStmt 0x562fceb88f18 <col:27, line:453:5>
|     |         |   | `-BinaryOperator 0x562fceb88ef8 <line:452:7, col:30> 'int8_t':'char' '='
|     |         |   |   |-DeclRefExpr 0x562fceb88e80 <col:7> 'int8_t':'char' lvalue Var 0x562fceb86fb0 'active_side' 'int8_t':'char'
|     |         |   |   `-CStyleCastExpr 0x562fceb88ed0 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |   |     `-IntegerLiteral 0x562fceb88ea0 <col:30> 'int' 2
|     |         |   `-CompoundStmt 0x562fceb88fc8 <line:453:12, line:455:5>
|     |         |     `-BinaryOperator 0x562fceb88fa8 <line:454:7, col:30> 'int8_t':'char' '='
|     |         |       |-DeclRefExpr 0x562fceb88f30 <col:7> 'int8_t':'char' lvalue Var 0x562fceb86fb0 'active_side' 'int8_t':'char'
|     |         |       `-CStyleCastExpr 0x562fceb88f80 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |         `-IntegerLiteral 0x562fceb88f50 <col:30> 'int' 0
|     |         `-CompoundStmt 0x562fceb890b8 <line:456:10, line:458:3>
|     |           `-BinaryOperator 0x562fceb89098 <line:457:5, col:28> 'int8_t':'char' '='
|     |             |-DeclRefExpr 0x562fceb89020 <col:5> 'int8_t':'char' lvalue Var 0x562fceb86fb0 'active_side' 'int8_t':'char'
|     |             `-CStyleCastExpr 0x562fceb89070 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |               `-IntegerLiteral 0x562fceb89040 <col:28> 'int' 0
|     |-CallExpr 0x562fceb89218 <line:459:3, col:40> 'void'
|     | |-ImplicitCastExpr 0x562fceb89200 <col:3> 'void (*)(int8_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x562fceb89188 <col:3> 'void (int8_t)' Function 0x562fceb7dcd0 'write_active_side_history' 'void (int8_t)'
|     | `-ImplicitCastExpr 0x562fceb89240 <col:29> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x562fceb891a8 <col:29> 'int8_t':'char' lvalue Var 0x562fceb86fb0 'active_side' 'int8_t':'char'
|     `-ReturnStmt 0x562fceb89258 <line:460:3>
|-VarDecl 0x562fceb89510 <line:463:1, col:210> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x562fceb896c8 <col:27, col:210> 'void (*[4])(void)'
|   |-UnaryOperator 0x562fceb89598 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x562fceb89578 <col:36> 'void (void)' Function 0x562fceb80d20 'Console_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x562fceb895d0 <col:72, col:74> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x562fceb895b0 <col:74> 'void (void)' Function 0x562fceb81870 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x562fceb89608 <col:122, col:124> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x562fceb895e8 <col:124> 'void (void)' Function 0x562fceb846b0 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   `-UnaryOperator 0x562fceb89640 <col:172, col:174> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x562fceb89620 <col:174> 'void (void)' Function 0x562fceb86f00 'Pendulum_prism_task_each_pals_period' 'void (void)'
|-FunctionDecl 0x562fceb897c8 <line:464:1, line:582:1> line:464:5 used check 'int (void)'
| `-CompoundStmt 0x562fceb8f2f8 <line:465:1, line:582:1>
|   |-DeclStmt 0x562fceb898e8 <line:466:3, col:11>
|   | `-VarDecl 0x562fceb89880 <col:3, col:7> col:7 used tmp 'int'
|   |-DeclStmt 0x562fceb89978 <line:467:3, col:17>
|   | `-VarDecl 0x562fceb89910 <col:3, col:9> col:9 used tmp___0 'msg_t':'char'
|   |-DeclStmt 0x562fceb89a08 <line:468:3, col:17>
|   | `-VarDecl 0x562fceb899a0 <col:3, col:9> col:9 used tmp___1 '_Bool'
|   |-DeclStmt 0x562fceb89a98 <line:469:3, col:17>
|   | `-VarDecl 0x562fceb89a30 <col:3, col:9> col:9 used tmp___2 '_Bool'
|   |-DeclStmt 0x562fceb89b28 <line:470:3, col:17>
|   | `-VarDecl 0x562fceb89ac0 <col:3, col:9> col:9 used tmp___3 '_Bool'
|   |-DeclStmt 0x562fceb89bb8 <line:471:3, col:17>
|   | `-VarDecl 0x562fceb89b50 <col:3, col:9> col:9 used tmp___4 '_Bool'
|   |-DeclStmt 0x562fceb89fd8 <line:472:3, col:18>
|   | `-VarDecl 0x562fceb89f70 <col:3, col:10> col:10 used tmp___5 'int8_t':'char'
|   |-DeclStmt 0x562fceb8a068 <line:473:3, col:17>
|   | `-VarDecl 0x562fceb8a000 <col:3, col:9> col:9 used tmp___6 '_Bool'
|   |-DeclStmt 0x562fceb8a0f8 <line:474:3, col:17>
|   | `-VarDecl 0x562fceb8a090 <col:3, col:9> col:9 used tmp___7 '_Bool'
|   |-DeclStmt 0x562fceb8a188 <line:475:3, col:17>
|   | `-VarDecl 0x562fceb8a120 <col:3, col:9> col:9 used tmp___8 '_Bool'
|   |-DeclStmt 0x562fceb8a218 <line:476:3, col:18>
|   | `-VarDecl 0x562fceb8a1b0 <col:3, col:10> col:10 used tmp___9 'int8_t':'char'
|   |-DeclStmt 0x562fceb8a2a8 <line:477:3, col:18>
|   | `-VarDecl 0x562fceb8a240 <col:3, col:9> col:9 used tmp___10 '_Bool'
|   |-DeclStmt 0x562fceb8a338 <line:478:3, col:18>
|   | `-VarDecl 0x562fceb8a2d0 <col:3, col:9> col:9 used tmp___11 '_Bool'
|   |-DeclStmt 0x562fceb8a3c8 <line:479:3, col:18>
|   | `-VarDecl 0x562fceb8a360 <col:3, col:9> col:9 used tmp___12 '_Bool'
|   |-DeclStmt 0x562fceb8a458 <line:480:3, col:18>
|   | `-VarDecl 0x562fceb8a3f0 <col:3, col:9> col:9 used tmp___13 'msg_t':'char'
|   |-DeclStmt 0x562fceb8a4e8 <line:481:3, col:18>
|   | `-VarDecl 0x562fceb8a480 <col:3, col:9> col:9 used tmp___14 '_Bool'
|   |-DeclStmt 0x562fceb8a578 <line:482:3, col:18>
|   | `-VarDecl 0x562fceb8a510 <col:3, col:9> col:9 used tmp___15 '_Bool'
|   |-DeclStmt 0x562fceb8a608 <line:483:3, col:18>
|   | `-VarDecl 0x562fceb8a5a0 <col:3, col:9> col:9 used tmp___16 '_Bool'
|   |-DeclStmt 0x562fceb8a698 <line:484:3, col:18>
|   | `-VarDecl 0x562fceb8a630 <col:3, col:9> col:9 used tmp___17 '_Bool'
|   |-DeclStmt 0x562fceb8a728 <line:485:3, col:19>
|   | `-VarDecl 0x562fceb8a6c0 <col:3, col:10> col:10 used tmp___18 'int8_t':'char'
|   |-DeclStmt 0x562fceb8a7b8 <line:486:3, col:19>
|   | `-VarDecl 0x562fceb8a750 <col:3, col:10> col:10 used tmp___19 'int8_t':'char'
|   |-DeclStmt 0x562fceb8a848 <line:487:3, col:19>
|   | `-VarDecl 0x562fceb8a7e0 <col:3, col:10> col:10 used tmp___20 'int8_t':'char'
|   `-CompoundStmt 0x562fceb8f290 <line:489:3, line:581:1>
|     |-IfStmt 0x562fceb8aa90 <line:490:3, line:497:3> has_else
|     | |-UnaryOperator 0x562fceb8a898 <line:490:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x562fceb8a880 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562fceb8a860 <col:9> '_Bool' lvalue Var 0x562fceb7aac0 'side1Failed' '_Bool'
|     | |-CompoundStmt 0x562fceb8a910 <col:22, line:492:3>
|     | | `-BinaryOperator 0x562fceb8a8f0 <line:491:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x562fceb8a8b0 <col:5> 'int' lvalue Var 0x562fceb89880 'tmp' 'int'
|     | |   `-IntegerLiteral 0x562fceb8a8d0 <col:11> 'int' 1
|     | `-IfStmt 0x562fceb8aa68 <line:493:3, line:497:3> has_else
|     |   |-UnaryOperator 0x562fceb8a960 <line:493:7, col:9> 'int' prefix '!' cannot overflow
|     |   | `-ImplicitCastExpr 0x562fceb8a948 <col:9> '_Bool' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x562fceb8a928 <col:9> '_Bool' lvalue Var 0x562fceb7ab38 'side2Failed' '_Bool'
|     |   |-CompoundStmt 0x562fceb8a9d8 <col:22, line:495:3>
|     |   | `-BinaryOperator 0x562fceb8a9b8 <line:494:5, col:11> 'int' '='
|     |   |   |-DeclRefExpr 0x562fceb8a978 <col:5> 'int' lvalue Var 0x562fceb89880 'tmp' 'int'
|     |   |   `-IntegerLiteral 0x562fceb8a998 <col:11> 'int' 1
|     |   `-CompoundStmt 0x562fceb8aa50 <line:495:10, line:497:3>
|     |     `-BinaryOperator 0x562fceb8aa30 <line:496:5, col:11> 'int' '='
|     |       |-DeclRefExpr 0x562fceb8a9f0 <col:5> 'int' lvalue Var 0x562fceb89880 'tmp' 'int'
|     |       `-IntegerLiteral 0x562fceb8aa10 <col:11> 'int' 0
|     |-CallExpr 0x562fceb8ab98 <line:498:3, col:32> 'void'
|     | |-ImplicitCastExpr 0x562fceb8ab80 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x562fceb8aab8 <col:3> 'void (int)' Function 0x562fceb7af00 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x562fceb8abc0 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x562fceb8ab20 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x562fceb8ab08 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x562fceb8aad8 <col:29> 'int' lvalue Var 0x562fceb89880 'tmp' 'int'
|     |-BinaryOperator 0x562fceb8acf0 <line:499:3, col:59> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x562fceb8abd8 <col:3> 'msg_t':'char' lvalue Var 0x562fceb89910 'tmp___0' 'msg_t':'char'
|     | `-CallExpr 0x562fceb8acc8 <col:13, col:59> 'msg_t':'char'
|     |   |-ImplicitCastExpr 0x562fceb8acb0 <col:13> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x562fceb8abf8 <col:13> 'msg_t (unsigned char)' Function 0x562fceb7ef20 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   `-CStyleCastExpr 0x562fceb8ac50 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x562fceb8ac18 <col:58> 'int' 1
|     |-IfStmt 0x562fceb8bc20 <line:500:3, line:528:3>
|     | |-UnaryOperator 0x562fceb8ad48 <line:500:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x562fceb8ad30 <col:9> 'msg_t':'char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562fceb8ad10 <col:9> 'msg_t':'char' lvalue Var 0x562fceb89910 'tmp___0' 'msg_t':'char'
|     | `-CompoundStmt 0x562fceb8bc00 <col:18, line:528:3>
|     |   |-BinaryOperator 0x562fceb8ae70 <line:501:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x562fceb8ad60 <col:5> '_Bool' lvalue Var 0x562fceb899a0 'tmp___1' '_Bool'
|     |   | `-CallExpr 0x562fceb8ae48 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x562fceb8ae30 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562fceb8ad80 <col:15> '_Bool (unsigned char)' Function 0x562fceb7b980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x562fceb8add8 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x562fceb8ada0 <col:56> 'int' 1
|     |   `-IfStmt 0x562fceb8bbe8 <line:502:5, line:527:5>
|     |     |-UnaryOperator 0x562fceb8aec8 <line:502:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x562fceb8aeb0 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb8ae90 <col:11> '_Bool' lvalue Var 0x562fceb899a0 'tmp___1' '_Bool'
|     |     `-CompoundStmt 0x562fceb8bbc8 <col:20, line:527:5>
|     |       |-BinaryOperator 0x562fceb8afe8 <line:503:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x562fceb8aee0 <col:7> '_Bool' lvalue Var 0x562fceb89a30 'tmp___2' '_Bool'
|     |       | `-CallExpr 0x562fceb8afc0 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x562fceb8afa8 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x562fceb8af00 <col:17> '_Bool (unsigned char)' Function 0x562fceb7b980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x562fceb8af80 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x562fceb8af20 <col:58> 'int' 0
|     |       `-IfStmt 0x562fceb8bbb0 <line:504:7, line:526:7>
|     |         |-UnaryOperator 0x562fceb8b040 <line:504:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x562fceb8b028 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x562fceb8b008 <col:13> '_Bool' lvalue Var 0x562fceb89a30 'tmp___2' '_Bool'
|     |         `-CompoundStmt 0x562fceb8bb90 <col:22, line:526:7>
|     |           |-BinaryOperator 0x562fceb8b138 <line:505:9, col:61> '_Bool' '='
|     |           | |-DeclRefExpr 0x562fceb8b058 <col:9> '_Bool' lvalue Var 0x562fceb89ac0 'tmp___3' '_Bool'
|     |           | `-CallExpr 0x562fceb8b110 <col:19, col:61> '_Bool'
|     |           |   |-ImplicitCastExpr 0x562fceb8b0f8 <col:19> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x562fceb8b078 <col:19> '_Bool (unsigned char)' Function 0x562fceb7d560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x562fceb8b0d0 <col:45, col:60> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x562fceb8b098 <col:60> 'int' 1
|     |           `-IfStmt 0x562fceb8bb78 <line:506:9, line:525:9>
|     |             |-UnaryOperator 0x562fceb8b190 <line:506:13, col:15> 'int' prefix '!' cannot overflow
|     |             | `-ImplicitCastExpr 0x562fceb8b178 <col:15> '_Bool' <LValueToRValue>
|     |             |   `-DeclRefExpr 0x562fceb8b158 <col:15> '_Bool' lvalue Var 0x562fceb89ac0 'tmp___3' '_Bool'
|     |             `-CompoundStmt 0x562fceb8bb58 <col:24, line:525:9>
|     |               |-BinaryOperator 0x562fceb8b288 <line:507:11, col:63> '_Bool' '='
|     |               | |-DeclRefExpr 0x562fceb8b1a8 <col:11> '_Bool' lvalue Var 0x562fceb89b50 'tmp___4' '_Bool'
|     |               | `-CallExpr 0x562fceb8b260 <col:21, col:63> '_Bool'
|     |               |   |-ImplicitCastExpr 0x562fceb8b248 <col:21> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x562fceb8b1c8 <col:21> '_Bool (unsigned char)' Function 0x562fceb7d560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |               |   `-CStyleCastExpr 0x562fceb8b220 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x562fceb8b1e8 <col:62> 'int' 0
|     |               `-IfStmt 0x562fceb8bb40 <line:508:11, line:524:11>
|     |                 |-UnaryOperator 0x562fceb8b2e0 <line:508:15, col:17> 'int' prefix '!' cannot overflow
|     |                 | `-ImplicitCastExpr 0x562fceb8b2c8 <col:17> '_Bool' <LValueToRValue>
|     |                 |   `-DeclRefExpr 0x562fceb8b2a8 <col:17> '_Bool' lvalue Var 0x562fceb89b50 'tmp___4' '_Bool'
|     |                 `-CompoundStmt 0x562fceb8bb18 <col:26, line:524:11>
|     |                   |-IfStmt 0x562fceb8b570 <line:509:13, line:513:13>
|     |                   | |-UnaryOperator 0x562fceb8b3d0 <line:509:17, col:44> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x562fceb8b3b0 <col:19, col:44> 'int'
|     |                   | |   `-BinaryOperator 0x562fceb8b390 <col:20, col:43> 'int' '=='
|     |                   | |     |-CStyleCastExpr 0x562fceb8b348 <col:20, col:26> 'int' <IntegralCast>
|     |                   | |     | `-ImplicitCastExpr 0x562fceb8b330 <col:26> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |     |   `-DeclRefExpr 0x562fceb8b2f8 <col:26> 'msg_t':'char' lvalue Var 0x562fceb7abb0 'side1_written' 'msg_t':'char'
|     |                   | |     `-IntegerLiteral 0x562fceb8b370 <col:43> 'int' 1
|     |                   | `-CompoundStmt 0x562fceb8b558 <col:47, line:513:13>
|     |                   |   `-IfStmt 0x562fceb8b540 <line:510:15, line:512:15>
|     |                   |     |-UnaryOperator 0x562fceb8b4c0 <line:510:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x562fceb8b4a0 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x562fceb8b480 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x562fceb8b438 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x562fceb8b420 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x562fceb8b3e8 <col:28> 'msg_t':'char' lvalue Var 0x562fceb7abb0 'side1_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x562fceb8b460 <col:45> 'int' 0
|     |                   |     `-CompoundStmt 0x562fceb8b528 <col:49, line:512:15>
|     |                   |       `-ReturnStmt 0x562fceb8b518 <line:511:17, col:26>
|     |                   |         `-ParenExpr 0x562fceb8b4f8 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x562fceb8b4d8 <col:25> 'int' 0
|     |                   |-IfStmt 0x562fceb8b838 <line:514:13, line:518:13>
|     |                   | |-UnaryOperator 0x562fceb8b698 <line:514:17, col:48> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x562fceb8b678 <col:19, col:48> 'int'
|     |                   | |   `-UnaryOperator 0x562fceb8b660 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                   | |     `-ParenExpr 0x562fceb8b640 <col:22, col:47> 'int'
|     |                   | |       `-BinaryOperator 0x562fceb8b620 <col:23, col:46> 'int' '=='
|     |                   | |         |-CStyleCastExpr 0x562fceb8b5d8 <col:23, col:29> 'int' <IntegralCast>
|     |                   | |         | `-ImplicitCastExpr 0x562fceb8b5c0 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |         |   `-DeclRefExpr 0x562fceb8b588 <col:29> 'msg_t':'char' lvalue Var 0x562fceb7abb0 'side1_written' 'msg_t':'char'
|     |                   | |         `-IntegerLiteral 0x562fceb8b600 <col:46> 'int' 0
|     |                   | `-CompoundStmt 0x562fceb8b820 <col:51, line:518:13>
|     |                   |   `-IfStmt 0x562fceb8b808 <line:515:15, line:517:15>
|     |                   |     |-UnaryOperator 0x562fceb8b788 <line:515:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x562fceb8b768 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x562fceb8b748 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x562fceb8b700 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x562fceb8b6e8 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x562fceb8b6b0 <col:28> 'msg_t':'char' lvalue Var 0x562fceb7ac28 'side2_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x562fceb8b728 <col:45> 'int' 1
|     |                   |     `-CompoundStmt 0x562fceb8b7f0 <col:49, line:517:15>
|     |                   |       `-ReturnStmt 0x562fceb8b7e0 <line:516:17, col:26>
|     |                   |         `-ParenExpr 0x562fceb8b7c0 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x562fceb8b7a0 <col:25> 'int' 0
|     |                   `-IfStmt 0x562fceb8bb00 <line:519:13, line:523:13>
|     |                     |-UnaryOperator 0x562fceb8b960 <line:519:17, col:48> 'int' prefix '!' cannot overflow
|     |                     | `-ParenExpr 0x562fceb8b940 <col:19, col:48> 'int'
|     |                     |   `-UnaryOperator 0x562fceb8b928 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                     |     `-ParenExpr 0x562fceb8b908 <col:22, col:47> 'int'
|     |                     |       `-BinaryOperator 0x562fceb8b8e8 <col:23, col:46> 'int' '=='
|     |                     |         |-CStyleCastExpr 0x562fceb8b8a0 <col:23, col:29> 'int' <IntegralCast>
|     |                     |         | `-ImplicitCastExpr 0x562fceb8b888 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                     |         |   `-DeclRefExpr 0x562fceb8b850 <col:29> 'msg_t':'char' lvalue Var 0x562fceb7abb0 'side1_written' 'msg_t':'char'
|     |                     |         `-IntegerLiteral 0x562fceb8b8c8 <col:46> 'int' 1
|     |                     `-CompoundStmt 0x562fceb8bae8 <col:51, line:523:13>
|     |                       `-IfStmt 0x562fceb8bad0 <line:520:15, line:522:15>
|     |                         |-UnaryOperator 0x562fceb8ba50 <line:520:19, col:46> 'int' prefix '!' cannot overflow
|     |                         | `-ParenExpr 0x562fceb8ba30 <col:21, col:46> 'int'
|     |                         |   `-BinaryOperator 0x562fceb8ba10 <col:22, col:45> 'int' '=='
|     |                         |     |-CStyleCastExpr 0x562fceb8b9c8 <col:22, col:28> 'int' <IntegralCast>
|     |                         |     | `-ImplicitCastExpr 0x562fceb8b9b0 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                         |     |   `-DeclRefExpr 0x562fceb8b978 <col:28> 'msg_t':'char' lvalue Var 0x562fceb7ac28 'side2_written' 'msg_t':'char'
|     |                         |     `-IntegerLiteral 0x562fceb8b9f0 <col:45> 'int' 0
|     |                         `-CompoundStmt 0x562fceb8bab8 <col:49, line:522:15>
|     |                           `-ReturnStmt 0x562fceb8baa8 <line:521:17, col:26>
|     |                             `-ParenExpr 0x562fceb8ba88 <col:24, col:26> 'int'
|     |                               `-IntegerLiteral 0x562fceb8ba68 <col:25> 'int' 0
|     |-BinaryOperator 0x562fceb8bd18 <line:529:3, col:55> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb8bc38 <col:3> '_Bool' lvalue Var 0x562fceb8a090 'tmp___7' '_Bool'
|     | `-CallExpr 0x562fceb8bcf0 <col:13, col:55> '_Bool'
|     |   |-ImplicitCastExpr 0x562fceb8bcd8 <col:13> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x562fceb8bc58 <col:13> '_Bool (unsigned char)' Function 0x562fceb7b980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x562fceb8bcb0 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x562fceb8bc78 <col:54> 'int' 1
|     |-IfStmt 0x562fceb8dbb0 <line:530:3, line:544:3>
|     | |-ImplicitCastExpr 0x562fceb8bd58 <line:530:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x562fceb8bd38 <col:7> '_Bool' lvalue Var 0x562fceb8a090 'tmp___7' '_Bool'
|     | `-CompoundStmt 0x562fceb8db90 <col:16, line:544:3>
|     |   |-BinaryOperator 0x562fceb8be50 <line:531:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x562fceb8bd70 <col:5> '_Bool' lvalue Var 0x562fceb8a120 'tmp___8' '_Bool'
|     |   | `-CallExpr 0x562fceb8be28 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x562fceb8be10 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562fceb8bd90 <col:15> '_Bool (unsigned char)' Function 0x562fceb7d560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x562fceb8bde8 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x562fceb8bdb0 <col:56> 'int' 1
|     |   `-IfStmt 0x562fceb8db78 <line:532:5, line:543:5>
|     |     |-UnaryOperator 0x562fceb8bea8 <line:532:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x562fceb8be90 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb8be70 <col:11> '_Bool' lvalue Var 0x562fceb8a120 'tmp___8' '_Bool'
|     |     `-CompoundStmt 0x562fceb8db48 <col:20, line:543:5>
|     |       |-BinaryOperator 0x562fceb8d6c8 <line:533:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x562fceb8bec0 <col:7> 'int8_t':'char' lvalue Var 0x562fceb89f70 'tmp___5' 'int8_t':'char'
|     |       | `-CallExpr 0x562fceb8d6a0 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x562fceb8bf60 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x562fceb8bee0 <col:17> 'int8_t (unsigned char)' Function 0x562fceb7e060 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x562fceb8bf38 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x562fceb8bf00 <col:57> 'int' 0
|     |       |-IfStmt 0x562fceb8d840 <line:534:7, line:536:7>
|     |       | |-UnaryOperator 0x562fceb8d7c0 <line:534:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x562fceb8d7a0 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x562fceb8d780 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x562fceb8d738 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x562fceb8d720 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x562fceb8d6e8 <col:20> 'int8_t':'char' lvalue Var 0x562fceb89f70 'tmp___5' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x562fceb8d760 <col:31> 'int' 2
|     |       | `-CompoundStmt 0x562fceb8d828 <col:35, line:536:7>
|     |       |   `-ReturnStmt 0x562fceb8d818 <line:535:9, col:18>
|     |       |     `-ParenExpr 0x562fceb8d7f8 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x562fceb8d7d8 <col:17> 'int' 0
|     |       |-BinaryOperator 0x562fceb8d938 <line:537:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x562fceb8d858 <col:7> '_Bool' lvalue Var 0x562fceb8a000 'tmp___6' '_Bool'
|     |       | `-CallExpr 0x562fceb8d910 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x562fceb8d8f8 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x562fceb8d878 <col:17> '_Bool (unsigned char)' Function 0x562fceb7d560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x562fceb8d8d0 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x562fceb8d898 <col:58> 'int' 0
|     |       `-IfStmt 0x562fceb8db30 <line:538:7, line:542:7>
|     |         |-UnaryOperator 0x562fceb8d990 <line:538:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x562fceb8d978 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x562fceb8d958 <col:13> '_Bool' lvalue Var 0x562fceb8a000 'tmp___6' '_Bool'
|     |         `-CompoundStmt 0x562fceb8db18 <col:22, line:542:7>
|     |           `-IfStmt 0x562fceb8db00 <line:539:9, line:541:9>
|     |             |-UnaryOperator 0x562fceb8da80 <line:539:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x562fceb8da60 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x562fceb8da40 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x562fceb8d9f8 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x562fceb8d9e0 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x562fceb8d9a8 <col:22> 'msg_t':'char' lvalue Var 0x562fceb7ac28 'side2_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x562fceb8da20 <col:39> 'int' 1
|     |             `-CompoundStmt 0x562fceb8dae8 <col:43, line:541:9>
|     |               `-ReturnStmt 0x562fceb8dad8 <line:540:11, col:20>
|     |                 `-ParenExpr 0x562fceb8dab8 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x562fceb8da98 <col:19> 'int' 0
|     |-BinaryOperator 0x562fceb8dca8 <line:545:3, col:56> '_Bool' '='
|     | |-DeclRefExpr 0x562fceb8dbc8 <col:3> '_Bool' lvalue Var 0x562fceb8a2d0 'tmp___11' '_Bool'
|     | `-CallExpr 0x562fceb8dc80 <col:14, col:56> '_Bool'
|     |   |-ImplicitCastExpr 0x562fceb8dc68 <col:14> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x562fceb8dbe8 <col:14> '_Bool (unsigned char)' Function 0x562fceb7b980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x562fceb8dc40 <col:40, col:55> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x562fceb8dc08 <col:55> 'int' 1
|     |-IfStmt 0x562fceb8e418 <line:546:3, line:560:3>
|     | |-UnaryOperator 0x562fceb8dd00 <line:546:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x562fceb8dce8 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562fceb8dcc8 <col:9> '_Bool' lvalue Var 0x562fceb8a2d0 'tmp___11' '_Bool'
|     | `-CompoundStmt 0x562fceb8e3f8 <col:19, line:560:3>
|     |   |-BinaryOperator 0x562fceb8ddf8 <line:547:5, col:58> '_Bool' '='
|     |   | |-DeclRefExpr 0x562fceb8dd18 <col:5> '_Bool' lvalue Var 0x562fceb8a360 'tmp___12' '_Bool'
|     |   | `-CallExpr 0x562fceb8ddd0 <col:16, col:58> '_Bool'
|     |   |   |-ImplicitCastExpr 0x562fceb8ddb8 <col:16> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562fceb8dd38 <col:16> '_Bool (unsigned char)' Function 0x562fceb7d560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x562fceb8dd90 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x562fceb8dd58 <col:57> 'int' 1
|     |   `-IfStmt 0x562fceb8e3e0 <line:548:5, line:559:5>
|     |     |-ImplicitCastExpr 0x562fceb8de38 <line:548:9> '_Bool' <LValueToRValue>
|     |     | `-DeclRefExpr 0x562fceb8de18 <col:9> '_Bool' lvalue Var 0x562fceb8a360 'tmp___12' '_Bool'
|     |     `-CompoundStmt 0x562fceb8e3b0 <col:19, line:559:5>
|     |       |-BinaryOperator 0x562fceb8df30 <line:549:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x562fceb8de50 <col:7> 'int8_t':'char' lvalue Var 0x562fceb8a1b0 'tmp___9' 'int8_t':'char'
|     |       | `-CallExpr 0x562fceb8df08 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x562fceb8def0 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x562fceb8de70 <col:17> 'int8_t (unsigned char)' Function 0x562fceb7e060 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x562fceb8dec8 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x562fceb8de90 <col:57> 'int' 0
|     |       |-IfStmt 0x562fceb8e0a8 <line:550:7, line:552:7>
|     |       | |-UnaryOperator 0x562fceb8e028 <line:550:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x562fceb8e008 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x562fceb8dfe8 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x562fceb8dfa0 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x562fceb8df88 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x562fceb8df50 <col:20> 'int8_t':'char' lvalue Var 0x562fceb8a1b0 'tmp___9' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x562fceb8dfc8 <col:31> 'int' 1
|     |       | `-CompoundStmt 0x562fceb8e090 <col:35, line:552:7>
|     |       |   `-ReturnStmt 0x562fceb8e080 <line:551:9, col:18>
|     |       |     `-ParenExpr 0x562fceb8e060 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x562fceb8e040 <col:17> 'int' 0
|     |       |-BinaryOperator 0x562fceb8e1a0 <line:553:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x562fceb8e0c0 <col:7> '_Bool' lvalue Var 0x562fceb8a240 'tmp___10' '_Bool'
|     |       | `-CallExpr 0x562fceb8e178 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x562fceb8e160 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x562fceb8e0e0 <col:18> '_Bool (unsigned char)' Function 0x562fceb7b980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x562fceb8e138 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x562fceb8e100 <col:59> 'int' 0
|     |       `-IfStmt 0x562fceb8e398 <line:554:7, line:558:7>
|     |         |-UnaryOperator 0x562fceb8e1f8 <line:554:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x562fceb8e1e0 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x562fceb8e1c0 <col:13> '_Bool' lvalue Var 0x562fceb8a240 'tmp___10' '_Bool'
|     |         `-CompoundStmt 0x562fceb8e380 <col:23, line:558:7>
|     |           `-IfStmt 0x562fceb8e368 <line:555:9, line:557:9>
|     |             |-UnaryOperator 0x562fceb8e2e8 <line:555:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x562fceb8e2c8 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x562fceb8e2a8 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x562fceb8e260 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x562fceb8e248 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x562fceb8e210 <col:22> 'msg_t':'char' lvalue Var 0x562fceb7abb0 'side1_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x562fceb8e288 <col:39> 'int' 1
|     |             `-CompoundStmt 0x562fceb8e350 <col:43, line:557:9>
|     |               `-ReturnStmt 0x562fceb8e340 <line:556:11, col:20>
|     |                 `-ParenExpr 0x562fceb8e320 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x562fceb8e300 <col:19> 'int' 0
|     |-BinaryOperator 0x562fceb8e510 <line:561:3, col:55> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x562fceb8e430 <col:3> 'int8_t':'char' lvalue Var 0x562fceb8a7e0 'tmp___20' 'int8_t':'char'
|     | `-CallExpr 0x562fceb8e4e8 <col:14, col:55> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x562fceb8e4d0 <col:14> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x562fceb8e450 <col:14> 'int8_t (unsigned char)' Function 0x562fceb7e060 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x562fceb8e4a8 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x562fceb8e470 <col:54> 'int' 2
|     |-IfStmt 0x562fceb8f228 <line:562:3, line:579:3>
|     | |-BinaryOperator 0x562fceb8e5e0 <line:562:7, col:25> 'int' '>'
|     | | |-CStyleCastExpr 0x562fceb8e580 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x562fceb8e568 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x562fceb8e530 <col:13> 'int8_t':'char' lvalue Var 0x562fceb8a7e0 'tmp___20' 'int8_t':'char'
|     | | `-UnaryOperator 0x562fceb8e5c8 <col:24, col:25> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x562fceb8e5a8 <col:25> 'int' 2
|     | `-CompoundStmt 0x562fceb8f208 <col:28, line:579:3>
|     |   |-BinaryOperator 0x562fceb8e6f0 <line:563:5, col:62> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x562fceb8e600 <col:5> 'msg_t':'char' lvalue Var 0x562fceb8a3f0 'tmp___13' 'msg_t':'char'
|     |   | `-CallExpr 0x562fceb8e6c8 <col:16, col:62> 'msg_t':'char'
|     |   |   |-ImplicitCastExpr 0x562fceb8e6b0 <col:16> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562fceb8e620 <col:16> 'msg_t (unsigned char)' Function 0x562fceb7ef20 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   |   `-CStyleCastExpr 0x562fceb8e678 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x562fceb8e640 <col:61> 'int' 2
|     |   `-IfStmt 0x562fceb8f1f0 <line:564:5, line:578:5>
|     |     |-UnaryOperator 0x562fceb8e748 <line:564:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x562fceb8e730 <col:11> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x562fceb8e710 <col:11> 'msg_t':'char' lvalue Var 0x562fceb8a3f0 'tmp___13' 'msg_t':'char'
|     |     `-CompoundStmt 0x562fceb8f1c8 <col:21, line:578:5>
|     |       |-BinaryOperator 0x562fceb8e840 <line:565:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x562fceb8e760 <col:7> '_Bool' lvalue Var 0x562fceb8a480 'tmp___14' '_Bool'
|     |       | `-CallExpr 0x562fceb8e818 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x562fceb8e800 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x562fceb8e780 <col:18> '_Bool (unsigned char)' Function 0x562fceb7b980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x562fceb8e7d8 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x562fceb8e7a0 <col:59> 'int' 2
|     |       |-BinaryOperator 0x562fceb8e940 <line:566:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x562fceb8e860 <col:7> '_Bool' lvalue Var 0x562fceb8a510 'tmp___15' '_Bool'
|     |       | `-CallExpr 0x562fceb8e918 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x562fceb8e900 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x562fceb8e880 <col:18> '_Bool (unsigned char)' Function 0x562fceb7b980 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x562fceb8e8d8 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x562fceb8e8a0 <col:59> 'int' 1
|     |       `-IfStmt 0x562fceb8f1b0 <line:567:7, line:577:7>
|     |         |-BinaryOperator 0x562fceb8ea50 <line:567:11, col:35> 'int' '=='
|     |         | |-CStyleCastExpr 0x562fceb8e9b0 <col:11, col:17> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x562fceb8e998 <col:17> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x562fceb8e960 <col:17> '_Bool' lvalue Var 0x562fceb8a480 'tmp___14' '_Bool'
|     |         | `-CStyleCastExpr 0x562fceb8ea28 <col:29, col:35> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x562fceb8ea10 <col:35> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x562fceb8e9d8 <col:35> '_Bool' lvalue Var 0x562fceb8a510 'tmp___15' '_Bool'
|     |         `-CompoundStmt 0x562fceb8f188 <col:45, line:577:7>
|     |           |-BinaryOperator 0x562fceb8eb50 <line:568:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x562fceb8ea70 <col:9> '_Bool' lvalue Var 0x562fceb8a5a0 'tmp___16' '_Bool'
|     |           | `-CallExpr 0x562fceb8eb28 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x562fceb8eb10 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x562fceb8ea90 <col:20> '_Bool (unsigned char)' Function 0x562fceb7d560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x562fceb8eae8 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x562fceb8eab0 <col:61> 'int' 2
|     |           |-BinaryOperator 0x562fceb8ec50 <line:569:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x562fceb8eb70 <col:9> '_Bool' lvalue Var 0x562fceb8a630 'tmp___17' '_Bool'
|     |           | `-CallExpr 0x562fceb8ec28 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x562fceb8ec10 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x562fceb8eb90 <col:20> '_Bool (unsigned char)' Function 0x562fceb7d560 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x562fceb8ebe8 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x562fceb8ebb0 <col:61> 'int' 1
|     |           `-IfStmt 0x562fceb8f170 <line:570:9, line:576:9>
|     |             |-BinaryOperator 0x562fceb8ed60 <line:570:13, col:37> 'int' '=='
|     |             | |-CStyleCastExpr 0x562fceb8ecc0 <col:13, col:19> 'int' <IntegralCast>
|     |             | | `-ImplicitCastExpr 0x562fceb8eca8 <col:19> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             | |   `-DeclRefExpr 0x562fceb8ec70 <col:19> '_Bool' lvalue Var 0x562fceb8a5a0 'tmp___16' '_Bool'
|     |             | `-CStyleCastExpr 0x562fceb8ed38 <col:31, col:37> 'int' <IntegralCast>
|     |             |   `-ImplicitCastExpr 0x562fceb8ed20 <col:37> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             |     `-DeclRefExpr 0x562fceb8ece8 <col:37> '_Bool' lvalue Var 0x562fceb8a630 'tmp___17' '_Bool'
|     |             `-CompoundStmt 0x562fceb8f148 <col:47, line:576:9>
|     |               |-BinaryOperator 0x562fceb8ee60 <line:571:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x562fceb8ed80 <col:11> 'int8_t':'char' lvalue Var 0x562fceb8a6c0 'tmp___18' 'int8_t':'char'
|     |               | `-CallExpr 0x562fceb8ee38 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x562fceb8ee20 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x562fceb8eda0 <col:22> 'int8_t (unsigned char)' Function 0x562fceb7e060 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x562fceb8edf8 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x562fceb8edc0 <col:62> 'int' 1
|     |               |-BinaryOperator 0x562fceb8ef60 <line:572:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x562fceb8ee80 <col:11> 'int8_t':'char' lvalue Var 0x562fceb8a750 'tmp___19' 'int8_t':'char'
|     |               | `-CallExpr 0x562fceb8ef38 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x562fceb8ef20 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x562fceb8eea0 <col:22> 'int8_t (unsigned char)' Function 0x562fceb7e060 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x562fceb8eef8 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x562fceb8eec0 <col:62> 'int' 0
|     |               `-IfStmt 0x562fceb8f130 <line:573:11, line:575:11>
|     |                 |-UnaryOperator 0x562fceb8f0b0 <line:573:15, col:50> 'int' prefix '!' cannot overflow
|     |                 | `-ParenExpr 0x562fceb8f090 <col:17, col:50> 'int'
|     |                 |   `-BinaryOperator 0x562fceb8f070 <col:18, col:42> 'int' '=='
|     |                 |     |-CStyleCastExpr 0x562fceb8efd0 <col:18, col:24> 'int' <IntegralCast>
|     |                 |     | `-ImplicitCastExpr 0x562fceb8efb8 <col:24> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |     |   `-DeclRefExpr 0x562fceb8ef80 <col:24> 'int8_t':'char' lvalue Var 0x562fceb8a6c0 'tmp___18' 'int8_t':'char'
|     |                 |     `-CStyleCastExpr 0x562fceb8f048 <col:36, col:42> 'int' <IntegralCast>
|     |                 |       `-ImplicitCastExpr 0x562fceb8f030 <col:42> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |         `-DeclRefExpr 0x562fceb8eff8 <col:42> 'int8_t':'char' lvalue Var 0x562fceb8a750 'tmp___19' 'int8_t':'char'
|     |                 `-CompoundStmt 0x562fceb8f118 <col:53, line:575:11>
|     |                   `-ReturnStmt 0x562fceb8f108 <line:574:13, col:22>
|     |                     `-ParenExpr 0x562fceb8f0e8 <col:20, col:22> 'int'
|     |                       `-IntegerLiteral 0x562fceb8f0c8 <col:21> 'int' 0
|     `-ReturnStmt 0x562fceb8f280 <line:580:3, col:12>
|       `-ParenExpr 0x562fceb8f260 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x562fceb8f240 <col:11> 'int' 1
|-FunctionDecl 0x562fceb8f460 <line:583:1, line:654:1> line:583:5 main 'int (void)'
| `-CompoundStmt 0x562fceb91a60 <line:584:1, line:654:1>
|   |-DeclStmt 0x562fceb8f5b0 <line:585:3, col:10>
|   | `-VarDecl 0x562fceb8f548 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x562fceb8f648 <line:586:3, col:10>
|   | `-VarDecl 0x562fceb8f5e0 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x562fceb916d0 <line:588:3, line:652:1>
|   | |-BinaryOperator 0x562fceb8f6c0 <line:589:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x562fceb8f660 <col:3> 'int' lvalue Var 0x562fceb8f548 'c1' 'int'
|   | | `-IntegerLiteral 0x562fceb8f680 <col:8> 'int' 0
|   | |-BinaryOperator 0x562fceb8f758 <line:590:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x562fceb8f6e0 <col:3> '_Bool' lvalue Var 0x562fceb7aac0 'side1Failed' '_Bool'
|   | | `-CallExpr 0x562fceb8f738 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x562fceb8f720 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8f700 <col:17> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x562fceb8f7f0 <line:591:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x562fceb8f778 <col:3> '_Bool' lvalue Var 0x562fceb7ab38 'side2Failed' '_Bool'
|   | | `-CallExpr 0x562fceb8f7d0 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x562fceb8f7b8 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8f798 <col:17> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x562fceb8f888 <line:592:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb8f810 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7abb0 'side1_written' 'msg_t':'char'
|   | | `-CallExpr 0x562fceb8f868 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x562fceb8f850 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8f830 <col:19> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x562fceb8f920 <line:593:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb8f8a8 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7ac28 'side2_written' 'msg_t':'char'
|   | | `-CallExpr 0x562fceb8f900 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x562fceb8f8e8 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8f8c8 <col:19> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x562fceb8f9b8 <line:594:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x562fceb8f940 <col:3> '_Bool' lvalue Var 0x562fceb7afb8 'side1Failed_History_0' '_Bool'
|   | | `-CallExpr 0x562fceb8f998 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x562fceb8f980 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8f960 <col:27> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x562fceb8fa50 <line:595:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x562fceb8f9d8 <col:3> '_Bool' lvalue Var 0x562fceb7b080 'side1Failed_History_1' '_Bool'
|   | | `-CallExpr 0x562fceb8fa30 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x562fceb8fa18 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8f9f8 <col:27> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x562fceb8fae8 <line:596:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x562fceb8fa70 <col:3> '_Bool' lvalue Var 0x562fceb7b0f8 'side1Failed_History_2' '_Bool'
|   | | `-CallExpr 0x562fceb8fac8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x562fceb8fab0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8fa90 <col:27> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x562fceb8fb80 <line:597:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x562fceb8fb08 <col:3> '_Bool' lvalue Var 0x562fceb7b170 'side2Failed_History_0' '_Bool'
|   | | `-CallExpr 0x562fceb8fb60 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x562fceb8fb48 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8fb28 <col:27> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x562fceb8fc18 <line:598:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x562fceb8fba0 <col:3> '_Bool' lvalue Var 0x562fceb7b1e8 'side2Failed_History_1' '_Bool'
|   | | `-CallExpr 0x562fceb8fbf8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x562fceb8fbe0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8fbc0 <col:27> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x562fceb8fcb0 <line:599:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x562fceb8fc38 <col:3> '_Bool' lvalue Var 0x562fceb7b260 'side2Failed_History_2' '_Bool'
|   | | `-CallExpr 0x562fceb8fc90 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x562fceb8fc78 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8fc58 <col:27> '_Bool (void)' Function 0x562fceb7a920 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x562fceb8fd48 <line:600:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb8fcd0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7b2d8 'active_side_History_0' 'int8_t':'char'
|   | | `-CallExpr 0x562fceb8fd28 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x562fceb8fd10 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8fcf0 <col:27> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x562fceb8fde0 <line:601:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb8fd68 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7b350 'active_side_History_1' 'int8_t':'char'
|   | | `-CallExpr 0x562fceb8fdc0 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x562fceb8fda8 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8fd88 <col:27> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x562fceb8fe78 <line:602:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb8fe00 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7b3c8 'active_side_History_2' 'int8_t':'char'
|   | | `-CallExpr 0x562fceb8fe58 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x562fceb8fe40 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8fe20 <col:27> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x562fceb8ff10 <line:603:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb8fe98 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7b440 'manual_selection_History_0' 'msg_t':'char'
|   | | `-CallExpr 0x562fceb8fef0 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x562fceb8fed8 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8feb8 <col:32> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x562fceb8ffa8 <line:604:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb8ff30 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7b4b8 'manual_selection_History_1' 'msg_t':'char'
|   | | `-CallExpr 0x562fceb8ff88 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x562fceb8ff70 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8ff50 <col:32> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x562fceb90040 <line:605:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb8ffc8 <col:3> 'msg_t':'char' lvalue Var 0x562fceb7b530 'manual_selection_History_2' 'msg_t':'char'
|   | | `-CallExpr 0x562fceb90020 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x562fceb90008 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb8ffe8 <col:32> 'char (void)' Function 0x562fceb7aa10 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x562fceb90108 <line:606:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x562fceb90060 <col:3> 'int' lvalue Var 0x562fceb8f5e0 'i2' 'int'
|   | | `-CallExpr 0x562fceb900e8 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x562fceb900d0 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x562fceb90080 <col:8> 'int (void)' Function 0x562fceb7f6b8 'init' 'int (void)'
|   | |-CallExpr 0x562fceb90180 <line:607:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x562fceb90168 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x562fceb90128 <col:3> 'void (int)' Function 0x562fceb7af00 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x562fceb901a8 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90148 <col:21> 'int' lvalue Var 0x562fceb8f5e0 'i2' 'int'
|   | |-BinaryOperator 0x562fceb90218 <line:608:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb901c0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb530b0 'cs1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90200 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb901e0 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90290 <line:609:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90238 <col:3> 'int8_t':'char' lvalue Var 0x562fceb53128 'cs1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90278 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90258 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90308 <line:610:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb902b0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb53218 'cs2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb902f0 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb902d0 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90380 <line:611:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90328 <col:3> 'int8_t':'char' lvalue Var 0x562fceb53290 'cs2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90368 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90348 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb903f8 <line:612:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb903a0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a0e8 's1s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb903e0 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb903c0 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90470 <line:613:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90418 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90458 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90438 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb904e8 <line:614:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90490 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a250 's1s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb904d0 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb904b0 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90560 <line:615:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90508 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90548 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90528 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb905d8 <line:616:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90580 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a3b8 's2s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb905c0 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb905a0 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90650 <line:617:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb905f8 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90638 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90618 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90828 <line:618:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90670 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a520 's2s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90810 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90690 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb908a0 <line:619:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90848 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90888 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90868 <col:14> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90918 <line:620:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb908c0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a688 's1p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90900 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb908e0 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90990 <line:621:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90938 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90978 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90958 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90a08 <line:622:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb909b0 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a7f0 's2p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb909f0 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb909d0 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90a80 <line:623:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x562fceb90a28 <col:3> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x562fceb90a68 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562fceb90a48 <col:13> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x562fceb90ae0 <line:624:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x562fceb90aa0 <col:3> 'int' lvalue Var 0x562fceb8f5e0 'i2' 'int'
|   | | `-IntegerLiteral 0x562fceb90ac0 <col:8> 'int' 0
|   | `-WhileStmt 0x562fceb916b8 <line:625:3, line:651:3>
|   |   |-BinaryOperator 0x562fceb90b58 <line:625:10, col:15> 'int' '<'
|   |   | |-ImplicitCastExpr 0x562fceb90b40 <col:10> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x562fceb90b00 <col:10> 'int' lvalue Var 0x562fceb8f5e0 'i2' 'int'
|   |   | `-IntegerLiteral 0x562fceb90b20 <col:15> 'int' 10
|   |   `-CompoundStmt 0x562fceb916a0 <col:19, line:651:3>
|   |     `-CompoundStmt 0x562fceb915d8 <line:626:5, line:650:5>
|   |       |-CallExpr 0x562fceb90bb0 <line:627:5, col:35> 'void'
|   |       | `-ImplicitCastExpr 0x562fceb90b98 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x562fceb90b78 <col:5> 'void (void)' Function 0x562fceb80d20 'Console_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x562fceb90c08 <line:628:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x562fceb90bf0 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x562fceb90bd0 <col:5> 'void (void)' Function 0x562fceb81870 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x562fceb90c60 <line:629:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x562fceb90c48 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x562fceb90c28 <col:5> 'void (void)' Function 0x562fceb846b0 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x562fceb90cb8 <line:630:5, col:42> 'void'
|   |       | `-ImplicitCastExpr 0x562fceb90ca0 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x562fceb90c80 <col:5> 'void (void)' Function 0x562fceb86f00 'Pendulum_prism_task_each_pals_period' 'void (void)'
|   |       |-BinaryOperator 0x562fceb90d30 <line:631:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb90cd8 <col:5> 'int8_t':'char' lvalue Var 0x562fceb530b0 'cs1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb90d18 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb90cf8 <col:15> 'int8_t':'char' lvalue Var 0x562fceb53128 'cs1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x562fceb90da8 <line:632:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb90d50 <col:5> 'int8_t':'char' lvalue Var 0x562fceb53128 'cs1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb90d90 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb90d70 <col:15> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x562fceb90e20 <line:633:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb90dc8 <col:5> 'int8_t':'char' lvalue Var 0x562fceb53218 'cs2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb90e08 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb90de8 <col:15> 'int8_t':'char' lvalue Var 0x562fceb53290 'cs2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x562fceb90e98 <line:634:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb90e40 <col:5> 'int8_t':'char' lvalue Var 0x562fceb53290 'cs2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb90e80 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb90e60 <col:15> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x562fceb90f10 <line:635:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb90eb8 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a0e8 's1s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb90ef8 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb90ed8 <col:16> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x562fceb90f88 <line:636:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb90f30 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a160 's1s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb90f70 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb90f50 <col:16> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x562fceb91000 <line:637:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb90fa8 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a250 's1s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb90fe8 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb90fc8 <col:16> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x562fceb91078 <line:638:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb91020 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a2c8 's1s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb91060 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb91040 <col:16> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x562fceb910f0 <line:639:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb91098 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a3b8 's2s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb910d8 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb910b8 <col:16> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x562fceb91168 <line:640:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb91110 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a430 's2s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb91150 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb91130 <col:16> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x562fceb911e0 <line:641:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb91188 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a520 's2s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb911c8 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb911a8 <col:16> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x562fceb91258 <line:642:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb91200 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a598 's2s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb91240 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb91220 <col:16> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x562fceb912d0 <line:643:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb91278 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a688 's1p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb912b8 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb91298 <col:15> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x562fceb91348 <line:644:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb912f0 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a700 's1p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb91330 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb91310 <col:15> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x562fceb913c0 <line:645:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb91368 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a7f0 's2p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb913a8 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb91388 <col:15> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x562fceb91438 <line:646:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x562fceb913e0 <col:5> 'int8_t':'char' lvalue Var 0x562fceb7a868 's2p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x562fceb91420 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562fceb91400 <col:15> 'msg_t':'char' lvalue Var 0x562fceb52f50 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x562fceb914d0 <line:647:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x562fceb91458 <col:5> 'int' lvalue Var 0x562fceb8f548 'c1' 'int'
|   |       | `-CallExpr 0x562fceb914b0 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x562fceb91498 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x562fceb91478 <col:10> 'int (void)' Function 0x562fceb897c8 'check' 'int (void)'
|   |       |-CallExpr 0x562fceb91548 <line:648:5, col:14> 'void'
|   |       | |-ImplicitCastExpr 0x562fceb91530 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x562fceb914f0 <col:5> 'void (_Bool)' Function 0x562fceb7ad70 'assert' 'void (_Bool)'
|   |       | `-ImplicitCastExpr 0x562fceb91588 <col:12> '_Bool' <IntegralToBoolean>
|   |       |   `-ImplicitCastExpr 0x562fceb91570 <col:12> 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x562fceb91510 <col:12> 'int' lvalue Var 0x562fceb8f548 'c1' 'int'
|   |       `-UnaryOperator 0x562fceb915c0 <line:649:5, col:8> 'int' postfix '++'
|   |         `-DeclRefExpr 0x562fceb915a0 <col:5> 'int' lvalue Var 0x562fceb8f5e0 'i2' 'int'
|   `-ReturnStmt 0x562fceb91a50 <line:653:1, col:8>
|     `-IntegerLiteral 0x562fceb91a30 <col:8> 'int' 0
`-FunctionDecl 0x562fceb91b30 prev 0x562fceb7ad70 <line:655:1, line:666:1> line:655:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x562fceb91aa0 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x562fceb91d80 <line:656:1, line:666:1>
    `-CompoundStmt 0x562fceb91d68 <line:659:3, line:665:1>
      `-IfStmt 0x562fceb91d50 <line:660:3, line:664:3>
        |-UnaryOperator 0x562fceb91c10 <line:660:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x562fceb91bf8 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x562fceb91bd8 <col:9> '_Bool' lvalue ParmVar 0x562fceb91aa0 'arg' '_Bool'
        `-CompoundStmt 0x562fceb91d38 <col:14, line:664:3>
          `-CompoundStmt 0x562fceb91d20 <line:661:5, line:663:5>
            `-LabelStmt 0x562fceb91d08 <line:662:5, col:29> 'ERROR'
              `-CallExpr 0x562fceb91c98 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x562fceb91c80 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x562fceb91c28 <col:12> 'void () __attribute__((noreturn))' Function 0x562fceb52440 '__VERIFIER_error' 'void () __attribute__((noreturn))'
