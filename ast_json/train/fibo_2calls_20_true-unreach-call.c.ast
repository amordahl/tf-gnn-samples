TranslationUnitDecl 0x55f0962344d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55f096234d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55f096234a70 '__int128'
|-TypedefDecl 0x55f096234e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55f096234a90 'unsigned __int128'
|-TypedefDecl 0x55f096235110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55f096234ee0 'struct __NSConstantString_tag'
|   `-Record 0x55f096234e60 '__NSConstantString_tag'
|-TypedefDecl 0x55f0962351b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55f096235170 'char *'
|   `-BuiltinType 0x55f096234570 'char'
|-TypedefDecl 0x55f096274470 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55f096235450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55f096235290 'struct __va_list_tag'
|     `-Record 0x55f096235210 '__va_list_tag'
|-FunctionDecl 0x55f096274528 <recursive-simple/fibo_2calls_20_true-unreach-call.c:1:1, col:34> col:12 __VERIFIER_nondet_int 'int ()' extern
|-FunctionDecl 0x55f096274660 <line:2:1, col:30> col:13 used __VERIFIER_error 'void ()' extern
|-FunctionDecl 0x55f0962747e8 <line:4:1, col:16> col:5 used fibo1 'int (int)'
| `-ParmVarDecl 0x55f096274718 <col:11, col:15> col:15 n 'int'
|-FunctionDecl 0x55f096274940 <line:5:1, col:16> col:5 used fibo2 'int (int)'
| `-ParmVarDecl 0x55f0962748a8 <col:11, col:15> col:15 n 'int'
|-FunctionDecl 0x55f096274a98 prev 0x55f0962747e8 <line:7:1, line:15:1> line:7:5 used fibo1 'int (int)'
| |-ParmVarDecl 0x55f096274a00 <col:11, col:15> col:15 used n 'int'
| `-CompoundStmt 0x55f096274f40 <col:18, line:15:1>
|   `-IfStmt 0x55f096274f18 <line:8:5, line:14:5> has_else
|     |-BinaryOperator 0x55f096274b98 <line:8:9, col:13> 'int' '<'
|     | |-ImplicitCastExpr 0x55f096274b80 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55f096274b40 <col:9> 'int' lvalue ParmVar 0x55f096274a00 'n' 'int'
|     | `-IntegerLiteral 0x55f096274b60 <col:13> 'int' 1
|     |-CompoundStmt 0x55f096274be8 <col:16, line:10:5>
|     | `-ReturnStmt 0x55f096274bd8 <line:9:9, col:16>
|     |   `-IntegerLiteral 0x55f096274bb8 <col:16> 'int' 0
|     `-IfStmt 0x55f096274ef0 <line:10:12, line:14:5> has_else
|       |-BinaryOperator 0x55f096274c58 <line:10:16, col:21> 'int' '=='
|       | |-ImplicitCastExpr 0x55f096274c40 <col:16> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x55f096274c00 <col:16> 'int' lvalue ParmVar 0x55f096274a00 'n' 'int'
|       | `-IntegerLiteral 0x55f096274c20 <col:21> 'int' 1
|       |-CompoundStmt 0x55f096274ca8 <col:24, line:12:5>
|       | `-ReturnStmt 0x55f096274c98 <line:11:9, col:16>
|       |   `-IntegerLiteral 0x55f096274c78 <col:16> 'int' 1
|       `-CompoundStmt 0x55f096274ed8 <line:12:12, line:14:5>
|         `-ReturnStmt 0x55f096274ec8 <line:13:9, col:38>
|           `-BinaryOperator 0x55f096274ea8 <col:16, col:38> 'int' '+'
|             |-CallExpr 0x55f096274da8 <col:16, col:25> 'int'
|             | |-ImplicitCastExpr 0x55f096274d90 <col:16> 'int (*)(int)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55f096274cc0 <col:16> 'int (int)' Function 0x55f096274940 'fibo2' 'int (int)'
|             | `-BinaryOperator 0x55f096274d38 <col:22, col:24> 'int' '-'
|             |   |-ImplicitCastExpr 0x55f096274d20 <col:22> 'int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x55f096274ce0 <col:22> 'int' lvalue ParmVar 0x55f096274a00 'n' 'int'
|             |   `-IntegerLiteral 0x55f096274d00 <col:24> 'int' 1
|             `-CallExpr 0x55f096274e80 <col:29, col:38> 'int'
|               |-ImplicitCastExpr 0x55f096274e68 <col:29> 'int (*)(int)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55f096274dd0 <col:29> 'int (int)' Function 0x55f096274940 'fibo2' 'int (int)'
|               `-BinaryOperator 0x55f096274e48 <col:35, col:37> 'int' '-'
|                 |-ImplicitCastExpr 0x55f096274e30 <col:35> 'int' <LValueToRValue>
|                 | `-DeclRefExpr 0x55f096274df0 <col:35> 'int' lvalue ParmVar 0x55f096274a00 'n' 'int'
|                 `-IntegerLiteral 0x55f096274e10 <col:37> 'int' 2
|-FunctionDecl 0x55f096275008 prev 0x55f096274940 <line:17:1, line:25:1> line:17:5 used fibo2 'int (int)'
| |-ParmVarDecl 0x55f096274f70 <col:11, col:15> col:15 used n 'int'
| `-CompoundStmt 0x55f0962979b8 <col:18, line:25:1>
|   `-IfStmt 0x55f096297990 <line:18:5, line:24:5> has_else
|     |-BinaryOperator 0x55f096275108 <line:18:9, col:13> 'int' '<'
|     | |-ImplicitCastExpr 0x55f0962750f0 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55f0962750b0 <col:9> 'int' lvalue ParmVar 0x55f096274f70 'n' 'int'
|     | `-IntegerLiteral 0x55f0962750d0 <col:13> 'int' 1
|     |-CompoundStmt 0x55f096275158 <col:16, line:20:5>
|     | `-ReturnStmt 0x55f096275148 <line:19:9, col:16>
|     |   `-IntegerLiteral 0x55f096275128 <col:16> 'int' 0
|     `-IfStmt 0x55f096275428 <line:20:12, line:24:5> has_else
|       |-BinaryOperator 0x55f0962751c8 <line:20:16, col:21> 'int' '=='
|       | |-ImplicitCastExpr 0x55f0962751b0 <col:16> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x55f096275170 <col:16> 'int' lvalue ParmVar 0x55f096274f70 'n' 'int'
|       | `-IntegerLiteral 0x55f096275190 <col:21> 'int' 1
|       |-CompoundStmt 0x55f096275218 <col:24, line:22:5>
|       | `-ReturnStmt 0x55f096275208 <line:21:9, col:16>
|       |   `-IntegerLiteral 0x55f0962751e8 <col:16> 'int' 1
|       `-CompoundStmt 0x55f096275410 <line:22:12, line:24:5>
|         `-ReturnStmt 0x55f096275400 <line:23:9, col:38>
|           `-BinaryOperator 0x55f0962753e0 <col:16, col:38> 'int' '+'
|             |-CallExpr 0x55f0962752e0 <col:16, col:25> 'int'
|             | |-ImplicitCastExpr 0x55f0962752c8 <col:16> 'int (*)(int)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x55f096275230 <col:16> 'int (int)' Function 0x55f096274a98 'fibo1' 'int (int)'
|             | `-BinaryOperator 0x55f0962752a8 <col:22, col:24> 'int' '-'
|             |   |-ImplicitCastExpr 0x55f096275290 <col:22> 'int' <LValueToRValue>
|             |   | `-DeclRefExpr 0x55f096275250 <col:22> 'int' lvalue ParmVar 0x55f096274f70 'n' 'int'
|             |   `-IntegerLiteral 0x55f096275270 <col:24> 'int' 1
|             `-CallExpr 0x55f0962753b8 <col:29, col:38> 'int'
|               |-ImplicitCastExpr 0x55f0962753a0 <col:29> 'int (*)(int)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55f096275308 <col:29> 'int (int)' Function 0x55f096274a98 'fibo1' 'int (int)'
|               `-BinaryOperator 0x55f096275380 <col:35, col:37> 'int' '-'
|                 |-ImplicitCastExpr 0x55f096275368 <col:35> 'int' <LValueToRValue>
|                 | `-DeclRefExpr 0x55f096275328 <col:35> 'int' lvalue ParmVar 0x55f096274f70 'n' 'int'
|                 `-IntegerLiteral 0x55f096275348 <col:37> 'int' 2
`-FunctionDecl 0x55f096297aa8 <line:35:1, line:42:1> line:35:5 main 'int (void)'
  `-CompoundStmt 0x55f096297f30 <col:16, line:42:1>
    |-DeclStmt 0x55f096297c20 <line:36:5, col:15>
    | `-VarDecl 0x55f096297b98 <col:5, col:13> col:9 used x 'int' cinit
    |   `-IntegerLiteral 0x55f096297c00 <col:13> 'int' 20
    |-DeclStmt 0x55f096297d50 <line:37:5, col:26>
    | `-VarDecl 0x55f096297c50 <col:5, col:25> col:9 used result 'int' cinit
    |   `-CallExpr 0x55f096297d10 <col:18, col:25> 'int'
    |     |-ImplicitCastExpr 0x55f096297cf8 <col:18> 'int (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x55f096297cb8 <col:18> 'int (int)' Function 0x55f096274a98 'fibo1' 'int (int)'
    |     `-ImplicitCastExpr 0x55f096297d38 <col:24> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x55f096297cd8 <col:24> 'int' lvalue Var 0x55f096297b98 'x' 'int'
    |-IfStmt 0x55f096297ee8 <line:38:5, line:40:5>
    | |-BinaryOperator 0x55f096297dc0 <line:38:9, col:19> 'int' '!='
    | | |-ImplicitCastExpr 0x55f096297da8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55f096297d68 <col:9> 'int' lvalue Var 0x55f096297c50 'result' 'int'
    | | `-IntegerLiteral 0x55f096297d88 <col:19> 'int' 6765
    | `-CompoundStmt 0x55f096297ed0 <col:25, line:40:5>
    |   `-LabelStmt 0x55f096297eb8 <line:39:9, col:33> 'ERROR'
    |     `-CallExpr 0x55f096297e48 <col:16, col:33> 'void'
    |       `-ImplicitCastExpr 0x55f096297e30 <col:16> 'void (*)()' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x55f096297de0 <col:16> 'void ()' Function 0x55f096274660 '__VERIFIER_error' 'void ()'
    `-ReturnStmt 0x55f096297f20 <line:41:5, col:12>
      `-IntegerLiteral 0x55f096297f00 <col:12> 'int' 0
