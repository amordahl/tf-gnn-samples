TranslationUnitDecl 0x5562c6900d98 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5562c6901658 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5562c6901330 '__int128'
|-TypedefDecl 0x5562c69016c8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5562c6901350 'unsigned __int128'
|-TypedefDecl 0x5562c69019d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5562c69017a0 'struct __NSConstantString_tag'
|   `-Record 0x5562c6901720 '__NSConstantString_tag'
|-TypedefDecl 0x5562c6901a78 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5562c6901a30 'char *'
|   `-BuiltinType 0x5562c6900e30 'char'
|-TypedefDecl 0x5562c6940c70 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5562c6901d10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5562c6901b50 'struct __va_list_tag'
|     `-Record 0x5562c6901ad0 '__va_list_tag'
|-FunctionDecl 0x5562c6940d50 <loops/linear_sea.ch_true-unreach-call.i:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x5562c6940f20 <line:3:1, line:8:1> line:3:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x5562c6940e50 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x5562c6941170 <col:34, line:8:1>
|   |-IfStmt 0x5562c6941148 <line:4:3, line:6:3>
|   | |-UnaryOperator 0x5562c6941020 <line:4:7, col:13> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x5562c6941008 <col:8, col:13> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x5562c6940fe8 <col:8, col:13> 'int' lvalue
|   | |     `-DeclRefExpr 0x5562c6940fc8 <col:9> 'int' lvalue ParmVar 0x5562c6940e50 'cond' 'int'
|   | `-CompoundStmt 0x5562c6941130 <col:16, line:6:3>
|   |   `-LabelStmt 0x5562c6941118 <line:5:5, col:29> 'ERROR'
|   |     `-CallExpr 0x5562c69410a8 <col:12, col:29> 'void'
|   |       `-ImplicitCastExpr 0x5562c6941090 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5562c6941038 <col:12> 'void () __attribute__((noreturn))' Function 0x5562c6940d50 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x5562c6941160 <line:7:3>
|-FunctionDecl 0x5562c69411e8 <line:9:1, col:37> col:14 used __VERIFIER_nondet_uint 'unsigned int ()'
|-VarDecl 0x5562c69412a0 <line:10:1, col:14> col:14 used SIZE 'unsigned int'
|-FunctionDecl 0x5562c6941548 <line:11:1, line:18:1> line:11:5 used linear_search 'int (int *, int, int)'
| |-ParmVarDecl 0x5562c6941358 <col:19, col:24> col:24 used a 'int *'
| |-ParmVarDecl 0x5562c69413d8 <col:27, col:31> col:31 used n 'int'
| |-ParmVarDecl 0x5562c6941458 <col:34, col:38> col:38 used q 'int'
| `-CompoundStmt 0x5562c6941a18 <col:41, line:18:1>
|   |-DeclStmt 0x5562c69416b8 <line:12:3, col:19>
|   | `-VarDecl 0x5562c6941618 <col:3, col:18> col:16 used j 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x5562c69416a0 <col:18> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x5562c6941680 <col:18> 'int' 0
|   |-WhileStmt 0x5562c69418e8 <line:13:3, line:15:3>
|   | |-BinaryOperator 0x5562c6941878 <line:13:10, col:23> 'int' '&&'
|   | | |-BinaryOperator 0x5562c6941758 <col:10, col:12> 'int' '<'
|   | | | |-ImplicitCastExpr 0x5562c6941710 <col:10> 'unsigned int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5562c69416d0 <col:10> 'unsigned int' lvalue Var 0x5562c6941618 'j' 'unsigned int'
|   | | | `-ImplicitCastExpr 0x5562c6941740 <col:12> 'unsigned int' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x5562c6941728 <col:12> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5562c69416f0 <col:12> 'int' lvalue ParmVar 0x5562c69413d8 'n' 'int'
|   | | `-BinaryOperator 0x5562c6941858 <col:17, col:23> 'int' '!='
|   | |   |-ImplicitCastExpr 0x5562c6941828 <col:17, col:20> 'int' <LValueToRValue>
|   | |   | `-ArraySubscriptExpr 0x5562c69417e8 <col:17, col:20> 'int' lvalue
|   | |   |   |-ImplicitCastExpr 0x5562c69417b8 <col:17> 'int *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x5562c6941778 <col:17> 'int *' lvalue ParmVar 0x5562c6941358 'a' 'int *'
|   | |   |   `-ImplicitCastExpr 0x5562c69417d0 <col:19> 'unsigned int' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x5562c6941798 <col:19> 'unsigned int' lvalue Var 0x5562c6941618 'j' 'unsigned int'
|   | |   `-ImplicitCastExpr 0x5562c6941840 <col:23> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5562c6941808 <col:23> 'int' lvalue ParmVar 0x5562c6941458 'q' 'int'
|   | `-CompoundStmt 0x5562c69418d0 <col:26, line:15:3>
|   |   `-UnaryOperator 0x5562c69418b8 <line:14:3, col:4> 'unsigned int' postfix '++'
|   |     `-DeclRefExpr 0x5562c6941898 <col:3> 'unsigned int' lvalue Var 0x5562c6941618 'j' 'unsigned int'
|   `-IfStmt 0x5562c69419f0 <line:16:3, line:17:15> has_else
|     |-BinaryOperator 0x5562c6941970 <line:16:7, col:9> 'int' '<'
|     | |-ImplicitCastExpr 0x5562c6941940 <col:7> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5562c6941900 <col:7> 'unsigned int' lvalue Var 0x5562c6941618 'j' 'unsigned int'
|     | `-ImplicitCastExpr 0x5562c6941958 <col:9> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5562c6941920 <col:9> 'unsigned int' lvalue Var 0x5562c69412a0 'SIZE' 'unsigned int'
|     |-ReturnStmt 0x5562c69419b0 <col:15, col:22>
|     | `-IntegerLiteral 0x5562c6941990 <col:22> 'int' 1
|     `-ReturnStmt 0x5562c69419e0 <line:17:8, col:15>
|       `-IntegerLiteral 0x5562c69419c0 <col:15> 'int' 0
`-FunctionDecl 0x5562c6941a98 <line:19:1, line:24:1> line:19:5 main 'int ()'
  `-CompoundStmt 0x5562c69662f0 <col:12, line:24:1>
    |-BinaryOperator 0x5562c6965e88 <line:20:3, col:37> 'unsigned int' '='
    | |-DeclRefExpr 0x5562c6941b38 <col:3> 'unsigned int' lvalue Var 0x5562c69412a0 'SIZE' 'unsigned int'
    | `-BinaryOperator 0x5562c6965e68 <col:8, col:37> 'unsigned int' '+'
    |   |-ParenExpr 0x5562c6941c40 <col:8, col:35> 'unsigned int'
    |   | `-BinaryOperator 0x5562c6941c20 <col:9, col:34> 'unsigned int' '/'
    |   |   |-CallExpr 0x5562c6941bc8 <col:9, col:32> 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x5562c6941bb0 <col:9> 'unsigned int (*)()' <FunctionToPointerDecay>
    |   |   |   `-DeclRefExpr 0x5562c6941b58 <col:9> 'unsigned int ()' Function 0x5562c69411e8 '__VERIFIER_nondet_uint' 'unsigned int ()'
    |   |   `-ImplicitCastExpr 0x5562c6941c08 <col:34> 'unsigned int' <IntegralCast>
    |   |     `-IntegerLiteral 0x5562c6941be8 <col:34> 'int' 8
    |   `-ImplicitCastExpr 0x5562c6965e50 <col:37> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x5562c6965e30 <col:37> 'int' 1
    |-DeclStmt 0x5562c6965fd0 <line:21:3, col:14>
    | `-VarDecl 0x5562c6965f68 <col:3, col:13> col:7 used a 'int [SIZE]'
    |-BinaryOperator 0x5562c69660f0 <line:22:3, col:13> 'int' '='
    | |-ArraySubscriptExpr 0x5562c69660b0 <col:3, col:11> 'int' lvalue
    | | |-ImplicitCastExpr 0x5562c6966098 <col:3> 'int *' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x5562c6965fe8 <col:3> 'int [SIZE]' lvalue Var 0x5562c6965f68 'a' 'int [SIZE]'
    | | `-BinaryOperator 0x5562c6966078 <col:5, col:10> 'unsigned int' '/'
    | |   |-ImplicitCastExpr 0x5562c6966048 <col:5> 'unsigned int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x5562c6966008 <col:5> 'unsigned int' lvalue Var 0x5562c69412a0 'SIZE' 'unsigned int'
    | |   `-ImplicitCastExpr 0x5562c6966060 <col:10> 'unsigned int' <IntegralCast>
    | |     `-IntegerLiteral 0x5562c6966028 <col:10> 'int' 2
    | `-IntegerLiteral 0x5562c69660d0 <col:13> 'int' 3
    `-CallExpr 0x5562c69662c8 <line:23:3, col:44> 'void'
      |-ImplicitCastExpr 0x5562c69662b0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x5562c6966110 <col:3> 'void (int)' Function 0x5562c6940f20 '__VERIFIER_assert' 'void (int)'
      `-CallExpr 0x5562c69661f8 <col:21, col:43> 'int'
        |-ImplicitCastExpr 0x5562c69661e0 <col:21> 'int (*)(int *, int, int)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x5562c6966130 <col:21> 'int (int *, int, int)' Function 0x5562c6941548 'linear_search' 'int (int *, int, int)'
        |-ImplicitCastExpr 0x5562c6966230 <col:35> 'int *' <ArrayToPointerDecay>
        | `-DeclRefExpr 0x5562c6966150 <col:35> 'int [SIZE]' lvalue Var 0x5562c6965f68 'a' 'int [SIZE]'
        |-ImplicitCastExpr 0x5562c6966260 <col:37> 'int' <IntegralCast>
        | `-ImplicitCastExpr 0x5562c6966248 <col:37> 'unsigned int' <LValueToRValue>
        |   `-DeclRefExpr 0x5562c6966170 <col:37> 'unsigned int' lvalue Var 0x5562c69412a0 'SIZE' 'unsigned int'
        `-IntegerLiteral 0x5562c6966190 <col:42> 'int' 3
