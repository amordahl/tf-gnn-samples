TranslationUnitDecl 0x55c1f31166c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55c1f3116f88 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55c1f3116c60 '__int128'
|-TypedefDecl 0x55c1f3116ff8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55c1f3116c80 'unsigned __int128'
|-TypedefDecl 0x55c1f3117300 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55c1f31170d0 'struct __NSConstantString_tag'
|   `-Record 0x55c1f3117050 '__NSConstantString_tag'
|-TypedefDecl 0x55c1f31173a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55c1f3117360 'char *'
|   `-BuiltinType 0x55c1f3116760 'char'
|-TypedefDecl 0x55c1f3158560 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55c1f3117640 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55c1f3117480 'struct __va_list_tag'
|     `-Record 0x55c1f3117400 '__va_list_tag'
|-FunctionDecl 0x55c1f3158640 <seq-mthreaded/pals_lcr-var-start-time.3_false-unreach-call.2.ufo.UNBOUNDED.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55c1f3158820 <line:61:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
| `-FullComment 0x55c1f318da40 <line:3:4, line:56:69>
|   |-ParagraphComment 0x55c1f318c040 <line:3:4, col:71>
|   | `-TextComment 0x55c1f318c010 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x55c1f318c090 <line:5:1, col:67>
|   | `-TextComment 0x55c1f318c060 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x55c1f318c130 <line:7:1, line:9:4>
|   | |-TextComment 0x55c1f318c0b0 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x55c1f318c0d0 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x55c1f318c0f0 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x55c1f318c1d0 <line:11:1, line:13:12>
|   | |-TextComment 0x55c1f318c150 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x55c1f318c170 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x55c1f318c190 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x55c1f318c270 <line:15:1, line:17:68>
|   | |-TextComment 0x55c1f318c1f0 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x55c1f318c210 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x55c1f318c230 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x55c1f318c360 <line:19:1, line:23:10>
|   | |-TextComment 0x55c1f318c290 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x55c1f318c2b0 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x55c1f318c2d0 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x55c1f318c2f0 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x55c1f318c310 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55c1f318c380 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55c1f318c3e0 <col:15, col:23>
|   |   `-TextComment 0x55c1f318c3b0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55c1f318c480 <line:25:1, line:27:10>
|   | |-TextComment 0x55c1f318c400 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x55c1f318c420 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x55c1f318c440 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55c1f318d4d0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55c1f318d530 <col:15, col:23>
|   |   `-TextComment 0x55c1f318d500 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55c1f318d5a0 <line:29:1, line:30:15>
|   | |-TextComment 0x55c1f318d550 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x55c1f318d570 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x55c1f318d690 <line:32:1, line:36:7>
|   | |-TextComment 0x55c1f318d5c0 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x55c1f318d5e0 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x55c1f318d600 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x55c1f318d620 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x55c1f318d640 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x55c1f318d730 <line:38:1, line:40:61>
|   | |-TextComment 0x55c1f318d6b0 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x55c1f318d6d0 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x55c1f318d6f0 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x55c1f318d890 <line:42:1, line:49:37>
|   | |-TextComment 0x55c1f318d750 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x55c1f318d770 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x55c1f318d790 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x55c1f318d7b0 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x55c1f318d7d0 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x55c1f318d7f0 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x55c1f318d810 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x55c1f318d830 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x55c1f318d900 <line:51:1, line:52:13>
|   | |-TextComment 0x55c1f318d8b0 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x55c1f318d8d0 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x55c1f318d950 <line:54:1, col:10>
|   | `-TextComment 0x55c1f318d920 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x55c1f318d9a0 <line:56:2, col:69>
|     `-TextComment 0x55c1f318d970 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x55c1f3158990 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x55c1f3158b08 <line:63:1, col:43> col:15 used __VERIFIER_nondet_uchar 'unsigned char (void)'
|-FunctionDecl 0x55c1f3158c80 <line:64:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x55c1f3158bb8 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x55c1f3158e10 <line:65:1, col:32> col:6 used __VERIFIER_assume 'void (int)'
| `-ParmVarDecl 0x55c1f3158d40 <col:24, col:28> col:28 arg 'int'
|-TypedefDecl 0x55c1f3158ec8 <line:66:1, col:14> col:14 referenced msg_t 'char'
| `-BuiltinType 0x55c1f3116760 'char'
|-TypedefDecl 0x55c1f3158f38 <line:67:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x55c1f31167c0 'int'
|-FunctionDecl 0x55c1f3159180 <line:68:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55c1f3158fc8 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x55c1f3159068 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x55c1f3159350 <line:69:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55c1f3159240 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x55c1f31592b8 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x55c1f3159410 <line:70:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x55c1f31594c0 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x55c1f3159498 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x55c1f3159478 <col:28> 'int' 1
|-VarDecl 0x55c1f317f050 <line:71:1, col:15> col:15 used r1 'unsigned char'
|-VarDecl 0x55c1f317f0c8 <line:72:1, col:8> col:8 p1 'port_t':'int'
|-VarDecl 0x55c1f317f140 <line:73:1, col:6> col:6 used p1_old 'char'
|-VarDecl 0x55c1f317f1b8 <line:74:1, col:6> col:6 used p1_new 'char'
|-VarDecl 0x55c1f317f230 <line:75:1, col:6> col:6 used id1 'char'
|-VarDecl 0x55c1f317f2a8 <line:76:1, col:6> col:6 used st1 'char'
|-VarDecl 0x55c1f317f320 <line:77:1, col:7> col:7 used send1 'msg_t':'char'
|-VarDecl 0x55c1f317f398 <line:78:1, col:7> col:7 used mode1 '_Bool'
|-VarDecl 0x55c1f317f410 <line:79:1, col:7> col:7 used alive1 '_Bool'
|-VarDecl 0x55c1f317f488 <line:80:1, col:8> col:8 p2 'port_t':'int'
|-VarDecl 0x55c1f317f500 <line:81:1, col:6> col:6 used p2_old 'char'
|-VarDecl 0x55c1f317f578 <line:82:1, col:6> col:6 used p2_new 'char'
|-VarDecl 0x55c1f317f5f0 <line:83:1, col:6> col:6 used id2 'char'
|-VarDecl 0x55c1f317f668 <line:84:1, col:6> col:6 used st2 'char'
|-VarDecl 0x55c1f317f6e0 <line:85:1, col:7> col:7 used send2 'msg_t':'char'
|-VarDecl 0x55c1f317f758 <line:86:1, col:7> col:7 used mode2 '_Bool'
|-VarDecl 0x55c1f317f7d0 <line:87:1, col:7> col:7 used alive2 '_Bool'
|-VarDecl 0x55c1f317f848 <line:88:1, col:8> col:8 p3 'port_t':'int'
|-VarDecl 0x55c1f317f8c0 <line:89:1, col:6> col:6 used p3_old 'char'
|-VarDecl 0x55c1f317f938 <line:90:1, col:6> col:6 used p3_new 'char'
|-VarDecl 0x55c1f317f9b0 <line:91:1, col:6> col:6 used id3 'char'
|-VarDecl 0x55c1f317fa28 <line:92:1, col:6> col:6 used st3 'char'
|-VarDecl 0x55c1f317faa0 <line:93:1, col:7> col:7 used send3 'msg_t':'char'
|-VarDecl 0x55c1f317fb18 <line:94:1, col:7> col:7 used mode3 '_Bool'
|-VarDecl 0x55c1f317fb90 <line:95:1, col:7> col:7 used alive3 '_Bool'
|-FunctionDecl 0x55c1f317fcc0 <line:96:1, line:130:1> line:96:6 used node1 'void (void)'
| `-CompoundStmt 0x55c1f3181bf8 <line:97:1, line:130:1>
|   |-DeclStmt 0x55c1f317fdd8 <line:98:3, col:12>
|   | `-VarDecl 0x55c1f317fd70 <col:3, col:9> col:9 used m1 'msg_t':'char'
|   `-CompoundStmt 0x55c1f3181bd0 <line:100:3, line:129:1>
|     |-BinaryOperator 0x55c1f317fe48 <line:101:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55c1f317fdf0 <col:3> 'msg_t':'char' lvalue Var 0x55c1f317fd70 'm1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55c1f317fe30 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c1f317fe10 <col:8> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55c1f3181b98 <line:102:3, line:127:3> has_else
|     | |-ImplicitCastExpr 0x55c1f317fe88 <line:102:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55c1f317fe68 <col:7> '_Bool' lvalue Var 0x55c1f317f398 'mode1' '_Bool'
|     | |-CompoundStmt 0x55c1f3181770 <col:14, line:122:3>
|     | | |-IfStmt 0x55c1f317ffc0 <line:103:5, line:105:5>
|     | | | |-BinaryOperator 0x55c1f317ff10 <line:103:9, col:15> 'int' '=='
|     | | | | |-ImplicitCastExpr 0x55c1f317fef8 <col:9> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55c1f317fee0 <col:9> 'unsigned char' <LValueToRValue>
|     | | | | |   `-DeclRefExpr 0x55c1f317fea0 <col:9> 'unsigned char' lvalue Var 0x55c1f317f050 'r1' 'unsigned char'
|     | | | | `-IntegerLiteral 0x55c1f317fec0 <col:15> 'int' 255
|     | | | `-CompoundStmt 0x55c1f317ffa8 <col:20, line:105:5>
|     | | |   `-BinaryOperator 0x55c1f317ff88 <line:104:7, col:12> 'unsigned char' '='
|     | | |     |-DeclRefExpr 0x55c1f317ff30 <col:7> 'unsigned char' lvalue Var 0x55c1f317f050 'r1' 'unsigned char'
|     | | |     `-ImplicitCastExpr 0x55c1f317ff70 <col:12> 'unsigned char' <IntegralCast>
|     | | |       `-IntegerLiteral 0x55c1f317ff50 <col:12> 'int' 2
|     | | |-BinaryOperator 0x55c1f3180fe0 <line:106:5, col:15> 'unsigned char' '='
|     | | | |-DeclRefExpr 0x55c1f317ffd8 <col:5> 'unsigned char' lvalue Var 0x55c1f317f050 'r1' 'unsigned char'
|     | | | `-ImplicitCastExpr 0x55c1f3180fc8 <col:10, col:15> 'unsigned char' <IntegralCast>
|     | | |   `-BinaryOperator 0x55c1f3180fa8 <col:10, col:15> 'int' '+'
|     | | |     |-ImplicitCastExpr 0x55c1f3180f90 <col:10> 'int' <IntegralCast>
|     | | |     | `-ImplicitCastExpr 0x55c1f3180038 <col:10> 'unsigned char' <LValueToRValue>
|     | | |     |   `-DeclRefExpr 0x55c1f317fff8 <col:10> 'unsigned char' lvalue Var 0x55c1f317f050 'r1' 'unsigned char'
|     | | |     `-IntegerLiteral 0x55c1f3180018 <col:15> 'int' 1
|     | | |-BinaryOperator 0x55c1f3181058 <line:107:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55c1f3181000 <col:5> 'msg_t':'char' lvalue Var 0x55c1f317fd70 'm1' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55c1f3181040 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55c1f3181020 <col:10> 'char' lvalue Var 0x55c1f317f8c0 'p3_old' 'char'
|     | | |-BinaryOperator 0x55c1f31810d0 <line:108:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55c1f3181078 <col:5> 'char' lvalue Var 0x55c1f317f8c0 'p3_old' 'char'
|     | | | `-ImplicitCastExpr 0x55c1f31810b8 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55c1f3181098 <col:14> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55c1f31816c0 <line:109:5, line:120:5>
|     | | | |-BinaryOperator 0x55c1f31811e0 <line:109:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55c1f3181140 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55c1f3181128 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55c1f31810f0 <col:15> 'msg_t':'char' lvalue Var 0x55c1f317fd70 'm1' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55c1f31811b8 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55c1f31811a0 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55c1f3181168 <col:27> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55c1f31816a8 <col:34, line:120:5>
|     | | |   `-IfStmt 0x55c1f3181680 <line:110:7, line:119:7> has_else
|     | | |     |-ImplicitCastExpr 0x55c1f3181220 <line:110:11> '_Bool' <LValueToRValue>
|     | | |     | `-DeclRefExpr 0x55c1f3181200 <col:11> '_Bool' lvalue Var 0x55c1f317f410 'alive1' '_Bool'
|     | | |     |-CompoundStmt 0x55c1f31815d8 <col:19, line:117:7>
|     | | |     | `-IfStmt 0x55c1f31815b0 <line:111:9, line:116:9> has_else
|     | | |     |   |-BinaryOperator 0x55c1f3181328 <line:111:13, col:30> 'int' '>'
|     | | |     |   | |-CStyleCastExpr 0x55c1f3181288 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |   | | `-ImplicitCastExpr 0x55c1f3181270 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   | |   `-DeclRefExpr 0x55c1f3181238 <col:19> 'msg_t':'char' lvalue Var 0x55c1f317fd70 'm1' 'msg_t':'char'
|     | | |     |   | `-CStyleCastExpr 0x55c1f3181300 <col:24, col:30> 'int' <IntegralCast>
|     | | |     |   |   `-ImplicitCastExpr 0x55c1f31812e8 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   |     `-DeclRefExpr 0x55c1f31812b0 <col:30> 'char' lvalue Var 0x55c1f317f230 'id1' 'char'
|     | | |     |   |-CompoundStmt 0x55c1f31813c0 <col:35, line:113:9>
|     | | |     |   | `-BinaryOperator 0x55c1f31813a0 <line:112:11, col:19> 'msg_t':'char' '='
|     | | |     |   |   |-DeclRefExpr 0x55c1f3181348 <col:11> 'msg_t':'char' lvalue Var 0x55c1f317f320 'send1' 'msg_t':'char'
|     | | |     |   |   `-ImplicitCastExpr 0x55c1f3181388 <col:19> 'msg_t':'char' <LValueToRValue>
|     | | |     |   |     `-DeclRefExpr 0x55c1f3181368 <col:19> 'msg_t':'char' lvalue Var 0x55c1f317fd70 'm1' 'msg_t':'char'
|     | | |     |   `-IfStmt 0x55c1f3181598 <line:114:9, line:116:9>
|     | | |     |     |-BinaryOperator 0x55c1f31814c8 <line:114:13, col:31> 'int' '=='
|     | | |     |     | |-CStyleCastExpr 0x55c1f3181428 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |     | | `-ImplicitCastExpr 0x55c1f3181410 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     | |   `-DeclRefExpr 0x55c1f31813d8 <col:19> 'msg_t':'char' lvalue Var 0x55c1f317fd70 'm1' 'msg_t':'char'
|     | | |     |     | `-CStyleCastExpr 0x55c1f31814a0 <col:25, col:31> 'int' <IntegralCast>
|     | | |     |     |   `-ImplicitCastExpr 0x55c1f3181488 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     |     `-DeclRefExpr 0x55c1f3181450 <col:31> 'char' lvalue Var 0x55c1f317f230 'id1' 'char'
|     | | |     |     `-CompoundStmt 0x55c1f3181580 <col:36, line:116:9>
|     | | |     |       `-BinaryOperator 0x55c1f3181560 <line:115:11, col:23> 'char' '='
|     | | |     |         |-DeclRefExpr 0x55c1f31814e8 <col:11> 'char' lvalue Var 0x55c1f317f2a8 'st1' 'char'
|     | | |     |         `-CStyleCastExpr 0x55c1f3181538 <col:17, col:23> 'char' <IntegralCast>
|     | | |     |           `-IntegerLiteral 0x55c1f3181508 <col:23> 'int' 1
|     | | |     `-CompoundStmt 0x55c1f3181668 <line:117:14, line:119:7>
|     | | |       `-BinaryOperator 0x55c1f3181648 <line:118:9, col:17> 'msg_t':'char' '='
|     | | |         |-DeclRefExpr 0x55c1f31815f0 <col:9> 'msg_t':'char' lvalue Var 0x55c1f317f320 'send1' 'msg_t':'char'
|     | | |         `-ImplicitCastExpr 0x55c1f3181630 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |           `-DeclRefExpr 0x55c1f3181610 <col:17> 'msg_t':'char' lvalue Var 0x55c1f317fd70 'm1' 'msg_t':'char'
|     | | `-BinaryOperator 0x55c1f3181750 <line:121:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55c1f31816d8 <col:5> '_Bool' lvalue Var 0x55c1f317f398 'mode1' '_Bool'
|     | |   `-CStyleCastExpr 0x55c1f3181728 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55c1f31816f8 <col:20> 'int' 0
|     | `-CompoundStmt 0x55c1f3181b78 <line:122:10, line:127:3>
|     |   |-IfStmt 0x55c1f3181ac8 <line:123:5, line:125:5>
|     |   | |-ImplicitCastExpr 0x55c1f31817d0 <line:123:9> '_Bool' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55c1f31817b0 <col:9> '_Bool' lvalue Var 0x55c1f317f410 'alive1' '_Bool'
|     |   | `-CompoundStmt 0x55c1f3181ab0 <col:17, line:125:5>
|     |   |   `-BinaryOperator 0x55c1f3181a90 <line:124:7, col:60> 'char' '='
|     |   |     |-DeclRefExpr 0x55c1f31817e8 <col:7> 'char' lvalue Var 0x55c1f317f1b8 'p1_new' 'char'
|     |   |     `-ImplicitCastExpr 0x55c1f3181a78 <col:16, col:60> 'char' <IntegralCast>
|     |   |       `-ConditionalOperator 0x55c1f3181a48 <col:16, col:60> 'int'
|     |   |         |-BinaryOperator 0x55c1f3181988 <col:16, col:44> 'int' '&&'
|     |   |         | |-BinaryOperator 0x55c1f31818a8 <col:16, col:25> 'int' '!='
|     |   |         | | |-ImplicitCastExpr 0x55c1f3181878 <col:16> 'int' <IntegralCast>
|     |   |         | | | `-ImplicitCastExpr 0x55c1f3181848 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |         | | |   `-DeclRefExpr 0x55c1f3181808 <col:16> 'msg_t':'char' lvalue Var 0x55c1f317f320 'send1' 'msg_t':'char'
|     |   |         | | `-ImplicitCastExpr 0x55c1f3181890 <col:25> 'int' <IntegralCast>
|     |   |         | |   `-ImplicitCastExpr 0x55c1f3181860 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |         | |     `-DeclRefExpr 0x55c1f3181828 <col:25> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   |         | `-BinaryOperator 0x55c1f3181968 <col:34, col:44> 'int' '=='
|     |   |         |   |-ImplicitCastExpr 0x55c1f3181938 <col:34> 'int' <IntegralCast>
|     |   |         |   | `-ImplicitCastExpr 0x55c1f3181908 <col:34> 'char' <LValueToRValue>
|     |   |         |   |   `-DeclRefExpr 0x55c1f31818c8 <col:34> 'char' lvalue Var 0x55c1f317f1b8 'p1_new' 'char'
|     |   |         |   `-ImplicitCastExpr 0x55c1f3181950 <col:44> 'int' <IntegralCast>
|     |   |         |     `-ImplicitCastExpr 0x55c1f3181920 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |         |       `-DeclRefExpr 0x55c1f31818e8 <col:44> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   |         |-ImplicitCastExpr 0x55c1f3181a00 <col:52> 'int' <IntegralCast>
|     |   |         | `-ImplicitCastExpr 0x55c1f31819e8 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |         |   `-DeclRefExpr 0x55c1f31819a8 <col:52> 'msg_t':'char' lvalue Var 0x55c1f317f320 'send1' 'msg_t':'char'
|     |   |         `-ImplicitCastExpr 0x55c1f3181a30 <col:60> 'int' <IntegralCast>
|     |   |           `-ImplicitCastExpr 0x55c1f3181a18 <col:60> 'char' <LValueToRValue>
|     |   |             `-DeclRefExpr 0x55c1f31819c8 <col:60> 'char' lvalue Var 0x55c1f317f1b8 'p1_new' 'char'
|     |   `-BinaryOperator 0x55c1f3181b58 <line:126:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55c1f3181ae0 <col:5> '_Bool' lvalue Var 0x55c1f317f398 'mode1' '_Bool'
|     |     `-CStyleCastExpr 0x55c1f3181b30 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55c1f3181b00 <col:20> 'int' 1
|     `-ReturnStmt 0x55c1f3181bc0 <line:128:3>
|-FunctionDecl 0x55c1f3181cb0 <line:131:1, line:164:1> line:131:6 used node2 'void (void)'
| `-CompoundStmt 0x55c1f3183930 <line:132:1, line:164:1>
|   |-DeclStmt 0x55c1f3181dc8 <line:133:3, col:12>
|   | `-VarDecl 0x55c1f3181d60 <col:3, col:9> col:9 used m2 'msg_t':'char'
|   `-CompoundStmt 0x55c1f3183908 <line:135:3, line:163:1>
|     |-BinaryOperator 0x55c1f3181e38 <line:136:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55c1f3181de0 <col:3> 'msg_t':'char' lvalue Var 0x55c1f3181d60 'm2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55c1f3181e20 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c1f3181e00 <col:8> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55c1f31838d0 <line:137:3, line:161:3> has_else
|     | |-ImplicitCastExpr 0x55c1f3181e78 <line:137:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55c1f3181e58 <col:7> '_Bool' lvalue Var 0x55c1f317f758 'mode2' '_Bool'
|     | |-CompoundStmt 0x55c1f31830a0 <col:14, line:153:3>
|     | | |-BinaryOperator 0x55c1f3181ee8 <line:138:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55c1f3181e90 <col:5> 'msg_t':'char' lvalue Var 0x55c1f3181d60 'm2' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55c1f3181ed0 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55c1f3181eb0 <col:10> 'char' lvalue Var 0x55c1f317f140 'p1_old' 'char'
|     | | |-BinaryOperator 0x55c1f3181f60 <line:139:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55c1f3181f08 <col:5> 'char' lvalue Var 0x55c1f317f140 'p1_old' 'char'
|     | | | `-ImplicitCastExpr 0x55c1f3181f48 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55c1f3181f28 <col:14> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55c1f3182ff0 <line:140:5, line:151:5>
|     | | | |-BinaryOperator 0x55c1f3182b10 <line:140:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55c1f3182a70 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55c1f3182a58 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55c1f3182a20 <col:15> 'msg_t':'char' lvalue Var 0x55c1f3181d60 'm2' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55c1f3182ae8 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55c1f3182ad0 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55c1f3182a98 <col:27> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55c1f3182fd8 <col:34, line:151:5>
|     | | |   `-IfStmt 0x55c1f3182fb0 <line:141:7, line:150:7> has_else
|     | | |     |-ImplicitCastExpr 0x55c1f3182b50 <line:141:11> '_Bool' <LValueToRValue>
|     | | |     | `-DeclRefExpr 0x55c1f3182b30 <col:11> '_Bool' lvalue Var 0x55c1f317f7d0 'alive2' '_Bool'
|     | | |     |-CompoundStmt 0x55c1f3182f08 <col:19, line:148:7>
|     | | |     | `-IfStmt 0x55c1f3182ee0 <line:142:9, line:147:9> has_else
|     | | |     |   |-BinaryOperator 0x55c1f3182c58 <line:142:13, col:30> 'int' '>'
|     | | |     |   | |-CStyleCastExpr 0x55c1f3182bb8 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |   | | `-ImplicitCastExpr 0x55c1f3182ba0 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   | |   `-DeclRefExpr 0x55c1f3182b68 <col:19> 'msg_t':'char' lvalue Var 0x55c1f3181d60 'm2' 'msg_t':'char'
|     | | |     |   | `-CStyleCastExpr 0x55c1f3182c30 <col:24, col:30> 'int' <IntegralCast>
|     | | |     |   |   `-ImplicitCastExpr 0x55c1f3182c18 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   |     `-DeclRefExpr 0x55c1f3182be0 <col:30> 'char' lvalue Var 0x55c1f317f5f0 'id2' 'char'
|     | | |     |   |-CompoundStmt 0x55c1f3182cf0 <col:35, line:144:9>
|     | | |     |   | `-BinaryOperator 0x55c1f3182cd0 <line:143:11, col:19> 'msg_t':'char' '='
|     | | |     |   |   |-DeclRefExpr 0x55c1f3182c78 <col:11> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|     | | |     |   |   `-ImplicitCastExpr 0x55c1f3182cb8 <col:19> 'msg_t':'char' <LValueToRValue>
|     | | |     |   |     `-DeclRefExpr 0x55c1f3182c98 <col:19> 'msg_t':'char' lvalue Var 0x55c1f3181d60 'm2' 'msg_t':'char'
|     | | |     |   `-IfStmt 0x55c1f3182ec8 <line:145:9, line:147:9>
|     | | |     |     |-BinaryOperator 0x55c1f3182df8 <line:145:13, col:31> 'int' '=='
|     | | |     |     | |-CStyleCastExpr 0x55c1f3182d58 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |     | | `-ImplicitCastExpr 0x55c1f3182d40 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     | |   `-DeclRefExpr 0x55c1f3182d08 <col:19> 'msg_t':'char' lvalue Var 0x55c1f3181d60 'm2' 'msg_t':'char'
|     | | |     |     | `-CStyleCastExpr 0x55c1f3182dd0 <col:25, col:31> 'int' <IntegralCast>
|     | | |     |     |   `-ImplicitCastExpr 0x55c1f3182db8 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     |     `-DeclRefExpr 0x55c1f3182d80 <col:31> 'char' lvalue Var 0x55c1f317f5f0 'id2' 'char'
|     | | |     |     `-CompoundStmt 0x55c1f3182eb0 <col:36, line:147:9>
|     | | |     |       `-BinaryOperator 0x55c1f3182e90 <line:146:11, col:23> 'char' '='
|     | | |     |         |-DeclRefExpr 0x55c1f3182e18 <col:11> 'char' lvalue Var 0x55c1f317f668 'st2' 'char'
|     | | |     |         `-CStyleCastExpr 0x55c1f3182e68 <col:17, col:23> 'char' <IntegralCast>
|     | | |     |           `-IntegerLiteral 0x55c1f3182e38 <col:23> 'int' 1
|     | | |     `-CompoundStmt 0x55c1f3182f98 <line:148:14, line:150:7>
|     | | |       `-BinaryOperator 0x55c1f3182f78 <line:149:9, col:17> 'msg_t':'char' '='
|     | | |         |-DeclRefExpr 0x55c1f3182f20 <col:9> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|     | | |         `-ImplicitCastExpr 0x55c1f3182f60 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |           `-DeclRefExpr 0x55c1f3182f40 <col:17> 'msg_t':'char' lvalue Var 0x55c1f3181d60 'm2' 'msg_t':'char'
|     | | `-BinaryOperator 0x55c1f3183080 <line:152:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55c1f3183008 <col:5> '_Bool' lvalue Var 0x55c1f317f758 'mode2' '_Bool'
|     | |   `-CStyleCastExpr 0x55c1f3183058 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55c1f3183028 <col:20> 'int' 0
|     | `-CompoundStmt 0x55c1f31838b0 <line:153:10, line:161:3>
|     |   |-IfStmt 0x55c1f31837f0 <line:154:5, line:159:5> has_else
|     |   | |-ImplicitCastExpr 0x55c1f31830f0 <line:154:9> '_Bool' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55c1f31830d0 <col:9> '_Bool' lvalue Var 0x55c1f317f7d0 'alive2' '_Bool'
|     |   | |-CompoundStmt 0x55c1f31833d0 <col:17, line:156:5>
|     |   | | `-BinaryOperator 0x55c1f31833b0 <line:155:7, col:60> 'char' '='
|     |   | |   |-DeclRefExpr 0x55c1f3183108 <col:7> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|     |   | |   `-ImplicitCastExpr 0x55c1f3183398 <col:16, col:60> 'char' <IntegralCast>
|     |   | |     `-ConditionalOperator 0x55c1f3183368 <col:16, col:60> 'int'
|     |   | |       |-BinaryOperator 0x55c1f31832a8 <col:16, col:44> 'int' '&&'
|     |   | |       | |-BinaryOperator 0x55c1f31831c8 <col:16, col:25> 'int' '!='
|     |   | |       | | |-ImplicitCastExpr 0x55c1f3183198 <col:16> 'int' <IntegralCast>
|     |   | |       | | | `-ImplicitCastExpr 0x55c1f3183168 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   | |       | | |   `-DeclRefExpr 0x55c1f3183128 <col:16> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|     |   | |       | | `-ImplicitCastExpr 0x55c1f31831b0 <col:25> 'int' <IntegralCast>
|     |   | |       | |   `-ImplicitCastExpr 0x55c1f3183180 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   | |       | |     `-DeclRefExpr 0x55c1f3183148 <col:25> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   | |       | `-BinaryOperator 0x55c1f3183288 <col:34, col:44> 'int' '=='
|     |   | |       |   |-ImplicitCastExpr 0x55c1f3183258 <col:34> 'int' <IntegralCast>
|     |   | |       |   | `-ImplicitCastExpr 0x55c1f3183228 <col:34> 'char' <LValueToRValue>
|     |   | |       |   |   `-DeclRefExpr 0x55c1f31831e8 <col:34> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|     |   | |       |   `-ImplicitCastExpr 0x55c1f3183270 <col:44> 'int' <IntegralCast>
|     |   | |       |     `-ImplicitCastExpr 0x55c1f3183240 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   | |       |       `-DeclRefExpr 0x55c1f3183208 <col:44> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   | |       |-ImplicitCastExpr 0x55c1f3183320 <col:52> 'int' <IntegralCast>
|     |   | |       | `-ImplicitCastExpr 0x55c1f3183308 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   | |       |   `-DeclRefExpr 0x55c1f31832c8 <col:52> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|     |   | |       `-ImplicitCastExpr 0x55c1f3183350 <col:60> 'int' <IntegralCast>
|     |   | |         `-ImplicitCastExpr 0x55c1f3183338 <col:60> 'char' <LValueToRValue>
|     |   | |           `-DeclRefExpr 0x55c1f31832e8 <col:60> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|     |   | `-IfStmt 0x55c1f31837d8 <line:157:5, line:159:5>
|     |   |   |-BinaryOperator 0x55c1f31834d8 <line:157:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55c1f3183438 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55c1f3183420 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55c1f31833e8 <col:15> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|     |   |   | `-CStyleCastExpr 0x55c1f31834b0 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55c1f3183498 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55c1f3183460 <col:30> 'char' lvalue Var 0x55c1f317f5f0 'id2' 'char'
|     |   |   `-CompoundStmt 0x55c1f31837c0 <col:35, line:159:5>
|     |   |     `-BinaryOperator 0x55c1f31837a0 <line:158:7, col:60> 'char' '='
|     |   |       |-DeclRefExpr 0x55c1f31834f8 <col:7> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|     |   |       `-ImplicitCastExpr 0x55c1f3183788 <col:16, col:60> 'char' <IntegralCast>
|     |   |         `-ConditionalOperator 0x55c1f3183758 <col:16, col:60> 'int'
|     |   |           |-BinaryOperator 0x55c1f3183698 <col:16, col:44> 'int' '&&'
|     |   |           | |-BinaryOperator 0x55c1f31835b8 <col:16, col:25> 'int' '!='
|     |   |           | | |-ImplicitCastExpr 0x55c1f3183588 <col:16> 'int' <IntegralCast>
|     |   |           | | | `-ImplicitCastExpr 0x55c1f3183558 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |           | | |   `-DeclRefExpr 0x55c1f3183518 <col:16> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|     |   |           | | `-ImplicitCastExpr 0x55c1f31835a0 <col:25> 'int' <IntegralCast>
|     |   |           | |   `-ImplicitCastExpr 0x55c1f3183570 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |           | |     `-DeclRefExpr 0x55c1f3183538 <col:25> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   |           | `-BinaryOperator 0x55c1f3183678 <col:34, col:44> 'int' '=='
|     |   |           |   |-ImplicitCastExpr 0x55c1f3183648 <col:34> 'int' <IntegralCast>
|     |   |           |   | `-ImplicitCastExpr 0x55c1f3183618 <col:34> 'char' <LValueToRValue>
|     |   |           |   |   `-DeclRefExpr 0x55c1f31835d8 <col:34> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|     |   |           |   `-ImplicitCastExpr 0x55c1f3183660 <col:44> 'int' <IntegralCast>
|     |   |           |     `-ImplicitCastExpr 0x55c1f3183630 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |           |       `-DeclRefExpr 0x55c1f31835f8 <col:44> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   |           |-ImplicitCastExpr 0x55c1f3183710 <col:52> 'int' <IntegralCast>
|     |   |           | `-ImplicitCastExpr 0x55c1f31836f8 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |           |   `-DeclRefExpr 0x55c1f31836b8 <col:52> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|     |   |           `-ImplicitCastExpr 0x55c1f3183740 <col:60> 'int' <IntegralCast>
|     |   |             `-ImplicitCastExpr 0x55c1f3183728 <col:60> 'char' <LValueToRValue>
|     |   |               `-DeclRefExpr 0x55c1f31836d8 <col:60> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|     |   `-BinaryOperator 0x55c1f3183890 <line:160:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55c1f3183818 <col:5> '_Bool' lvalue Var 0x55c1f317f758 'mode2' '_Bool'
|     |     `-CStyleCastExpr 0x55c1f3183868 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55c1f3183838 <col:20> 'int' 1
|     `-ReturnStmt 0x55c1f31838f8 <line:162:3>
|-FunctionDecl 0x55c1f3183a30 <line:165:1, line:198:1> line:165:6 used node3 'void (void)'
| `-CompoundStmt 0x55c1f3184c30 <line:166:1, line:198:1>
|   |-DeclStmt 0x55c1f3183b48 <line:167:3, col:12>
|   | `-VarDecl 0x55c1f3183ae0 <col:3, col:9> col:9 used m3 'msg_t':'char'
|   `-CompoundStmt 0x55c1f3184c08 <line:169:3, line:197:1>
|     |-BinaryOperator 0x55c1f3183bb8 <line:170:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55c1f3183b60 <col:3> 'msg_t':'char' lvalue Var 0x55c1f3183ae0 'm3' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55c1f3183ba0 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c1f3183b80 <col:8> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55c1f3184bd0 <line:171:3, line:195:3> has_else
|     | |-ImplicitCastExpr 0x55c1f3183bf8 <line:171:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55c1f3183bd8 <col:7> '_Bool' lvalue Var 0x55c1f317fb18 'mode3' '_Bool'
|     | |-CompoundStmt 0x55c1f3184380 <col:14, line:187:3>
|     | | |-BinaryOperator 0x55c1f3183c68 <line:172:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55c1f3183c10 <col:5> 'msg_t':'char' lvalue Var 0x55c1f3183ae0 'm3' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55c1f3183c50 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55c1f3183c30 <col:10> 'char' lvalue Var 0x55c1f317f500 'p2_old' 'char'
|     | | |-BinaryOperator 0x55c1f3183ce0 <line:173:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55c1f3183c88 <col:5> 'char' lvalue Var 0x55c1f317f500 'p2_old' 'char'
|     | | | `-ImplicitCastExpr 0x55c1f3183cc8 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55c1f3183ca8 <col:14> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55c1f31842d0 <line:174:5, line:185:5>
|     | | | |-BinaryOperator 0x55c1f3183df0 <line:174:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55c1f3183d50 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55c1f3183d38 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55c1f3183d00 <col:15> 'msg_t':'char' lvalue Var 0x55c1f3183ae0 'm3' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55c1f3183dc8 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55c1f3183db0 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55c1f3183d78 <col:27> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55c1f31842b8 <col:34, line:185:5>
|     | | |   `-IfStmt 0x55c1f3184290 <line:175:7, line:184:7> has_else
|     | | |     |-ImplicitCastExpr 0x55c1f3183e30 <line:175:11> '_Bool' <LValueToRValue>
|     | | |     | `-DeclRefExpr 0x55c1f3183e10 <col:11> '_Bool' lvalue Var 0x55c1f317fb90 'alive3' '_Bool'
|     | | |     |-CompoundStmt 0x55c1f31841e8 <col:19, line:182:7>
|     | | |     | `-IfStmt 0x55c1f31841c0 <line:176:9, line:181:9> has_else
|     | | |     |   |-BinaryOperator 0x55c1f3183f38 <line:176:13, col:30> 'int' '>'
|     | | |     |   | |-CStyleCastExpr 0x55c1f3183e98 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |   | | `-ImplicitCastExpr 0x55c1f3183e80 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   | |   `-DeclRefExpr 0x55c1f3183e48 <col:19> 'msg_t':'char' lvalue Var 0x55c1f3183ae0 'm3' 'msg_t':'char'
|     | | |     |   | `-CStyleCastExpr 0x55c1f3183f10 <col:24, col:30> 'int' <IntegralCast>
|     | | |     |   |   `-ImplicitCastExpr 0x55c1f3183ef8 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   |     `-DeclRefExpr 0x55c1f3183ec0 <col:30> 'char' lvalue Var 0x55c1f317f9b0 'id3' 'char'
|     | | |     |   |-CompoundStmt 0x55c1f3183fd0 <col:35, line:178:9>
|     | | |     |   | `-BinaryOperator 0x55c1f3183fb0 <line:177:11, col:19> 'msg_t':'char' '='
|     | | |     |   |   |-DeclRefExpr 0x55c1f3183f58 <col:11> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|     | | |     |   |   `-ImplicitCastExpr 0x55c1f3183f98 <col:19> 'msg_t':'char' <LValueToRValue>
|     | | |     |   |     `-DeclRefExpr 0x55c1f3183f78 <col:19> 'msg_t':'char' lvalue Var 0x55c1f3183ae0 'm3' 'msg_t':'char'
|     | | |     |   `-IfStmt 0x55c1f31841a8 <line:179:9, line:181:9>
|     | | |     |     |-BinaryOperator 0x55c1f31840d8 <line:179:13, col:31> 'int' '=='
|     | | |     |     | |-CStyleCastExpr 0x55c1f3184038 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |     | | `-ImplicitCastExpr 0x55c1f3184020 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     | |   `-DeclRefExpr 0x55c1f3183fe8 <col:19> 'msg_t':'char' lvalue Var 0x55c1f3183ae0 'm3' 'msg_t':'char'
|     | | |     |     | `-CStyleCastExpr 0x55c1f31840b0 <col:25, col:31> 'int' <IntegralCast>
|     | | |     |     |   `-ImplicitCastExpr 0x55c1f3184098 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     |     `-DeclRefExpr 0x55c1f3184060 <col:31> 'char' lvalue Var 0x55c1f317f9b0 'id3' 'char'
|     | | |     |     `-CompoundStmt 0x55c1f3184190 <col:36, line:181:9>
|     | | |     |       `-BinaryOperator 0x55c1f3184170 <line:180:11, col:23> 'char' '='
|     | | |     |         |-DeclRefExpr 0x55c1f31840f8 <col:11> 'char' lvalue Var 0x55c1f317fa28 'st3' 'char'
|     | | |     |         `-CStyleCastExpr 0x55c1f3184148 <col:17, col:23> 'char' <IntegralCast>
|     | | |     |           `-IntegerLiteral 0x55c1f3184118 <col:23> 'int' 1
|     | | |     `-CompoundStmt 0x55c1f3184278 <line:182:14, line:184:7>
|     | | |       `-BinaryOperator 0x55c1f3184258 <line:183:9, col:17> 'msg_t':'char' '='
|     | | |         |-DeclRefExpr 0x55c1f3184200 <col:9> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|     | | |         `-ImplicitCastExpr 0x55c1f3184240 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |           `-DeclRefExpr 0x55c1f3184220 <col:17> 'msg_t':'char' lvalue Var 0x55c1f3183ae0 'm3' 'msg_t':'char'
|     | | `-BinaryOperator 0x55c1f3184360 <line:186:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55c1f31842e8 <col:5> '_Bool' lvalue Var 0x55c1f317fb18 'mode3' '_Bool'
|     | |   `-CStyleCastExpr 0x55c1f3184338 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55c1f3184308 <col:20> 'int' 0
|     | `-CompoundStmt 0x55c1f3184bb0 <line:187:10, line:195:3>
|     |   |-IfStmt 0x55c1f3184af0 <line:188:5, line:193:5> has_else
|     |   | |-ImplicitCastExpr 0x55c1f31843d0 <line:188:9> '_Bool' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55c1f31843b0 <col:9> '_Bool' lvalue Var 0x55c1f317fb90 'alive3' '_Bool'
|     |   | |-CompoundStmt 0x55c1f31846b0 <col:17, line:190:5>
|     |   | | `-BinaryOperator 0x55c1f3184690 <line:189:7, col:60> 'char' '='
|     |   | |   |-DeclRefExpr 0x55c1f31843e8 <col:7> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|     |   | |   `-ImplicitCastExpr 0x55c1f3184678 <col:16, col:60> 'char' <IntegralCast>
|     |   | |     `-ConditionalOperator 0x55c1f3184648 <col:16, col:60> 'int'
|     |   | |       |-BinaryOperator 0x55c1f3184588 <col:16, col:44> 'int' '&&'
|     |   | |       | |-BinaryOperator 0x55c1f31844a8 <col:16, col:25> 'int' '!='
|     |   | |       | | |-ImplicitCastExpr 0x55c1f3184478 <col:16> 'int' <IntegralCast>
|     |   | |       | | | `-ImplicitCastExpr 0x55c1f3184448 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   | |       | | |   `-DeclRefExpr 0x55c1f3184408 <col:16> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|     |   | |       | | `-ImplicitCastExpr 0x55c1f3184490 <col:25> 'int' <IntegralCast>
|     |   | |       | |   `-ImplicitCastExpr 0x55c1f3184460 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   | |       | |     `-DeclRefExpr 0x55c1f3184428 <col:25> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   | |       | `-BinaryOperator 0x55c1f3184568 <col:34, col:44> 'int' '=='
|     |   | |       |   |-ImplicitCastExpr 0x55c1f3184538 <col:34> 'int' <IntegralCast>
|     |   | |       |   | `-ImplicitCastExpr 0x55c1f3184508 <col:34> 'char' <LValueToRValue>
|     |   | |       |   |   `-DeclRefExpr 0x55c1f31844c8 <col:34> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|     |   | |       |   `-ImplicitCastExpr 0x55c1f3184550 <col:44> 'int' <IntegralCast>
|     |   | |       |     `-ImplicitCastExpr 0x55c1f3184520 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   | |       |       `-DeclRefExpr 0x55c1f31844e8 <col:44> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   | |       |-ImplicitCastExpr 0x55c1f3184600 <col:52> 'int' <IntegralCast>
|     |   | |       | `-ImplicitCastExpr 0x55c1f31845e8 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   | |       |   `-DeclRefExpr 0x55c1f31845a8 <col:52> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|     |   | |       `-ImplicitCastExpr 0x55c1f3184630 <col:60> 'int' <IntegralCast>
|     |   | |         `-ImplicitCastExpr 0x55c1f3184618 <col:60> 'char' <LValueToRValue>
|     |   | |           `-DeclRefExpr 0x55c1f31845c8 <col:60> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|     |   | `-IfStmt 0x55c1f3184ad8 <line:191:5, line:193:5>
|     |   |   |-BinaryOperator 0x55c1f31847b8 <line:191:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55c1f3184718 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55c1f3184700 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55c1f31846c8 <col:15> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|     |   |   | `-CStyleCastExpr 0x55c1f3184790 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55c1f3184778 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55c1f3184740 <col:30> 'char' lvalue Var 0x55c1f317f9b0 'id3' 'char'
|     |   |   `-CompoundStmt 0x55c1f3184ac0 <col:35, line:193:5>
|     |   |     `-BinaryOperator 0x55c1f3184aa0 <line:192:7, col:60> 'char' '='
|     |   |       |-DeclRefExpr 0x55c1f31847d8 <col:7> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|     |   |       `-ImplicitCastExpr 0x55c1f3184a88 <col:16, col:60> 'char' <IntegralCast>
|     |   |         `-ConditionalOperator 0x55c1f3184a58 <col:16, col:60> 'int'
|     |   |           |-BinaryOperator 0x55c1f3184978 <col:16, col:44> 'int' '&&'
|     |   |           | |-BinaryOperator 0x55c1f3184898 <col:16, col:25> 'int' '!='
|     |   |           | | |-ImplicitCastExpr 0x55c1f3184868 <col:16> 'int' <IntegralCast>
|     |   |           | | | `-ImplicitCastExpr 0x55c1f3184838 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |           | | |   `-DeclRefExpr 0x55c1f31847f8 <col:16> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|     |   |           | | `-ImplicitCastExpr 0x55c1f3184880 <col:25> 'int' <IntegralCast>
|     |   |           | |   `-ImplicitCastExpr 0x55c1f3184850 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |           | |     `-DeclRefExpr 0x55c1f3184818 <col:25> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   |           | `-BinaryOperator 0x55c1f3184958 <col:34, col:44> 'int' '=='
|     |   |           |   |-ImplicitCastExpr 0x55c1f3184928 <col:34> 'int' <IntegralCast>
|     |   |           |   | `-ImplicitCastExpr 0x55c1f31848f8 <col:34> 'char' <LValueToRValue>
|     |   |           |   |   `-DeclRefExpr 0x55c1f31848b8 <col:34> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|     |   |           |   `-ImplicitCastExpr 0x55c1f3184940 <col:44> 'int' <IntegralCast>
|     |   |           |     `-ImplicitCastExpr 0x55c1f3184910 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |           |       `-DeclRefExpr 0x55c1f31848d8 <col:44> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|     |   |           |-ImplicitCastExpr 0x55c1f31849f0 <col:52> 'int' <IntegralCast>
|     |   |           | `-ImplicitCastExpr 0x55c1f31849d8 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |           |   `-DeclRefExpr 0x55c1f3184998 <col:52> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|     |   |           `-ImplicitCastExpr 0x55c1f3184a40 <col:60> 'int' <IntegralCast>
|     |   |             `-ImplicitCastExpr 0x55c1f3184a08 <col:60> 'char' <LValueToRValue>
|     |   |               `-DeclRefExpr 0x55c1f31849b8 <col:60> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|     |   `-BinaryOperator 0x55c1f3184b90 <line:194:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55c1f3184b18 <col:5> '_Bool' lvalue Var 0x55c1f317fb18 'mode3' '_Bool'
|     |     `-CStyleCastExpr 0x55c1f3184b68 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55c1f3184b38 <col:20> 'int' 1
|     `-ReturnStmt 0x55c1f3184bf8 <line:196:3>
|-VarDecl 0x55c1f3184e60 <line:199:1, col:69> col:8 nodes 'void (*[3])(void)' cinit
| `-InitListExpr 0x55c1f3184fd8 <col:27, col:69> 'void (*[3])(void)'
|   |-UnaryOperator 0x55c1f3184ee8 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55c1f3184ec8 <col:36> 'void (void)' Function 0x55c1f317fcc0 'node1' 'void (void)'
|   |-UnaryOperator 0x55c1f3184f20 <col:48, col:50> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55c1f3184f00 <col:50> 'void (void)' Function 0x55c1f3181cb0 'node2' 'void (void)'
|   `-UnaryOperator 0x55c1f3184f58 <col:62, col:64> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x55c1f3184f38 <col:64> 'void (void)' Function 0x55c1f3183a30 'node3' 'void (void)'
|-FunctionDecl 0x55c1f3185108 <line:200:1, line:276:1> line:200:5 used init 'int (void)'
| `-CompoundStmt 0x55c1f3189950 <line:201:1, line:276:1>
|   |-DeclStmt 0x55c1f3185228 <line:202:3, col:11>
|   | `-VarDecl 0x55c1f31851c0 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x55c1f3189930 <line:204:3, line:275:1>
|     |-IfStmt 0x55c1f31898a0 <line:205:3, line:273:3> has_else
|     | |-BinaryOperator 0x55c1f31852d8 <line:205:7, col:19> 'int' '=='
|     | | |-CStyleCastExpr 0x55c1f3185290 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55c1f3185278 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55c1f3185240 <col:13> 'unsigned char' lvalue Var 0x55c1f317f050 'r1' 'unsigned char'
|     | | `-IntegerLiteral 0x55c1f31852b8 <col:19> 'int' 0
|     | |-CompoundStmt 0x55c1f3189810 <col:22, line:271:3>
|     | | `-IfStmt 0x55c1f31897e8 <line:206:5, line:270:5> has_else
|     | |   |-BinaryOperator 0x55c1f31854e0 <line:206:9, col:57> 'int' '>='
|     | |   | |-BinaryOperator 0x55c1f31854a0 <col:9, col:47> 'int' '+'
|     | |   | | |-ParenExpr 0x55c1f3185408 <col:9, col:37> 'int'
|     | |   | | | `-BinaryOperator 0x55c1f31853e8 <col:10, col:31> 'int' '+'
|     | |   | | |   |-CStyleCastExpr 0x55c1f3185348 <col:10, col:16> 'int' <IntegralCast>
|     | |   | | |   | `-ImplicitCastExpr 0x55c1f3185330 <col:16> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   | | |   |   `-DeclRefExpr 0x55c1f31852f8 <col:16> '_Bool' lvalue Var 0x55c1f317f410 'alive1' '_Bool'
|     | |   | | |   `-CStyleCastExpr 0x55c1f31853c0 <col:25, col:31> 'int' <IntegralCast>
|     | |   | | |     `-ImplicitCastExpr 0x55c1f31853a8 <col:31> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   | | |       `-DeclRefExpr 0x55c1f3185370 <col:31> '_Bool' lvalue Var 0x55c1f317f7d0 'alive2' '_Bool'
|     | |   | | `-CStyleCastExpr 0x55c1f3185478 <col:41, col:47> 'int' <IntegralCast>
|     | |   | |   `-ImplicitCastExpr 0x55c1f3185460 <col:47> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   | |     `-DeclRefExpr 0x55c1f3185428 <col:47> '_Bool' lvalue Var 0x55c1f317fb90 'alive3' '_Bool'
|     | |   | `-IntegerLiteral 0x55c1f31854c0 <col:57> 'int' 1
|     | |   |-CompoundStmt 0x55c1f3189758 <col:60, line:268:5>
|     | |   | `-IfStmt 0x55c1f3189730 <line:207:7, line:267:7> has_else
|     | |   |   |-BinaryOperator 0x55c1f3185598 <line:207:11, col:24> 'int' '>='
|     | |   |   | |-CStyleCastExpr 0x55c1f3185550 <col:11, col:17> 'int' <IntegralCast>
|     | |   |   | | `-ImplicitCastExpr 0x55c1f3185538 <col:17> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   | |   `-DeclRefExpr 0x55c1f3185500 <col:17> 'char' lvalue Var 0x55c1f317f230 'id1' 'char'
|     | |   |   | `-IntegerLiteral 0x55c1f3185578 <col:24> 'int' 0
|     | |   |   |-CompoundStmt 0x55c1f31896a0 <col:27, line:265:7>
|     | |   |   | `-IfStmt 0x55c1f3189678 <line:208:9, line:264:9> has_else
|     | |   |   |   |-BinaryOperator 0x55c1f3185650 <line:208:13, col:26> 'int' '=='
|     | |   |   |   | |-CStyleCastExpr 0x55c1f3185608 <col:13, col:19> 'int' <IntegralCast>
|     | |   |   |   | | `-ImplicitCastExpr 0x55c1f31855f0 <col:19> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   | |   `-DeclRefExpr 0x55c1f31855b8 <col:19> 'char' lvalue Var 0x55c1f317f2a8 'st1' 'char'
|     | |   |   |   | `-IntegerLiteral 0x55c1f3185630 <col:26> 'int' 0
|     | |   |   |   |-CompoundStmt 0x55c1f31895e8 <col:29, line:262:9>
|     | |   |   |   | `-IfStmt 0x55c1f31895c0 <line:209:11, line:261:11> has_else
|     | |   |   |   |   |-BinaryOperator 0x55c1f3185760 <line:209:15, col:36> 'int' '=='
|     | |   |   |   |   | |-CStyleCastExpr 0x55c1f31856c0 <col:15, col:21> 'int' <IntegralCast>
|     | |   |   |   |   | | `-ImplicitCastExpr 0x55c1f31856a8 <col:21> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   | |   `-DeclRefExpr 0x55c1f3185670 <col:21> 'msg_t':'char' lvalue Var 0x55c1f317f320 'send1' 'msg_t':'char'
|     | |   |   |   |   | `-CStyleCastExpr 0x55c1f3185738 <col:30, col:36> 'int' <IntegralCast>
|     | |   |   |   |   |   `-ImplicitCastExpr 0x55c1f3185720 <col:36> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |     `-DeclRefExpr 0x55c1f31856e8 <col:36> 'char' lvalue Var 0x55c1f317f230 'id1' 'char'
|     | |   |   |   |   |-CompoundStmt 0x55c1f3189530 <col:41, line:259:11>
|     | |   |   |   |   | `-IfStmt 0x55c1f3189508 <line:210:13, line:258:13> has_else
|     | |   |   |   |   |   |-BinaryOperator 0x55c1f3185818 <line:210:17, col:32> 'int' '=='
|     | |   |   |   |   |   | |-CStyleCastExpr 0x55c1f31857d0 <col:17, col:23> 'int' <IntegralCast>
|     | |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f31857b8 <col:23> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f3185780 <col:23> '_Bool' lvalue Var 0x55c1f317f398 'mode1' '_Bool'
|     | |   |   |   |   |   | `-IntegerLiteral 0x55c1f31857f8 <col:32> 'int' 0
|     | |   |   |   |   |   |-CompoundStmt 0x55c1f31876a0 <col:35, line:256:13>
|     | |   |   |   |   |   | `-IfStmt 0x55c1f3187678 <line:211:15, line:255:15> has_else
|     | |   |   |   |   |   |   |-BinaryOperator 0x55c1f31858d0 <line:211:19, col:32> 'int' '>='
|     | |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f3185888 <col:19, col:25> 'int' <IntegralCast>
|     | |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3185870 <col:25> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f3185838 <col:25> 'char' lvalue Var 0x55c1f317f5f0 'id2' 'char'
|     | |   |   |   |   |   |   | `-IntegerLiteral 0x55c1f31858b0 <col:32> 'int' 0
|     | |   |   |   |   |   |   |-CompoundStmt 0x55c1f31875e8 <col:35, line:253:15>
|     | |   |   |   |   |   |   | `-IfStmt 0x55c1f31875c0 <line:212:17, line:252:17> has_else
|     | |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3185988 <line:212:21, col:34> 'int' '=='
|     | |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f3185940 <col:21, col:27> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3185928 <col:27> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f31858f0 <col:27> 'char' lvalue Var 0x55c1f317f668 'st2' 'char'
|     | |   |   |   |   |   |   |   | `-IntegerLiteral 0x55c1f3185968 <col:34> 'int' 0
|     | |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f3187530 <col:37, line:250:17>
|     | |   |   |   |   |   |   |   | `-IfStmt 0x55c1f3187508 <line:213:19, line:249:19> has_else
|     | |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3186718 <line:213:23, col:44> 'int' '=='
|     | |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f31859f8 <col:23, col:29> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f31859e0 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f31859a8 <col:29> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55c1f31866f0 <col:38, col:44> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55c1f31866d8 <col:44> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55c1f3185a20 <col:44> 'char' lvalue Var 0x55c1f317f5f0 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f3187478 <col:49, line:247:19>
|     | |   |   |   |   |   |   |   |   | `-IfStmt 0x55c1f3187450 <line:214:21, line:246:21> has_else
|     | |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f31867d0 <line:214:25, col:40> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f3186788 <col:25, col:31> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3186770 <col:31> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f3186738 <col:31> '_Bool' lvalue Var 0x55c1f317f758 'mode2' '_Bool'
|     | |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55c1f31867b0 <col:40> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f31873c0 <col:43, line:244:21>
|     | |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55c1f3187398 <line:215:23, line:243:23> has_else
|     | |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3186888 <line:215:27, col:40> 'int' '>='
|     | |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f3186840 <col:27, col:33> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3186828 <col:33> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f31867f0 <col:33> 'char' lvalue Var 0x55c1f317f9b0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55c1f3186868 <col:40> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f3187308 <col:43, line:241:23>
|     | |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55c1f31872e0 <line:216:25, line:240:25> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3186940 <line:216:29, col:42> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f31868f8 <col:29, col:35> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f31868e0 <col:35> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f31868a8 <col:35> 'char' lvalue Var 0x55c1f317fa28 'st3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55c1f3186920 <col:42> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f3187250 <col:45, line:238:25>
|     | |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55c1f3187228 <line:217:27, line:237:27> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3186a50 <line:217:31, col:52> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f31869b0 <col:31, col:37> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3186998 <col:37> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f3186960 <col:37> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55c1f3186a28 <col:46, col:52> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55c1f3186a10 <col:52> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55c1f31869d8 <col:52> 'char' lvalue Var 0x55c1f317f9b0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f3187198 <col:57, line:235:27>
|     | |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55c1f3187170 <line:218:29, line:234:29> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3186b08 <line:218:33, col:48> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f3186ac0 <col:33, col:39> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3186aa8 <col:39> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f3186a70 <col:39> '_Bool' lvalue Var 0x55c1f317fb18 'mode3' '_Bool'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55c1f3186ae8 <col:48> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f31870e0 <col:51, line:232:29>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55c1f31870b8 <line:219:31, line:231:31> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3186c18 <line:219:35, col:54> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f3186b78 <col:35, col:41> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3186b60 <col:41> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f3186b28 <col:41> 'char' lvalue Var 0x55c1f317f230 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55c1f3186bf0 <col:48, col:54> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55c1f3186bd8 <col:54> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55c1f3186ba0 <col:54> 'char' lvalue Var 0x55c1f317f5f0 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f3187028 <col:59, line:229:31>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55c1f3187000 <line:220:33, line:228:33> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3186d28 <line:220:37, col:56> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f3186c88 <col:37, col:43> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3186c70 <col:43> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f3186c38 <col:43> 'char' lvalue Var 0x55c1f317f230 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55c1f3186d00 <col:50, col:56> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55c1f3186ce8 <col:56> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55c1f3186cb0 <col:56> 'char' lvalue Var 0x55c1f317f9b0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f3186f70 <col:61, line:226:33>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55c1f3186f48 <line:221:35, line:225:35> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55c1f3186e38 <line:221:39, col:58> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55c1f3186d98 <col:39, col:45> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55c1f3186d80 <col:45> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55c1f3186d48 <col:45> 'char' lvalue Var 0x55c1f317f5f0 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55c1f3186e10 <col:52, col:58> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55c1f3186df8 <col:58> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55c1f3186dc0 <col:58> 'char' lvalue Var 0x55c1f317f9b0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55c1f3186eb8 <col:63, line:223:35>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-BinaryOperator 0x55c1f3186e98 <line:222:37, col:43> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-DeclRefExpr 0x55c1f3186e58 <col:37> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-IntegerLiteral 0x55c1f3186e78 <col:43> 'int' 1
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f3186f30 <line:223:42, line:225:35>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f3186f10 <line:224:37, col:43> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f3186ed0 <col:37> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f3186ef0 <col:43> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f3186fe8 <line:226:40, line:228:33>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f3186fc8 <line:227:35, col:41> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f3186f88 <col:35> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f3186fa8 <col:41> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f31870a0 <line:229:38, line:231:31>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f3187080 <line:230:33, col:39> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f3187040 <col:33> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f3187060 <col:39> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f3187158 <line:232:36, line:234:29>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f3187138 <line:233:31, col:37> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f31870f8 <col:31> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f3187118 <col:37> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f3187210 <line:235:34, line:237:27>
|     | |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f31871f0 <line:236:29, col:35> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f31871b0 <col:29> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f31871d0 <col:35> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f31872c8 <line:238:32, line:240:25>
|     | |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f31872a8 <line:239:27, col:33> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f3187268 <col:27> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f3187288 <col:33> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f3187380 <line:241:30, line:243:23>
|     | |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f3187360 <line:242:25, col:31> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f3187320 <col:25> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f3187340 <col:31> 'int' 0
|     | |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f3187438 <line:244:28, line:246:21>
|     | |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f3187418 <line:245:23, col:29> 'int' '='
|     | |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f31873d8 <col:23> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f31873f8 <col:29> 'int' 0
|     | |   |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f31874f0 <line:247:26, line:249:19>
|     | |   |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f31874d0 <line:248:21, col:27> 'int' '='
|     | |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f3187490 <col:21> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f31874b0 <col:27> 'int' 0
|     | |   |   |   |   |   |   |   `-CompoundStmt 0x55c1f31875a8 <line:250:24, line:252:17>
|     | |   |   |   |   |   |   |     `-BinaryOperator 0x55c1f3187588 <line:251:19, col:25> 'int' '='
|     | |   |   |   |   |   |   |       |-DeclRefExpr 0x55c1f3187548 <col:19> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |   |       `-IntegerLiteral 0x55c1f3187568 <col:25> 'int' 0
|     | |   |   |   |   |   |   `-CompoundStmt 0x55c1f3187660 <line:253:22, line:255:15>
|     | |   |   |   |   |   |     `-BinaryOperator 0x55c1f3187640 <line:254:17, col:23> 'int' '='
|     | |   |   |   |   |   |       |-DeclRefExpr 0x55c1f3187600 <col:17> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |   |       `-IntegerLiteral 0x55c1f3187620 <col:23> 'int' 0
|     | |   |   |   |   |   `-CompoundStmt 0x55c1f31894f0 <line:256:20, line:258:13>
|     | |   |   |   |   |     `-BinaryOperator 0x55c1f31894d0 <line:257:15, col:21> 'int' '='
|     | |   |   |   |   |       |-DeclRefExpr 0x55c1f3189490 <col:15> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |   |       `-IntegerLiteral 0x55c1f31894b0 <col:21> 'int' 0
|     | |   |   |   |   `-CompoundStmt 0x55c1f31895a8 <line:259:18, line:261:11>
|     | |   |   |   |     `-BinaryOperator 0x55c1f3189588 <line:260:13, col:19> 'int' '='
|     | |   |   |   |       |-DeclRefExpr 0x55c1f3189548 <col:13> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |   |       `-IntegerLiteral 0x55c1f3189568 <col:19> 'int' 0
|     | |   |   |   `-CompoundStmt 0x55c1f3189660 <line:262:16, line:264:9>
|     | |   |   |     `-BinaryOperator 0x55c1f3189640 <line:263:11, col:17> 'int' '='
|     | |   |   |       |-DeclRefExpr 0x55c1f3189600 <col:11> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |   |       `-IntegerLiteral 0x55c1f3189620 <col:17> 'int' 0
|     | |   |   `-CompoundStmt 0x55c1f3189718 <line:265:14, line:267:7>
|     | |   |     `-BinaryOperator 0x55c1f31896f8 <line:266:9, col:15> 'int' '='
|     | |   |       |-DeclRefExpr 0x55c1f31896b8 <col:9> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |   |       `-IntegerLiteral 0x55c1f31896d8 <col:15> 'int' 0
|     | |   `-CompoundStmt 0x55c1f31897d0 <line:268:12, line:270:5>
|     | |     `-BinaryOperator 0x55c1f31897b0 <line:269:7, col:13> 'int' '='
|     | |       |-DeclRefExpr 0x55c1f3189770 <col:7> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     | |       `-IntegerLiteral 0x55c1f3189790 <col:13> 'int' 0
|     | `-CompoundStmt 0x55c1f3189888 <line:271:10, line:273:3>
|     |   `-BinaryOperator 0x55c1f3189868 <line:272:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x55c1f3189828 <col:5> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|     |     `-IntegerLiteral 0x55c1f3189848 <col:11> 'int' 0
|     `-ReturnStmt 0x55c1f3189920 <line:274:3, col:14>
|       `-ImplicitCastExpr 0x55c1f3189908 <col:10, col:14> 'int' <LValueToRValue>
|         `-ParenExpr 0x55c1f31898e8 <col:10, col:14> 'int' lvalue
|           `-DeclRefExpr 0x55c1f31898c8 <col:11> 'int' lvalue Var 0x55c1f31851c0 'tmp' 'int'
|-FunctionDecl 0x55c1f3189a10 <line:277:1, line:296:1> line:277:5 used check 'int (void)'
| `-CompoundStmt 0x55c1f318a308 <line:278:1, line:296:1>
|   |-DeclStmt 0x55c1f3189b30 <line:279:3, col:11>
|   | `-VarDecl 0x55c1f3189ac8 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x55c1f318a2e8 <line:281:3, line:295:1>
|     |-IfStmt 0x55c1f318a258 <line:282:3, line:293:3> has_else
|     | |-BinaryOperator 0x55c1f3189d30 <line:282:7, col:46> 'int' '<='
|     | | |-BinaryOperator 0x55c1f3189cf0 <col:7, col:39> 'int' '+'
|     | | | |-ParenExpr 0x55c1f3189c58 <col:7, col:29> 'int'
|     | | | | `-BinaryOperator 0x55c1f3189c38 <col:8, col:26> 'int' '+'
|     | | | |   |-CStyleCastExpr 0x55c1f3189b98 <col:8, col:14> 'int' <IntegralCast>
|     | | | |   | `-ImplicitCastExpr 0x55c1f3189b80 <col:14> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |   |   `-DeclRefExpr 0x55c1f3189b48 <col:14> 'char' lvalue Var 0x55c1f317f2a8 'st1' 'char'
|     | | | |   `-CStyleCastExpr 0x55c1f3189c10 <col:20, col:26> 'int' <IntegralCast>
|     | | | |     `-ImplicitCastExpr 0x55c1f3189bf8 <col:26> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |       `-DeclRefExpr 0x55c1f3189bc0 <col:26> 'char' lvalue Var 0x55c1f317f668 'st2' 'char'
|     | | | `-CStyleCastExpr 0x55c1f3189cc8 <col:33, col:39> 'int' <IntegralCast>
|     | | |   `-ImplicitCastExpr 0x55c1f3189cb0 <col:39> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     `-DeclRefExpr 0x55c1f3189c78 <col:39> 'char' lvalue Var 0x55c1f317fa28 'st3' 'char'
|     | | `-IntegerLiteral 0x55c1f3189d10 <col:46> 'int' 1
|     | |-CompoundStmt 0x55c1f318a1c8 <col:49, line:291:3>
|     | | `-IfStmt 0x55c1f318a1a0 <line:283:5, line:290:5> has_else
|     | |   |-BinaryOperator 0x55c1f3189de8 <line:283:9, col:20> 'int' '<'
|     | |   | |-CStyleCastExpr 0x55c1f3189da0 <col:9, col:15> 'int' <IntegralCast>
|     | |   | | `-ImplicitCastExpr 0x55c1f3189d88 <col:15> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | |   | |   `-DeclRefExpr 0x55c1f3189d50 <col:15> 'unsigned char' lvalue Var 0x55c1f317f050 'r1' 'unsigned char'
|     | |   | `-IntegerLiteral 0x55c1f3189dc8 <col:20> 'int' 3
|     | |   |-CompoundStmt 0x55c1f3189e68 <col:23, line:285:5>
|     | |   | `-BinaryOperator 0x55c1f3189e48 <line:284:7, col:13> 'int' '='
|     | |   |   |-DeclRefExpr 0x55c1f3189e08 <col:7> 'int' lvalue Var 0x55c1f3189ac8 'tmp' 'int'
|     | |   |   `-IntegerLiteral 0x55c1f3189e28 <col:13> 'int' 1
|     | |   `-IfStmt 0x55c1f318a178 <line:286:5, line:290:5> has_else
|     | |     |-BinaryOperator 0x55c1f318a068 <line:286:9, col:48> 'int' '=='
|     | |     | |-BinaryOperator 0x55c1f318a028 <col:9, col:41> 'int' '+'
|     | |     | | |-ParenExpr 0x55c1f3189f90 <col:9, col:31> 'int'
|     | |     | | | `-BinaryOperator 0x55c1f3189f70 <col:10, col:28> 'int' '+'
|     | |     | | |   |-CStyleCastExpr 0x55c1f3189ed0 <col:10, col:16> 'int' <IntegralCast>
|     | |     | | |   | `-ImplicitCastExpr 0x55c1f3189eb8 <col:16> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |   |   `-DeclRefExpr 0x55c1f3189e80 <col:16> 'char' lvalue Var 0x55c1f317f2a8 'st1' 'char'
|     | |     | | |   `-CStyleCastExpr 0x55c1f3189f48 <col:22, col:28> 'int' <IntegralCast>
|     | |     | | |     `-ImplicitCastExpr 0x55c1f3189f30 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |       `-DeclRefExpr 0x55c1f3189ef8 <col:28> 'char' lvalue Var 0x55c1f317f668 'st2' 'char'
|     | |     | | `-CStyleCastExpr 0x55c1f318a000 <col:35, col:41> 'int' <IntegralCast>
|     | |     | |   `-ImplicitCastExpr 0x55c1f3189fe8 <col:41> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | |     `-DeclRefExpr 0x55c1f3189fb0 <col:41> 'char' lvalue Var 0x55c1f317fa28 'st3' 'char'
|     | |     | `-IntegerLiteral 0x55c1f318a048 <col:48> 'int' 1
|     | |     |-CompoundStmt 0x55c1f318a0e8 <col:51, line:288:5>
|     | |     | `-BinaryOperator 0x55c1f318a0c8 <line:287:7, col:13> 'int' '='
|     | |     |   |-DeclRefExpr 0x55c1f318a088 <col:7> 'int' lvalue Var 0x55c1f3189ac8 'tmp' 'int'
|     | |     |   `-IntegerLiteral 0x55c1f318a0a8 <col:13> 'int' 1
|     | |     `-CompoundStmt 0x55c1f318a160 <line:288:12, line:290:5>
|     | |       `-BinaryOperator 0x55c1f318a140 <line:289:7, col:13> 'int' '='
|     | |         |-DeclRefExpr 0x55c1f318a100 <col:7> 'int' lvalue Var 0x55c1f3189ac8 'tmp' 'int'
|     | |         `-IntegerLiteral 0x55c1f318a120 <col:13> 'int' 0
|     | `-CompoundStmt 0x55c1f318a240 <line:291:10, line:293:3>
|     |   `-BinaryOperator 0x55c1f318a220 <line:292:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x55c1f318a1e0 <col:5> 'int' lvalue Var 0x55c1f3189ac8 'tmp' 'int'
|     |     `-IntegerLiteral 0x55c1f318a200 <col:11> 'int' 0
|     `-ReturnStmt 0x55c1f318a2d8 <line:294:3, col:14>
|       `-ImplicitCastExpr 0x55c1f318a2c0 <col:10, col:14> 'int' <LValueToRValue>
|         `-ParenExpr 0x55c1f318a2a0 <col:10, col:14> 'int' lvalue
|           `-DeclRefExpr 0x55c1f318a280 <col:11> 'int' lvalue Var 0x55c1f3189ac8 'tmp' 'int'
|-FunctionDecl 0x55c1f318a3c8 <line:297:1, line:346:1> line:297:5 main 'int (void)'
| `-CompoundStmt 0x55c1f318bc90 <line:298:1, line:346:1>
|   |-DeclStmt 0x55c1f318a550 <line:299:3, col:10>
|   | `-VarDecl 0x55c1f318a4e8 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x55c1f318a5e8 <line:300:3, col:10>
|   | `-VarDecl 0x55c1f318a580 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x55c1f318bb78 <line:302:3, line:344:1>
|   | |-BinaryOperator 0x55c1f318a640 <line:303:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55c1f318a600 <col:3> 'int' lvalue Var 0x55c1f318a4e8 'c1' 'int'
|   | | `-IntegerLiteral 0x55c1f318a620 <col:8> 'int' 0
|   | |-BinaryOperator 0x55c1f318a708 <line:304:3, col:32> 'unsigned char' '='
|   | | |-DeclRefExpr 0x55c1f318a660 <col:3> 'unsigned char' lvalue Var 0x55c1f317f050 'r1' 'unsigned char'
|   | | `-CallExpr 0x55c1f318a6e8 <col:8, col:32> 'unsigned char'
|   | |   `-ImplicitCastExpr 0x55c1f318a6d0 <col:8> 'unsigned char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318a680 <col:8> 'unsigned char (void)' Function 0x55c1f3158b08 '__VERIFIER_nondet_uchar' 'unsigned char (void)'
|   | |-BinaryOperator 0x55c1f318a7d8 <line:305:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318a728 <col:3> 'char' lvalue Var 0x55c1f317f230 'id1' 'char'
|   | | `-CallExpr 0x55c1f318a7b8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318a7a0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318a748 <col:9> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318a870 <line:306:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318a7f8 <col:3> 'char' lvalue Var 0x55c1f317f2a8 'st1' 'char'
|   | | `-CallExpr 0x55c1f318a850 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318a838 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318a818 <col:9> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318a908 <line:307:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55c1f318a890 <col:3> 'msg_t':'char' lvalue Var 0x55c1f317f320 'send1' 'msg_t':'char'
|   | | `-CallExpr 0x55c1f318a8e8 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318a8d0 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318a8b0 <col:11> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318a9d8 <line:308:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55c1f318a928 <col:3> '_Bool' lvalue Var 0x55c1f317f398 'mode1' '_Bool'
|   | | `-CallExpr 0x55c1f318a9b8 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55c1f318a9a0 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318a948 <col:11> '_Bool (void)' Function 0x55c1f3158820 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55c1f318aa70 <line:309:3, col:35> '_Bool' '='
|   | | |-DeclRefExpr 0x55c1f318a9f8 <col:3> '_Bool' lvalue Var 0x55c1f317f410 'alive1' '_Bool'
|   | | `-CallExpr 0x55c1f318aa50 <col:12, col:35> '_Bool'
|   | |   `-ImplicitCastExpr 0x55c1f318aa38 <col:12> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318aa18 <col:12> '_Bool (void)' Function 0x55c1f3158820 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55c1f318ab08 <line:310:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318aa90 <col:3> 'char' lvalue Var 0x55c1f317f5f0 'id2' 'char'
|   | | `-CallExpr 0x55c1f318aae8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318aad0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318aab0 <col:9> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318aba0 <line:311:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318ab28 <col:3> 'char' lvalue Var 0x55c1f317f668 'st2' 'char'
|   | | `-CallExpr 0x55c1f318ab80 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318ab68 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318ab48 <col:9> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318ac38 <line:312:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55c1f318abc0 <col:3> 'msg_t':'char' lvalue Var 0x55c1f317f6e0 'send2' 'msg_t':'char'
|   | | `-CallExpr 0x55c1f318ac18 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318ac00 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318abe0 <col:11> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318acd0 <line:313:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55c1f318ac58 <col:3> '_Bool' lvalue Var 0x55c1f317f758 'mode2' '_Bool'
|   | | `-CallExpr 0x55c1f318acb0 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55c1f318ac98 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318ac78 <col:11> '_Bool (void)' Function 0x55c1f3158820 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55c1f318ad68 <line:314:3, col:35> '_Bool' '='
|   | | |-DeclRefExpr 0x55c1f318acf0 <col:3> '_Bool' lvalue Var 0x55c1f317f7d0 'alive2' '_Bool'
|   | | `-CallExpr 0x55c1f318ad48 <col:12, col:35> '_Bool'
|   | |   `-ImplicitCastExpr 0x55c1f318ad30 <col:12> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318ad10 <col:12> '_Bool (void)' Function 0x55c1f3158820 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55c1f318ae00 <line:315:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318ad88 <col:3> 'char' lvalue Var 0x55c1f317f9b0 'id3' 'char'
|   | | `-CallExpr 0x55c1f318ade0 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318adc8 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318ada8 <col:9> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318ae98 <line:316:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318ae20 <col:3> 'char' lvalue Var 0x55c1f317fa28 'st3' 'char'
|   | | `-CallExpr 0x55c1f318ae78 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318ae60 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318ae40 <col:9> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318af30 <line:317:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55c1f318aeb8 <col:3> 'msg_t':'char' lvalue Var 0x55c1f317faa0 'send3' 'msg_t':'char'
|   | | `-CallExpr 0x55c1f318af10 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55c1f318aef8 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318aed8 <col:11> 'char (void)' Function 0x55c1f3158990 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55c1f318afc8 <line:318:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55c1f318af50 <col:3> '_Bool' lvalue Var 0x55c1f317fb18 'mode3' '_Bool'
|   | | `-CallExpr 0x55c1f318afa8 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55c1f318af90 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318af70 <col:11> '_Bool (void)' Function 0x55c1f3158820 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55c1f318b060 <line:319:3, col:35> '_Bool' '='
|   | | |-DeclRefExpr 0x55c1f318afe8 <col:3> '_Bool' lvalue Var 0x55c1f317fb90 'alive3' '_Bool'
|   | | `-CallExpr 0x55c1f318b040 <col:12, col:35> '_Bool'
|   | |   `-ImplicitCastExpr 0x55c1f318b028 <col:12> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318b008 <col:12> '_Bool (void)' Function 0x55c1f3158820 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55c1f318b128 <line:320:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x55c1f318b080 <col:3> 'int' lvalue Var 0x55c1f318a580 'i2' 'int'
|   | | `-CallExpr 0x55c1f318b108 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x55c1f318b0f0 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55c1f318b0a0 <col:8> 'int (void)' Function 0x55c1f3185108 'init' 'int (void)'
|   | |-CallExpr 0x55c1f318b1d8 <line:321:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x55c1f318b1c0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55c1f318b148 <col:3> 'void (int)' Function 0x55c1f3158e10 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x55c1f318b200 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55c1f318b168 <col:21> 'int' lvalue Var 0x55c1f318a580 'i2' 'int'
|   | |-BinaryOperator 0x55c1f318b270 <line:322:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318b218 <col:3> 'char' lvalue Var 0x55c1f317f140 'p1_old' 'char'
|   | | `-ImplicitCastExpr 0x55c1f318b258 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55c1f318b238 <col:12> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55c1f318b2e8 <line:323:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318b290 <col:3> 'char' lvalue Var 0x55c1f317f1b8 'p1_new' 'char'
|   | | `-ImplicitCastExpr 0x55c1f318b2d0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55c1f318b2b0 <col:12> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55c1f318b360 <line:324:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318b308 <col:3> 'char' lvalue Var 0x55c1f317f500 'p2_old' 'char'
|   | | `-ImplicitCastExpr 0x55c1f318b348 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55c1f318b328 <col:12> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55c1f318b3d8 <line:325:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318b380 <col:3> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|   | | `-ImplicitCastExpr 0x55c1f318b3c0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55c1f318b3a0 <col:12> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55c1f318b450 <line:326:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318b3f8 <col:3> 'char' lvalue Var 0x55c1f317f8c0 'p3_old' 'char'
|   | | `-ImplicitCastExpr 0x55c1f318b438 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55c1f318b418 <col:12> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55c1f318b4e8 <line:327:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55c1f318b470 <col:3> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|   | | `-ImplicitCastExpr 0x55c1f318b4d0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55c1f318b4b0 <col:12> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55c1f318b548 <line:328:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55c1f318b508 <col:3> 'int' lvalue Var 0x55c1f318a580 'i2' 'int'
|   | | `-IntegerLiteral 0x55c1f318b528 <col:8> 'int' 0
|   | `-WhileStmt 0x55c1f318bb60 <line:329:3, line:343:3>
|   |   |-IntegerLiteral 0x55c1f318b568 <line:329:10> 'int' 1
|   |   `-CompoundStmt 0x55c1f318bb48 <col:13, line:343:3>
|   |     `-CompoundStmt 0x55c1f318bae0 <line:330:5, line:342:5>
|   |       |-CallExpr 0x55c1f318b5c0 <line:331:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55c1f318b5a8 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55c1f318b588 <col:5> 'void (void)' Function 0x55c1f317fcc0 'node1' 'void (void)'
|   |       |-CallExpr 0x55c1f318b618 <line:332:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55c1f318b600 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55c1f318b5e0 <col:5> 'void (void)' Function 0x55c1f3181cb0 'node2' 'void (void)'
|   |       |-CallExpr 0x55c1f318b670 <line:333:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55c1f318b658 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55c1f318b638 <col:5> 'void (void)' Function 0x55c1f3183a30 'node3' 'void (void)'
|   |       |-BinaryOperator 0x55c1f318b6e8 <line:334:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55c1f318b690 <col:5> 'char' lvalue Var 0x55c1f317f140 'p1_old' 'char'
|   |       | `-ImplicitCastExpr 0x55c1f318b6d0 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55c1f318b6b0 <col:14> 'char' lvalue Var 0x55c1f317f1b8 'p1_new' 'char'
|   |       |-BinaryOperator 0x55c1f318b760 <line:335:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55c1f318b708 <col:5> 'char' lvalue Var 0x55c1f317f1b8 'p1_new' 'char'
|   |       | `-ImplicitCastExpr 0x55c1f318b748 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55c1f318b728 <col:14> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55c1f318b7d8 <line:336:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55c1f318b780 <col:5> 'char' lvalue Var 0x55c1f317f500 'p2_old' 'char'
|   |       | `-ImplicitCastExpr 0x55c1f318b7c0 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55c1f318b7a0 <col:14> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|   |       |-BinaryOperator 0x55c1f318b850 <line:337:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55c1f318b7f8 <col:5> 'char' lvalue Var 0x55c1f317f578 'p2_new' 'char'
|   |       | `-ImplicitCastExpr 0x55c1f318b838 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55c1f318b818 <col:14> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55c1f318b8c8 <line:338:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55c1f318b870 <col:5> 'char' lvalue Var 0x55c1f317f8c0 'p3_old' 'char'
|   |       | `-ImplicitCastExpr 0x55c1f318b8b0 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55c1f318b890 <col:14> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|   |       |-BinaryOperator 0x55c1f318b940 <line:339:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55c1f318b8e8 <col:5> 'char' lvalue Var 0x55c1f317f938 'p3_new' 'char'
|   |       | `-ImplicitCastExpr 0x55c1f318b928 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55c1f318b908 <col:14> 'msg_t':'char' lvalue Var 0x55c1f3159410 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55c1f318b9d8 <line:340:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x55c1f318b960 <col:5> 'int' lvalue Var 0x55c1f318a4e8 'c1' 'int'
|   |       | `-CallExpr 0x55c1f318b9b8 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x55c1f318b9a0 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x55c1f318b980 <col:10> 'int (void)' Function 0x55c1f3189a10 'check' 'int (void)'
|   |       `-CallExpr 0x55c1f318ba88 <line:341:5, col:14> 'void'
|   |         |-ImplicitCastExpr 0x55c1f318ba70 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x55c1f318b9f8 <col:5> 'void (_Bool)' Function 0x55c1f3158c80 'assert' 'void (_Bool)'
|   |         `-ImplicitCastExpr 0x55c1f318bac8 <col:12> '_Bool' <IntegralToBoolean>
|   |           `-ImplicitCastExpr 0x55c1f318bab0 <col:12> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55c1f318ba18 <col:12> 'int' lvalue Var 0x55c1f318a4e8 'c1' 'int'
|   `-ReturnStmt 0x55c1f318bc80 <line:345:1, col:8>
|     `-IntegerLiteral 0x55c1f318bc60 <col:8> 'int' 0
`-FunctionDecl 0x55c1f318bd60 prev 0x55c1f3158c80 <line:347:1, line:358:1> line:347:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x55c1f318bcd0 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x55c1f318bfb0 <line:348:1, line:358:1>
    `-CompoundStmt 0x55c1f318bf98 <line:351:3, line:357:1>
      `-IfStmt 0x55c1f318bf80 <line:352:3, line:356:3>
        |-UnaryOperator 0x55c1f318be40 <line:352:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x55c1f318be28 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x55c1f318be08 <col:9> '_Bool' lvalue ParmVar 0x55c1f318bcd0 'arg' '_Bool'
        `-CompoundStmt 0x55c1f318bf68 <col:14, line:356:3>
          `-CompoundStmt 0x55c1f318bf50 <line:353:5, line:355:5>
            `-LabelStmt 0x55c1f318bf38 <line:354:5, col:29> 'ERROR'
              `-CallExpr 0x55c1f318bec8 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x55c1f318beb0 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x55c1f318be58 <col:12> 'void () __attribute__((noreturn))' Function 0x55c1f3158640 '__VERIFIER_error' 'void () __attribute__((noreturn))'
