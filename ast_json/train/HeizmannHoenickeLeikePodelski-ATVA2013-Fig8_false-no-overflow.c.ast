TranslationUnitDecl 0x5556860734b8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x555686073d78 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x555686073a50 '__int128'
|-TypedefDecl 0x555686073de8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x555686073a70 'unsigned __int128'
|-TypedefDecl 0x5556860740f0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x555686073ec0 'struct __NSConstantString_tag'
|   `-Record 0x555686073e40 '__NSConstantString_tag'
|-TypedefDecl 0x555686074198 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x555686074150 'char *'
|   `-BuiltinType 0x555686073550 'char'
|-TypedefDecl 0x5556860b3190 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x555686074430 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x555686074270 'struct __va_list_tag'
|     `-Record 0x5556860741f0 '__va_list_tag'
|-EnumDecl 0x5556860b31e8 <termination-crafted-lit/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_false-no-overflow.c:9:9, col:26> col:9
| |-EnumConstantDecl 0x5556860b32b8 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x5556860b3308 <col:22> col:22 true 'int'
|-TypedefDecl 0x5556860b33c0 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x5556860b3360 'enum bool' sugar
|   `-EnumType 0x5556860b3290 'bool'
|     `-Enum 0x5556860b31e8 ''
|-FunctionDecl 0x5556860b3508 <line:11:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x5556860b3648 <line:13:1, line:23:1> line:13:5 main 'int ()'
  `-CompoundStmt 0x5556860b3c90 <col:12, line:23:1>
    |-DeclStmt 0x5556860b3800 <line:14:5, col:13>
    | |-VarDecl 0x5556860b3700 <col:5, col:9> col:9 used x 'int'
    | `-VarDecl 0x5556860b3780 <col:5, col:12> col:12 used y 'int'
    |-BinaryOperator 0x5556860b38c8 <line:15:2, col:28> 'int' '='
    | |-DeclRefExpr 0x5556860b3818 <col:2> 'int' lvalue Var 0x5556860b3700 'x' 'int'
    | `-CallExpr 0x5556860b38a8 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x5556860b3890 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5556860b3838 <col:6> 'int (void)' Function 0x5556860b3508 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x5556860b3960 <line:16:2, col:28> 'int' '='
    | |-DeclRefExpr 0x5556860b38e8 <col:2> 'int' lvalue Var 0x5556860b3780 'y' 'int'
    | `-CallExpr 0x5556860b3940 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x5556860b3928 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5556860b3908 <col:6> 'int (void)' Function 0x5556860b3508 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x5556860b3c48 <line:17:2, line:21:2>
    | |-BinaryOperator 0x5556860b3a18 <line:17:6, col:13> 'int' '>='
    | | |-BinaryOperator 0x5556860b39d8 <col:6, col:8> 'int' '*'
    | | | |-IntegerLiteral 0x5556860b3980 <col:6> 'int' 2
    | | | `-ImplicitCastExpr 0x5556860b39c0 <col:8> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x5556860b39a0 <col:8> 'int' lvalue Var 0x5556860b3780 'y' 'int'
    | | `-IntegerLiteral 0x5556860b39f8 <col:13> 'int' 1
    | `-CompoundStmt 0x5556860b3c30 <col:16, line:21:2>
    |   `-WhileStmt 0x5556860b3c18 <line:18:6, line:20:6>
    |     |-BinaryOperator 0x5556860b3a90 <line:18:13, col:18> 'int' '>='
    |     | |-ImplicitCastExpr 0x5556860b3a78 <col:13> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x5556860b3a38 <col:13> 'int' lvalue Var 0x5556860b3700 'x' 'int'
    |     | `-IntegerLiteral 0x5556860b3a58 <col:18> 'int' 0
    |     `-CompoundStmt 0x5556860b3c00 <col:21, line:20:6>
    |       `-BinaryOperator 0x5556860b3be0 <line:19:7, col:21> 'int' '='
    |         |-DeclRefExpr 0x5556860b3ab0 <col:7> 'int' lvalue Var 0x5556860b3700 'x' 'int'
    |         `-BinaryOperator 0x5556860b3bc0 <col:11, col:21> 'int' '+'
    |           |-BinaryOperator 0x5556860b3b80 <col:11, col:17> 'int' '-'
    |           | |-ImplicitCastExpr 0x5556860b3b68 <col:11> 'int' <LValueToRValue>
    |           | | `-DeclRefExpr 0x5556860b3ad0 <col:11> 'int' lvalue Var 0x5556860b3700 'x' 'int'
    |           | `-BinaryOperator 0x5556860b3b48 <col:15, col:17> 'int' '*'
    |           |   |-IntegerLiteral 0x5556860b3af0 <col:15> 'int' 2
    |           |   `-ImplicitCastExpr 0x5556860b3b30 <col:17> 'int' <LValueToRValue>
    |           |     `-DeclRefExpr 0x5556860b3b10 <col:17> 'int' lvalue Var 0x5556860b3780 'y' 'int'
    |           `-IntegerLiteral 0x5556860b3ba0 <col:21> 'int' 1
    `-ReturnStmt 0x5556860b3c80 <line:22:2, col:9>
      `-IntegerLiteral 0x5556860b3c60 <col:9> 'int' 0
