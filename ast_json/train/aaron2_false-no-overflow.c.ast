TranslationUnitDecl 0x5652d93e64d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5652d93e6d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5652d93e6a70 '__int128'
|-TypedefDecl 0x5652d93e6e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5652d93e6a90 'unsigned __int128'
|-TypedefDecl 0x5652d93e7110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5652d93e6ee0 'struct __NSConstantString_tag'
|   `-Record 0x5652d93e6e60 '__NSConstantString_tag'
|-TypedefDecl 0x5652d93e71b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5652d93e7170 'char *'
|   `-BuiltinType 0x5652d93e6570 'char'
|-TypedefDecl 0x5652d9426410 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5652d93e7450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5652d93e7290 'struct __va_list_tag'
|     `-Record 0x5652d93e7210 '__va_list_tag'
|-EnumDecl 0x5652d9426468 <termination-crafted/aaron2_false-no-overflow.c:11:9, col:26> col:9
| |-EnumConstantDecl 0x5652d9426538 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x5652d9426588 <col:22> col:22 true 'int'
|-TypedefDecl 0x5652d9426640 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x5652d94265e0 'enum bool' sugar
|   `-EnumType 0x5652d9426510 'bool'
|     `-Enum 0x5652d9426468 ''
|-FunctionDecl 0x5652d9426788 <line:13:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x5652d94268c8 <line:15:1, line:28:1> line:15:5 main 'int ()'
  `-CompoundStmt 0x5652d94271b0 <col:12, line:28:1>
    |-DeclStmt 0x5652d9426b08 <line:16:5, col:17>
    | |-VarDecl 0x5652d9426980 <col:5, col:9> col:9 used x 'int'
    | |-VarDecl 0x5652d9426a00 <col:5, col:12> col:12 used y 'int'
    | `-VarDecl 0x5652d9426a80 <col:5, col:15> col:15 used tx 'int'
    |-BinaryOperator 0x5652d9426bc8 <line:17:2, col:29> 'int' '='
    | |-DeclRefExpr 0x5652d9426b20 <col:2> 'int' lvalue Var 0x5652d9426a80 'tx' 'int'
    | `-CallExpr 0x5652d9426ba8 <col:7, col:29> 'int'
    |   `-ImplicitCastExpr 0x5652d9426b90 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5652d9426b40 <col:7> 'int (void)' Function 0x5652d9426788 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x5652d9426c60 <line:18:2, col:28> 'int' '='
    | |-DeclRefExpr 0x5652d9426be8 <col:2> 'int' lvalue Var 0x5652d9426980 'x' 'int'
    | `-CallExpr 0x5652d9426c40 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x5652d9426c28 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5652d9426c08 <col:6> 'int (void)' Function 0x5652d9426788 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x5652d9426cf8 <line:19:2, col:28> 'int' '='
    | |-DeclRefExpr 0x5652d9426c80 <col:2> 'int' lvalue Var 0x5652d9426a00 'y' 'int'
    | `-CallExpr 0x5652d9426cd8 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x5652d9426cc0 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5652d9426ca0 <col:6> 'int (void)' Function 0x5652d9426788 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x5652d9427168 <line:20:2, line:26:2>
    | |-BinaryOperator 0x5652d9426e20 <line:20:9, col:25> 'int' '&&'
    | | |-BinaryOperator 0x5652d9426d88 <col:9, col:14> 'int' '>='
    | | | |-ImplicitCastExpr 0x5652d9426d58 <col:9> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x5652d9426d18 <col:9> 'int' lvalue Var 0x5652d9426980 'x' 'int'
    | | | `-ImplicitCastExpr 0x5652d9426d70 <col:14> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x5652d9426d38 <col:14> 'int' lvalue Var 0x5652d9426a00 'y' 'int'
    | | `-BinaryOperator 0x5652d9426e00 <col:19, col:25> 'int' '>='
    | |   |-ImplicitCastExpr 0x5652d9426de8 <col:19> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x5652d9426da8 <col:19> 'int' lvalue Var 0x5652d9426a80 'tx' 'int'
    | |   `-IntegerLiteral 0x5652d9426dc8 <col:25> 'int' 0
    | `-CompoundStmt 0x5652d9427150 <col:28, line:26:2>
    |   `-IfStmt 0x5652d9427128 <line:21:3, line:25:3> has_else
    |     |-BinaryOperator 0x5652d9426eb8 <line:21:7, col:34> 'int' '!='
    |     | |-CallExpr 0x5652d9426e78 <col:7, col:29> 'int'
    |     | | `-ImplicitCastExpr 0x5652d9426e60 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
    |     | |   `-DeclRefExpr 0x5652d9426e40 <col:7> 'int (void)' Function 0x5652d9426788 '__VERIFIER_nondet_int' 'int (void)'
    |     | `-IntegerLiteral 0x5652d9426e98 <col:34> 'int' 0
    |     |-CompoundStmt 0x5652d9426fe8 <col:37, line:23:3>
    |     | `-BinaryOperator 0x5652d9426fc8 <line:22:4, col:16> 'int' '='
    |     |   |-DeclRefExpr 0x5652d9426ed8 <col:4> 'int' lvalue Var 0x5652d9426980 'x' 'int'
    |     |   `-BinaryOperator 0x5652d9426fa8 <col:8, col:16> 'int' '-'
    |     |     |-BinaryOperator 0x5652d9426f50 <col:8, col:12> 'int' '-'
    |     |     | |-ImplicitCastExpr 0x5652d9426f38 <col:8> 'int' <LValueToRValue>
    |     |     | | `-DeclRefExpr 0x5652d9426ef8 <col:8> 'int' lvalue Var 0x5652d9426980 'x' 'int'
    |     |     | `-IntegerLiteral 0x5652d9426f18 <col:12> 'int' 1
    |     |     `-ImplicitCastExpr 0x5652d9426f90 <col:16> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x5652d9426f70 <col:16> 'int' lvalue Var 0x5652d9426a80 'tx' 'int'
    |     `-CompoundStmt 0x5652d9427110 <line:23:10, line:25:3>
    |       `-BinaryOperator 0x5652d94270f0 <line:24:4, col:16> 'int' '='
    |         |-DeclRefExpr 0x5652d9427000 <col:4> 'int' lvalue Var 0x5652d9426a00 'y' 'int'
    |         `-BinaryOperator 0x5652d94270d0 <col:8, col:16> 'int' '+'
    |           |-BinaryOperator 0x5652d9427078 <col:8, col:12> 'int' '+'
    |           | |-ImplicitCastExpr 0x5652d9427060 <col:8> 'int' <LValueToRValue>
    |           | | `-DeclRefExpr 0x5652d9427020 <col:8> 'int' lvalue Var 0x5652d9426a00 'y' 'int'
    |           | `-IntegerLiteral 0x5652d9427040 <col:12> 'int' 1
    |           `-ImplicitCastExpr 0x5652d94270b8 <col:16> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x5652d9427098 <col:16> 'int' lvalue Var 0x5652d9426a80 'tx' 'int'
    `-ReturnStmt 0x5652d94271a0 <line:27:2, col:9>
      `-IntegerLiteral 0x5652d9427180 <col:9> 'int' 0
