TranslationUnitDecl 0x560b86142538 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x560b86142df8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x560b86142ad0 '__int128'
|-TypedefDecl 0x560b86142e68 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x560b86142af0 'unsigned __int128'
|-TypedefDecl 0x560b86143170 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x560b86142f40 'struct __NSConstantString_tag'
|   `-Record 0x560b86142ec0 '__NSConstantString_tag'
|-TypedefDecl 0x560b86143218 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x560b861431d0 'char *'
|   `-BuiltinType 0x560b861425d0 'char'
|-TypedefDecl 0x560b861825e0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x560b861434b0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x560b861432f0 'struct __va_list_tag'
|     `-Record 0x560b86143270 '__va_list_tag'
|-FunctionDecl 0x560b861826c0 <float-benchs/sqrt_biNewton_pseudoconstant_true-unreach-call.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x560b86182808 <line:6:1, col:40> col:15 used __VERIFIER_nondet_double 'double ()' extern
|-FunctionDecl 0x560b86182990 <line:7:1, col:45> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x560b861828c0 <col:31, col:35> col:35 expression 'int'
|-FunctionDecl 0x560b86182ae0 <line:8:1, col:88> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x560b86182a50 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x560b86182d30 <col:34, col:88>
|   |-IfStmt 0x560b86182d08 <col:36, col:78>
|   | |-UnaryOperator 0x560b86182be0 <col:40, col:46> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x560b86182bc8 <col:41, col:46> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x560b86182ba8 <col:41, col:46> 'int' lvalue
|   | |     `-DeclRefExpr 0x560b86182b88 <col:42> 'int' lvalue ParmVar 0x560b86182a50 'cond' 'int'
|   | `-CompoundStmt 0x560b86182cf0 <col:49, col:78>
|   |   `-LabelStmt 0x560b86182cd8 <col:51, col:75> 'ERROR'
|   |     `-CallExpr 0x560b86182c68 <col:58, col:75> 'void'
|   |       `-ImplicitCastExpr 0x560b86182c50 <col:58> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x560b86182bf8 <col:58> 'void () __attribute__((noreturn))' Function 0x560b861826c0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x560b86182d20 <col:80>
|-VarDecl 0x560b86182d68 <line:10:1, col:15> col:8 used _EPS 'double' cinit
| `-FloatingLiteral 0x560b86182dd0 <col:15> 'double' 1.000000e-06
|-FunctionDecl 0x560b86182ed8 <line:12:1, line:34:1> line:12:8 used SqrtR 'double (double)'
| |-ParmVarDecl 0x560b86182e08 <col:14, col:21> col:21 used Input 'double'
| `-CompoundStmt 0x560b861a8978 <line:13:1, line:34:1>
|   |-DeclStmt 0x560b86183230 <line:14:3, col:38>
|   | |-VarDecl 0x560b86182f98 <col:3, col:10> col:10 used xn 'double'
|   | |-VarDecl 0x560b86183018 <col:3, col:14> col:14 used xnp1 'double'
|   | |-VarDecl 0x560b86183098 <col:3, col:20> col:20 used residu 'double'
|   | |-VarDecl 0x560b86183118 <col:3, col:28> col:28 used lsup 'double'
|   | `-VarDecl 0x560b86183198 <col:3, col:34> col:34 used linf 'double'
|   |-DeclStmt 0x560b86183360 <line:15:3, col:14>
|   | |-VarDecl 0x560b86183260 <col:3, col:7> col:7 used i 'int'
|   | `-VarDecl 0x560b861832e0 <col:3, col:10> col:10 used cond 'int'
|   |-IfStmt 0x560b86183508 <line:16:3, col:45> has_else
|   | |-BinaryOperator 0x560b861833d0 <col:7, col:16> 'int' '<='
|   | | |-ImplicitCastExpr 0x560b861833b8 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x560b86183378 <col:7> 'double' lvalue ParmVar 0x560b86182e08 'Input' 'double'
|   | | `-FloatingLiteral 0x560b86183398 <col:16> 'double' 1.000000e+00
|   | |-BinaryOperator 0x560b86183430 <col:21, col:26> 'double' '='
|   | | |-DeclRefExpr 0x560b861833f0 <col:21> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   | | `-FloatingLiteral 0x560b86183410 <col:26> 'double' 1.000000e+00
|   | `-BinaryOperator 0x560b861834e8 <col:36, col:45> 'double' '='
|   |   |-DeclRefExpr 0x560b86183450 <col:36> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |   `-BinaryOperator 0x560b861834c8 <col:41, col:45> 'double' '/'
|   |     |-FloatingLiteral 0x560b86183470 <col:41> 'double' 1.000000e+00
|   |     `-ImplicitCastExpr 0x560b861834b0 <col:45> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x560b86183490 <col:45> 'double' lvalue ParmVar 0x560b86182e08 'Input' 'double'
|   |-BinaryOperator 0x560b86183588 <line:17:3, col:10> 'double' '='
|   | |-DeclRefExpr 0x560b86183530 <col:3> 'double' lvalue Var 0x560b86183018 'xnp1' 'double'
|   | `-ImplicitCastExpr 0x560b86183570 <col:10> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x560b86183550 <col:10> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |-BinaryOperator 0x560b861a7898 <line:18:3, col:29> 'double' '='
|   | |-DeclRefExpr 0x560b861835a8 <col:3> 'double' lvalue Var 0x560b86183098 'residu' 'double'
|   | `-BinaryOperator 0x560b861a7878 <col:12, col:29> 'double' '*'
|   |   |-BinaryOperator 0x560b861a77a8 <col:12, col:16> 'double' '*'
|   |   | |-FloatingLiteral 0x560b861a7750 <col:12> 'double' 2.000000e+00
|   |   | `-ImplicitCastExpr 0x560b861a7790 <col:16> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560b861a7770 <col:16> 'double' lvalue Var 0x560b86182d68 '_EPS' 'double'
|   |   `-ParenExpr 0x560b861a7858 <col:21, col:29> 'double'
|   |     `-BinaryOperator 0x560b861a7838 <col:22, col:25> 'double' '+'
|   |       |-ImplicitCastExpr 0x560b861a7808 <col:22> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560b861a77c8 <col:22> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |       `-ImplicitCastExpr 0x560b861a7820 <col:25> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x560b861a77e8 <col:25> 'double' lvalue Var 0x560b86183018 'xnp1' 'double'
|   |-BinaryOperator 0x560b861a79e0 <line:19:3, col:25> 'double' '='
|   | |-DeclRefExpr 0x560b861a78b8 <col:3> 'double' lvalue Var 0x560b86183118 'lsup' 'double'
|   | `-BinaryOperator 0x560b861a79c0 <col:10, col:25> 'double' '*'
|   |   |-ImplicitCastExpr 0x560b861a79a8 <col:10> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560b861a78d8 <col:10> 'double' lvalue Var 0x560b86182d68 '_EPS' 'double'
|   |   `-ParenExpr 0x560b861a7988 <col:17, col:25> 'double'
|   |     `-BinaryOperator 0x560b861a7968 <col:18, col:21> 'double' '+'
|   |       |-ImplicitCastExpr 0x560b861a7938 <col:18> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560b861a78f8 <col:18> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |       `-ImplicitCastExpr 0x560b861a7950 <col:21> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x560b861a7918 <col:21> 'double' lvalue Var 0x560b86183018 'xnp1' 'double'
|   |-BinaryOperator 0x560b861a7a70 <line:20:3, col:11> 'double' '='
|   | |-DeclRefExpr 0x560b861a7a00 <col:3> 'double' lvalue Var 0x560b86183198 'linf' 'double'
|   | `-UnaryOperator 0x560b861a7a58 <col:10, col:11> 'double' prefix '-'
|   |   `-ImplicitCastExpr 0x560b861a7a40 <col:11> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x560b861a7a20 <col:11> 'double' lvalue Var 0x560b86183118 'lsup' 'double'
|   |-BinaryOperator 0x560b861a7c50 <line:21:3, col:45> 'int' '='
|   | |-DeclRefExpr 0x560b861a7a90 <col:3> 'int' lvalue Var 0x560b861832e0 'cond' 'int'
|   | `-ParenExpr 0x560b861a7c30 <col:10, col:45> 'int'
|   |   `-BinaryOperator 0x560b861a7c10 <col:11, col:44> 'int' '||'
|   |     |-ParenExpr 0x560b861a7b40 <col:11, col:25> 'int'
|   |     | `-BinaryOperator 0x560b861a7b20 <col:12, col:21> 'int' '>'
|   |     |   |-ImplicitCastExpr 0x560b861a7af0 <col:12> 'double' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x560b861a7ab0 <col:12> 'double' lvalue Var 0x560b86183098 'residu' 'double'
|   |     |   `-ImplicitCastExpr 0x560b861a7b08 <col:21> 'double' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560b861a7ad0 <col:21> 'double' lvalue Var 0x560b86183118 'lsup' 'double'
|   |     `-ParenExpr 0x560b861a7bf0 <col:30, col:44> 'int'
|   |       `-BinaryOperator 0x560b861a7bd0 <col:31, col:40> 'int' '<'
|   |         |-ImplicitCastExpr 0x560b861a7ba0 <col:31> 'double' <LValueToRValue>
|   |         | `-DeclRefExpr 0x560b861a7b60 <col:31> 'double' lvalue Var 0x560b86183098 'residu' 'double'
|   |         `-ImplicitCastExpr 0x560b861a7bb8 <col:40> 'double' <LValueToRValue>
|   |           `-DeclRefExpr 0x560b861a7b80 <col:40> 'double' lvalue Var 0x560b86183198 'linf' 'double'
|   |-BinaryOperator 0x560b861a7cb0 <line:22:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560b861a7c70 <col:3> 'int' lvalue Var 0x560b86183260 'i' 'int'
|   | `-IntegerLiteral 0x560b861a7c90 <col:7> 'int' 0
|   |-WhileStmt 0x560b861a88d8 <line:23:3, line:32:3>
|   | |-ImplicitCastExpr 0x560b861a7cf0 <line:23:10> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x560b861a7cd0 <col:10> 'int' lvalue Var 0x560b861832e0 'cond' 'int'
|   | `-CompoundStmt 0x560b861a8888 <col:16, line:32:3>
|   |   |-DeclStmt 0x560b861a7eb0 <line:24:5, col:33>
|   |   | `-VarDecl 0x560b861a7d20 <col:5, col:31> col:12 used hn 'double' cinit
|   |   |   `-BinaryOperator 0x560b861a7e90 <col:17, col:31> 'double' '-'
|   |   |     |-FloatingLiteral 0x560b861a7d88 <col:17> 'double' 1.000000e+00
|   |   |     `-BinaryOperator 0x560b861a7e70 <col:22, col:31> 'double' '*'
|   |   |       |-BinaryOperator 0x560b861a7e18 <col:22, col:28> 'double' '*'
|   |   |       | |-ImplicitCastExpr 0x560b861a7de8 <col:22> 'double' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x560b861a7da8 <col:22> 'double' lvalue ParmVar 0x560b86182e08 'Input' 'double'
|   |   |       | `-ImplicitCastExpr 0x560b861a7e00 <col:28> 'double' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x560b861a7dc8 <col:28> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |   |       `-ImplicitCastExpr 0x560b861a7e58 <col:31> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x560b861a7e38 <col:31> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |   |-BinaryOperator 0x560b861a82a8 <line:25:5, col:60> 'double' '='
|   |   | |-DeclRefExpr 0x560b861a7ec8 <col:5> 'double' lvalue Var 0x560b86183018 'xnp1' 'double'
|   |   | `-BinaryOperator 0x560b861a8288 <col:12, col:60> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x560b861a8270 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x560b861a7ee8 <col:12> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |   |   `-BinaryOperator 0x560b861a8250 <col:17, col:60> 'double' '/'
|   |   |     |-BinaryOperator 0x560b861a8210 <col:17, col:56> 'double' '*'
|   |   |     | |-ImplicitCastExpr 0x560b861a81f8 <col:17> 'double' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x560b861a7f08 <col:17> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |   |     | `-ParenExpr 0x560b861a81d8 <col:22, col:56> 'double'
|   |   |     |   `-BinaryOperator 0x560b861a81b8 <col:23, col:54> 'double' '+'
|   |   |     |     |-BinaryOperator 0x560b861a8070 <col:23, col:39> 'double' '+'
|   |   |     |     | |-BinaryOperator 0x560b861a7f80 <col:23, col:27> 'double' '*'
|   |   |     |     | | |-FloatingLiteral 0x560b861a7f28 <col:23> 'double' 8.000000e+00
|   |   |     |     | | `-ImplicitCastExpr 0x560b861a7f68 <col:27> 'double' <LValueToRValue>
|   |   |     |     | |   `-DeclRefExpr 0x560b861a7f48 <col:27> 'double' lvalue Var 0x560b861a7d20 'hn' 'double'
|   |   |     |     | `-BinaryOperator 0x560b861a8050 <col:32, col:39> 'double' '*'
|   |   |     |     |   |-BinaryOperator 0x560b861a7ff8 <col:32, col:36> 'double' '*'
|   |   |     |     |   | |-FloatingLiteral 0x560b861a7fa0 <col:32> 'double' 6.000000e+00
|   |   |     |     |   | `-ImplicitCastExpr 0x560b861a7fe0 <col:36> 'double' <LValueToRValue>
|   |   |     |     |   |   `-DeclRefExpr 0x560b861a7fc0 <col:36> 'double' lvalue Var 0x560b861a7d20 'hn' 'double'
|   |   |     |     |   `-ImplicitCastExpr 0x560b861a8038 <col:39> 'double' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x560b861a8018 <col:39> 'double' lvalue Var 0x560b861a7d20 'hn' 'double'
|   |   |     |     `-BinaryOperator 0x560b861a8198 <col:44, col:54> 'double' '*'
|   |   |     |       |-BinaryOperator 0x560b861a8140 <col:44, col:51> 'double' '*'
|   |   |     |       | |-BinaryOperator 0x560b861a80e8 <col:44, col:48> 'double' '*'
|   |   |     |       | | |-FloatingLiteral 0x560b861a8090 <col:44> 'double' 5.000000e+00
|   |   |     |       | | `-ImplicitCastExpr 0x560b861a80d0 <col:48> 'double' <LValueToRValue>
|   |   |     |       | |   `-DeclRefExpr 0x560b861a80b0 <col:48> 'double' lvalue Var 0x560b861a7d20 'hn' 'double'
|   |   |     |       | `-ImplicitCastExpr 0x560b861a8128 <col:51> 'double' <LValueToRValue>
|   |   |     |       |   `-DeclRefExpr 0x560b861a8108 <col:51> 'double' lvalue Var 0x560b861a7d20 'hn' 'double'
|   |   |     |       `-ImplicitCastExpr 0x560b861a8180 <col:54> 'double' <LValueToRValue>
|   |   |     |         `-DeclRefExpr 0x560b861a8160 <col:54> 'double' lvalue Var 0x560b861a7d20 'hn' 'double'
|   |   |     `-FloatingLiteral 0x560b861a8230 <col:60> 'double' 1.600000e+01
|   |   |-BinaryOperator 0x560b861a83d8 <line:26:5, col:26> 'double' '='
|   |   | |-DeclRefExpr 0x560b861a82c8 <col:5> 'double' lvalue Var 0x560b86183098 'residu' 'double'
|   |   | `-BinaryOperator 0x560b861a83b8 <col:14, col:26> 'double' '*'
|   |   |   |-FloatingLiteral 0x560b861a82e8 <col:14> 'double' 2.000000e+00
|   |   |   `-ParenExpr 0x560b861a8398 <col:18, col:26> 'double'
|   |   |     `-BinaryOperator 0x560b861a8378 <col:19, col:24> 'double' '-'
|   |   |       |-ImplicitCastExpr 0x560b861a8348 <col:19> 'double' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x560b861a8308 <col:19> 'double' lvalue Var 0x560b86183018 'xnp1' 'double'
|   |   |       `-ImplicitCastExpr 0x560b861a8360 <col:24> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x560b861a8328 <col:24> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |   |-BinaryOperator 0x560b861a8450 <line:27:5, col:10> 'double' '='
|   |   | |-DeclRefExpr 0x560b861a83f8 <col:5> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |   | `-ImplicitCastExpr 0x560b861a8438 <col:10> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560b861a8418 <col:10> 'double' lvalue Var 0x560b86183018 'xnp1' 'double'
|   |   |-BinaryOperator 0x560b861a8598 <line:28:5, col:27> 'double' '='
|   |   | |-DeclRefExpr 0x560b861a8470 <col:5> 'double' lvalue Var 0x560b86183118 'lsup' 'double'
|   |   | `-BinaryOperator 0x560b861a8578 <col:12, col:27> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x560b861a8560 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x560b861a8490 <col:12> 'double' lvalue Var 0x560b86182d68 '_EPS' 'double'
|   |   |   `-ParenExpr 0x560b861a8540 <col:19, col:27> 'double'
|   |   |     `-BinaryOperator 0x560b861a8520 <col:20, col:23> 'double' '+'
|   |   |       |-ImplicitCastExpr 0x560b861a84f0 <col:20> 'double' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x560b861a84b0 <col:20> 'double' lvalue Var 0x560b86182f98 'xn' 'double'
|   |   |       `-ImplicitCastExpr 0x560b861a8508 <col:23> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x560b861a84d0 <col:23> 'double' lvalue Var 0x560b86183018 'xnp1' 'double'
|   |   |-BinaryOperator 0x560b861a8628 <line:29:5, col:13> 'double' '='
|   |   | |-DeclRefExpr 0x560b861a85b8 <col:5> 'double' lvalue Var 0x560b86183198 'linf' 'double'
|   |   | `-UnaryOperator 0x560b861a8610 <col:12, col:13> 'double' prefix '-'
|   |   |   `-ImplicitCastExpr 0x560b861a85f8 <col:13> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x560b861a85d8 <col:13> 'double' lvalue Var 0x560b86183118 'lsup' 'double'
|   |   |-BinaryOperator 0x560b861a8830 <line:30:5, col:47> 'int' '='
|   |   | |-DeclRefExpr 0x560b861a8648 <col:5> 'int' lvalue Var 0x560b861832e0 'cond' 'int'
|   |   | `-ParenExpr 0x560b861a8810 <col:12, col:47> 'int'
|   |   |   `-BinaryOperator 0x560b861a87f0 <col:13, col:46> 'int' '||'
|   |   |     |-ParenExpr 0x560b861a86f8 <col:13, col:27> 'int'
|   |   |     | `-BinaryOperator 0x560b861a86d8 <col:14, col:23> 'int' '>'
|   |   |     |   |-ImplicitCastExpr 0x560b861a86a8 <col:14> 'double' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x560b861a8668 <col:14> 'double' lvalue Var 0x560b86183098 'residu' 'double'
|   |   |     |   `-ImplicitCastExpr 0x560b861a86c0 <col:23> 'double' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x560b861a8688 <col:23> 'double' lvalue Var 0x560b86183118 'lsup' 'double'
|   |   |     `-ParenExpr 0x560b861a87d0 <col:32, col:46> 'int'
|   |   |       `-BinaryOperator 0x560b861a87b0 <col:33, col:42> 'int' '<'
|   |   |         |-ImplicitCastExpr 0x560b861a8780 <col:33> 'double' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x560b861a8718 <col:33> 'double' lvalue Var 0x560b86183098 'residu' 'double'
|   |   |         `-ImplicitCastExpr 0x560b861a8798 <col:42> 'double' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x560b861a8760 <col:42> 'double' lvalue Var 0x560b86183198 'linf' 'double'
|   |   `-UnaryOperator 0x560b861a8870 <line:31:5, col:6> 'int' postfix '++'
|   |     `-DeclRefExpr 0x560b861a8850 <col:5> 'int' lvalue Var 0x560b86183260 'i' 'int'
|   `-ReturnStmt 0x560b861a8968 <line:33:3, col:16>
|     `-BinaryOperator 0x560b861a8948 <col:10, col:16> 'double' '/'
|       |-FloatingLiteral 0x560b861a88f0 <col:10> 'double' 1.000000e+00
|       `-ImplicitCastExpr 0x560b861a8930 <col:16> 'double' <LValueToRValue>
|         `-DeclRefExpr 0x560b861a8910 <col:16> 'double' lvalue Var 0x560b86183018 'xnp1' 'double'
`-FunctionDecl 0x560b861a8ae8 <line:36:1, line:51:1> line:36:5 main 'int ()'
  `-CompoundStmt 0x560b861a9570 <line:37:1, line:51:1>
    |-DeclStmt 0x560b861a8d28 <line:38:3, col:18>
    | |-VarDecl 0x560b861a8ba0 <col:3, col:10> col:10 used d 'double'
    | |-VarDecl 0x560b861a8c20 <col:3, col:13> col:13 used dd 'double'
    | `-VarDecl 0x560b861a8ca0 <col:3, col:17> col:17 used r 'double'
    |-DeclStmt 0x560b861a8de0 <line:39:3, col:24>
    | `-VarDecl 0x560b861a8d58 <col:3, col:20> col:10 used epsilon 'double' cinit
    |   `-FloatingLiteral 0x560b861a8dc0 <col:20> 'double' 1.000000e-08
    |-ForStmt 0x560b861a9508 <line:41:3, line:49:3>
    | |-BinaryOperator 0x560b861a8e38 <line:41:8, col:12> 'double' '='
    | | |-DeclRefExpr 0x560b861a8df8 <col:8> 'double' lvalue Var 0x560b861a8ba0 'd' 'double'
    | | `-FloatingLiteral 0x560b861a8e18 <col:12> 'double' 1.000000e+00
    | |-<<<NULL>>>
    | |-BinaryOperator 0x560b861a8eb0 <col:16, col:21> 'int' '<='
    | | |-ImplicitCastExpr 0x560b861a8e98 <col:16> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x560b861a8e58 <col:16> 'double' lvalue Var 0x560b861a8ba0 'd' 'double'
    | | `-FloatingLiteral 0x560b861a8e78 <col:21> 'double' 2.000000e+01
    | |-UnaryOperator 0x560b861a8ef0 <col:26, col:27> 'double' postfix '++'
    | | `-DeclRefExpr 0x560b861a8ed0 <col:26> 'double' lvalue Var 0x560b861a8ba0 'd' 'double'
    | `-CompoundStmt 0x560b861a94d8 <col:31, line:49:3>
    |   |-BinaryOperator 0x560b861a8fb8 <line:43:5, col:35> 'double' '='
    |   | |-DeclRefExpr 0x560b861a8f08 <col:5> 'double' lvalue Var 0x560b861a8c20 'dd' 'double'
    |   | `-CallExpr 0x560b861a8f98 <col:10, col:35> 'double'
    |   |   `-ImplicitCastExpr 0x560b861a8f80 <col:10> 'double (*)()' <FunctionToPointerDecay>
    |   |     `-DeclRefExpr 0x560b861a8f28 <col:10> 'double ()' Function 0x560b86182808 '__VERIFIER_nondet_double' 'double ()'
    |   |-CallExpr 0x560b861a9238 <line:44:5, col:57> 'void'
    |   | |-ImplicitCastExpr 0x560b861a9220 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x560b861a8fd8 <col:5> 'void (int)' Function 0x560b86182990 '__VERIFIER_assume' 'void (int)'
    |   | `-BinaryOperator 0x560b861a91c8 <col:23, col:50> 'int' '&&'
    |   |   |-BinaryOperator 0x560b861a90c0 <col:23, col:31> 'int' '>='
    |   |   | |-ImplicitCastExpr 0x560b861a90a8 <col:23> 'double' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x560b861a8ff8 <col:23> 'double' lvalue Var 0x560b861a8c20 'dd' 'double'
    |   |   | `-BinaryOperator 0x560b861a9088 <col:29, col:31> 'double' '-'
    |   |   |   |-ImplicitCastExpr 0x560b861a9058 <col:29> 'double' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x560b861a9018 <col:29> 'double' lvalue Var 0x560b861a8ba0 'd' 'double'
    |   |   |   `-ImplicitCastExpr 0x560b861a9070 <col:31> 'double' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x560b861a9038 <col:31> 'double' lvalue Var 0x560b861a8d58 'epsilon' 'double'
    |   |   `-BinaryOperator 0x560b861a91a8 <col:42, col:50> 'int' '<='
    |   |     |-ImplicitCastExpr 0x560b861a9190 <col:42> 'double' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x560b861a90e0 <col:42> 'double' lvalue Var 0x560b861a8c20 'dd' 'double'
    |   |     `-BinaryOperator 0x560b861a9170 <col:48, col:50> 'double' '+'
    |   |       |-ImplicitCastExpr 0x560b861a9140 <col:48> 'double' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x560b861a9100 <col:48> 'double' lvalue Var 0x560b861a8ba0 'd' 'double'
    |   |       `-ImplicitCastExpr 0x560b861a9158 <col:50> 'double' <LValueToRValue>
    |   |         `-DeclRefExpr 0x560b861a9120 <col:50> 'double' lvalue Var 0x560b861a8d58 'epsilon' 'double'
    |   |-BinaryOperator 0x560b861a9348 <line:46:5, col:17> 'double' '='
    |   | |-DeclRefExpr 0x560b861a9260 <col:5> 'double' lvalue Var 0x560b861a8ca0 'r' 'double'
    |   | `-CallExpr 0x560b861a9308 <col:9, col:17> 'double'
    |   |   |-ImplicitCastExpr 0x560b861a92f0 <col:9> 'double (*)(double)' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x560b861a9280 <col:9> 'double (double)' Function 0x560b86182ed8 'SqrtR' 'double (double)'
    |   |   `-ImplicitCastExpr 0x560b861a9330 <col:15> 'double' <LValueToRValue>
    |   |     `-DeclRefExpr 0x560b861a92a0 <col:15> 'double' lvalue Var 0x560b861a8c20 'dd' 'double'
    |   `-CallExpr 0x560b861a94b0 <line:48:5, col:42> 'void'
    |     |-ImplicitCastExpr 0x560b861a9498 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x560b861a9368 <col:5> 'void (int)' Function 0x560b86182ae0 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x560b861a9478 <col:23, col:40> 'int' '&&'
    |       |-BinaryOperator 0x560b861a93e0 <col:23, col:28> 'int' '>='
    |       | |-ImplicitCastExpr 0x560b861a93c8 <col:23> 'double' <LValueToRValue>
    |       | | `-DeclRefExpr 0x560b861a9388 <col:23> 'double' lvalue Var 0x560b861a8ca0 'r' 'double'
    |       | `-FloatingLiteral 0x560b861a93a8 <col:28> 'double' 9.000000e-01
    |       `-BinaryOperator 0x560b861a9458 <col:35, col:40> 'int' '<='
    |         |-ImplicitCastExpr 0x560b861a9440 <col:35> 'double' <LValueToRValue>
    |         | `-DeclRefExpr 0x560b861a9400 <col:35> 'double' lvalue Var 0x560b861a8ca0 'r' 'double'
    |         `-FloatingLiteral 0x560b861a9420 <col:40> 'double' 5.000000e+00
    `-ReturnStmt 0x560b861a9560 <line:50:3, col:10>
      `-IntegerLiteral 0x560b861a9540 <col:10> 'int' 0
