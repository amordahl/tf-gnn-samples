TranslationUnitDecl 0x560a66c134d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x560a66c13d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x560a66c13a70 '__int128'
|-TypedefDecl 0x560a66c13e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x560a66c13a90 'unsigned __int128'
|-TypedefDecl 0x560a66c14110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x560a66c13ee0 'struct __NSConstantString_tag'
|   `-Record 0x560a66c13e60 '__NSConstantString_tag'
|-TypedefDecl 0x560a66c141b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x560a66c14170 'char *'
|   `-BuiltinType 0x560a66c13570 'char'
|-TypedefDecl 0x560a66c53370 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x560a66c14450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x560a66c14290 'struct __va_list_tag'
|     `-Record 0x560a66c14210 '__va_list_tag'
|-FunctionDecl 0x560a66c53450 <loop-industry-pattern/nested_true-unreach-call.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-VarDecl 0x560a66c53550 <line:7:1, col:5> col:5 used last 'int'
|-FunctionDecl 0x560a66c536a0 <line:8:1, line:13:1> line:8:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x560a66c535d0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x560a66c538f0 <col:34, line:13:1>
|   |-IfStmt 0x560a66c538c8 <line:9:3, line:11:3>
|   | |-UnaryOperator 0x560a66c537a0 <line:9:7, col:13> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x560a66c53788 <col:8, col:13> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x560a66c53768 <col:8, col:13> 'int' lvalue
|   | |     `-DeclRefExpr 0x560a66c53748 <col:9> 'int' lvalue ParmVar 0x560a66c535d0 'cond' 'int'
|   | `-CompoundStmt 0x560a66c538b0 <col:16, line:11:3>
|   |   `-LabelStmt 0x560a66c53898 <line:10:6, col:30> 'ERROR'
|   |     `-CallExpr 0x560a66c53828 <col:13, col:30> 'void'
|   |       `-ImplicitCastExpr 0x560a66c53810 <col:13> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x560a66c537b8 <col:13> 'void () __attribute__((noreturn))' Function 0x560a66c53450 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x560a66c538e0 <line:12:3>
|-FunctionDecl 0x560a66c53968 <line:15:1, line:19:1> line:15:5 used nondet 'int ()'
| `-CompoundStmt 0x560a66c53ae8 <line:16:1, line:19:1>
|   |-DeclStmt 0x560a66c53a88 <line:17:2, col:7>
|   | `-VarDecl 0x560a66c53a20 <col:2, col:6> col:6 used x 'int'
|   `-ReturnStmt 0x560a66c53ad8 <line:18:2, col:9>
|     `-ImplicitCastExpr 0x560a66c53ac0 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x560a66c53aa0 <col:9> 'int' lvalue Var 0x560a66c53a20 'x' 'int'
`-FunctionDecl 0x560a66c53b30 <line:21:1, line:35:1> line:21:5 main 'int ()'
  `-CompoundStmt 0x560a66c79280 <col:12, line:35:1>
    |-BinaryOperator 0x560a66c53c78 <line:22:2, col:16> 'int' '='
    | |-DeclRefExpr 0x560a66c53bd0 <col:2> 'int' lvalue Var 0x560a66c53550 'last' 'int'
    | `-CallExpr 0x560a66c53c58 <col:9, col:16> 'int'
    |   `-ImplicitCastExpr 0x560a66c53c40 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x560a66c53bf0 <col:9> 'int ()' Function 0x560a66c53968 'nondet' 'int ()'
    |-DeclStmt 0x560a66c53f40 <line:23:2, col:22>
    | |-VarDecl 0x560a66c53cb0 <col:2, col:8> col:6 used a 'int' cinit
    | | `-IntegerLiteral 0x560a66c53d18 <col:8> 'int' 0
    | |-VarDecl 0x560a66c53d50 <col:2, col:12> col:10 used b 'int' cinit
    | | `-IntegerLiteral 0x560a66c53db8 <col:12> 'int' 0
    | |-VarDecl 0x560a66c53df0 <col:2, col:16> col:14 used c 'int' cinit
    | | `-IntegerLiteral 0x560a66c53e58 <col:16> 'int' 0
    | `-VarDecl 0x560a66c53e90 <col:2, col:21> col:18 used st 'int' cinit
    |   `-IntegerLiteral 0x560a66c53ef8 <col:21> 'int' 0
    `-WhileStmt 0x560a66c79268 <line:24:2, line:34:2>
      |-IntegerLiteral 0x560a66c53f58 <line:24:8> 'int' 1
      `-CompoundStmt 0x560a66c79230 <col:11, line:34:2>
        |-BinaryOperator 0x560a66c53fb8 <line:25:3, col:6> 'int' '='
        | |-DeclRefExpr 0x560a66c53f78 <col:3> 'int' lvalue Var 0x560a66c53e90 'st' 'int'
        | `-IntegerLiteral 0x560a66c53f98 <col:6> 'int' 1
        |-ForStmt 0x560a66c541f0 <line:26:3, line:27:23>
        | |-BinaryOperator 0x560a66c54018 <line:26:7, col:9> 'int' '='
        | | |-DeclRefExpr 0x560a66c53fd8 <col:7> 'int' lvalue Var 0x560a66c53df0 'c' 'int'
        | | `-IntegerLiteral 0x560a66c53ff8 <col:9> 'int' 0
        | |-<<<NULL>>>
        | |-BinaryOperator 0x560a66c54090 <col:11, col:13> 'int' '<'
        | | |-ImplicitCastExpr 0x560a66c54078 <col:11> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x560a66c54038 <col:11> 'int' lvalue Var 0x560a66c53df0 'c' 'int'
        | | `-IntegerLiteral 0x560a66c54058 <col:13> 'int' 200000
        | |-UnaryOperator 0x560a66c540d0 <col:20, col:21> 'int' postfix '++'
        | | `-DeclRefExpr 0x560a66c540b0 <col:20> 'int' lvalue Var 0x560a66c53df0 'c' 'int'
        | `-IfStmt 0x560a66c541d8 <line:27:4, col:23>
        |   |-BinaryOperator 0x560a66c54158 <col:8, col:11> 'int' '=='
        |   | |-ImplicitCastExpr 0x560a66c54128 <col:8> 'int' <LValueToRValue>
        |   | | `-DeclRefExpr 0x560a66c540e8 <col:8> 'int' lvalue Var 0x560a66c53df0 'c' 'int'
        |   | `-ImplicitCastExpr 0x560a66c54140 <col:11> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x560a66c54108 <col:11> 'int' lvalue Var 0x560a66c53550 'last' 'int'
        |   `-BinaryOperator 0x560a66c541b8 <col:18, col:23> 'int' '='
        |     |-DeclRefExpr 0x560a66c54178 <col:18> 'int' lvalue Var 0x560a66c53e90 'st' 'int'
        |     `-IntegerLiteral 0x560a66c54198 <col:23> 'int' 0
        |-IfStmt 0x560a66c78e50 <line:28:3, line:30:22> has_else
        | |-BinaryOperator 0x560a66c78c30 <line:28:6, col:23> 'int' '&&'
        | | |-BinaryOperator 0x560a66c54280 <col:6, col:10> 'int' '=='
        | | | |-ImplicitCastExpr 0x560a66c54268 <col:6> 'int' <LValueToRValue>
        | | | | `-DeclRefExpr 0x560a66c54228 <col:6> 'int' lvalue Var 0x560a66c53e90 'st' 'int'
        | | | `-IntegerLiteral 0x560a66c54248 <col:10> 'int' 0
        | | `-BinaryOperator 0x560a66c54350 <col:15, col:23> 'int' '=='
        | |   |-ImplicitCastExpr 0x560a66c54338 <col:15> 'int' <LValueToRValue>
        | |   | `-DeclRefExpr 0x560a66c542a0 <col:15> 'int' lvalue Var 0x560a66c53df0 'c' 'int'
        | |   `-BinaryOperator 0x560a66c54318 <col:18, col:23> 'int' '+'
        | |     |-ImplicitCastExpr 0x560a66c54300 <col:18> 'int' <LValueToRValue>
        | |     | `-DeclRefExpr 0x560a66c542c0 <col:18> 'int' lvalue Var 0x560a66c53550 'last' 'int'
        | |     `-IntegerLiteral 0x560a66c542e0 <col:23> 'int' 1
        | |-CompoundStmt 0x560a66c78d30 <col:25, line:29:15>
        | | |-CompoundAssignOperator 0x560a66c78c90 <col:4, col:7> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | | |-DeclRefExpr 0x560a66c78c50 <col:4> 'int' lvalue Var 0x560a66c53cb0 'a' 'int'
        | | | `-IntegerLiteral 0x560a66c78c70 <col:7> 'int' 3
        | | `-CompoundAssignOperator 0x560a66c78d00 <col:10, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | |   |-DeclRefExpr 0x560a66c78cc0 <col:10> 'int' lvalue Var 0x560a66c53d50 'b' 'int'
        | |   `-IntegerLiteral 0x560a66c78ce0 <col:13> 'int' 3
        | `-CompoundStmt 0x560a66c78e30 <line:30:8, col:22>
        |   |-CompoundAssignOperator 0x560a66c78d90 <col:10, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        |   | |-DeclRefExpr 0x560a66c78d50 <col:10> 'int' lvalue Var 0x560a66c53cb0 'a' 'int'
        |   | `-IntegerLiteral 0x560a66c78d70 <col:13> 'int' 2
        |   `-CompoundAssignOperator 0x560a66c78e00 <col:16, col:19> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        |     |-DeclRefExpr 0x560a66c78dc0 <col:16> 'int' lvalue Var 0x560a66c53d50 'b' 'int'
        |     `-IntegerLiteral 0x560a66c78de0 <col:19> 'int' 2
        |-IfStmt 0x560a66c79058 <line:31:3, line:32:10>
        | |-BinaryOperator 0x560a66c78f80 <line:31:6, col:21> 'int' '&&'
        | | |-BinaryOperator 0x560a66c78ee8 <col:6, col:9> 'int' '=='
        | | | |-ImplicitCastExpr 0x560a66c78eb8 <col:6> 'int' <LValueToRValue>
        | | | | `-DeclRefExpr 0x560a66c78e78 <col:6> 'int' lvalue Var 0x560a66c53df0 'c' 'int'
        | | | `-ImplicitCastExpr 0x560a66c78ed0 <col:9> 'int' <LValueToRValue>
        | | |   `-DeclRefExpr 0x560a66c78e98 <col:9> 'int' lvalue Var 0x560a66c53550 'last' 'int'
        | | `-BinaryOperator 0x560a66c78f60 <col:17, col:21> 'int' '=='
        | |   |-ImplicitCastExpr 0x560a66c78f48 <col:17> 'int' <LValueToRValue>
        | |   | `-DeclRefExpr 0x560a66c78f08 <col:17> 'int' lvalue Var 0x560a66c53e90 'st' 'int'
        | |   `-IntegerLiteral 0x560a66c78f28 <col:21> 'int' 0
        | `-BinaryOperator 0x560a66c79038 <line:32:4, col:10> 'int' '='
        |   |-DeclRefExpr 0x560a66c78fa0 <col:4> 'int' lvalue Var 0x560a66c53cb0 'a' 'int'
        |   `-BinaryOperator 0x560a66c79018 <col:8, col:10> 'int' '+'
        |     |-ImplicitCastExpr 0x560a66c79000 <col:8> 'int' <LValueToRValue>
        |     | `-DeclRefExpr 0x560a66c78fc0 <col:8> 'int' lvalue Var 0x560a66c53cb0 'a' 'int'
        |     `-IntegerLiteral 0x560a66c78fe0 <col:10> 'int' 1
        `-CallExpr 0x560a66c79208 <line:33:3, col:38> 'void'
          |-ImplicitCastExpr 0x560a66c791f0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x560a66c79070 <col:3> 'void (int)' Function 0x560a66c536a0 '__VERIFIER_assert' 'void (int)'
          `-BinaryOperator 0x560a66c79198 <col:21, col:32> 'int' '&&'
            |-BinaryOperator 0x560a66c79100 <col:21, col:24> 'int' '=='
            | |-ImplicitCastExpr 0x560a66c790d0 <col:21> 'int' <LValueToRValue>
            | | `-DeclRefExpr 0x560a66c79090 <col:21> 'int' lvalue Var 0x560a66c53cb0 'a' 'int'
            | `-ImplicitCastExpr 0x560a66c790e8 <col:24> 'int' <LValueToRValue>
            |   `-DeclRefExpr 0x560a66c790b0 <col:24> 'int' lvalue Var 0x560a66c53d50 'b' 'int'
            `-BinaryOperator 0x560a66c79178 <col:29, col:32> 'int' '=='
              |-ImplicitCastExpr 0x560a66c79160 <col:29> 'int' <LValueToRValue>
              | `-DeclRefExpr 0x560a66c79120 <col:29> 'int' lvalue Var 0x560a66c53df0 'c' 'int'
              `-IntegerLiteral 0x560a66c79140 <col:32> 'int' 200000
