TranslationUnitDecl 0x56406f80b6f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x56406f80bfb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x56406f80bc90 '__int128'
|-TypedefDecl 0x56406f80c028 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x56406f80bcb0 'unsigned __int128'
|-TypedefDecl 0x56406f80c330 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x56406f80c100 'struct __NSConstantString_tag'
|   `-Record 0x56406f80c080 '__NSConstantString_tag'
|-TypedefDecl 0x56406f80c3d8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x56406f80c390 'char *'
|   `-BuiltinType 0x56406f80b790 'char'
|-TypedefDecl 0x56406f84b390 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x56406f80c670 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x56406f80c4b0 'struct __va_list_tag'
|     `-Record 0x56406f80c430 '__va_list_tag'
|-FunctionDecl 0x56406f84b470 <seq-mthreaded/pals_STARTPALS_ActiveStandby_false-unreach-call.4_2.ufo.UNBOUNDED.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x56406f84b650 <line:61:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
| `-FullComment 0x56406f88b7a0 <line:3:4, line:56:69>
|   |-ParagraphComment 0x56406f88add0 <line:3:4, col:71>
|   | `-TextComment 0x56406f88ada0 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x56406f88ae20 <line:5:1, col:67>
|   | `-TextComment 0x56406f88adf0 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x56406f88aec0 <line:7:1, line:9:4>
|   | |-TextComment 0x56406f88ae40 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x56406f88ae60 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x56406f88ae80 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x56406f88af60 <line:11:1, line:13:12>
|   | |-TextComment 0x56406f88aee0 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x56406f88af00 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x56406f88af20 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x56406f88b000 <line:15:1, line:17:68>
|   | |-TextComment 0x56406f88af80 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x56406f88afa0 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x56406f88afc0 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x56406f88b0f0 <line:19:1, line:23:10>
|   | |-TextComment 0x56406f88b020 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x56406f88b040 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x56406f88b060 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x56406f88b080 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x56406f88b0a0 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x56406f88b110 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x56406f88b170 <col:15, col:23>
|   |   `-TextComment 0x56406f88b140 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x56406f88b210 <line:25:1, line:27:10>
|   | |-TextComment 0x56406f88b190 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x56406f88b1b0 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x56406f88b1d0 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x56406f88b230 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x56406f88b290 <col:15, col:23>
|   |   `-TextComment 0x56406f88b260 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x56406f88b300 <line:29:1, line:30:15>
|   | |-TextComment 0x56406f88b2b0 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x56406f88b2d0 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x56406f88b3f0 <line:32:1, line:36:7>
|   | |-TextComment 0x56406f88b320 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x56406f88b340 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x56406f88b360 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x56406f88b380 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x56406f88b3a0 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x56406f88b490 <line:38:1, line:40:61>
|   | |-TextComment 0x56406f88b410 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x56406f88b430 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x56406f88b450 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x56406f88b5f0 <line:42:1, line:49:37>
|   | |-TextComment 0x56406f88b4b0 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x56406f88b4d0 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x56406f88b4f0 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x56406f88b510 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x56406f88b530 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x56406f88b550 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x56406f88b570 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x56406f88b590 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x56406f88b660 <line:51:1, line:52:13>
|   | |-TextComment 0x56406f88b610 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x56406f88b630 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x56406f88b6b0 <line:54:1, col:10>
|   | `-TextComment 0x56406f88b680 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x56406f88b700 <line:56:2, col:69>
|     `-TextComment 0x56406f88b6d0 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x56406f84b788 prev 0x56406f84b650 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x56406f84b8f0 <line:63:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
|-TypedefDecl 0x56406f84b9a0 <line:64:1, col:14> col:14 referenced int8_t 'char'
| `-BuiltinType 0x56406f80b790 'char'
|-TypedefDecl 0x56406f84ba38 <line:65:1, col:16> col:16 referenced msg_t 'int8_t':'char'
| `-TypedefType 0x56406f84ba00 'int8_t' sugar
|   |-Typedef 0x56406f84b9a0 'int8_t'
|   `-BuiltinType 0x56406f80b790 'char'
|-TypedefDecl 0x56406f84baa8 <line:66:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x56406f80b7f0 'int'
|-FunctionDecl 0x56406f84bcf0 <line:67:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x56406f84bb38 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x56406f84bbd8 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x56406f84bec0 <line:68:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x56406f84bdb0 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x56406f84be28 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x56406f84bf80 <line:69:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x56406f84c030 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x56406f84c008 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x56406f84bfe8 <col:28> 'int' 1
|-VarDecl 0x56406f84c068 <line:70:1, col:8> col:8 cs1 'port_t':'int'
|-VarDecl 0x56406f84c0e0 <line:71:1, col:8> col:8 used cs1_old 'int8_t':'char'
|-VarDecl 0x56406f84c158 <line:72:1, col:8> col:8 used cs1_new 'int8_t':'char'
|-VarDecl 0x56406f84c1d0 <line:73:1, col:8> col:8 cs2 'port_t':'int'
|-VarDecl 0x56406f84c248 <line:74:1, col:8> col:8 used cs2_old 'int8_t':'char'
|-VarDecl 0x56406f84c2c0 <line:75:1, col:8> col:8 used cs2_new 'int8_t':'char'
|-VarDecl 0x56406f8730a0 <line:76:1, col:8> col:8 s1s2 'port_t':'int'
|-VarDecl 0x56406f873118 <line:77:1, col:8> col:8 used s1s2_old 'int8_t':'char'
|-VarDecl 0x56406f873190 <line:78:1, col:8> col:8 used s1s2_new 'int8_t':'char'
|-VarDecl 0x56406f873208 <line:79:1, col:8> col:8 s1s1 'port_t':'int'
|-VarDecl 0x56406f873280 <line:80:1, col:8> col:8 used s1s1_old 'int8_t':'char'
|-VarDecl 0x56406f8732f8 <line:81:1, col:8> col:8 used s1s1_new 'int8_t':'char'
|-VarDecl 0x56406f873370 <line:82:1, col:8> col:8 s2s1 'port_t':'int'
|-VarDecl 0x56406f8733e8 <line:83:1, col:8> col:8 used s2s1_old 'int8_t':'char'
|-VarDecl 0x56406f873460 <line:84:1, col:8> col:8 used s2s1_new 'int8_t':'char'
|-VarDecl 0x56406f8734d8 <line:85:1, col:8> col:8 s2s2 'port_t':'int'
|-VarDecl 0x56406f873550 <line:86:1, col:8> col:8 used s2s2_old 'int8_t':'char'
|-VarDecl 0x56406f8735c8 <line:87:1, col:8> col:8 used s2s2_new 'int8_t':'char'
|-VarDecl 0x56406f873640 <line:88:1, col:8> col:8 s1p 'port_t':'int'
|-VarDecl 0x56406f8736b8 <line:89:1, col:8> col:8 used s1p_old 'int8_t':'char'
|-VarDecl 0x56406f873730 <line:90:1, col:8> col:8 used s1p_new 'int8_t':'char'
|-VarDecl 0x56406f8737a8 <line:91:1, col:8> col:8 s2p 'port_t':'int'
|-VarDecl 0x56406f873820 <line:92:1, col:8> col:8 used s2p_old 'int8_t':'char'
|-VarDecl 0x56406f873898 <line:93:1, col:8> col:8 used s2p_new 'int8_t':'char'
|-FunctionDecl 0x56406f873950 prev 0x56406f84b8f0 <line:94:1, col:37> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x56406f873a40 prev 0x56406f84b788 <line:95:1, col:36> col:13 used __VERIFIER_nondet_char 'char (void)' extern
|-VarDecl 0x56406f873af0 <line:96:1, col:7> col:7 used side1Failed '_Bool'
|-VarDecl 0x56406f873b68 <line:97:1, col:7> col:7 used side2Failed '_Bool'
|-VarDecl 0x56406f873be0 <line:98:1, col:7> col:7 used side1_written 'msg_t':'char'
|-VarDecl 0x56406f873c58 <line:99:1, col:7> col:7 used side2_written 'msg_t':'char'
|-FunctionDecl 0x56406f873da0 <line:100:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x56406f873cd0 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x56406f873f30 <line:101:1, col:39> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x56406f873e60 <col:31, col:35> col:35 arg 'int'
|-VarDecl 0x56406f873fe8 <line:102:1, col:14> col:14 used side1Failed_History_0 '_Bool' static
|-VarDecl 0x56406f8740b0 <line:103:1, col:14> col:14 used side1Failed_History_1 '_Bool' static
|-VarDecl 0x56406f874128 <line:104:1, col:14> col:14 used side1Failed_History_2 '_Bool' static
|-VarDecl 0x56406f8741a0 <line:105:1, col:14> col:14 used side2Failed_History_0 '_Bool' static
|-VarDecl 0x56406f874218 <line:106:1, col:14> col:14 used side2Failed_History_1 '_Bool' static
|-VarDecl 0x56406f874290 <line:107:1, col:14> col:14 used side2Failed_History_2 '_Bool' static
|-VarDecl 0x56406f874308 <line:108:1, col:15> col:15 used active_side_History_0 'int8_t':'char' static
|-VarDecl 0x56406f874380 <line:109:1, col:15> col:15 used active_side_History_1 'int8_t':'char' static
|-VarDecl 0x56406f8743f8 <line:110:1, col:15> col:15 used active_side_History_2 'int8_t':'char' static
|-VarDecl 0x56406f874470 <line:111:1, col:14> col:14 used manual_selection_History_0 'msg_t':'char' static
|-VarDecl 0x56406f8744e8 <line:112:1, col:14> col:14 used manual_selection_History_1 'msg_t':'char' static
|-VarDecl 0x56406f874560 <line:113:1, col:14> col:14 used manual_selection_History_2 'msg_t':'char' static
|-FunctionDecl 0x56406f874668 <line:114:1, line:124:1> line:114:6 used write_side1_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x56406f8745d8 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x56406f8748b8 <line:115:1, line:124:1>
|   `-CompoundStmt 0x56406f874888 <line:118:3, line:123:1>
|     |-BinaryOperator 0x56406f874768 <line:119:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x56406f874710 <col:3> '_Bool' lvalue Var 0x56406f874128 'side1Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x56406f874750 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f874730 <col:27> '_Bool' lvalue Var 0x56406f8740b0 'side1Failed_History_1' '_Bool'
|     |-BinaryOperator 0x56406f8747e0 <line:120:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x56406f874788 <col:3> '_Bool' lvalue Var 0x56406f8740b0 'side1Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x56406f8747c8 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f8747a8 <col:27> '_Bool' lvalue Var 0x56406f873fe8 'side1Failed_History_0' '_Bool'
|     |-BinaryOperator 0x56406f874858 <line:121:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x56406f874800 <col:3> '_Bool' lvalue Var 0x56406f873fe8 'side1Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x56406f874840 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f874820 <col:27> '_Bool' lvalue ParmVar 0x56406f8745d8 'val' '_Bool'
|     `-ReturnStmt 0x56406f874878 <line:122:3>
|-FunctionDecl 0x56406f8749b0 <line:125:1, line:143:1> line:125:7 used read_side1_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x56406f8748e8 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x56406f875028 <line:126:1, line:143:1>
|   `-CompoundStmt 0x56406f875010 <line:129:3, line:142:1>
|     `-IfStmt 0x56406f874fe8 <line:130:3, line:141:3> has_else
|       |-BinaryOperator 0x56406f874af0 <line:130:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x56406f874aa8 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x56406f874a90 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x56406f874a58 <col:13> 'unsigned char' lvalue ParmVar 0x56406f8748e8 'index' 'unsigned char'
|       | `-IntegerLiteral 0x56406f874ad0 <col:22> 'int' 0
|       |-CompoundStmt 0x56406f874b78 <col:25, line:132:3>
|       | `-ReturnStmt 0x56406f874b68 <line:131:5, col:34>
|       |   `-ImplicitCastExpr 0x56406f874b50 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x56406f874b30 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x56406f874b10 <col:13> '_Bool' lvalue Var 0x56406f873fe8 'side1Failed_History_0' '_Bool'
|       `-IfStmt 0x56406f874fc0 <line:133:3, line:141:3> has_else
|         |-BinaryOperator 0x56406f874c28 <line:133:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x56406f874be0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x56406f874bc8 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x56406f874b90 <col:13> 'unsigned char' lvalue ParmVar 0x56406f8748e8 'index' 'unsigned char'
|         | `-IntegerLiteral 0x56406f874c08 <col:22> 'int' 1
|         |-CompoundStmt 0x56406f874cb0 <col:25, line:135:3>
|         | `-ReturnStmt 0x56406f874ca0 <line:134:5, col:34>
|         |   `-ImplicitCastExpr 0x56406f874c88 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x56406f874c68 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x56406f874c48 <col:13> '_Bool' lvalue Var 0x56406f8740b0 'side1Failed_History_1' '_Bool'
|         `-IfStmt 0x56406f874f98 <line:136:3, line:141:3> has_else
|           |-BinaryOperator 0x56406f874d60 <line:136:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x56406f874d18 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x56406f874d00 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x56406f874cc8 <col:13> 'unsigned char' lvalue ParmVar 0x56406f8748e8 'index' 'unsigned char'
|           | `-IntegerLiteral 0x56406f874d40 <col:22> 'int' 2
|           |-CompoundStmt 0x56406f874de8 <col:25, line:138:3>
|           | `-ReturnStmt 0x56406f874dd8 <line:137:5, col:34>
|           |   `-ImplicitCastExpr 0x56406f874dc0 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x56406f874da0 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x56406f874d80 <col:13> '_Bool' lvalue Var 0x56406f874128 'side1Failed_History_2' '_Bool'
|           `-CompoundStmt 0x56406f874f78 <line:138:10, line:141:3>
|             |-CallExpr 0x56406f874ec8 <line:139:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x56406f874eb0 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x56406f874e00 <col:5> 'void (_Bool)' Function 0x56406f873da0 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x56406f874e50 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x56406f874e20 <col:19> 'int' 0
|             `-ReturnStmt 0x56406f874f68 <line:140:5, col:21>
|               `-ParenExpr 0x56406f874f48 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x56406f874f20 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x56406f874ef0 <col:20> 'int' 0
|-FunctionDecl 0x56406f876280 <line:144:1, line:154:1> line:144:6 used write_side2_failed_history 'void (_Bool)'
| |-ParmVarDecl 0x56406f8761f0 <col:33, col:39> col:39 used val '_Bool'
| `-CompoundStmt 0x56406f8764d0 <line:145:1, line:154:1>
|   `-CompoundStmt 0x56406f8764a0 <line:148:3, line:153:1>
|     |-BinaryOperator 0x56406f876380 <line:149:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x56406f876328 <col:3> '_Bool' lvalue Var 0x56406f874290 'side2Failed_History_2' '_Bool'
|     | `-ImplicitCastExpr 0x56406f876368 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f876348 <col:27> '_Bool' lvalue Var 0x56406f874218 'side2Failed_History_1' '_Bool'
|     |-BinaryOperator 0x56406f8763f8 <line:150:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x56406f8763a0 <col:3> '_Bool' lvalue Var 0x56406f874218 'side2Failed_History_1' '_Bool'
|     | `-ImplicitCastExpr 0x56406f8763e0 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f8763c0 <col:27> '_Bool' lvalue Var 0x56406f8741a0 'side2Failed_History_0' '_Bool'
|     |-BinaryOperator 0x56406f876470 <line:151:3, col:27> '_Bool' '='
|     | |-DeclRefExpr 0x56406f876418 <col:3> '_Bool' lvalue Var 0x56406f8741a0 'side2Failed_History_0' '_Bool'
|     | `-ImplicitCastExpr 0x56406f876458 <col:27> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f876438 <col:27> '_Bool' lvalue ParmVar 0x56406f8761f0 'val' '_Bool'
|     `-ReturnStmt 0x56406f876490 <line:152:3>
|-FunctionDecl 0x56406f876590 <line:155:1, line:173:1> line:155:7 used read_side2_failed_history '_Bool (unsigned char)'
| |-ParmVarDecl 0x56406f876500 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x56406f876bd0 <line:156:1, line:173:1>
|   `-CompoundStmt 0x56406f876bb8 <line:159:3, line:172:1>
|     `-IfStmt 0x56406f876b90 <line:160:3, line:171:3> has_else
|       |-BinaryOperator 0x56406f8766d0 <line:160:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x56406f876688 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x56406f876670 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x56406f876638 <col:13> 'unsigned char' lvalue ParmVar 0x56406f876500 'index' 'unsigned char'
|       | `-IntegerLiteral 0x56406f8766b0 <col:22> 'int' 0
|       |-CompoundStmt 0x56406f876758 <col:25, line:162:3>
|       | `-ReturnStmt 0x56406f876748 <line:161:5, col:34>
|       |   `-ImplicitCastExpr 0x56406f876730 <col:12, col:34> '_Bool' <LValueToRValue>
|       |     `-ParenExpr 0x56406f876710 <col:12, col:34> '_Bool' lvalue
|       |       `-DeclRefExpr 0x56406f8766f0 <col:13> '_Bool' lvalue Var 0x56406f8741a0 'side2Failed_History_0' '_Bool'
|       `-IfStmt 0x56406f876b68 <line:163:3, line:171:3> has_else
|         |-BinaryOperator 0x56406f876808 <line:163:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x56406f8767c0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x56406f8767a8 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x56406f876770 <col:13> 'unsigned char' lvalue ParmVar 0x56406f876500 'index' 'unsigned char'
|         | `-IntegerLiteral 0x56406f8767e8 <col:22> 'int' 1
|         |-CompoundStmt 0x56406f876890 <col:25, line:165:3>
|         | `-ReturnStmt 0x56406f876880 <line:164:5, col:34>
|         |   `-ImplicitCastExpr 0x56406f876868 <col:12, col:34> '_Bool' <LValueToRValue>
|         |     `-ParenExpr 0x56406f876848 <col:12, col:34> '_Bool' lvalue
|         |       `-DeclRefExpr 0x56406f876828 <col:13> '_Bool' lvalue Var 0x56406f874218 'side2Failed_History_1' '_Bool'
|         `-IfStmt 0x56406f876b40 <line:166:3, line:171:3> has_else
|           |-BinaryOperator 0x56406f876940 <line:166:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x56406f8768f8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x56406f8768e0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x56406f8768a8 <col:13> 'unsigned char' lvalue ParmVar 0x56406f876500 'index' 'unsigned char'
|           | `-IntegerLiteral 0x56406f876920 <col:22> 'int' 2
|           |-CompoundStmt 0x56406f8769c8 <col:25, line:168:3>
|           | `-ReturnStmt 0x56406f8769b8 <line:167:5, col:34>
|           |   `-ImplicitCastExpr 0x56406f8769a0 <col:12, col:34> '_Bool' <LValueToRValue>
|           |     `-ParenExpr 0x56406f876980 <col:12, col:34> '_Bool' lvalue
|           |       `-DeclRefExpr 0x56406f876960 <col:13> '_Bool' lvalue Var 0x56406f874290 'side2Failed_History_2' '_Bool'
|           `-CompoundStmt 0x56406f876b20 <line:168:10, line:171:3>
|             |-CallExpr 0x56406f876a70 <line:169:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x56406f876a58 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x56406f8769e0 <col:5> 'void (_Bool)' Function 0x56406f873da0 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x56406f876a30 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x56406f876a00 <col:19> 'int' 0
|             `-ReturnStmt 0x56406f876b10 <line:170:5, col:21>
|               `-ParenExpr 0x56406f876af0 <col:12, col:21> '_Bool'
|                 `-CStyleCastExpr 0x56406f876ac8 <col:13, col:20> '_Bool' <IntegralToBoolean>
|                   `-IntegerLiteral 0x56406f876a98 <col:20> 'int' 0
|-FunctionDecl 0x56406f876d00 <line:174:1, line:184:1> line:174:6 used write_active_side_history 'void (int8_t)'
| |-ParmVarDecl 0x56406f876bf8 <col:32, col:39> col:39 used val 'int8_t':'char'
| `-CompoundStmt 0x56406f876f50 <line:175:1, line:184:1>
|   `-CompoundStmt 0x56406f876f20 <line:178:3, line:183:1>
|     |-BinaryOperator 0x56406f876e00 <line:179:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f876da8 <col:3> 'int8_t':'char' lvalue Var 0x56406f8743f8 'active_side_History_2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f876de8 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f876dc8 <col:27> 'int8_t':'char' lvalue Var 0x56406f874380 'active_side_History_1' 'int8_t':'char'
|     |-BinaryOperator 0x56406f876e78 <line:180:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f876e20 <col:3> 'int8_t':'char' lvalue Var 0x56406f874380 'active_side_History_1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f876e60 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f876e40 <col:27> 'int8_t':'char' lvalue Var 0x56406f874308 'active_side_History_0' 'int8_t':'char'
|     |-BinaryOperator 0x56406f876ef0 <line:181:3, col:27> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f876e98 <col:3> 'int8_t':'char' lvalue Var 0x56406f874308 'active_side_History_0' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f876ed8 <col:27> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f876eb8 <col:27> 'int8_t':'char' lvalue ParmVar 0x56406f876bf8 'val' 'int8_t':'char'
|     `-ReturnStmt 0x56406f876f10 <line:182:3>
|-FunctionDecl 0x56406f877090 <line:185:1, line:203:1> line:185:8 used read_active_side_history 'int8_t (unsigned char)'
| |-ParmVarDecl 0x56406f876f80 <col:33, col:47> col:47 used index 'unsigned char'
| `-CompoundStmt 0x56406f877b08 <line:186:1, line:203:1>
|   `-CompoundStmt 0x56406f877af0 <line:189:3, line:202:1>
|     `-IfStmt 0x56406f877ac8 <line:190:3, line:201:3> has_else
|       |-BinaryOperator 0x56406f8771d0 <line:190:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x56406f877188 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x56406f877170 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x56406f877138 <col:13> 'unsigned char' lvalue ParmVar 0x56406f876f80 'index' 'unsigned char'
|       | `-IntegerLiteral 0x56406f8771b0 <col:22> 'int' 0
|       |-CompoundStmt 0x56406f877678 <col:25, line:192:3>
|       | `-ReturnStmt 0x56406f877668 <line:191:5, col:34>
|       |   `-ImplicitCastExpr 0x56406f877650 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x56406f877630 <col:12, col:34> 'int8_t':'char' lvalue
|       |       `-DeclRefExpr 0x56406f877610 <col:13> 'int8_t':'char' lvalue Var 0x56406f874308 'active_side_History_0' 'int8_t':'char'
|       `-IfStmt 0x56406f877aa0 <line:193:3, line:201:3> has_else
|         |-BinaryOperator 0x56406f877728 <line:193:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x56406f8776e0 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x56406f8776c8 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x56406f877690 <col:13> 'unsigned char' lvalue ParmVar 0x56406f876f80 'index' 'unsigned char'
|         | `-IntegerLiteral 0x56406f877708 <col:22> 'int' 1
|         |-CompoundStmt 0x56406f8777b0 <col:25, line:195:3>
|         | `-ReturnStmt 0x56406f8777a0 <line:194:5, col:34>
|         |   `-ImplicitCastExpr 0x56406f877788 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x56406f877768 <col:12, col:34> 'int8_t':'char' lvalue
|         |       `-DeclRefExpr 0x56406f877748 <col:13> 'int8_t':'char' lvalue Var 0x56406f874380 'active_side_History_1' 'int8_t':'char'
|         `-IfStmt 0x56406f877a78 <line:196:3, line:201:3> has_else
|           |-BinaryOperator 0x56406f877860 <line:196:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x56406f877818 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x56406f877800 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x56406f8777c8 <col:13> 'unsigned char' lvalue ParmVar 0x56406f876f80 'index' 'unsigned char'
|           | `-IntegerLiteral 0x56406f877840 <col:22> 'int' 2
|           |-CompoundStmt 0x56406f8778e8 <col:25, line:198:3>
|           | `-ReturnStmt 0x56406f8778d8 <line:197:5, col:34>
|           |   `-ImplicitCastExpr 0x56406f8778c0 <col:12, col:34> 'int8_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x56406f8778a0 <col:12, col:34> 'int8_t':'char' lvalue
|           |       `-DeclRefExpr 0x56406f877880 <col:13> 'int8_t':'char' lvalue Var 0x56406f8743f8 'active_side_History_2' 'int8_t':'char'
|           `-CompoundStmt 0x56406f877a58 <line:198:10, line:201:3>
|             |-CallExpr 0x56406f877990 <line:199:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x56406f877978 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x56406f877900 <col:5> 'void (_Bool)' Function 0x56406f873da0 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x56406f877950 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x56406f877920 <col:19> 'int' 0
|             `-ReturnStmt 0x56406f877a48 <line:200:5, col:24>
|               `-ParenExpr 0x56406f877a28 <col:12, col:24> 'int8_t':'char'
|                 `-CStyleCastExpr 0x56406f877a00 <col:13, col:23> 'int8_t':'char' <IntegralCast>
|                   `-UnaryOperator 0x56406f8779d8 <col:22, col:23> 'int' prefix '-'
|                     `-IntegerLiteral 0x56406f8779b8 <col:23> 'int' 2
|-FunctionDecl 0x56406f877c00 <line:204:1, line:214:1> line:204:6 used write_manual_selection_history 'void (msg_t)'
| |-ParmVarDecl 0x56406f877b30 <col:37, col:43> col:43 used val 'msg_t':'char'
| `-CompoundStmt 0x56406f877e50 <line:205:1, line:214:1>
|   `-CompoundStmt 0x56406f877e20 <line:208:3, line:213:1>
|     |-BinaryOperator 0x56406f877d00 <line:209:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f877ca8 <col:3> 'msg_t':'char' lvalue Var 0x56406f874560 'manual_selection_History_2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x56406f877ce8 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f877cc8 <col:32> 'msg_t':'char' lvalue Var 0x56406f8744e8 'manual_selection_History_1' 'msg_t':'char'
|     |-BinaryOperator 0x56406f877d78 <line:210:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f877d20 <col:3> 'msg_t':'char' lvalue Var 0x56406f8744e8 'manual_selection_History_1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x56406f877d60 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f877d40 <col:32> 'msg_t':'char' lvalue Var 0x56406f874470 'manual_selection_History_0' 'msg_t':'char'
|     |-BinaryOperator 0x56406f877df0 <line:211:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f877d98 <col:3> 'msg_t':'char' lvalue Var 0x56406f874470 'manual_selection_History_0' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x56406f877dd8 <col:32> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f877db8 <col:32> 'msg_t':'char' lvalue ParmVar 0x56406f877b30 'val' 'msg_t':'char'
|     `-ReturnStmt 0x56406f877e10 <line:212:3>
|-FunctionDecl 0x56406f877f50 <line:215:1, line:233:1> line:215:7 used read_manual_selection_history 'msg_t (unsigned char)'
| |-ParmVarDecl 0x56406f877e80 <col:37, col:51> col:51 used index 'unsigned char'
| `-CompoundStmt 0x56406f878590 <line:216:1, line:233:1>
|   `-CompoundStmt 0x56406f878578 <line:219:3, line:232:1>
|     `-IfStmt 0x56406f878550 <line:220:3, line:231:3> has_else
|       |-BinaryOperator 0x56406f878090 <line:220:7, col:22> 'int' '=='
|       | |-CStyleCastExpr 0x56406f878048 <col:7, col:13> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x56406f878030 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|       | |   `-DeclRefExpr 0x56406f877ff8 <col:13> 'unsigned char' lvalue ParmVar 0x56406f877e80 'index' 'unsigned char'
|       | `-IntegerLiteral 0x56406f878070 <col:22> 'int' 0
|       |-CompoundStmt 0x56406f878118 <col:25, line:222:3>
|       | `-ReturnStmt 0x56406f878108 <line:221:5, col:39>
|       |   `-ImplicitCastExpr 0x56406f8780f0 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|       |     `-ParenExpr 0x56406f8780d0 <col:12, col:39> 'msg_t':'char' lvalue
|       |       `-DeclRefExpr 0x56406f8780b0 <col:13> 'msg_t':'char' lvalue Var 0x56406f874470 'manual_selection_History_0' 'msg_t':'char'
|       `-IfStmt 0x56406f878528 <line:223:3, line:231:3> has_else
|         |-BinaryOperator 0x56406f8781c8 <line:223:7, col:22> 'int' '=='
|         | |-CStyleCastExpr 0x56406f878180 <col:7, col:13> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x56406f878168 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |   `-DeclRefExpr 0x56406f878130 <col:13> 'unsigned char' lvalue ParmVar 0x56406f877e80 'index' 'unsigned char'
|         | `-IntegerLiteral 0x56406f8781a8 <col:22> 'int' 1
|         |-CompoundStmt 0x56406f878250 <col:25, line:225:3>
|         | `-ReturnStmt 0x56406f878240 <line:224:5, col:39>
|         |   `-ImplicitCastExpr 0x56406f878228 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|         |     `-ParenExpr 0x56406f878208 <col:12, col:39> 'msg_t':'char' lvalue
|         |       `-DeclRefExpr 0x56406f8781e8 <col:13> 'msg_t':'char' lvalue Var 0x56406f8744e8 'manual_selection_History_1' 'msg_t':'char'
|         `-IfStmt 0x56406f878500 <line:226:3, line:231:3> has_else
|           |-BinaryOperator 0x56406f878300 <line:226:7, col:22> 'int' '=='
|           | |-CStyleCastExpr 0x56406f8782b8 <col:7, col:13> 'int' <IntegralCast>
|           | | `-ImplicitCastExpr 0x56406f8782a0 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|           | |   `-DeclRefExpr 0x56406f878268 <col:13> 'unsigned char' lvalue ParmVar 0x56406f877e80 'index' 'unsigned char'
|           | `-IntegerLiteral 0x56406f8782e0 <col:22> 'int' 2
|           |-CompoundStmt 0x56406f878388 <col:25, line:228:3>
|           | `-ReturnStmt 0x56406f878378 <line:227:5, col:39>
|           |   `-ImplicitCastExpr 0x56406f878360 <col:12, col:39> 'msg_t':'char' <LValueToRValue>
|           |     `-ParenExpr 0x56406f878340 <col:12, col:39> 'msg_t':'char' lvalue
|           |       `-DeclRefExpr 0x56406f878320 <col:13> 'msg_t':'char' lvalue Var 0x56406f874560 'manual_selection_History_2' 'msg_t':'char'
|           `-CompoundStmt 0x56406f8784e0 <line:228:10, line:231:3>
|             |-CallExpr 0x56406f878430 <line:229:5, col:20> 'void'
|             | |-ImplicitCastExpr 0x56406f878418 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x56406f8783a0 <col:5> 'void (_Bool)' Function 0x56406f873da0 'assert' 'void (_Bool)'
|             | `-CStyleCastExpr 0x56406f8783f0 <col:12, col:19> '_Bool' <IntegralToBoolean>
|             |   `-IntegerLiteral 0x56406f8783c0 <col:19> 'int' 0
|             `-ReturnStmt 0x56406f8784d0 <line:230:5, col:22>
|               `-ParenExpr 0x56406f8784b0 <col:12, col:22> 'msg_t':'char'
|                 `-CStyleCastExpr 0x56406f878488 <col:13, col:21> 'msg_t':'char' <IntegralCast>
|                   `-IntegerLiteral 0x56406f878458 <col:21> 'int' 0
|-FunctionDecl 0x56406f8786e8 <line:234:1, line:277:1> line:234:5 used init 'int (void)'
| `-CompoundStmt 0x56406f879758 <line:235:1, line:277:1>
|   `-CompoundStmt 0x56406f8796e0 <line:238:3, line:276:1>
|     |-IfStmt 0x56406f8788a8 <line:239:3, line:241:3>
|     | |-BinaryOperator 0x56406f878820 <line:239:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f8787d8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f8787c0 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f878788 <col:13> '_Bool' lvalue Var 0x56406f873fe8 'side1Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x56406f878800 <col:38> 'int' 0
|     | `-CompoundStmt 0x56406f878890 <col:41, line:241:3>
|     |   `-ReturnStmt 0x56406f878880 <line:240:5, col:14>
|     |     `-ParenExpr 0x56406f878860 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f878840 <col:13> 'int' 0
|     |-IfStmt 0x56406f8789e0 <line:242:3, line:244:3>
|     | |-BinaryOperator 0x56406f878958 <line:242:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f878910 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f8788f8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f8788c0 <col:13> '_Bool' lvalue Var 0x56406f8741a0 'side2Failed_History_0' '_Bool'
|     | | `-IntegerLiteral 0x56406f878938 <col:38> 'int' 0
|     | `-CompoundStmt 0x56406f8789c8 <col:41, line:244:3>
|     |   `-ReturnStmt 0x56406f8789b8 <line:243:5, col:14>
|     |     `-ParenExpr 0x56406f878998 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f878978 <col:13> 'int' 0
|     |-IfStmt 0x56406f878b30 <line:245:3, line:247:3>
|     | |-BinaryOperator 0x56406f878aa8 <line:245:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f878a48 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f878a30 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f8789f8 <col:13> 'int8_t':'char' lvalue Var 0x56406f874308 'active_side_History_0' 'int8_t':'char'
|     | | `-UnaryOperator 0x56406f878a90 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x56406f878a70 <col:39> 'int' 2
|     | `-CompoundStmt 0x56406f878b18 <col:42, line:247:3>
|     |   `-ReturnStmt 0x56406f878b08 <line:246:5, col:14>
|     |     `-ParenExpr 0x56406f878ae8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f878ac8 <col:13> 'int' 0
|     |-IfStmt 0x56406f878c68 <line:248:3, line:250:3>
|     | |-BinaryOperator 0x56406f878be0 <line:248:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f878b98 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f878b80 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f878b48 <col:13> 'msg_t':'char' lvalue Var 0x56406f874470 'manual_selection_History_0' 'msg_t':'char'
|     | | `-IntegerLiteral 0x56406f878bc0 <col:43> 'int' 0
|     | `-CompoundStmt 0x56406f878c50 <col:46, line:250:3>
|     |   `-ReturnStmt 0x56406f878c40 <line:249:5, col:14>
|     |     `-ParenExpr 0x56406f878c20 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f878c00 <col:13> 'int' 0
|     |-IfStmt 0x56406f878da0 <line:251:3, line:253:3>
|     | |-BinaryOperator 0x56406f878d18 <line:251:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f878cd0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f878cb8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f878c80 <col:13> '_Bool' lvalue Var 0x56406f8740b0 'side1Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x56406f878cf8 <col:38> 'int' 0
|     | `-CompoundStmt 0x56406f878d88 <col:41, line:253:3>
|     |   `-ReturnStmt 0x56406f878d78 <line:252:5, col:14>
|     |     `-ParenExpr 0x56406f878d58 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f878d38 <col:13> 'int' 0
|     |-IfStmt 0x56406f878ed8 <line:254:3, line:256:3>
|     | |-BinaryOperator 0x56406f878e50 <line:254:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f878e08 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f878df0 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f878db8 <col:13> '_Bool' lvalue Var 0x56406f874218 'side2Failed_History_1' '_Bool'
|     | | `-IntegerLiteral 0x56406f878e30 <col:38> 'int' 0
|     | `-CompoundStmt 0x56406f878ec0 <col:41, line:256:3>
|     |   `-ReturnStmt 0x56406f878eb0 <line:255:5, col:14>
|     |     `-ParenExpr 0x56406f878e90 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f878e70 <col:13> 'int' 0
|     |-IfStmt 0x56406f879028 <line:257:3, line:259:3>
|     | |-BinaryOperator 0x56406f878fa0 <line:257:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f878f40 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f878f28 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f878ef0 <col:13> 'int8_t':'char' lvalue Var 0x56406f874380 'active_side_History_1' 'int8_t':'char'
|     | | `-UnaryOperator 0x56406f878f88 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x56406f878f68 <col:39> 'int' 2
|     | `-CompoundStmt 0x56406f879010 <col:42, line:259:3>
|     |   `-ReturnStmt 0x56406f879000 <line:258:5, col:14>
|     |     `-ParenExpr 0x56406f878fe0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f878fc0 <col:13> 'int' 0
|     |-IfStmt 0x56406f879160 <line:260:3, line:262:3>
|     | |-BinaryOperator 0x56406f8790d8 <line:260:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f879090 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f879078 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f879040 <col:13> 'msg_t':'char' lvalue Var 0x56406f8744e8 'manual_selection_History_1' 'msg_t':'char'
|     | | `-IntegerLiteral 0x56406f8790b8 <col:43> 'int' 0
|     | `-CompoundStmt 0x56406f879148 <col:46, line:262:3>
|     |   `-ReturnStmt 0x56406f879138 <line:261:5, col:14>
|     |     `-ParenExpr 0x56406f879118 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f8790f8 <col:13> 'int' 0
|     |-IfStmt 0x56406f879298 <line:263:3, line:265:3>
|     | |-BinaryOperator 0x56406f879210 <line:263:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f8791c8 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f8791b0 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f879178 <col:13> '_Bool' lvalue Var 0x56406f874128 'side1Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x56406f8791f0 <col:38> 'int' 0
|     | `-CompoundStmt 0x56406f879280 <col:41, line:265:3>
|     |   `-ReturnStmt 0x56406f879270 <line:264:5, col:14>
|     |     `-ParenExpr 0x56406f879250 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f879230 <col:13> 'int' 0
|     |-IfStmt 0x56406f8793d0 <line:266:3, line:268:3>
|     | |-BinaryOperator 0x56406f879348 <line:266:7, col:38> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f879300 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f8792e8 <col:13> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f8792b0 <col:13> '_Bool' lvalue Var 0x56406f874290 'side2Failed_History_2' '_Bool'
|     | | `-IntegerLiteral 0x56406f879328 <col:38> 'int' 0
|     | `-CompoundStmt 0x56406f8793b8 <col:41, line:268:3>
|     |   `-ReturnStmt 0x56406f8793a8 <line:267:5, col:14>
|     |     `-ParenExpr 0x56406f879388 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f879368 <col:13> 'int' 0
|     |-IfStmt 0x56406f879520 <line:269:3, line:271:3>
|     | |-BinaryOperator 0x56406f879498 <line:269:7, col:39> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f879438 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f879420 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f8793e8 <col:13> 'int8_t':'char' lvalue Var 0x56406f8743f8 'active_side_History_2' 'int8_t':'char'
|     | | `-UnaryOperator 0x56406f879480 <col:38, col:39> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x56406f879460 <col:39> 'int' 2
|     | `-CompoundStmt 0x56406f879508 <col:42, line:271:3>
|     |   `-ReturnStmt 0x56406f8794f8 <line:270:5, col:14>
|     |     `-ParenExpr 0x56406f8794d8 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f8794b8 <col:13> 'int' 0
|     |-IfStmt 0x56406f879678 <line:272:3, line:274:3>
|     | |-BinaryOperator 0x56406f8795d0 <line:272:7, col:43> 'int' '!='
|     | | |-CStyleCastExpr 0x56406f879588 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f879570 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f879538 <col:13> 'msg_t':'char' lvalue Var 0x56406f874560 'manual_selection_History_2' 'msg_t':'char'
|     | | `-IntegerLiteral 0x56406f8795b0 <col:43> 'int' 0
|     | `-CompoundStmt 0x56406f879660 <col:46, line:274:3>
|     |   `-ReturnStmt 0x56406f879650 <line:273:5, col:14>
|     |     `-ParenExpr 0x56406f879630 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x56406f8795f0 <col:13> 'int' 0
|     `-ReturnStmt 0x56406f8796d0 <line:275:3, col:12>
|       `-ParenExpr 0x56406f8796b0 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x56406f879690 <col:11> 'int' 1
|-FunctionDecl 0x56406f879890 <line:278:1, line:290:1> line:278:8 used flip_the_side 'int8_t (int8_t)'
| |-ParmVarDecl 0x56406f879780 <col:22, col:29> col:29 used side 'int8_t':'char'
| `-CompoundStmt 0x56406f879c60 <line:279:1, line:290:1>
|   |-DeclStmt 0x56406f8799b8 <line:280:3, col:11>
|   | `-VarDecl 0x56406f879950 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x56406f879c40 <line:282:3, line:289:1>
|     |-IfStmt 0x56406f879b78 <line:283:3, line:287:3> has_else
|     | |-BinaryOperator 0x56406f879a68 <line:283:7, col:21> 'int' '=='
|     | | |-CStyleCastExpr 0x56406f879a20 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f879a08 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f8799d0 <col:13> 'int8_t':'char' lvalue ParmVar 0x56406f879780 'side' 'int8_t':'char'
|     | | `-IntegerLiteral 0x56406f879a48 <col:21> 'int' 1
|     | |-CompoundStmt 0x56406f879ae8 <col:24, line:285:3>
|     | | `-BinaryOperator 0x56406f879ac8 <line:284:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x56406f879a88 <col:5> 'int' lvalue Var 0x56406f879950 'tmp' 'int'
|     | |   `-IntegerLiteral 0x56406f879aa8 <col:11> 'int' 0
|     | `-CompoundStmt 0x56406f879b60 <line:285:10, line:287:3>
|     |   `-BinaryOperator 0x56406f879b40 <line:286:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x56406f879b00 <col:5> 'int' lvalue Var 0x56406f879950 'tmp' 'int'
|     |     `-IntegerLiteral 0x56406f879b20 <col:11> 'int' 1
|     `-ReturnStmt 0x56406f879c30 <line:288:3, col:23>
|       `-ParenExpr 0x56406f879c10 <col:10, col:23> 'int8_t':'char'
|         `-CStyleCastExpr 0x56406f879be8 <col:11, col:20> 'int8_t':'char' <IntegralCast>
|           `-ImplicitCastExpr 0x56406f879bd0 <col:20> 'int' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x56406f879ba0 <col:20> 'int' lvalue Var 0x56406f879950 'tmp' 'int'
|-FunctionDecl 0x56406f879d50 <line:291:1, line:305:1> line:291:6 used Console_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x56406f87a7e0 <line:292:1, line:305:1>
|   |-DeclStmt 0x56406f879e68 <line:293:3, col:26>
|   | `-VarDecl 0x56406f879e00 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x56406f879ef8 <line:294:3, col:12>
|   | `-VarDecl 0x56406f879e90 <col:3, col:8> col:8 used tmp 'char'
|   `-CompoundStmt 0x56406f87a798 <line:296:3, line:304:1>
|     |-BinaryOperator 0x56406f879fb8 <line:297:3, col:32> 'char' '='
|     | |-DeclRefExpr 0x56406f879f10 <col:3> 'char' lvalue Var 0x56406f879e90 'tmp' 'char'
|     | `-CallExpr 0x56406f879f98 <col:9, col:32> 'char'
|     |   `-ImplicitCastExpr 0x56406f879f80 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x56406f879f30 <col:9> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|     |-BinaryOperator 0x56406f87a030 <line:298:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f879fd8 <col:3> 'msg_t':'char' lvalue Var 0x56406f879e00 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x56406f87a018 <col:22> 'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f879ff8 <col:22> 'char' lvalue Var 0x56406f879e90 'tmp' 'char'
|     |-CallExpr 0x56406f87a108 <line:299:3, col:50> 'void'
|     | |-ImplicitCastExpr 0x56406f87a0f0 <col:3> 'void (*)(msg_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56406f87a050 <col:3> 'void (msg_t)' Function 0x56406f877c00 'write_manual_selection_history' 'void (msg_t)'
|     | `-ImplicitCastExpr 0x56406f87a130 <col:34> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87a070 <col:34> 'msg_t':'char' lvalue Var 0x56406f879e00 'manual_selection' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87a3f0 <line:300:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87a148 <col:3> 'int8_t':'char' lvalue Var 0x56406f84c158 'cs1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87a3d8 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x56406f87a3a8 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x56406f87a2e8 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x56406f87a208 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x56406f87a1d8 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x56406f87a1a8 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x56406f87a168 <col:13> 'msg_t':'char' lvalue Var 0x56406f879e00 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x56406f87a1f0 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x56406f87a1c0 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x56406f87a188 <col:33> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x56406f87a2c8 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x56406f87a298 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x56406f87a268 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x56406f87a228 <col:42> 'int8_t':'char' lvalue Var 0x56406f84c158 'cs1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x56406f87a2b0 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x56406f87a280 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x56406f87a248 <col:53> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x56406f87a360 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x56406f87a348 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f87a308 <col:61> 'msg_t':'char' lvalue Var 0x56406f879e00 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x56406f87a390 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x56406f87a378 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x56406f87a328 <col:80> 'int8_t':'char' lvalue Var 0x56406f84c158 'cs1_new' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87a6d0 <line:301:3, col:80> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87a410 <col:3> 'int8_t':'char' lvalue Var 0x56406f84c2c0 'cs2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87a6b8 <col:13, col:80> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x56406f87a688 <col:13, col:80> 'int'
|     |     |-BinaryOperator 0x56406f87a5b0 <col:13, col:53> 'int' '&&'
|     |     | |-BinaryOperator 0x56406f87a4d0 <col:13, col:33> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x56406f87a4a0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x56406f87a470 <col:13> 'msg_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x56406f87a430 <col:13> 'msg_t':'char' lvalue Var 0x56406f879e00 'manual_selection' 'msg_t':'char'
|     |     | | `-ImplicitCastExpr 0x56406f87a4b8 <col:33> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x56406f87a488 <col:33> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x56406f87a450 <col:33> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x56406f87a590 <col:42, col:53> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x56406f87a560 <col:42> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x56406f87a530 <col:42> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x56406f87a4f0 <col:42> 'int8_t':'char' lvalue Var 0x56406f84c2c0 'cs2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x56406f87a578 <col:53> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x56406f87a548 <col:53> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x56406f87a510 <col:53> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x56406f87a640 <col:61> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x56406f87a610 <col:61> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f87a5d0 <col:61> 'msg_t':'char' lvalue Var 0x56406f879e00 'manual_selection' 'msg_t':'char'
|     |     `-ImplicitCastExpr 0x56406f87a670 <col:80> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x56406f87a658 <col:80> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x56406f87a5f0 <col:80> 'int8_t':'char' lvalue Var 0x56406f84c2c0 'cs2_new' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87a768 <line:302:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f87a6f0 <col:3> 'msg_t':'char' lvalue Var 0x56406f879e00 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x56406f87a740 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x56406f87a710 <col:30> 'int' 0
|     `-ReturnStmt 0x56406f87a788 <line:303:3>
|-FunctionDecl 0x56406f87a8a0 <line:306:1, line:362:1> line:306:6 used Side1_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x56406f87d610 <line:307:1, line:362:1>
|   |-DeclStmt 0x56406f87a9b8 <line:308:3, col:16>
|   | `-VarDecl 0x56406f87a950 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x56406f87aa48 <line:309:3, col:16>
|   | `-VarDecl 0x56406f87a9e0 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x56406f87aad8 <line:310:3, col:26>
|   | `-VarDecl 0x56406f87aa70 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x56406f87ab68 <line:311:3, col:21>
|   | `-VarDecl 0x56406f87ab00 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x56406f87d570 <line:313:3, line:361:1>
|     |-BinaryOperator 0x56406f87abd8 <line:314:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87ab80 <col:3> 'int8_t':'char' lvalue Var 0x56406f87a950 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87abc0 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87aba0 <col:11> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87ac50 <line:315:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87abf8 <col:3> 'int8_t':'char' lvalue Var 0x56406f87a9e0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87ac38 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87ac18 <col:11> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87ace8 <line:316:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f87ac70 <col:3> 'msg_t':'char' lvalue Var 0x56406f87aa70 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x56406f87acc0 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x56406f87ac90 <col:30> 'int' 0
|     |-BinaryOperator 0x56406f87adb8 <line:317:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x56406f87ad08 <col:3> '_Bool' lvalue Var 0x56406f873af0 'side1Failed' '_Bool'
|     | `-CallExpr 0x56406f87ad98 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x56406f87ad80 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x56406f87ad28 <col:17> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x56406f87ae30 <line:318:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x56406f87ae18 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56406f87add8 <col:3> 'void (_Bool)' Function 0x56406f874668 'write_side1_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x56406f87ae58 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87adf8 <col:30> '_Bool' lvalue Var 0x56406f873af0 'side1Failed' '_Bool'
|     |-IfStmt 0x56406f87b918 <line:319:3, line:325:3>
|     | |-ImplicitCastExpr 0x56406f87ae90 <line:319:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x56406f87ae70 <col:7> '_Bool' lvalue Var 0x56406f873af0 'side1Failed' '_Bool'
|     | `-CompoundStmt 0x56406f87b8e0 <col:20, line:325:3>
|     |   |-BinaryOperator 0x56406f87b150 <line:320:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f87aea8 <col:5> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x56406f87b138 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x56406f87b108 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x56406f87b048 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x56406f87af68 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x56406f87af38 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x56406f87af08 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x56406f87aec8 <col:16> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x56406f87af50 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x56406f87af20 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x56406f87aee8 <col:25> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x56406f87b028 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x56406f87aff8 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x56406f87afc8 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x56406f87af88 <col:34> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x56406f87b010 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x56406f87afe0 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x56406f87afa8 <col:46> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x56406f87b0c0 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x56406f87b0a8 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x56406f87b068 <col:54> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x56406f87b0f0 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x56406f87b0d8 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x56406f87b088 <col:62> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x56406f87b418 <line:321:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f87b170 <col:5> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x56406f87b400 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x56406f87b3d0 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x56406f87b310 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x56406f87b230 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x56406f87b200 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x56406f87b1d0 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x56406f87b190 <col:16> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x56406f87b218 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x56406f87b1e8 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x56406f87b1b0 <col:25> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x56406f87b2f0 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x56406f87b2c0 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x56406f87b290 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x56406f87b250 <col:34> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x56406f87b2d8 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x56406f87b2a8 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x56406f87b270 <col:46> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x56406f87b388 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x56406f87b370 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x56406f87b330 <col:54> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x56406f87b3b8 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x56406f87b3a0 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x56406f87b350 <col:62> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x56406f87b838 <line:322:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f87b438 <col:5> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x56406f87b820 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x56406f87b7f0 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x56406f87b5d8 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x56406f87b4f8 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x56406f87b4c8 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x56406f87b498 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x56406f87b458 <col:15> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x56406f87b4e0 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x56406f87b4b0 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x56406f87b478 <col:24> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x56406f87b5b8 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x56406f87b588 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x56406f87b558 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x56406f87b518 <col:33> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x56406f87b5a0 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x56406f87b570 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x56406f87b538 <col:44> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x56406f87b7a8 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x56406f87b790 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x56406f87b5f8 <col:52> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x56406f87b7d8 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x56406f87b7c0 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x56406f87b618 <col:60> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x56406f87b8b0 <line:323:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f87b858 <col:5> 'msg_t':'char' lvalue Var 0x56406f873be0 'side1_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x56406f87b898 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x56406f87b878 <col:21> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x56406f87b8d0 <line:324:5>
|     |-BinaryOperator 0x56406f87b988 <line:326:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87b930 <col:3> 'int8_t':'char' lvalue Var 0x56406f87a950 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87b970 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87b950 <col:11> 'int8_t':'char' lvalue Var 0x56406f873280 's1s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87ba00 <line:327:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87b9a8 <col:3> 'int8_t':'char' lvalue Var 0x56406f873280 's1s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87b9e8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87b9c8 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87ba78 <line:328:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87ba20 <col:3> 'int8_t':'char' lvalue Var 0x56406f87a9e0 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87ba60 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87ba40 <col:11> 'int8_t':'char' lvalue Var 0x56406f8733e8 's2s1_old' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87baf0 <line:329:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87ba98 <col:3> 'int8_t':'char' lvalue Var 0x56406f8733e8 's2s1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87bad8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87bab8 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87bb68 <line:330:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f87bb10 <col:3> 'msg_t':'char' lvalue Var 0x56406f87aa70 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x56406f87bb50 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87bb30 <col:22> 'int8_t':'char' lvalue Var 0x56406f84c0e0 'cs1_old' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87bbe0 <line:331:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87bb88 <col:3> 'int8_t':'char' lvalue Var 0x56406f84c0e0 'cs1_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87bbc8 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87bba8 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x56406f87cc68 <line:332:3, line:355:3> has_else
|     | |-BinaryOperator 0x56406f87bcf0 <line:332:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x56406f87bc50 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f87bc38 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f87bc00 <col:13> 'int8_t':'char' lvalue Var 0x56406f87a950 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x56406f87bcc8 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x56406f87bcb0 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x56406f87bc78 <col:28> 'int8_t':'char' lvalue Var 0x56406f87a9e0 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x56406f87bda8 <col:35, line:334:3>
|     | | `-BinaryOperator 0x56406f87bd88 <line:333:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x56406f87bd10 <col:5> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x56406f87bd60 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x56406f87bd30 <col:27> 'int' 1
|     | `-IfStmt 0x56406f87cc40 <line:335:3, line:355:3> has_else
|     |   |-BinaryOperator 0x56406f87beb0 <line:335:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x56406f87be10 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x56406f87bdf8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x56406f87bdc0 <col:13> 'int8_t':'char' lvalue Var 0x56406f87a950 'side1' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x56406f87be88 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x56406f87be70 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x56406f87be38 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x56406f87c138 <col:35, line:341:3>
|     |   | `-IfStmt 0x56406f87c110 <line:336:5, line:340:5> has_else
|     |   |   |-BinaryOperator 0x56406f87bfc0 <line:336:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x56406f87bf20 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x56406f87bf08 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x56406f87bed0 <col:15> 'int8_t':'char' lvalue Var 0x56406f87a9e0 'side2' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x56406f87bf98 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x56406f87bf80 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x56406f87bf48 <col:30> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x56406f87c078 <col:37, line:338:5>
|     |   |   | `-BinaryOperator 0x56406f87c058 <line:337:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x56406f87bfe0 <col:7> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x56406f87c030 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x56406f87c000 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x56406f87c0f8 <line:338:12, line:340:5>
|     |   |     `-GotoStmt 0x56406f87c0e0 <line:339:7, col:12> '_L___0' 0x56406f87c090
|     |   `-LabelStmt 0x56406f87cc28 <line:342:3, line:355:3> '_L___0'
|     |     `-IfStmt 0x56406f87cc00 <line:343:3, line:355:3> has_else
|     |       |-BinaryOperator 0x56406f87c240 <line:343:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x56406f87c1a0 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x56406f87c188 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x56406f87c150 <col:13> 'int8_t':'char' lvalue Var 0x56406f87a950 'side1' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x56406f87c218 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x56406f87c200 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x56406f87c1c8 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x56406f87c4c8 <col:35, line:349:3>
|     |       | `-IfStmt 0x56406f87c4a0 <line:344:5, line:348:5> has_else
|     |       |   |-BinaryOperator 0x56406f87c350 <line:344:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x56406f87c2b0 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x56406f87c298 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x56406f87c260 <col:15> 'int8_t':'char' lvalue Var 0x56406f87a9e0 'side2' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x56406f87c328 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x56406f87c310 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x56406f87c2d8 <col:30> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x56406f87c408 <col:37, line:346:5>
|     |       |   | `-BinaryOperator 0x56406f87c3e8 <line:345:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x56406f87c370 <col:7> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x56406f87c3c0 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x56406f87c390 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x56406f87c488 <line:346:12, line:348:5>
|     |       |     `-GotoStmt 0x56406f87c470 <line:347:7, col:12> '_L' 0x56406f87c420
|     |       `-LabelStmt 0x56406f87cbe8 <line:350:3, line:355:3> '_L'
|     |         `-IfStmt 0x56406f87cbc0 <line:351:3, line:355:3> has_else
|     |           |-BinaryOperator 0x56406f87c578 <line:351:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x56406f87c530 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x56406f87c518 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x56406f87c4e0 <col:13> 'msg_t':'char' lvalue Var 0x56406f87aa70 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x56406f87c558 <col:33> 'int' 1
|     |           |-CompoundStmt 0x56406f87c6d8 <col:36, line:353:3>
|     |           | `-BinaryOperator 0x56406f87c6b8 <line:352:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x56406f87c598 <col:5> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x56406f87c678 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x56406f87c660 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x56406f87c5b8 <col:18> 'int8_t (int8_t)' Function 0x56406f879890 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x56406f87c6a0 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x56406f87c5d8 <col:32> 'int8_t':'char' lvalue Var 0x56406f87a950 'side1' 'int8_t':'char'
|     |           `-CompoundStmt 0x56406f87c768 <line:353:10, line:355:3>
|     |             `-BinaryOperator 0x56406f87c748 <line:354:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x56406f87c6f0 <col:5> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x56406f87c730 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x56406f87c710 <col:18> 'int8_t':'char' lvalue Var 0x56406f87a950 'side1' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87cf38 <line:356:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87cc90 <col:3> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87cf20 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x56406f87cef0 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x56406f87ce30 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x56406f87cd50 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x56406f87cd20 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x56406f87ccf0 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x56406f87ccb0 <col:14> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x56406f87cd38 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x56406f87cd08 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x56406f87ccd0 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x56406f87ce10 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x56406f87cde0 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x56406f87cdb0 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x56406f87cd70 <col:37> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x56406f87cdf8 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x56406f87cdc8 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x56406f87cd90 <col:49> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x56406f87cea8 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x56406f87ce90 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f87ce50 <col:57> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x56406f87ced8 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x56406f87cec0 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x56406f87ce70 <col:70> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87d200 <line:357:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87cf58 <col:3> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87d1e8 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x56406f87d1b8 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x56406f87d0f8 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x56406f87d018 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x56406f87cfe8 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x56406f87cfb8 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x56406f87cf78 <col:14> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x56406f87d000 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x56406f87cfd0 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x56406f87cf98 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x56406f87d0d8 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x56406f87d0a8 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x56406f87d078 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x56406f87d038 <col:37> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x56406f87d0c0 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x56406f87d090 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x56406f87d058 <col:49> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x56406f87d170 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x56406f87d158 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f87d118 <col:57> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x56406f87d1a0 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x56406f87d188 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x56406f87d138 <col:70> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87d4c8 <line:358:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87d220 <col:3> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87d4b0 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x56406f87d480 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x56406f87d3c0 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x56406f87d2e0 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x56406f87d2b0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x56406f87d280 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x56406f87d240 <col:13> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x56406f87d2c8 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x56406f87d298 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x56406f87d260 <col:27> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x56406f87d3a0 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x56406f87d370 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x56406f87d340 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x56406f87d300 <col:36> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x56406f87d388 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x56406f87d358 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x56406f87d320 <col:47> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x56406f87d438 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x56406f87d420 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f87d3e0 <col:55> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x56406f87d468 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x56406f87d450 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x56406f87d400 <col:68> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87d540 <line:359:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f87d4e8 <col:3> 'msg_t':'char' lvalue Var 0x56406f873be0 'side1_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x56406f87d528 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87d508 <col:19> 'int8_t':'char' lvalue Var 0x56406f87ab00 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x56406f87d560 <line:360:3>
|-FunctionDecl 0x56406f87d6e0 <line:363:1, line:419:1> line:363:6 used Side2_activestandby_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x56406f87fe60 <line:364:1, line:419:1>
|   |-DeclStmt 0x56406f87d7f8 <line:365:3, col:16>
|   | `-VarDecl 0x56406f87d790 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x56406f87d888 <line:366:3, col:16>
|   | `-VarDecl 0x56406f87d820 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   |-DeclStmt 0x56406f87d918 <line:367:3, col:26>
|   | `-VarDecl 0x56406f87d8b0 <col:3, col:9> col:9 used manual_selection 'msg_t':'char'
|   |-DeclStmt 0x56406f87d9a8 <line:368:3, col:21>
|   | `-VarDecl 0x56406f87d940 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   `-CompoundStmt 0x56406f87fdc0 <line:370:3, line:418:1>
|     |-BinaryOperator 0x56406f87da18 <line:371:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87d9c0 <col:3> 'int8_t':'char' lvalue Var 0x56406f87d790 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87da00 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87d9e0 <col:11> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87da90 <line:372:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87da38 <col:3> 'int8_t':'char' lvalue Var 0x56406f87d820 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87da78 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87da58 <col:11> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87db28 <line:373:3, col:30> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f87dab0 <col:3> 'msg_t':'char' lvalue Var 0x56406f87d8b0 'manual_selection' 'msg_t':'char'
|     | `-CStyleCastExpr 0x56406f87db00 <col:22, col:30> 'msg_t':'char' <IntegralCast>
|     |   `-IntegerLiteral 0x56406f87dad0 <col:30> 'int' 0
|     |-BinaryOperator 0x56406f87dbd0 <line:374:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x56406f87db48 <col:3> '_Bool' lvalue Var 0x56406f873b68 'side2Failed' '_Bool'
|     | `-CallExpr 0x56406f87dba0 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x56406f87db88 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x56406f87db68 <col:17> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x56406f87dc48 <line:375:3, col:41> 'void'
|     | |-ImplicitCastExpr 0x56406f87dc30 <col:3> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56406f87dbf0 <col:3> 'void (_Bool)' Function 0x56406f876280 'write_side2_failed_history' 'void (_Bool)'
|     | `-ImplicitCastExpr 0x56406f87dc70 <col:30> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87dc10 <col:30> '_Bool' lvalue Var 0x56406f873b68 'side2Failed' '_Bool'
|     |-IfStmt 0x56406f87e5d8 <line:376:3, line:382:3>
|     | |-ImplicitCastExpr 0x56406f87dca8 <line:376:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x56406f87dc88 <col:7> '_Bool' lvalue Var 0x56406f873b68 'side2Failed' '_Bool'
|     | `-CompoundStmt 0x56406f87e5a0 <col:20, line:382:3>
|     |   |-BinaryOperator 0x56406f87df68 <line:377:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f87dcc0 <col:5> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x56406f87df50 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x56406f87df20 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x56406f87de60 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x56406f87dd80 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x56406f87dd50 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x56406f87dd20 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x56406f87dce0 <col:16> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x56406f87dd68 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x56406f87dd38 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x56406f87dd00 <col:25> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x56406f87de40 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x56406f87de10 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x56406f87dde0 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x56406f87dda0 <col:34> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x56406f87de28 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x56406f87ddf8 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x56406f87ddc0 <col:46> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x56406f87ded8 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x56406f87dec0 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x56406f87de80 <col:54> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x56406f87df08 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x56406f87def0 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x56406f87dea0 <col:62> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x56406f87e230 <line:378:5, col:62> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f87df88 <col:5> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x56406f87e218 <col:16, col:62> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x56406f87e1e8 <col:16, col:62> 'int'
|     |   |     |-BinaryOperator 0x56406f87e128 <col:16, col:46> 'int' '&&'
|     |   |     | |-BinaryOperator 0x56406f87e048 <col:16, col:25> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x56406f87e018 <col:16> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x56406f87dfe8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x56406f87dfa8 <col:16> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x56406f87e030 <col:25> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x56406f87e000 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x56406f87dfc8 <col:25> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x56406f87e108 <col:34, col:46> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x56406f87e0d8 <col:34> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x56406f87e0a8 <col:34> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x56406f87e068 <col:34> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x56406f87e0f0 <col:46> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x56406f87e0c0 <col:46> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x56406f87e088 <col:46> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x56406f87e1a0 <col:54> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x56406f87e188 <col:54> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x56406f87e148 <col:54> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x56406f87e1d0 <col:62> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x56406f87e1b8 <col:62> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x56406f87e168 <col:62> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x56406f87e4f8 <line:379:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f87e250 <col:5> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x56406f87e4e0 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x56406f87e4b0 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x56406f87e3f0 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x56406f87e310 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x56406f87e2e0 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x56406f87e2b0 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x56406f87e270 <col:15> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x56406f87e2f8 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x56406f87e2c8 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x56406f87e290 <col:24> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x56406f87e3d0 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x56406f87e3a0 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x56406f87e370 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x56406f87e330 <col:33> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x56406f87e3b8 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x56406f87e388 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x56406f87e350 <col:44> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x56406f87e468 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x56406f87e450 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x56406f87e410 <col:52> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x56406f87e498 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x56406f87e480 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x56406f87e430 <col:60> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|     |   |-BinaryOperator 0x56406f87e570 <line:380:5, col:21> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f87e518 <col:5> 'msg_t':'char' lvalue Var 0x56406f873c58 'side2_written' 'msg_t':'char'
|     |   | `-ImplicitCastExpr 0x56406f87e558 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x56406f87e538 <col:21> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   `-ReturnStmt 0x56406f87e590 <line:381:5>
|     |-BinaryOperator 0x56406f87e648 <line:383:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87e5f0 <col:3> 'int8_t':'char' lvalue Var 0x56406f87d790 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87e630 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87e610 <col:11> 'int8_t':'char' lvalue Var 0x56406f873118 's1s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87e6c0 <line:384:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87e668 <col:3> 'int8_t':'char' lvalue Var 0x56406f873118 's1s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87e6a8 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87e688 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87e738 <line:385:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87e6e0 <col:3> 'int8_t':'char' lvalue Var 0x56406f87d820 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87e720 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87e700 <col:11> 'int8_t':'char' lvalue Var 0x56406f873550 's2s2_old' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87e7b0 <line:386:3, col:14> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87e758 <col:3> 'int8_t':'char' lvalue Var 0x56406f873550 's2s2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87e798 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87e778 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f87e828 <line:387:3, col:22> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f87e7d0 <col:3> 'msg_t':'char' lvalue Var 0x56406f87d8b0 'manual_selection' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x56406f87e810 <col:22> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87e7f0 <col:22> 'int8_t':'char' lvalue Var 0x56406f84c248 'cs2_old' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87e8a0 <line:388:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87e848 <col:3> 'int8_t':'char' lvalue Var 0x56406f84c248 'cs2_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87e888 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87e868 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x56406f87f498 <line:389:3, line:412:3> has_else
|     | |-BinaryOperator 0x56406f87e9b0 <line:389:7, col:28> 'int' '=='
|     | | |-CStyleCastExpr 0x56406f87e910 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f87e8f8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f87e8c0 <col:13> 'int8_t':'char' lvalue Var 0x56406f87d790 'side1' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x56406f87e988 <col:22, col:28> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x56406f87e970 <col:28> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x56406f87e938 <col:28> 'int8_t':'char' lvalue Var 0x56406f87d820 'side2' 'int8_t':'char'
|     | |-CompoundStmt 0x56406f87ea68 <col:35, line:391:3>
|     | | `-BinaryOperator 0x56406f87ea48 <line:390:5, col:27> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x56406f87e9d0 <col:5> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x56406f87ea20 <col:18, col:27> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x56406f87e9f0 <col:27> 'int' 0
|     | `-IfStmt 0x56406f87f470 <line:392:3, line:412:3> has_else
|     |   |-BinaryOperator 0x56406f87eb70 <line:392:7, col:28> 'int' '=='
|     |   | |-CStyleCastExpr 0x56406f87ead0 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x56406f87eab8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x56406f87ea80 <col:13> 'int8_t':'char' lvalue Var 0x56406f87d790 'side1' 'int8_t':'char'
|     |   | `-CStyleCastExpr 0x56406f87eb48 <col:22, col:28> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x56406f87eb30 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x56406f87eaf8 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |-CompoundStmt 0x56406f87ee10 <col:35, line:398:3>
|     |   | `-IfStmt 0x56406f87ede8 <line:393:5, line:397:5> has_else
|     |   |   |-BinaryOperator 0x56406f87ec98 <line:393:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x56406f87ebf8 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x56406f87ebe0 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x56406f87eb90 <col:15> 'int8_t':'char' lvalue Var 0x56406f87d820 'side2' 'int8_t':'char'
|     |   |   | `-CStyleCastExpr 0x56406f87ec70 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x56406f87ec58 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x56406f87ec20 <col:30> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x56406f87ed50 <col:37, line:395:5>
|     |   |   | `-BinaryOperator 0x56406f87ed30 <line:394:7, col:29> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x56406f87ecb8 <col:7> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |   |   |   `-CStyleCastExpr 0x56406f87ed08 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |   |   |     `-IntegerLiteral 0x56406f87ecd8 <col:29> 'int' 0
|     |   |   `-CompoundStmt 0x56406f87edd0 <line:395:12, line:397:5>
|     |   |     `-GotoStmt 0x56406f87edb8 <line:396:7, col:12> '_L___0' 0x56406f87ed68
|     |   `-LabelStmt 0x56406f87f458 <line:399:3, line:412:3> '_L___0'
|     |     `-IfStmt 0x56406f87f430 <line:400:3, line:412:3> has_else
|     |       |-BinaryOperator 0x56406f87ef18 <line:400:7, col:28> 'int' '!='
|     |       | |-CStyleCastExpr 0x56406f87ee78 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x56406f87ee60 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x56406f87ee28 <col:13> 'int8_t':'char' lvalue Var 0x56406f87d790 'side1' 'int8_t':'char'
|     |       | `-CStyleCastExpr 0x56406f87eef0 <col:22, col:28> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x56406f87eed8 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x56406f87eea0 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x56406f87f1a0 <col:35, line:406:3>
|     |       | `-IfStmt 0x56406f87f178 <line:401:5, line:405:5> has_else
|     |       |   |-BinaryOperator 0x56406f87f028 <line:401:9, col:30> 'int' '=='
|     |       |   | |-CStyleCastExpr 0x56406f87ef88 <col:9, col:15> 'int' <IntegralCast>
|     |       |   | | `-ImplicitCastExpr 0x56406f87ef70 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   | |   `-DeclRefExpr 0x56406f87ef38 <col:15> 'int8_t':'char' lvalue Var 0x56406f87d820 'side2' 'int8_t':'char'
|     |       |   | `-CStyleCastExpr 0x56406f87f000 <col:24, col:30> 'int' <IntegralCast>
|     |       |   |   `-ImplicitCastExpr 0x56406f87efe8 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |   |     `-DeclRefExpr 0x56406f87efb0 <col:30> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |       |   |-CompoundStmt 0x56406f87f0e0 <col:37, line:403:5>
|     |       |   | `-BinaryOperator 0x56406f87f0c0 <line:402:7, col:29> 'int8_t':'char' '='
|     |       |   |   |-DeclRefExpr 0x56406f87f048 <col:7> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |       |   |   `-CStyleCastExpr 0x56406f87f098 <col:20, col:29> 'int8_t':'char' <IntegralCast>
|     |       |   |     `-IntegerLiteral 0x56406f87f068 <col:29> 'int' 1
|     |       |   `-CompoundStmt 0x56406f87f160 <line:403:12, line:405:5>
|     |       |     `-GotoStmt 0x56406f87f148 <line:404:7, col:12> '_L' 0x56406f87f0f8
|     |       `-LabelStmt 0x56406f87f418 <line:407:3, line:412:3> '_L'
|     |         `-IfStmt 0x56406f87f3f0 <line:408:3, line:412:3> has_else
|     |           |-BinaryOperator 0x56406f87f250 <line:408:7, col:33> 'int' '=='
|     |           | |-CStyleCastExpr 0x56406f87f208 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x56406f87f1f0 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x56406f87f1b8 <col:13> 'msg_t':'char' lvalue Var 0x56406f87d8b0 'manual_selection' 'msg_t':'char'
|     |           | `-IntegerLiteral 0x56406f87f230 <col:33> 'int' 1
|     |           |-CompoundStmt 0x56406f87f348 <col:36, line:410:3>
|     |           | `-BinaryOperator 0x56406f87f328 <line:409:5, col:37> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x56406f87f270 <col:5> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |           |   `-CallExpr 0x56406f87f2e8 <col:18, col:37> 'int8_t':'char'
|     |           |     |-ImplicitCastExpr 0x56406f87f2d0 <col:18> 'int8_t (*)(int8_t)' <FunctionToPointerDecay>
|     |           |     | `-DeclRefExpr 0x56406f87f290 <col:18> 'int8_t (int8_t)' Function 0x56406f879890 'flip_the_side' 'int8_t (int8_t)'
|     |           |     `-ImplicitCastExpr 0x56406f87f310 <col:32> 'int8_t':'char' <LValueToRValue>
|     |           |       `-DeclRefExpr 0x56406f87f2b0 <col:32> 'int8_t':'char' lvalue Var 0x56406f87d820 'side2' 'int8_t':'char'
|     |           `-CompoundStmt 0x56406f87f3d8 <line:410:10, line:412:3>
|     |             `-BinaryOperator 0x56406f87f3b8 <line:411:5, col:18> 'int8_t':'char' '='
|     |               |-DeclRefExpr 0x56406f87f360 <col:5> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |               `-ImplicitCastExpr 0x56406f87f3a0 <col:18> 'int8_t':'char' <LValueToRValue>
|     |                 `-DeclRefExpr 0x56406f87f380 <col:18> 'int8_t':'char' lvalue Var 0x56406f87d820 'side2' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87f768 <line:413:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87f4c0 <col:3> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87f750 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x56406f87f720 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x56406f87f660 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x56406f87f580 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x56406f87f550 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x56406f87f520 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x56406f87f4e0 <col:14> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x56406f87f568 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x56406f87f538 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x56406f87f500 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x56406f87f640 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x56406f87f610 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x56406f87f5e0 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x56406f87f5a0 <col:37> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x56406f87f628 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x56406f87f5f8 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x56406f87f5c0 <col:49> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x56406f87f6d8 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x56406f87f6c0 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f87f680 <col:57> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x56406f87f708 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x56406f87f6f0 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x56406f87f6a0 <col:70> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87fa30 <line:414:3, col:70> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87f788 <col:3> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87fa18 <col:14, col:70> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x56406f87f9e8 <col:14, col:70> 'int'
|     |     |-BinaryOperator 0x56406f87f928 <col:14, col:49> 'int' '&&'
|     |     | |-BinaryOperator 0x56406f87f848 <col:14, col:28> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x56406f87f818 <col:14> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x56406f87f7e8 <col:14> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x56406f87f7a8 <col:14> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x56406f87f830 <col:28> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x56406f87f800 <col:28> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x56406f87f7c8 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x56406f87f908 <col:37, col:49> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x56406f87f8d8 <col:37> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x56406f87f8a8 <col:37> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x56406f87f868 <col:37> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x56406f87f8f0 <col:49> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x56406f87f8c0 <col:49> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x56406f87f888 <col:49> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x56406f87f9a0 <col:57> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x56406f87f988 <col:57> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f87f948 <col:57> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x56406f87f9d0 <col:70> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x56406f87f9b8 <col:70> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x56406f87f968 <col:70> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87fd18 <line:415:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f87fa50 <col:3> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f87fd00 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x56406f87fcd0 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x56406f87fc10 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x56406f87fb10 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x56406f87fae0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x56406f87fab0 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x56406f87fa70 <col:13> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x56406f87faf8 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x56406f87fac8 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x56406f87fa90 <col:27> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x56406f87fbf0 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x56406f87fba0 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x56406f87fb70 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x56406f87fb30 <col:36> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x56406f87fbb8 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x56406f87fb88 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x56406f87fb50 <col:47> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x56406f87fc88 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x56406f87fc70 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f87fc30 <col:55> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x56406f87fcb8 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x56406f87fca0 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x56406f87fc50 <col:68> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|     |-BinaryOperator 0x56406f87fd90 <line:416:3, col:19> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f87fd38 <col:3> 'msg_t':'char' lvalue Var 0x56406f873c58 'side2_written' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x56406f87fd78 <col:19> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f87fd58 <col:19> 'int8_t':'char' lvalue Var 0x56406f87d940 'next_state' 'int8_t':'char'
|     `-ReturnStmt 0x56406f87fdb0 <line:417:3>
|-FunctionDecl 0x56406f87ff30 <line:420:1, line:462:1> line:420:6 used Pendulum_prism_task_each_pals_period 'void (void)'
| `-CompoundStmt 0x56406f882300 <line:421:1, line:462:1>
|   |-DeclStmt 0x56406f880048 <line:422:3, col:22>
|   | `-VarDecl 0x56406f87ffe0 <col:3, col:10> col:10 used active_side 'int8_t':'char'
|   |-DeclStmt 0x56406f8800d8 <line:423:3, col:14>
|   | `-VarDecl 0x56406f880070 <col:3, col:10> col:10 used tmp 'int8_t':'char'
|   |-DeclStmt 0x56406f880168 <line:424:3, col:16>
|   | `-VarDecl 0x56406f880100 <col:3, col:10> col:10 used side1 'int8_t':'char'
|   |-DeclStmt 0x56406f8801f8 <line:425:3, col:16>
|   | `-VarDecl 0x56406f880190 <col:3, col:10> col:10 used side2 'int8_t':'char'
|   `-CompoundStmt 0x56406f882298 <line:427:3, line:461:1>
|     |-BinaryOperator 0x56406f880350 <line:428:3, col:50> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f880210 <col:3> 'int8_t':'char' lvalue Var 0x56406f880070 'tmp' 'int8_t':'char'
|     | `-CallExpr 0x56406f880328 <col:9, col:50> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x56406f880310 <col:9> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56406f880230 <col:9> 'int8_t (unsigned char)' Function 0x56406f877090 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x56406f880288 <col:34, col:49> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x56406f880250 <col:49> 'int' 0
|     |-BinaryOperator 0x56406f8803c8 <line:429:3, col:17> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f880370 <col:3> 'int8_t':'char' lvalue Var 0x56406f87ffe0 'active_side' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f8803b0 <col:17> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f880390 <col:17> 'int8_t':'char' lvalue Var 0x56406f880070 'tmp' 'int8_t':'char'
|     |-BinaryOperator 0x56406f880440 <line:430:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f8803e8 <col:3> 'int8_t':'char' lvalue Var 0x56406f880100 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f880428 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f880408 <col:11> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f8804b8 <line:431:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f880460 <col:3> 'int8_t':'char' lvalue Var 0x56406f880190 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f8804a0 <col:11> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f880480 <col:11> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f880530 <line:432:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f8804d8 <col:3> 'int8_t':'char' lvalue Var 0x56406f880100 'side1' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f880518 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f8804f8 <col:11> 'int8_t':'char' lvalue Var 0x56406f8736b8 's1p_old' 'int8_t':'char'
|     |-BinaryOperator 0x56406f8805a8 <line:433:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f880550 <col:3> 'int8_t':'char' lvalue Var 0x56406f8736b8 's1p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f880590 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f880570 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x56406f880620 <line:434:3, col:11> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f8805c8 <col:3> 'int8_t':'char' lvalue Var 0x56406f880190 'side2' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f880608 <col:11> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f8805e8 <col:11> 'int8_t':'char' lvalue Var 0x56406f873820 's2p_old' 'int8_t':'char'
|     |-BinaryOperator 0x56406f880698 <line:435:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f880640 <col:3> 'int8_t':'char' lvalue Var 0x56406f873820 's2p_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x56406f880680 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f880660 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x56406f882190 <line:436:3, line:458:3> has_else
|     | |-BinaryOperator 0x56406f880750 <line:436:7, col:22> 'int' '=='
|     | | |-CStyleCastExpr 0x56406f880708 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f8806f0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f8806b8 <col:13> 'int8_t':'char' lvalue Var 0x56406f880100 'side1' 'int8_t':'char'
|     | | `-IntegerLiteral 0x56406f880730 <col:22> 'int' 1
|     | |-CompoundStmt 0x56406f880808 <col:25, line:438:3>
|     | | `-BinaryOperator 0x56406f8807e8 <line:437:5, col:28> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x56406f880770 <col:5> 'int8_t':'char' lvalue Var 0x56406f87ffe0 'active_side' 'int8_t':'char'
|     | |   `-CStyleCastExpr 0x56406f8807c0 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     | |     `-IntegerLiteral 0x56406f880790 <col:28> 'int' 1
|     | `-IfStmt 0x56406f882168 <line:439:3, line:458:3> has_else
|     |   |-BinaryOperator 0x56406f8808b8 <line:439:7, col:22> 'int' '=='
|     |   | |-CStyleCastExpr 0x56406f880870 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x56406f880858 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x56406f880820 <col:13> 'int8_t':'char' lvalue Var 0x56406f880190 'side2' 'int8_t':'char'
|     |   | `-IntegerLiteral 0x56406f880898 <col:22> 'int' 1
|     |   |-CompoundStmt 0x56406f880970 <col:25, line:441:3>
|     |   | `-BinaryOperator 0x56406f880950 <line:440:5, col:28> 'int8_t':'char' '='
|     |   |   |-DeclRefExpr 0x56406f8808d8 <col:5> 'int8_t':'char' lvalue Var 0x56406f87ffe0 'active_side' 'int8_t':'char'
|     |   |   `-CStyleCastExpr 0x56406f880928 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x56406f8808f8 <col:28> 'int' 2
|     |   `-IfStmt 0x56406f882140 <line:442:3, line:458:3> has_else
|     |     |-BinaryOperator 0x56406f880a20 <line:442:7, col:22> 'int' '=='
|     |     | |-CStyleCastExpr 0x56406f8809d8 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x56406f8809c0 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x56406f880988 <col:13> 'int8_t':'char' lvalue Var 0x56406f880100 'side1' 'int8_t':'char'
|     |     | `-IntegerLiteral 0x56406f880a00 <col:22> 'int' 0
|     |     |-CompoundStmt 0x56406f881cd0 <col:25, line:448:3>
|     |     | `-IfStmt 0x56406f881ca8 <line:443:5, line:447:5> has_else
|     |     |   |-BinaryOperator 0x56406f880b30 <line:443:9, col:30> 'int' '=='
|     |     |   | |-CStyleCastExpr 0x56406f880a90 <col:9, col:15> 'int' <IntegralCast>
|     |     |   | | `-ImplicitCastExpr 0x56406f880a78 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   | |   `-DeclRefExpr 0x56406f880a40 <col:15> 'int8_t':'char' lvalue Var 0x56406f880190 'side2' 'int8_t':'char'
|     |     |   | `-CStyleCastExpr 0x56406f880b08 <col:24, col:30> 'int' <IntegralCast>
|     |     |   |   `-ImplicitCastExpr 0x56406f880af0 <col:30> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   |     `-DeclRefExpr 0x56406f880ab8 <col:30> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |     |   |-CompoundStmt 0x56406f881c10 <col:37, line:445:5>
|     |     |   | `-BinaryOperator 0x56406f880bc8 <line:444:7, col:30> 'int8_t':'char' '='
|     |     |   |   |-DeclRefExpr 0x56406f880b50 <col:7> 'int8_t':'char' lvalue Var 0x56406f87ffe0 'active_side' 'int8_t':'char'
|     |     |   |   `-CStyleCastExpr 0x56406f880ba0 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |     |   |     `-IntegerLiteral 0x56406f880b70 <col:30> 'int' 1
|     |     |   `-CompoundStmt 0x56406f881c90 <line:445:12, line:447:5>
|     |     |     `-GotoStmt 0x56406f881c78 <line:446:7, col:12> '_L' 0x56406f881c28
|     |     `-LabelStmt 0x56406f882128 <line:449:3, line:458:3> '_L'
|     |       `-IfStmt 0x56406f882100 <line:450:3, line:458:3> has_else
|     |         |-BinaryOperator 0x56406f881dd8 <line:450:7, col:28> 'int' '=='
|     |         | |-CStyleCastExpr 0x56406f881d38 <col:7, col:13> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x56406f881d20 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x56406f881ce8 <col:13> 'int8_t':'char' lvalue Var 0x56406f880100 'side1' 'int8_t':'char'
|     |         | `-CStyleCastExpr 0x56406f881db0 <col:22, col:28> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x56406f881d98 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x56406f881d60 <col:28> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|     |         |-CompoundStmt 0x56406f882038 <col:35, line:456:3>
|     |         | `-IfStmt 0x56406f882010 <line:451:5, line:455:5> has_else
|     |         |   |-BinaryOperator 0x56406f881e90 <line:451:9, col:24> 'int' '=='
|     |         |   | |-CStyleCastExpr 0x56406f881e48 <col:9, col:15> 'int' <IntegralCast>
|     |         |   | | `-ImplicitCastExpr 0x56406f881e30 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |   | |   `-DeclRefExpr 0x56406f881df8 <col:15> 'int8_t':'char' lvalue Var 0x56406f880190 'side2' 'int8_t':'char'
|     |         |   | `-IntegerLiteral 0x56406f881e70 <col:24> 'int' 0
|     |         |   |-CompoundStmt 0x56406f881f48 <col:27, line:453:5>
|     |         |   | `-BinaryOperator 0x56406f881f28 <line:452:7, col:30> 'int8_t':'char' '='
|     |         |   |   |-DeclRefExpr 0x56406f881eb0 <col:7> 'int8_t':'char' lvalue Var 0x56406f87ffe0 'active_side' 'int8_t':'char'
|     |         |   |   `-CStyleCastExpr 0x56406f881f00 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |   |     `-IntegerLiteral 0x56406f881ed0 <col:30> 'int' 2
|     |         |   `-CompoundStmt 0x56406f881ff8 <line:453:12, line:455:5>
|     |         |     `-BinaryOperator 0x56406f881fd8 <line:454:7, col:30> 'int8_t':'char' '='
|     |         |       |-DeclRefExpr 0x56406f881f60 <col:7> 'int8_t':'char' lvalue Var 0x56406f87ffe0 'active_side' 'int8_t':'char'
|     |         |       `-CStyleCastExpr 0x56406f881fb0 <col:21, col:30> 'int8_t':'char' <IntegralCast>
|     |         |         `-IntegerLiteral 0x56406f881f80 <col:30> 'int' 0
|     |         `-CompoundStmt 0x56406f8820e8 <line:456:10, line:458:3>
|     |           `-BinaryOperator 0x56406f8820c8 <line:457:5, col:28> 'int8_t':'char' '='
|     |             |-DeclRefExpr 0x56406f882050 <col:5> 'int8_t':'char' lvalue Var 0x56406f87ffe0 'active_side' 'int8_t':'char'
|     |             `-CStyleCastExpr 0x56406f8820a0 <col:19, col:28> 'int8_t':'char' <IntegralCast>
|     |               `-IntegerLiteral 0x56406f882070 <col:28> 'int' 0
|     |-CallExpr 0x56406f882248 <line:459:3, col:40> 'void'
|     | |-ImplicitCastExpr 0x56406f882230 <col:3> 'void (*)(int8_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56406f8821b8 <col:3> 'void (int8_t)' Function 0x56406f876d00 'write_active_side_history' 'void (int8_t)'
|     | `-ImplicitCastExpr 0x56406f882270 <col:29> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x56406f8821d8 <col:29> 'int8_t':'char' lvalue Var 0x56406f87ffe0 'active_side' 'int8_t':'char'
|     `-ReturnStmt 0x56406f882288 <line:460:3>
|-VarDecl 0x56406f882540 <line:463:1, col:210> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x56406f8826f8 <col:27, col:210> 'void (*[4])(void)'
|   |-UnaryOperator 0x56406f8825c8 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x56406f8825a8 <col:36> 'void (void)' Function 0x56406f879d50 'Console_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x56406f882600 <col:72, col:74> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x56406f8825e0 <col:74> 'void (void)' Function 0x56406f87a8a0 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x56406f882638 <col:122, col:124> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x56406f882618 <col:124> 'void (void)' Function 0x56406f87d6e0 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   `-UnaryOperator 0x56406f882670 <col:172, col:174> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x56406f882650 <col:174> 'void (void)' Function 0x56406f87ff30 'Pendulum_prism_task_each_pals_period' 'void (void)'
|-FunctionDecl 0x56406f8827f8 <line:464:1, line:582:1> line:464:5 used check 'int (void)'
| `-CompoundStmt 0x56406f888328 <line:465:1, line:582:1>
|   |-DeclStmt 0x56406f882918 <line:466:3, col:11>
|   | `-VarDecl 0x56406f8828b0 <col:3, col:7> col:7 used tmp 'int'
|   |-DeclStmt 0x56406f8829a8 <line:467:3, col:17>
|   | `-VarDecl 0x56406f882940 <col:3, col:9> col:9 used tmp___0 'msg_t':'char'
|   |-DeclStmt 0x56406f882a38 <line:468:3, col:17>
|   | `-VarDecl 0x56406f8829d0 <col:3, col:9> col:9 used tmp___1 '_Bool'
|   |-DeclStmt 0x56406f882ac8 <line:469:3, col:17>
|   | `-VarDecl 0x56406f882a60 <col:3, col:9> col:9 used tmp___2 '_Bool'
|   |-DeclStmt 0x56406f882b58 <line:470:3, col:17>
|   | `-VarDecl 0x56406f882af0 <col:3, col:9> col:9 used tmp___3 '_Bool'
|   |-DeclStmt 0x56406f882be8 <line:471:3, col:17>
|   | `-VarDecl 0x56406f882b80 <col:3, col:9> col:9 used tmp___4 '_Bool'
|   |-DeclStmt 0x56406f883008 <line:472:3, col:18>
|   | `-VarDecl 0x56406f882fa0 <col:3, col:10> col:10 used tmp___5 'int8_t':'char'
|   |-DeclStmt 0x56406f883098 <line:473:3, col:17>
|   | `-VarDecl 0x56406f883030 <col:3, col:9> col:9 used tmp___6 '_Bool'
|   |-DeclStmt 0x56406f883128 <line:474:3, col:17>
|   | `-VarDecl 0x56406f8830c0 <col:3, col:9> col:9 used tmp___7 '_Bool'
|   |-DeclStmt 0x56406f8831b8 <line:475:3, col:17>
|   | `-VarDecl 0x56406f883150 <col:3, col:9> col:9 used tmp___8 '_Bool'
|   |-DeclStmt 0x56406f883248 <line:476:3, col:18>
|   | `-VarDecl 0x56406f8831e0 <col:3, col:10> col:10 used tmp___9 'int8_t':'char'
|   |-DeclStmt 0x56406f8832d8 <line:477:3, col:18>
|   | `-VarDecl 0x56406f883270 <col:3, col:9> col:9 used tmp___10 '_Bool'
|   |-DeclStmt 0x56406f883368 <line:478:3, col:18>
|   | `-VarDecl 0x56406f883300 <col:3, col:9> col:9 used tmp___11 '_Bool'
|   |-DeclStmt 0x56406f8833f8 <line:479:3, col:18>
|   | `-VarDecl 0x56406f883390 <col:3, col:9> col:9 used tmp___12 '_Bool'
|   |-DeclStmt 0x56406f883488 <line:480:3, col:18>
|   | `-VarDecl 0x56406f883420 <col:3, col:9> col:9 used tmp___13 'msg_t':'char'
|   |-DeclStmt 0x56406f883518 <line:481:3, col:18>
|   | `-VarDecl 0x56406f8834b0 <col:3, col:9> col:9 used tmp___14 '_Bool'
|   |-DeclStmt 0x56406f8835a8 <line:482:3, col:18>
|   | `-VarDecl 0x56406f883540 <col:3, col:9> col:9 used tmp___15 '_Bool'
|   |-DeclStmt 0x56406f883638 <line:483:3, col:18>
|   | `-VarDecl 0x56406f8835d0 <col:3, col:9> col:9 used tmp___16 '_Bool'
|   |-DeclStmt 0x56406f8836c8 <line:484:3, col:18>
|   | `-VarDecl 0x56406f883660 <col:3, col:9> col:9 used tmp___17 '_Bool'
|   |-DeclStmt 0x56406f883758 <line:485:3, col:19>
|   | `-VarDecl 0x56406f8836f0 <col:3, col:10> col:10 used tmp___18 'int8_t':'char'
|   |-DeclStmt 0x56406f8837e8 <line:486:3, col:19>
|   | `-VarDecl 0x56406f883780 <col:3, col:10> col:10 used tmp___19 'int8_t':'char'
|   |-DeclStmt 0x56406f883878 <line:487:3, col:19>
|   | `-VarDecl 0x56406f883810 <col:3, col:10> col:10 used tmp___20 'int8_t':'char'
|   `-CompoundStmt 0x56406f8882c0 <line:489:3, line:581:1>
|     |-IfStmt 0x56406f883ac0 <line:490:3, line:497:3> has_else
|     | |-UnaryOperator 0x56406f8838c8 <line:490:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x56406f8838b0 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56406f883890 <col:9> '_Bool' lvalue Var 0x56406f873af0 'side1Failed' '_Bool'
|     | |-CompoundStmt 0x56406f883940 <col:22, line:492:3>
|     | | `-BinaryOperator 0x56406f883920 <line:491:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x56406f8838e0 <col:5> 'int' lvalue Var 0x56406f8828b0 'tmp' 'int'
|     | |   `-IntegerLiteral 0x56406f883900 <col:11> 'int' 1
|     | `-IfStmt 0x56406f883a98 <line:493:3, line:497:3> has_else
|     |   |-UnaryOperator 0x56406f883990 <line:493:7, col:9> 'int' prefix '!' cannot overflow
|     |   | `-ImplicitCastExpr 0x56406f883978 <col:9> '_Bool' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x56406f883958 <col:9> '_Bool' lvalue Var 0x56406f873b68 'side2Failed' '_Bool'
|     |   |-CompoundStmt 0x56406f883a08 <col:22, line:495:3>
|     |   | `-BinaryOperator 0x56406f8839e8 <line:494:5, col:11> 'int' '='
|     |   |   |-DeclRefExpr 0x56406f8839a8 <col:5> 'int' lvalue Var 0x56406f8828b0 'tmp' 'int'
|     |   |   `-IntegerLiteral 0x56406f8839c8 <col:11> 'int' 1
|     |   `-CompoundStmt 0x56406f883a80 <line:495:10, line:497:3>
|     |     `-BinaryOperator 0x56406f883a60 <line:496:5, col:11> 'int' '='
|     |       |-DeclRefExpr 0x56406f883a20 <col:5> 'int' lvalue Var 0x56406f8828b0 'tmp' 'int'
|     |       `-IntegerLiteral 0x56406f883a40 <col:11> 'int' 0
|     |-CallExpr 0x56406f883bc8 <line:498:3, col:32> 'void'
|     | |-ImplicitCastExpr 0x56406f883bb0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56406f883ae8 <col:3> 'void (int)' Function 0x56406f873f30 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x56406f883bf0 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x56406f883b50 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x56406f883b38 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x56406f883b08 <col:29> 'int' lvalue Var 0x56406f8828b0 'tmp' 'int'
|     |-BinaryOperator 0x56406f883d20 <line:499:3, col:59> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x56406f883c08 <col:3> 'msg_t':'char' lvalue Var 0x56406f882940 'tmp___0' 'msg_t':'char'
|     | `-CallExpr 0x56406f883cf8 <col:13, col:59> 'msg_t':'char'
|     |   |-ImplicitCastExpr 0x56406f883ce0 <col:13> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56406f883c28 <col:13> 'msg_t (unsigned char)' Function 0x56406f877f50 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   `-CStyleCastExpr 0x56406f883c80 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x56406f883c48 <col:58> 'int' 1
|     |-IfStmt 0x56406f884c50 <line:500:3, line:528:3>
|     | |-UnaryOperator 0x56406f883d78 <line:500:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x56406f883d60 <col:9> 'msg_t':'char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56406f883d40 <col:9> 'msg_t':'char' lvalue Var 0x56406f882940 'tmp___0' 'msg_t':'char'
|     | `-CompoundStmt 0x56406f884c30 <col:18, line:528:3>
|     |   |-BinaryOperator 0x56406f883ea0 <line:501:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x56406f883d90 <col:5> '_Bool' lvalue Var 0x56406f8829d0 'tmp___1' '_Bool'
|     |   | `-CallExpr 0x56406f883e78 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x56406f883e60 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56406f883db0 <col:15> '_Bool (unsigned char)' Function 0x56406f8749b0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x56406f883e08 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x56406f883dd0 <col:56> 'int' 1
|     |   `-IfStmt 0x56406f884c18 <line:502:5, line:527:5>
|     |     |-UnaryOperator 0x56406f883ef8 <line:502:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x56406f883ee0 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f883ec0 <col:11> '_Bool' lvalue Var 0x56406f8829d0 'tmp___1' '_Bool'
|     |     `-CompoundStmt 0x56406f884bf8 <col:20, line:527:5>
|     |       |-BinaryOperator 0x56406f884018 <line:503:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x56406f883f10 <col:7> '_Bool' lvalue Var 0x56406f882a60 'tmp___2' '_Bool'
|     |       | `-CallExpr 0x56406f883ff0 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x56406f883fd8 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x56406f883f30 <col:17> '_Bool (unsigned char)' Function 0x56406f8749b0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x56406f883fb0 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56406f883f50 <col:58> 'int' 0
|     |       `-IfStmt 0x56406f884be0 <line:504:7, line:526:7>
|     |         |-UnaryOperator 0x56406f884070 <line:504:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x56406f884058 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x56406f884038 <col:13> '_Bool' lvalue Var 0x56406f882a60 'tmp___2' '_Bool'
|     |         `-CompoundStmt 0x56406f884bc0 <col:22, line:526:7>
|     |           |-BinaryOperator 0x56406f884168 <line:505:9, col:61> '_Bool' '='
|     |           | |-DeclRefExpr 0x56406f884088 <col:9> '_Bool' lvalue Var 0x56406f882af0 'tmp___3' '_Bool'
|     |           | `-CallExpr 0x56406f884140 <col:19, col:61> '_Bool'
|     |           |   |-ImplicitCastExpr 0x56406f884128 <col:19> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x56406f8840a8 <col:19> '_Bool (unsigned char)' Function 0x56406f876590 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x56406f884100 <col:45, col:60> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x56406f8840c8 <col:60> 'int' 1
|     |           `-IfStmt 0x56406f884ba8 <line:506:9, line:525:9>
|     |             |-UnaryOperator 0x56406f8841c0 <line:506:13, col:15> 'int' prefix '!' cannot overflow
|     |             | `-ImplicitCastExpr 0x56406f8841a8 <col:15> '_Bool' <LValueToRValue>
|     |             |   `-DeclRefExpr 0x56406f884188 <col:15> '_Bool' lvalue Var 0x56406f882af0 'tmp___3' '_Bool'
|     |             `-CompoundStmt 0x56406f884b88 <col:24, line:525:9>
|     |               |-BinaryOperator 0x56406f8842b8 <line:507:11, col:63> '_Bool' '='
|     |               | |-DeclRefExpr 0x56406f8841d8 <col:11> '_Bool' lvalue Var 0x56406f882b80 'tmp___4' '_Bool'
|     |               | `-CallExpr 0x56406f884290 <col:21, col:63> '_Bool'
|     |               |   |-ImplicitCastExpr 0x56406f884278 <col:21> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x56406f8841f8 <col:21> '_Bool (unsigned char)' Function 0x56406f876590 'read_side2_failed_history' '_Bool (unsigned char)'
|     |               |   `-CStyleCastExpr 0x56406f884250 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x56406f884218 <col:62> 'int' 0
|     |               `-IfStmt 0x56406f884b70 <line:508:11, line:524:11>
|     |                 |-UnaryOperator 0x56406f884310 <line:508:15, col:17> 'int' prefix '!' cannot overflow
|     |                 | `-ImplicitCastExpr 0x56406f8842f8 <col:17> '_Bool' <LValueToRValue>
|     |                 |   `-DeclRefExpr 0x56406f8842d8 <col:17> '_Bool' lvalue Var 0x56406f882b80 'tmp___4' '_Bool'
|     |                 `-CompoundStmt 0x56406f884b48 <col:26, line:524:11>
|     |                   |-IfStmt 0x56406f8845a0 <line:509:13, line:513:13>
|     |                   | |-UnaryOperator 0x56406f884400 <line:509:17, col:44> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x56406f8843e0 <col:19, col:44> 'int'
|     |                   | |   `-BinaryOperator 0x56406f8843c0 <col:20, col:43> 'int' '=='
|     |                   | |     |-CStyleCastExpr 0x56406f884378 <col:20, col:26> 'int' <IntegralCast>
|     |                   | |     | `-ImplicitCastExpr 0x56406f884360 <col:26> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |     |   `-DeclRefExpr 0x56406f884328 <col:26> 'msg_t':'char' lvalue Var 0x56406f873be0 'side1_written' 'msg_t':'char'
|     |                   | |     `-IntegerLiteral 0x56406f8843a0 <col:43> 'int' 1
|     |                   | `-CompoundStmt 0x56406f884588 <col:47, line:513:13>
|     |                   |   `-IfStmt 0x56406f884570 <line:510:15, line:512:15>
|     |                   |     |-UnaryOperator 0x56406f8844f0 <line:510:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x56406f8844d0 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x56406f8844b0 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x56406f884468 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x56406f884450 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x56406f884418 <col:28> 'msg_t':'char' lvalue Var 0x56406f873be0 'side1_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x56406f884490 <col:45> 'int' 0
|     |                   |     `-CompoundStmt 0x56406f884558 <col:49, line:512:15>
|     |                   |       `-ReturnStmt 0x56406f884548 <line:511:17, col:26>
|     |                   |         `-ParenExpr 0x56406f884528 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x56406f884508 <col:25> 'int' 0
|     |                   |-IfStmt 0x56406f884868 <line:514:13, line:518:13>
|     |                   | |-UnaryOperator 0x56406f8846c8 <line:514:17, col:48> 'int' prefix '!' cannot overflow
|     |                   | | `-ParenExpr 0x56406f8846a8 <col:19, col:48> 'int'
|     |                   | |   `-UnaryOperator 0x56406f884690 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                   | |     `-ParenExpr 0x56406f884670 <col:22, col:47> 'int'
|     |                   | |       `-BinaryOperator 0x56406f884650 <col:23, col:46> 'int' '=='
|     |                   | |         |-CStyleCastExpr 0x56406f884608 <col:23, col:29> 'int' <IntegralCast>
|     |                   | |         | `-ImplicitCastExpr 0x56406f8845f0 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   | |         |   `-DeclRefExpr 0x56406f8845b8 <col:29> 'msg_t':'char' lvalue Var 0x56406f873be0 'side1_written' 'msg_t':'char'
|     |                   | |         `-IntegerLiteral 0x56406f884630 <col:46> 'int' 0
|     |                   | `-CompoundStmt 0x56406f884850 <col:51, line:518:13>
|     |                   |   `-IfStmt 0x56406f884838 <line:515:15, line:517:15>
|     |                   |     |-UnaryOperator 0x56406f8847b8 <line:515:19, col:46> 'int' prefix '!' cannot overflow
|     |                   |     | `-ParenExpr 0x56406f884798 <col:21, col:46> 'int'
|     |                   |     |   `-BinaryOperator 0x56406f884778 <col:22, col:45> 'int' '=='
|     |                   |     |     |-CStyleCastExpr 0x56406f884730 <col:22, col:28> 'int' <IntegralCast>
|     |                   |     |     | `-ImplicitCastExpr 0x56406f884718 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                   |     |     |   `-DeclRefExpr 0x56406f8846e0 <col:28> 'msg_t':'char' lvalue Var 0x56406f873c58 'side2_written' 'msg_t':'char'
|     |                   |     |     `-IntegerLiteral 0x56406f884758 <col:45> 'int' 1
|     |                   |     `-CompoundStmt 0x56406f884820 <col:49, line:517:15>
|     |                   |       `-ReturnStmt 0x56406f884810 <line:516:17, col:26>
|     |                   |         `-ParenExpr 0x56406f8847f0 <col:24, col:26> 'int'
|     |                   |           `-IntegerLiteral 0x56406f8847d0 <col:25> 'int' 0
|     |                   `-IfStmt 0x56406f884b30 <line:519:13, line:523:13>
|     |                     |-UnaryOperator 0x56406f884990 <line:519:17, col:48> 'int' prefix '!' cannot overflow
|     |                     | `-ParenExpr 0x56406f884970 <col:19, col:48> 'int'
|     |                     |   `-UnaryOperator 0x56406f884958 <col:20, col:47> 'int' prefix '!' cannot overflow
|     |                     |     `-ParenExpr 0x56406f884938 <col:22, col:47> 'int'
|     |                     |       `-BinaryOperator 0x56406f884918 <col:23, col:46> 'int' '=='
|     |                     |         |-CStyleCastExpr 0x56406f8848d0 <col:23, col:29> 'int' <IntegralCast>
|     |                     |         | `-ImplicitCastExpr 0x56406f8848b8 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                     |         |   `-DeclRefExpr 0x56406f884880 <col:29> 'msg_t':'char' lvalue Var 0x56406f873be0 'side1_written' 'msg_t':'char'
|     |                     |         `-IntegerLiteral 0x56406f8848f8 <col:46> 'int' 1
|     |                     `-CompoundStmt 0x56406f884b18 <col:51, line:523:13>
|     |                       `-IfStmt 0x56406f884b00 <line:520:15, line:522:15>
|     |                         |-UnaryOperator 0x56406f884a80 <line:520:19, col:46> 'int' prefix '!' cannot overflow
|     |                         | `-ParenExpr 0x56406f884a60 <col:21, col:46> 'int'
|     |                         |   `-BinaryOperator 0x56406f884a40 <col:22, col:45> 'int' '=='
|     |                         |     |-CStyleCastExpr 0x56406f8849f8 <col:22, col:28> 'int' <IntegralCast>
|     |                         |     | `-ImplicitCastExpr 0x56406f8849e0 <col:28> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                         |     |   `-DeclRefExpr 0x56406f8849a8 <col:28> 'msg_t':'char' lvalue Var 0x56406f873c58 'side2_written' 'msg_t':'char'
|     |                         |     `-IntegerLiteral 0x56406f884a20 <col:45> 'int' 0
|     |                         `-CompoundStmt 0x56406f884ae8 <col:49, line:522:15>
|     |                           `-ReturnStmt 0x56406f884ad8 <line:521:17, col:26>
|     |                             `-ParenExpr 0x56406f884ab8 <col:24, col:26> 'int'
|     |                               `-IntegerLiteral 0x56406f884a98 <col:25> 'int' 0
|     |-BinaryOperator 0x56406f884d48 <line:529:3, col:55> '_Bool' '='
|     | |-DeclRefExpr 0x56406f884c68 <col:3> '_Bool' lvalue Var 0x56406f8830c0 'tmp___7' '_Bool'
|     | `-CallExpr 0x56406f884d20 <col:13, col:55> '_Bool'
|     |   |-ImplicitCastExpr 0x56406f884d08 <col:13> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56406f884c88 <col:13> '_Bool (unsigned char)' Function 0x56406f8749b0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x56406f884ce0 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x56406f884ca8 <col:54> 'int' 1
|     |-IfStmt 0x56406f886be0 <line:530:3, line:544:3>
|     | |-ImplicitCastExpr 0x56406f884d88 <line:530:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x56406f884d68 <col:7> '_Bool' lvalue Var 0x56406f8830c0 'tmp___7' '_Bool'
|     | `-CompoundStmt 0x56406f886bc0 <col:16, line:544:3>
|     |   |-BinaryOperator 0x56406f884e80 <line:531:5, col:57> '_Bool' '='
|     |   | |-DeclRefExpr 0x56406f884da0 <col:5> '_Bool' lvalue Var 0x56406f883150 'tmp___8' '_Bool'
|     |   | `-CallExpr 0x56406f884e58 <col:15, col:57> '_Bool'
|     |   |   |-ImplicitCastExpr 0x56406f884e40 <col:15> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56406f884dc0 <col:15> '_Bool (unsigned char)' Function 0x56406f876590 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x56406f884e18 <col:41, col:56> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x56406f884de0 <col:56> 'int' 1
|     |   `-IfStmt 0x56406f886ba8 <line:532:5, line:543:5>
|     |     |-UnaryOperator 0x56406f884ed8 <line:532:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x56406f884ec0 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f884ea0 <col:11> '_Bool' lvalue Var 0x56406f883150 'tmp___8' '_Bool'
|     |     `-CompoundStmt 0x56406f886b78 <col:20, line:543:5>
|     |       |-BinaryOperator 0x56406f8866f8 <line:533:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x56406f884ef0 <col:7> 'int8_t':'char' lvalue Var 0x56406f882fa0 'tmp___5' 'int8_t':'char'
|     |       | `-CallExpr 0x56406f8866d0 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x56406f884f90 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x56406f884f10 <col:17> 'int8_t (unsigned char)' Function 0x56406f877090 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x56406f884f68 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56406f884f30 <col:57> 'int' 0
|     |       |-IfStmt 0x56406f886870 <line:534:7, line:536:7>
|     |       | |-UnaryOperator 0x56406f8867f0 <line:534:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x56406f8867d0 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x56406f8867b0 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x56406f886768 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x56406f886750 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x56406f886718 <col:20> 'int8_t':'char' lvalue Var 0x56406f882fa0 'tmp___5' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x56406f886790 <col:31> 'int' 2
|     |       | `-CompoundStmt 0x56406f886858 <col:35, line:536:7>
|     |       |   `-ReturnStmt 0x56406f886848 <line:535:9, col:18>
|     |       |     `-ParenExpr 0x56406f886828 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x56406f886808 <col:17> 'int' 0
|     |       |-BinaryOperator 0x56406f886968 <line:537:7, col:59> '_Bool' '='
|     |       | |-DeclRefExpr 0x56406f886888 <col:7> '_Bool' lvalue Var 0x56406f883030 'tmp___6' '_Bool'
|     |       | `-CallExpr 0x56406f886940 <col:17, col:59> '_Bool'
|     |       |   |-ImplicitCastExpr 0x56406f886928 <col:17> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x56406f8868a8 <col:17> '_Bool (unsigned char)' Function 0x56406f876590 'read_side2_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x56406f886900 <col:43, col:58> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56406f8868c8 <col:58> 'int' 0
|     |       `-IfStmt 0x56406f886b60 <line:538:7, line:542:7>
|     |         |-UnaryOperator 0x56406f8869c0 <line:538:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x56406f8869a8 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x56406f886988 <col:13> '_Bool' lvalue Var 0x56406f883030 'tmp___6' '_Bool'
|     |         `-CompoundStmt 0x56406f886b48 <col:22, line:542:7>
|     |           `-IfStmt 0x56406f886b30 <line:539:9, line:541:9>
|     |             |-UnaryOperator 0x56406f886ab0 <line:539:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x56406f886a90 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x56406f886a70 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x56406f886a28 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x56406f886a10 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x56406f8869d8 <col:22> 'msg_t':'char' lvalue Var 0x56406f873c58 'side2_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x56406f886a50 <col:39> 'int' 1
|     |             `-CompoundStmt 0x56406f886b18 <col:43, line:541:9>
|     |               `-ReturnStmt 0x56406f886b08 <line:540:11, col:20>
|     |                 `-ParenExpr 0x56406f886ae8 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x56406f886ac8 <col:19> 'int' 0
|     |-BinaryOperator 0x56406f886cd8 <line:545:3, col:56> '_Bool' '='
|     | |-DeclRefExpr 0x56406f886bf8 <col:3> '_Bool' lvalue Var 0x56406f883300 'tmp___11' '_Bool'
|     | `-CallExpr 0x56406f886cb0 <col:14, col:56> '_Bool'
|     |   |-ImplicitCastExpr 0x56406f886c98 <col:14> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56406f886c18 <col:14> '_Bool (unsigned char)' Function 0x56406f8749b0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |   `-CStyleCastExpr 0x56406f886c70 <col:40, col:55> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x56406f886c38 <col:55> 'int' 1
|     |-IfStmt 0x56406f887448 <line:546:3, line:560:3>
|     | |-UnaryOperator 0x56406f886d30 <line:546:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x56406f886d18 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56406f886cf8 <col:9> '_Bool' lvalue Var 0x56406f883300 'tmp___11' '_Bool'
|     | `-CompoundStmt 0x56406f887428 <col:19, line:560:3>
|     |   |-BinaryOperator 0x56406f886e28 <line:547:5, col:58> '_Bool' '='
|     |   | |-DeclRefExpr 0x56406f886d48 <col:5> '_Bool' lvalue Var 0x56406f883390 'tmp___12' '_Bool'
|     |   | `-CallExpr 0x56406f886e00 <col:16, col:58> '_Bool'
|     |   |   |-ImplicitCastExpr 0x56406f886de8 <col:16> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56406f886d68 <col:16> '_Bool (unsigned char)' Function 0x56406f876590 'read_side2_failed_history' '_Bool (unsigned char)'
|     |   |   `-CStyleCastExpr 0x56406f886dc0 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x56406f886d88 <col:57> 'int' 1
|     |   `-IfStmt 0x56406f887410 <line:548:5, line:559:5>
|     |     |-ImplicitCastExpr 0x56406f886e68 <line:548:9> '_Bool' <LValueToRValue>
|     |     | `-DeclRefExpr 0x56406f886e48 <col:9> '_Bool' lvalue Var 0x56406f883390 'tmp___12' '_Bool'
|     |     `-CompoundStmt 0x56406f8873e0 <col:19, line:559:5>
|     |       |-BinaryOperator 0x56406f886f60 <line:549:7, col:58> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x56406f886e80 <col:7> 'int8_t':'char' lvalue Var 0x56406f8831e0 'tmp___9' 'int8_t':'char'
|     |       | `-CallExpr 0x56406f886f38 <col:17, col:58> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x56406f886f20 <col:17> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x56406f886ea0 <col:17> 'int8_t (unsigned char)' Function 0x56406f877090 'read_active_side_history' 'int8_t (unsigned char)'
|     |       |   `-CStyleCastExpr 0x56406f886ef8 <col:42, col:57> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56406f886ec0 <col:57> 'int' 0
|     |       |-IfStmt 0x56406f8870d8 <line:550:7, line:552:7>
|     |       | |-UnaryOperator 0x56406f887058 <line:550:11, col:32> 'int' prefix '!' cannot overflow
|     |       | | `-ParenExpr 0x56406f887038 <col:13, col:32> 'int'
|     |       | |   `-BinaryOperator 0x56406f887018 <col:14, col:31> 'int' '=='
|     |       | |     |-CStyleCastExpr 0x56406f886fd0 <col:14, col:20> 'int' <IntegralCast>
|     |       | |     | `-ImplicitCastExpr 0x56406f886fb8 <col:20> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |     |   `-DeclRefExpr 0x56406f886f80 <col:20> 'int8_t':'char' lvalue Var 0x56406f8831e0 'tmp___9' 'int8_t':'char'
|     |       | |     `-IntegerLiteral 0x56406f886ff8 <col:31> 'int' 1
|     |       | `-CompoundStmt 0x56406f8870c0 <col:35, line:552:7>
|     |       |   `-ReturnStmt 0x56406f8870b0 <line:551:9, col:18>
|     |       |     `-ParenExpr 0x56406f887090 <col:16, col:18> 'int'
|     |       |       `-IntegerLiteral 0x56406f887070 <col:17> 'int' 0
|     |       |-BinaryOperator 0x56406f8871d0 <line:553:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x56406f8870f0 <col:7> '_Bool' lvalue Var 0x56406f883270 'tmp___10' '_Bool'
|     |       | `-CallExpr 0x56406f8871a8 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x56406f887190 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x56406f887110 <col:18> '_Bool (unsigned char)' Function 0x56406f8749b0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x56406f887168 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56406f887130 <col:59> 'int' 0
|     |       `-IfStmt 0x56406f8873c8 <line:554:7, line:558:7>
|     |         |-UnaryOperator 0x56406f887228 <line:554:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x56406f887210 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x56406f8871f0 <col:13> '_Bool' lvalue Var 0x56406f883270 'tmp___10' '_Bool'
|     |         `-CompoundStmt 0x56406f8873b0 <col:23, line:558:7>
|     |           `-IfStmt 0x56406f887398 <line:555:9, line:557:9>
|     |             |-UnaryOperator 0x56406f887318 <line:555:13, col:40> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x56406f8872f8 <col:15, col:40> 'int'
|     |             |   `-BinaryOperator 0x56406f8872d8 <col:16, col:39> 'int' '=='
|     |             |     |-CStyleCastExpr 0x56406f887290 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x56406f887278 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x56406f887240 <col:22> 'msg_t':'char' lvalue Var 0x56406f873be0 'side1_written' 'msg_t':'char'
|     |             |     `-IntegerLiteral 0x56406f8872b8 <col:39> 'int' 1
|     |             `-CompoundStmt 0x56406f887380 <col:43, line:557:9>
|     |               `-ReturnStmt 0x56406f887370 <line:556:11, col:20>
|     |                 `-ParenExpr 0x56406f887350 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x56406f887330 <col:19> 'int' 0
|     |-BinaryOperator 0x56406f887540 <line:561:3, col:55> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x56406f887460 <col:3> 'int8_t':'char' lvalue Var 0x56406f883810 'tmp___20' 'int8_t':'char'
|     | `-CallExpr 0x56406f887518 <col:14, col:55> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x56406f887500 <col:14> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x56406f887480 <col:14> 'int8_t (unsigned char)' Function 0x56406f877090 'read_active_side_history' 'int8_t (unsigned char)'
|     |   `-CStyleCastExpr 0x56406f8874d8 <col:39, col:54> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x56406f8874a0 <col:54> 'int' 2
|     |-IfStmt 0x56406f888258 <line:562:3, line:579:3>
|     | |-BinaryOperator 0x56406f887610 <line:562:7, col:25> 'int' '>'
|     | | |-CStyleCastExpr 0x56406f8875b0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x56406f887598 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x56406f887560 <col:13> 'int8_t':'char' lvalue Var 0x56406f883810 'tmp___20' 'int8_t':'char'
|     | | `-UnaryOperator 0x56406f8875f8 <col:24, col:25> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x56406f8875d8 <col:25> 'int' 2
|     | `-CompoundStmt 0x56406f888238 <col:28, line:579:3>
|     |   |-BinaryOperator 0x56406f887720 <line:563:5, col:62> 'msg_t':'char' '='
|     |   | |-DeclRefExpr 0x56406f887630 <col:5> 'msg_t':'char' lvalue Var 0x56406f883420 'tmp___13' 'msg_t':'char'
|     |   | `-CallExpr 0x56406f8876f8 <col:16, col:62> 'msg_t':'char'
|     |   |   |-ImplicitCastExpr 0x56406f8876e0 <col:16> 'msg_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56406f887650 <col:16> 'msg_t (unsigned char)' Function 0x56406f877f50 'read_manual_selection_history' 'msg_t (unsigned char)'
|     |   |   `-CStyleCastExpr 0x56406f8876a8 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |   |     `-IntegerLiteral 0x56406f887670 <col:61> 'int' 2
|     |   `-IfStmt 0x56406f888220 <line:564:5, line:578:5>
|     |     |-UnaryOperator 0x56406f887778 <line:564:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x56406f887760 <col:11> 'msg_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x56406f887740 <col:11> 'msg_t':'char' lvalue Var 0x56406f883420 'tmp___13' 'msg_t':'char'
|     |     `-CompoundStmt 0x56406f8881f8 <col:21, line:578:5>
|     |       |-BinaryOperator 0x56406f887870 <line:565:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x56406f887790 <col:7> '_Bool' lvalue Var 0x56406f8834b0 'tmp___14' '_Bool'
|     |       | `-CallExpr 0x56406f887848 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x56406f887830 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x56406f8877b0 <col:18> '_Bool (unsigned char)' Function 0x56406f8749b0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x56406f887808 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56406f8877d0 <col:59> 'int' 2
|     |       |-BinaryOperator 0x56406f887970 <line:566:7, col:60> '_Bool' '='
|     |       | |-DeclRefExpr 0x56406f887890 <col:7> '_Bool' lvalue Var 0x56406f883540 'tmp___15' '_Bool'
|     |       | `-CallExpr 0x56406f887948 <col:18, col:60> '_Bool'
|     |       |   |-ImplicitCastExpr 0x56406f887930 <col:18> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x56406f8878b0 <col:18> '_Bool (unsigned char)' Function 0x56406f8749b0 'read_side1_failed_history' '_Bool (unsigned char)'
|     |       |   `-CStyleCastExpr 0x56406f887908 <col:44, col:59> 'unsigned char' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56406f8878d0 <col:59> 'int' 1
|     |       `-IfStmt 0x56406f8881e0 <line:567:7, line:577:7>
|     |         |-BinaryOperator 0x56406f887a80 <line:567:11, col:35> 'int' '=='
|     |         | |-CStyleCastExpr 0x56406f8879e0 <col:11, col:17> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x56406f8879c8 <col:17> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x56406f887990 <col:17> '_Bool' lvalue Var 0x56406f8834b0 'tmp___14' '_Bool'
|     |         | `-CStyleCastExpr 0x56406f887a58 <col:29, col:35> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x56406f887a40 <col:35> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x56406f887a08 <col:35> '_Bool' lvalue Var 0x56406f883540 'tmp___15' '_Bool'
|     |         `-CompoundStmt 0x56406f8881b8 <col:45, line:577:7>
|     |           |-BinaryOperator 0x56406f887b80 <line:568:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x56406f887aa0 <col:9> '_Bool' lvalue Var 0x56406f8835d0 'tmp___16' '_Bool'
|     |           | `-CallExpr 0x56406f887b58 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x56406f887b40 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x56406f887ac0 <col:20> '_Bool (unsigned char)' Function 0x56406f876590 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x56406f887b18 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x56406f887ae0 <col:61> 'int' 2
|     |           |-BinaryOperator 0x56406f887c80 <line:569:9, col:62> '_Bool' '='
|     |           | |-DeclRefExpr 0x56406f887ba0 <col:9> '_Bool' lvalue Var 0x56406f883660 'tmp___17' '_Bool'
|     |           | `-CallExpr 0x56406f887c58 <col:20, col:62> '_Bool'
|     |           |   |-ImplicitCastExpr 0x56406f887c40 <col:20> '_Bool (*)(unsigned char)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x56406f887bc0 <col:20> '_Bool (unsigned char)' Function 0x56406f876590 'read_side2_failed_history' '_Bool (unsigned char)'
|     |           |   `-CStyleCastExpr 0x56406f887c18 <col:46, col:61> 'unsigned char' <IntegralCast>
|     |           |     `-IntegerLiteral 0x56406f887be0 <col:61> 'int' 1
|     |           `-IfStmt 0x56406f8881a0 <line:570:9, line:576:9>
|     |             |-BinaryOperator 0x56406f887d90 <line:570:13, col:37> 'int' '=='
|     |             | |-CStyleCastExpr 0x56406f887cf0 <col:13, col:19> 'int' <IntegralCast>
|     |             | | `-ImplicitCastExpr 0x56406f887cd8 <col:19> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             | |   `-DeclRefExpr 0x56406f887ca0 <col:19> '_Bool' lvalue Var 0x56406f8835d0 'tmp___16' '_Bool'
|     |             | `-CStyleCastExpr 0x56406f887d68 <col:31, col:37> 'int' <IntegralCast>
|     |             |   `-ImplicitCastExpr 0x56406f887d50 <col:37> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |             |     `-DeclRefExpr 0x56406f887d18 <col:37> '_Bool' lvalue Var 0x56406f883660 'tmp___17' '_Bool'
|     |             `-CompoundStmt 0x56406f888178 <col:47, line:576:9>
|     |               |-BinaryOperator 0x56406f887e90 <line:571:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x56406f887db0 <col:11> 'int8_t':'char' lvalue Var 0x56406f8836f0 'tmp___18' 'int8_t':'char'
|     |               | `-CallExpr 0x56406f887e68 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x56406f887e50 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x56406f887dd0 <col:22> 'int8_t (unsigned char)' Function 0x56406f877090 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x56406f887e28 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x56406f887df0 <col:62> 'int' 1
|     |               |-BinaryOperator 0x56406f887f90 <line:572:11, col:63> 'int8_t':'char' '='
|     |               | |-DeclRefExpr 0x56406f887eb0 <col:11> 'int8_t':'char' lvalue Var 0x56406f883780 'tmp___19' 'int8_t':'char'
|     |               | `-CallExpr 0x56406f887f68 <col:22, col:63> 'int8_t':'char'
|     |               |   |-ImplicitCastExpr 0x56406f887f50 <col:22> 'int8_t (*)(unsigned char)' <FunctionToPointerDecay>
|     |               |   | `-DeclRefExpr 0x56406f887ed0 <col:22> 'int8_t (unsigned char)' Function 0x56406f877090 'read_active_side_history' 'int8_t (unsigned char)'
|     |               |   `-CStyleCastExpr 0x56406f887f28 <col:47, col:62> 'unsigned char' <IntegralCast>
|     |               |     `-IntegerLiteral 0x56406f887ef0 <col:62> 'int' 0
|     |               `-IfStmt 0x56406f888160 <line:573:11, line:575:11>
|     |                 |-UnaryOperator 0x56406f8880e0 <line:573:15, col:50> 'int' prefix '!' cannot overflow
|     |                 | `-ParenExpr 0x56406f8880c0 <col:17, col:50> 'int'
|     |                 |   `-BinaryOperator 0x56406f8880a0 <col:18, col:42> 'int' '=='
|     |                 |     |-CStyleCastExpr 0x56406f888000 <col:18, col:24> 'int' <IntegralCast>
|     |                 |     | `-ImplicitCastExpr 0x56406f887fe8 <col:24> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |     |   `-DeclRefExpr 0x56406f887fb0 <col:24> 'int8_t':'char' lvalue Var 0x56406f8836f0 'tmp___18' 'int8_t':'char'
|     |                 |     `-CStyleCastExpr 0x56406f888078 <col:36, col:42> 'int' <IntegralCast>
|     |                 |       `-ImplicitCastExpr 0x56406f888060 <col:42> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |                 |         `-DeclRefExpr 0x56406f888028 <col:42> 'int8_t':'char' lvalue Var 0x56406f883780 'tmp___19' 'int8_t':'char'
|     |                 `-CompoundStmt 0x56406f888148 <col:53, line:575:11>
|     |                   `-ReturnStmt 0x56406f888138 <line:574:13, col:22>
|     |                     `-ParenExpr 0x56406f888118 <col:20, col:22> 'int'
|     |                       `-IntegerLiteral 0x56406f8880f8 <col:21> 'int' 0
|     `-ReturnStmt 0x56406f8882b0 <line:580:3, col:12>
|       `-ParenExpr 0x56406f888290 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x56406f888270 <col:11> 'int' 1
|-FunctionDecl 0x56406f888490 <line:583:1, line:653:1> line:583:5 main 'int (void)'
| `-CompoundStmt 0x56406f88a7d0 <line:584:1, line:653:1>
|   |-DeclStmt 0x56406f8885e0 <line:585:3, col:10>
|   | `-VarDecl 0x56406f888578 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x56406f888678 <line:586:3, col:10>
|   | `-VarDecl 0x56406f888610 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x56406f88a668 <line:588:3, line:651:1>
|   | |-BinaryOperator 0x56406f8886f0 <line:589:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x56406f888690 <col:3> 'int' lvalue Var 0x56406f888578 'c1' 'int'
|   | | `-IntegerLiteral 0x56406f8886b0 <col:8> 'int' 0
|   | |-BinaryOperator 0x56406f888788 <line:590:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x56406f888710 <col:3> '_Bool' lvalue Var 0x56406f873af0 'side1Failed' '_Bool'
|   | | `-CallExpr 0x56406f888768 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x56406f888750 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888730 <col:17> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x56406f888820 <line:591:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x56406f8887a8 <col:3> '_Bool' lvalue Var 0x56406f873b68 'side2Failed' '_Bool'
|   | | `-CallExpr 0x56406f888800 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x56406f8887e8 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f8887c8 <col:17> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x56406f8888b8 <line:592:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x56406f888840 <col:3> 'msg_t':'char' lvalue Var 0x56406f873be0 'side1_written' 'msg_t':'char'
|   | | `-CallExpr 0x56406f888898 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x56406f888880 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888860 <col:19> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x56406f888950 <line:593:3, col:42> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8888d8 <col:3> 'msg_t':'char' lvalue Var 0x56406f873c58 'side2_written' 'msg_t':'char'
|   | | `-CallExpr 0x56406f888930 <col:19, col:42> 'char'
|   | |   `-ImplicitCastExpr 0x56406f888918 <col:19> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f8888f8 <col:19> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x56406f8889e8 <line:594:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x56406f888970 <col:3> '_Bool' lvalue Var 0x56406f873fe8 'side1Failed_History_0' '_Bool'
|   | | `-CallExpr 0x56406f8889c8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x56406f8889b0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888990 <col:27> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x56406f888a80 <line:595:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x56406f888a08 <col:3> '_Bool' lvalue Var 0x56406f8740b0 'side1Failed_History_1' '_Bool'
|   | | `-CallExpr 0x56406f888a60 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x56406f888a48 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888a28 <col:27> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x56406f888b18 <line:596:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x56406f888aa0 <col:3> '_Bool' lvalue Var 0x56406f874128 'side1Failed_History_2' '_Bool'
|   | | `-CallExpr 0x56406f888af8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x56406f888ae0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888ac0 <col:27> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x56406f888bb0 <line:597:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x56406f888b38 <col:3> '_Bool' lvalue Var 0x56406f8741a0 'side2Failed_History_0' '_Bool'
|   | | `-CallExpr 0x56406f888b90 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x56406f888b78 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888b58 <col:27> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x56406f888c48 <line:598:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x56406f888bd0 <col:3> '_Bool' lvalue Var 0x56406f874218 'side2Failed_History_1' '_Bool'
|   | | `-CallExpr 0x56406f888c28 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x56406f888c10 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888bf0 <col:27> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x56406f888ce0 <line:599:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x56406f888c68 <col:3> '_Bool' lvalue Var 0x56406f874290 'side2Failed_History_2' '_Bool'
|   | | `-CallExpr 0x56406f888cc0 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x56406f888ca8 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888c88 <col:27> '_Bool (void)' Function 0x56406f873950 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x56406f888d78 <line:600:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f888d00 <col:3> 'int8_t':'char' lvalue Var 0x56406f874308 'active_side_History_0' 'int8_t':'char'
|   | | `-CallExpr 0x56406f888d58 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x56406f888d40 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888d20 <col:27> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x56406f888e10 <line:601:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f888d98 <col:3> 'int8_t':'char' lvalue Var 0x56406f874380 'active_side_History_1' 'int8_t':'char'
|   | | `-CallExpr 0x56406f888df0 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x56406f888dd8 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888db8 <col:27> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x56406f888ea8 <line:602:3, col:50> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f888e30 <col:3> 'int8_t':'char' lvalue Var 0x56406f8743f8 'active_side_History_2' 'int8_t':'char'
|   | | `-CallExpr 0x56406f888e88 <col:27, col:50> 'char'
|   | |   `-ImplicitCastExpr 0x56406f888e70 <col:27> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888e50 <col:27> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x56406f888f40 <line:603:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x56406f888ec8 <col:3> 'msg_t':'char' lvalue Var 0x56406f874470 'manual_selection_History_0' 'msg_t':'char'
|   | | `-CallExpr 0x56406f888f20 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x56406f888f08 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888ee8 <col:32> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x56406f888fd8 <line:604:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x56406f888f60 <col:3> 'msg_t':'char' lvalue Var 0x56406f8744e8 'manual_selection_History_1' 'msg_t':'char'
|   | | `-CallExpr 0x56406f888fb8 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x56406f888fa0 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f888f80 <col:32> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x56406f889070 <line:605:3, col:55> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x56406f888ff8 <col:3> 'msg_t':'char' lvalue Var 0x56406f874560 'manual_selection_History_2' 'msg_t':'char'
|   | | `-CallExpr 0x56406f889050 <col:32, col:55> 'char'
|   | |   `-ImplicitCastExpr 0x56406f889038 <col:32> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f889018 <col:32> 'char (void)' Function 0x56406f873a40 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x56406f889138 <line:606:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x56406f889090 <col:3> 'int' lvalue Var 0x56406f888610 'i2' 'int'
|   | | `-CallExpr 0x56406f889118 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x56406f889100 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x56406f8890b0 <col:8> 'int (void)' Function 0x56406f8786e8 'init' 'int (void)'
|   | |-CallExpr 0x56406f8891b0 <line:607:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x56406f889198 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x56406f889158 <col:3> 'void (int)' Function 0x56406f873f30 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x56406f8891d8 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889178 <col:21> 'int' lvalue Var 0x56406f888610 'i2' 'int'
|   | |-BinaryOperator 0x56406f889248 <line:608:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8891f0 <col:3> 'int8_t':'char' lvalue Var 0x56406f84c0e0 'cs1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889230 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889210 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f8892c0 <line:609:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f889268 <col:3> 'int8_t':'char' lvalue Var 0x56406f84c158 'cs1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f8892a8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889288 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889338 <line:610:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8892e0 <col:3> 'int8_t':'char' lvalue Var 0x56406f84c248 'cs2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889320 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889300 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f8893b0 <line:611:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f889358 <col:3> 'int8_t':'char' lvalue Var 0x56406f84c2c0 'cs2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889398 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889378 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889428 <line:612:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8893d0 <col:3> 'int8_t':'char' lvalue Var 0x56406f873118 's1s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889410 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f8893f0 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f8894a0 <line:613:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f889448 <col:3> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889488 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889468 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889518 <line:614:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8894c0 <col:3> 'int8_t':'char' lvalue Var 0x56406f873280 's1s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889500 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f8894e0 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889590 <line:615:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f889538 <col:3> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889578 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889558 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889608 <line:616:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8895b0 <col:3> 'int8_t':'char' lvalue Var 0x56406f8733e8 's2s1_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f8895f0 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f8895d0 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889680 <line:617:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f889628 <col:3> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889668 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889648 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889858 <line:618:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8896a0 <col:3> 'int8_t':'char' lvalue Var 0x56406f873550 's2s2_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889840 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f8896c0 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f8898d0 <line:619:3, col:14> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f889878 <col:3> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f8898b8 <col:14> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889898 <col:14> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889948 <line:620:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8898f0 <col:3> 'int8_t':'char' lvalue Var 0x56406f8736b8 's1p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889930 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889910 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f8899c0 <line:621:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f889968 <col:3> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f8899a8 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889988 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889a38 <line:622:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f8899e0 <col:3> 'int8_t':'char' lvalue Var 0x56406f873820 's2p_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889a20 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889a00 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889ab0 <line:623:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x56406f889a58 <col:3> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x56406f889a98 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56406f889a78 <col:13> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x56406f889b10 <line:624:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x56406f889ad0 <col:3> 'int' lvalue Var 0x56406f888610 'i2' 'int'
|   | | `-IntegerLiteral 0x56406f889af0 <col:8> 'int' 0
|   | `-WhileStmt 0x56406f88a650 <line:625:3, line:650:3>
|   |   |-IntegerLiteral 0x56406f889b30 <line:625:10> 'int' 1
|   |   `-CompoundStmt 0x56406f88a638 <col:13, line:650:3>
|   |     `-CompoundStmt 0x56406f88a578 <line:626:5, line:649:5>
|   |       |-CallExpr 0x56406f889b88 <line:627:5, col:35> 'void'
|   |       | `-ImplicitCastExpr 0x56406f889b70 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x56406f889b50 <col:5> 'void (void)' Function 0x56406f879d50 'Console_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x56406f889be0 <line:628:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x56406f889bc8 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x56406f889ba8 <col:5> 'void (void)' Function 0x56406f87a8a0 'Side1_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x56406f889c38 <line:629:5, col:47> 'void'
|   |       | `-ImplicitCastExpr 0x56406f889c20 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x56406f889c00 <col:5> 'void (void)' Function 0x56406f87d6e0 'Side2_activestandby_task_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x56406f889c90 <line:630:5, col:42> 'void'
|   |       | `-ImplicitCastExpr 0x56406f889c78 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x56406f889c58 <col:5> 'void (void)' Function 0x56406f87ff30 'Pendulum_prism_task_each_pals_period' 'void (void)'
|   |       |-BinaryOperator 0x56406f889d08 <line:631:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f889cb0 <col:5> 'int8_t':'char' lvalue Var 0x56406f84c0e0 'cs1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f889cf0 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f889cd0 <col:15> 'int8_t':'char' lvalue Var 0x56406f84c158 'cs1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x56406f889d80 <line:632:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f889d28 <col:5> 'int8_t':'char' lvalue Var 0x56406f84c158 'cs1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f889d68 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f889d48 <col:15> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x56406f889df8 <line:633:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f889da0 <col:5> 'int8_t':'char' lvalue Var 0x56406f84c248 'cs2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f889de0 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f889dc0 <col:15> 'int8_t':'char' lvalue Var 0x56406f84c2c0 'cs2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x56406f889e70 <line:634:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f889e18 <col:5> 'int8_t':'char' lvalue Var 0x56406f84c2c0 'cs2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f889e58 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f889e38 <col:15> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x56406f889ee8 <line:635:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f889e90 <col:5> 'int8_t':'char' lvalue Var 0x56406f873118 's1s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f889ed0 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f889eb0 <col:16> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x56406f889f60 <line:636:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f889f08 <col:5> 'int8_t':'char' lvalue Var 0x56406f873190 's1s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f889f48 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f889f28 <col:16> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x56406f889fd8 <line:637:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f889f80 <col:5> 'int8_t':'char' lvalue Var 0x56406f873280 's1s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f889fc0 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f889fa0 <col:16> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x56406f88a050 <line:638:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f889ff8 <col:5> 'int8_t':'char' lvalue Var 0x56406f8732f8 's1s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a038 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a018 <col:16> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x56406f88a0c8 <line:639:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f88a070 <col:5> 'int8_t':'char' lvalue Var 0x56406f8733e8 's2s1_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a0b0 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a090 <col:16> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x56406f88a140 <line:640:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f88a0e8 <col:5> 'int8_t':'char' lvalue Var 0x56406f873460 's2s1_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a128 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a108 <col:16> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x56406f88a1b8 <line:641:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f88a160 <col:5> 'int8_t':'char' lvalue Var 0x56406f873550 's2s2_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a1a0 <col:16> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a180 <col:16> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x56406f88a230 <line:642:5, col:16> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f88a1d8 <col:5> 'int8_t':'char' lvalue Var 0x56406f8735c8 's2s2_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a218 <col:16> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a1f8 <col:16> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x56406f88a2a8 <line:643:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f88a250 <col:5> 'int8_t':'char' lvalue Var 0x56406f8736b8 's1p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a290 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a270 <col:15> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x56406f88a320 <line:644:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f88a2c8 <col:5> 'int8_t':'char' lvalue Var 0x56406f873730 's1p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a308 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a2e8 <col:15> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x56406f88a398 <line:645:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f88a340 <col:5> 'int8_t':'char' lvalue Var 0x56406f873820 's2p_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a380 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a360 <col:15> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x56406f88a410 <line:646:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x56406f88a3b8 <col:5> 'int8_t':'char' lvalue Var 0x56406f873898 's2p_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x56406f88a3f8 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56406f88a3d8 <col:15> 'msg_t':'char' lvalue Var 0x56406f84bf80 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x56406f88a4a8 <line:647:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x56406f88a430 <col:5> 'int' lvalue Var 0x56406f888578 'c1' 'int'
|   |       | `-CallExpr 0x56406f88a488 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x56406f88a470 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x56406f88a450 <col:10> 'int (void)' Function 0x56406f8827f8 'check' 'int (void)'
|   |       `-CallExpr 0x56406f88a520 <line:648:5, col:14> 'void'
|   |         |-ImplicitCastExpr 0x56406f88a508 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x56406f88a4c8 <col:5> 'void (_Bool)' Function 0x56406f873da0 'assert' 'void (_Bool)'
|   |         `-ImplicitCastExpr 0x56406f88a560 <col:12> '_Bool' <IntegralToBoolean>
|   |           `-ImplicitCastExpr 0x56406f88a548 <col:12> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56406f88a4e8 <col:12> 'int' lvalue Var 0x56406f888578 'c1' 'int'
|   `-ReturnStmt 0x56406f88a7c0 <line:652:1, col:8>
|     `-IntegerLiteral 0x56406f88a7a0 <col:8> 'int' 0
`-FunctionDecl 0x56406f88aaf0 prev 0x56406f873da0 <line:654:1, line:665:1> line:654:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x56406f88aa60 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x56406f88ad40 <line:655:1, line:665:1>
    `-CompoundStmt 0x56406f88ad28 <line:658:3, line:664:1>
      `-IfStmt 0x56406f88ad10 <line:659:3, line:663:3>
        |-UnaryOperator 0x56406f88abd0 <line:659:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x56406f88abb8 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x56406f88ab98 <col:9> '_Bool' lvalue ParmVar 0x56406f88aa60 'arg' '_Bool'
        `-CompoundStmt 0x56406f88acf8 <col:14, line:663:3>
          `-CompoundStmt 0x56406f88ace0 <line:660:5, line:662:5>
            `-LabelStmt 0x56406f88acc8 <line:661:5, col:29> 'ERROR'
              `-CallExpr 0x56406f88ac58 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x56406f88ac40 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x56406f88abe8 <col:12> 'void () __attribute__((noreturn))' Function 0x56406f84b470 '__VERIFIER_error' 'void () __attribute__((noreturn))'
