TranslationUnitDecl 0x55d604524698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55d604524f58 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55d604524c30 '__int128'
|-TypedefDecl 0x55d604524fc8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55d604524c50 'unsigned __int128'
|-TypedefDecl 0x55d6045252d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55d6045250a0 'struct __NSConstantString_tag'
|   `-Record 0x55d604525020 '__NSConstantString_tag'
|-TypedefDecl 0x55d604525378 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55d604525330 'char *'
|   `-BuiltinType 0x55d604524730 'char'
|-TypedefDecl 0x55d604564670 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55d604525610 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55d604525450 'struct __va_list_tag'
|     `-Record 0x55d6045253d0 '__va_list_tag'
|-EnumDecl 0x55d6045646c8 <termination-crafted-lit/ChenFlurMukhopadhyay-SAS2012-Ex3.04_false-no-overflow.c:18:9, col:26> col:9
| |-EnumConstantDecl 0x55d604564798 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x55d6045647e8 <col:22> col:22 true 'int'
|-TypedefDecl 0x55d6045648a0 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x55d604564840 'enum bool' sugar
|   `-EnumType 0x55d604564770 'bool'
|     `-Enum 0x55d6045646c8 ''
|-FunctionDecl 0x55d6045649e8 <line:20:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x55d604564b28 <line:22:1, line:32:1> line:22:5 main 'int ()'
  `-CompoundStmt 0x55d604565328 <col:12, line:32:1>
    |-DeclStmt 0x55d604564d68 <line:23:5, col:16>
    | |-VarDecl 0x55d604564be0 <col:5, col:9> col:9 used x 'int'
    | |-VarDecl 0x55d604564c60 <col:5, col:12> col:12 used y 'int'
    | `-VarDecl 0x55d604564ce0 <col:5, col:15> col:15 used z 'int'
    |-BinaryOperator 0x55d604564e28 <line:24:5, col:31> 'int' '='
    | |-DeclRefExpr 0x55d604564d80 <col:5> 'int' lvalue Var 0x55d604564be0 'x' 'int'
    | `-CallExpr 0x55d604564e08 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x55d604564df0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55d604564da0 <col:9> 'int (void)' Function 0x55d6045649e8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55d604564ec0 <line:25:5, col:31> 'int' '='
    | |-DeclRefExpr 0x55d604564e48 <col:5> 'int' lvalue Var 0x55d604564c60 'y' 'int'
    | `-CallExpr 0x55d604564ea0 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x55d604564e88 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55d604564e68 <col:9> 'int (void)' Function 0x55d6045649e8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55d604564f58 <line:26:5, col:31> 'int' '='
    | |-DeclRefExpr 0x55d604564ee0 <col:5> 'int' lvalue Var 0x55d604564ce0 'z' 'int'
    | `-CallExpr 0x55d604564f38 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x55d604564f20 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55d604564f00 <col:9> 'int (void)' Function 0x55d6045649e8 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x55d6045652e0 <line:27:5, line:30:5>
    | |-BinaryOperator 0x55d6045650d8 <line:27:12, col:31> 'int' '&&'
    | | |-BinaryOperator 0x55d604565028 <col:12, col:21> 'int' '>='
    | | | |-BinaryOperator 0x55d604564fe8 <col:12, col:16> 'int' '+'
    | | | | |-ImplicitCastExpr 0x55d604564fb8 <col:12> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x55d604564f78 <col:12> 'int' lvalue Var 0x55d604564be0 'x' 'int'
    | | | | `-ImplicitCastExpr 0x55d604564fd0 <col:16> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x55d604564f98 <col:16> 'int' lvalue Var 0x55d604564c60 'y' 'int'
    | | | `-IntegerLiteral 0x55d604565008 <col:21> 'int' 0
    | | `-BinaryOperator 0x55d6045650b8 <col:26, col:31> 'int' '<='
    | |   |-ImplicitCastExpr 0x55d604565088 <col:26> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x55d604565048 <col:26> 'int' lvalue Var 0x55d604564be0 'x' 'int'
    | |   `-ImplicitCastExpr 0x55d6045650a0 <col:31> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x55d604565068 <col:31> 'int' lvalue Var 0x55d604564ce0 'z' 'int'
    | `-CompoundStmt 0x55d6045652c0 <col:34, line:30:5>
    |   |-BinaryOperator 0x55d6045651e8 <line:28:9, col:19> 'int' '='
    |   | |-DeclRefExpr 0x55d6045650f8 <col:9> 'int' lvalue Var 0x55d604564be0 'x' 'int'
    |   | `-BinaryOperator 0x55d6045651c8 <col:13, col:19> 'int' '+'
    |   |   |-BinaryOperator 0x55d604565170 <col:13, col:15> 'int' '*'
    |   |   | |-IntegerLiteral 0x55d604565118 <col:13> 'int' 2
    |   |   | `-ImplicitCastExpr 0x55d604565158 <col:15> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x55d604565138 <col:15> 'int' lvalue Var 0x55d604564be0 'x' 'int'
    |   |   `-ImplicitCastExpr 0x55d6045651b0 <col:19> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55d604565190 <col:19> 'int' lvalue Var 0x55d604564c60 'y' 'int'
    |   `-BinaryOperator 0x55d6045652a0 <line:29:9, col:17> 'int' '='
    |     |-DeclRefExpr 0x55d604565208 <col:9> 'int' lvalue Var 0x55d604564c60 'y' 'int'
    |     `-BinaryOperator 0x55d604565280 <col:13, col:17> 'int' '+'
    |       |-ImplicitCastExpr 0x55d604565268 <col:13> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55d604565228 <col:13> 'int' lvalue Var 0x55d604564c60 'y' 'int'
    |       `-IntegerLiteral 0x55d604565248 <col:17> 'int' 1
    `-ReturnStmt 0x55d604565318 <line:31:5, col:12>
      `-IntegerLiteral 0x55d6045652f8 <col:12> 'int' 0
