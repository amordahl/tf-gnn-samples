TranslationUnitDecl 0x55fab288e698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55fab288ef58 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55fab288ec30 '__int128'
|-TypedefDecl 0x55fab288efc8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55fab288ec50 'unsigned __int128'
|-TypedefDecl 0x55fab288f2d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55fab288f0a0 'struct __NSConstantString_tag'
|   `-Record 0x55fab288f020 '__NSConstantString_tag'
|-TypedefDecl 0x55fab288f378 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55fab288f330 'char *'
|   `-BuiltinType 0x55fab288e730 'char'
|-TypedefDecl 0x55fab28ce670 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55fab288f610 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55fab288f450 'struct __va_list_tag'
|     `-Record 0x55fab288f3d0 '__va_list_tag'
|-EnumDecl 0x55fab28ce6c8 <termination-crafted-lit/ChenFlurMukhopadhyay-SAS2012-Ex2.09_false-no-overflow.c:18:9, col:26> col:9
| |-EnumConstantDecl 0x55fab28ce798 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x55fab28ce7e8 <col:22> col:22 true 'int'
|-TypedefDecl 0x55fab28ce8a0 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x55fab28ce840 'enum bool' sugar
|   `-EnumType 0x55fab28ce770 'bool'
|     `-Enum 0x55fab28ce6c8 ''
|-FunctionDecl 0x55fab28ce9e8 <line:20:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x55fab28ceb28 <line:22:1, line:32:1> line:22:5 main 'int ()'
  `-CompoundStmt 0x55fab28cf2e8 <col:12, line:32:1>
    |-DeclStmt 0x55fab28ced68 <line:23:5, col:16>
    | |-VarDecl 0x55fab28cebe0 <col:5, col:9> col:9 used x 'int'
    | |-VarDecl 0x55fab28cec60 <col:5, col:12> col:12 used y 'int'
    | `-VarDecl 0x55fab28cece0 <col:5, col:15> col:15 used n 'int'
    |-BinaryOperator 0x55fab28cee28 <line:24:5, col:31> 'int' '='
    | |-DeclRefExpr 0x55fab28ced80 <col:5> 'int' lvalue Var 0x55fab28cebe0 'x' 'int'
    | `-CallExpr 0x55fab28cee08 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x55fab28cedf0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55fab28ceda0 <col:9> 'int (void)' Function 0x55fab28ce9e8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55fab28ceec0 <line:25:5, col:31> 'int' '='
    | |-DeclRefExpr 0x55fab28cee48 <col:5> 'int' lvalue Var 0x55fab28cec60 'y' 'int'
    | `-CallExpr 0x55fab28ceea0 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x55fab28cee88 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55fab28cee68 <col:9> 'int (void)' Function 0x55fab28ce9e8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55fab28cef58 <line:26:5, col:31> 'int' '='
    | |-DeclRefExpr 0x55fab28ceee0 <col:5> 'int' lvalue Var 0x55fab28cece0 'n' 'int'
    | `-CallExpr 0x55fab28cef38 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x55fab28cef20 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55fab28cef00 <col:9> 'int (void)' Function 0x55fab28ce9e8 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x55fab28cf2a0 <line:27:5, line:30:5>
    | |-BinaryOperator 0x55fab28cf080 <line:27:12, col:25> 'int' '&&'
    | | |-BinaryOperator 0x55fab28cefd0 <col:12, col:16> 'int' '>'
    | | | |-ImplicitCastExpr 0x55fab28cefb8 <col:12> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x55fab28cef78 <col:12> 'int' lvalue Var 0x55fab28cebe0 'x' 'int'
    | | | `-IntegerLiteral 0x55fab28cef98 <col:16> 'int' 0
    | | `-BinaryOperator 0x55fab28cf060 <col:21, col:25> 'int' '<'
    | |   |-ImplicitCastExpr 0x55fab28cf030 <col:21> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x55fab28ceff0 <col:21> 'int' lvalue Var 0x55fab28cebe0 'x' 'int'
    | |   `-ImplicitCastExpr 0x55fab28cf048 <col:25> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x55fab28cf010 <col:25> 'int' lvalue Var 0x55fab28cece0 'n' 'int'
    | `-CompoundStmt 0x55fab28cf280 <col:28, line:30:5>
    |   |-BinaryOperator 0x55fab28cf1a8 <line:28:9, col:22> 'int' '='
    |   | |-DeclRefExpr 0x55fab28cf0a0 <col:9> 'int' lvalue Var 0x55fab28cebe0 'x' 'int'
    |   | `-BinaryOperator 0x55fab28cf188 <col:13, col:22> 'int' '-'
    |   |   |-BinaryOperator 0x55fab28cf148 <col:13, col:18> 'int' '+'
    |   |   | |-UnaryOperator 0x55fab28cf0f8 <col:13, col:14> 'int' prefix '-'
    |   |   | | `-ImplicitCastExpr 0x55fab28cf0e0 <col:14> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x55fab28cf0c0 <col:14> 'int' lvalue Var 0x55fab28cebe0 'x' 'int'
    |   |   | `-ImplicitCastExpr 0x55fab28cf130 <col:18> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x55fab28cf110 <col:18> 'int' lvalue Var 0x55fab28cec60 'y' 'int'
    |   |   `-IntegerLiteral 0x55fab28cf168 <col:22> 'int' 5
    |   `-BinaryOperator 0x55fab28cf260 <line:29:9, col:15> 'int' '='
    |     |-DeclRefExpr 0x55fab28cf1c8 <col:9> 'int' lvalue Var 0x55fab28cec60 'y' 'int'
    |     `-BinaryOperator 0x55fab28cf240 <col:13, col:15> 'int' '*'
    |       |-IntegerLiteral 0x55fab28cf1e8 <col:13> 'int' 2
    |       `-ImplicitCastExpr 0x55fab28cf228 <col:15> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55fab28cf208 <col:15> 'int' lvalue Var 0x55fab28cec60 'y' 'int'
    `-ReturnStmt 0x55fab28cf2d8 <line:31:5, col:12>
      `-IntegerLiteral 0x55fab28cf2b8 <col:12> 'int' 0
