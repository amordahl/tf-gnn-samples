TranslationUnitDecl 0x55c4d426e748 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55c4d426f008 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55c4d426ece0 '__int128'
|-TypedefDecl 0x55c4d426f078 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55c4d426ed00 'unsigned __int128'
|-TypedefDecl 0x55c4d426f380 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55c4d426f150 'struct __NSConstantString_tag'
|   `-Record 0x55c4d426f0d0 '__NSConstantString_tag'
|-TypedefDecl 0x55c4d426f428 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55c4d426f3e0 'char *'
|   `-BuiltinType 0x55c4d426e7e0 'char'
|-TypedefDecl 0x55c4d42ae3e0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55c4d426f6c0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55c4d426f500 'struct __va_list_tag'
|     `-Record 0x55c4d426f480 '__va_list_tag'
|-EnumDecl 0x55c4d42ae438 <termination-crafted-lit/AliasDarteFeautrierGonnord-SAS2010-counterex1b_false-no-overflow.c:9:9, col:26> col:9
| |-EnumConstantDecl 0x55c4d42ae508 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x55c4d42ae558 <col:22> col:22 true 'int'
|-TypedefDecl 0x55c4d42ae610 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x55c4d42ae5b0 'enum bool' sugar
|   `-EnumType 0x55c4d42ae4e0 'bool'
|     `-Enum 0x55c4d42ae438 ''
|-FunctionDecl 0x55c4d42ae758 <line:11:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x55c4d42ae898 <line:13:1, line:28:1> line:13:5 main 'int ()'
  `-CompoundStmt 0x55c4d42af2d0 <col:12, line:28:1>
    |-DeclStmt 0x55c4d42aead8 <line:14:5, col:16>
    | |-VarDecl 0x55c4d42ae950 <col:5, col:9> col:9 used x 'int'
    | |-VarDecl 0x55c4d42ae9d0 <col:5, col:12> col:12 used y 'int'
    | `-VarDecl 0x55c4d42aea50 <col:5, col:15> col:15 used n 'int'
    |-BinaryOperator 0x55c4d42aeb98 <line:15:2, col:28> 'int' '='
    | |-DeclRefExpr 0x55c4d42aeaf0 <col:2> 'int' lvalue Var 0x55c4d42aea50 'n' 'int'
    | `-CallExpr 0x55c4d42aeb78 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x55c4d42aeb60 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55c4d42aeb10 <col:6> 'int (void)' Function 0x55c4d42ae758 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55c4d42aec30 <line:16:2, col:28> 'int' '='
    | |-DeclRefExpr 0x55c4d42aebb8 <col:2> 'int' lvalue Var 0x55c4d42ae950 'x' 'int'
    | `-CallExpr 0x55c4d42aec10 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x55c4d42aebf8 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55c4d42aebd8 <col:6> 'int (void)' Function 0x55c4d42ae758 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55c4d42aecc8 <line:17:2, col:28> 'int' '='
    | |-DeclRefExpr 0x55c4d42aec50 <col:2> 'int' lvalue Var 0x55c4d42ae9d0 'y' 'int'
    | `-CallExpr 0x55c4d42aeca8 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x55c4d42aec90 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55c4d42aec70 <col:6> 'int (void)' Function 0x55c4d42ae758 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x55c4d42af288 <line:18:2, line:26:2>
    | |-BinaryOperator 0x55c4d42aed40 <line:18:9, col:14> 'int' '>='
    | | |-ImplicitCastExpr 0x55c4d42aed28 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55c4d42aece8 <col:9> 'int' lvalue Var 0x55c4d42ae950 'x' 'int'
    | | `-IntegerLiteral 0x55c4d42aed08 <col:14> 'int' 0
    | `-CompoundStmt 0x55c4d42af260 <col:17, line:26:2>
    |   |-WhileStmt 0x55c4d42aef60 <line:19:3, line:21:9>
    |   | |-BinaryOperator 0x55c4d42aee70 <line:19:10, col:47> 'int' '&&'
    |   | | |-BinaryOperator 0x55c4d42aedb8 <col:10, col:15> 'int' '>='
    |   | | | |-ImplicitCastExpr 0x55c4d42aeda0 <col:10> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x55c4d42aed60 <col:10> 'int' lvalue Var 0x55c4d42ae9d0 'y' 'int'
    |   | | | `-IntegerLiteral 0x55c4d42aed80 <col:15> 'int' 0
    |   | | `-BinaryOperator 0x55c4d42aee50 <col:20, col:47> 'int' '!='
    |   | |   |-CallExpr 0x55c4d42aee10 <col:20, col:42> 'int'
    |   | |   | `-ImplicitCastExpr 0x55c4d42aedf8 <col:20> 'int (*)(void)' <FunctionToPointerDecay>
    |   | |   |   `-DeclRefExpr 0x55c4d42aedd8 <col:20> 'int (void)' Function 0x55c4d42ae758 '__VERIFIER_nondet_int' 'int (void)'
    |   | |   `-IntegerLiteral 0x55c4d42aee30 <col:47> 'int' 0
    |   | `-CompoundStmt 0x55c4d42aef48 <col:50, line:21:9>
    |   |   `-BinaryOperator 0x55c4d42aef28 <line:20:4, col:12> 'int' '='
    |   |     |-DeclRefExpr 0x55c4d42aee90 <col:4> 'int' lvalue Var 0x55c4d42ae9d0 'y' 'int'
    |   |     `-BinaryOperator 0x55c4d42aef08 <col:8, col:12> 'int' '-'
    |   |       |-ImplicitCastExpr 0x55c4d42aeef0 <col:8> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x55c4d42aeeb0 <col:8> 'int' lvalue Var 0x55c4d42ae9d0 'y' 'int'
    |   |       `-IntegerLiteral 0x55c4d42aeed0 <col:12> 'int' 1
    |   |-BinaryOperator 0x55c4d42af010 <line:22:3, col:11> 'int' '='
    |   | |-DeclRefExpr 0x55c4d42aef78 <col:3> 'int' lvalue Var 0x55c4d42ae950 'x' 'int'
    |   | `-BinaryOperator 0x55c4d42aeff0 <col:7, col:11> 'int' '-'
    |   |   |-ImplicitCastExpr 0x55c4d42aefd8 <col:7> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x55c4d42aef98 <col:7> 'int' lvalue Var 0x55c4d42ae950 'x' 'int'
    |   |   `-IntegerLiteral 0x55c4d42aefb8 <col:11> 'int' 1
    |   `-WhileStmt 0x55c4d42af248 <line:23:3, line:25:9>
    |     |-BinaryOperator 0x55c4d42af158 <line:23:10, col:47> 'int' '&&'
    |     | |-BinaryOperator 0x55c4d42af0a0 <col:10, col:15> 'int' '<='
    |     | | |-ImplicitCastExpr 0x55c4d42af070 <col:10> 'int' <LValueToRValue>
    |     | | | `-DeclRefExpr 0x55c4d42af030 <col:10> 'int' lvalue Var 0x55c4d42ae9d0 'y' 'int'
    |     | | `-ImplicitCastExpr 0x55c4d42af088 <col:15> 'int' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55c4d42af050 <col:15> 'int' lvalue Var 0x55c4d42aea50 'n' 'int'
    |     | `-BinaryOperator 0x55c4d42af138 <col:20, col:47> 'int' '!='
    |     |   |-CallExpr 0x55c4d42af0f8 <col:20, col:42> 'int'
    |     |   | `-ImplicitCastExpr 0x55c4d42af0e0 <col:20> 'int (*)(void)' <FunctionToPointerDecay>
    |     |   |   `-DeclRefExpr 0x55c4d42af0c0 <col:20> 'int (void)' Function 0x55c4d42ae758 '__VERIFIER_nondet_int' 'int (void)'
    |     |   `-IntegerLiteral 0x55c4d42af118 <col:47> 'int' 0
    |     `-CompoundStmt 0x55c4d42af230 <col:50, line:25:9>
    |       `-BinaryOperator 0x55c4d42af210 <line:24:4, col:12> 'int' '='
    |         |-DeclRefExpr 0x55c4d42af178 <col:4> 'int' lvalue Var 0x55c4d42ae9d0 'y' 'int'
    |         `-BinaryOperator 0x55c4d42af1f0 <col:8, col:12> 'int' '+'
    |           |-ImplicitCastExpr 0x55c4d42af1d8 <col:8> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55c4d42af198 <col:8> 'int' lvalue Var 0x55c4d42ae9d0 'y' 'int'
    |           `-IntegerLiteral 0x55c4d42af1b8 <col:12> 'int' 1
    `-ReturnStmt 0x55c4d42af2c0 <line:27:2, col:9>
      `-IntegerLiteral 0x55c4d42af2a0 <col:9> 'int' 0
