TranslationUnitDecl 0x5620772c7538 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5620772c7df8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5620772c7ad0 '__int128'
|-TypedefDecl 0x5620772c7e68 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5620772c7af0 'unsigned __int128'
|-TypedefDecl 0x5620772c8170 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5620772c7f40 'struct __NSConstantString_tag'
|   `-Record 0x5620772c7ec0 '__NSConstantString_tag'
|-TypedefDecl 0x5620772c8218 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5620772c81d0 'char *'
|   `-BuiltinType 0x5620772c75d0 'char'
|-TypedefDecl 0x562077307340 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5620772c84b0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5620772c82f0 'struct __va_list_tag'
|     `-Record 0x5620772c8270 '__va_list_tag'
|-TypedefDecl 0x5620773073b0 <termination-crafted/LexIndexValue-Pointer_true-no-overflow.c:8:2, col:28> col:28 referenced size_t 'unsigned long'
| `-BuiltinType 0x5620772c76f0 'unsigned long'
|-FunctionDecl 0x5620773075c0 <line:10:35> col:35 implicit used malloc 'void *(unsigned long)' extern
| `-ParmVarDecl 0x562077307660 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x5620773076d0 prev 0x5620773075c0 <col:1, col:56> col:35 used malloc 'void *(unsigned long)'
| `-ParmVarDecl 0x562077307448 <col:43, col:50> col:50 __size 'size_t':'unsigned long'
|-FunctionDecl 0x562077307848 <line:12:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x562077307988 <line:14:1, line:29:1> line:14:5 main 'int ()'
  `-CompoundStmt 0x56207732c938 <col:12, line:29:1>
    |-DeclStmt 0x562077307c18 <line:15:2, col:37>
    | `-VarDecl 0x562077307a78 <col:2, col:36> col:7 used p 'int *' cinit
    |   `-ImplicitCastExpr 0x562077307c00 <col:11, col:36> 'int *' <BitCast>
    |     `-CallExpr 0x562077307bd8 <col:11, col:36> 'void *'
    |       |-ImplicitCastExpr 0x562077307bc0 <col:11> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x562077307ae0 <col:11> 'void *(unsigned long)' Function 0x5620773076d0 'malloc' 'void *(unsigned long)'
    |       `-BinaryOperator 0x562077307b70 <col:18, col:35> 'unsigned long' '*'
    |         |-ImplicitCastExpr 0x562077307b58 <col:18> 'unsigned long' <IntegralCast>
    |         | `-IntegerLiteral 0x562077307b00 <col:18> 'int' 1048
    |         `-UnaryExprOrTypeTraitExpr 0x562077307b38 <col:25, col:35> 'unsigned long' sizeof 'int'
    |-DeclStmt 0x562077307ce8 <line:16:3, col:13>
    | `-VarDecl 0x562077307c48 <col:3, col:12> col:8 used q 'int *' cinit
    |   `-ImplicitCastExpr 0x562077307cd0 <col:12> 'int *' <LValueToRValue>
    |     `-DeclRefExpr 0x562077307cb0 <col:12> 'int *' lvalue Var 0x562077307a78 'p' 'int *'
    |-ForStmt 0x562077307ff0 <line:17:3, line:19:3>
    | |-DeclStmt 0x562077307da0 <line:17:8, col:17>
    | | `-VarDecl 0x562077307d18 <col:8, col:16> col:12 used i 'int' cinit
    | |   `-IntegerLiteral 0x562077307d80 <col:16> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x562077307e10 <col:19, col:23> 'int' '<'
    | | |-ImplicitCastExpr 0x562077307df8 <col:19> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x562077307db8 <col:19> 'int' lvalue Var 0x562077307d18 'i' 'int'
    | | `-IntegerLiteral 0x562077307dd8 <col:23> 'int' 1048
    | |-UnaryOperator 0x562077307e50 <col:29, col:30> 'int' postfix '++'
    | | `-DeclRefExpr 0x562077307e30 <col:29> 'int' lvalue Var 0x562077307d18 'i' 'int'
    | `-CompoundStmt 0x562077307fd8 <col:34, line:19:3>
    |   `-BinaryOperator 0x562077307fb8 <line:18:5, col:36> 'int' '='
    |     |-UnaryOperator 0x562077307f18 <col:5, col:10> 'int' lvalue prefix '*' cannot overflow
    |     | `-ParenExpr 0x562077307ef8 <col:6, col:10> 'int *'
    |     |   `-BinaryOperator 0x562077307ed8 <col:7, col:9> 'int *' '+'
    |     |     |-ImplicitCastExpr 0x562077307ea8 <col:7> 'int *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x562077307e68 <col:7> 'int *' lvalue Var 0x562077307c48 'q' 'int *'
    |     |     `-ImplicitCastExpr 0x562077307ec0 <col:9> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x562077307e88 <col:9> 'int' lvalue Var 0x562077307d18 'i' 'int'
    |     `-CallExpr 0x562077307f98 <col:14, col:36> 'int'
    |       `-ImplicitCastExpr 0x562077307f80 <col:14> 'int (*)(void)' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x562077307f30 <col:14> 'int (void)' Function 0x562077307848 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x562077308080 <line:20:2, col:6> 'int *' '='
    | |-DeclRefExpr 0x562077308028 <col:2> 'int *' lvalue Var 0x562077307c48 'q' 'int *'
    | `-ImplicitCastExpr 0x562077308068 <col:6> 'int *' <LValueToRValue>
    |   `-DeclRefExpr 0x562077308048 <col:6> 'int *' lvalue Var 0x562077307a78 'p' 'int *'
    |-WhileStmt 0x56207732c8f0 <line:21:2, line:27:2>
    | |-BinaryOperator 0x562077308248 <line:21:9, col:31> 'int' '&&'
    | | |-BinaryOperator 0x562077308150 <col:9, col:17> 'int' '<'
    | | | |-ImplicitCastExpr 0x562077308138 <col:9> 'int *' <LValueToRValue>
    | | | | `-DeclRefExpr 0x5620773080a0 <col:9> 'int *' lvalue Var 0x562077307c48 'q' 'int *'
    | | | `-BinaryOperator 0x562077308118 <col:13, col:17> 'int *' '+'
    | | |   |-ImplicitCastExpr 0x562077308100 <col:13> 'int *' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x5620773080c0 <col:13> 'int *' lvalue Var 0x562077307a78 'p' 'int *'
    | | |   `-IntegerLiteral 0x5620773080e0 <col:17> 'int' 1048
    | | `-BinaryOperator 0x562077308228 <col:25, col:31> 'int' '>='
    | |   |-ImplicitCastExpr 0x562077308210 <col:25, col:26> 'int' <LValueToRValue>
    | |   | `-UnaryOperator 0x5620773081d8 <col:25, col:26> 'int' lvalue prefix '*' cannot overflow
    | |   |   `-ImplicitCastExpr 0x5620773081c0 <col:26> 'int *' <LValueToRValue>
    | |   |     `-DeclRefExpr 0x5620773081a0 <col:26> 'int *' lvalue Var 0x562077307c48 'q' 'int *'
    | |   `-IntegerLiteral 0x5620773081f0 <col:31> 'int' 0
    | `-CompoundStmt 0x56207732c8d8 <col:34, line:27:2>
    |   `-IfStmt 0x56207732c8b0 <line:22:3, line:26:3> has_else
    |     |-CallExpr 0x5620773082a0 <line:22:7, col:29> 'int'
    |     | `-ImplicitCastExpr 0x562077308288 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
    |     |   `-DeclRefExpr 0x562077308268 <col:7> 'int (void)' Function 0x562077307848 '__VERIFIER_nondet_int' 'int (void)'
    |     |-CompoundStmt 0x5620773082f8 <col:32, line:24:3>
    |     | `-UnaryOperator 0x5620773082e0 <line:23:4, col:5> 'int *' postfix '++'
    |     |   `-DeclRefExpr 0x5620773082c0 <col:4> 'int *' lvalue Var 0x562077307c48 'q' 'int *'
    |     `-CompoundStmt 0x56207732c898 <line:24:10, line:26:3>
    |       `-UnaryOperator 0x56207732c880 <line:25:4, col:8> 'int' postfix '--'
    |         `-ParenExpr 0x56207732c860 <col:4, col:7> 'int' lvalue
    |           `-UnaryOperator 0x56207732c848 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    |             `-ImplicitCastExpr 0x56207732c830 <col:6> 'int *' <LValueToRValue>
    |               `-DeclRefExpr 0x562077308310 <col:6> 'int *' lvalue Var 0x562077307c48 'q' 'int *'
    `-ReturnStmt 0x56207732c928 <line:28:2, col:9>
      `-IntegerLiteral 0x56207732c908 <col:9> 'int' 0
