TranslationUnitDecl 0x55f6a75196c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55f6a7519f88 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55f6a7519c60 '__int128'
|-TypedefDecl 0x55f6a7519ff8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55f6a7519c80 'unsigned __int128'
|-TypedefDecl 0x55f6a751a300 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55f6a751a0d0 'struct __NSConstantString_tag'
|   `-Record 0x55f6a751a050 '__NSConstantString_tag'
|-TypedefDecl 0x55f6a751a3a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55f6a751a360 'char *'
|   `-BuiltinType 0x55f6a7519760 'char'
|-TypedefDecl 0x55f6a755bbb0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55f6a751a640 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55f6a751a480 'struct __va_list_tag'
|     `-Record 0x55f6a751a400 '__va_list_tag'
|-FunctionDecl 0x55f6a755bc90 <seq-mthreaded/pals_lcr.4_overflow_false-unreach-call.ufo.UNBOUNDED.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55f6a755be70 <line:61:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
| `-FullComment 0x55f6a7593c40 <line:3:4, line:56:69>
|   |-ParagraphComment 0x55f6a7593270 <line:3:4, col:71>
|   | `-TextComment 0x55f6a7593240 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x55f6a75932c0 <line:5:1, col:67>
|   | `-TextComment 0x55f6a7593290 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x55f6a7593360 <line:7:1, line:9:4>
|   | |-TextComment 0x55f6a75932e0 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x55f6a7593300 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x55f6a7593320 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x55f6a7593400 <line:11:1, line:13:12>
|   | |-TextComment 0x55f6a7593380 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x55f6a75933a0 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x55f6a75933c0 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x55f6a75934a0 <line:15:1, line:17:68>
|   | |-TextComment 0x55f6a7593420 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x55f6a7593440 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x55f6a7593460 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x55f6a7593590 <line:19:1, line:23:10>
|   | |-TextComment 0x55f6a75934c0 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x55f6a75934e0 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x55f6a7593500 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x55f6a7593520 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x55f6a7593540 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55f6a75935b0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55f6a7593610 <col:15, col:23>
|   |   `-TextComment 0x55f6a75935e0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55f6a75936b0 <line:25:1, line:27:10>
|   | |-TextComment 0x55f6a7593630 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x55f6a7593650 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x55f6a7593670 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55f6a75936d0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55f6a7593730 <col:15, col:23>
|   |   `-TextComment 0x55f6a7593700 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55f6a75937a0 <line:29:1, line:30:15>
|   | |-TextComment 0x55f6a7593750 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x55f6a7593770 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x55f6a7593890 <line:32:1, line:36:7>
|   | |-TextComment 0x55f6a75937c0 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x55f6a75937e0 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x55f6a7593800 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x55f6a7593820 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x55f6a7593840 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x55f6a7593930 <line:38:1, line:40:61>
|   | |-TextComment 0x55f6a75938b0 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x55f6a75938d0 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x55f6a75938f0 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x55f6a7593a90 <line:42:1, line:49:37>
|   | |-TextComment 0x55f6a7593950 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x55f6a7593970 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x55f6a7593990 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x55f6a75939b0 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x55f6a75939d0 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x55f6a75939f0 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x55f6a7593a10 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x55f6a7593a30 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x55f6a7593b00 <line:51:1, line:52:13>
|   | |-TextComment 0x55f6a7593ab0 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x55f6a7593ad0 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x55f6a7593b50 <line:54:1, col:10>
|   | `-TextComment 0x55f6a7593b20 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x55f6a7593ba0 <line:56:2, col:69>
|     `-TextComment 0x55f6a7593b70 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x55f6a755bfe0 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x55f6a755c158 <line:63:1, col:43> col:15 used __VERIFIER_nondet_uchar 'unsigned char (void)'
|-FunctionDecl 0x55f6a755c290 prev 0x55f6a755bfe0 <line:64:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x55f6a755c3d0 prev 0x55f6a755c158 <line:65:1, col:43> col:15 used __VERIFIER_nondet_uchar 'unsigned char (void)'
|-FunctionDecl 0x55f6a755c550 <line:66:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x55f6a755c480 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x55f6a755c6e0 <line:67:1, col:32> col:6 used __VERIFIER_assume 'void (int)'
| `-ParmVarDecl 0x55f6a755c610 <col:24, col:28> col:28 arg 'int'
|-TypedefDecl 0x55f6a755c798 <line:68:1, col:14> col:14 referenced msg_t 'char'
| `-BuiltinType 0x55f6a7519760 'char'
|-TypedefDecl 0x55f6a755c808 <line:69:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x55f6a75197c0 'int'
|-FunctionDecl 0x55f6a755ca50 <line:70:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55f6a755c898 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x55f6a755c938 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x55f6a7581728 <line:71:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55f6a755cb10 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x55f6a7581690 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x55f6a75817e8 <line:72:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x55f6a7581898 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x55f6a7581870 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x55f6a7581850 <col:28> 'int' 1
|-VarDecl 0x55f6a75818d8 <line:73:1, col:15> col:15 used r1 'unsigned char'
|-VarDecl 0x55f6a7581950 <line:74:1, col:8> col:8 p1 'port_t':'int'
|-VarDecl 0x55f6a75819c8 <line:75:1, col:6> col:6 used p1_old 'char'
|-VarDecl 0x55f6a7581a40 <line:76:1, col:6> col:6 used p1_new 'char'
|-VarDecl 0x55f6a7581ab8 <line:77:1, col:6> col:6 used id1 'char'
|-VarDecl 0x55f6a7581b30 <line:78:1, col:6> col:6 used st1 'char'
|-VarDecl 0x55f6a7581ba8 <line:79:1, col:7> col:7 used send1 'msg_t':'char'
|-VarDecl 0x55f6a7581c20 <line:80:1, col:7> col:7 used mode1 '_Bool'
|-VarDecl 0x55f6a7581c98 <line:81:1, col:8> col:8 p2 'port_t':'int'
|-VarDecl 0x55f6a7581d10 <line:82:1, col:6> col:6 used p2_old 'char'
|-VarDecl 0x55f6a7581d88 <line:83:1, col:6> col:6 used p2_new 'char'
|-VarDecl 0x55f6a7581e00 <line:84:1, col:6> col:6 used id2 'char'
|-VarDecl 0x55f6a7581e78 <line:85:1, col:6> col:6 used st2 'char'
|-VarDecl 0x55f6a7581ef0 <line:86:1, col:7> col:7 used send2 'msg_t':'char'
|-VarDecl 0x55f6a7581f68 <line:87:1, col:7> col:7 used mode2 '_Bool'
|-VarDecl 0x55f6a7581fe0 <line:88:1, col:8> col:8 p3 'port_t':'int'
|-VarDecl 0x55f6a7582058 <line:89:1, col:6> col:6 used p3_old 'char'
|-VarDecl 0x55f6a75820d0 <line:90:1, col:6> col:6 used p3_new 'char'
|-VarDecl 0x55f6a7582148 <line:91:1, col:6> col:6 used id3 'char'
|-VarDecl 0x55f6a75821c0 <line:92:1, col:6> col:6 used st3 'char'
|-VarDecl 0x55f6a7582238 <line:93:1, col:7> col:7 used send3 'msg_t':'char'
|-VarDecl 0x55f6a75822b0 <line:94:1, col:7> col:7 used mode3 '_Bool'
|-VarDecl 0x55f6a7582328 <line:95:1, col:8> col:8 p4 'port_t':'int'
|-VarDecl 0x55f6a75823a0 <line:96:1, col:6> col:6 used p4_old 'char'
|-VarDecl 0x55f6a7582418 <line:97:1, col:6> col:6 used p4_new 'char'
|-VarDecl 0x55f6a7582490 <line:98:1, col:6> col:6 used id4 'char'
|-VarDecl 0x55f6a7582508 <line:99:1, col:6> col:6 used st4 'char'
|-VarDecl 0x55f6a7582580 <line:100:1, col:7> col:7 used send4 'msg_t':'char'
|-VarDecl 0x55f6a75825f8 <line:101:1, col:7> col:7 used mode4 '_Bool'
|-FunctionDecl 0x55f6a75838f0 <line:102:1, line:127:1> line:102:6 used node1 'void (void)'
| `-CompoundStmt 0x55f6a75846c8 <line:103:1, line:127:1>
|   |-DeclStmt 0x55f6a7583a08 <line:104:3, col:12>
|   | `-VarDecl 0x55f6a75839a0 <col:3, col:9> col:9 used m1 'msg_t':'char'
|   `-CompoundStmt 0x55f6a75846a0 <line:106:3, line:126:1>
|     |-BinaryOperator 0x55f6a7583a78 <line:107:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55f6a7583a20 <col:3> 'msg_t':'char' lvalue Var 0x55f6a75839a0 'm1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55f6a7583a60 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f6a7583a40 <col:8> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55f6a7584668 <line:108:3, line:124:3> has_else
|     | |-ImplicitCastExpr 0x55f6a7583ab8 <line:108:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55f6a7583a98 <col:7> '_Bool' lvalue Var 0x55f6a7581c20 'mode1' '_Bool'
|     | |-CompoundStmt 0x55f6a75842b0 <col:14, line:121:3>
|     | | |-BinaryOperator 0x55f6a7583c28 <line:109:5, col:39> 'unsigned char' '='
|     | | | |-DeclRefExpr 0x55f6a7583ad0 <col:5> 'unsigned char' lvalue Var 0x55f6a75818d8 'r1' 'unsigned char'
|     | | | `-CStyleCastExpr 0x55f6a7583c00 <col:10, col:39> 'unsigned char' <IntegralCast>
|     | | |   `-ParenExpr 0x55f6a7583be0 <col:26, col:39> 'int'
|     | | |     `-BinaryOperator 0x55f6a7583b88 <col:27, col:38> 'int' '+'
|     | | |       |-CStyleCastExpr 0x55f6a7583b40 <col:27, col:33> 'int' <IntegralCast>
|     | | |       | `-ImplicitCastExpr 0x55f6a7583b28 <col:33> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | | |       |   `-DeclRefExpr 0x55f6a7583af0 <col:33> 'unsigned char' lvalue Var 0x55f6a75818d8 'r1' 'unsigned char'
|     | | |       `-IntegerLiteral 0x55f6a7583b68 <col:38> 'int' 1
|     | | |-BinaryOperator 0x55f6a7583ca0 <line:110:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55f6a7583c48 <col:5> 'msg_t':'char' lvalue Var 0x55f6a75839a0 'm1' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55f6a7583c88 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f6a7583c68 <col:10> 'char' lvalue Var 0x55f6a75823a0 'p4_old' 'char'
|     | | |-BinaryOperator 0x55f6a7583d18 <line:111:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55f6a7583cc0 <col:5> 'char' lvalue Var 0x55f6a75823a0 'p4_old' 'char'
|     | | | `-ImplicitCastExpr 0x55f6a7583d00 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f6a7583ce0 <col:14> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55f6a7584200 <line:112:5, line:119:5>
|     | | | |-BinaryOperator 0x55f6a7583e28 <line:112:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55f6a7583d88 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55f6a7583d70 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55f6a7583d38 <col:15> 'msg_t':'char' lvalue Var 0x55f6a75839a0 'm1' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55f6a7583e00 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55f6a7583de8 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55f6a7583db0 <col:27> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55f6a75841e8 <col:34, line:119:5>
|     | | |   `-IfStmt 0x55f6a75841c0 <line:113:7, line:118:7> has_else
|     | | |     |-BinaryOperator 0x55f6a7583f38 <line:113:11, col:28> 'int' '>'
|     | | |     | |-CStyleCastExpr 0x55f6a7583e98 <col:11, col:17> 'int' <IntegralCast>
|     | | |     | | `-ImplicitCastExpr 0x55f6a7583e80 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     | |   `-DeclRefExpr 0x55f6a7583e48 <col:17> 'msg_t':'char' lvalue Var 0x55f6a75839a0 'm1' 'msg_t':'char'
|     | | |     | `-CStyleCastExpr 0x55f6a7583f10 <col:22, col:28> 'int' <IntegralCast>
|     | | |     |   `-ImplicitCastExpr 0x55f6a7583ef8 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     `-DeclRefExpr 0x55f6a7583ec0 <col:28> 'char' lvalue Var 0x55f6a7581ab8 'id1' 'char'
|     | | |     |-CompoundStmt 0x55f6a7583fd0 <col:33, line:115:7>
|     | | |     | `-BinaryOperator 0x55f6a7583fb0 <line:114:9, col:17> 'msg_t':'char' '='
|     | | |     |   |-DeclRefExpr 0x55f6a7583f58 <col:9> 'msg_t':'char' lvalue Var 0x55f6a7581ba8 'send1' 'msg_t':'char'
|     | | |     |   `-ImplicitCastExpr 0x55f6a7583f98 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |     |     `-DeclRefExpr 0x55f6a7583f78 <col:17> 'msg_t':'char' lvalue Var 0x55f6a75839a0 'm1' 'msg_t':'char'
|     | | |     `-IfStmt 0x55f6a75841a8 <line:116:7, line:118:7>
|     | | |       |-BinaryOperator 0x55f6a75840d8 <line:116:11, col:29> 'int' '=='
|     | | |       | |-CStyleCastExpr 0x55f6a7584038 <col:11, col:17> 'int' <IntegralCast>
|     | | |       | | `-ImplicitCastExpr 0x55f6a7584020 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |       | |   `-DeclRefExpr 0x55f6a7583fe8 <col:17> 'msg_t':'char' lvalue Var 0x55f6a75839a0 'm1' 'msg_t':'char'
|     | | |       | `-CStyleCastExpr 0x55f6a75840b0 <col:23, col:29> 'int' <IntegralCast>
|     | | |       |   `-ImplicitCastExpr 0x55f6a7584098 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |       |     `-DeclRefExpr 0x55f6a7584060 <col:29> 'char' lvalue Var 0x55f6a7581ab8 'id1' 'char'
|     | | |       `-CompoundStmt 0x55f6a7584190 <col:34, line:118:7>
|     | | |         `-BinaryOperator 0x55f6a7584170 <line:117:9, col:21> 'char' '='
|     | | |           |-DeclRefExpr 0x55f6a75840f8 <col:9> 'char' lvalue Var 0x55f6a7581b30 'st1' 'char'
|     | | |           `-CStyleCastExpr 0x55f6a7584148 <col:15, col:21> 'char' <IntegralCast>
|     | | |             `-IntegerLiteral 0x55f6a7584118 <col:21> 'int' 1
|     | | `-BinaryOperator 0x55f6a7584290 <line:120:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55f6a7584218 <col:5> '_Bool' lvalue Var 0x55f6a7581c20 'mode1' '_Bool'
|     | |   `-CStyleCastExpr 0x55f6a7584268 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55f6a7584238 <col:20> 'int' 0
|     | `-CompoundStmt 0x55f6a7584648 <line:121:10, line:124:3>
|     |   |-BinaryOperator 0x55f6a7584590 <line:122:5, col:58> 'char' '='
|     |   | |-DeclRefExpr 0x55f6a75842e8 <col:5> 'char' lvalue Var 0x55f6a7581a40 'p1_new' 'char'
|     |   | `-ImplicitCastExpr 0x55f6a7584578 <col:14, col:58> 'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55f6a7584548 <col:14, col:58> 'int'
|     |   |     |-BinaryOperator 0x55f6a7584488 <col:14, col:42> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55f6a75843a8 <col:14, col:23> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55f6a7584378 <col:14> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55f6a7584348 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55f6a7584308 <col:14> 'msg_t':'char' lvalue Var 0x55f6a7581ba8 'send1' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55f6a7584390 <col:23> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55f6a7584360 <col:23> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55f6a7584328 <col:23> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55f6a7584468 <col:32, col:42> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55f6a7584438 <col:32> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55f6a7584408 <col:32> 'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55f6a75843c8 <col:32> 'char' lvalue Var 0x55f6a7581a40 'p1_new' 'char'
|     |   |     |   `-ImplicitCastExpr 0x55f6a7584450 <col:42> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55f6a7584420 <col:42> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55f6a75843e8 <col:42> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55f6a7584500 <col:50> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55f6a75844e8 <col:50> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55f6a75844a8 <col:50> 'msg_t':'char' lvalue Var 0x55f6a7581ba8 'send1' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55f6a7584530 <col:58> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55f6a7584518 <col:58> 'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55f6a75844c8 <col:58> 'char' lvalue Var 0x55f6a7581a40 'p1_new' 'char'
|     |   `-BinaryOperator 0x55f6a7584628 <line:123:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55f6a75845b0 <col:5> '_Bool' lvalue Var 0x55f6a7581c20 'mode1' '_Bool'
|     |     `-CStyleCastExpr 0x55f6a7584600 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55f6a75845d0 <col:20> 'int' 1
|     `-ReturnStmt 0x55f6a7584690 <line:125:3>
|-FunctionDecl 0x55f6a7584780 <line:128:1, line:152:1> line:128:6 used node2 'void (void)'
| `-CompoundStmt 0x55f6a7586898 <line:129:1, line:152:1>
|   |-DeclStmt 0x55f6a7585d58 <line:130:3, col:12>
|   | `-VarDecl 0x55f6a7585cf0 <col:3, col:9> col:9 used m2 'msg_t':'char'
|   `-CompoundStmt 0x55f6a7586870 <line:132:3, line:151:1>
|     |-BinaryOperator 0x55f6a7585dc8 <line:133:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55f6a7585d70 <col:3> 'msg_t':'char' lvalue Var 0x55f6a7585cf0 'm2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55f6a7585db0 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f6a7585d90 <col:8> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55f6a7586838 <line:134:3, line:149:3> has_else
|     | |-ImplicitCastExpr 0x55f6a7585e08 <line:134:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55f6a7585de8 <col:7> '_Bool' lvalue Var 0x55f6a7581f68 'mode2' '_Bool'
|     | |-CompoundStmt 0x55f6a7586488 <col:14, line:146:3>
|     | | |-BinaryOperator 0x55f6a7585e78 <line:135:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55f6a7585e20 <col:5> 'msg_t':'char' lvalue Var 0x55f6a7585cf0 'm2' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55f6a7585e60 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f6a7585e40 <col:10> 'char' lvalue Var 0x55f6a75819c8 'p1_old' 'char'
|     | | |-BinaryOperator 0x55f6a7585ef0 <line:136:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55f6a7585e98 <col:5> 'char' lvalue Var 0x55f6a75819c8 'p1_old' 'char'
|     | | | `-ImplicitCastExpr 0x55f6a7585ed8 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f6a7585eb8 <col:14> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55f6a75863d8 <line:137:5, line:144:5>
|     | | | |-BinaryOperator 0x55f6a7586000 <line:137:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55f6a7585f60 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55f6a7585f48 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55f6a7585f10 <col:15> 'msg_t':'char' lvalue Var 0x55f6a7585cf0 'm2' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55f6a7585fd8 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55f6a7585fc0 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55f6a7585f88 <col:27> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55f6a75863c0 <col:34, line:144:5>
|     | | |   `-IfStmt 0x55f6a7586398 <line:138:7, line:143:7> has_else
|     | | |     |-BinaryOperator 0x55f6a7586110 <line:138:11, col:28> 'int' '>'
|     | | |     | |-CStyleCastExpr 0x55f6a7586070 <col:11, col:17> 'int' <IntegralCast>
|     | | |     | | `-ImplicitCastExpr 0x55f6a7586058 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     | |   `-DeclRefExpr 0x55f6a7586020 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7585cf0 'm2' 'msg_t':'char'
|     | | |     | `-CStyleCastExpr 0x55f6a75860e8 <col:22, col:28> 'int' <IntegralCast>
|     | | |     |   `-ImplicitCastExpr 0x55f6a75860d0 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     `-DeclRefExpr 0x55f6a7586098 <col:28> 'char' lvalue Var 0x55f6a7581e00 'id2' 'char'
|     | | |     |-CompoundStmt 0x55f6a75861a8 <col:33, line:140:7>
|     | | |     | `-BinaryOperator 0x55f6a7586188 <line:139:9, col:17> 'msg_t':'char' '='
|     | | |     |   |-DeclRefExpr 0x55f6a7586130 <col:9> 'msg_t':'char' lvalue Var 0x55f6a7581ef0 'send2' 'msg_t':'char'
|     | | |     |   `-ImplicitCastExpr 0x55f6a7586170 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |     |     `-DeclRefExpr 0x55f6a7586150 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7585cf0 'm2' 'msg_t':'char'
|     | | |     `-IfStmt 0x55f6a7586380 <line:141:7, line:143:7>
|     | | |       |-BinaryOperator 0x55f6a75862b0 <line:141:11, col:29> 'int' '=='
|     | | |       | |-CStyleCastExpr 0x55f6a7586210 <col:11, col:17> 'int' <IntegralCast>
|     | | |       | | `-ImplicitCastExpr 0x55f6a75861f8 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |       | |   `-DeclRefExpr 0x55f6a75861c0 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7585cf0 'm2' 'msg_t':'char'
|     | | |       | `-CStyleCastExpr 0x55f6a7586288 <col:23, col:29> 'int' <IntegralCast>
|     | | |       |   `-ImplicitCastExpr 0x55f6a7586270 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |       |     `-DeclRefExpr 0x55f6a7586238 <col:29> 'char' lvalue Var 0x55f6a7581e00 'id2' 'char'
|     | | |       `-CompoundStmt 0x55f6a7586368 <col:34, line:143:7>
|     | | |         `-BinaryOperator 0x55f6a7586348 <line:142:9, col:21> 'char' '='
|     | | |           |-DeclRefExpr 0x55f6a75862d0 <col:9> 'char' lvalue Var 0x55f6a7581e78 'st2' 'char'
|     | | |           `-CStyleCastExpr 0x55f6a7586320 <col:15, col:21> 'char' <IntegralCast>
|     | | |             `-IntegerLiteral 0x55f6a75862f0 <col:21> 'int' 1
|     | | `-BinaryOperator 0x55f6a7586468 <line:145:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55f6a75863f0 <col:5> '_Bool' lvalue Var 0x55f6a7581f68 'mode2' '_Bool'
|     | |   `-CStyleCastExpr 0x55f6a7586440 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55f6a7586410 <col:20> 'int' 0
|     | `-CompoundStmt 0x55f6a7586818 <line:146:10, line:149:3>
|     |   |-BinaryOperator 0x55f6a7586760 <line:147:5, col:58> 'char' '='
|     |   | |-DeclRefExpr 0x55f6a75864b8 <col:5> 'char' lvalue Var 0x55f6a7581d88 'p2_new' 'char'
|     |   | `-ImplicitCastExpr 0x55f6a7586748 <col:14, col:58> 'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55f6a7586718 <col:14, col:58> 'int'
|     |   |     |-BinaryOperator 0x55f6a7586658 <col:14, col:42> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55f6a7586578 <col:14, col:23> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55f6a7586548 <col:14> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55f6a7586518 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55f6a75864d8 <col:14> 'msg_t':'char' lvalue Var 0x55f6a7581ef0 'send2' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55f6a7586560 <col:23> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55f6a7586530 <col:23> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55f6a75864f8 <col:23> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55f6a7586638 <col:32, col:42> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55f6a7586608 <col:32> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55f6a75865d8 <col:32> 'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55f6a7586598 <col:32> 'char' lvalue Var 0x55f6a7581d88 'p2_new' 'char'
|     |   |     |   `-ImplicitCastExpr 0x55f6a7586620 <col:42> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55f6a75865f0 <col:42> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55f6a75865b8 <col:42> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55f6a75866d0 <col:50> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55f6a75866b8 <col:50> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55f6a7586678 <col:50> 'msg_t':'char' lvalue Var 0x55f6a7581ef0 'send2' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55f6a7586700 <col:58> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55f6a75866e8 <col:58> 'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55f6a7586698 <col:58> 'char' lvalue Var 0x55f6a7581d88 'p2_new' 'char'
|     |   `-BinaryOperator 0x55f6a75867f8 <line:148:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55f6a7586780 <col:5> '_Bool' lvalue Var 0x55f6a7581f68 'mode2' '_Bool'
|     |     `-CStyleCastExpr 0x55f6a75867d0 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55f6a75867a0 <col:20> 'int' 1
|     `-ReturnStmt 0x55f6a7586860 <line:150:3>
|-FunctionDecl 0x55f6a7586950 <line:153:1, line:177:1> line:153:6 used node3 'void (void)'
| `-CompoundStmt 0x55f6a75875c0 <line:154:1, line:177:1>
|   |-DeclStmt 0x55f6a7586a68 <line:155:3, col:12>
|   | `-VarDecl 0x55f6a7586a00 <col:3, col:9> col:9 used m3 'msg_t':'char'
|   `-CompoundStmt 0x55f6a7587598 <line:157:3, line:176:1>
|     |-BinaryOperator 0x55f6a7586ad8 <line:158:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55f6a7586a80 <col:3> 'msg_t':'char' lvalue Var 0x55f6a7586a00 'm3' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55f6a7586ac0 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f6a7586aa0 <col:8> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55f6a7587560 <line:159:3, line:174:3> has_else
|     | |-ImplicitCastExpr 0x55f6a7586b18 <line:159:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55f6a7586af8 <col:7> '_Bool' lvalue Var 0x55f6a75822b0 'mode3' '_Bool'
|     | |-CompoundStmt 0x55f6a75871b0 <col:14, line:171:3>
|     | | |-BinaryOperator 0x55f6a7586b88 <line:160:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55f6a7586b30 <col:5> 'msg_t':'char' lvalue Var 0x55f6a7586a00 'm3' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55f6a7586b70 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f6a7586b50 <col:10> 'char' lvalue Var 0x55f6a7581d10 'p2_old' 'char'
|     | | |-BinaryOperator 0x55f6a7586c00 <line:161:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55f6a7586ba8 <col:5> 'char' lvalue Var 0x55f6a7581d10 'p2_old' 'char'
|     | | | `-ImplicitCastExpr 0x55f6a7586be8 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f6a7586bc8 <col:14> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55f6a7587100 <line:162:5, line:169:5>
|     | | | |-BinaryOperator 0x55f6a7586d28 <line:162:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55f6a7586c70 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55f6a7586c58 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55f6a7586c20 <col:15> 'msg_t':'char' lvalue Var 0x55f6a7586a00 'm3' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55f6a7586d00 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55f6a7586cd0 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55f6a7586c98 <col:27> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55f6a75870e8 <col:34, line:169:5>
|     | | |   `-IfStmt 0x55f6a75870c0 <line:163:7, line:168:7> has_else
|     | | |     |-BinaryOperator 0x55f6a7586e38 <line:163:11, col:28> 'int' '>'
|     | | |     | |-CStyleCastExpr 0x55f6a7586d98 <col:11, col:17> 'int' <IntegralCast>
|     | | |     | | `-ImplicitCastExpr 0x55f6a7586d80 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     | |   `-DeclRefExpr 0x55f6a7586d48 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7586a00 'm3' 'msg_t':'char'
|     | | |     | `-CStyleCastExpr 0x55f6a7586e10 <col:22, col:28> 'int' <IntegralCast>
|     | | |     |   `-ImplicitCastExpr 0x55f6a7586df8 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     `-DeclRefExpr 0x55f6a7586dc0 <col:28> 'char' lvalue Var 0x55f6a7582148 'id3' 'char'
|     | | |     |-CompoundStmt 0x55f6a7586ed0 <col:33, line:165:7>
|     | | |     | `-BinaryOperator 0x55f6a7586eb0 <line:164:9, col:17> 'msg_t':'char' '='
|     | | |     |   |-DeclRefExpr 0x55f6a7586e58 <col:9> 'msg_t':'char' lvalue Var 0x55f6a7582238 'send3' 'msg_t':'char'
|     | | |     |   `-ImplicitCastExpr 0x55f6a7586e98 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |     |     `-DeclRefExpr 0x55f6a7586e78 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7586a00 'm3' 'msg_t':'char'
|     | | |     `-IfStmt 0x55f6a75870a8 <line:166:7, line:168:7>
|     | | |       |-BinaryOperator 0x55f6a7586fd8 <line:166:11, col:29> 'int' '=='
|     | | |       | |-CStyleCastExpr 0x55f6a7586f38 <col:11, col:17> 'int' <IntegralCast>
|     | | |       | | `-ImplicitCastExpr 0x55f6a7586f20 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |       | |   `-DeclRefExpr 0x55f6a7586ee8 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7586a00 'm3' 'msg_t':'char'
|     | | |       | `-CStyleCastExpr 0x55f6a7586fb0 <col:23, col:29> 'int' <IntegralCast>
|     | | |       |   `-ImplicitCastExpr 0x55f6a7586f98 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |       |     `-DeclRefExpr 0x55f6a7586f60 <col:29> 'char' lvalue Var 0x55f6a7582148 'id3' 'char'
|     | | |       `-CompoundStmt 0x55f6a7587090 <col:34, line:168:7>
|     | | |         `-BinaryOperator 0x55f6a7587070 <line:167:9, col:21> 'char' '='
|     | | |           |-DeclRefExpr 0x55f6a7586ff8 <col:9> 'char' lvalue Var 0x55f6a75821c0 'st3' 'char'
|     | | |           `-CStyleCastExpr 0x55f6a7587048 <col:15, col:21> 'char' <IntegralCast>
|     | | |             `-IntegerLiteral 0x55f6a7587018 <col:21> 'int' 1
|     | | `-BinaryOperator 0x55f6a7587190 <line:170:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55f6a7587118 <col:5> '_Bool' lvalue Var 0x55f6a75822b0 'mode3' '_Bool'
|     | |   `-CStyleCastExpr 0x55f6a7587168 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55f6a7587138 <col:20> 'int' 0
|     | `-CompoundStmt 0x55f6a7587540 <line:171:10, line:174:3>
|     |   |-BinaryOperator 0x55f6a7587488 <line:172:5, col:58> 'char' '='
|     |   | |-DeclRefExpr 0x55f6a75871e0 <col:5> 'char' lvalue Var 0x55f6a75820d0 'p3_new' 'char'
|     |   | `-ImplicitCastExpr 0x55f6a7587470 <col:14, col:58> 'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55f6a7587440 <col:14, col:58> 'int'
|     |   |     |-BinaryOperator 0x55f6a7587380 <col:14, col:42> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55f6a75872a0 <col:14, col:23> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55f6a7587270 <col:14> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55f6a7587240 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55f6a7587200 <col:14> 'msg_t':'char' lvalue Var 0x55f6a7582238 'send3' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55f6a7587288 <col:23> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55f6a7587258 <col:23> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55f6a7587220 <col:23> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55f6a7587360 <col:32, col:42> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55f6a7587330 <col:32> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55f6a7587300 <col:32> 'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55f6a75872c0 <col:32> 'char' lvalue Var 0x55f6a75820d0 'p3_new' 'char'
|     |   |     |   `-ImplicitCastExpr 0x55f6a7587348 <col:42> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55f6a7587318 <col:42> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55f6a75872e0 <col:42> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55f6a75873f8 <col:50> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55f6a75873e0 <col:50> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55f6a75873a0 <col:50> 'msg_t':'char' lvalue Var 0x55f6a7582238 'send3' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55f6a7587428 <col:58> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55f6a7587410 <col:58> 'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55f6a75873c0 <col:58> 'char' lvalue Var 0x55f6a75820d0 'p3_new' 'char'
|     |   `-BinaryOperator 0x55f6a7587520 <line:173:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55f6a75874a8 <col:5> '_Bool' lvalue Var 0x55f6a75822b0 'mode3' '_Bool'
|     |     `-CStyleCastExpr 0x55f6a75874f8 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55f6a75874c8 <col:20> 'int' 1
|     `-ReturnStmt 0x55f6a7587588 <line:175:3>
|-FunctionDecl 0x55f6a7587678 <line:178:1, line:202:1> line:178:6 used node4 'void (void)'
| `-CompoundStmt 0x55f6a75882f8 <line:179:1, line:202:1>
|   |-DeclStmt 0x55f6a7587790 <line:180:3, col:12>
|   | `-VarDecl 0x55f6a7587728 <col:3, col:9> col:9 used m4 'msg_t':'char'
|   `-CompoundStmt 0x55f6a75882d0 <line:182:3, line:201:1>
|     |-BinaryOperator 0x55f6a7587800 <line:183:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55f6a75877a8 <col:3> 'msg_t':'char' lvalue Var 0x55f6a7587728 'm4' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55f6a75877e8 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f6a75877c8 <col:8> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55f6a7588298 <line:184:3, line:199:3> has_else
|     | |-ImplicitCastExpr 0x55f6a7587840 <line:184:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55f6a7587820 <col:7> '_Bool' lvalue Var 0x55f6a75825f8 'mode4' '_Bool'
|     | |-CompoundStmt 0x55f6a7587ee8 <col:14, line:196:3>
|     | | |-BinaryOperator 0x55f6a75878b0 <line:185:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55f6a7587858 <col:5> 'msg_t':'char' lvalue Var 0x55f6a7587728 'm4' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55f6a7587898 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f6a7587878 <col:10> 'char' lvalue Var 0x55f6a7582058 'p3_old' 'char'
|     | | |-BinaryOperator 0x55f6a7587928 <line:186:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55f6a75878d0 <col:5> 'char' lvalue Var 0x55f6a7582058 'p3_old' 'char'
|     | | | `-ImplicitCastExpr 0x55f6a7587910 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f6a75878f0 <col:14> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55f6a7587e38 <line:187:5, line:194:5>
|     | | | |-BinaryOperator 0x55f6a7587a38 <line:187:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55f6a7587998 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55f6a7587980 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55f6a7587948 <col:15> 'msg_t':'char' lvalue Var 0x55f6a7587728 'm4' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55f6a7587a10 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55f6a75879f8 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55f6a75879c0 <col:27> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55f6a7587e20 <col:34, line:194:5>
|     | | |   `-IfStmt 0x55f6a7587df8 <line:188:7, line:193:7> has_else
|     | | |     |-BinaryOperator 0x55f6a7587b48 <line:188:11, col:28> 'int' '>'
|     | | |     | |-CStyleCastExpr 0x55f6a7587aa8 <col:11, col:17> 'int' <IntegralCast>
|     | | |     | | `-ImplicitCastExpr 0x55f6a7587a90 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     | |   `-DeclRefExpr 0x55f6a7587a58 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7587728 'm4' 'msg_t':'char'
|     | | |     | `-CStyleCastExpr 0x55f6a7587b20 <col:22, col:28> 'int' <IntegralCast>
|     | | |     |   `-ImplicitCastExpr 0x55f6a7587b08 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     `-DeclRefExpr 0x55f6a7587ad0 <col:28> 'char' lvalue Var 0x55f6a7582490 'id4' 'char'
|     | | |     |-CompoundStmt 0x55f6a7587be0 <col:33, line:190:7>
|     | | |     | `-BinaryOperator 0x55f6a7587bc0 <line:189:9, col:17> 'msg_t':'char' '='
|     | | |     |   |-DeclRefExpr 0x55f6a7587b68 <col:9> 'msg_t':'char' lvalue Var 0x55f6a7582580 'send4' 'msg_t':'char'
|     | | |     |   `-ImplicitCastExpr 0x55f6a7587ba8 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |     |     `-DeclRefExpr 0x55f6a7587b88 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7587728 'm4' 'msg_t':'char'
|     | | |     `-IfStmt 0x55f6a7587de0 <line:191:7, line:193:7>
|     | | |       |-BinaryOperator 0x55f6a7587d10 <line:191:11, col:29> 'int' '=='
|     | | |       | |-CStyleCastExpr 0x55f6a7587c48 <col:11, col:17> 'int' <IntegralCast>
|     | | |       | | `-ImplicitCastExpr 0x55f6a7587c30 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |       | |   `-DeclRefExpr 0x55f6a7587bf8 <col:17> 'msg_t':'char' lvalue Var 0x55f6a7587728 'm4' 'msg_t':'char'
|     | | |       | `-CStyleCastExpr 0x55f6a7587cc0 <col:23, col:29> 'int' <IntegralCast>
|     | | |       |   `-ImplicitCastExpr 0x55f6a7587ca8 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |       |     `-DeclRefExpr 0x55f6a7587c70 <col:29> 'char' lvalue Var 0x55f6a7582490 'id4' 'char'
|     | | |       `-CompoundStmt 0x55f6a7587dc8 <col:34, line:193:7>
|     | | |         `-BinaryOperator 0x55f6a7587da8 <line:192:9, col:21> 'char' '='
|     | | |           |-DeclRefExpr 0x55f6a7587d30 <col:9> 'char' lvalue Var 0x55f6a7582508 'st4' 'char'
|     | | |           `-CStyleCastExpr 0x55f6a7587d80 <col:15, col:21> 'char' <IntegralCast>
|     | | |             `-IntegerLiteral 0x55f6a7587d50 <col:21> 'int' 1
|     | | `-BinaryOperator 0x55f6a7587ec8 <line:195:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55f6a7587e50 <col:5> '_Bool' lvalue Var 0x55f6a75825f8 'mode4' '_Bool'
|     | |   `-CStyleCastExpr 0x55f6a7587ea0 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55f6a7587e70 <col:20> 'int' 0
|     | `-CompoundStmt 0x55f6a7588278 <line:196:10, line:199:3>
|     |   |-BinaryOperator 0x55f6a75881c0 <line:197:5, col:58> 'char' '='
|     |   | |-DeclRefExpr 0x55f6a7587f18 <col:5> 'char' lvalue Var 0x55f6a7582418 'p4_new' 'char'
|     |   | `-ImplicitCastExpr 0x55f6a75881a8 <col:14, col:58> 'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55f6a7588178 <col:14, col:58> 'int'
|     |   |     |-BinaryOperator 0x55f6a75880b8 <col:14, col:42> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55f6a7587fd8 <col:14, col:23> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55f6a7587fa8 <col:14> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55f6a7587f78 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55f6a7587f38 <col:14> 'msg_t':'char' lvalue Var 0x55f6a7582580 'send4' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55f6a7587fc0 <col:23> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55f6a7587f90 <col:23> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55f6a7587f58 <col:23> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55f6a7588098 <col:32, col:42> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55f6a7588068 <col:32> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55f6a7588038 <col:32> 'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55f6a7587ff8 <col:32> 'char' lvalue Var 0x55f6a7582418 'p4_new' 'char'
|     |   |     |   `-ImplicitCastExpr 0x55f6a7588080 <col:42> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55f6a7588050 <col:42> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55f6a7588018 <col:42> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55f6a7588130 <col:50> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55f6a7588118 <col:50> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55f6a75880d8 <col:50> 'msg_t':'char' lvalue Var 0x55f6a7582580 'send4' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55f6a7588160 <col:58> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55f6a7588148 <col:58> 'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55f6a75880f8 <col:58> 'char' lvalue Var 0x55f6a7582418 'p4_new' 'char'
|     |   `-BinaryOperator 0x55f6a7588258 <line:198:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55f6a75881e0 <col:5> '_Bool' lvalue Var 0x55f6a75825f8 'mode4' '_Bool'
|     |     `-CStyleCastExpr 0x55f6a7588230 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55f6a7588200 <col:20> 'int' 1
|     `-ReturnStmt 0x55f6a75882c0 <line:200:3>
|-VarDecl 0x55f6a7588520 <line:203:1, col:83> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x55f6a75886d8 <col:27, col:83> 'void (*[4])(void)'
|   |-UnaryOperator 0x55f6a75885a8 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55f6a7588588 <col:36> 'void (void)' Function 0x55f6a75838f0 'node1' 'void (void)'
|   |-UnaryOperator 0x55f6a75885e0 <col:48, col:50> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55f6a75885c0 <col:50> 'void (void)' Function 0x55f6a7584780 'node2' 'void (void)'
|   |-UnaryOperator 0x55f6a7588618 <col:62, col:64> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55f6a75885f8 <col:64> 'void (void)' Function 0x55f6a7586950 'node3' 'void (void)'
|   `-UnaryOperator 0x55f6a7588650 <col:76, col:78> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x55f6a7588630 <col:78> 'void (void)' Function 0x55f6a7587678 'node4' 'void (void)'
|-FunctionDecl 0x55f6a7588808 <line:204:1, line:304:1> line:204:5 used init 'int (void)'
| `-CompoundStmt 0x55f6a758f210 <line:205:1, line:304:1>
|   |-DeclStmt 0x55f6a7588928 <line:206:3, col:11>
|   | `-VarDecl 0x55f6a75888c0 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x55f6a758f1f0 <line:208:3, line:303:1>
|     |-IfStmt 0x55f6a758f160 <line:209:3, line:301:3> has_else
|     | |-BinaryOperator 0x55f6a75889d8 <line:209:7, col:19> 'int' '=='
|     | | |-CStyleCastExpr 0x55f6a7588990 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55f6a7588978 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55f6a7588940 <col:13> 'unsigned char' lvalue Var 0x55f6a75818d8 'r1' 'unsigned char'
|     | | `-IntegerLiteral 0x55f6a75889b8 <col:19> 'int' 0
|     | |-CompoundStmt 0x55f6a758f0d0 <col:22, line:299:3>
|     | | `-IfStmt 0x55f6a758f0a8 <line:210:5, line:298:5> has_else
|     | |   |-BinaryOperator 0x55f6a7588a90 <line:210:9, col:22> 'int' '>='
|     | |   | |-CStyleCastExpr 0x55f6a7588a48 <col:9, col:15> 'int' <IntegralCast>
|     | |   | | `-ImplicitCastExpr 0x55f6a7588a30 <col:15> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   | |   `-DeclRefExpr 0x55f6a75889f8 <col:15> 'char' lvalue Var 0x55f6a7581ab8 'id1' 'char'
|     | |   | `-IntegerLiteral 0x55f6a7588a70 <col:22> 'int' 0
|     | |   |-CompoundStmt 0x55f6a758ee40 <col:25, line:296:5>
|     | |   | `-IfStmt 0x55f6a758ee18 <line:211:7, line:295:7> has_else
|     | |   |   |-BinaryOperator 0x55f6a7588b48 <line:211:11, col:24> 'int' '=='
|     | |   |   | |-CStyleCastExpr 0x55f6a7588b00 <col:11, col:17> 'int' <IntegralCast>
|     | |   |   | | `-ImplicitCastExpr 0x55f6a7588ae8 <col:17> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   | |   `-DeclRefExpr 0x55f6a7588ab0 <col:17> 'char' lvalue Var 0x55f6a7581b30 'st1' 'char'
|     | |   |   | `-IntegerLiteral 0x55f6a7588b28 <col:24> 'int' 0
|     | |   |   |-CompoundStmt 0x55f6a758ed88 <col:27, line:293:7>
|     | |   |   | `-IfStmt 0x55f6a758ed60 <line:212:9, line:292:9> has_else
|     | |   |   |   |-BinaryOperator 0x55f6a7588c58 <line:212:13, col:34> 'int' '=='
|     | |   |   |   | |-CStyleCastExpr 0x55f6a7588bb8 <col:13, col:19> 'int' <IntegralCast>
|     | |   |   |   | | `-ImplicitCastExpr 0x55f6a7588ba0 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   | |   `-DeclRefExpr 0x55f6a7588b68 <col:19> 'msg_t':'char' lvalue Var 0x55f6a7581ba8 'send1' 'msg_t':'char'
|     | |   |   |   | `-CStyleCastExpr 0x55f6a7588c30 <col:28, col:34> 'int' <IntegralCast>
|     | |   |   |   |   `-ImplicitCastExpr 0x55f6a7588c18 <col:34> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |     `-DeclRefExpr 0x55f6a7588be0 <col:34> 'char' lvalue Var 0x55f6a7581ab8 'id1' 'char'
|     | |   |   |   |-CompoundStmt 0x55f6a758ecd0 <col:39, line:290:9>
|     | |   |   |   | `-IfStmt 0x55f6a758eca8 <line:213:11, line:289:11> has_else
|     | |   |   |   |   |-BinaryOperator 0x55f6a7588ee0 <line:213:15, col:30> 'int' '=='
|     | |   |   |   |   | |-CStyleCastExpr 0x55f6a7588cc8 <col:15, col:21> 'int' <IntegralCast>
|     | |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7588cb0 <col:21> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   | |   `-DeclRefExpr 0x55f6a7588c78 <col:21> '_Bool' lvalue Var 0x55f6a7581c20 'mode1' '_Bool'
|     | |   |   |   |   | `-IntegerLiteral 0x55f6a7588cf0 <col:30> 'int' 0
|     | |   |   |   |   |-CompoundStmt 0x55f6a758ec18 <col:33, line:287:11>
|     | |   |   |   |   | `-IfStmt 0x55f6a758ebf0 <line:214:13, line:286:13> has_else
|     | |   |   |   |   |   |-BinaryOperator 0x55f6a7588f98 <line:214:17, col:30> 'int' '>='
|     | |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7588f50 <col:17, col:23> 'int' <IntegralCast>
|     | |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7588f38 <col:23> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7588f00 <col:23> 'char' lvalue Var 0x55f6a7581e00 'id2' 'char'
|     | |   |   |   |   |   | `-IntegerLiteral 0x55f6a7588f78 <col:30> 'int' 0
|     | |   |   |   |   |   |-CompoundStmt 0x55f6a758eb60 <col:33, line:284:13>
|     | |   |   |   |   |   | `-IfStmt 0x55f6a758eb38 <line:215:15, line:283:15> has_else
|     | |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589050 <line:215:19, col:32> 'int' '=='
|     | |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589008 <col:19, col:25> 'int' <IntegralCast>
|     | |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7588ff0 <col:25> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7588fb8 <col:25> 'char' lvalue Var 0x55f6a7581e78 'st2' 'char'
|     | |   |   |   |   |   |   | `-IntegerLiteral 0x55f6a7589030 <col:32> 'int' 0
|     | |   |   |   |   |   |   |-CompoundStmt 0x55f6a758eaa8 <col:35, line:281:15>
|     | |   |   |   |   |   |   | `-IfStmt 0x55f6a758ea80 <line:216:17, line:280:17> has_else
|     | |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589160 <line:216:21, col:42> 'int' '=='
|     | |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a75890c0 <col:21, col:27> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a75890a8 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589070 <col:27> 'msg_t':'char' lvalue Var 0x55f6a7581ef0 'send2' 'msg_t':'char'
|     | |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a7589138 <col:36, col:42> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589120 <col:42> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a75890e8 <col:42> 'char' lvalue Var 0x55f6a7581e00 'id2' 'char'
|     | |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e9f0 <col:47, line:278:17>
|     | |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e9c8 <line:217:19, line:277:19> has_else
|     | |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589218 <line:217:23, col:38> 'int' '=='
|     | |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a75891d0 <col:23, col:29> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a75891b8 <col:29> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589180 <col:29> '_Bool' lvalue Var 0x55f6a7581f68 'mode2' '_Bool'
|     | |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55f6a75891f8 <col:38> 'int' 0
|     | |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e938 <col:41, line:275:19>
|     | |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e910 <line:218:21, line:274:21> has_else
|     | |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a75892d0 <line:218:25, col:38> 'int' '>='
|     | |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589288 <col:25, col:31> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589270 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589238 <col:31> 'char' lvalue Var 0x55f6a7582148 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55f6a75892b0 <col:38> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e880 <col:41, line:272:21>
|     | |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e858 <line:219:23, line:271:23> has_else
|     | |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589388 <line:219:27, col:40> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589340 <col:27, col:33> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589328 <col:33> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a75892f0 <col:33> 'char' lvalue Var 0x55f6a75821c0 'st3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55f6a7589368 <col:40> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e7c8 <col:43, line:269:23>
|     | |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e7a0 <line:220:25, line:268:25> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589498 <line:220:29, col:50> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a75893f8 <col:29, col:35> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a75893e0 <col:35> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a75893a8 <col:35> 'msg_t':'char' lvalue Var 0x55f6a7582238 'send3' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a7589470 <col:44, col:50> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589458 <col:50> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a7589420 <col:50> 'char' lvalue Var 0x55f6a7582148 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e710 <col:55, line:266:25>
|     | |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e6e8 <line:221:27, line:265:27> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589550 <line:221:31, col:46> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589508 <col:31, col:37> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a75894f0 <col:37> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a75894b8 <col:37> '_Bool' lvalue Var 0x55f6a75822b0 'mode3' '_Bool'
|     | |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55f6a7589530 <col:46> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e658 <col:49, line:263:27>
|     | |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e630 <line:222:29, line:262:29> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589608 <line:222:33, col:46> 'int' '>='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a75895c0 <col:33, col:39> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a75895a8 <col:39> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589570 <col:39> 'char' lvalue Var 0x55f6a7582490 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55f6a75895e8 <col:46> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e5a0 <col:49, line:260:29>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e578 <line:223:31, line:259:31> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a75896c0 <line:223:35, col:48> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589678 <col:35, col:41> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589660 <col:41> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589628 <col:41> 'char' lvalue Var 0x55f6a7582508 'st4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55f6a75896a0 <col:48> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e4e8 <col:51, line:257:31>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e4c0 <line:224:33, line:256:33> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a75897d0 <line:224:37, col:58> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589730 <col:37, col:43> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589718 <col:43> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a75896e0 <col:43> 'msg_t':'char' lvalue Var 0x55f6a7582580 'send4' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a75897a8 <col:52, col:58> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589790 <col:58> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a7589758 <col:58> 'char' lvalue Var 0x55f6a7582490 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e430 <col:63, line:254:33>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e408 <line:225:35, line:253:35> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589888 <line:225:39, col:54> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589840 <col:39, col:45> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589828 <col:45> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a75897f0 <col:45> '_Bool' lvalue Var 0x55f6a75825f8 'mode4' '_Bool'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55f6a7589868 <col:54> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e378 <col:57, line:251:35>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e350 <line:226:37, line:250:37> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589998 <line:226:41, col:60> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a75898f8 <col:41, col:47> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a75898e0 <col:47> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a75898a8 <col:47> 'char' lvalue Var 0x55f6a7581ab8 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a7589970 <col:54, col:60> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589958 <col:60> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a7589920 <col:60> 'char' lvalue Var 0x55f6a7581e00 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e2c0 <col:65, line:248:37>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e298 <line:227:39, line:247:39> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589aa8 <line:227:43, col:62> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589a08 <col:43, col:49> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a75899f0 <col:49> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a75899b8 <col:49> 'char' lvalue Var 0x55f6a7581ab8 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a7589a80 <col:56, col:62> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589a68 <col:62> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a7589a30 <col:62> 'char' lvalue Var 0x55f6a7582148 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e208 <col:67, line:245:39>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e1e0 <line:228:41, line:244:41> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589bb8 <line:228:45, col:64> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589b18 <col:45, col:51> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589b00 <col:51> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589ac8 <col:51> 'char' lvalue Var 0x55f6a7581ab8 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a7589b90 <col:58, col:64> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589b78 <col:64> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a7589b40 <col:64> 'char' lvalue Var 0x55f6a7582490 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e150 <col:69, line:242:41>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e128 <line:229:43, line:241:43> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589cc8 <line:229:47, col:66> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589c28 <col:47, col:53> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589c10 <col:53> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589bd8 <col:53> 'char' lvalue Var 0x55f6a7581e00 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a7589ca0 <col:60, col:66> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589c88 <col:66> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a7589c50 <col:66> 'char' lvalue Var 0x55f6a7582148 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758e098 <col:71, line:239:43>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758e070 <line:230:45, line:238:45> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a7589dd8 <line:230:49, col:68> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589d38 <col:49, col:55> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589d20 <col:55> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589ce8 <col:55> 'char' lvalue Var 0x55f6a7581e00 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a7589db0 <col:62, col:68> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589d98 <col:68> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a7589d60 <col:68> 'char' lvalue Var 0x55f6a7582490 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758dfe0 <col:73, line:236:45>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55f6a758dfb8 <line:231:47, line:235:47> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55f6a758dea8 <line:231:51, col:70> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55f6a7589e48 <col:51, col:57> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55f6a7589e30 <col:57> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55f6a7589df8 <col:57> 'char' lvalue Var 0x55f6a7582148 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55f6a758de80 <col:64, col:70> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55f6a7589ea8 <col:70> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55f6a7589e70 <col:70> 'char' lvalue Var 0x55f6a7582490 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55f6a758df28 <col:75, line:233:47>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-BinaryOperator 0x55f6a758df08 <line:232:49, col:55> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-DeclRefExpr 0x55f6a758dec8 <col:49> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-IntegerLiteral 0x55f6a758dee8 <col:55> 'int' 1
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758dfa0 <line:233:54, line:235:47>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758df80 <line:234:49, col:55> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758df40 <col:49> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758df60 <col:55> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e058 <line:236:52, line:238:45>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e038 <line:237:47, col:53> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758dff8 <col:47> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e018 <col:53> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e110 <line:239:50, line:241:43>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e0f0 <line:240:45, col:51> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e0b0 <col:45> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e0d0 <col:51> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e1c8 <line:242:48, line:244:41>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e1a8 <line:243:43, col:49> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e168 <col:43> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e188 <col:49> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e280 <line:245:46, line:247:39>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e260 <line:246:41, col:47> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e220 <col:41> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e240 <col:47> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e338 <line:248:44, line:250:37>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e318 <line:249:39, col:45> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e2d8 <col:39> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e2f8 <col:45> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e3f0 <line:251:42, line:253:35>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e3d0 <line:252:37, col:43> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e390 <col:37> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e3b0 <col:43> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e4a8 <line:254:40, line:256:33>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e488 <line:255:35, col:41> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e448 <col:35> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e468 <col:41> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e560 <line:257:38, line:259:31>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e540 <line:258:33, col:39> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e500 <col:33> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e520 <col:39> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e618 <line:260:36, line:262:29>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e5f8 <line:261:31, col:37> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e5b8 <col:31> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e5d8 <col:37> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e6d0 <line:263:34, line:265:27>
|     | |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e6b0 <line:264:29, col:35> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e670 <col:29> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e690 <col:35> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e788 <line:266:32, line:268:25>
|     | |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e768 <line:267:27, col:33> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e728 <col:27> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e748 <col:33> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e840 <line:269:30, line:271:23>
|     | |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e820 <line:270:25, col:31> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e7e0 <col:25> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e800 <col:31> 'int' 0
|     | |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e8f8 <line:272:28, line:274:21>
|     | |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e8d8 <line:273:23, col:29> 'int' '='
|     | |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e898 <col:23> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e8b8 <col:29> 'int' 0
|     | |   |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758e9b0 <line:275:26, line:277:19>
|     | |   |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758e990 <line:276:21, col:27> 'int' '='
|     | |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758e950 <col:21> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758e970 <col:27> 'int' 0
|     | |   |   |   |   |   |   |   `-CompoundStmt 0x55f6a758ea68 <line:278:24, line:280:17>
|     | |   |   |   |   |   |   |     `-BinaryOperator 0x55f6a758ea48 <line:279:19, col:25> 'int' '='
|     | |   |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758ea08 <col:19> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758ea28 <col:25> 'int' 0
|     | |   |   |   |   |   |   `-CompoundStmt 0x55f6a758eb20 <line:281:22, line:283:15>
|     | |   |   |   |   |   |     `-BinaryOperator 0x55f6a758eb00 <line:282:17, col:23> 'int' '='
|     | |   |   |   |   |   |       |-DeclRefExpr 0x55f6a758eac0 <col:17> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |   |       `-IntegerLiteral 0x55f6a758eae0 <col:23> 'int' 0
|     | |   |   |   |   |   `-CompoundStmt 0x55f6a758ebd8 <line:284:20, line:286:13>
|     | |   |   |   |   |     `-BinaryOperator 0x55f6a758ebb8 <line:285:15, col:21> 'int' '='
|     | |   |   |   |   |       |-DeclRefExpr 0x55f6a758eb78 <col:15> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |   |       `-IntegerLiteral 0x55f6a758eb98 <col:21> 'int' 0
|     | |   |   |   |   `-CompoundStmt 0x55f6a758ec90 <line:287:18, line:289:11>
|     | |   |   |   |     `-BinaryOperator 0x55f6a758ec70 <line:288:13, col:19> 'int' '='
|     | |   |   |   |       |-DeclRefExpr 0x55f6a758ec30 <col:13> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |   |       `-IntegerLiteral 0x55f6a758ec50 <col:19> 'int' 0
|     | |   |   |   `-CompoundStmt 0x55f6a758ed48 <line:290:16, line:292:9>
|     | |   |   |     `-BinaryOperator 0x55f6a758ed28 <line:291:11, col:17> 'int' '='
|     | |   |   |       |-DeclRefExpr 0x55f6a758ece8 <col:11> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |   |       `-IntegerLiteral 0x55f6a758ed08 <col:17> 'int' 0
|     | |   |   `-CompoundStmt 0x55f6a758ee00 <line:293:14, line:295:7>
|     | |   |     `-BinaryOperator 0x55f6a758ede0 <line:294:9, col:15> 'int' '='
|     | |   |       |-DeclRefExpr 0x55f6a758eda0 <col:9> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |   |       `-IntegerLiteral 0x55f6a758edc0 <col:15> 'int' 0
|     | |   `-CompoundStmt 0x55f6a758f090 <line:296:12, line:298:5>
|     | |     `-BinaryOperator 0x55f6a758f070 <line:297:7, col:13> 'int' '='
|     | |       |-DeclRefExpr 0x55f6a758ee58 <col:7> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     | |       `-IntegerLiteral 0x55f6a758f050 <col:13> 'int' 0
|     | `-CompoundStmt 0x55f6a758f148 <line:299:10, line:301:3>
|     |   `-BinaryOperator 0x55f6a758f128 <line:300:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x55f6a758f0e8 <col:5> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|     |     `-IntegerLiteral 0x55f6a758f108 <col:11> 'int' 0
|     `-ReturnStmt 0x55f6a758f1e0 <line:302:3, col:14>
|       `-ImplicitCastExpr 0x55f6a758f1c8 <col:10, col:14> 'int' <LValueToRValue>
|         `-ParenExpr 0x55f6a758f1a8 <col:10, col:14> 'int' lvalue
|           `-DeclRefExpr 0x55f6a758f188 <col:11> 'int' lvalue Var 0x55f6a75888c0 'tmp' 'int'
|-FunctionDecl 0x55f6a758f2d0 <line:305:1, line:332:1> line:305:5 used check 'int (void)'
| `-CompoundStmt 0x55f6a7591258 <line:306:1, line:332:1>
|   |-DeclStmt 0x55f6a758f3f0 <line:307:3, col:11>
|   | `-VarDecl 0x55f6a758f388 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x55f6a7591238 <line:309:3, line:331:1>
|     |-IfStmt 0x55f6a75911a8 <line:310:3, line:329:3> has_else
|     | |-BinaryOperator 0x55f6a758f6a8 <line:310:7, col:60> 'int' '<='
|     | | |-BinaryOperator 0x55f6a758f668 <col:7, col:53> 'int' '+'
|     | | | |-ParenExpr 0x55f6a758f5d0 <col:7, col:43> 'int'
|     | | | | `-BinaryOperator 0x55f6a758f5b0 <col:8, col:40> 'int' '+'
|     | | | |   |-ParenExpr 0x55f6a758f518 <col:8, col:30> 'int'
|     | | | |   | `-BinaryOperator 0x55f6a758f4f8 <col:9, col:27> 'int' '+'
|     | | | |   |   |-CStyleCastExpr 0x55f6a758f458 <col:9, col:15> 'int' <IntegralCast>
|     | | | |   |   | `-ImplicitCastExpr 0x55f6a758f440 <col:15> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |   |   |   `-DeclRefExpr 0x55f6a758f408 <col:15> 'char' lvalue Var 0x55f6a7581b30 'st1' 'char'
|     | | | |   |   `-CStyleCastExpr 0x55f6a758f4d0 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   |     `-ImplicitCastExpr 0x55f6a758f4b8 <col:27> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |   |       `-DeclRefExpr 0x55f6a758f480 <col:27> 'char' lvalue Var 0x55f6a7581e78 'st2' 'char'
|     | | | |   `-CStyleCastExpr 0x55f6a758f588 <col:34, col:40> 'int' <IntegralCast>
|     | | | |     `-ImplicitCastExpr 0x55f6a758f570 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |       `-DeclRefExpr 0x55f6a758f538 <col:40> 'char' lvalue Var 0x55f6a75821c0 'st3' 'char'
|     | | | `-CStyleCastExpr 0x55f6a758f640 <col:47, col:53> 'int' <IntegralCast>
|     | | |   `-ImplicitCastExpr 0x55f6a758f628 <col:53> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     `-DeclRefExpr 0x55f6a758f5f0 <col:53> 'char' lvalue Var 0x55f6a7582508 'st4' 'char'
|     | | `-IntegerLiteral 0x55f6a758f688 <col:60> 'int' 1
|     | |-CompoundStmt 0x55f6a7591118 <col:63, line:327:3>
|     | | `-IfStmt 0x55f6a75910f0 <line:311:5, line:326:5> has_else
|     | |   |-BinaryOperator 0x55f6a758f760 <line:311:9, col:21> 'int' '>='
|     | |   | |-CStyleCastExpr 0x55f6a758f718 <col:9, col:15> 'int' <IntegralCast>
|     | |   | | `-ImplicitCastExpr 0x55f6a758f700 <col:15> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | |   | |   `-DeclRefExpr 0x55f6a758f6c8 <col:15> 'unsigned char' lvalue Var 0x55f6a75818d8 'r1' 'unsigned char'
|     | |   | `-IntegerLiteral 0x55f6a758f740 <col:21> 'int' 4
|     | |   |-CompoundStmt 0x55f6a758f7e8 <col:24, line:313:5>
|     | |   | `-GotoStmt 0x55f6a758f7d0 <line:312:7, col:12> '_L' 0x55f6a758f780
|     | |   `-IfStmt 0x55f6a75910c8 <line:314:5, line:326:5> has_else
|     | |     |-BinaryOperator 0x55f6a758faa0 <line:314:9, col:62> 'int' '=='
|     | |     | |-BinaryOperator 0x55f6a758fa60 <col:9, col:55> 'int' '+'
|     | |     | | |-ParenExpr 0x55f6a758f9c8 <col:9, col:45> 'int'
|     | |     | | | `-BinaryOperator 0x55f6a758f9a8 <col:10, col:42> 'int' '+'
|     | |     | | |   |-ParenExpr 0x55f6a758f910 <col:10, col:32> 'int'
|     | |     | | |   | `-BinaryOperator 0x55f6a758f8f0 <col:11, col:29> 'int' '+'
|     | |     | | |   |   |-CStyleCastExpr 0x55f6a758f850 <col:11, col:17> 'int' <IntegralCast>
|     | |     | | |   |   | `-ImplicitCastExpr 0x55f6a758f838 <col:17> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |   |   |   `-DeclRefExpr 0x55f6a758f800 <col:17> 'char' lvalue Var 0x55f6a7581b30 'st1' 'char'
|     | |     | | |   |   `-CStyleCastExpr 0x55f6a758f8c8 <col:23, col:29> 'int' <IntegralCast>
|     | |     | | |   |     `-ImplicitCastExpr 0x55f6a758f8b0 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |   |       `-DeclRefExpr 0x55f6a758f878 <col:29> 'char' lvalue Var 0x55f6a7581e78 'st2' 'char'
|     | |     | | |   `-CStyleCastExpr 0x55f6a758f980 <col:36, col:42> 'int' <IntegralCast>
|     | |     | | |     `-ImplicitCastExpr 0x55f6a758f968 <col:42> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |       `-DeclRefExpr 0x55f6a758f930 <col:42> 'char' lvalue Var 0x55f6a75821c0 'st3' 'char'
|     | |     | | `-CStyleCastExpr 0x55f6a758fa38 <col:49, col:55> 'int' <IntegralCast>
|     | |     | |   `-ImplicitCastExpr 0x55f6a758fa20 <col:55> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | |     `-DeclRefExpr 0x55f6a758f9e8 <col:55> 'char' lvalue Var 0x55f6a7582508 'st4' 'char'
|     | |     | `-IntegerLiteral 0x55f6a758fa80 <col:62> 'int' 0
|     | |     |-CompoundStmt 0x55f6a7590008 <col:65, line:324:5>
|     | |     | `-LabelStmt 0x55f6a758fff0 <line:315:7, line:323:7> '_L'
|     | |     |   `-IfStmt 0x55f6a758ffc8 <line:316:7, line:323:7> has_else
|     | |     |     |-BinaryOperator 0x55f6a758fb58 <line:316:11, col:22> 'int' '<'
|     | |     |     | |-CStyleCastExpr 0x55f6a758fb10 <col:11, col:17> 'int' <IntegralCast>
|     | |     |     | | `-ImplicitCastExpr 0x55f6a758faf8 <col:17> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | |     |     | |   `-DeclRefExpr 0x55f6a758fac0 <col:17> 'unsigned char' lvalue Var 0x55f6a75818d8 'r1' 'unsigned char'
|     | |     |     | `-IntegerLiteral 0x55f6a758fb38 <col:22> 'int' 4
|     | |     |     |-CompoundStmt 0x55f6a758fbd8 <col:25, line:318:7>
|     | |     |     | `-BinaryOperator 0x55f6a758fbb8 <line:317:9, col:15> 'int' '='
|     | |     |     |   |-DeclRefExpr 0x55f6a758fb78 <col:9> 'int' lvalue Var 0x55f6a758f388 'tmp' 'int'
|     | |     |     |   `-IntegerLiteral 0x55f6a758fb98 <col:15> 'int' 1
|     | |     |     `-IfStmt 0x55f6a758ffa0 <line:319:7, line:323:7> has_else
|     | |     |       |-BinaryOperator 0x55f6a758fe90 <line:319:11, col:64> 'int' '=='
|     | |     |       | |-BinaryOperator 0x55f6a758fe50 <col:11, col:57> 'int' '+'
|     | |     |       | | |-ParenExpr 0x55f6a758fdb8 <col:11, col:47> 'int'
|     | |     |       | | | `-BinaryOperator 0x55f6a758fd98 <col:12, col:44> 'int' '+'
|     | |     |       | | |   |-ParenExpr 0x55f6a758fd00 <col:12, col:34> 'int'
|     | |     |       | | |   | `-BinaryOperator 0x55f6a758fce0 <col:13, col:31> 'int' '+'
|     | |     |       | | |   |   |-CStyleCastExpr 0x55f6a758fc40 <col:13, col:19> 'int' <IntegralCast>
|     | |     |       | | |   |   | `-ImplicitCastExpr 0x55f6a758fc28 <col:19> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     |       | | |   |   |   `-DeclRefExpr 0x55f6a758fbf0 <col:19> 'char' lvalue Var 0x55f6a7581b30 'st1' 'char'
|     | |     |       | | |   |   `-CStyleCastExpr 0x55f6a758fcb8 <col:25, col:31> 'int' <IntegralCast>
|     | |     |       | | |   |     `-ImplicitCastExpr 0x55f6a758fca0 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     |       | | |   |       `-DeclRefExpr 0x55f6a758fc68 <col:31> 'char' lvalue Var 0x55f6a7581e78 'st2' 'char'
|     | |     |       | | |   `-CStyleCastExpr 0x55f6a758fd70 <col:38, col:44> 'int' <IntegralCast>
|     | |     |       | | |     `-ImplicitCastExpr 0x55f6a758fd58 <col:44> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     |       | | |       `-DeclRefExpr 0x55f6a758fd20 <col:44> 'char' lvalue Var 0x55f6a75821c0 'st3' 'char'
|     | |     |       | | `-CStyleCastExpr 0x55f6a758fe28 <col:51, col:57> 'int' <IntegralCast>
|     | |     |       | |   `-ImplicitCastExpr 0x55f6a758fe10 <col:57> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     |       | |     `-DeclRefExpr 0x55f6a758fdd8 <col:57> 'char' lvalue Var 0x55f6a7582508 'st4' 'char'
|     | |     |       | `-IntegerLiteral 0x55f6a758fe70 <col:64> 'int' 1
|     | |     |       |-CompoundStmt 0x55f6a758ff10 <col:67, line:321:7>
|     | |     |       | `-BinaryOperator 0x55f6a758fef0 <line:320:9, col:15> 'int' '='
|     | |     |       |   |-DeclRefExpr 0x55f6a758feb0 <col:9> 'int' lvalue Var 0x55f6a758f388 'tmp' 'int'
|     | |     |       |   `-IntegerLiteral 0x55f6a758fed0 <col:15> 'int' 1
|     | |     |       `-CompoundStmt 0x55f6a758ff88 <line:321:14, line:323:7>
|     | |     |         `-BinaryOperator 0x55f6a758ff68 <line:322:9, col:15> 'int' '='
|     | |     |           |-DeclRefExpr 0x55f6a758ff28 <col:9> 'int' lvalue Var 0x55f6a758f388 'tmp' 'int'
|     | |     |           `-IntegerLiteral 0x55f6a758ff48 <col:15> 'int' 0
|     | |     `-CompoundStmt 0x55f6a75910b0 <line:324:12, line:326:5>
|     | |       `-BinaryOperator 0x55f6a7591090 <line:325:7, col:13> 'int' '='
|     | |         |-DeclRefExpr 0x55f6a7590020 <col:7> 'int' lvalue Var 0x55f6a758f388 'tmp' 'int'
|     | |         `-IntegerLiteral 0x55f6a7591070 <col:13> 'int' 0
|     | `-CompoundStmt 0x55f6a7591190 <line:327:10, line:329:3>
|     |   `-BinaryOperator 0x55f6a7591170 <line:328:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x55f6a7591130 <col:5> 'int' lvalue Var 0x55f6a758f388 'tmp' 'int'
|     |     `-IntegerLiteral 0x55f6a7591150 <col:11> 'int' 0
|     `-ReturnStmt 0x55f6a7591228 <line:330:3, col:14>
|       `-ImplicitCastExpr 0x55f6a7591210 <col:10, col:14> 'int' <LValueToRValue>
|         `-ParenExpr 0x55f6a75911f0 <col:10, col:14> 'int' lvalue
|           `-DeclRefExpr 0x55f6a75911d0 <col:11> 'int' lvalue Var 0x55f6a758f388 'tmp' 'int'
|-FunctionDecl 0x55f6a7591318 <line:333:1, line:388:1> line:333:5 main 'int (void)'
| `-CompoundStmt 0x55f6a7592eb0 <line:334:1, line:388:1>
|   |-DeclStmt 0x55f6a7591470 <line:335:3, col:10>
|   | `-VarDecl 0x55f6a7591408 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x55f6a7591508 <line:336:3, col:10>
|   | `-VarDecl 0x55f6a75914a0 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x55f6a7592d80 <line:338:3, line:386:1>
|   | |-BinaryOperator 0x55f6a7591560 <line:339:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55f6a7591520 <col:3> 'int' lvalue Var 0x55f6a7591408 'c1' 'int'
|   | | `-IntegerLiteral 0x55f6a7591540 <col:8> 'int' 0
|   | |-BinaryOperator 0x55f6a7591628 <line:340:3, col:32> 'unsigned char' '='
|   | | |-DeclRefExpr 0x55f6a7591580 <col:3> 'unsigned char' lvalue Var 0x55f6a75818d8 'r1' 'unsigned char'
|   | | `-CallExpr 0x55f6a7591608 <col:8, col:32> 'unsigned char'
|   | |   `-ImplicitCastExpr 0x55f6a75915f0 <col:8> 'unsigned char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a75915a0 <col:8> 'unsigned char (void)' Function 0x55f6a755c3d0 '__VERIFIER_nondet_uchar' 'unsigned char (void)'
|   | |-BinaryOperator 0x55f6a75916f8 <line:341:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7591648 <col:3> 'char' lvalue Var 0x55f6a7581ab8 'id1' 'char'
|   | | `-CallExpr 0x55f6a75916d8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a75916c0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591668 <col:9> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591790 <line:342:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7591718 <col:3> 'char' lvalue Var 0x55f6a7581b30 'st1' 'char'
|   | | `-CallExpr 0x55f6a7591770 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591758 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591738 <col:9> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591828 <line:343:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55f6a75917b0 <col:3> 'msg_t':'char' lvalue Var 0x55f6a7581ba8 'send1' 'msg_t':'char'
|   | | `-CallExpr 0x55f6a7591808 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a75917f0 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a75917d0 <col:11> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a75918f8 <line:344:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55f6a7591848 <col:3> '_Bool' lvalue Var 0x55f6a7581c20 'mode1' '_Bool'
|   | | `-CallExpr 0x55f6a75918d8 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55f6a75918c0 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591868 <col:11> '_Bool (void)' Function 0x55f6a755be70 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55f6a7591990 <line:345:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7591918 <col:3> 'char' lvalue Var 0x55f6a7581e00 'id2' 'char'
|   | | `-CallExpr 0x55f6a7591970 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591958 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591938 <col:9> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591a28 <line:346:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55f6a75919b0 <col:3> 'char' lvalue Var 0x55f6a7581e78 'st2' 'char'
|   | | `-CallExpr 0x55f6a7591a08 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a75919f0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a75919d0 <col:9> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591ac0 <line:347:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55f6a7591a48 <col:3> 'msg_t':'char' lvalue Var 0x55f6a7581ef0 'send2' 'msg_t':'char'
|   | | `-CallExpr 0x55f6a7591aa0 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591a88 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591a68 <col:11> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591b58 <line:348:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55f6a7591ae0 <col:3> '_Bool' lvalue Var 0x55f6a7581f68 'mode2' '_Bool'
|   | | `-CallExpr 0x55f6a7591b38 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55f6a7591b20 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591b00 <col:11> '_Bool (void)' Function 0x55f6a755be70 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55f6a7591bf0 <line:349:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7591b78 <col:3> 'char' lvalue Var 0x55f6a7582148 'id3' 'char'
|   | | `-CallExpr 0x55f6a7591bd0 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591bb8 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591b98 <col:9> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591c88 <line:350:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7591c10 <col:3> 'char' lvalue Var 0x55f6a75821c0 'st3' 'char'
|   | | `-CallExpr 0x55f6a7591c68 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591c50 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591c30 <col:9> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591d20 <line:351:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55f6a7591ca8 <col:3> 'msg_t':'char' lvalue Var 0x55f6a7582238 'send3' 'msg_t':'char'
|   | | `-CallExpr 0x55f6a7591d00 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591ce8 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591cc8 <col:11> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591db8 <line:352:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55f6a7591d40 <col:3> '_Bool' lvalue Var 0x55f6a75822b0 'mode3' '_Bool'
|   | | `-CallExpr 0x55f6a7591d98 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55f6a7591d80 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591d60 <col:11> '_Bool (void)' Function 0x55f6a755be70 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55f6a7591e50 <line:353:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7591dd8 <col:3> 'char' lvalue Var 0x55f6a7582490 'id4' 'char'
|   | | `-CallExpr 0x55f6a7591e30 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591e18 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591df8 <col:9> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591ee8 <line:354:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7591e70 <col:3> 'char' lvalue Var 0x55f6a7582508 'st4' 'char'
|   | | `-CallExpr 0x55f6a7591ec8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591eb0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591e90 <col:9> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7591f80 <line:355:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55f6a7591f08 <col:3> 'msg_t':'char' lvalue Var 0x55f6a7582580 'send4' 'msg_t':'char'
|   | | `-CallExpr 0x55f6a7591f60 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55f6a7591f48 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591f28 <col:11> 'char (void)' Function 0x55f6a755c290 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55f6a7592018 <line:356:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55f6a7591fa0 <col:3> '_Bool' lvalue Var 0x55f6a75825f8 'mode4' '_Bool'
|   | | `-CallExpr 0x55f6a7591ff8 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55f6a7591fe0 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7591fc0 <col:11> '_Bool (void)' Function 0x55f6a755be70 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55f6a7592108 <line:357:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x55f6a7592038 <col:3> 'int' lvalue Var 0x55f6a75914a0 'i2' 'int'
|   | | `-CallExpr 0x55f6a75920e8 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x55f6a75920d0 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55f6a7592080 <col:8> 'int (void)' Function 0x55f6a7588808 'init' 'int (void)'
|   | |-CallExpr 0x55f6a75921b8 <line:358:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x55f6a75921a0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55f6a7592128 <col:3> 'void (int)' Function 0x55f6a755c6e0 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x55f6a75921e0 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a7592148 <col:21> 'int' lvalue Var 0x55f6a75914a0 'i2' 'int'
|   | |-BinaryOperator 0x55f6a7592250 <line:359:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55f6a75921f8 <col:3> 'char' lvalue Var 0x55f6a75819c8 'p1_old' 'char'
|   | | `-ImplicitCastExpr 0x55f6a7592238 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a7592218 <col:12> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55f6a75922c8 <line:360:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7592270 <col:3> 'char' lvalue Var 0x55f6a7581a40 'p1_new' 'char'
|   | | `-ImplicitCastExpr 0x55f6a75922b0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a7592290 <col:12> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55f6a7592340 <line:361:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55f6a75922e8 <col:3> 'char' lvalue Var 0x55f6a7581d10 'p2_old' 'char'
|   | | `-ImplicitCastExpr 0x55f6a7592328 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a7592308 <col:12> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55f6a75923b8 <line:362:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7592360 <col:3> 'char' lvalue Var 0x55f6a7581d88 'p2_new' 'char'
|   | | `-ImplicitCastExpr 0x55f6a75923a0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a7592380 <col:12> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55f6a7592430 <line:363:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55f6a75923d8 <col:3> 'char' lvalue Var 0x55f6a7582058 'p3_old' 'char'
|   | | `-ImplicitCastExpr 0x55f6a7592418 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a75923f8 <col:12> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55f6a75924a8 <line:364:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7592450 <col:3> 'char' lvalue Var 0x55f6a75820d0 'p3_new' 'char'
|   | | `-ImplicitCastExpr 0x55f6a7592490 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a7592470 <col:12> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55f6a7592520 <line:365:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55f6a75924c8 <col:3> 'char' lvalue Var 0x55f6a75823a0 'p4_old' 'char'
|   | | `-ImplicitCastExpr 0x55f6a7592508 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a75924e8 <col:12> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55f6a7592598 <line:366:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55f6a7592540 <col:3> 'char' lvalue Var 0x55f6a7582418 'p4_new' 'char'
|   | | `-ImplicitCastExpr 0x55f6a7592580 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55f6a7592560 <col:12> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55f6a75925f8 <line:367:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55f6a75925b8 <col:3> 'int' lvalue Var 0x55f6a75914a0 'i2' 'int'
|   | | `-IntegerLiteral 0x55f6a75925d8 <col:8> 'int' 0
|   | `-WhileStmt 0x55f6a7592d68 <line:368:3, line:385:3>
|   |   |-IntegerLiteral 0x55f6a7592618 <line:368:10> 'int' 1
|   |   `-CompoundStmt 0x55f6a7592d50 <col:13, line:385:3>
|   |     `-CompoundStmt 0x55f6a7592cd0 <line:369:5, line:384:5>
|   |       |-CallExpr 0x55f6a7592670 <line:370:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55f6a7592658 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55f6a7592638 <col:5> 'void (void)' Function 0x55f6a75838f0 'node1' 'void (void)'
|   |       |-CallExpr 0x55f6a75926c8 <line:371:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55f6a75926b0 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55f6a7592690 <col:5> 'void (void)' Function 0x55f6a7584780 'node2' 'void (void)'
|   |       |-CallExpr 0x55f6a7592720 <line:372:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55f6a7592708 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55f6a75926e8 <col:5> 'void (void)' Function 0x55f6a7586950 'node3' 'void (void)'
|   |       |-CallExpr 0x55f6a7592778 <line:373:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55f6a7592760 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55f6a7592740 <col:5> 'void (void)' Function 0x55f6a7587678 'node4' 'void (void)'
|   |       |-BinaryOperator 0x55f6a75927f0 <line:374:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55f6a7592798 <col:5> 'char' lvalue Var 0x55f6a75819c8 'p1_old' 'char'
|   |       | `-ImplicitCastExpr 0x55f6a75927d8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55f6a75927b8 <col:14> 'char' lvalue Var 0x55f6a7581a40 'p1_new' 'char'
|   |       |-BinaryOperator 0x55f6a7592868 <line:375:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55f6a7592810 <col:5> 'char' lvalue Var 0x55f6a7581a40 'p1_new' 'char'
|   |       | `-ImplicitCastExpr 0x55f6a7592850 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55f6a7592830 <col:14> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55f6a75928e0 <line:376:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55f6a7592888 <col:5> 'char' lvalue Var 0x55f6a7581d10 'p2_old' 'char'
|   |       | `-ImplicitCastExpr 0x55f6a75928c8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55f6a75928a8 <col:14> 'char' lvalue Var 0x55f6a7581d88 'p2_new' 'char'
|   |       |-BinaryOperator 0x55f6a7592958 <line:377:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55f6a7592900 <col:5> 'char' lvalue Var 0x55f6a7581d88 'p2_new' 'char'
|   |       | `-ImplicitCastExpr 0x55f6a7592940 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55f6a7592920 <col:14> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55f6a75929d0 <line:378:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55f6a7592978 <col:5> 'char' lvalue Var 0x55f6a7582058 'p3_old' 'char'
|   |       | `-ImplicitCastExpr 0x55f6a75929b8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55f6a7592998 <col:14> 'char' lvalue Var 0x55f6a75820d0 'p3_new' 'char'
|   |       |-BinaryOperator 0x55f6a7592a48 <line:379:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55f6a75929f0 <col:5> 'char' lvalue Var 0x55f6a75820d0 'p3_new' 'char'
|   |       | `-ImplicitCastExpr 0x55f6a7592a30 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55f6a7592a10 <col:14> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55f6a7592ac0 <line:380:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55f6a7592a68 <col:5> 'char' lvalue Var 0x55f6a75823a0 'p4_old' 'char'
|   |       | `-ImplicitCastExpr 0x55f6a7592aa8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55f6a7592a88 <col:14> 'char' lvalue Var 0x55f6a7582418 'p4_new' 'char'
|   |       |-BinaryOperator 0x55f6a7592b38 <line:381:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55f6a7592ae0 <col:5> 'char' lvalue Var 0x55f6a7582418 'p4_new' 'char'
|   |       | `-ImplicitCastExpr 0x55f6a7592b20 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55f6a7592b00 <col:14> 'msg_t':'char' lvalue Var 0x55f6a75817e8 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55f6a7592bd0 <line:382:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x55f6a7592b58 <col:5> 'int' lvalue Var 0x55f6a7591408 'c1' 'int'
|   |       | `-CallExpr 0x55f6a7592bb0 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x55f6a7592b98 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x55f6a7592b78 <col:10> 'int (void)' Function 0x55f6a758f2d0 'check' 'int (void)'
|   |       `-CallExpr 0x55f6a7592c78 <line:383:5, col:14> 'void'
|   |         |-ImplicitCastExpr 0x55f6a7592c60 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x55f6a7592bf0 <col:5> 'void (_Bool)' Function 0x55f6a755c550 'assert' 'void (_Bool)'
|   |         `-ImplicitCastExpr 0x55f6a7592cb8 <col:12> '_Bool' <IntegralToBoolean>
|   |           `-ImplicitCastExpr 0x55f6a7592ca0 <col:12> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55f6a7592c10 <col:12> 'int' lvalue Var 0x55f6a7591408 'c1' 'int'
|   `-ReturnStmt 0x55f6a7592ea0 <line:387:1, col:8>
|     `-IntegerLiteral 0x55f6a7592e80 <col:8> 'int' 0
`-FunctionDecl 0x55f6a7592f80 prev 0x55f6a755c550 <line:389:1, line:400:1> line:389:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x55f6a7592ef0 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x55f6a75931e0 <line:390:1, line:400:1>
    `-CompoundStmt 0x55f6a75931c8 <line:393:3, line:399:1>
      `-IfStmt 0x55f6a75931b0 <line:394:3, line:398:3>
        |-UnaryOperator 0x55f6a7593060 <line:394:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x55f6a7593048 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x55f6a7593028 <col:9> '_Bool' lvalue ParmVar 0x55f6a7592ef0 'arg' '_Bool'
        `-CompoundStmt 0x55f6a7593198 <col:14, line:398:3>
          `-CompoundStmt 0x55f6a7593180 <line:395:5, line:397:5>
            `-LabelStmt 0x55f6a7593168 <line:396:5, col:29> 'ERROR'
              `-CallExpr 0x55f6a75930f8 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x55f6a75930e0 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x55f6a7593090 <col:12> 'void () __attribute__((noreturn))' Function 0x55f6a755bc90 '__VERIFIER_error' 'void () __attribute__((noreturn))'
