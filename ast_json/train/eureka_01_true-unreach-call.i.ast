TranslationUnitDecl 0x5593db60cd58 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5593db60d618 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5593db60d2f0 '__int128'
|-TypedefDecl 0x5593db60d688 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5593db60d310 'unsigned __int128'
|-TypedefDecl 0x5593db60d990 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5593db60d760 'struct __NSConstantString_tag'
|   `-Record 0x5593db60d6e0 '__NSConstantString_tag'
|-TypedefDecl 0x5593db60da38 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5593db60d9f0 'char *'
|   `-BuiltinType 0x5593db60cdf0 'char'
|-TypedefDecl 0x5593db64ce30 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5593db60dcd0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5593db60db10 'struct __va_list_tag'
|     `-Record 0x5593db60da90 '__va_list_tag'
|-FunctionDecl 0x5593db64cf10 <loops/eureka_01_true-unreach-call.i:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x5593db64d0e0 <line:3:1, line:8:1> line:3:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x5593db64d010 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x5593db64d330 <col:34, line:8:1>
|   |-IfStmt 0x5593db64d308 <line:4:3, line:6:3>
|   | |-UnaryOperator 0x5593db64d1e0 <line:4:7, col:13> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x5593db64d1c8 <col:8, col:13> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x5593db64d1a8 <col:8, col:13> 'int' lvalue
|   | |     `-DeclRefExpr 0x5593db64d188 <col:9> 'int' lvalue ParmVar 0x5593db64d010 'cond' 'int'
|   | `-CompoundStmt 0x5593db64d2f0 <col:16, line:6:3>
|   |   `-LabelStmt 0x5593db64d2d8 <line:5:5, col:29> 'ERROR'
|   |     `-CallExpr 0x5593db64d268 <col:12, col:29> 'void'
|   |       `-ImplicitCastExpr 0x5593db64d250 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5593db64d1f8 <col:12> 'void () __attribute__((noreturn))' Function 0x5593db64cf10 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x5593db64d320 <line:7:3>
|-VarDecl 0x5593db64d368 <line:9:1, col:16> col:5 used INFINITY 'int' cinit
| `-IntegerLiteral 0x5593db64d3d0 <col:16> 'int' 899
`-FunctionDecl 0x5593db64d448 <line:11:1, line:59:1> line:11:5 main 'int ()'
  `-CompoundStmt 0x5593db674c30 <col:11, line:59:1>
    |-DeclStmt 0x5593db64d588 <line:12:3, col:20>
    | `-VarDecl 0x5593db64d500 <col:3, col:19> col:7 used nodecount 'int' cinit
    |   `-IntegerLiteral 0x5593db64d568 <col:19> 'int' 5
    |-DeclStmt 0x5593db64d640 <line:13:3, col:21>
    | `-VarDecl 0x5593db64d5b8 <col:3, col:19> col:7 used edgecount 'int' cinit
    |   `-IntegerLiteral 0x5593db64d620 <col:19> 'int' 20
    |-DeclStmt 0x5593db64d6f8 <line:14:3, col:17>
    | `-VarDecl 0x5593db64d670 <col:3, col:16> col:7 used source 'int' cinit
    |   `-IntegerLiteral 0x5593db64d6d8 <col:16> 'int' 0
    |-DeclStmt 0x5593db64dc70 <line:15:3, col:61>
    | `-VarDecl 0x5593db64d7b8 <col:3, col:60> col:7 used Source 'int [20]' cinit
    |   `-InitListExpr 0x5593db64db90 <col:20, col:60> 'int [20]'
    |     |-IntegerLiteral 0x5593db64d820 <col:21> 'int' 0
    |     |-IntegerLiteral 0x5593db64d840 <col:23> 'int' 4
    |     |-IntegerLiteral 0x5593db64d860 <col:25> 'int' 1
    |     |-IntegerLiteral 0x5593db64d880 <col:27> 'int' 1
    |     |-IntegerLiteral 0x5593db64d8a0 <col:29> 'int' 0
    |     |-IntegerLiteral 0x5593db64d8c0 <col:31> 'int' 0
    |     |-IntegerLiteral 0x5593db64d8e0 <col:33> 'int' 1
    |     |-IntegerLiteral 0x5593db64d900 <col:35> 'int' 3
    |     |-IntegerLiteral 0x5593db64d920 <col:37> 'int' 4
    |     |-IntegerLiteral 0x5593db64d940 <col:39> 'int' 4
    |     |-IntegerLiteral 0x5593db64d960 <col:41> 'int' 2
    |     |-IntegerLiteral 0x5593db64d980 <col:43> 'int' 2
    |     |-IntegerLiteral 0x5593db64d9a0 <col:45> 'int' 3
    |     |-IntegerLiteral 0x5593db64d9c0 <col:47> 'int' 0
    |     |-IntegerLiteral 0x5593db64d9e0 <col:49> 'int' 0
    |     |-IntegerLiteral 0x5593db64da00 <col:51> 'int' 3
    |     |-IntegerLiteral 0x5593db64da20 <col:53> 'int' 1
    |     |-IntegerLiteral 0x5593db64da40 <col:55> 'int' 2
    |     |-IntegerLiteral 0x5593db64da60 <col:57> 'int' 2
    |     `-IntegerLiteral 0x5593db64da80 <col:59> 'int' 3
    |-DeclStmt 0x5593db672580 <line:16:3, col:59>
    | `-VarDecl 0x5593db64dce8 <col:3, col:58> col:7 used Dest 'int [20]' cinit
    |   `-InitListExpr 0x5593db6724a0 <col:18, col:58> 'int [20]'
    |     |-IntegerLiteral 0x5593db64dd50 <col:19> 'int' 1
    |     |-IntegerLiteral 0x5593db64dd70 <col:21> 'int' 3
    |     |-IntegerLiteral 0x5593db64dd90 <col:23> 'int' 4
    |     |-IntegerLiteral 0x5593db64ddb0 <col:25> 'int' 1
    |     |-IntegerLiteral 0x5593db64ddd0 <col:27> 'int' 1
    |     |-IntegerLiteral 0x5593db64ddf0 <col:29> 'int' 4
    |     |-IntegerLiteral 0x5593db64de10 <col:31> 'int' 3
    |     |-IntegerLiteral 0x5593db672210 <col:33> 'int' 4
    |     |-IntegerLiteral 0x5593db672230 <col:35> 'int' 3
    |     |-IntegerLiteral 0x5593db672250 <col:37> 'int' 0
    |     |-IntegerLiteral 0x5593db672270 <col:39> 'int' 0
    |     |-IntegerLiteral 0x5593db672290 <col:41> 'int' 0
    |     |-IntegerLiteral 0x5593db6722b0 <col:43> 'int' 0
    |     |-IntegerLiteral 0x5593db6722d0 <col:45> 'int' 2
    |     |-IntegerLiteral 0x5593db6722f0 <col:47> 'int' 3
    |     |-IntegerLiteral 0x5593db672310 <col:49> 'int' 0
    |     |-IntegerLiteral 0x5593db672330 <col:51> 'int' 2
    |     |-IntegerLiteral 0x5593db672350 <col:53> 'int' 1
    |     |-IntegerLiteral 0x5593db672370 <col:55> 'int' 0
    |     `-IntegerLiteral 0x5593db672390 <col:57> 'int' 4
    |-DeclStmt 0x5593db672ab0 <line:17:3, col:71>
    | `-VarDecl 0x5593db6725f8 <col:3, col:70> col:7 used Weight 'int [20]' cinit
    |   `-InitListExpr 0x5593db6729d0 <col:20, col:70> 'int [20]'
    |     |-IntegerLiteral 0x5593db672660 <col:21> 'int' 0
    |     |-IntegerLiteral 0x5593db672680 <col:23> 'int' 1
    |     |-IntegerLiteral 0x5593db6726a0 <col:25> 'int' 2
    |     |-IntegerLiteral 0x5593db6726c0 <col:27> 'int' 3
    |     |-IntegerLiteral 0x5593db6726e0 <col:29> 'int' 4
    |     |-IntegerLiteral 0x5593db672700 <col:31> 'int' 5
    |     |-IntegerLiteral 0x5593db672720 <col:33> 'int' 6
    |     |-IntegerLiteral 0x5593db672740 <col:35> 'int' 7
    |     |-IntegerLiteral 0x5593db672760 <col:37> 'int' 8
    |     |-IntegerLiteral 0x5593db672780 <col:39> 'int' 9
    |     |-IntegerLiteral 0x5593db6727a0 <col:41> 'int' 10
    |     |-IntegerLiteral 0x5593db6727c0 <col:44> 'int' 11
    |     |-IntegerLiteral 0x5593db6727e0 <col:47> 'int' 12
    |     |-IntegerLiteral 0x5593db672800 <col:50> 'int' 13
    |     |-IntegerLiteral 0x5593db672820 <col:53> 'int' 14
    |     |-IntegerLiteral 0x5593db672840 <col:56> 'int' 15
    |     |-IntegerLiteral 0x5593db672860 <col:59> 'int' 16
    |     |-IntegerLiteral 0x5593db672880 <col:62> 'int' 17
    |     |-IntegerLiteral 0x5593db6728a0 <col:65> 'int' 18
    |     `-IntegerLiteral 0x5593db6728c0 <col:68> 'int' 19
    |-DeclStmt 0x5593db672bd0 <line:18:3, col:18>
    | `-VarDecl 0x5593db672b68 <col:3, col:17> col:7 used distance 'int [5]'
    |-DeclStmt 0x5593db672d00 <line:19:3, col:10>
    | |-VarDecl 0x5593db672c00 <col:3, col:7> col:7 used x 'int'
    | `-VarDecl 0x5593db672c80 <col:3, col:9> col:9 used y 'int'
    |-DeclStmt 0x5593db672e30 <line:20:3, col:10>
    | |-VarDecl 0x5593db672d30 <col:3, col:7> col:7 used i 'int'
    | `-VarDecl 0x5593db672db0 <col:3, col:9> col:9 used j 'int'
    |-ForStmt 0x5593db6735f8 <line:22:3, line:29:3>
    | |-BinaryOperator 0x5593db672e88 <line:22:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x5593db672e48 <col:7> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | | `-IntegerLiteral 0x5593db672e68 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x5593db672f18 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x5593db672ee8 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x5593db672ea8 <col:14> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | | `-ImplicitCastExpr 0x5593db672f00 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x5593db672ec8 <col:18> 'int' lvalue Var 0x5593db64d500 'nodecount' 'int'
    | |-UnaryOperator 0x5593db672f58 <col:29, col:30> 'int' postfix '++'
    | | `-DeclRefExpr 0x5593db672f38 <col:29> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | `-CompoundStmt 0x5593db6735e0 <col:33, line:29:3>
    |   `-IfStmt 0x5593db6735b8 <line:23:5, line:28:5> has_else
    |     |-BinaryOperator 0x5593db672fe0 <line:23:8, col:13> 'int' '=='
    |     | |-ImplicitCastExpr 0x5593db672fb0 <col:8> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x5593db672f70 <col:8> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    |     | `-ImplicitCastExpr 0x5593db672fc8 <col:13> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5593db672f90 <col:13> 'int' lvalue Var 0x5593db64d670 'source' 'int'
    |     |-CompoundStmt 0x5593db673100 <col:20, line:25:5>
    |     | `-BinaryOperator 0x5593db6730e0 <line:24:7, col:21> 'int' '='
    |     |   |-ArraySubscriptExpr 0x5593db6730a0 <col:7, col:17> 'int' lvalue
    |     |   | |-ImplicitCastExpr 0x5593db673070 <col:7> 'int *' <ArrayToPointerDecay>
    |     |   | | `-DeclRefExpr 0x5593db673000 <col:7> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |     |   | `-ImplicitCastExpr 0x5593db673088 <col:16> 'int' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x5593db673020 <col:16> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    |     |   `-IntegerLiteral 0x5593db6730c0 <col:21> 'int' 0
    |     `-CompoundStmt 0x5593db6735a0 <line:26:10, line:28:5>
    |       `-BinaryOperator 0x5593db6731e0 <line:27:7, col:21> 'int' '='
    |         |-ArraySubscriptExpr 0x5593db673188 <col:7, col:17> 'int' lvalue
    |         | |-ImplicitCastExpr 0x5593db673158 <col:7> 'int *' <ArrayToPointerDecay>
    |         | | `-DeclRefExpr 0x5593db673118 <col:7> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |         | `-ImplicitCastExpr 0x5593db673170 <col:16> 'int' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5593db673138 <col:16> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    |         `-ImplicitCastExpr 0x5593db6731c8 <col:21> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x5593db6731a8 <col:21> 'int' lvalue Var 0x5593db64d368 'INFINITY' 'int'
    |-ForStmt 0x5593db673f50 <line:31:3, line:42:5>
    | |-BinaryOperator 0x5593db673670 <line:31:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x5593db673630 <col:7> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | | `-IntegerLiteral 0x5593db673650 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x5593db673700 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x5593db6736d0 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x5593db673690 <col:14> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | | `-ImplicitCastExpr 0x5593db6736e8 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x5593db6736b0 <col:18> 'int' lvalue Var 0x5593db64d500 'nodecount' 'int'
    | |-UnaryOperator 0x5593db673740 <col:29, col:30> 'int' postfix '++'
    | | `-DeclRefExpr 0x5593db673720 <col:29> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | `-CompoundStmt 0x5593db673f38 <line:32:5, line:42:5>
    |   `-ForStmt 0x5593db673f00 <line:33:7, line:41:2>
    |     |-BinaryOperator 0x5593db673798 <line:33:11, col:15> 'int' '='
    |     | |-DeclRefExpr 0x5593db673758 <col:11> 'int' lvalue Var 0x5593db672db0 'j' 'int'
    |     | `-IntegerLiteral 0x5593db673778 <col:15> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x5593db673828 <col:18, col:22> 'int' '<'
    |     | |-ImplicitCastExpr 0x5593db6737f8 <col:18> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x5593db6737b8 <col:18> 'int' lvalue Var 0x5593db672db0 'j' 'int'
    |     | `-ImplicitCastExpr 0x5593db673810 <col:22> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5593db6737d8 <col:22> 'int' lvalue Var 0x5593db64d5b8 'edgecount' 'int'
    |     |-UnaryOperator 0x5593db673868 <col:33, col:34> 'int' postfix '++'
    |     | `-DeclRefExpr 0x5593db673848 <col:33> 'int' lvalue Var 0x5593db672db0 'j' 'int'
    |     `-CompoundStmt 0x5593db673ed8 <line:34:2, line:41:2>
    |       |-BinaryOperator 0x5593db673948 <line:35:4, col:14> 'int' '='
    |       | |-DeclRefExpr 0x5593db673880 <col:4> 'int' lvalue Var 0x5593db672c00 'x' 'int'
    |       | `-ImplicitCastExpr 0x5593db673930 <col:8, col:14> 'int' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x5593db673910 <col:8, col:14> 'int' lvalue
    |       |     |-ImplicitCastExpr 0x5593db6738e0 <col:8> 'int *' <ArrayToPointerDecay>
    |       |     | `-DeclRefExpr 0x5593db6738a0 <col:8> 'int [20]' lvalue Var 0x5593db64dce8 'Dest' 'int [20]'
    |       |     `-ImplicitCastExpr 0x5593db6738f8 <col:13> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x5593db6738c0 <col:13> 'int' lvalue Var 0x5593db672db0 'j' 'int'
    |       |-BinaryOperator 0x5593db673a30 <line:36:4, col:16> 'int' '='
    |       | |-DeclRefExpr 0x5593db673968 <col:4> 'int' lvalue Var 0x5593db672c80 'y' 'int'
    |       | `-ImplicitCastExpr 0x5593db673a18 <col:8, col:16> 'int' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x5593db6739f8 <col:8, col:16> 'int' lvalue
    |       |     |-ImplicitCastExpr 0x5593db6739c8 <col:8> 'int *' <ArrayToPointerDecay>
    |       |     | `-DeclRefExpr 0x5593db673988 <col:8> 'int [20]' lvalue Var 0x5593db64d7b8 'Source' 'int [20]'
    |       |     `-ImplicitCastExpr 0x5593db6739e0 <col:15> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x5593db6739a8 <col:15> 'int' lvalue Var 0x5593db672db0 'j' 'int'
    |       `-IfStmt 0x5593db673ec0 <line:37:4, line:40:6>
    |         |-BinaryOperator 0x5593db673c68 <line:37:7, col:43> 'int' '>'
    |         | |-ImplicitCastExpr 0x5593db673c50 <col:7, col:17> 'int' <LValueToRValue>
    |         | | `-ArraySubscriptExpr 0x5593db673ac0 <col:7, col:17> 'int' lvalue
    |         | |   |-ImplicitCastExpr 0x5593db673a90 <col:7> 'int *' <ArrayToPointerDecay>
    |         | |   | `-DeclRefExpr 0x5593db673a50 <col:7> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |         | |   `-ImplicitCastExpr 0x5593db673aa8 <col:16> 'int' <LValueToRValue>
    |         | |     `-DeclRefExpr 0x5593db673a70 <col:16> 'int' lvalue Var 0x5593db672c00 'x' 'int'
    |         | `-BinaryOperator 0x5593db673c30 <col:21, col:43> 'int' '+'
    |         |   |-ImplicitCastExpr 0x5593db673c00 <col:21, col:31> 'int' <LValueToRValue>
    |         |   | `-ArraySubscriptExpr 0x5593db673b50 <col:21, col:31> 'int' lvalue
    |         |   |   |-ImplicitCastExpr 0x5593db673b20 <col:21> 'int *' <ArrayToPointerDecay>
    |         |   |   | `-DeclRefExpr 0x5593db673ae0 <col:21> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |         |   |   `-ImplicitCastExpr 0x5593db673b38 <col:30> 'int' <LValueToRValue>
    |         |   |     `-DeclRefExpr 0x5593db673b00 <col:30> 'int' lvalue Var 0x5593db672c80 'y' 'int'
    |         |   `-ImplicitCastExpr 0x5593db673c18 <col:35, col:43> 'int' <LValueToRValue>
    |         |     `-ArraySubscriptExpr 0x5593db673be0 <col:35, col:43> 'int' lvalue
    |         |       |-ImplicitCastExpr 0x5593db673bb0 <col:35> 'int *' <ArrayToPointerDecay>
    |         |       | `-DeclRefExpr 0x5593db673b70 <col:35> 'int [20]' lvalue Var 0x5593db6725f8 'Weight' 'int [20]'
    |         |       `-ImplicitCastExpr 0x5593db673bc8 <col:42> 'int' <LValueToRValue>
    |         |         `-DeclRefExpr 0x5593db673b90 <col:42> 'int' lvalue Var 0x5593db672db0 'j' 'int'
    |         `-CompoundStmt 0x5593db673ea8 <line:38:6, line:40:6>
    |           `-BinaryOperator 0x5593db673e88 <line:39:8, col:44> 'int' '='
    |             |-ArraySubscriptExpr 0x5593db673cf8 <col:8, col:18> 'int' lvalue
    |             | |-ImplicitCastExpr 0x5593db673cc8 <col:8> 'int *' <ArrayToPointerDecay>
    |             | | `-DeclRefExpr 0x5593db673c88 <col:8> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |             | `-ImplicitCastExpr 0x5593db673ce0 <col:17> 'int' <LValueToRValue>
    |             |   `-DeclRefExpr 0x5593db673ca8 <col:17> 'int' lvalue Var 0x5593db672c00 'x' 'int'
    |             `-BinaryOperator 0x5593db673e68 <col:22, col:44> 'int' '+'
    |               |-ImplicitCastExpr 0x5593db673e38 <col:22, col:32> 'int' <LValueToRValue>
    |               | `-ArraySubscriptExpr 0x5593db673d88 <col:22, col:32> 'int' lvalue
    |               |   |-ImplicitCastExpr 0x5593db673d58 <col:22> 'int *' <ArrayToPointerDecay>
    |               |   | `-DeclRefExpr 0x5593db673d18 <col:22> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |               |   `-ImplicitCastExpr 0x5593db673d70 <col:31> 'int' <LValueToRValue>
    |               |     `-DeclRefExpr 0x5593db673d38 <col:31> 'int' lvalue Var 0x5593db672c80 'y' 'int'
    |               `-ImplicitCastExpr 0x5593db673e50 <col:36, col:44> 'int' <LValueToRValue>
    |                 `-ArraySubscriptExpr 0x5593db673e18 <col:36, col:44> 'int' lvalue
    |                   |-ImplicitCastExpr 0x5593db673de8 <col:36> 'int *' <ArrayToPointerDecay>
    |                   | `-DeclRefExpr 0x5593db673da8 <col:36> 'int [20]' lvalue Var 0x5593db6725f8 'Weight' 'int [20]'
    |                   `-ImplicitCastExpr 0x5593db673e00 <col:43> 'int' <LValueToRValue>
    |                     `-DeclRefExpr 0x5593db673dc8 <col:43> 'int' lvalue Var 0x5593db672db0 'j' 'int'
    |-ForStmt 0x5593db674540 <line:43:3, line:51:5>
    | |-BinaryOperator 0x5593db673fc8 <line:43:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x5593db673f88 <col:7> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | | `-IntegerLiteral 0x5593db673fa8 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x5593db674058 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x5593db674028 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x5593db673fe8 <col:14> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | | `-ImplicitCastExpr 0x5593db674040 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x5593db674008 <col:18> 'int' lvalue Var 0x5593db64d5b8 'edgecount' 'int'
    | |-UnaryOperator 0x5593db674098 <col:29, col:30> 'int' postfix '++'
    | | `-DeclRefExpr 0x5593db674078 <col:29> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | `-CompoundStmt 0x5593db674518 <line:44:5, line:51:5>
    |   |-BinaryOperator 0x5593db674178 <line:45:7, col:17> 'int' '='
    |   | |-DeclRefExpr 0x5593db6740b0 <col:7> 'int' lvalue Var 0x5593db672c00 'x' 'int'
    |   | `-ImplicitCastExpr 0x5593db674160 <col:11, col:17> 'int' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x5593db674140 <col:11, col:17> 'int' lvalue
    |   |     |-ImplicitCastExpr 0x5593db674110 <col:11> 'int *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x5593db6740d0 <col:11> 'int [20]' lvalue Var 0x5593db64dce8 'Dest' 'int [20]'
    |   |     `-ImplicitCastExpr 0x5593db674128 <col:16> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5593db6740f0 <col:16> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    |   |-BinaryOperator 0x5593db674260 <line:46:7, col:19> 'int' '='
    |   | |-DeclRefExpr 0x5593db674198 <col:7> 'int' lvalue Var 0x5593db672c80 'y' 'int'
    |   | `-ImplicitCastExpr 0x5593db674248 <col:11, col:19> 'int' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x5593db674228 <col:11, col:19> 'int' lvalue
    |   |     |-ImplicitCastExpr 0x5593db6741f8 <col:11> 'int *' <ArrayToPointerDecay>
    |   |     | `-DeclRefExpr 0x5593db6741b8 <col:11> 'int [20]' lvalue Var 0x5593db64d7b8 'Source' 'int [20]'
    |   |     `-ImplicitCastExpr 0x5593db674210 <col:18> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5593db6741d8 <col:18> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    |   `-IfStmt 0x5593db674500 <line:47:7, line:50:2>
    |     |-BinaryOperator 0x5593db674498 <line:47:10, col:46> 'int' '>'
    |     | |-ImplicitCastExpr 0x5593db674480 <col:10, col:20> 'int' <LValueToRValue>
    |     | | `-ArraySubscriptExpr 0x5593db6742f0 <col:10, col:20> 'int' lvalue
    |     | |   |-ImplicitCastExpr 0x5593db6742c0 <col:10> 'int *' <ArrayToPointerDecay>
    |     | |   | `-DeclRefExpr 0x5593db674280 <col:10> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |     | |   `-ImplicitCastExpr 0x5593db6742d8 <col:19> 'int' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x5593db6742a0 <col:19> 'int' lvalue Var 0x5593db672c00 'x' 'int'
    |     | `-BinaryOperator 0x5593db674460 <col:24, col:46> 'int' '+'
    |     |   |-ImplicitCastExpr 0x5593db674430 <col:24, col:34> 'int' <LValueToRValue>
    |     |   | `-ArraySubscriptExpr 0x5593db674380 <col:24, col:34> 'int' lvalue
    |     |   |   |-ImplicitCastExpr 0x5593db674350 <col:24> 'int *' <ArrayToPointerDecay>
    |     |   |   | `-DeclRefExpr 0x5593db674310 <col:24> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |     |   |   `-ImplicitCastExpr 0x5593db674368 <col:33> 'int' <LValueToRValue>
    |     |   |     `-DeclRefExpr 0x5593db674330 <col:33> 'int' lvalue Var 0x5593db672c80 'y' 'int'
    |     |   `-ImplicitCastExpr 0x5593db674448 <col:38, col:46> 'int' <LValueToRValue>
    |     |     `-ArraySubscriptExpr 0x5593db674410 <col:38, col:46> 'int' lvalue
    |     |       |-ImplicitCastExpr 0x5593db6743e0 <col:38> 'int *' <ArrayToPointerDecay>
    |     |       | `-DeclRefExpr 0x5593db6743a0 <col:38> 'int [20]' lvalue Var 0x5593db6725f8 'Weight' 'int [20]'
    |     |       `-ImplicitCastExpr 0x5593db6743f8 <col:45> 'int' <LValueToRValue>
    |     |         `-DeclRefExpr 0x5593db6743c0 <col:45> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    |     `-CompoundStmt 0x5593db6744e8 <line:48:2, line:50:2>
    |       `-ReturnStmt 0x5593db6744d8 <line:49:4, col:11>
    |         `-IntegerLiteral 0x5593db6744b8 <col:11> 'int' 0
    |-ForStmt 0x5593db674bc8 <line:53:3, line:56:5>
    | |-BinaryOperator 0x5593db674950 <line:53:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x5593db674578 <col:7> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | | `-IntegerLiteral 0x5593db674930 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x5593db6749e0 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x5593db6749b0 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x5593db674970 <col:14> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | | `-ImplicitCastExpr 0x5593db6749c8 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x5593db674990 <col:18> 'int' lvalue Var 0x5593db64d500 'nodecount' 'int'
    | |-UnaryOperator 0x5593db674a20 <col:29, col:30> 'int' postfix '++'
    | | `-DeclRefExpr 0x5593db674a00 <col:29> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    | `-CompoundStmt 0x5593db674bb0 <line:54:5, line:56:5>
    |   `-CallExpr 0x5593db674b88 <line:55:7, col:39> 'void'
    |     |-ImplicitCastExpr 0x5593db674b70 <col:7> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x5593db674a38 <col:7> 'void (int)' Function 0x5593db64d0e0 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x5593db674b20 <col:25, col:38> 'int' '>='
    |       |-ImplicitCastExpr 0x5593db674b08 <col:25, col:35> 'int' <LValueToRValue>
    |       | `-ArraySubscriptExpr 0x5593db674ac8 <col:25, col:35> 'int' lvalue
    |       |   |-ImplicitCastExpr 0x5593db674a98 <col:25> 'int *' <ArrayToPointerDecay>
    |       |   | `-DeclRefExpr 0x5593db674a58 <col:25> 'int [5]' lvalue Var 0x5593db672b68 'distance' 'int [5]'
    |       |   `-ImplicitCastExpr 0x5593db674ab0 <col:34> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x5593db674a78 <col:34> 'int' lvalue Var 0x5593db672d30 'i' 'int'
    |       `-IntegerLiteral 0x5593db674ae8 <col:38> 'int' 0
    `-ReturnStmt 0x5593db674c20 <line:58:3, col:10>
      `-IntegerLiteral 0x5593db674c00 <col:10> 'int' 0
