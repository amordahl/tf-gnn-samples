TranslationUnitDecl 0x55aab893b4d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55aab893bd98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55aab893ba70 '__int128'
|-TypedefDecl 0x55aab893be08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55aab893ba90 'unsigned __int128'
|-TypedefDecl 0x55aab893c110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55aab893bee0 'struct __NSConstantString_tag'
|   `-Record 0x55aab893be60 '__NSConstantString_tag'
|-TypedefDecl 0x55aab893c1b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55aab893c170 'char *'
|   `-BuiltinType 0x55aab893b570 'char'
|-TypedefDecl 0x55aab897b630 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55aab893c450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55aab893c290 'struct __va_list_tag'
|     `-Record 0x55aab893c210 '__va_list_tag'
|-FunctionDecl 0x55aab897b710 <float-benchs/exp_loop_true-unreach-call.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55aab897b8c8 <line:7:1, col:42> col:14 used __VERIFIER_nondet_float 'float (void)' extern
|-FunctionDecl 0x55aab897ba50 <line:8:1, col:45> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55aab897b980 <col:31, col:35> col:35 expression 'int'
|-FunctionDecl 0x55aab897bba0 <line:9:1, col:88> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55aab897bb10 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x55aab897bdf0 <col:34, col:88>
|   |-IfStmt 0x55aab897bdc8 <col:36, col:78>
|   | |-UnaryOperator 0x55aab897bca0 <col:40, col:46> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x55aab897bc88 <col:41, col:46> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55aab897bc68 <col:41, col:46> 'int' lvalue
|   | |     `-DeclRefExpr 0x55aab897bc48 <col:42> 'int' lvalue ParmVar 0x55aab897bb10 'cond' 'int'
|   | `-CompoundStmt 0x55aab897bdb0 <col:49, col:78>
|   |   `-LabelStmt 0x55aab897bd98 <col:51, col:75> 'ERROR'
|   |     `-CallExpr 0x55aab897bd28 <col:58, col:75> 'void'
|   |       `-ImplicitCastExpr 0x55aab897bd10 <col:58> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x55aab897bcb8 <col:58> 'void () __attribute__((noreturn))' Function 0x55aab897b710 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x55aab897bde0 <col:80>
|-FunctionDecl 0x55aab897bef8 <line:12:1, line:16:1> line:12:7 used FABS 'float (float)'
| |-ParmVarDecl 0x55aab897be28 <col:12, col:18> col:18 used d 'float'
| `-CompoundStmt 0x55aab897c0e8 <line:13:1, line:16:1>
|   `-IfStmt 0x55aab897c0c0 <line:14:3, line:15:16> has_else
|     |-BinaryOperator 0x55aab897bff8 <line:14:7, col:12> 'int' '>='
|     | |-ImplicitCastExpr 0x55aab897bfe0 <col:7> 'float' <LValueToRValue>
|     | | `-DeclRefExpr 0x55aab897bfa0 <col:7> 'float' lvalue ParmVar 0x55aab897be28 'd' 'float'
|     | `-FloatingLiteral 0x55aab897bfc0 <col:12> 'float' 0.000000e+00
|     |-ReturnStmt 0x55aab897c050 <col:17, col:24>
|     | `-ImplicitCastExpr 0x55aab897c038 <col:24> 'float' <LValueToRValue>
|     |   `-DeclRefExpr 0x55aab897c018 <col:24> 'float' lvalue ParmVar 0x55aab897be28 'd' 'float'
|     `-ReturnStmt 0x55aab897c0b0 <line:15:8, col:16>
|       `-UnaryOperator 0x55aab897c098 <col:15, col:16> 'float' prefix '-'
|         `-ImplicitCastExpr 0x55aab897c080 <col:16> 'float' <LValueToRValue>
|           `-DeclRefExpr 0x55aab897c060 <col:16> 'float' lvalue ParmVar 0x55aab897be28 'd' 'float'
|-FunctionDecl 0x55aab897c2a8 <line:18:1, line:43:1> line:18:7 used FREXP 'float (float, int *)'
| |-ParmVarDecl 0x55aab897c118 <col:13, col:19> col:19 used d 'float'
| |-ParmVarDecl 0x55aab897c1c8 <col:22, col:27> col:27 used e 'int *'
| `-CompoundStmt 0x55aab89a0f98 <line:19:1, line:43:1>
|   |-DeclStmt 0x55aab897c3d8 <line:20:3, col:8>
|   | `-VarDecl 0x55aab897c370 <col:3, col:7> col:7 used x 'int'
|   |-DeclStmt 0x55aab897c470 <line:21:3, col:10>
|   | `-VarDecl 0x55aab897c408 <col:3, col:9> col:9 used r 'float'
|   |-DeclStmt 0x55aab897c5d8 <line:22:3, col:21>
|   | `-VarDecl 0x55aab897c4a0 <col:3, col:20> col:9 used dd 'float' cinit
|   |   `-CallExpr 0x55aab897c598 <col:14, col:20> 'float'
|   |     |-ImplicitCastExpr 0x55aab897c580 <col:14> 'float (*)(float)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55aab897c508 <col:14> 'float (float)' Function 0x55aab897bef8 'FABS' 'float (float)'
|   |     `-ImplicitCastExpr 0x55aab897c5c0 <col:19> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x55aab897c528 <col:19> 'float' lvalue ParmVar 0x55aab897c118 'd' 'float'
|   |-IfStmt 0x55aab89a0e28 <line:24:3, line:40:3> has_else
|   | |-BinaryOperator 0x55aab89a0808 <line:24:7, col:13> 'int' '>='
|   | | |-ImplicitCastExpr 0x55aab89a07f0 <col:7> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55aab897c5f0 <col:7> 'float' lvalue Var 0x55aab897c4a0 'dd' 'float'
|   | | `-FloatingLiteral 0x55aab897c610 <col:13> 'float' 1.000000e+00
|   | |-CompoundStmt 0x55aab89a0aa0 <col:18, line:31:3>
|   | | |-BinaryOperator 0x55aab89a0868 <line:25:5, col:9> 'int' '='
|   | | | |-DeclRefExpr 0x55aab89a0828 <col:5> 'int' lvalue Var 0x55aab897c370 'x' 'int'
|   | | | `-IntegerLiteral 0x55aab89a0848 <col:9> 'int' 1
|   | | |-BinaryOperator 0x55aab89a08c8 <line:26:5, col:9> 'float' '='
|   | | | |-DeclRefExpr 0x55aab89a0888 <col:5> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   | | | `-FloatingLiteral 0x55aab89a08a8 <col:9> 'float' 2.000000e+00
|   | | `-WhileStmt 0x55aab89a0a88 <line:27:5, line:30:5>
|   | |   |-BinaryOperator 0x55aab89a0958 <line:27:12, col:17> 'int' '<='
|   | |   | |-ImplicitCastExpr 0x55aab89a0928 <col:12> 'float' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x55aab89a08e8 <col:12> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   | |   | `-ImplicitCastExpr 0x55aab89a0940 <col:17> 'float' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55aab89a0908 <col:17> 'float' lvalue Var 0x55aab897c4a0 'dd' 'float'
|   | |   `-CompoundStmt 0x55aab89a0a68 <col:21, line:30:5>
|   | |     |-UnaryOperator 0x55aab89a0998 <line:28:7, col:8> 'int' postfix '++'
|   | |     | `-DeclRefExpr 0x55aab89a0978 <col:7> 'int' lvalue Var 0x55aab897c370 'x' 'int'
|   | |     `-BinaryOperator 0x55aab89a0a48 <line:29:7, col:15> 'float' '='
|   | |       |-DeclRefExpr 0x55aab89a09b0 <col:7> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   | |       `-BinaryOperator 0x55aab89a0a28 <col:11, col:15> 'float' '*'
|   | |         |-ImplicitCastExpr 0x55aab89a0a10 <col:11> 'float' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x55aab89a09d0 <col:11> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   | |         `-FloatingLiteral 0x55aab89a09f0 <col:15> 'float' 2.000000e+00
|   | `-CompoundStmt 0x55aab89a0df8 <line:32:8, line:40:3>
|   |   |-BinaryOperator 0x55aab89a0b08 <line:33:5, col:9> 'int' '='
|   |   | |-DeclRefExpr 0x55aab89a0ac8 <col:5> 'int' lvalue Var 0x55aab897c370 'x' 'int'
|   |   | `-IntegerLiteral 0x55aab89a0ae8 <col:9> 'int' 0
|   |   |-BinaryOperator 0x55aab89a0b68 <line:34:5, col:9> 'float' '='
|   |   | |-DeclRefExpr 0x55aab89a0b28 <col:5> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   |   | `-FloatingLiteral 0x55aab89a0b48 <col:9> 'float' 5.000000e-01
|   |   |-WhileStmt 0x55aab89a0d28 <line:35:5, line:38:5>
|   |   | |-BinaryOperator 0x55aab89a0bf8 <line:35:12, col:16> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x55aab89a0bc8 <col:12> 'float' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x55aab89a0b88 <col:12> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   |   | | `-ImplicitCastExpr 0x55aab89a0be0 <col:16> 'float' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55aab89a0ba8 <col:16> 'float' lvalue Var 0x55aab897c4a0 'dd' 'float'
|   |   | `-CompoundStmt 0x55aab89a0d08 <col:20, line:38:5>
|   |   |   |-UnaryOperator 0x55aab89a0c38 <line:36:7, col:8> 'int' postfix '--'
|   |   |   | `-DeclRefExpr 0x55aab89a0c18 <col:7> 'int' lvalue Var 0x55aab897c370 'x' 'int'
|   |   |   `-BinaryOperator 0x55aab89a0ce8 <line:37:7, col:15> 'float' '='
|   |   |     |-DeclRefExpr 0x55aab89a0c50 <col:7> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   |   |     `-BinaryOperator 0x55aab89a0cc8 <col:11, col:15> 'float' '/'
|   |   |       |-ImplicitCastExpr 0x55aab89a0cb0 <col:11> 'float' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x55aab89a0c70 <col:11> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   |   |       `-FloatingLiteral 0x55aab89a0c90 <col:15> 'float' 2.000000e+00
|   |   `-BinaryOperator 0x55aab89a0dd8 <line:39:5, col:13> 'float' '='
|   |     |-DeclRefExpr 0x55aab89a0d40 <col:5> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   |     `-BinaryOperator 0x55aab89a0db8 <col:9, col:13> 'float' '*'
|   |       |-ImplicitCastExpr 0x55aab89a0da0 <col:9> 'float' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aab89a0d60 <col:9> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|   |       `-FloatingLiteral 0x55aab89a0d80 <col:13> 'float' 2.000000e+00
|   |-BinaryOperator 0x55aab89a0ed8 <line:41:3, col:8> 'int' '='
|   | |-UnaryOperator 0x55aab89a0e88 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x55aab89a0e70 <col:4> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55aab89a0e50 <col:4> 'int *' lvalue ParmVar 0x55aab897c1c8 'e' 'int *'
|   | `-ImplicitCastExpr 0x55aab89a0ec0 <col:8> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aab89a0ea0 <col:8> 'int' lvalue Var 0x55aab897c370 'x' 'int'
|   `-ReturnStmt 0x55aab89a0f88 <line:42:3, col:15>
|     `-BinaryOperator 0x55aab89a0f68 <col:10, col:15> 'float' '/'
|       |-ImplicitCastExpr 0x55aab89a0f38 <col:10> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x55aab89a0ef8 <col:10> 'float' lvalue Var 0x55aab897c4a0 'dd' 'float'
|       `-ImplicitCastExpr 0x55aab89a0f50 <col:15> 'float' <LValueToRValue>
|         `-DeclRefExpr 0x55aab89a0f18 <col:15> 'float' lvalue Var 0x55aab897c408 'r' 'float'
|-FunctionDecl 0x55aab89a1158 <line:45:1, line:62:1> line:45:7 used LDEXP 'float (float, int)'
| |-ParmVarDecl 0x55aab89a0ff0 <col:13, col:19> col:19 used d 'float'
| |-ParmVarDecl 0x55aab89a1070 <col:22, col:26> col:26 used e 'int'
| `-CompoundStmt 0x55aab89a1788 <line:46:1, line:62:1>
|   |-DeclStmt 0x55aab89a12c0 <line:47:3, col:15>
|   | `-VarDecl 0x55aab89a1220 <col:3, col:13> col:9 used x 'float' cinit
|   |   `-ImplicitCastExpr 0x55aab89a12a8 <col:13> 'float' <FloatingCast>
|   |     `-FloatingLiteral 0x55aab89a1288 <col:13> 'double' 1.000000e+00
|   |-IfStmt 0x55aab89a16c0 <line:49:3, line:60:3> has_else
|   | |-BinaryOperator 0x55aab89a1330 <line:49:7, col:12> 'int' '>='
|   | | |-ImplicitCastExpr 0x55aab89a1318 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55aab89a12d8 <col:7> 'int' lvalue ParmVar 0x55aab89a1070 'e' 'int'
|   | | `-IntegerLiteral 0x55aab89a12f8 <col:12> 'int' 0
|   | |-CompoundStmt 0x55aab89a14f0 <col:15, line:54:3>
|   | | `-WhileStmt 0x55aab89a14d8 <line:50:5, line:53:5>
|   | |   |-BinaryOperator 0x55aab89a13a8 <line:50:12, col:16> 'int' '>'
|   | |   | |-ImplicitCastExpr 0x55aab89a1390 <col:12> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x55aab89a1350 <col:12> 'int' lvalue ParmVar 0x55aab89a1070 'e' 'int'
|   | |   | `-IntegerLiteral 0x55aab89a1370 <col:16> 'int' 0
|   | |   `-CompoundStmt 0x55aab89a14b8 <col:19, line:53:5>
|   | |     |-UnaryOperator 0x55aab89a13e8 <line:51:7, col:8> 'int' postfix '--'
|   | |     | `-DeclRefExpr 0x55aab89a13c8 <col:7> 'int' lvalue ParmVar 0x55aab89a1070 'e' 'int'
|   | |     `-BinaryOperator 0x55aab89a1498 <line:52:7, col:15> 'float' '='
|   | |       |-DeclRefExpr 0x55aab89a1400 <col:7> 'float' lvalue Var 0x55aab89a1220 'x' 'float'
|   | |       `-BinaryOperator 0x55aab89a1478 <col:11, col:15> 'float' '*'
|   | |         |-ImplicitCastExpr 0x55aab89a1460 <col:11> 'float' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x55aab89a1420 <col:11> 'float' lvalue Var 0x55aab89a1220 'x' 'float'
|   | |         `-FloatingLiteral 0x55aab89a1440 <col:15> 'float' 2.000000e+00
|   | `-CompoundStmt 0x55aab89a16a8 <line:55:8, line:60:3>
|   |   `-WhileStmt 0x55aab89a1690 <line:56:5, line:59:5>
|   |     |-BinaryOperator 0x55aab89a1560 <line:56:12, col:16> 'int' '<'
|   |     | |-ImplicitCastExpr 0x55aab89a1548 <col:12> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x55aab89a1508 <col:12> 'int' lvalue ParmVar 0x55aab89a1070 'e' 'int'
|   |     | `-IntegerLiteral 0x55aab89a1528 <col:16> 'int' 0
|   |     `-CompoundStmt 0x55aab89a1670 <col:19, line:59:5>
|   |       |-UnaryOperator 0x55aab89a15a0 <line:57:7, col:8> 'int' postfix '++'
|   |       | `-DeclRefExpr 0x55aab89a1580 <col:7> 'int' lvalue ParmVar 0x55aab89a1070 'e' 'int'
|   |       `-BinaryOperator 0x55aab89a1650 <line:58:7, col:15> 'float' '='
|   |         |-DeclRefExpr 0x55aab89a15b8 <col:7> 'float' lvalue Var 0x55aab89a1220 'x' 'float'
|   |         `-BinaryOperator 0x55aab89a1630 <col:11, col:15> 'float' '/'
|   |           |-ImplicitCastExpr 0x55aab89a1618 <col:11> 'float' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55aab89a15d8 <col:11> 'float' lvalue Var 0x55aab89a1220 'x' 'float'
|   |           `-FloatingLiteral 0x55aab89a15f8 <col:15> 'float' 2.000000e+00
|   `-ReturnStmt 0x55aab89a1778 <line:61:3, col:14>
|     `-BinaryOperator 0x55aab89a1758 <col:10, col:14> 'float' '*'
|       |-ImplicitCastExpr 0x55aab89a1728 <col:10> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x55aab89a16e8 <col:10> 'float' lvalue ParmVar 0x55aab89a0ff0 'd' 'float'
|       `-ImplicitCastExpr 0x55aab89a1740 <col:14> 'float' <LValueToRValue>
|         `-DeclRefExpr 0x55aab89a1708 <col:14> 'float' lvalue Var 0x55aab89a1220 'x' 'float'
`-FunctionDecl 0x55aab89a1ba8 <line:64:1, line:77:1> line:64:5 main 'int ()'
  `-CompoundStmt 0x55aab89a25d8 <line:65:1, line:77:1>
    |-DeclStmt 0x55aab89a1de8 <line:66:3, col:16>
    | |-VarDecl 0x55aab89a1c60 <col:3, col:9> col:9 used a 'float'
    | |-VarDecl 0x55aab89a1ce0 <col:3, col:12> col:12 used b 'float'
    | `-VarDecl 0x55aab89a1d60 <col:3, col:15> col:15 used c 'float'
    |-DeclStmt 0x55aab89a1e80 <line:67:3, col:8>
    | `-VarDecl 0x55aab89a1e18 <col:3, col:7> col:7 used e 'int'
    |-BinaryOperator 0x55aab89a1f48 <line:69:3, col:31> 'float' '='
    | |-DeclRefExpr 0x55aab89a1e98 <col:3> 'float' lvalue Var 0x55aab89a1c60 'a' 'float'
    | `-CallExpr 0x55aab89a1f28 <col:7, col:31> 'float'
    |   `-ImplicitCastExpr 0x55aab89a1f10 <col:7> 'float (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55aab89a1eb8 <col:7> 'float (void)' Function 0x55aab897b8c8 '__VERIFIER_nondet_float' 'float (void)'
    |-CallExpr 0x55aab89a2118 <line:70:3, col:44> 'void'
    | |-ImplicitCastExpr 0x55aab89a2100 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aab89a1f68 <col:3> 'void (int)' Function 0x55aab897ba50 '__VERIFIER_assume' 'void (int)'
    | `-BinaryOperator 0x55aab89a20a8 <col:21, col:40> 'int' '&&'
    |   |-BinaryOperator 0x55aab89a1ff8 <col:21, col:26> 'int' '>='
    |   | |-ImplicitCastExpr 0x55aab89a1fe0 <col:21> 'double' <FloatingCast>
    |   | | `-ImplicitCastExpr 0x55aab89a1fc8 <col:21> 'float' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55aab89a1f88 <col:21> 'float' lvalue Var 0x55aab89a1c60 'a' 'float'
    |   | `-FloatingLiteral 0x55aab89a1fa8 <col:26> 'double' 1.000000e-10
    |   `-BinaryOperator 0x55aab89a2088 <col:35, col:40> 'int' '<='
    |     |-ImplicitCastExpr 0x55aab89a2070 <col:35> 'double' <FloatingCast>
    |     | `-ImplicitCastExpr 0x55aab89a2058 <col:35> 'float' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aab89a2018 <col:35> 'float' lvalue Var 0x55aab89a1c60 'a' 'float'
    |     `-FloatingLiteral 0x55aab89a2038 <col:40> 'double' 1.000000e+10
    |-BinaryOperator 0x55aab89a2270 <line:72:3, col:18> 'float' '='
    | |-DeclRefExpr 0x55aab89a2140 <col:3> 'float' lvalue Var 0x55aab89a1ce0 'b' 'float'
    | `-CallExpr 0x55aab89a2228 <col:7, col:18> 'float'
    |   |-ImplicitCastExpr 0x55aab89a2210 <col:7> 'float (*)(float, int *)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x55aab89a2160 <col:7> 'float (float, int *)' Function 0x55aab897c2a8 'FREXP' 'float (float, int *)'
    |   |-ImplicitCastExpr 0x55aab89a2258 <col:13> 'float' <LValueToRValue>
    |   | `-DeclRefExpr 0x55aab89a2180 <col:13> 'float' lvalue Var 0x55aab89a1c60 'a' 'float'
    |   `-UnaryOperator 0x55aab89a21c0 <col:16, col:17> 'int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x55aab89a21a0 <col:17> 'int' lvalue Var 0x55aab89a1e18 'e' 'int'
    |-BinaryOperator 0x55aab89a2400 <line:73:3, col:19> 'float' '='
    | |-DeclRefExpr 0x55aab89a2290 <col:3> 'float' lvalue Var 0x55aab89a1d60 'c' 'float'
    | `-CallExpr 0x55aab89a23b8 <col:7, col:19> 'float'
    |   |-ImplicitCastExpr 0x55aab89a23a0 <col:7> 'float (*)(float, int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x55aab89a22b0 <col:7> 'float (float, int)' Function 0x55aab89a1158 'LDEXP' 'float (float, int)'
    |   |-ImplicitCastExpr 0x55aab89a23e8 <col:13> 'float' <LValueToRValue>
    |   | `-DeclRefExpr 0x55aab89a22d0 <col:13> 'float' lvalue Var 0x55aab89a1ce0 'b' 'float'
    |   `-BinaryOperator 0x55aab89a2348 <col:16, col:18> 'int' '/'
    |     |-ImplicitCastExpr 0x55aab89a2330 <col:16> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x55aab89a22f0 <col:16> 'int' lvalue Var 0x55aab89a1e18 'e' 'int'
    |     `-IntegerLiteral 0x55aab89a2310 <col:18> 'int' 2
    |-CallExpr 0x55aab89a2580 <line:75:3, col:41> 'void'
    | |-ImplicitCastExpr 0x55aab89a2568 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aab89a2420 <col:3> 'void (int)' Function 0x55aab897bba0 '__VERIFIER_assert' 'void (int)'
    | `-BinaryOperator 0x55aab89a2548 <col:21, col:38> 'int' '&&'
    |   |-BinaryOperator 0x55aab89a2498 <col:21, col:26> 'int' '>='
    |   | |-ImplicitCastExpr 0x55aab89a2480 <col:21> 'float' <LValueToRValue>
    |   | | `-DeclRefExpr 0x55aab89a2440 <col:21> 'float' lvalue Var 0x55aab89a1d60 'c' 'float'
    |   | `-FloatingLiteral 0x55aab89a2460 <col:26> 'float' 0.000000e+00
    |   `-BinaryOperator 0x55aab89a2528 <col:33, col:38> 'int' '<='
    |     |-ImplicitCastExpr 0x55aab89a2510 <col:33> 'double' <FloatingCast>
    |     | `-ImplicitCastExpr 0x55aab89a24f8 <col:33> 'float' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aab89a24b8 <col:33> 'float' lvalue Var 0x55aab89a1d60 'c' 'float'
    |     `-FloatingLiteral 0x55aab89a24d8 <col:38> 'double' 1.000000e+06
    `-ReturnStmt 0x55aab89a25c8 <line:76:3, col:10>
      `-IntegerLiteral 0x55aab89a25a8 <col:10> 'int' 0
