TranslationUnitDecl 0x55b5052636c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55b505263f88 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55b505263c60 '__int128'
|-TypedefDecl 0x55b505263ff8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55b505263c80 'unsigned __int128'
|-TypedefDecl 0x55b505264300 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55b5052640d0 'struct __NSConstantString_tag'
|   `-Record 0x55b505264050 '__NSConstantString_tag'
|-TypedefDecl 0x55b5052643a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55b505264360 'char *'
|   `-BuiltinType 0x55b505263760 'char'
|-TypedefDecl 0x55b5052a6a60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55b505264640 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55b505264480 'struct __va_list_tag'
|     `-Record 0x55b505264400 '__va_list_tag'
|-FunctionDecl 0x55b5052a6b40 <seq-mthreaded/pals_STARTPALS_Triplicated_true-unreach-call.ufo.UNBOUNDED.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55b5052a6d20 <line:61:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
| `-FullComment 0x55b5052e26e0 <line:3:4, line:56:69>
|   |-ParagraphComment 0x55b5052dfc10 <line:3:4, col:71>
|   | `-TextComment 0x55b5052dfbe0 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x55b5052dfc60 <line:5:1, col:67>
|   | `-TextComment 0x55b5052dfc30 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x55b5052e1e00 <line:7:1, line:9:4>
|   | |-TextComment 0x55b5052e1d80 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x55b5052e1da0 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x55b5052e1dc0 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x55b5052e1ea0 <line:11:1, line:13:12>
|   | |-TextComment 0x55b5052e1e20 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x55b5052e1e40 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x55b5052e1e60 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x55b5052e1f40 <line:15:1, line:17:68>
|   | |-TextComment 0x55b5052e1ec0 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x55b5052e1ee0 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x55b5052e1f00 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x55b5052e2030 <line:19:1, line:23:10>
|   | |-TextComment 0x55b5052e1f60 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x55b5052e1f80 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x55b5052e1fa0 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x55b5052e1fc0 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x55b5052e1fe0 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55b5052e2050 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55b5052e20b0 <col:15, col:23>
|   |   `-TextComment 0x55b5052e2080 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55b5052e2150 <line:25:1, line:27:10>
|   | |-TextComment 0x55b5052e20d0 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x55b5052e20f0 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x55b5052e2110 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55b5052e2170 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55b5052e21d0 <col:15, col:23>
|   |   `-TextComment 0x55b5052e21a0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55b5052e2240 <line:29:1, line:30:15>
|   | |-TextComment 0x55b5052e21f0 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x55b5052e2210 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x55b5052e2330 <line:32:1, line:36:7>
|   | |-TextComment 0x55b5052e2260 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x55b5052e2280 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x55b5052e22a0 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x55b5052e22c0 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x55b5052e22e0 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x55b5052e23d0 <line:38:1, line:40:61>
|   | |-TextComment 0x55b5052e2350 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x55b5052e2370 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x55b5052e2390 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x55b5052e2530 <line:42:1, line:49:37>
|   | |-TextComment 0x55b5052e23f0 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x55b5052e2410 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x55b5052e2430 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x55b5052e2450 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x55b5052e2470 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x55b5052e2490 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x55b5052e24b0 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x55b5052e24d0 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x55b5052e25a0 <line:51:1, line:52:13>
|   | |-TextComment 0x55b5052e2550 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x55b5052e2570 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x55b5052e25f0 <line:54:1, col:10>
|   | `-TextComment 0x55b5052e25c0 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x55b5052e2640 <line:56:2, col:69>
|     `-TextComment 0x55b5052e2610 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x55b5052a6e90 <line:62:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
|-TypedefDecl 0x55b5052a6f40 <line:63:1, col:14> col:14 referenced int8_t 'char'
| `-BuiltinType 0x55b505263760 'char'
|-TypedefDecl 0x55b5052a6fd8 <line:64:1, col:16> col:16 referenced msg_t 'int8_t':'char'
| `-TypedefType 0x55b5052a6fa0 'int8_t' sugar
|   |-Typedef 0x55b5052a6f40 'int8_t'
|   `-BuiltinType 0x55b505263760 'char'
|-TypedefDecl 0x55b5052a7048 <line:65:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x55b5052637c0 'int'
|-FunctionDecl 0x55b5052a7290 <line:66:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55b5052a70d8 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x55b5052a7178 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x55b5052a7460 <line:67:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55b5052a7350 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x55b5052a73c8 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x55b5052a7520 <line:68:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x55b5052a75d0 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x55b5052a75a8 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x55b5052a7588 <col:28> 'int' 1
|-VarDecl 0x55b5052a7608 <line:69:1, col:8> col:8 g1v 'port_t':'int'
|-VarDecl 0x55b5052a7680 <line:70:1, col:8> col:8 used g1v_old 'int8_t':'char'
|-VarDecl 0x55b5052a76f8 <line:71:1, col:8> col:8 used g1v_new 'int8_t':'char'
|-VarDecl 0x55b5052a7770 <line:72:1, col:8> col:8 g2v 'port_t':'int'
|-VarDecl 0x55b5052a77e8 <line:73:1, col:8> col:8 used g2v_old 'int8_t':'char'
|-VarDecl 0x55b5052a7860 <line:74:1, col:8> col:8 used g2v_new 'int8_t':'char'
|-VarDecl 0x55b5052a78d8 <line:75:1, col:8> col:8 g3v 'port_t':'int'
|-VarDecl 0x55b5052a7950 <line:76:1, col:8> col:8 used g3v_old 'int8_t':'char'
|-VarDecl 0x55b5052a79c8 <line:77:1, col:8> col:8 used g3v_new 'int8_t':'char'
|-FunctionDecl 0x55b5052cd570 prev 0x55b5052a6e90 <line:78:1, col:37> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x55b5052cd690 prev 0x55b5052a6d20 <line:79:1, col:37> col:14 used __VERIFIER_nondet_char 'char (void)' extern
|-FunctionDecl 0x55b5052cd810 <line:80:1, col:39> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55b5052cd748 <col:31, col:35> col:35 arg 'int'
|-VarDecl 0x55b5052cd8c8 <line:81:1, col:7> col:7 used gate1Failed '_Bool'
|-VarDecl 0x55b5052cd940 <line:82:1, col:7> col:7 used gate2Failed '_Bool'
|-VarDecl 0x55b5052cd9b8 <line:83:1, col:7> col:7 used gate3Failed '_Bool'
|-VarDecl 0x55b5052cda30 <line:84:1, col:7> col:7 used VALUE1 'msg_t':'char'
|-VarDecl 0x55b5052cdaa8 <line:85:1, col:7> col:7 used VALUE2 'msg_t':'char'
|-VarDecl 0x55b5052cdb20 <line:86:1, col:7> col:7 used VALUE3 'msg_t':'char'
|-FunctionDecl 0x55b5052cdc60 <line:87:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x55b5052cdb98 <col:13, col:19> col:19 arg '_Bool'
|-VarDecl 0x55b5052cdd18 <line:88:1, col:7> col:7 used gate1Failed_History_0 '_Bool'
|-VarDecl 0x55b5052cdd90 <line:89:1, col:7> col:7 used gate1Failed_History_1 '_Bool'
|-VarDecl 0x55b5052cde08 <line:90:1, col:7> col:7 used gate1Failed_History_2 '_Bool'
|-VarDecl 0x55b5052cde80 <line:91:1, col:7> col:7 used gate2Failed_History_0 '_Bool'
|-VarDecl 0x55b5052cdef8 <line:92:1, col:7> col:7 used gate2Failed_History_1 '_Bool'
|-VarDecl 0x55b5052cdf70 <line:93:1, col:7> col:7 used gate2Failed_History_2 '_Bool'
|-VarDecl 0x55b5052cdfe8 <line:94:1, col:7> col:7 used gate3Failed_History_0 '_Bool'
|-VarDecl 0x55b5052ce060 <line:95:1, col:7> col:7 used gate3Failed_History_1 '_Bool'
|-VarDecl 0x55b5052ce0d8 <line:96:1, col:7> col:7 used gate3Failed_History_2 '_Bool'
|-VarDecl 0x55b5052ce150 <line:97:1, col:8> col:8 used votedValue_History_0 'int8_t':'char'
|-VarDecl 0x55b5052ce1c8 <line:98:1, col:8> col:8 used votedValue_History_1 'int8_t':'char'
|-VarDecl 0x55b5052ce240 <line:99:1, col:8> col:8 used votedValue_History_2 'int8_t':'char'
|-FunctionDecl 0x55b5052ce420 <line:100:1, col:59> col:7 used read_history_bool '_Bool (int, int)'
| |-ParmVarDecl 0x55b5052ce2c0 <col:25, col:29> col:29 history_id 'int'
| `-ParmVarDecl 0x55b5052ce340 <col:42, col:46> col:46 historyIndex 'int'
|-FunctionDecl 0x55b5052ce810 <line:101:1, col:60> col:8 used read_history_int8 'int8_t (int, int)'
| |-ParmVarDecl 0x55b5052ce4e8 <col:26, col:30> col:30 history_id 'int'
| `-ParmVarDecl 0x55b5052ce6f8 <col:43, col:47> col:47 historyIndex 'int'
|-FunctionDecl 0x55b5052ce9a8 <line:102:1, line:145:1> line:102:5 used add_history_type 'int (int)'
| |-ParmVarDecl 0x55b5052ce8d8 <col:22, col:26> col:26 used history_id 'int'
| `-CompoundStmt 0x55b5052d1498 <line:103:1, line:145:1>
|   |-DeclStmt 0x55b5052ceac8 <line:104:3, col:18>
|   | `-VarDecl 0x55b5052cea60 <col:3, col:9> col:9 used ini_bool '_Bool'
|   |-DeclStmt 0x55b5052ceb58 <line:105:3, col:18>
|   | `-VarDecl 0x55b5052ceaf0 <col:3, col:10> col:10 used ini_int 'int8_t':'char'
|   |-DeclStmt 0x55b5052cebf0 <line:106:3, col:11>
|   | `-VarDecl 0x55b5052ceb88 <col:3, col:7> col:7 used var 'int'
|   |-DeclStmt 0x55b5052cec88 <line:107:3, col:11>
|   | `-VarDecl 0x55b5052cec20 <col:3, col:7> col:7 used tmp 'int'
|   |-DeclStmt 0x55b5052ced20 <line:108:3, col:15>
|   | `-VarDecl 0x55b5052cecb8 <col:3, col:7> col:7 used tmp___0 'int'
|   |-DeclStmt 0x55b5052cedb8 <line:109:3, col:15>
|   | `-VarDecl 0x55b5052ced50 <col:3, col:7> col:7 used tmp___1 'int'
|   |-DeclStmt 0x55b5052cee50 <line:110:3, col:15>
|   | `-VarDecl 0x55b5052cede8 <col:3, col:7> col:7 used tmp___2 'int'
|   `-CompoundStmt 0x55b5052d1460 <line:112:3, line:144:1>
|     |-BinaryOperator 0x55b5052ceee0 <line:113:3, col:21> '_Bool' '='
|     | |-DeclRefExpr 0x55b5052cee68 <col:3> '_Bool' lvalue Var 0x55b5052cea60 'ini_bool' '_Bool'
|     | `-CStyleCastExpr 0x55b5052ceeb8 <col:14, col:21> '_Bool' <IntegralToBoolean>
|     |   `-IntegerLiteral 0x55b5052cee88 <col:21> 'int' 0
|     |-BinaryOperator 0x55b5052cef90 <line:114:3, col:23> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052cef00 <col:3> 'int8_t':'char' lvalue Var 0x55b5052ceaf0 'ini_int' 'int8_t':'char'
|     | `-CStyleCastExpr 0x55b5052cef68 <col:13, col:23> 'int8_t':'char' <IntegralCast>
|     |   `-UnaryOperator 0x55b5052cef40 <col:22, col:23> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b5052cef20 <col:23> 'int' 2
|     |-BinaryOperator 0x55b5052ceff0 <line:115:3, col:9> 'int' '='
|     | |-DeclRefExpr 0x55b5052cefb0 <col:3> 'int' lvalue Var 0x55b5052ceb88 'var' 'int'
|     | `-IntegerLiteral 0x55b5052cefd0 <col:9> 'int' 0
|     |-WhileStmt 0x55b5052d13f8 <line:116:3, line:142:3>
|     | |-BinaryOperator 0x55b5052cf068 <line:116:10, col:16> 'int' '<'
|     | | |-ImplicitCastExpr 0x55b5052cf050 <col:10> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b5052cf010 <col:10> 'int' lvalue Var 0x55b5052ceb88 'var' 'int'
|     | | `-IntegerLiteral 0x55b5052cf030 <col:16> 'int' 3
|     | `-CompoundStmt 0x55b5052d13d8 <col:19, line:142:3>
|     |   |-IfStmt 0x55b5052d1378 <line:117:5, line:140:5> has_else
|     |   | |-BinaryOperator 0x55b5052cf0e0 <line:117:9, col:23> 'int' '=='
|     |   | | |-ImplicitCastExpr 0x55b5052cf0c8 <col:9> 'int' <LValueToRValue>
|     |   | | | `-DeclRefExpr 0x55b5052cf088 <col:9> 'int' lvalue ParmVar 0x55b5052ce8d8 'history_id' 'int'
|     |   | | `-IntegerLiteral 0x55b5052cf0a8 <col:23> 'int' 0
|     |   | |-CompoundStmt 0x55b5052cf3e0 <col:26, line:122:5>
|     |   | | |-BinaryOperator 0x55b5052cf238 <line:118:7, col:41> 'int' '='
|     |   | | | |-DeclRefExpr 0x55b5052cf100 <col:7> 'int' lvalue Var 0x55b5052cec20 'tmp' 'int'
|     |   | | | `-CStyleCastExpr 0x55b5052cf210 <col:13, col:41> 'int' <IntegralCast>
|     |   | | |   `-CallExpr 0x55b5052cf1c8 <col:19, col:41> '_Bool'
|     |   | | |     |-ImplicitCastExpr 0x55b5052cf1b0 <col:19> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |   | | |     | `-DeclRefExpr 0x55b5052cf120 <col:19> '_Bool (int, int)' Function 0x55b5052ce420 'read_history_bool' '_Bool (int, int)'
|     |   | | |     |-IntegerLiteral 0x55b5052cf140 <col:37> 'int' 0
|     |   | | |     `-IntegerLiteral 0x55b5052cf160 <col:40> 'int' 0
|     |   | | `-IfStmt 0x55b5052cf3c8 <line:119:7, line:121:7>
|     |   | |   |-UnaryOperator 0x55b5052cf348 <line:119:11, col:35> 'int' prefix '!' cannot overflow
|     |   | |   | `-ParenExpr 0x55b5052cf328 <col:13, col:35> 'int'
|     |   | |   |   `-BinaryOperator 0x55b5052cf308 <col:14, col:27> 'int' '=='
|     |   | |   |     |-ImplicitCastExpr 0x55b5052cf2f0 <col:14> 'int' <LValueToRValue>
|     |   | |   |     | `-DeclRefExpr 0x55b5052cf258 <col:14> 'int' lvalue Var 0x55b5052cec20 'tmp' 'int'
|     |   | |   |     `-CStyleCastExpr 0x55b5052cf2c8 <col:21, col:27> 'int' <IntegralCast>
|     |   | |   |       `-ImplicitCastExpr 0x55b5052cf2b0 <col:27> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |   | |   |         `-DeclRefExpr 0x55b5052cf278 <col:27> '_Bool' lvalue Var 0x55b5052cea60 'ini_bool' '_Bool'
|     |   | |   `-CompoundStmt 0x55b5052cf3b0 <col:38, line:121:7>
|     |   | |     `-ReturnStmt 0x55b5052cf3a0 <line:120:9, col:18>
|     |   | |       `-ParenExpr 0x55b5052cf380 <col:16, col:18> 'int'
|     |   | |         `-IntegerLiteral 0x55b5052cf360 <col:17> 'int' 0
|     |   | `-IfStmt 0x55b5052d1350 <line:123:5, line:140:5> has_else
|     |   |   |-BinaryOperator 0x55b5052cf458 <line:123:9, col:23> 'int' '=='
|     |   |   | |-ImplicitCastExpr 0x55b5052cf440 <col:9> 'int' <LValueToRValue>
|     |   |   | | `-DeclRefExpr 0x55b5052cf400 <col:9> 'int' lvalue ParmVar 0x55b5052ce8d8 'history_id' 'int'
|     |   |   | `-IntegerLiteral 0x55b5052cf420 <col:23> 'int' 1
|     |   |   |-CompoundStmt 0x55b5052d0c00 <col:26, line:128:5>
|     |   |   | |-BinaryOperator 0x55b5052cf580 <line:124:7, col:45> 'int' '='
|     |   |   | | |-DeclRefExpr 0x55b5052cf478 <col:7> 'int' lvalue Var 0x55b5052cecb8 'tmp___0' 'int'
|     |   |   | | `-CStyleCastExpr 0x55b5052cf558 <col:17, col:45> 'int' <IntegralCast>
|     |   |   | |   `-CallExpr 0x55b5052cf510 <col:23, col:45> '_Bool'
|     |   |   | |     |-ImplicitCastExpr 0x55b5052cf4f8 <col:23> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |   |   | |     | `-DeclRefExpr 0x55b5052cf498 <col:23> '_Bool (int, int)' Function 0x55b5052ce420 'read_history_bool' '_Bool (int, int)'
|     |   |   | |     |-IntegerLiteral 0x55b5052cf4b8 <col:41> 'int' 1
|     |   |   | |     `-IntegerLiteral 0x55b5052cf4d8 <col:44> 'int' 0
|     |   |   | `-IfStmt 0x55b5052d0be8 <line:125:7, line:127:7>
|     |   |   |   |-UnaryOperator 0x55b5052cf690 <line:125:11, col:39> 'int' prefix '!' cannot overflow
|     |   |   |   | `-ParenExpr 0x55b5052cf670 <col:13, col:39> 'int'
|     |   |   |   |   `-BinaryOperator 0x55b5052cf650 <col:14, col:31> 'int' '=='
|     |   |   |   |     |-ImplicitCastExpr 0x55b5052cf638 <col:14> 'int' <LValueToRValue>
|     |   |   |   |     | `-DeclRefExpr 0x55b5052cf5a0 <col:14> 'int' lvalue Var 0x55b5052cecb8 'tmp___0' 'int'
|     |   |   |   |     `-CStyleCastExpr 0x55b5052cf610 <col:25, col:31> 'int' <IntegralCast>
|     |   |   |   |       `-ImplicitCastExpr 0x55b5052cf5f8 <col:31> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |   |   |   |         `-DeclRefExpr 0x55b5052cf5c0 <col:31> '_Bool' lvalue Var 0x55b5052cea60 'ini_bool' '_Bool'
|     |   |   |   `-CompoundStmt 0x55b5052d0bd0 <col:42, line:127:7>
|     |   |   |     `-ReturnStmt 0x55b5052d0bc0 <line:126:9, col:18>
|     |   |   |       `-ParenExpr 0x55b5052d0ba0 <col:16, col:18> 'int'
|     |   |   |         `-IntegerLiteral 0x55b5052cf6a8 <col:17> 'int' 0
|     |   |   `-IfStmt 0x55b5052d1328 <line:129:5, line:140:5> has_else
|     |   |     |-BinaryOperator 0x55b5052d0c78 <line:129:9, col:23> 'int' '=='
|     |   |     | |-ImplicitCastExpr 0x55b5052d0c60 <col:9> 'int' <LValueToRValue>
|     |   |     | | `-DeclRefExpr 0x55b5052d0c20 <col:9> 'int' lvalue ParmVar 0x55b5052ce8d8 'history_id' 'int'
|     |   |     | `-IntegerLiteral 0x55b5052d0c40 <col:23> 'int' 2
|     |   |     |-CompoundStmt 0x55b5052d0f48 <col:26, line:134:5>
|     |   |     | |-BinaryOperator 0x55b5052d0da0 <line:130:7, col:45> 'int' '='
|     |   |     | | |-DeclRefExpr 0x55b5052d0c98 <col:7> 'int' lvalue Var 0x55b5052ced50 'tmp___1' 'int'
|     |   |     | | `-CStyleCastExpr 0x55b5052d0d78 <col:17, col:45> 'int' <IntegralCast>
|     |   |     | |   `-CallExpr 0x55b5052d0d30 <col:23, col:45> '_Bool'
|     |   |     | |     |-ImplicitCastExpr 0x55b5052d0d18 <col:23> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |   |     | |     | `-DeclRefExpr 0x55b5052d0cb8 <col:23> '_Bool (int, int)' Function 0x55b5052ce420 'read_history_bool' '_Bool (int, int)'
|     |   |     | |     |-IntegerLiteral 0x55b5052d0cd8 <col:41> 'int' 2
|     |   |     | |     `-IntegerLiteral 0x55b5052d0cf8 <col:44> 'int' 0
|     |   |     | `-IfStmt 0x55b5052d0f30 <line:131:7, line:133:7>
|     |   |     |   |-UnaryOperator 0x55b5052d0eb0 <line:131:11, col:39> 'int' prefix '!' cannot overflow
|     |   |     |   | `-ParenExpr 0x55b5052d0e90 <col:13, col:39> 'int'
|     |   |     |   |   `-BinaryOperator 0x55b5052d0e70 <col:14, col:31> 'int' '=='
|     |   |     |   |     |-ImplicitCastExpr 0x55b5052d0e58 <col:14> 'int' <LValueToRValue>
|     |   |     |   |     | `-DeclRefExpr 0x55b5052d0dc0 <col:14> 'int' lvalue Var 0x55b5052ced50 'tmp___1' 'int'
|     |   |     |   |     `-CStyleCastExpr 0x55b5052d0e30 <col:25, col:31> 'int' <IntegralCast>
|     |   |     |   |       `-ImplicitCastExpr 0x55b5052d0e18 <col:31> '_Bool' <LValueToRValue> part_of_explicit_cast
|     |   |     |   |         `-DeclRefExpr 0x55b5052d0de0 <col:31> '_Bool' lvalue Var 0x55b5052cea60 'ini_bool' '_Bool'
|     |   |     |   `-CompoundStmt 0x55b5052d0f18 <col:42, line:133:7>
|     |   |     |     `-ReturnStmt 0x55b5052d0f08 <line:132:9, col:18>
|     |   |     |       `-ParenExpr 0x55b5052d0ee8 <col:16, col:18> 'int'
|     |   |     |         `-IntegerLiteral 0x55b5052d0ec8 <col:17> 'int' 0
|     |   |     `-IfStmt 0x55b5052d1310 <line:135:5, line:140:5>
|     |   |       |-BinaryOperator 0x55b5052d0fc0 <line:135:9, col:23> 'int' '=='
|     |   |       | |-ImplicitCastExpr 0x55b5052d0fa8 <col:9> 'int' <LValueToRValue>
|     |   |       | | `-DeclRefExpr 0x55b5052d0f68 <col:9> 'int' lvalue ParmVar 0x55b5052ce8d8 'history_id' 'int'
|     |   |       | `-IntegerLiteral 0x55b5052d0f88 <col:23> 'int' 3
|     |   |       `-CompoundStmt 0x55b5052d12f0 <col:26, line:140:5>
|     |   |         |-BinaryOperator 0x55b5052d1148 <line:136:7, col:45> 'int' '='
|     |   |         | |-DeclRefExpr 0x55b5052d0fe0 <col:7> 'int' lvalue Var 0x55b5052cede8 'tmp___2' 'int'
|     |   |         | `-CStyleCastExpr 0x55b5052d1120 <col:17, col:45> 'int' <IntegralCast>
|     |   |         |   `-CallExpr 0x55b5052d10d8 <col:23, col:45> 'int8_t':'char'
|     |   |         |     |-ImplicitCastExpr 0x55b5052d10c0 <col:23> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |   |         |     | `-DeclRefExpr 0x55b5052d1000 <col:23> 'int8_t (int, int)' Function 0x55b5052ce810 'read_history_int8' 'int8_t (int, int)'
|     |   |         |     |-IntegerLiteral 0x55b5052d1020 <col:41> 'int' 3
|     |   |         |     `-IntegerLiteral 0x55b5052d1040 <col:44> 'int' 0
|     |   |         `-IfStmt 0x55b5052d12d8 <line:137:7, line:139:7>
|     |   |           |-UnaryOperator 0x55b5052d1258 <line:137:11, col:38> 'int' prefix '!' cannot overflow
|     |   |           | `-ParenExpr 0x55b5052d1238 <col:13, col:38> 'int'
|     |   |           |   `-BinaryOperator 0x55b5052d1218 <col:14, col:31> 'int' '=='
|     |   |           |     |-ImplicitCastExpr 0x55b5052d1200 <col:14> 'int' <LValueToRValue>
|     |   |           |     | `-DeclRefExpr 0x55b5052d1168 <col:14> 'int' lvalue Var 0x55b5052cede8 'tmp___2' 'int'
|     |   |           |     `-CStyleCastExpr 0x55b5052d11d8 <col:25, col:31> 'int' <IntegralCast>
|     |   |           |       `-ImplicitCastExpr 0x55b5052d11c0 <col:31> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |           |         `-DeclRefExpr 0x55b5052d1188 <col:31> 'int8_t':'char' lvalue Var 0x55b5052ceaf0 'ini_int' 'int8_t':'char'
|     |   |           `-CompoundStmt 0x55b5052d12c0 <col:41, line:139:7>
|     |   |             `-ReturnStmt 0x55b5052d12b0 <line:138:9, col:18>
|     |   |               `-ParenExpr 0x55b5052d1290 <col:16, col:18> 'int'
|     |   |                 `-IntegerLiteral 0x55b5052d1270 <col:17> 'int' 0
|     |   `-UnaryOperator 0x55b5052d13c0 <line:141:5, col:9> 'int' postfix '++'
|     |     `-DeclRefExpr 0x55b5052d13a0 <col:5> 'int' lvalue Var 0x55b5052ceb88 'var' 'int'
|     `-ReturnStmt 0x55b5052d1450 <line:143:3, col:12>
|       `-ParenExpr 0x55b5052d1430 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x55b5052d1410 <col:11> 'int' 1
|-FunctionDecl 0x55b5052d1618 prev 0x55b5052ce810 <line:146:1, line:165:1> line:146:8 used read_history_int8 'int8_t (int, int)'
| |-ParmVarDecl 0x55b5052d1500 <col:26, col:30> col:30 used history_id 'int'
| |-ParmVarDecl 0x55b5052d1580 <col:43, col:47> col:47 used historyIndex 'int'
| `-CompoundStmt 0x55b5052d2328 <line:147:1, line:165:1>
|   `-CompoundStmt 0x55b5052d2308 <line:150:3, line:164:1>
|     |-IfStmt 0x55b5052d1b18 <line:151:3, line:162:3> has_else
|     | |-BinaryOperator 0x55b5052d1720 <line:151:7, col:21> 'int' '=='
|     | | |-ImplicitCastExpr 0x55b5052d1708 <col:7> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b5052d16c8 <col:7> 'int' lvalue ParmVar 0x55b5052d1500 'history_id' 'int'
|     | | `-IntegerLiteral 0x55b5052d16e8 <col:21> 'int' 3
|     | |-CompoundStmt 0x55b5052d1a00 <col:24, line:160:3>
|     | | `-IfStmt 0x55b5052d19d8 <line:152:5, line:159:5> has_else
|     | |   |-BinaryOperator 0x55b5052d1798 <line:152:9, col:25> 'int' '=='
|     | |   | |-ImplicitCastExpr 0x55b5052d1780 <col:9> 'int' <LValueToRValue>
|     | |   | | `-DeclRefExpr 0x55b5052d1740 <col:9> 'int' lvalue ParmVar 0x55b5052d1580 'historyIndex' 'int'
|     | |   | `-IntegerLiteral 0x55b5052d1760 <col:25> 'int' 0
|     | |   |-CompoundStmt 0x55b5052d1820 <col:28, line:154:5>
|     | |   | `-ReturnStmt 0x55b5052d1810 <line:153:7, col:35>
|     | |   |   `-ImplicitCastExpr 0x55b5052d17f8 <col:14, col:35> 'int8_t':'char' <LValueToRValue>
|     | |   |     `-ParenExpr 0x55b5052d17d8 <col:14, col:35> 'int8_t':'char' lvalue
|     | |   |       `-DeclRefExpr 0x55b5052d17b8 <col:15> 'int8_t':'char' lvalue Var 0x55b5052ce150 'votedValue_History_0' 'int8_t':'char'
|     | |   `-IfStmt 0x55b5052d19b0 <line:155:5, line:159:5> has_else
|     | |     |-BinaryOperator 0x55b5052d1890 <line:155:9, col:25> 'int' '=='
|     | |     | |-ImplicitCastExpr 0x55b5052d1878 <col:9> 'int' <LValueToRValue>
|     | |     | | `-DeclRefExpr 0x55b5052d1838 <col:9> 'int' lvalue ParmVar 0x55b5052d1580 'historyIndex' 'int'
|     | |     | `-IntegerLiteral 0x55b5052d1858 <col:25> 'int' 1
|     | |     |-CompoundStmt 0x55b5052d1918 <col:28, line:157:5>
|     | |     | `-ReturnStmt 0x55b5052d1908 <line:156:7, col:35>
|     | |     |   `-ImplicitCastExpr 0x55b5052d18f0 <col:14, col:35> 'int8_t':'char' <LValueToRValue>
|     | |     |     `-ParenExpr 0x55b5052d18d0 <col:14, col:35> 'int8_t':'char' lvalue
|     | |     |       `-DeclRefExpr 0x55b5052d18b0 <col:15> 'int8_t':'char' lvalue Var 0x55b5052ce1c8 'votedValue_History_1' 'int8_t':'char'
|     | |     `-CompoundStmt 0x55b5052d1998 <line:157:12, line:159:5>
|     | |       `-ReturnStmt 0x55b5052d1988 <line:158:7, col:35>
|     | |         `-ImplicitCastExpr 0x55b5052d1970 <col:14, col:35> 'int8_t':'char' <LValueToRValue>
|     | |           `-ParenExpr 0x55b5052d1950 <col:14, col:35> 'int8_t':'char' lvalue
|     | |             `-DeclRefExpr 0x55b5052d1930 <col:15> 'int8_t':'char' lvalue Var 0x55b5052ce240 'votedValue_History_2' 'int8_t':'char'
|     | `-CompoundStmt 0x55b5052d1b00 <line:160:10, line:162:3>
|     |   `-CallExpr 0x55b5052d1ad8 <line:161:5, col:20> 'void'
|     |     |-ImplicitCastExpr 0x55b5052d1ac0 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55b5052d1a18 <col:5> 'void (_Bool)' Function 0x55b5052cdc60 'assert' 'void (_Bool)'
|     |     `-CStyleCastExpr 0x55b5052d1a68 <col:12, col:19> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55b5052d1a38 <col:19> 'int' 0
|     `-ReturnStmt 0x55b5052d22f8 <line:163:3, col:22>
|       `-ParenExpr 0x55b5052d22d8 <col:10, col:22> 'int8_t':'char'
|         `-CStyleCastExpr 0x55b5052d22b0 <col:11, col:21> 'int8_t':'char' <IntegralCast>
|           `-UnaryOperator 0x55b5052d1b60 <col:20, col:21> 'int' prefix '-'
|             `-IntegerLiteral 0x55b5052d1b40 <col:21> 'int' 2
|-FunctionDecl 0x55b5052d2470 prev 0x55b5052ce420 <line:166:1, line:205:1> line:166:7 used read_history_bool '_Bool (int, int)'
| |-ParmVarDecl 0x55b5052d2358 <col:25, col:29> col:29 used history_id 'int'
| |-ParmVarDecl 0x55b5052d23d8 <col:42, col:46> col:46 used historyIndex 'int'
| `-CompoundStmt 0x55b5052d3100 <line:167:1, line:205:1>
|   `-CompoundStmt 0x55b5052d30e0 <line:170:3, line:204:1>
|     |-IfStmt 0x55b5052d3030 <line:171:3, line:202:3> has_else
|     | |-BinaryOperator 0x55b5052d2578 <line:171:7, col:21> 'int' '=='
|     | | |-ImplicitCastExpr 0x55b5052d2560 <col:7> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b5052d2520 <col:7> 'int' lvalue ParmVar 0x55b5052d2358 'history_id' 'int'
|     | | `-IntegerLiteral 0x55b5052d2540 <col:21> 'int' 0
|     | |-CompoundStmt 0x55b5052d2858 <col:24, line:180:3>
|     | | `-IfStmt 0x55b5052d2830 <line:172:5, line:179:5> has_else
|     | |   |-BinaryOperator 0x55b5052d25f0 <line:172:9, col:25> 'int' '=='
|     | |   | |-ImplicitCastExpr 0x55b5052d25d8 <col:9> 'int' <LValueToRValue>
|     | |   | | `-DeclRefExpr 0x55b5052d2598 <col:9> 'int' lvalue ParmVar 0x55b5052d23d8 'historyIndex' 'int'
|     | |   | `-IntegerLiteral 0x55b5052d25b8 <col:25> 'int' 0
|     | |   |-CompoundStmt 0x55b5052d2678 <col:28, line:174:5>
|     | |   | `-ReturnStmt 0x55b5052d2668 <line:173:7, col:36>
|     | |   |   `-ImplicitCastExpr 0x55b5052d2650 <col:14, col:36> '_Bool' <LValueToRValue>
|     | |   |     `-ParenExpr 0x55b5052d2630 <col:14, col:36> '_Bool' lvalue
|     | |   |       `-DeclRefExpr 0x55b5052d2610 <col:15> '_Bool' lvalue Var 0x55b5052cdd18 'gate1Failed_History_0' '_Bool'
|     | |   `-IfStmt 0x55b5052d2808 <line:175:5, line:179:5> has_else
|     | |     |-BinaryOperator 0x55b5052d26e8 <line:175:9, col:25> 'int' '=='
|     | |     | |-ImplicitCastExpr 0x55b5052d26d0 <col:9> 'int' <LValueToRValue>
|     | |     | | `-DeclRefExpr 0x55b5052d2690 <col:9> 'int' lvalue ParmVar 0x55b5052d23d8 'historyIndex' 'int'
|     | |     | `-IntegerLiteral 0x55b5052d26b0 <col:25> 'int' 1
|     | |     |-CompoundStmt 0x55b5052d2770 <col:28, line:177:5>
|     | |     | `-ReturnStmt 0x55b5052d2760 <line:176:7, col:36>
|     | |     |   `-ImplicitCastExpr 0x55b5052d2748 <col:14, col:36> '_Bool' <LValueToRValue>
|     | |     |     `-ParenExpr 0x55b5052d2728 <col:14, col:36> '_Bool' lvalue
|     | |     |       `-DeclRefExpr 0x55b5052d2708 <col:15> '_Bool' lvalue Var 0x55b5052cdd90 'gate1Failed_History_1' '_Bool'
|     | |     `-CompoundStmt 0x55b5052d27f0 <line:177:12, line:179:5>
|     | |       `-ReturnStmt 0x55b5052d27e0 <line:178:7, col:36>
|     | |         `-ImplicitCastExpr 0x55b5052d27c8 <col:14, col:36> '_Bool' <LValueToRValue>
|     | |           `-ParenExpr 0x55b5052d27a8 <col:14, col:36> '_Bool' lvalue
|     | |             `-DeclRefExpr 0x55b5052d2788 <col:15> '_Bool' lvalue Var 0x55b5052cde08 'gate1Failed_History_2' '_Bool'
|     | `-IfStmt 0x55b5052d3008 <line:181:3, line:202:3> has_else
|     |   |-BinaryOperator 0x55b5052d28c8 <line:181:7, col:21> 'int' '=='
|     |   | |-ImplicitCastExpr 0x55b5052d28b0 <col:7> 'int' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55b5052d2870 <col:7> 'int' lvalue ParmVar 0x55b5052d2358 'history_id' 'int'
|     |   | `-IntegerLiteral 0x55b5052d2890 <col:21> 'int' 1
|     |   |-CompoundStmt 0x55b5052d2ba8 <col:24, line:190:3>
|     |   | `-IfStmt 0x55b5052d2b80 <line:182:5, line:189:5> has_else
|     |   |   |-BinaryOperator 0x55b5052d2940 <line:182:9, col:25> 'int' '=='
|     |   |   | |-ImplicitCastExpr 0x55b5052d2928 <col:9> 'int' <LValueToRValue>
|     |   |   | | `-DeclRefExpr 0x55b5052d28e8 <col:9> 'int' lvalue ParmVar 0x55b5052d23d8 'historyIndex' 'int'
|     |   |   | `-IntegerLiteral 0x55b5052d2908 <col:25> 'int' 0
|     |   |   |-CompoundStmt 0x55b5052d29c8 <col:28, line:184:5>
|     |   |   | `-ReturnStmt 0x55b5052d29b8 <line:183:7, col:36>
|     |   |   |   `-ImplicitCastExpr 0x55b5052d29a0 <col:14, col:36> '_Bool' <LValueToRValue>
|     |   |   |     `-ParenExpr 0x55b5052d2980 <col:14, col:36> '_Bool' lvalue
|     |   |   |       `-DeclRefExpr 0x55b5052d2960 <col:15> '_Bool' lvalue Var 0x55b5052cde80 'gate2Failed_History_0' '_Bool'
|     |   |   `-IfStmt 0x55b5052d2b58 <line:185:5, line:189:5> has_else
|     |   |     |-BinaryOperator 0x55b5052d2a38 <line:185:9, col:25> 'int' '=='
|     |   |     | |-ImplicitCastExpr 0x55b5052d2a20 <col:9> 'int' <LValueToRValue>
|     |   |     | | `-DeclRefExpr 0x55b5052d29e0 <col:9> 'int' lvalue ParmVar 0x55b5052d23d8 'historyIndex' 'int'
|     |   |     | `-IntegerLiteral 0x55b5052d2a00 <col:25> 'int' 1
|     |   |     |-CompoundStmt 0x55b5052d2ac0 <col:28, line:187:5>
|     |   |     | `-ReturnStmt 0x55b5052d2ab0 <line:186:7, col:36>
|     |   |     |   `-ImplicitCastExpr 0x55b5052d2a98 <col:14, col:36> '_Bool' <LValueToRValue>
|     |   |     |     `-ParenExpr 0x55b5052d2a78 <col:14, col:36> '_Bool' lvalue
|     |   |     |       `-DeclRefExpr 0x55b5052d2a58 <col:15> '_Bool' lvalue Var 0x55b5052cdef8 'gate2Failed_History_1' '_Bool'
|     |   |     `-CompoundStmt 0x55b5052d2b40 <line:187:12, line:189:5>
|     |   |       `-ReturnStmt 0x55b5052d2b30 <line:188:7, col:36>
|     |   |         `-ImplicitCastExpr 0x55b5052d2b18 <col:14, col:36> '_Bool' <LValueToRValue>
|     |   |           `-ParenExpr 0x55b5052d2af8 <col:14, col:36> '_Bool' lvalue
|     |   |             `-DeclRefExpr 0x55b5052d2ad8 <col:15> '_Bool' lvalue Var 0x55b5052cdf70 'gate2Failed_History_2' '_Bool'
|     |   `-IfStmt 0x55b5052d2fe0 <line:191:3, line:202:3> has_else
|     |     |-BinaryOperator 0x55b5052d2c18 <line:191:7, col:21> 'int' '=='
|     |     | |-ImplicitCastExpr 0x55b5052d2c00 <col:7> 'int' <LValueToRValue>
|     |     | | `-DeclRefExpr 0x55b5052d2bc0 <col:7> 'int' lvalue ParmVar 0x55b5052d2358 'history_id' 'int'
|     |     | `-IntegerLiteral 0x55b5052d2be0 <col:21> 'int' 2
|     |     |-CompoundStmt 0x55b5052d2ef8 <col:24, line:200:3>
|     |     | `-IfStmt 0x55b5052d2ed0 <line:192:5, line:199:5> has_else
|     |     |   |-BinaryOperator 0x55b5052d2c90 <line:192:9, col:25> 'int' '=='
|     |     |   | |-ImplicitCastExpr 0x55b5052d2c78 <col:9> 'int' <LValueToRValue>
|     |     |   | | `-DeclRefExpr 0x55b5052d2c38 <col:9> 'int' lvalue ParmVar 0x55b5052d23d8 'historyIndex' 'int'
|     |     |   | `-IntegerLiteral 0x55b5052d2c58 <col:25> 'int' 0
|     |     |   |-CompoundStmt 0x55b5052d2d18 <col:28, line:194:5>
|     |     |   | `-ReturnStmt 0x55b5052d2d08 <line:193:7, col:36>
|     |     |   |   `-ImplicitCastExpr 0x55b5052d2cf0 <col:14, col:36> '_Bool' <LValueToRValue>
|     |     |   |     `-ParenExpr 0x55b5052d2cd0 <col:14, col:36> '_Bool' lvalue
|     |     |   |       `-DeclRefExpr 0x55b5052d2cb0 <col:15> '_Bool' lvalue Var 0x55b5052cdfe8 'gate3Failed_History_0' '_Bool'
|     |     |   `-IfStmt 0x55b5052d2ea8 <line:195:5, line:199:5> has_else
|     |     |     |-BinaryOperator 0x55b5052d2d88 <line:195:9, col:25> 'int' '=='
|     |     |     | |-ImplicitCastExpr 0x55b5052d2d70 <col:9> 'int' <LValueToRValue>
|     |     |     | | `-DeclRefExpr 0x55b5052d2d30 <col:9> 'int' lvalue ParmVar 0x55b5052d23d8 'historyIndex' 'int'
|     |     |     | `-IntegerLiteral 0x55b5052d2d50 <col:25> 'int' 1
|     |     |     |-CompoundStmt 0x55b5052d2e10 <col:28, line:197:5>
|     |     |     | `-ReturnStmt 0x55b5052d2e00 <line:196:7, col:36>
|     |     |     |   `-ImplicitCastExpr 0x55b5052d2de8 <col:14, col:36> '_Bool' <LValueToRValue>
|     |     |     |     `-ParenExpr 0x55b5052d2dc8 <col:14, col:36> '_Bool' lvalue
|     |     |     |       `-DeclRefExpr 0x55b5052d2da8 <col:15> '_Bool' lvalue Var 0x55b5052ce060 'gate3Failed_History_1' '_Bool'
|     |     |     `-CompoundStmt 0x55b5052d2e90 <line:197:12, line:199:5>
|     |     |       `-ReturnStmt 0x55b5052d2e80 <line:198:7, col:36>
|     |     |         `-ImplicitCastExpr 0x55b5052d2e68 <col:14, col:36> '_Bool' <LValueToRValue>
|     |     |           `-ParenExpr 0x55b5052d2e48 <col:14, col:36> '_Bool' lvalue
|     |     |             `-DeclRefExpr 0x55b5052d2e28 <col:15> '_Bool' lvalue Var 0x55b5052ce0d8 'gate3Failed_History_2' '_Bool'
|     |     `-CompoundStmt 0x55b5052d2fc8 <line:200:10, line:202:3>
|     |       `-CallExpr 0x55b5052d2fa0 <line:201:5, col:20> 'void'
|     |         |-ImplicitCastExpr 0x55b5052d2f88 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x55b5052d2f10 <col:5> 'void (_Bool)' Function 0x55b5052cdc60 'assert' 'void (_Bool)'
|     |         `-CStyleCastExpr 0x55b5052d2f60 <col:12, col:19> '_Bool' <IntegralToBoolean>
|     |           `-IntegerLiteral 0x55b5052d2f30 <col:19> 'int' 0
|     `-ReturnStmt 0x55b5052d30d0 <line:203:3, col:19>
|       `-ParenExpr 0x55b5052d30b0 <col:10, col:19> '_Bool'
|         `-CStyleCastExpr 0x55b5052d3088 <col:11, col:18> '_Bool' <IntegralToBoolean>
|           `-IntegerLiteral 0x55b5052d3058 <col:18> 'int' 0
|-FunctionDecl 0x55b5052d36d0 <line:206:1, line:220:1> line:206:6 used write_history_int8 'void (int, int8_t)'
| |-ParmVarDecl 0x55b5052d3130 <col:25, col:29> col:29 used history_id 'int'
| |-ParmVarDecl 0x55b5052d31a8 <col:42, col:49> col:49 used buf 'int8_t':'char'
| `-CompoundStmt 0x55b5052d3ab0 <line:207:1, line:220:1>
|   `-CompoundStmt 0x55b5052d3a90 <line:210:3, line:219:1>
|     |-IfStmt 0x55b5052d3a58 <line:211:3, line:217:3> has_else
|     | |-BinaryOperator 0x55b5052d37d8 <line:211:7, col:21> 'int' '=='
|     | | |-ImplicitCastExpr 0x55b5052d37c0 <col:7> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b5052d3780 <col:7> 'int' lvalue ParmVar 0x55b5052d3130 'history_id' 'int'
|     | | `-IntegerLiteral 0x55b5052d37a0 <col:21> 'int' 3
|     | |-CompoundStmt 0x55b5052d3960 <col:24, line:215:3>
|     | | |-BinaryOperator 0x55b5052d3850 <line:212:5, col:28> 'int8_t':'char' '='
|     | | | |-DeclRefExpr 0x55b5052d37f8 <col:5> 'int8_t':'char' lvalue Var 0x55b5052ce240 'votedValue_History_2' 'int8_t':'char'
|     | | | `-ImplicitCastExpr 0x55b5052d3838 <col:28> 'int8_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55b5052d3818 <col:28> 'int8_t':'char' lvalue Var 0x55b5052ce1c8 'votedValue_History_1' 'int8_t':'char'
|     | | |-BinaryOperator 0x55b5052d38c8 <line:213:5, col:28> 'int8_t':'char' '='
|     | | | |-DeclRefExpr 0x55b5052d3870 <col:5> 'int8_t':'char' lvalue Var 0x55b5052ce1c8 'votedValue_History_1' 'int8_t':'char'
|     | | | `-ImplicitCastExpr 0x55b5052d38b0 <col:28> 'int8_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55b5052d3890 <col:28> 'int8_t':'char' lvalue Var 0x55b5052ce150 'votedValue_History_0' 'int8_t':'char'
|     | | `-BinaryOperator 0x55b5052d3940 <line:214:5, col:28> 'int8_t':'char' '='
|     | |   |-DeclRefExpr 0x55b5052d38e8 <col:5> 'int8_t':'char' lvalue Var 0x55b5052ce150 'votedValue_History_0' 'int8_t':'char'
|     | |   `-ImplicitCastExpr 0x55b5052d3928 <col:28> 'int8_t':'char' <LValueToRValue>
|     | |     `-DeclRefExpr 0x55b5052d3908 <col:28> 'int8_t':'char' lvalue ParmVar 0x55b5052d31a8 'buf' 'int8_t':'char'
|     | `-CompoundStmt 0x55b5052d3a40 <line:215:10, line:217:3>
|     |   `-CallExpr 0x55b5052d3a18 <line:216:5, col:20> 'void'
|     |     |-ImplicitCastExpr 0x55b5052d3a00 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x55b5052d3988 <col:5> 'void (_Bool)' Function 0x55b5052cdc60 'assert' 'void (_Bool)'
|     |     `-CStyleCastExpr 0x55b5052d39d8 <col:12, col:19> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55b5052d39a8 <col:19> 'int' 0
|     `-ReturnStmt 0x55b5052d3a80 <line:218:3>
|-FunctionDecl 0x55b5052d3c30 <line:221:1, line:245:1> line:221:6 used write_history_bool 'void (int, _Bool)'
| |-ParmVarDecl 0x55b5052d3ae0 <col:25, col:29> col:29 used history_id 'int'
| |-ParmVarDecl 0x55b5052d3b58 <col:42, col:48> col:48 used buf '_Bool'
| `-CompoundStmt 0x55b5052d4470 <line:222:1, line:245:1>
|   `-CompoundStmt 0x55b5052d4450 <line:225:3, line:244:1>
|     |-IfStmt 0x55b5052d4418 <line:226:3, line:242:3> has_else
|     | |-BinaryOperator 0x55b5052d3d38 <line:226:7, col:21> 'int' '=='
|     | | |-ImplicitCastExpr 0x55b5052d3d20 <col:7> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b5052d3ce0 <col:7> 'int' lvalue ParmVar 0x55b5052d3ae0 'history_id' 'int'
|     | | `-IntegerLiteral 0x55b5052d3d00 <col:21> 'int' 0
|     | |-CompoundStmt 0x55b5052d3ec0 <col:24, line:230:3>
|     | | |-BinaryOperator 0x55b5052d3db0 <line:227:5, col:29> '_Bool' '='
|     | | | |-DeclRefExpr 0x55b5052d3d58 <col:5> '_Bool' lvalue Var 0x55b5052cde08 'gate1Failed_History_2' '_Bool'
|     | | | `-ImplicitCastExpr 0x55b5052d3d98 <col:29> '_Bool' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55b5052d3d78 <col:29> '_Bool' lvalue Var 0x55b5052cdd90 'gate1Failed_History_1' '_Bool'
|     | | |-BinaryOperator 0x55b5052d3e28 <line:228:5, col:29> '_Bool' '='
|     | | | |-DeclRefExpr 0x55b5052d3dd0 <col:5> '_Bool' lvalue Var 0x55b5052cdd90 'gate1Failed_History_1' '_Bool'
|     | | | `-ImplicitCastExpr 0x55b5052d3e10 <col:29> '_Bool' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55b5052d3df0 <col:29> '_Bool' lvalue Var 0x55b5052cdd18 'gate1Failed_History_0' '_Bool'
|     | | `-BinaryOperator 0x55b5052d3ea0 <line:229:5, col:29> '_Bool' '='
|     | |   |-DeclRefExpr 0x55b5052d3e48 <col:5> '_Bool' lvalue Var 0x55b5052cdd18 'gate1Failed_History_0' '_Bool'
|     | |   `-ImplicitCastExpr 0x55b5052d3e88 <col:29> '_Bool' <LValueToRValue>
|     | |     `-DeclRefExpr 0x55b5052d3e68 <col:29> '_Bool' lvalue ParmVar 0x55b5052d3b58 'buf' '_Bool'
|     | `-IfStmt 0x55b5052d43f0 <line:231:3, line:242:3> has_else
|     |   |-BinaryOperator 0x55b5052d3f40 <line:231:7, col:21> 'int' '=='
|     |   | |-ImplicitCastExpr 0x55b5052d3f28 <col:7> 'int' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55b5052d3ee8 <col:7> 'int' lvalue ParmVar 0x55b5052d3ae0 'history_id' 'int'
|     |   | `-IntegerLiteral 0x55b5052d3f08 <col:21> 'int' 1
|     |   |-CompoundStmt 0x55b5052d40c8 <col:24, line:235:3>
|     |   | |-BinaryOperator 0x55b5052d3fb8 <line:232:5, col:29> '_Bool' '='
|     |   | | |-DeclRefExpr 0x55b5052d3f60 <col:5> '_Bool' lvalue Var 0x55b5052cdf70 'gate2Failed_History_2' '_Bool'
|     |   | | `-ImplicitCastExpr 0x55b5052d3fa0 <col:29> '_Bool' <LValueToRValue>
|     |   | |   `-DeclRefExpr 0x55b5052d3f80 <col:29> '_Bool' lvalue Var 0x55b5052cdef8 'gate2Failed_History_1' '_Bool'
|     |   | |-BinaryOperator 0x55b5052d4030 <line:233:5, col:29> '_Bool' '='
|     |   | | |-DeclRefExpr 0x55b5052d3fd8 <col:5> '_Bool' lvalue Var 0x55b5052cdef8 'gate2Failed_History_1' '_Bool'
|     |   | | `-ImplicitCastExpr 0x55b5052d4018 <col:29> '_Bool' <LValueToRValue>
|     |   | |   `-DeclRefExpr 0x55b5052d3ff8 <col:29> '_Bool' lvalue Var 0x55b5052cde80 'gate2Failed_History_0' '_Bool'
|     |   | `-BinaryOperator 0x55b5052d40a8 <line:234:5, col:29> '_Bool' '='
|     |   |   |-DeclRefExpr 0x55b5052d4050 <col:5> '_Bool' lvalue Var 0x55b5052cde80 'gate2Failed_History_0' '_Bool'
|     |   |   `-ImplicitCastExpr 0x55b5052d4090 <col:29> '_Bool' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x55b5052d4070 <col:29> '_Bool' lvalue ParmVar 0x55b5052d3b58 'buf' '_Bool'
|     |   `-IfStmt 0x55b5052d43c8 <line:236:3, line:242:3> has_else
|     |     |-BinaryOperator 0x55b5052d4148 <line:236:7, col:21> 'int' '=='
|     |     | |-ImplicitCastExpr 0x55b5052d4130 <col:7> 'int' <LValueToRValue>
|     |     | | `-DeclRefExpr 0x55b5052d40f0 <col:7> 'int' lvalue ParmVar 0x55b5052d3ae0 'history_id' 'int'
|     |     | `-IntegerLiteral 0x55b5052d4110 <col:21> 'int' 2
|     |     |-CompoundStmt 0x55b5052d42d0 <col:24, line:240:3>
|     |     | |-BinaryOperator 0x55b5052d41c0 <line:237:5, col:29> '_Bool' '='
|     |     | | |-DeclRefExpr 0x55b5052d4168 <col:5> '_Bool' lvalue Var 0x55b5052ce0d8 'gate3Failed_History_2' '_Bool'
|     |     | | `-ImplicitCastExpr 0x55b5052d41a8 <col:29> '_Bool' <LValueToRValue>
|     |     | |   `-DeclRefExpr 0x55b5052d4188 <col:29> '_Bool' lvalue Var 0x55b5052ce060 'gate3Failed_History_1' '_Bool'
|     |     | |-BinaryOperator 0x55b5052d4238 <line:238:5, col:29> '_Bool' '='
|     |     | | |-DeclRefExpr 0x55b5052d41e0 <col:5> '_Bool' lvalue Var 0x55b5052ce060 'gate3Failed_History_1' '_Bool'
|     |     | | `-ImplicitCastExpr 0x55b5052d4220 <col:29> '_Bool' <LValueToRValue>
|     |     | |   `-DeclRefExpr 0x55b5052d4200 <col:29> '_Bool' lvalue Var 0x55b5052cdfe8 'gate3Failed_History_0' '_Bool'
|     |     | `-BinaryOperator 0x55b5052d42b0 <line:239:5, col:29> '_Bool' '='
|     |     |   |-DeclRefExpr 0x55b5052d4258 <col:5> '_Bool' lvalue Var 0x55b5052cdfe8 'gate3Failed_History_0' '_Bool'
|     |     |   `-ImplicitCastExpr 0x55b5052d4298 <col:29> '_Bool' <LValueToRValue>
|     |     |     `-DeclRefExpr 0x55b5052d4278 <col:29> '_Bool' lvalue ParmVar 0x55b5052d3b58 'buf' '_Bool'
|     |     `-CompoundStmt 0x55b5052d43b0 <line:240:10, line:242:3>
|     |       `-CallExpr 0x55b5052d4388 <line:241:5, col:20> 'void'
|     |         |-ImplicitCastExpr 0x55b5052d4370 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x55b5052d42f8 <col:5> 'void (_Bool)' Function 0x55b5052cdc60 'assert' 'void (_Bool)'
|     |         `-CStyleCastExpr 0x55b5052d4348 <col:12, col:19> '_Bool' <IntegralToBoolean>
|     |           `-IntegerLiteral 0x55b5052d4318 <col:19> 'int' 0
|     `-ReturnStmt 0x55b5052d4440 <line:243:3>
|-FunctionDecl 0x55b5052d4558 <line:246:1, line:272:1> line:246:5 used init 'int (void)'
| `-CompoundStmt 0x55b5052d4fa8 <line:247:1, line:272:1>
|   |-DeclStmt 0x55b5052d4678 <line:248:3, col:11>
|   | `-VarDecl 0x55b5052d4610 <col:3, col:7> col:7 used tmp 'int'
|   |-DeclStmt 0x55b5052d4748 <line:249:3, col:15>
|   | `-VarDecl 0x55b5052d46e0 <col:3, col:7> col:7 used tmp___0 'int'
|   |-DeclStmt 0x55b5052d47e0 <line:250:3, col:15>
|   | `-VarDecl 0x55b5052d4778 <col:3, col:7> col:7 used tmp___1 'int'
|   |-DeclStmt 0x55b5052d4878 <line:251:3, col:15>
|   | `-VarDecl 0x55b5052d4810 <col:3, col:7> col:7 used tmp___2 'int'
|   `-CompoundStmt 0x55b5052d4f50 <line:253:3, line:271:1>
|     |-BinaryOperator 0x55b5052d4960 <line:254:3, col:27> 'int' '='
|     | |-DeclRefExpr 0x55b5052d4890 <col:3> 'int' lvalue Var 0x55b5052d4610 'tmp' 'int'
|     | `-CallExpr 0x55b5052d4938 <col:9, col:27> 'int'
|     |   |-ImplicitCastExpr 0x55b5052d4920 <col:9> 'int (*)(int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b5052d48b0 <col:9> 'int (int)' Function 0x55b5052ce9a8 'add_history_type' 'int (int)'
|     |   `-IntegerLiteral 0x55b5052d48d0 <col:26> 'int' 0
|     |-IfStmt 0x55b5052d4a38 <line:255:3, line:257:3>
|     | |-UnaryOperator 0x55b5052d49b8 <line:255:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b5052d49a0 <col:9> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b5052d4980 <col:9> 'int' lvalue Var 0x55b5052d4610 'tmp' 'int'
|     | `-CompoundStmt 0x55b5052d4a20 <col:14, line:257:3>
|     |   `-ReturnStmt 0x55b5052d4a10 <line:256:5, col:14>
|     |     `-ParenExpr 0x55b5052d49f0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b5052d49d0 <col:13> 'int' 0
|     |-BinaryOperator 0x55b5052d4af0 <line:258:3, col:31> 'int' '='
|     | |-DeclRefExpr 0x55b5052d4a50 <col:3> 'int' lvalue Var 0x55b5052d46e0 'tmp___0' 'int'
|     | `-CallExpr 0x55b5052d4ac8 <col:13, col:31> 'int'
|     |   |-ImplicitCastExpr 0x55b5052d4ab0 <col:13> 'int (*)(int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b5052d4a70 <col:13> 'int (int)' Function 0x55b5052ce9a8 'add_history_type' 'int (int)'
|     |   `-IntegerLiteral 0x55b5052d4a90 <col:30> 'int' 1
|     |-IfStmt 0x55b5052d4bc8 <line:259:3, line:261:3>
|     | |-UnaryOperator 0x55b5052d4b48 <line:259:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b5052d4b30 <col:9> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b5052d4b10 <col:9> 'int' lvalue Var 0x55b5052d46e0 'tmp___0' 'int'
|     | `-CompoundStmt 0x55b5052d4bb0 <col:18, line:261:3>
|     |   `-ReturnStmt 0x55b5052d4ba0 <line:260:5, col:14>
|     |     `-ParenExpr 0x55b5052d4b80 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b5052d4b60 <col:13> 'int' 0
|     |-BinaryOperator 0x55b5052d4c80 <line:262:3, col:31> 'int' '='
|     | |-DeclRefExpr 0x55b5052d4be0 <col:3> 'int' lvalue Var 0x55b5052d4778 'tmp___1' 'int'
|     | `-CallExpr 0x55b5052d4c58 <col:13, col:31> 'int'
|     |   |-ImplicitCastExpr 0x55b5052d4c40 <col:13> 'int (*)(int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b5052d4c00 <col:13> 'int (int)' Function 0x55b5052ce9a8 'add_history_type' 'int (int)'
|     |   `-IntegerLiteral 0x55b5052d4c20 <col:30> 'int' 2
|     |-IfStmt 0x55b5052d4d58 <line:263:3, line:265:3>
|     | |-UnaryOperator 0x55b5052d4cd8 <line:263:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b5052d4cc0 <col:9> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b5052d4ca0 <col:9> 'int' lvalue Var 0x55b5052d4778 'tmp___1' 'int'
|     | `-CompoundStmt 0x55b5052d4d40 <col:18, line:265:3>
|     |   `-ReturnStmt 0x55b5052d4d30 <line:264:5, col:14>
|     |     `-ParenExpr 0x55b5052d4d10 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b5052d4cf0 <col:13> 'int' 0
|     |-BinaryOperator 0x55b5052d4e10 <line:266:3, col:31> 'int' '='
|     | |-DeclRefExpr 0x55b5052d4d70 <col:3> 'int' lvalue Var 0x55b5052d4810 'tmp___2' 'int'
|     | `-CallExpr 0x55b5052d4de8 <col:13, col:31> 'int'
|     |   |-ImplicitCastExpr 0x55b5052d4dd0 <col:13> 'int (*)(int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b5052d4d90 <col:13> 'int (int)' Function 0x55b5052ce9a8 'add_history_type' 'int (int)'
|     |   `-IntegerLiteral 0x55b5052d4db0 <col:30> 'int' 3
|     |-IfStmt 0x55b5052d4ee8 <line:267:3, line:269:3>
|     | |-UnaryOperator 0x55b5052d4e68 <line:267:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b5052d4e50 <col:9> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b5052d4e30 <col:9> 'int' lvalue Var 0x55b5052d4810 'tmp___2' 'int'
|     | `-CompoundStmt 0x55b5052d4ed0 <col:18, line:269:3>
|     |   `-ReturnStmt 0x55b5052d4ec0 <line:268:5, col:14>
|     |     `-ParenExpr 0x55b5052d4ea0 <col:12, col:14> 'int'
|     |       `-IntegerLiteral 0x55b5052d4e80 <col:13> 'int' 0
|     `-ReturnStmt 0x55b5052d4f40 <line:270:3, col:12>
|       `-ParenExpr 0x55b5052d4f20 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x55b5052d4f00 <col:11> 'int' 1
|-FunctionDecl 0x55b5052d5080 <line:273:1, line:380:1> line:273:5 used check 'int (void)'
| `-CompoundStmt 0x55b5052d8a88 <line:274:1, line:380:1>
|   |-DeclStmt 0x55b5052d51a0 <line:275:3, col:11>
|   | `-VarDecl 0x55b5052d5138 <col:3, col:7> col:7 used tmp 'int'
|   |-DeclStmt 0x55b5052d5238 <line:276:3, col:18>
|   | `-VarDecl 0x55b5052d51d0 <col:3, col:7> col:7 used temp_count 'int'
|   |-DeclStmt 0x55b5052d52c8 <line:277:3, col:18>
|   | `-VarDecl 0x55b5052d5260 <col:3, col:10> col:10 used tmp___0 'int8_t':'char'
|   |-DeclStmt 0x55b5052d5358 <line:278:3, col:18>
|   | `-VarDecl 0x55b5052d52f0 <col:3, col:10> col:10 used tmp___1 'int8_t':'char'
|   |-DeclStmt 0x55b5052d53e8 <line:279:3, col:18>
|   | `-VarDecl 0x55b5052d5380 <col:3, col:10> col:10 used tmp___2 'int8_t':'char'
|   |-DeclStmt 0x55b5052d5478 <line:280:3, col:17>
|   | `-VarDecl 0x55b5052d5410 <col:3, col:9> col:9 used tmp___3 '_Bool'
|   |-DeclStmt 0x55b5052d5508 <line:281:3, col:17>
|   | `-VarDecl 0x55b5052d54a0 <col:3, col:9> col:9 used tmp___4 '_Bool'
|   |-DeclStmt 0x55b5052d5598 <line:282:3, col:17>
|   | `-VarDecl 0x55b5052d5530 <col:3, col:9> col:9 used tmp___5 '_Bool'
|   |-DeclStmt 0x55b5052d5628 <line:283:3, col:18>
|   | `-VarDecl 0x55b5052d55c0 <col:3, col:10> col:10 used tmp___6 'int8_t':'char'
|   |-DeclStmt 0x55b5052d56b8 <line:284:3, col:17>
|   | `-VarDecl 0x55b5052d5650 <col:3, col:9> col:9 used tmp___7 '_Bool'
|   |-DeclStmt 0x55b5052d5758 <line:285:3, col:17>
|   | `-VarDecl 0x55b5052d56f0 <col:3, col:9> col:9 used tmp___8 '_Bool'
|   |-DeclStmt 0x55b5052d57e8 <line:286:3, col:17>
|   | `-VarDecl 0x55b5052d5780 <col:3, col:9> col:9 used tmp___9 '_Bool'
|   |-DeclStmt 0x55b5052d5878 <line:287:3, col:19>
|   | `-VarDecl 0x55b5052d5810 <col:3, col:10> col:10 used tmp___10 'int8_t':'char'
|   |-DeclStmt 0x55b5052d5908 <line:288:3, col:19>
|   | `-VarDecl 0x55b5052d58a0 <col:3, col:10> col:10 used tmp___11 'int8_t':'char'
|   |-DeclStmt 0x55b5052d5998 <line:289:3, col:19>
|   | `-VarDecl 0x55b5052d5930 <col:3, col:10> col:10 used tmp___12 'int8_t':'char'
|   |-DeclStmt 0x55b5052d5a28 <line:290:3, col:19>
|   | `-VarDecl 0x55b5052d59c0 <col:3, col:10> col:10 used tmp___13 'int8_t':'char'
|   |-DeclStmt 0x55b5052d5ab8 <line:291:3, col:19>
|   | `-VarDecl 0x55b5052d5a50 <col:3, col:10> col:10 used tmp___14 'int8_t':'char'
|   `-CompoundStmt 0x55b5052d8a30 <line:293:3, line:379:1>
|     |-IfStmt 0x55b5052d5df0 <line:294:3, line:304:3> has_else
|     | |-UnaryOperator 0x55b5052d5b08 <line:294:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b5052d5af0 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b5052d5ad0 <col:9> '_Bool' lvalue Var 0x55b5052cd8c8 'gate1Failed' '_Bool'
|     | |-CompoundStmt 0x55b5052d5b80 <col:22, line:296:3>
|     | | `-BinaryOperator 0x55b5052d5b60 <line:295:5, col:11> 'int' '='
|     | |   |-DeclRefExpr 0x55b5052d5b20 <col:5> 'int' lvalue Var 0x55b5052d5138 'tmp' 'int'
|     | |   `-IntegerLiteral 0x55b5052d5b40 <col:11> 'int' 1
|     | `-IfStmt 0x55b5052d5dc8 <line:297:3, line:304:3> has_else
|     |   |-UnaryOperator 0x55b5052d5bd0 <line:297:7, col:9> 'int' prefix '!' cannot overflow
|     |   | `-ImplicitCastExpr 0x55b5052d5bb8 <col:9> '_Bool' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55b5052d5b98 <col:9> '_Bool' lvalue Var 0x55b5052cd940 'gate2Failed' '_Bool'
|     |   |-CompoundStmt 0x55b5052d5c48 <col:22, line:299:3>
|     |   | `-BinaryOperator 0x55b5052d5c28 <line:298:5, col:11> 'int' '='
|     |   |   |-DeclRefExpr 0x55b5052d5be8 <col:5> 'int' lvalue Var 0x55b5052d5138 'tmp' 'int'
|     |   |   `-IntegerLiteral 0x55b5052d5c08 <col:11> 'int' 1
|     |   `-IfStmt 0x55b5052d5da0 <line:300:3, line:304:3> has_else
|     |     |-UnaryOperator 0x55b5052d5c98 <line:300:7, col:9> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x55b5052d5c80 <col:9> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b5052d5c60 <col:9> '_Bool' lvalue Var 0x55b5052cd9b8 'gate3Failed' '_Bool'
|     |     |-CompoundStmt 0x55b5052d5d10 <col:22, line:302:3>
|     |     | `-BinaryOperator 0x55b5052d5cf0 <line:301:5, col:11> 'int' '='
|     |     |   |-DeclRefExpr 0x55b5052d5cb0 <col:5> 'int' lvalue Var 0x55b5052d5138 'tmp' 'int'
|     |     |   `-IntegerLiteral 0x55b5052d5cd0 <col:11> 'int' 1
|     |     `-CompoundStmt 0x55b5052d5d88 <line:302:10, line:304:3>
|     |       `-BinaryOperator 0x55b5052d5d68 <line:303:5, col:11> 'int' '='
|     |         |-DeclRefExpr 0x55b5052d5d28 <col:5> 'int' lvalue Var 0x55b5052d5138 'tmp' 'int'
|     |         `-IntegerLiteral 0x55b5052d5d48 <col:11> 'int' 0
|     |-CallExpr 0x55b5052d5ef8 <line:305:3, col:32> 'void'
|     | |-ImplicitCastExpr 0x55b5052d5ee0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b5052d5e18 <col:3> 'void (int)' Function 0x55b5052cd810 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x55b5052d5f20 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x55b5052d5e80 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x55b5052d5e68 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x55b5052d5e38 <col:29> 'int' lvalue Var 0x55b5052d5138 'tmp' 'int'
|     |-BinaryOperator 0x55b5052d6000 <line:306:3, col:35> '_Bool' '='
|     | |-DeclRefExpr 0x55b5052d5f38 <col:3> '_Bool' lvalue Var 0x55b5052d5410 'tmp___3' '_Bool'
|     | `-CallExpr 0x55b5052d5fd0 <col:13, col:35> '_Bool'
|     |   |-ImplicitCastExpr 0x55b5052d5fb8 <col:13> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b5052d5f58 <col:13> '_Bool (int, int)' Function 0x55b5052d2470 'read_history_bool' '_Bool (int, int)'
|     |   |-IntegerLiteral 0x55b5052d5f78 <col:31> 'int' 0
|     |   `-IntegerLiteral 0x55b5052d5f98 <col:34> 'int' 1
|     |-IfStmt 0x55b5052d7260 <line:307:3, line:344:3>
|     | |-UnaryOperator 0x55b5052d6058 <line:307:7, col:9> 'int' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x55b5052d6040 <col:9> '_Bool' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b5052d6020 <col:9> '_Bool' lvalue Var 0x55b5052d5410 'tmp___3' '_Bool'
|     | `-CompoundStmt 0x55b5052d7240 <col:18, line:344:3>
|     |   |-BinaryOperator 0x55b5052d6138 <line:308:5, col:37> '_Bool' '='
|     |   | |-DeclRefExpr 0x55b5052d6070 <col:5> '_Bool' lvalue Var 0x55b5052d54a0 'tmp___4' '_Bool'
|     |   | `-CallExpr 0x55b5052d6108 <col:15, col:37> '_Bool'
|     |   |   |-ImplicitCastExpr 0x55b5052d60f0 <col:15> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b5052d6090 <col:15> '_Bool (int, int)' Function 0x55b5052d2470 'read_history_bool' '_Bool (int, int)'
|     |   |   |-IntegerLiteral 0x55b5052d60b0 <col:33> 'int' 1
|     |   |   `-IntegerLiteral 0x55b5052d60d0 <col:36> 'int' 1
|     |   `-IfStmt 0x55b5052d7228 <line:309:5, line:343:5>
|     |     |-UnaryOperator 0x55b5052d6190 <line:309:9, col:11> 'int' prefix '!' cannot overflow
|     |     | `-ImplicitCastExpr 0x55b5052d6178 <col:11> '_Bool' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b5052d6158 <col:11> '_Bool' lvalue Var 0x55b5052d54a0 'tmp___4' '_Bool'
|     |     `-CompoundStmt 0x55b5052d7208 <col:20, line:343:5>
|     |       |-BinaryOperator 0x55b5052d6270 <line:310:7, col:39> '_Bool' '='
|     |       | |-DeclRefExpr 0x55b5052d61a8 <col:7> '_Bool' lvalue Var 0x55b5052d5530 'tmp___5' '_Bool'
|     |       | `-CallExpr 0x55b5052d6240 <col:17, col:39> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55b5052d6228 <col:17> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b5052d61c8 <col:17> '_Bool (int, int)' Function 0x55b5052d2470 'read_history_bool' '_Bool (int, int)'
|     |       |   |-IntegerLiteral 0x55b5052d61e8 <col:35> 'int' 2
|     |       |   `-IntegerLiteral 0x55b5052d6208 <col:38> 'int' 1
|     |       `-IfStmt 0x55b5052d71f0 <line:311:7, line:342:7>
|     |         |-UnaryOperator 0x55b5052d62c8 <line:311:11, col:13> 'int' prefix '!' cannot overflow
|     |         | `-ImplicitCastExpr 0x55b5052d62b0 <col:13> '_Bool' <LValueToRValue>
|     |         |   `-DeclRefExpr 0x55b5052d6290 <col:13> '_Bool' lvalue Var 0x55b5052d5530 'tmp___5' '_Bool'
|     |         `-CompoundStmt 0x55b5052d71a0 <col:22, line:342:7>
|     |           |-BinaryOperator 0x55b5052d6320 <line:312:9, col:22> 'int' '='
|     |           | |-DeclRefExpr 0x55b5052d62e0 <col:9> 'int' lvalue Var 0x55b5052d51d0 'temp_count' 'int'
|     |           | `-IntegerLiteral 0x55b5052d6300 <col:22> 'int' 0
|     |           |-BinaryOperator 0x55b5052d6408 <line:313:9, col:41> 'int8_t':'char' '='
|     |           | |-DeclRefExpr 0x55b5052d6340 <col:9> 'int8_t':'char' lvalue Var 0x55b5052d5260 'tmp___0' 'int8_t':'char'
|     |           | `-CallExpr 0x55b5052d63d8 <col:19, col:41> 'int8_t':'char'
|     |           |   |-ImplicitCastExpr 0x55b5052d63c0 <col:19> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55b5052d6360 <col:19> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |           |   |-IntegerLiteral 0x55b5052d6380 <col:37> 'int' 3
|     |           |   `-IntegerLiteral 0x55b5052d63a0 <col:40> 'int' 0
|     |           |-IfStmt 0x55b5052d6588 <line:314:9, line:316:9>
|     |           | |-BinaryOperator 0x55b5052d6518 <line:314:13, col:35> 'int' '=='
|     |           | | |-CStyleCastExpr 0x55b5052d6478 <col:13, col:19> 'int' <IntegralCast>
|     |           | | | `-ImplicitCastExpr 0x55b5052d6460 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | | |   `-DeclRefExpr 0x55b5052d6428 <col:19> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |           | | `-CStyleCastExpr 0x55b5052d64f0 <col:29, col:35> 'int' <IntegralCast>
|     |           | |   `-ImplicitCastExpr 0x55b5052d64d8 <col:35> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |     `-DeclRefExpr 0x55b5052d64a0 <col:35> 'int8_t':'char' lvalue Var 0x55b5052d5260 'tmp___0' 'int8_t':'char'
|     |           | `-CompoundStmt 0x55b5052d6570 <col:44, line:316:9>
|     |           |   `-UnaryOperator 0x55b5052d6558 <line:315:11, col:22> 'int' postfix '++'
|     |           |     `-DeclRefExpr 0x55b5052d6538 <col:11> 'int' lvalue Var 0x55b5052d51d0 'temp_count' 'int'
|     |           |-BinaryOperator 0x55b5052d6668 <line:317:9, col:41> 'int8_t':'char' '='
|     |           | |-DeclRefExpr 0x55b5052d65a0 <col:9> 'int8_t':'char' lvalue Var 0x55b5052d52f0 'tmp___1' 'int8_t':'char'
|     |           | `-CallExpr 0x55b5052d6638 <col:19, col:41> 'int8_t':'char'
|     |           |   |-ImplicitCastExpr 0x55b5052d6620 <col:19> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55b5052d65c0 <col:19> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |           |   |-IntegerLiteral 0x55b5052d65e0 <col:37> 'int' 3
|     |           |   `-IntegerLiteral 0x55b5052d6600 <col:40> 'int' 0
|     |           |-IfStmt 0x55b5052d6810 <line:318:9, line:320:9>
|     |           | |-BinaryOperator 0x55b5052d67a0 <line:318:13, col:35> 'int' '=='
|     |           | | |-CStyleCastExpr 0x55b5052d6700 <col:13, col:19> 'int' <IntegralCast>
|     |           | | | `-ImplicitCastExpr 0x55b5052d66c0 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | | |   `-DeclRefExpr 0x55b5052d6688 <col:19> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |           | | `-CStyleCastExpr 0x55b5052d6778 <col:29, col:35> 'int' <IntegralCast>
|     |           | |   `-ImplicitCastExpr 0x55b5052d6760 <col:35> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |     `-DeclRefExpr 0x55b5052d6728 <col:35> 'int8_t':'char' lvalue Var 0x55b5052d52f0 'tmp___1' 'int8_t':'char'
|     |           | `-CompoundStmt 0x55b5052d67f8 <col:44, line:320:9>
|     |           |   `-UnaryOperator 0x55b5052d67e0 <line:319:11, col:22> 'int' postfix '++'
|     |           |     `-DeclRefExpr 0x55b5052d67c0 <col:11> 'int' lvalue Var 0x55b5052d51d0 'temp_count' 'int'
|     |           |-BinaryOperator 0x55b5052d68f0 <line:321:9, col:41> 'int8_t':'char' '='
|     |           | |-DeclRefExpr 0x55b5052d6828 <col:9> 'int8_t':'char' lvalue Var 0x55b5052d5380 'tmp___2' 'int8_t':'char'
|     |           | `-CallExpr 0x55b5052d68c0 <col:19, col:41> 'int8_t':'char'
|     |           |   |-ImplicitCastExpr 0x55b5052d68a8 <col:19> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55b5052d6848 <col:19> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |           |   |-IntegerLiteral 0x55b5052d6868 <col:37> 'int' 3
|     |           |   `-IntegerLiteral 0x55b5052d6888 <col:40> 'int' 0
|     |           |-IfStmt 0x55b5052d6a70 <line:322:9, line:324:9>
|     |           | |-BinaryOperator 0x55b5052d6a00 <line:322:13, col:35> 'int' '=='
|     |           | | |-CStyleCastExpr 0x55b5052d6960 <col:13, col:19> 'int' <IntegralCast>
|     |           | | | `-ImplicitCastExpr 0x55b5052d6948 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | | |   `-DeclRefExpr 0x55b5052d6910 <col:19> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     |           | | `-CStyleCastExpr 0x55b5052d69d8 <col:29, col:35> 'int' <IntegralCast>
|     |           | |   `-ImplicitCastExpr 0x55b5052d69c0 <col:35> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |     `-DeclRefExpr 0x55b5052d6988 <col:35> 'int8_t':'char' lvalue Var 0x55b5052d5380 'tmp___2' 'int8_t':'char'
|     |           | `-CompoundStmt 0x55b5052d6a58 <col:44, line:324:9>
|     |           |   `-UnaryOperator 0x55b5052d6a40 <line:323:11, col:22> 'int' postfix '++'
|     |           |     `-DeclRefExpr 0x55b5052d6a20 <col:11> 'int' lvalue Var 0x55b5052d51d0 'temp_count' 'int'
|     |           `-IfStmt 0x55b5052d7178 <line:325:9, line:341:9> has_else
|     |             |-BinaryOperator 0x55b5052d6b78 <line:325:13, col:35> 'int' '!='
|     |             | |-CStyleCastExpr 0x55b5052d6ad8 <col:13, col:19> 'int' <IntegralCast>
|     |             | | `-ImplicitCastExpr 0x55b5052d6ac0 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             | |   `-DeclRefExpr 0x55b5052d6a88 <col:19> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |             | `-CStyleCastExpr 0x55b5052d6b50 <col:29, col:35> 'int' <IntegralCast>
|     |             |   `-ImplicitCastExpr 0x55b5052d6b38 <col:35> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     `-DeclRefExpr 0x55b5052d6b00 <col:35> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |             |-CompoundStmt 0x55b5052d7018 <col:43, line:337:9>
|     |             | `-IfStmt 0x55b5052d6ff0 <line:326:11, line:336:11> has_else
|     |             |   |-BinaryOperator 0x55b5052d6c88 <line:326:15, col:37> 'int' '!='
|     |             |   | |-CStyleCastExpr 0x55b5052d6be8 <col:15, col:21> 'int' <IntegralCast>
|     |             |   | | `-ImplicitCastExpr 0x55b5052d6bd0 <col:21> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |   | |   `-DeclRefExpr 0x55b5052d6b98 <col:21> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |             |   | `-CStyleCastExpr 0x55b5052d6c60 <col:31, col:37> 'int' <IntegralCast>
|     |             |   |   `-ImplicitCastExpr 0x55b5052d6c48 <col:37> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |   |     `-DeclRefExpr 0x55b5052d6c10 <col:37> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     |             |   |-CompoundStmt 0x55b5052d6fa8 <col:45, line:334:11>
|     |             |   | `-IfStmt 0x55b5052d6f80 <line:327:13, line:333:13> has_else
|     |             |   |   |-BinaryOperator 0x55b5052d6d98 <line:327:17, col:39> 'int' '!='
|     |             |   |   | |-CStyleCastExpr 0x55b5052d6cf8 <col:17, col:23> 'int' <IntegralCast>
|     |             |   |   | | `-ImplicitCastExpr 0x55b5052d6ce0 <col:23> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |   |   | |   `-DeclRefExpr 0x55b5052d6ca8 <col:23> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |             |   |   | `-CStyleCastExpr 0x55b5052d6d70 <col:33, col:39> 'int' <IntegralCast>
|     |             |   |   |   `-ImplicitCastExpr 0x55b5052d6d58 <col:39> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |   |   |     `-DeclRefExpr 0x55b5052d6d20 <col:39> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     |             |   |   |-CompoundStmt 0x55b5052d6ee8 <col:47, line:331:13>
|     |             |   |   | `-IfStmt 0x55b5052d6ed0 <line:328:15, line:330:15>
|     |             |   |   |   |-UnaryOperator 0x55b5052d6e50 <line:328:19, col:37> 'int' prefix '!' cannot overflow
|     |             |   |   |   | `-ParenExpr 0x55b5052d6e30 <col:21, col:37> 'int'
|     |             |   |   |   |   `-BinaryOperator 0x55b5052d6e10 <col:22, col:36> 'int' '=='
|     |             |   |   |   |     |-ImplicitCastExpr 0x55b5052d6df8 <col:22> 'int' <LValueToRValue>
|     |             |   |   |   |     | `-DeclRefExpr 0x55b5052d6db8 <col:22> 'int' lvalue Var 0x55b5052d51d0 'temp_count' 'int'
|     |             |   |   |   |     `-IntegerLiteral 0x55b5052d6dd8 <col:36> 'int' 1
|     |             |   |   |   `-CompoundStmt 0x55b5052d6eb8 <col:40, line:330:15>
|     |             |   |   |     `-ReturnStmt 0x55b5052d6ea8 <line:329:17, col:26>
|     |             |   |   |       `-ParenExpr 0x55b5052d6e88 <col:24, col:26> 'int'
|     |             |   |   |         `-IntegerLiteral 0x55b5052d6e68 <col:25> 'int' 0
|     |             |   |   `-CompoundStmt 0x55b5052d6f68 <line:331:20, line:333:13>
|     |             |   |     `-GotoStmt 0x55b5052d6f50 <line:332:15, col:20> '_L___0' 0x55b5052d6f00
|     |             |   `-CompoundStmt 0x55b5052d6fd8 <line:334:18, line:336:11>
|     |             |     `-GotoStmt 0x55b5052d6fc0 <line:335:13, col:18> '_L___0' 0x55b5052d6f00
|     |             `-LabelStmt 0x55b5052d7160 <line:338:9, line:341:9> '_L___0'
|     |               `-IfStmt 0x55b5052d7148 <line:339:9, line:341:9>
|     |                 |-UnaryOperator 0x55b5052d70c8 <line:339:13, col:30> 'int' prefix '!' cannot overflow
|     |                 | `-ParenExpr 0x55b5052d70a8 <col:15, col:30> 'int'
|     |                 |   `-BinaryOperator 0x55b5052d7088 <col:16, col:29> 'int' '>'
|     |                 |     |-ImplicitCastExpr 0x55b5052d7070 <col:16> 'int' <LValueToRValue>
|     |                 |     | `-DeclRefExpr 0x55b5052d7030 <col:16> 'int' lvalue Var 0x55b5052d51d0 'temp_count' 'int'
|     |                 |     `-IntegerLiteral 0x55b5052d7050 <col:29> 'int' 1
|     |                 `-CompoundStmt 0x55b5052d7130 <col:33, line:341:9>
|     |                   `-ReturnStmt 0x55b5052d7120 <line:340:11, col:20>
|     |                     `-ParenExpr 0x55b5052d7100 <col:18, col:20> 'int'
|     |                       `-IntegerLiteral 0x55b5052d70e0 <col:19> 'int' 0
|     |-BinaryOperator 0x55b5052d7340 <line:345:3, col:36> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052d7278 <col:3> 'int8_t':'char' lvalue Var 0x55b5052d5810 'tmp___10' 'int8_t':'char'
|     | `-CallExpr 0x55b5052d7310 <col:14, col:36> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x55b5052d72f8 <col:14> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b5052d7298 <col:14> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |   |-IntegerLiteral 0x55b5052d72b8 <col:32> 'int' 3
|     |   `-IntegerLiteral 0x55b5052d72d8 <col:35> 'int' 1
|     |-IfStmt 0x55b5052d8018 <line:346:3, line:364:3>
|     | |-BinaryOperator 0x55b5052d7410 <line:346:7, col:25> 'int' '>'
|     | | |-CStyleCastExpr 0x55b5052d73b0 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b5052d7398 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b5052d7360 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d5810 'tmp___10' 'int8_t':'char'
|     | | `-UnaryOperator 0x55b5052d73f8 <col:24, col:25> 'int' prefix '-'
|     | |   `-IntegerLiteral 0x55b5052d73d8 <col:25> 'int' 2
|     | `-CompoundStmt 0x55b5052d7ff8 <col:28, line:364:3>
|     |   |-BinaryOperator 0x55b5052d74f8 <line:347:5, col:37> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b5052d7430 <col:5> 'int8_t':'char' lvalue Var 0x55b5052d55c0 'tmp___6' 'int8_t':'char'
|     |   | `-CallExpr 0x55b5052d74c8 <col:15, col:37> 'int8_t':'char'
|     |   |   |-ImplicitCastExpr 0x55b5052d74b0 <col:15> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b5052d7450 <col:15> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |   |   |-IntegerLiteral 0x55b5052d7470 <col:33> 'int' 3
|     |   |   `-IntegerLiteral 0x55b5052d7490 <col:36> 'int' 0
|     |   `-IfStmt 0x55b5052d7fe0 <line:348:5, line:363:5>
|     |     |-BinaryOperator 0x55b5052d7608 <line:348:9, col:32> 'int' '=='
|     |     | |-CStyleCastExpr 0x55b5052d7568 <col:9, col:15> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x55b5052d7550 <col:15> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x55b5052d7518 <col:15> 'int8_t':'char' lvalue Var 0x55b5052d55c0 'tmp___6' 'int8_t':'char'
|     |     | `-CStyleCastExpr 0x55b5052d75e0 <col:26, col:32> 'int' <IntegralCast>
|     |     |   `-ImplicitCastExpr 0x55b5052d75c8 <col:32> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |     `-DeclRefExpr 0x55b5052d7590 <col:32> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |     `-CompoundStmt 0x55b5052d7fc0 <col:39, line:363:5>
|     |       |-BinaryOperator 0x55b5052d7b30 <line:349:7, col:39> '_Bool' '='
|     |       | |-DeclRefExpr 0x55b5052d7628 <col:7> '_Bool' lvalue Var 0x55b5052d5650 'tmp___7' '_Bool'
|     |       | `-CallExpr 0x55b5052d76c0 <col:17, col:39> '_Bool'
|     |       |   |-ImplicitCastExpr 0x55b5052d76a8 <col:17> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b5052d7648 <col:17> '_Bool (int, int)' Function 0x55b5052d2470 'read_history_bool' '_Bool (int, int)'
|     |       |   |-IntegerLiteral 0x55b5052d7668 <col:35> 'int' 0
|     |       |   `-IntegerLiteral 0x55b5052d7688 <col:38> 'int' 1
|     |       `-IfStmt 0x55b5052d7f98 <line:350:7, line:362:7> has_else
|     |         |-ImplicitCastExpr 0x55b5052d7b70 <line:350:11> '_Bool' <LValueToRValue>
|     |         | `-DeclRefExpr 0x55b5052d7b50 <col:11> '_Bool' lvalue Var 0x55b5052d5650 'tmp___7' '_Bool'
|     |         |-CompoundStmt 0x55b5052d7f10 <col:20, line:360:7>
|     |         | |-BinaryOperator 0x55b5052d7c50 <line:351:9, col:41> '_Bool' '='
|     |         | | |-DeclRefExpr 0x55b5052d7b88 <col:9> '_Bool' lvalue Var 0x55b5052d56f0 'tmp___8' '_Bool'
|     |         | | `-CallExpr 0x55b5052d7c20 <col:19, col:41> '_Bool'
|     |         | |   |-ImplicitCastExpr 0x55b5052d7c08 <col:19> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |         | |   | `-DeclRefExpr 0x55b5052d7ba8 <col:19> '_Bool (int, int)' Function 0x55b5052d2470 'read_history_bool' '_Bool (int, int)'
|     |         | |   |-IntegerLiteral 0x55b5052d7bc8 <col:37> 'int' 1
|     |         | |   `-IntegerLiteral 0x55b5052d7be8 <col:40> 'int' 1
|     |         | `-IfStmt 0x55b5052d7ee8 <line:352:9, line:359:9> has_else
|     |         |   |-ImplicitCastExpr 0x55b5052d7c90 <line:352:13> '_Bool' <LValueToRValue>
|     |         |   | `-DeclRefExpr 0x55b5052d7c70 <col:13> '_Bool' lvalue Var 0x55b5052d56f0 'tmp___8' '_Bool'
|     |         |   |-CompoundStmt 0x55b5052d7e60 <col:22, line:357:9>
|     |         |   | |-BinaryOperator 0x55b5052d7d70 <line:353:11, col:43> '_Bool' '='
|     |         |   | | |-DeclRefExpr 0x55b5052d7ca8 <col:11> '_Bool' lvalue Var 0x55b5052d5780 'tmp___9' '_Bool'
|     |         |   | | `-CallExpr 0x55b5052d7d40 <col:21, col:43> '_Bool'
|     |         |   | |   |-ImplicitCastExpr 0x55b5052d7d28 <col:21> '_Bool (*)(int, int)' <FunctionToPointerDecay>
|     |         |   | |   | `-DeclRefExpr 0x55b5052d7cc8 <col:21> '_Bool (int, int)' Function 0x55b5052d2470 'read_history_bool' '_Bool (int, int)'
|     |         |   | |   |-IntegerLiteral 0x55b5052d7ce8 <col:39> 'int' 2
|     |         |   | |   `-IntegerLiteral 0x55b5052d7d08 <col:42> 'int' 1
|     |         |   | `-IfStmt 0x55b5052d7e48 <line:354:11, line:356:11>
|     |         |   |   |-UnaryOperator 0x55b5052d7dc8 <line:354:15, col:17> 'int' prefix '!' cannot overflow
|     |         |   |   | `-ImplicitCastExpr 0x55b5052d7db0 <col:17> '_Bool' <LValueToRValue>
|     |         |   |   |   `-DeclRefExpr 0x55b5052d7d90 <col:17> '_Bool' lvalue Var 0x55b5052d5780 'tmp___9' '_Bool'
|     |         |   |   `-CompoundStmt 0x55b5052d7e30 <col:26, line:356:11>
|     |         |   |     `-ReturnStmt 0x55b5052d7e20 <line:355:13, col:22>
|     |         |   |       `-ParenExpr 0x55b5052d7e00 <col:20, col:22> 'int'
|     |         |   |         `-IntegerLiteral 0x55b5052d7de0 <col:21> 'int' 0
|     |         |   `-CompoundStmt 0x55b5052d7ed0 <line:357:16, line:359:9>
|     |         |     `-ReturnStmt 0x55b5052d7ec0 <line:358:11, col:20>
|     |         |       `-ParenExpr 0x55b5052d7ea0 <col:18, col:20> 'int'
|     |         |         `-IntegerLiteral 0x55b5052d7e80 <col:19> 'int' 0
|     |         `-CompoundStmt 0x55b5052d7f80 <line:360:14, line:362:7>
|     |           `-ReturnStmt 0x55b5052d7f70 <line:361:9, col:18>
|     |             `-ParenExpr 0x55b5052d7f50 <col:16, col:18> 'int'
|     |               `-IntegerLiteral 0x55b5052d7f30 <col:17> 'int' 0
|     |-BinaryOperator 0x55b5052d80f8 <line:365:3, col:36> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052d8030 <col:3> 'int8_t':'char' lvalue Var 0x55b5052d58a0 'tmp___11' 'int8_t':'char'
|     | `-CallExpr 0x55b5052d80c8 <col:14, col:36> 'int8_t':'char'
|     |   |-ImplicitCastExpr 0x55b5052d80b0 <col:14> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x55b5052d8050 <col:14> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |   |-IntegerLiteral 0x55b5052d8070 <col:32> 'int' 3
|     |   `-IntegerLiteral 0x55b5052d8090 <col:35> 'int' 0
|     |-IfStmt 0x55b5052d89c8 <line:366:3, line:377:3>
|     | |-BinaryOperator 0x55b5052d8208 <line:366:7, col:31> 'int' '!='
|     | | |-CStyleCastExpr 0x55b5052d8168 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b5052d8150 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b5052d8118 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d58a0 'tmp___11' 'int8_t':'char'
|     | | `-CStyleCastExpr 0x55b5052d81e0 <col:25, col:31> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x55b5052d81c8 <col:31> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x55b5052d8190 <col:31> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     | `-CompoundStmt 0x55b5052d89a8 <col:38, line:377:3>
|     |   |-BinaryOperator 0x55b5052d82f0 <line:367:5, col:38> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b5052d8228 <col:5> 'int8_t':'char' lvalue Var 0x55b5052d5930 'tmp___12' 'int8_t':'char'
|     |   | `-CallExpr 0x55b5052d82c0 <col:16, col:38> 'int8_t':'char'
|     |   |   |-ImplicitCastExpr 0x55b5052d82a8 <col:16> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b5052d8248 <col:16> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |   |   |-IntegerLiteral 0x55b5052d8268 <col:34> 'int' 3
|     |   |   `-IntegerLiteral 0x55b5052d8288 <col:37> 'int' 0
|     |   `-IfStmt 0x55b5052d8990 <line:368:5, line:376:5>
|     |     |-UnaryOperator 0x55b5052d8440 <line:368:9, col:42> 'int' prefix '!' cannot overflow
|     |     | `-ParenExpr 0x55b5052d8420 <col:11, col:42> 'int'
|     |     |   `-BinaryOperator 0x55b5052d8400 <col:12, col:34> 'int' '=='
|     |     |     |-CStyleCastExpr 0x55b5052d8360 <col:12, col:18> 'int' <IntegralCast>
|     |     |     | `-ImplicitCastExpr 0x55b5052d8348 <col:18> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |     |   `-DeclRefExpr 0x55b5052d8310 <col:18> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |     |     `-CStyleCastExpr 0x55b5052d83d8 <col:28, col:34> 'int' <IntegralCast>
|     |     |       `-ImplicitCastExpr 0x55b5052d83c0 <col:34> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |         `-DeclRefExpr 0x55b5052d8388 <col:34> 'int8_t':'char' lvalue Var 0x55b5052d5930 'tmp___12' 'int8_t':'char'
|     |     `-CompoundStmt 0x55b5052d8970 <col:45, line:376:5>
|     |       |-BinaryOperator 0x55b5052d8520 <line:369:7, col:40> 'int8_t':'char' '='
|     |       | |-DeclRefExpr 0x55b5052d8458 <col:7> 'int8_t':'char' lvalue Var 0x55b5052d59c0 'tmp___13' 'int8_t':'char'
|     |       | `-CallExpr 0x55b5052d84f0 <col:18, col:40> 'int8_t':'char'
|     |       |   |-ImplicitCastExpr 0x55b5052d84d8 <col:18> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |       |   | `-DeclRefExpr 0x55b5052d8478 <col:18> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |       |   |-IntegerLiteral 0x55b5052d8498 <col:36> 'int' 3
|     |       |   `-IntegerLiteral 0x55b5052d84b8 <col:39> 'int' 0
|     |       `-IfStmt 0x55b5052d8958 <line:370:7, line:375:7>
|     |         |-UnaryOperator 0x55b5052d8670 <line:370:11, col:44> 'int' prefix '!' cannot overflow
|     |         | `-ParenExpr 0x55b5052d8650 <col:13, col:44> 'int'
|     |         |   `-BinaryOperator 0x55b5052d8630 <col:14, col:36> 'int' '=='
|     |         |     |-CStyleCastExpr 0x55b5052d8590 <col:14, col:20> 'int' <IntegralCast>
|     |         |     | `-ImplicitCastExpr 0x55b5052d8578 <col:20> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |     |   `-DeclRefExpr 0x55b5052d8540 <col:20> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |         |     `-CStyleCastExpr 0x55b5052d8608 <col:30, col:36> 'int' <IntegralCast>
|     |         |       `-ImplicitCastExpr 0x55b5052d85f0 <col:36> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |         `-DeclRefExpr 0x55b5052d85b8 <col:36> 'int8_t':'char' lvalue Var 0x55b5052d59c0 'tmp___13' 'int8_t':'char'
|     |         `-CompoundStmt 0x55b5052d8938 <col:47, line:375:7>
|     |           |-BinaryOperator 0x55b5052d8750 <line:371:9, col:42> 'int8_t':'char' '='
|     |           | |-DeclRefExpr 0x55b5052d8688 <col:9> 'int8_t':'char' lvalue Var 0x55b5052d5a50 'tmp___14' 'int8_t':'char'
|     |           | `-CallExpr 0x55b5052d8720 <col:20, col:42> 'int8_t':'char'
|     |           |   |-ImplicitCastExpr 0x55b5052d8708 <col:20> 'int8_t (*)(int, int)' <FunctionToPointerDecay>
|     |           |   | `-DeclRefExpr 0x55b5052d86a8 <col:20> 'int8_t (int, int)' Function 0x55b5052d1618 'read_history_int8' 'int8_t (int, int)'
|     |           |   |-IntegerLiteral 0x55b5052d86c8 <col:38> 'int' 3
|     |           |   `-IntegerLiteral 0x55b5052d86e8 <col:41> 'int' 0
|     |           `-IfStmt 0x55b5052d8920 <line:372:9, line:374:9>
|     |             |-UnaryOperator 0x55b5052d88a0 <line:372:13, col:46> 'int' prefix '!' cannot overflow
|     |             | `-ParenExpr 0x55b5052d8880 <col:15, col:46> 'int'
|     |             |   `-BinaryOperator 0x55b5052d8860 <col:16, col:38> 'int' '=='
|     |             |     |-CStyleCastExpr 0x55b5052d87c0 <col:16, col:22> 'int' <IntegralCast>
|     |             |     | `-ImplicitCastExpr 0x55b5052d87a8 <col:22> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |     |   `-DeclRefExpr 0x55b5052d8770 <col:22> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     |             |     `-CStyleCastExpr 0x55b5052d8838 <col:32, col:38> 'int' <IntegralCast>
|     |             |       `-ImplicitCastExpr 0x55b5052d8820 <col:38> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |             |         `-DeclRefExpr 0x55b5052d87e8 <col:38> 'int8_t':'char' lvalue Var 0x55b5052d5a50 'tmp___14' 'int8_t':'char'
|     |             `-CompoundStmt 0x55b5052d8908 <col:49, line:374:9>
|     |               `-ReturnStmt 0x55b5052d88f8 <line:373:11, col:20>
|     |                 `-ParenExpr 0x55b5052d88d8 <col:18, col:20> 'int'
|     |                   `-IntegerLiteral 0x55b5052d88b8 <col:19> 'int' 0
|     `-ReturnStmt 0x55b5052d8a20 <line:378:3, col:12>
|       `-ParenExpr 0x55b5052d8a00 <col:10, col:12> 'int'
|         `-IntegerLiteral 0x55b5052d89e0 <col:11> 'int' 1
|-FunctionDecl 0x55b5052d8c10 <line:381:1, line:411:1> line:381:6 used gate1_each_pals_period 'void (void)'
| `-CompoundStmt 0x55b5052d9e70 <line:382:1, line:411:1>
|   |-DeclStmt 0x55b5052d8d28 <line:383:3, col:21>
|   | `-VarDecl 0x55b5052d8cc0 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   |-DeclStmt 0x55b5052d8db8 <line:384:3, col:13>
|   | `-VarDecl 0x55b5052d8d50 <col:3, col:9> col:9 used tmp 'msg_t':'char'
|   |-DeclStmt 0x55b5052d8e50 <line:385:3, col:15>
|   | `-VarDecl 0x55b5052d8de8 <col:3, col:7> col:7 used tmp___0 'int'
|   `-CompoundStmt 0x55b5052d9e18 <line:387:3, line:410:1>
|     |-BinaryOperator 0x55b5052d8f18 <line:388:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x55b5052d8e68 <col:3> '_Bool' lvalue Var 0x55b5052cd8c8 'gate1Failed' '_Bool'
|     | `-CallExpr 0x55b5052d8ef8 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x55b5052d8ee0 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b5052d8e88 <col:17> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x55b5052d8fe8 <line:389:3, col:36> 'void'
|     | |-ImplicitCastExpr 0x55b5052d8fd0 <col:3> 'void (*)(int, _Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b5052d8f38 <col:3> 'void (int, _Bool)' Function 0x55b5052d3c30 'write_history_bool' 'void (int, _Bool)'
|     | |-IntegerLiteral 0x55b5052d8f58 <col:22> 'int' 0
|     | `-ImplicitCastExpr 0x55b5052d9018 <col:25> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052d8f78 <col:25> '_Bool' lvalue Var 0x55b5052cd8c8 'gate1Failed' '_Bool'
|     |-IfStmt 0x55b5052d9360 <line:390:3, line:393:3>
|     | |-ImplicitCastExpr 0x55b5052d9050 <line:390:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b5052d9030 <col:7> '_Bool' lvalue Var 0x55b5052cd8c8 'gate1Failed' '_Bool'
|     | `-CompoundStmt 0x55b5052d9340 <col:20, line:393:3>
|     |   |-BinaryOperator 0x55b5052d9310 <line:391:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b5052d9068 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b5052d92f8 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b5052d92c8 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x55b5052d9208 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b5052d9128 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b5052d90f8 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b5052d90c8 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b5052d9088 <col:15> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b5052d9110 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b5052d90e0 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b5052d90a8 <col:24> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b5052d91e8 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b5052d91b8 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b5052d9188 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b5052d9148 <col:33> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b5052d91d0 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b5052d91a0 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b5052d9168 <col:44> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b5052d9280 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b5052d9268 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b5052d9228 <col:52> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b5052d92b0 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b5052d9298 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b5052d9248 <col:60> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|     |   `-ReturnStmt 0x55b5052d9330 <line:392:5>
|     |-BinaryOperator 0x55b5052d9428 <line:394:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b5052d9378 <col:3> 'msg_t':'char' lvalue Var 0x55b5052d8d50 'tmp' 'msg_t':'char'
|     | `-CallExpr 0x55b5052d9408 <col:9, col:32> 'char'
|     |   `-ImplicitCastExpr 0x55b5052d93f0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b5052d9398 <col:9> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|     |-BinaryOperator 0x55b5052d94a0 <line:395:3, col:16> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052d9448 <col:3> 'int8_t':'char' lvalue Var 0x55b5052d8cc0 'next_state' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052d9488 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052d9468 <col:16> 'msg_t':'char' lvalue Var 0x55b5052d8d50 'tmp' 'msg_t':'char'
|     |-IfStmt 0x55b5052d9918 <line:396:3, line:406:3> has_else
|     | |-BinaryOperator 0x55b5052d9558 <line:396:7, col:27> 'int' '=='
|     | | |-CStyleCastExpr 0x55b5052d9510 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b5052d94f8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b5052d94c0 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d8cc0 'next_state' 'int8_t':'char'
|     | | `-IntegerLiteral 0x55b5052d9538 <col:27> 'int' 0
|     | |-CompoundStmt 0x55b5052d95d8 <col:30, line:398:3>
|     | | `-BinaryOperator 0x55b5052d95b8 <line:397:5, col:15> 'int' '='
|     | |   |-DeclRefExpr 0x55b5052d9578 <col:5> 'int' lvalue Var 0x55b5052d8de8 'tmp___0' 'int'
|     | |   `-IntegerLiteral 0x55b5052d9598 <col:15> 'int' 1
|     | `-IfStmt 0x55b5052d98f0 <line:399:3, line:406:3> has_else
|     |   |-BinaryOperator 0x55b5052d9688 <line:399:7, col:27> 'int' '=='
|     |   | |-CStyleCastExpr 0x55b5052d9640 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55b5052d9628 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55b5052d95f0 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d8cc0 'next_state' 'int8_t':'char'
|     |   | `-IntegerLiteral 0x55b5052d9668 <col:27> 'int' 1
|     |   |-CompoundStmt 0x55b5052d9708 <col:30, line:401:3>
|     |   | `-BinaryOperator 0x55b5052d96e8 <line:400:5, col:15> 'int' '='
|     |   |   |-DeclRefExpr 0x55b5052d96a8 <col:5> 'int' lvalue Var 0x55b5052d8de8 'tmp___0' 'int'
|     |   |   `-IntegerLiteral 0x55b5052d96c8 <col:15> 'int' 1
|     |   `-IfStmt 0x55b5052d98c8 <line:402:3, line:406:3> has_else
|     |     |-BinaryOperator 0x55b5052d97b8 <line:402:7, col:27> 'int' '=='
|     |     | |-CStyleCastExpr 0x55b5052d9770 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x55b5052d9758 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x55b5052d9720 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d8cc0 'next_state' 'int8_t':'char'
|     |     | `-IntegerLiteral 0x55b5052d9798 <col:27> 'int' 2
|     |     |-CompoundStmt 0x55b5052d9838 <col:30, line:404:3>
|     |     | `-BinaryOperator 0x55b5052d9818 <line:403:5, col:15> 'int' '='
|     |     |   |-DeclRefExpr 0x55b5052d97d8 <col:5> 'int' lvalue Var 0x55b5052d8de8 'tmp___0' 'int'
|     |     |   `-IntegerLiteral 0x55b5052d97f8 <col:15> 'int' 1
|     |     `-CompoundStmt 0x55b5052d98b0 <line:404:10, line:406:3>
|     |       `-BinaryOperator 0x55b5052d9890 <line:405:5, col:15> 'int' '='
|     |         |-DeclRefExpr 0x55b5052d9850 <col:5> 'int' lvalue Var 0x55b5052d8de8 'tmp___0' 'int'
|     |         `-IntegerLiteral 0x55b5052d9870 <col:15> 'int' 0
|     |-CallExpr 0x55b5052d99e8 <line:407:3, col:36> 'void'
|     | |-ImplicitCastExpr 0x55b5052d99d0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b5052d9940 <col:3> 'void (int)' Function 0x55b5052cd810 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x55b5052d9a10 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x55b5052d99a8 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x55b5052d9990 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x55b5052d9960 <col:29> 'int' lvalue Var 0x55b5052d8de8 'tmp___0' 'int'
|     |-BinaryOperator 0x55b5052d9de8 <line:408:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052d9a28 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052d9dd0 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b5052d9da0 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x55b5052d9ce0 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x55b5052d9ae8 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b5052d9ab8 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b5052d9a88 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b5052d9a48 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d8cc0 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b5052d9ad0 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b5052d9aa0 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b5052d9a68 <col:27> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b5052d9cc0 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b5052d9c90 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b5052d9c60 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b5052d9b08 <col:36> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b5052d9ca8 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b5052d9c78 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b5052d9c40 <col:47> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b5052d9d58 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b5052d9d40 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b5052d9d00 <col:55> 'int8_t':'char' lvalue Var 0x55b5052d8cc0 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b5052d9d88 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b5052d9d70 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b5052d9d20 <col:68> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|     `-ReturnStmt 0x55b5052d9e08 <line:409:3>
|-FunctionDecl 0x55b5052d9f38 <line:412:1, line:442:1> line:412:6 used gate2_each_pals_period 'void (void)'
| `-CompoundStmt 0x55b5052db000 <line:413:1, line:442:1>
|   |-DeclStmt 0x55b5052da050 <line:414:3, col:21>
|   | `-VarDecl 0x55b5052d9fe8 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   |-DeclStmt 0x55b5052da0e0 <line:415:3, col:13>
|   | `-VarDecl 0x55b5052da078 <col:3, col:9> col:9 used tmp 'msg_t':'char'
|   |-DeclStmt 0x55b5052da178 <line:416:3, col:15>
|   | `-VarDecl 0x55b5052da110 <col:3, col:7> col:7 used tmp___0 'int'
|   `-CompoundStmt 0x55b5052dafa8 <line:418:3, line:441:1>
|     |-BinaryOperator 0x55b5052da208 <line:419:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x55b5052da190 <col:3> '_Bool' lvalue Var 0x55b5052cd940 'gate2Failed' '_Bool'
|     | `-CallExpr 0x55b5052da1e8 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x55b5052da1d0 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b5052da1b0 <col:17> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x55b5052da2a0 <line:420:3, col:36> 'void'
|     | |-ImplicitCastExpr 0x55b5052da288 <col:3> 'void (*)(int, _Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b5052da228 <col:3> 'void (int, _Bool)' Function 0x55b5052d3c30 'write_history_bool' 'void (int, _Bool)'
|     | |-IntegerLiteral 0x55b5052da248 <col:22> 'int' 1
|     | `-ImplicitCastExpr 0x55b5052da2d0 <col:25> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052da268 <col:25> '_Bool' lvalue Var 0x55b5052cd940 'gate2Failed' '_Bool'
|     |-IfStmt 0x55b5052da618 <line:421:3, line:424:3>
|     | |-ImplicitCastExpr 0x55b5052da308 <line:421:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b5052da2e8 <col:7> '_Bool' lvalue Var 0x55b5052cd940 'gate2Failed' '_Bool'
|     | `-CompoundStmt 0x55b5052da5f8 <col:20, line:424:3>
|     |   |-BinaryOperator 0x55b5052da5c8 <line:422:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b5052da320 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b5052da5b0 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b5052da580 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x55b5052da4c0 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b5052da3e0 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b5052da3b0 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b5052da380 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b5052da340 <col:15> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b5052da3c8 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b5052da398 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b5052da360 <col:24> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b5052da4a0 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b5052da470 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b5052da440 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b5052da400 <col:33> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b5052da488 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b5052da458 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b5052da420 <col:44> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b5052da538 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b5052da520 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b5052da4e0 <col:52> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b5052da568 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b5052da550 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b5052da500 <col:60> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|     |   `-ReturnStmt 0x55b5052da5e8 <line:423:5>
|     |-BinaryOperator 0x55b5052da6a8 <line:425:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b5052da630 <col:3> 'msg_t':'char' lvalue Var 0x55b5052da078 'tmp' 'msg_t':'char'
|     | `-CallExpr 0x55b5052da688 <col:9, col:32> 'char'
|     |   `-ImplicitCastExpr 0x55b5052da670 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b5052da650 <col:9> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|     |-BinaryOperator 0x55b5052da720 <line:426:3, col:16> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052da6c8 <col:3> 'int8_t':'char' lvalue Var 0x55b5052d9fe8 'next_state' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052da708 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052da6e8 <col:16> 'msg_t':'char' lvalue Var 0x55b5052da078 'tmp' 'msg_t':'char'
|     |-IfStmt 0x55b5052dab98 <line:427:3, line:437:3> has_else
|     | |-BinaryOperator 0x55b5052da7d8 <line:427:7, col:27> 'int' '=='
|     | | |-CStyleCastExpr 0x55b5052da790 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b5052da778 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b5052da740 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d9fe8 'next_state' 'int8_t':'char'
|     | | `-IntegerLiteral 0x55b5052da7b8 <col:27> 'int' 0
|     | |-CompoundStmt 0x55b5052da858 <col:30, line:429:3>
|     | | `-BinaryOperator 0x55b5052da838 <line:428:5, col:15> 'int' '='
|     | |   |-DeclRefExpr 0x55b5052da7f8 <col:5> 'int' lvalue Var 0x55b5052da110 'tmp___0' 'int'
|     | |   `-IntegerLiteral 0x55b5052da818 <col:15> 'int' 1
|     | `-IfStmt 0x55b5052dab70 <line:430:3, line:437:3> has_else
|     |   |-BinaryOperator 0x55b5052da908 <line:430:7, col:27> 'int' '=='
|     |   | |-CStyleCastExpr 0x55b5052da8c0 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55b5052da8a8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55b5052da870 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d9fe8 'next_state' 'int8_t':'char'
|     |   | `-IntegerLiteral 0x55b5052da8e8 <col:27> 'int' 1
|     |   |-CompoundStmt 0x55b5052da988 <col:30, line:432:3>
|     |   | `-BinaryOperator 0x55b5052da968 <line:431:5, col:15> 'int' '='
|     |   |   |-DeclRefExpr 0x55b5052da928 <col:5> 'int' lvalue Var 0x55b5052da110 'tmp___0' 'int'
|     |   |   `-IntegerLiteral 0x55b5052da948 <col:15> 'int' 1
|     |   `-IfStmt 0x55b5052dab48 <line:433:3, line:437:3> has_else
|     |     |-BinaryOperator 0x55b5052daa38 <line:433:7, col:27> 'int' '=='
|     |     | |-CStyleCastExpr 0x55b5052da9f0 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x55b5052da9d8 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x55b5052da9a0 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d9fe8 'next_state' 'int8_t':'char'
|     |     | `-IntegerLiteral 0x55b5052daa18 <col:27> 'int' 2
|     |     |-CompoundStmt 0x55b5052daab8 <col:30, line:435:3>
|     |     | `-BinaryOperator 0x55b5052daa98 <line:434:5, col:15> 'int' '='
|     |     |   |-DeclRefExpr 0x55b5052daa58 <col:5> 'int' lvalue Var 0x55b5052da110 'tmp___0' 'int'
|     |     |   `-IntegerLiteral 0x55b5052daa78 <col:15> 'int' 1
|     |     `-CompoundStmt 0x55b5052dab30 <line:435:10, line:437:3>
|     |       `-BinaryOperator 0x55b5052dab10 <line:436:5, col:15> 'int' '='
|     |         |-DeclRefExpr 0x55b5052daad0 <col:5> 'int' lvalue Var 0x55b5052da110 'tmp___0' 'int'
|     |         `-IntegerLiteral 0x55b5052daaf0 <col:15> 'int' 0
|     |-CallExpr 0x55b5052dac90 <line:438:3, col:36> 'void'
|     | |-ImplicitCastExpr 0x55b5052dac78 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b5052dabc0 <col:3> 'void (int)' Function 0x55b5052cd810 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x55b5052dacb8 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x55b5052dac50 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x55b5052dac10 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x55b5052dabe0 <col:29> 'int' lvalue Var 0x55b5052da110 'tmp___0' 'int'
|     |-BinaryOperator 0x55b5052daf78 <line:439:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dacd0 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052daf60 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b5052daf30 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x55b5052dae70 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x55b5052dad90 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b5052dad60 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b5052dad30 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b5052dacf0 <col:13> 'int8_t':'char' lvalue Var 0x55b5052d9fe8 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b5052dad78 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b5052dad48 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b5052dad10 <col:27> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b5052dae50 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b5052dae20 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b5052dadf0 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b5052dadb0 <col:36> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b5052dae38 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b5052dae08 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b5052dadd0 <col:47> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b5052daee8 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b5052daed0 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b5052dae90 <col:55> 'int8_t':'char' lvalue Var 0x55b5052d9fe8 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b5052daf18 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b5052daf00 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b5052daeb0 <col:68> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|     `-ReturnStmt 0x55b5052daf98 <line:440:3>
|-FunctionDecl 0x55b5052db0c8 <line:443:1, line:473:1> line:443:6 used gate3_each_pals_period 'void (void)'
| `-CompoundStmt 0x55b5052dc180 <line:444:1, line:473:1>
|   |-DeclStmt 0x55b5052db1e0 <line:445:3, col:21>
|   | `-VarDecl 0x55b5052db178 <col:3, col:10> col:10 used next_state 'int8_t':'char'
|   |-DeclStmt 0x55b5052db270 <line:446:3, col:13>
|   | `-VarDecl 0x55b5052db208 <col:3, col:9> col:9 used tmp 'msg_t':'char'
|   |-DeclStmt 0x55b5052db308 <line:447:3, col:15>
|   | `-VarDecl 0x55b5052db2a0 <col:3, col:7> col:7 used tmp___0 'int'
|   `-CompoundStmt 0x55b5052dc128 <line:449:3, line:472:1>
|     |-BinaryOperator 0x55b5052db398 <line:450:3, col:40> '_Bool' '='
|     | |-DeclRefExpr 0x55b5052db320 <col:3> '_Bool' lvalue Var 0x55b5052cd9b8 'gate3Failed' '_Bool'
|     | `-CallExpr 0x55b5052db378 <col:17, col:40> '_Bool'
|     |   `-ImplicitCastExpr 0x55b5052db360 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b5052db340 <col:17> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|     |-CallExpr 0x55b5052db430 <line:451:3, col:36> 'void'
|     | |-ImplicitCastExpr 0x55b5052db418 <col:3> 'void (*)(int, _Bool)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b5052db3b8 <col:3> 'void (int, _Bool)' Function 0x55b5052d3c30 'write_history_bool' 'void (int, _Bool)'
|     | |-IntegerLiteral 0x55b5052db3d8 <col:22> 'int' 2
|     | `-ImplicitCastExpr 0x55b5052db460 <col:25> '_Bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052db3f8 <col:25> '_Bool' lvalue Var 0x55b5052cd9b8 'gate3Failed' '_Bool'
|     |-IfStmt 0x55b5052db7a8 <line:452:3, line:455:3>
|     | |-ImplicitCastExpr 0x55b5052db498 <line:452:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b5052db478 <col:7> '_Bool' lvalue Var 0x55b5052cd9b8 'gate3Failed' '_Bool'
|     | `-CompoundStmt 0x55b5052db788 <col:20, line:455:3>
|     |   |-BinaryOperator 0x55b5052db758 <line:453:5, col:60> 'int8_t':'char' '='
|     |   | |-DeclRefExpr 0x55b5052db4b0 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|     |   | `-ImplicitCastExpr 0x55b5052db740 <col:15, col:60> 'int8_t':'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x55b5052db710 <col:15, col:60> 'int'
|     |   |     |-BinaryOperator 0x55b5052db650 <col:15, col:44> 'int' '&&'
|     |   |     | |-BinaryOperator 0x55b5052db570 <col:15, col:24> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x55b5052db540 <col:15> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x55b5052db510 <col:15> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x55b5052db4d0 <col:15> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x55b5052db558 <col:24> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x55b5052db528 <col:24> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x55b5052db4f0 <col:24> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x55b5052db630 <col:33, col:44> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x55b5052db600 <col:33> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x55b5052db5d0 <col:33> 'int8_t':'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x55b5052db590 <col:33> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|     |   |     |   `-ImplicitCastExpr 0x55b5052db618 <col:44> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x55b5052db5e8 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x55b5052db5b0 <col:44> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x55b5052db6c8 <col:52> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x55b5052db6b0 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x55b5052db670 <col:52> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x55b5052db6f8 <col:60> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x55b5052db6e0 <col:60> 'int8_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b5052db690 <col:60> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|     |   `-ReturnStmt 0x55b5052db778 <line:454:5>
|     |-BinaryOperator 0x55b5052db838 <line:456:3, col:32> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b5052db7c0 <col:3> 'msg_t':'char' lvalue Var 0x55b5052db208 'tmp' 'msg_t':'char'
|     | `-CallExpr 0x55b5052db818 <col:9, col:32> 'char'
|     |   `-ImplicitCastExpr 0x55b5052db800 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x55b5052db7e0 <col:9> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|     |-BinaryOperator 0x55b5052db8b0 <line:457:3, col:16> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052db858 <col:3> 'int8_t':'char' lvalue Var 0x55b5052db178 'next_state' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052db898 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052db878 <col:16> 'msg_t':'char' lvalue Var 0x55b5052db208 'tmp' 'msg_t':'char'
|     |-IfStmt 0x55b5052dbd40 <line:458:3, line:468:3> has_else
|     | |-BinaryOperator 0x55b5052db968 <line:458:7, col:27> 'int' '=='
|     | | |-CStyleCastExpr 0x55b5052db920 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b5052db908 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b5052db8d0 <col:13> 'int8_t':'char' lvalue Var 0x55b5052db178 'next_state' 'int8_t':'char'
|     | | `-IntegerLiteral 0x55b5052db948 <col:27> 'int' 0
|     | |-CompoundStmt 0x55b5052db9e8 <col:30, line:460:3>
|     | | `-BinaryOperator 0x55b5052db9c8 <line:459:5, col:15> 'int' '='
|     | |   |-DeclRefExpr 0x55b5052db988 <col:5> 'int' lvalue Var 0x55b5052db2a0 'tmp___0' 'int'
|     | |   `-IntegerLiteral 0x55b5052db9a8 <col:15> 'int' 1
|     | `-IfStmt 0x55b5052dbd18 <line:461:3, line:468:3> has_else
|     |   |-BinaryOperator 0x55b5052dba98 <line:461:7, col:27> 'int' '=='
|     |   | |-CStyleCastExpr 0x55b5052dba50 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55b5052dba38 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55b5052dba00 <col:13> 'int8_t':'char' lvalue Var 0x55b5052db178 'next_state' 'int8_t':'char'
|     |   | `-IntegerLiteral 0x55b5052dba78 <col:27> 'int' 1
|     |   |-CompoundStmt 0x55b5052dbb18 <col:30, line:463:3>
|     |   | `-BinaryOperator 0x55b5052dbaf8 <line:462:5, col:15> 'int' '='
|     |   |   |-DeclRefExpr 0x55b5052dbab8 <col:5> 'int' lvalue Var 0x55b5052db2a0 'tmp___0' 'int'
|     |   |   `-IntegerLiteral 0x55b5052dbad8 <col:15> 'int' 1
|     |   `-IfStmt 0x55b5052dbcf0 <line:464:3, line:468:3> has_else
|     |     |-BinaryOperator 0x55b5052dbbc8 <line:464:7, col:27> 'int' '=='
|     |     | |-CStyleCastExpr 0x55b5052dbb80 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x55b5052dbb68 <col:13> 'int8_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x55b5052dbb30 <col:13> 'int8_t':'char' lvalue Var 0x55b5052db178 'next_state' 'int8_t':'char'
|     |     | `-IntegerLiteral 0x55b5052dbba8 <col:27> 'int' 2
|     |     |-CompoundStmt 0x55b5052dbc60 <col:30, line:466:3>
|     |     | `-BinaryOperator 0x55b5052dbc28 <line:465:5, col:15> 'int' '='
|     |     |   |-DeclRefExpr 0x55b5052dbbe8 <col:5> 'int' lvalue Var 0x55b5052db2a0 'tmp___0' 'int'
|     |     |   `-IntegerLiteral 0x55b5052dbc08 <col:15> 'int' 1
|     |     `-CompoundStmt 0x55b5052dbcd8 <line:466:10, line:468:3>
|     |       `-BinaryOperator 0x55b5052dbcb8 <line:467:5, col:15> 'int' '='
|     |         |-DeclRefExpr 0x55b5052dbc78 <col:5> 'int' lvalue Var 0x55b5052db2a0 'tmp___0' 'int'
|     |         `-IntegerLiteral 0x55b5052dbc98 <col:15> 'int' 0
|     |-CallExpr 0x55b5052dbe10 <line:469:3, col:36> 'void'
|     | |-ImplicitCastExpr 0x55b5052dbdf8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b5052dbd68 <col:3> 'void (int)' Function 0x55b5052cd810 '__VERIFIER_assume' 'void (int)'
|     | `-ImplicitCastExpr 0x55b5052dbe38 <col:21, col:29> 'int' <IntegralCast>
|     |   `-CStyleCastExpr 0x55b5052dbdd0 <col:21, col:29> '_Bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x55b5052dbdb8 <col:29> 'int' <LValueToRValue> part_of_explicit_cast
|     |       `-DeclRefExpr 0x55b5052dbd88 <col:29> 'int' lvalue Var 0x55b5052db2a0 'tmp___0' 'int'
|     |-BinaryOperator 0x55b5052dc0f8 <line:470:3, col:68> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dbe50 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052dc0e0 <col:13, col:68> 'int8_t':'char' <IntegralCast>
|     |   `-ConditionalOperator 0x55b5052dc0b0 <col:13, col:68> 'int'
|     |     |-BinaryOperator 0x55b5052dbff0 <col:13, col:47> 'int' '&&'
|     |     | |-BinaryOperator 0x55b5052dbf10 <col:13, col:27> 'int' '!='
|     |     | | |-ImplicitCastExpr 0x55b5052dbee0 <col:13> 'int' <IntegralCast>
|     |     | | | `-ImplicitCastExpr 0x55b5052dbeb0 <col:13> 'int8_t':'char' <LValueToRValue>
|     |     | | |   `-DeclRefExpr 0x55b5052dbe70 <col:13> 'int8_t':'char' lvalue Var 0x55b5052db178 'next_state' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b5052dbef8 <col:27> 'int' <IntegralCast>
|     |     | |   `-ImplicitCastExpr 0x55b5052dbec8 <col:27> 'msg_t':'char' <LValueToRValue>
|     |     | |     `-DeclRefExpr 0x55b5052dbe90 <col:27> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |     | `-BinaryOperator 0x55b5052dbfd0 <col:36, col:47> 'int' '=='
|     |     |   |-ImplicitCastExpr 0x55b5052dbfa0 <col:36> 'int' <IntegralCast>
|     |     |   | `-ImplicitCastExpr 0x55b5052dbf70 <col:36> 'int8_t':'char' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x55b5052dbf30 <col:36> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|     |     |   `-ImplicitCastExpr 0x55b5052dbfb8 <col:47> 'int' <IntegralCast>
|     |     |     `-ImplicitCastExpr 0x55b5052dbf88 <col:47> 'msg_t':'char' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x55b5052dbf50 <col:47> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |     |-ImplicitCastExpr 0x55b5052dc068 <col:55> 'int' <IntegralCast>
|     |     | `-ImplicitCastExpr 0x55b5052dc050 <col:55> 'int8_t':'char' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x55b5052dc010 <col:55> 'int8_t':'char' lvalue Var 0x55b5052db178 'next_state' 'int8_t':'char'
|     |     `-ImplicitCastExpr 0x55b5052dc098 <col:68> 'int' <IntegralCast>
|     |       `-ImplicitCastExpr 0x55b5052dc080 <col:68> 'int8_t':'char' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b5052dc030 <col:68> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|     `-ReturnStmt 0x55b5052dc118 <line:471:3>
|-FunctionDecl 0x55b5052dc248 <line:474:1, line:522:1> line:474:6 used voter 'void (void)'
| `-CompoundStmt 0x55b5052dda00 <line:475:1, line:522:1>
|   |-DeclStmt 0x55b5052dc360 <line:476:3, col:22>
|   | `-VarDecl 0x55b5052dc2f8 <col:3, col:10> col:10 used voted_value 'int8_t':'char'
|   `-CompoundStmt 0x55b5052dd9a0 <line:478:3, line:521:1>
|     |-BinaryOperator 0x55b5052dc3d0 <line:479:3, col:17> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dc378 <col:3> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052dc3b8 <col:17> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052dc398 <col:17> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b5052dc448 <line:480:3, col:12> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dc3f0 <col:3> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b5052dc430 <col:12> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052dc410 <col:12> 'int8_t':'char' lvalue Var 0x55b5052a7680 'g1v_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b5052dc4c0 <line:481:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dc468 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a7680 'g1v_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052dc4a8 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052dc488 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b5052dc538 <line:482:3, col:12> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dc4e0 <col:3> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b5052dc520 <col:12> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052dc500 <col:12> 'int8_t':'char' lvalue Var 0x55b5052a77e8 'g2v_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b5052dc5b0 <line:483:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dc558 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a77e8 'g2v_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052dc598 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052dc578 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |-BinaryOperator 0x55b5052dc628 <line:484:3, col:12> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dc5d0 <col:3> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55b5052dc610 <col:12> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052dc5f0 <col:12> 'int8_t':'char' lvalue Var 0x55b5052a7950 'g3v_old' 'int8_t':'char'
|     |-BinaryOperator 0x55b5052dc6a0 <line:485:3, col:13> 'int8_t':'char' '='
|     | |-DeclRefExpr 0x55b5052dc648 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a7950 'g3v_old' 'int8_t':'char'
|     | `-ImplicitCastExpr 0x55b5052dc688 <col:13> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052dc668 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55b5052dd848 <line:486:3, line:518:3> has_else
|     | |-BinaryOperator 0x55b5052dc7b0 <line:486:7, col:29> 'int' '=='
|     | | |-CStyleCastExpr 0x55b5052dc710 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55b5052dc6f8 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55b5052dc6c0 <col:13> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     | | `-CStyleCastExpr 0x55b5052dc788 <col:23, col:29> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x55b5052dc770 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |     `-DeclRefExpr 0x55b5052dc738 <col:29> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     | |-CompoundStmt 0x55b5052dca28 <col:37, line:492:3>
|     | | `-IfStmt 0x55b5052dca00 <line:487:5, line:491:5> has_else
|     | |   |-BinaryOperator 0x55b5052dc8c0 <line:487:9, col:31> 'int' '=='
|     | |   | |-CStyleCastExpr 0x55b5052dc820 <col:9, col:15> 'int' <IntegralCast>
|     | |   | | `-ImplicitCastExpr 0x55b5052dc808 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   | |   `-DeclRefExpr 0x55b5052dc7d0 <col:15> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     | |   | `-CStyleCastExpr 0x55b5052dc898 <col:25, col:31> 'int' <IntegralCast>
|     | |   |   `-ImplicitCastExpr 0x55b5052dc880 <col:31> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |     `-DeclRefExpr 0x55b5052dc848 <col:31> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     | |   |-CompoundStmt 0x55b5052dc958 <col:38, line:489:5>
|     | |   | `-BinaryOperator 0x55b5052dc938 <line:488:7, col:21> 'int8_t':'char' '='
|     | |   |   |-DeclRefExpr 0x55b5052dc8e0 <col:7> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     | |   |   `-ImplicitCastExpr 0x55b5052dc920 <col:21> 'msg_t':'char' <LValueToRValue>
|     | |   |     `-DeclRefExpr 0x55b5052dc900 <col:21> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     | |   `-CompoundStmt 0x55b5052dc9e8 <line:489:12, line:491:5>
|     | |     `-BinaryOperator 0x55b5052dc9c8 <line:490:7, col:21> 'int8_t':'char' '='
|     | |       |-DeclRefExpr 0x55b5052dc970 <col:7> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     | |       `-ImplicitCastExpr 0x55b5052dc9b0 <col:21> 'msg_t':'char' <LValueToRValue>
|     | |         `-DeclRefExpr 0x55b5052dc990 <col:21> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     | `-IfStmt 0x55b5052dd820 <line:493:3, line:518:3> has_else
|     |   |-BinaryOperator 0x55b5052dcb30 <line:493:7, col:29> 'int' '=='
|     |   | |-CStyleCastExpr 0x55b5052dca90 <col:7, col:13> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55b5052dca78 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   | |   `-DeclRefExpr 0x55b5052dca40 <col:13> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |   | `-CStyleCastExpr 0x55b5052dcb08 <col:23, col:29> 'int' <IntegralCast>
|     |   |   `-ImplicitCastExpr 0x55b5052dcaf0 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x55b5052dcab8 <col:29> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     |   |-CompoundStmt 0x55b5052dcdb8 <col:37, line:499:3>
|     |   | `-IfStmt 0x55b5052dcd90 <line:494:5, line:498:5> has_else
|     |   |   |-BinaryOperator 0x55b5052dcc40 <line:494:9, col:31> 'int' '=='
|     |   |   | |-CStyleCastExpr 0x55b5052dcba0 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55b5052dcb88 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55b5052dcb50 <col:15> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |   |   | `-CStyleCastExpr 0x55b5052dcc18 <col:25, col:31> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55b5052dcc00 <col:31> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55b5052dcbc8 <col:31> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |   |   |-CompoundStmt 0x55b5052dcce8 <col:38, line:496:5>
|     |   |   | `-BinaryOperator 0x55b5052dccc8 <line:495:7, col:21> 'int8_t':'char' '='
|     |   |   |   |-DeclRefExpr 0x55b5052dcc70 <col:7> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     |   |   |   `-ImplicitCastExpr 0x55b5052dccb0 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |   |     `-DeclRefExpr 0x55b5052dcc90 <col:21> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |   |   `-CompoundStmt 0x55b5052dcd78 <line:496:12, line:498:5>
|     |   |     `-BinaryOperator 0x55b5052dcd58 <line:497:7, col:21> 'int8_t':'char' '='
|     |   |       |-DeclRefExpr 0x55b5052dcd00 <col:7> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     |   |       `-ImplicitCastExpr 0x55b5052dcd40 <col:21> 'msg_t':'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x55b5052dcd20 <col:21> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |   `-IfStmt 0x55b5052dd7f8 <line:500:3, line:518:3> has_else
|     |     |-BinaryOperator 0x55b5052dcec0 <line:500:7, col:29> 'int' '=='
|     |     | |-CStyleCastExpr 0x55b5052dce20 <col:7, col:13> 'int' <IntegralCast>
|     |     | | `-ImplicitCastExpr 0x55b5052dce08 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     | |   `-DeclRefExpr 0x55b5052dcdd0 <col:13> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |     | `-CStyleCastExpr 0x55b5052dce98 <col:23, col:29> 'int' <IntegralCast>
|     |     |   `-ImplicitCastExpr 0x55b5052dce80 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |     `-DeclRefExpr 0x55b5052dce48 <col:29> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     |     |-CompoundStmt 0x55b5052dd1b0 <col:37, line:507:3>
|     |     | |-BinaryOperator 0x55b5052dcf38 <line:501:5, col:19> 'int8_t':'char' '='
|     |     | | |-DeclRefExpr 0x55b5052dcee0 <col:5> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     |     | | `-ImplicitCastExpr 0x55b5052dcf20 <col:19> 'msg_t':'char' <LValueToRValue>
|     |     | |   `-DeclRefExpr 0x55b5052dcf00 <col:19> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |     | `-IfStmt 0x55b5052dd188 <line:502:5, line:506:5> has_else
|     |     |   |-BinaryOperator 0x55b5052dd048 <line:502:9, col:31> 'int' '=='
|     |     |   | |-CStyleCastExpr 0x55b5052dcfa8 <col:9, col:15> 'int' <IntegralCast>
|     |     |   | | `-ImplicitCastExpr 0x55b5052dcf90 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   | |   `-DeclRefExpr 0x55b5052dcf58 <col:15> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |     |   | `-CStyleCastExpr 0x55b5052dd020 <col:25, col:31> 'int' <IntegralCast>
|     |     |   |   `-ImplicitCastExpr 0x55b5052dd008 <col:31> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |     |   |     `-DeclRefExpr 0x55b5052dcfd0 <col:31> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |     |   |-CompoundStmt 0x55b5052dd0e0 <col:38, line:504:5>
|     |     |   | `-BinaryOperator 0x55b5052dd0c0 <line:503:7, col:21> 'int8_t':'char' '='
|     |     |   |   |-DeclRefExpr 0x55b5052dd068 <col:7> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     |     |   |   `-ImplicitCastExpr 0x55b5052dd0a8 <col:21> 'msg_t':'char' <LValueToRValue>
|     |     |   |     `-DeclRefExpr 0x55b5052dd088 <col:21> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |     |   `-CompoundStmt 0x55b5052dd170 <line:504:12, line:506:5>
|     |     |     `-BinaryOperator 0x55b5052dd150 <line:505:7, col:21> 'int8_t':'char' '='
|     |     |       |-DeclRefExpr 0x55b5052dd0f8 <col:7> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     |     |       `-ImplicitCastExpr 0x55b5052dd138 <col:21> 'msg_t':'char' <LValueToRValue>
|     |     |         `-DeclRefExpr 0x55b5052dd118 <col:21> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |     `-IfStmt 0x55b5052dd7d0 <line:508:3, line:518:3> has_else
|     |       |-BinaryOperator 0x55b5052dd2c0 <line:508:7, col:29> 'int' '!='
|     |       | |-CStyleCastExpr 0x55b5052dd220 <col:7, col:13> 'int' <IntegralCast>
|     |       | | `-ImplicitCastExpr 0x55b5052dd208 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       | |   `-DeclRefExpr 0x55b5052dd1d0 <col:13> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |       | `-CStyleCastExpr 0x55b5052dd298 <col:23, col:29> 'int' <IntegralCast>
|     |       |   `-ImplicitCastExpr 0x55b5052dd280 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |       |     `-DeclRefExpr 0x55b5052dd248 <col:29> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |       |-CompoundStmt 0x55b5052dd358 <col:36, line:510:3>
|     |       | `-BinaryOperator 0x55b5052dd338 <line:509:5, col:19> 'int8_t':'char' '='
|     |       |   |-DeclRefExpr 0x55b5052dd2e0 <col:5> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     |       |   `-ImplicitCastExpr 0x55b5052dd320 <col:19> 'msg_t':'char' <LValueToRValue>
|     |       |     `-DeclRefExpr 0x55b5052dd300 <col:19> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|     |       `-IfStmt 0x55b5052dd7a8 <line:511:3, line:518:3> has_else
|     |         |-BinaryOperator 0x55b5052dd460 <line:511:7, col:29> 'int' '!='
|     |         | |-CStyleCastExpr 0x55b5052dd3c0 <col:7, col:13> 'int' <IntegralCast>
|     |         | | `-ImplicitCastExpr 0x55b5052dd3a8 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         | |   `-DeclRefExpr 0x55b5052dd370 <col:13> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |         | `-CStyleCastExpr 0x55b5052dd438 <col:23, col:29> 'int' <IntegralCast>
|     |         |   `-ImplicitCastExpr 0x55b5052dd420 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |         |     `-DeclRefExpr 0x55b5052dd3e8 <col:29> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |         |-CompoundStmt 0x55b5052dd4f8 <col:36, line:513:3>
|     |         | `-BinaryOperator 0x55b5052dd4d8 <line:512:5, col:19> 'int8_t':'char' '='
|     |         |   |-DeclRefExpr 0x55b5052dd480 <col:5> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     |         |   `-ImplicitCastExpr 0x55b5052dd4c0 <col:19> 'msg_t':'char' <LValueToRValue>
|     |         |     `-DeclRefExpr 0x55b5052dd4a0 <col:19> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|     |         `-IfStmt 0x55b5052dd780 <line:514:3, line:518:3> has_else
|     |           |-BinaryOperator 0x55b5052dd600 <line:514:7, col:29> 'int' '!='
|     |           | |-CStyleCastExpr 0x55b5052dd560 <col:7, col:13> 'int' <IntegralCast>
|     |           | | `-ImplicitCastExpr 0x55b5052dd548 <col:13> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           | |   `-DeclRefExpr 0x55b5052dd510 <col:13> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     |           | `-CStyleCastExpr 0x55b5052dd5d8 <col:23, col:29> 'int' <IntegralCast>
|     |           |   `-ImplicitCastExpr 0x55b5052dd5c0 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |           |     `-DeclRefExpr 0x55b5052dd588 <col:29> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|     |           |-CompoundStmt 0x55b5052dd698 <col:36, line:516:3>
|     |           | `-BinaryOperator 0x55b5052dd678 <line:515:5, col:19> 'int8_t':'char' '='
|     |           |   |-DeclRefExpr 0x55b5052dd620 <col:5> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     |           |   `-ImplicitCastExpr 0x55b5052dd660 <col:19> 'msg_t':'char' <LValueToRValue>
|     |           |     `-DeclRefExpr 0x55b5052dd640 <col:19> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|     |           `-CompoundStmt 0x55b5052dd768 <line:516:10, line:518:3>
|     |             `-CallExpr 0x55b5052dd740 <line:517:5, col:20> 'void'
|     |               |-ImplicitCastExpr 0x55b5052dd728 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|     |               | `-DeclRefExpr 0x55b5052dd6b0 <col:5> 'void (_Bool)' Function 0x55b5052cdc60 'assert' 'void (_Bool)'
|     |               `-CStyleCastExpr 0x55b5052dd700 <col:12, col:19> '_Bool' <IntegralToBoolean>
|     |                 `-IntegerLiteral 0x55b5052dd6d0 <col:19> 'int' 0
|     |-CallExpr 0x55b5052dd948 <line:519:3, col:36> 'void'
|     | |-ImplicitCastExpr 0x55b5052dd930 <col:3> 'void (*)(int, int8_t)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b5052dd870 <col:3> 'void (int, int8_t)' Function 0x55b5052d36d0 'write_history_int8' 'void (int, int8_t)'
|     | |-IntegerLiteral 0x55b5052dd890 <col:22> 'int' 3
|     | `-ImplicitCastExpr 0x55b5052dd978 <col:25> 'int8_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b5052dd8b0 <col:25> 'int8_t':'char' lvalue Var 0x55b5052dc2f8 'voted_value' 'int8_t':'char'
|     `-ReturnStmt 0x55b5052dd990 <line:520:3>
|-VarDecl 0x55b5052ddc80 <line:523:1, col:134> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x55b5052dde38 <col:27, col:134> 'void (*[4])(void)'
|   |-UnaryOperator 0x55b5052ddd08 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55b5052ddce8 <col:36> 'void (void)' Function 0x55b5052d8c10 'gate1_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x55b5052ddd40 <col:65, col:67> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55b5052ddd20 <col:67> 'void (void)' Function 0x55b5052d9f38 'gate2_each_pals_period' 'void (void)'
|   |-UnaryOperator 0x55b5052ddd78 <col:96, col:98> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55b5052ddd58 <col:98> 'void (void)' Function 0x55b5052db0c8 'gate3_each_pals_period' 'void (void)'
|   `-UnaryOperator 0x55b5052dddb0 <col:127, col:129> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x55b5052ddd90 <col:129> 'void (void)' Function 0x55b5052dc248 'voter' 'void (void)'
|-FunctionDecl 0x55b5052ddf38 <line:524:1, line:576:1> line:524:5 main 'int (void)'
| `-CompoundStmt 0x55b5052df860 <line:525:1, line:576:1>
|   |-DeclStmt 0x55b5052de090 <line:526:3, col:10>
|   | `-VarDecl 0x55b5052de028 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x55b5052de128 <line:527:3, col:10>
|   | `-VarDecl 0x55b5052de0c0 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x55b5052df738 <line:529:3, line:574:1>
|   | |-BinaryOperator 0x55b5052de180 <line:530:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55b5052de140 <col:3> 'int' lvalue Var 0x55b5052de028 'c1' 'int'
|   | | `-IntegerLiteral 0x55b5052de160 <col:8> 'int' 0
|   | |-BinaryOperator 0x55b5052de218 <line:531:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de1a0 <col:3> '_Bool' lvalue Var 0x55b5052cd8c8 'gate1Failed' '_Bool'
|   | | `-CallExpr 0x55b5052de1f8 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de1e0 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de1c0 <col:17> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de2b0 <line:532:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de238 <col:3> '_Bool' lvalue Var 0x55b5052cd940 'gate2Failed' '_Bool'
|   | | `-CallExpr 0x55b5052de290 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de278 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de258 <col:17> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de348 <line:533:3, col:40> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de2d0 <col:3> '_Bool' lvalue Var 0x55b5052cd9b8 'gate3Failed' '_Bool'
|   | | `-CallExpr 0x55b5052de328 <col:17, col:40> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de310 <col:17> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de2f0 <col:17> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de3e0 <line:534:3, col:35> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052de368 <col:3> 'msg_t':'char' lvalue Var 0x55b5052cda30 'VALUE1' 'msg_t':'char'
|   | | `-CallExpr 0x55b5052de3c0 <col:12, col:35> 'char'
|   | |   `-ImplicitCastExpr 0x55b5052de3a8 <col:12> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de388 <col:12> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b5052de478 <line:535:3, col:35> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052de400 <col:3> 'msg_t':'char' lvalue Var 0x55b5052cdaa8 'VALUE2' 'msg_t':'char'
|   | | `-CallExpr 0x55b5052de458 <col:12, col:35> 'char'
|   | |   `-ImplicitCastExpr 0x55b5052de440 <col:12> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de420 <col:12> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b5052de510 <line:536:3, col:35> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052de498 <col:3> 'msg_t':'char' lvalue Var 0x55b5052cdb20 'VALUE3' 'msg_t':'char'
|   | | `-CallExpr 0x55b5052de4f0 <col:12, col:35> 'char'
|   | |   `-ImplicitCastExpr 0x55b5052de4d8 <col:12> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de4b8 <col:12> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b5052de5a8 <line:537:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de530 <col:3> '_Bool' lvalue Var 0x55b5052cdd18 'gate1Failed_History_0' '_Bool'
|   | | `-CallExpr 0x55b5052de588 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de570 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de550 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de640 <line:538:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de5c8 <col:3> '_Bool' lvalue Var 0x55b5052cdd90 'gate1Failed_History_1' '_Bool'
|   | | `-CallExpr 0x55b5052de620 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de608 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de5e8 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de6d8 <line:539:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de660 <col:3> '_Bool' lvalue Var 0x55b5052cde08 'gate1Failed_History_2' '_Bool'
|   | | `-CallExpr 0x55b5052de6b8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de6a0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de680 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de770 <line:540:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de6f8 <col:3> '_Bool' lvalue Var 0x55b5052cde80 'gate2Failed_History_0' '_Bool'
|   | | `-CallExpr 0x55b5052de750 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de738 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de718 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de808 <line:541:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de790 <col:3> '_Bool' lvalue Var 0x55b5052cdef8 'gate2Failed_History_1' '_Bool'
|   | | `-CallExpr 0x55b5052de7e8 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de7d0 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de7b0 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de8a0 <line:542:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de828 <col:3> '_Bool' lvalue Var 0x55b5052cdf70 'gate2Failed_History_2' '_Bool'
|   | | `-CallExpr 0x55b5052de880 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de868 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de848 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de938 <line:543:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de8c0 <col:3> '_Bool' lvalue Var 0x55b5052cdfe8 'gate3Failed_History_0' '_Bool'
|   | | `-CallExpr 0x55b5052de918 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de900 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de8e0 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052de9d0 <line:544:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de958 <col:3> '_Bool' lvalue Var 0x55b5052ce060 'gate3Failed_History_1' '_Bool'
|   | | `-CallExpr 0x55b5052de9b0 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052de998 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052de978 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052dea68 <line:545:3, col:50> '_Bool' '='
|   | | |-DeclRefExpr 0x55b5052de9f0 <col:3> '_Bool' lvalue Var 0x55b5052ce0d8 'gate3Failed_History_2' '_Bool'
|   | | `-CallExpr 0x55b5052dea48 <col:27, col:50> '_Bool'
|   | |   `-ImplicitCastExpr 0x55b5052dea30 <col:27> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052dea10 <col:27> '_Bool (void)' Function 0x55b5052cd570 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55b5052deb00 <line:546:3, col:49> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052dea88 <col:3> 'int8_t':'char' lvalue Var 0x55b5052ce150 'votedValue_History_0' 'int8_t':'char'
|   | | `-CallExpr 0x55b5052deae0 <col:26, col:49> 'char'
|   | |   `-ImplicitCastExpr 0x55b5052deac8 <col:26> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052deaa8 <col:26> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b5052deb98 <line:547:3, col:49> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052deb20 <col:3> 'int8_t':'char' lvalue Var 0x55b5052ce1c8 'votedValue_History_1' 'int8_t':'char'
|   | | `-CallExpr 0x55b5052deb78 <col:26, col:49> 'char'
|   | |   `-ImplicitCastExpr 0x55b5052deb60 <col:26> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052deb40 <col:26> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b5052dec30 <line:548:3, col:49> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052debb8 <col:3> 'int8_t':'char' lvalue Var 0x55b5052ce240 'votedValue_History_2' 'int8_t':'char'
|   | | `-CallExpr 0x55b5052dec10 <col:26, col:49> 'char'
|   | |   `-ImplicitCastExpr 0x55b5052debf8 <col:26> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052debd8 <col:26> 'char (void)' Function 0x55b5052cd690 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55b5052ded18 <line:549:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x55b5052dec50 <col:3> 'int' lvalue Var 0x55b5052de0c0 'i2' 'int'
|   | | `-CallExpr 0x55b5052decf8 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x55b5052dece0 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55b5052dec90 <col:8> 'int (void)' Function 0x55b5052d4558 'init' 'int (void)'
|   | |-CallExpr 0x55b5052ded90 <line:550:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x55b5052ded78 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55b5052ded38 <col:3> 'void (int)' Function 0x55b5052cd810 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x55b5052dedb8 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b5052ded58 <col:21> 'int' lvalue Var 0x55b5052de0c0 'i2' 'int'
|   | |-BinaryOperator 0x55b5052dee28 <line:551:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052dedd0 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a7680 'g1v_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b5052dee10 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b5052dedf0 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b5052deea0 <line:552:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052dee48 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b5052dee88 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b5052dee68 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b5052def18 <line:553:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052deec0 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a77e8 'g2v_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b5052def00 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b5052deee0 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b5052def90 <line:554:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052def38 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b5052def78 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b5052def58 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b5052df008 <line:555:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052defb0 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a7950 'g3v_old' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b5052deff0 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b5052defd0 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b5052df080 <line:556:3, col:13> 'int8_t':'char' '='
|   | | |-DeclRefExpr 0x55b5052df028 <col:3> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|   | | `-ImplicitCastExpr 0x55b5052df068 <col:13> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b5052df048 <col:13> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55b5052df0e0 <line:557:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55b5052df0a0 <col:3> 'int' lvalue Var 0x55b5052de0c0 'i2' 'int'
|   | | `-IntegerLiteral 0x55b5052df0c0 <col:8> 'int' 0
|   | `-WhileStmt 0x55b5052df720 <line:558:3, line:573:3>
|   |   |-IntegerLiteral 0x55b5052df100 <line:558:10> 'int' 1
|   |   `-CompoundStmt 0x55b5052df708 <col:13, line:573:3>
|   |     `-CompoundStmt 0x55b5052df698 <line:559:5, line:572:5>
|   |       |-CallExpr 0x55b5052df158 <line:560:5, col:28> 'void'
|   |       | `-ImplicitCastExpr 0x55b5052df140 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55b5052df120 <col:5> 'void (void)' Function 0x55b5052d8c10 'gate1_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55b5052df1b0 <line:561:5, col:28> 'void'
|   |       | `-ImplicitCastExpr 0x55b5052df198 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55b5052df178 <col:5> 'void (void)' Function 0x55b5052d9f38 'gate2_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55b5052df208 <line:562:5, col:28> 'void'
|   |       | `-ImplicitCastExpr 0x55b5052df1f0 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55b5052df1d0 <col:5> 'void (void)' Function 0x55b5052db0c8 'gate3_each_pals_period' 'void (void)'
|   |       |-CallExpr 0x55b5052df260 <line:563:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55b5052df248 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55b5052df228 <col:5> 'void (void)' Function 0x55b5052dc248 'voter' 'void (void)'
|   |       |-BinaryOperator 0x55b5052df2d8 <line:564:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b5052df280 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a7680 'g1v_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b5052df2c0 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b5052df2a0 <col:15> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b5052df350 <line:565:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b5052df2f8 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a76f8 'g1v_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b5052df338 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b5052df318 <col:15> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b5052df3c8 <line:566:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b5052df370 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a77e8 'g2v_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b5052df3b0 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b5052df390 <col:15> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b5052df440 <line:567:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b5052df3e8 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a7860 'g2v_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b5052df428 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b5052df408 <col:15> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b5052df4b8 <line:568:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b5052df460 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a7950 'g3v_old' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b5052df4a0 <col:15> 'int8_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b5052df480 <col:15> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|   |       |-BinaryOperator 0x55b5052df530 <line:569:5, col:15> 'int8_t':'char' '='
|   |       | |-DeclRefExpr 0x55b5052df4d8 <col:5> 'int8_t':'char' lvalue Var 0x55b5052a79c8 'g3v_new' 'int8_t':'char'
|   |       | `-ImplicitCastExpr 0x55b5052df518 <col:15> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55b5052df4f8 <col:15> 'msg_t':'char' lvalue Var 0x55b5052a7520 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55b5052df5c8 <line:570:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x55b5052df550 <col:5> 'int' lvalue Var 0x55b5052de028 'c1' 'int'
|   |       | `-CallExpr 0x55b5052df5a8 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x55b5052df590 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x55b5052df570 <col:10> 'int (void)' Function 0x55b5052d5080 'check' 'int (void)'
|   |       `-CallExpr 0x55b5052df640 <line:571:5, col:14> 'void'
|   |         |-ImplicitCastExpr 0x55b5052df628 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x55b5052df5e8 <col:5> 'void (_Bool)' Function 0x55b5052cdc60 'assert' 'void (_Bool)'
|   |         `-ImplicitCastExpr 0x55b5052df680 <col:12> '_Bool' <IntegralToBoolean>
|   |           `-ImplicitCastExpr 0x55b5052df668 <col:12> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55b5052df608 <col:12> 'int' lvalue Var 0x55b5052de028 'c1' 'int'
|   `-ReturnStmt 0x55b5052df850 <line:575:1, col:8>
|     `-IntegerLiteral 0x55b5052df830 <col:8> 'int' 0
`-FunctionDecl 0x55b5052df930 prev 0x55b5052cdc60 <line:577:1, line:588:1> line:577:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x55b5052df8a0 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x55b5052dfb80 <line:578:1, line:588:1>
    `-CompoundStmt 0x55b5052dfb68 <line:581:3, line:587:1>
      `-IfStmt 0x55b5052dfb50 <line:582:3, line:586:3>
        |-UnaryOperator 0x55b5052dfa10 <line:582:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x55b5052df9f8 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x55b5052df9d8 <col:9> '_Bool' lvalue ParmVar 0x55b5052df8a0 'arg' '_Bool'
        `-CompoundStmt 0x55b5052dfb38 <col:14, line:586:3>
          `-CompoundStmt 0x55b5052dfb20 <line:583:5, line:585:5>
            `-LabelStmt 0x55b5052dfb08 <line:584:5, col:29> 'ERROR'
              `-CallExpr 0x55b5052dfa98 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x55b5052dfa80 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x55b5052dfa28 <col:12> 'void () __attribute__((noreturn))' Function 0x55b5052a6b40 '__VERIFIER_error' 'void () __attribute__((noreturn))'
