TranslationUnitDecl 0x55a0c55ab538 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55a0c55abdf8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55a0c55abad0 '__int128'
|-TypedefDecl 0x55a0c55abe68 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55a0c55abaf0 'unsigned __int128'
|-TypedefDecl 0x55a0c55ac170 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55a0c55abf40 'struct __NSConstantString_tag'
|   `-Record 0x55a0c55abec0 '__NSConstantString_tag'
|-TypedefDecl 0x55a0c55ac218 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55a0c55ac1d0 'char *'
|   `-BuiltinType 0x55a0c55ab5d0 'char'
|-TypedefDecl 0x55a0c55eb350 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55a0c55ac4b0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55a0c55ac2f0 'struct __va_list_tag'
|     `-Record 0x55a0c55ac270 '__va_list_tag'
|-EnumDecl 0x55a0c55eb3a8 <termination-crafted-lit/NoriSharma-FSE2013-Fig8_false-no-overflow.c:10:9, col:26> col:9
| |-EnumConstantDecl 0x55a0c55eb478 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x55a0c55eb4c8 <col:22> col:22 true 'int'
|-TypedefDecl 0x55a0c55eb580 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x55a0c55eb520 'enum bool' sugar
|   `-EnumType 0x55a0c55eb450 'bool'
|     `-Enum 0x55a0c55eb3a8 ''
|-FunctionDecl 0x55a0c55eb6c8 <line:12:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x55a0c55eb808 <line:14:1, line:33:1> line:14:5 main 'int ()'
  `-CompoundStmt 0x55a0c560f9f0 <col:12, line:33:1>
    |-DeclStmt 0x55a0c55ebc68 <line:15:5, col:28>
    | |-VarDecl 0x55a0c55eb8c0 <col:5, col:9> col:9 used c 'int'
    | |-VarDecl 0x55a0c55eb940 <col:5, col:12> col:12 used u 'int'
    | |-VarDecl 0x55a0c55eb9c0 <col:5, col:15> col:15 used v 'int'
    | |-VarDecl 0x55a0c55eba40 <col:5, col:18> col:18 used w 'int'
    | |-VarDecl 0x55a0c55ebac0 <col:5, col:21> col:21 used x 'int'
    | |-VarDecl 0x55a0c55ebb40 <col:5, col:24> col:24 used y 'int'
    | `-VarDecl 0x55a0c55ebbc0 <col:5, col:27> col:27 used z 'int'
    |-BinaryOperator 0x55a0c55ebd28 <line:16:2, col:28> 'int' '='
    | |-DeclRefExpr 0x55a0c55ebc80 <col:2> 'int' lvalue Var 0x55a0c55ebac0 'x' 'int'
    | `-CallExpr 0x55a0c55ebd08 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x55a0c55ebcf0 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55a0c55ebca0 <col:6> 'int (void)' Function 0x55a0c55eb6c8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55a0c55ebdc0 <line:17:2, col:28> 'int' '='
    | |-DeclRefExpr 0x55a0c55ebd48 <col:2> 'int' lvalue Var 0x55a0c55ebb40 'y' 'int'
    | `-CallExpr 0x55a0c55ebda0 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x55a0c55ebd88 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55a0c55ebd68 <col:6> 'int (void)' Function 0x55a0c55eb6c8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55a0c55ebe58 <line:18:2, col:28> 'int' '='
    | |-DeclRefExpr 0x55a0c55ebde0 <col:2> 'int' lvalue Var 0x55a0c55ebbc0 'z' 'int'
    | `-CallExpr 0x55a0c55ebe38 <col:6, col:28> 'int'
    |   `-ImplicitCastExpr 0x55a0c55ebe20 <col:6> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55a0c55ebe00 <col:6> 'int (void)' Function 0x55a0c55eb6c8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55a0c55ebed0 <line:19:5, col:9> 'int' '='
    | |-DeclRefExpr 0x55a0c55ebe78 <col:5> 'int' lvalue Var 0x55a0c55eb940 'u' 'int'
    | `-ImplicitCastExpr 0x55a0c55ebeb8 <col:9> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55a0c55ebe98 <col:9> 'int' lvalue Var 0x55a0c55ebac0 'x' 'int'
    |-BinaryOperator 0x55a0c55ebf48 <line:20:5, col:9> 'int' '='
    | |-DeclRefExpr 0x55a0c55ebef0 <col:5> 'int' lvalue Var 0x55a0c55eb9c0 'v' 'int'
    | `-ImplicitCastExpr 0x55a0c55ebf30 <col:9> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55a0c55ebf10 <col:9> 'int' lvalue Var 0x55a0c55ebb40 'y' 'int'
    |-BinaryOperator 0x55a0c55ebfc0 <line:21:5, col:9> 'int' '='
    | |-DeclRefExpr 0x55a0c55ebf68 <col:5> 'int' lvalue Var 0x55a0c55eba40 'w' 'int'
    | `-ImplicitCastExpr 0x55a0c55ebfa8 <col:9> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55a0c55ebf88 <col:9> 'int' lvalue Var 0x55a0c55ebbc0 'z' 'int'
    |-BinaryOperator 0x55a0c55ec020 <line:22:5, col:9> 'int' '='
    | |-DeclRefExpr 0x55a0c55ebfe0 <col:5> 'int' lvalue Var 0x55a0c55eb8c0 'c' 'int'
    | `-IntegerLiteral 0x55a0c55ec000 <col:9> 'int' 0
    |-WhileStmt 0x55a0c560f9a8 <line:23:5, line:31:5>
    | |-BinaryOperator 0x55a0c55ec0b0 <line:23:12, col:17> 'int' '>='
    | | |-ImplicitCastExpr 0x55a0c55ec080 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55a0c55ec040 <col:12> 'int' lvalue Var 0x55a0c55ebac0 'x' 'int'
    | | `-ImplicitCastExpr 0x55a0c55ec098 <col:17> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55a0c55ec060 <col:17> 'int' lvalue Var 0x55a0c55ebb40 'y' 'int'
    | `-CompoundStmt 0x55a0c560f988 <col:20, line:31:5>
    |   |-BinaryOperator 0x55a0c55ec168 <line:24:6, col:14> 'int' '='
    |   | |-DeclRefExpr 0x55a0c55ec0d0 <col:6> 'int' lvalue Var 0x55a0c55eb8c0 'c' 'int'
    |   | `-BinaryOperator 0x55a0c55ec148 <col:10, col:14> 'int' '+'
    |   |   |-ImplicitCastExpr 0x55a0c55ec130 <col:10> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x55a0c55ec0f0 <col:10> 'int' lvalue Var 0x55a0c55eb8c0 'c' 'int'
    |   |   `-IntegerLiteral 0x55a0c55ec110 <col:14> 'int' 1
    |   `-IfStmt 0x55a0c560f960 <line:25:6, line:30:6> has_else
    |     |-BinaryOperator 0x55a0c55ec1e0 <line:25:10, col:14> 'int' '>'
    |     | |-ImplicitCastExpr 0x55a0c55ec1c8 <col:10> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x55a0c55ec188 <col:10> 'int' lvalue Var 0x55a0c55ebbc0 'z' 'int'
    |     | `-IntegerLiteral 0x55a0c55ec1a8 <col:14> 'int' 1
    |     |-CompoundStmt 0x55a0c560f870 <col:17, line:28:6>
    |     | |-BinaryOperator 0x55a0c55ec298 <line:26:7, col:15> 'int' '='
    |     | | |-DeclRefExpr 0x55a0c55ec200 <col:7> 'int' lvalue Var 0x55a0c55ebbc0 'z' 'int'
    |     | | `-BinaryOperator 0x55a0c55ec278 <col:11, col:15> 'int' '-'
    |     | |   |-ImplicitCastExpr 0x55a0c55ec260 <col:11> 'int' <LValueToRValue>
    |     | |   | `-DeclRefExpr 0x55a0c55ec220 <col:11> 'int' lvalue Var 0x55a0c55ebbc0 'z' 'int'
    |     | |   `-IntegerLiteral 0x55a0c55ec240 <col:15> 'int' 1
    |     | `-BinaryOperator 0x55a0c560f850 <line:27:7, col:15> 'int' '='
    |     |   |-DeclRefExpr 0x55a0c55ec2b8 <col:7> 'int' lvalue Var 0x55a0c55ebac0 'x' 'int'
    |     |   `-BinaryOperator 0x55a0c560f830 <col:11, col:15> 'int' '+'
    |     |     |-ImplicitCastExpr 0x55a0c55ec318 <col:11> 'int' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x55a0c55ec2d8 <col:11> 'int' lvalue Var 0x55a0c55ebac0 'x' 'int'
    |     |     `-ImplicitCastExpr 0x55a0c55ec330 <col:15> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55a0c55ec2f8 <col:15> 'int' lvalue Var 0x55a0c55ebbc0 'z' 'int'
    |     `-CompoundStmt 0x55a0c560f948 <line:28:13, line:30:6>
    |       `-BinaryOperator 0x55a0c560f928 <line:29:7, col:15> 'int' '='
    |         |-DeclRefExpr 0x55a0c560f890 <col:7> 'int' lvalue Var 0x55a0c55ebb40 'y' 'int'
    |         `-BinaryOperator 0x55a0c560f908 <col:11, col:15> 'int' '+'
    |           |-ImplicitCastExpr 0x55a0c560f8f0 <col:11> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55a0c560f8b0 <col:11> 'int' lvalue Var 0x55a0c55ebb40 'y' 'int'
    |           `-IntegerLiteral 0x55a0c560f8d0 <col:15> 'int' 1
    `-ReturnStmt 0x55a0c560f9e0 <line:32:5, col:12>
      `-IntegerLiteral 0x55a0c560f9c0 <col:12> 'int' 0
