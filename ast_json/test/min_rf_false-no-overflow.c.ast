TranslationUnitDecl 0x55ea8c0154d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55ea8c015d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55ea8c015a70 '__int128'
|-TypedefDecl 0x55ea8c015e08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55ea8c015a90 'unsigned __int128'
|-TypedefDecl 0x55ea8c016110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55ea8c015ee0 'struct __NSConstantString_tag'
|   `-Record 0x55ea8c015e60 '__NSConstantString_tag'
|-TypedefDecl 0x55ea8c0161b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55ea8c016170 'char *'
|   `-BuiltinType 0x55ea8c015570 'char'
|-TypedefDecl 0x55ea8c0553e0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55ea8c016450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55ea8c016290 'struct __va_list_tag'
|     `-Record 0x55ea8c016210 '__va_list_tag'
|-EnumDecl 0x55ea8c055438 <termination-crafted-lit/min_rf_false-no-overflow.c:9:9, col:26> col:9
| |-EnumConstantDecl 0x55ea8c055508 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x55ea8c055558 <col:22> col:22 true 'int'
|-TypedefDecl 0x55ea8c055610 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x55ea8c0555b0 'enum bool' sugar
|   `-EnumType 0x55ea8c0554e0 'bool'
|     `-Enum 0x55ea8c055438 ''
|-FunctionDecl 0x55ea8c055758 <line:11:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x55ea8c055898 <line:13:1, line:38:1> line:13:5 main 'int ()'
  `-CompoundStmt 0x55ea8c078aa8 <line:14:1, line:38:1>
    |-DeclStmt 0x55ea8c055a50 <line:15:5, col:12>
    | |-VarDecl 0x55ea8c055950 <col:5, col:9> col:9 used x 'int'
    | `-VarDecl 0x55ea8c0559d0 <col:5, col:11> col:11 used y 'int'
    |-DeclStmt 0x55ea8c055ae8 <line:16:5, col:10>
    | `-VarDecl 0x55ea8c055a80 <col:5, col:9> col:9 used z 'int'
    |-BinaryOperator 0x55ea8c055ba8 <line:18:5, col:31> 'int' '='
    | |-DeclRefExpr 0x55ea8c055b00 <col:5> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    | `-CallExpr 0x55ea8c055b88 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x55ea8c055b70 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55ea8c055b20 <col:9> 'int (void)' Function 0x55ea8c055758 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x55ea8c055c40 <line:19:5, col:31> 'int' '='
    | |-DeclRefExpr 0x55ea8c055bc8 <col:5> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    | `-CallExpr 0x55ea8c055c20 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x55ea8c055c08 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55ea8c055be8 <col:9> 'int (void)' Function 0x55ea8c055758 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x55ea8c078a60 <line:21:5, line:36:5>
    | |-BinaryOperator 0x55ea8c055d50 <line:21:12, col:25> 'int' '&&'
    | | |-BinaryOperator 0x55ea8c055cb8 <col:12, col:16> 'int' '>'
    | | | |-ImplicitCastExpr 0x55ea8c055ca0 <col:12> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x55ea8c055c60 <col:12> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    | | | `-IntegerLiteral 0x55ea8c055c80 <col:16> 'int' 0
    | | `-BinaryOperator 0x55ea8c055d30 <col:21, col:25> 'int' '>'
    | |   |-ImplicitCastExpr 0x55ea8c055d18 <col:21> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x55ea8c055cd8 <col:21> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    | |   `-IntegerLiteral 0x55ea8c055cf8 <col:25> 'int' 0
    | `-CompoundStmt 0x55ea8c078a40 <col:28, line:36:5>
    |   |-IfStmt 0x55ea8c055f20 <line:22:7, line:26:7> has_else
    |   | |-BinaryOperator 0x55ea8c055de0 <line:22:11, col:13> 'int' '>'
    |   | | |-ImplicitCastExpr 0x55ea8c055db0 <col:11> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x55ea8c055d70 <col:11> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    |   | | `-ImplicitCastExpr 0x55ea8c055dc8 <col:13> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55ea8c055d90 <col:13> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    |   | |-CompoundStmt 0x55ea8c055e78 <col:16, line:24:7>
    |   | | `-BinaryOperator 0x55ea8c055e58 <line:23:11, col:15> 'int' '='
    |   | |   |-DeclRefExpr 0x55ea8c055e00 <col:11> 'int' lvalue Var 0x55ea8c055a80 'z' 'int'
    |   | |   `-ImplicitCastExpr 0x55ea8c055e40 <col:15> 'int' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x55ea8c055e20 <col:15> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    |   | `-CompoundStmt 0x55ea8c055f08 <line:24:14, line:26:7>
    |   |   `-BinaryOperator 0x55ea8c055ee8 <line:25:11, col:15> 'int' '='
    |   |     |-DeclRefExpr 0x55ea8c055e90 <col:11> 'int' lvalue Var 0x55ea8c055a80 'z' 'int'
    |   |     `-ImplicitCastExpr 0x55ea8c055ed0 <col:15> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55ea8c055eb0 <col:15> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    |   `-IfStmt 0x55ea8c078a18 <line:27:7, line:35:7> has_else
    |     |-BinaryOperator 0x55ea8c055fc0 <line:27:11, col:38> 'int' '!='
    |     | |-CallExpr 0x55ea8c055f80 <col:11, col:33> 'int'
    |     | | `-ImplicitCastExpr 0x55ea8c055f68 <col:11> 'int (*)(void)' <FunctionToPointerDecay>
    |     | |   `-DeclRefExpr 0x55ea8c055f48 <col:11> 'int (void)' Function 0x55ea8c055758 '__VERIFIER_nondet_int' 'int (void)'
    |     | `-IntegerLiteral 0x55ea8c055fa0 <col:38> 'int' 0
    |     |-CompoundStmt 0x55ea8c056238 <col:41, line:31:7>
    |     | |-BinaryOperator 0x55ea8c056090 <line:28:11, col:17> 'int' '='
    |     | | |-DeclRefExpr 0x55ea8c055fe0 <col:11> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    |     | | `-BinaryOperator 0x55ea8c056070 <col:15, col:17> 'int' '+'
    |     | |   |-ImplicitCastExpr 0x55ea8c056040 <col:15> 'int' <LValueToRValue>
    |     | |   | `-DeclRefExpr 0x55ea8c056000 <col:15> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    |     | |   `-ImplicitCastExpr 0x55ea8c056058 <col:17> 'int' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55ea8c056020 <col:17> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    |     | |-BinaryOperator 0x55ea8c056148 <line:29:11, col:17> 'int' '='
    |     | | |-DeclRefExpr 0x55ea8c0560b0 <col:11> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    |     | | `-BinaryOperator 0x55ea8c056128 <col:15, col:17> 'int' '-'
    |     | |   |-ImplicitCastExpr 0x55ea8c056110 <col:15> 'int' <LValueToRValue>
    |     | |   | `-DeclRefExpr 0x55ea8c0560d0 <col:15> 'int' lvalue Var 0x55ea8c055a80 'z' 'int'
    |     | |   `-IntegerLiteral 0x55ea8c0560f0 <col:17> 'int' 1
    |     | `-BinaryOperator 0x55ea8c056218 <line:30:11, col:17> 'int' '='
    |     |   |-DeclRefExpr 0x55ea8c056168 <col:11> 'int' lvalue Var 0x55ea8c055a80 'z' 'int'
    |     |   `-BinaryOperator 0x55ea8c0561f8 <col:15, col:17> 'int' '+'
    |     |     |-ImplicitCastExpr 0x55ea8c0561c8 <col:15> 'int' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x55ea8c056188 <col:15> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    |     |     `-ImplicitCastExpr 0x55ea8c0561e0 <col:17> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55ea8c0561a8 <col:17> 'int' lvalue Var 0x55ea8c055a80 'z' 'int'
    |     `-CompoundStmt 0x55ea8c0789f0 <line:31:14, line:35:7>
    |       |-BinaryOperator 0x55ea8c056310 <line:32:11, col:17> 'int' '='
    |       | |-DeclRefExpr 0x55ea8c056260 <col:11> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    |       | `-BinaryOperator 0x55ea8c0562f0 <col:15, col:17> 'int' '+'
    |       |   |-ImplicitCastExpr 0x55ea8c0562c0 <col:15> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x55ea8c056280 <col:15> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    |       |   `-ImplicitCastExpr 0x55ea8c0562d8 <col:17> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55ea8c0562a0 <col:17> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    |       |-BinaryOperator 0x55ea8c078900 <line:33:11, col:17> 'int' '='
    |       | |-DeclRefExpr 0x55ea8c056330 <col:11> 'int' lvalue Var 0x55ea8c0559d0 'y' 'int'
    |       | `-BinaryOperator 0x55ea8c0563a8 <col:15, col:17> 'int' '-'
    |       |   |-ImplicitCastExpr 0x55ea8c056390 <col:15> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x55ea8c056350 <col:15> 'int' lvalue Var 0x55ea8c055a80 'z' 'int'
    |       |   `-IntegerLiteral 0x55ea8c056370 <col:17> 'int' 1
    |       `-BinaryOperator 0x55ea8c0789d0 <line:34:11, col:17> 'int' '='
    |         |-DeclRefExpr 0x55ea8c078920 <col:11> 'int' lvalue Var 0x55ea8c055a80 'z' 'int'
    |         `-BinaryOperator 0x55ea8c0789b0 <col:15, col:17> 'int' '+'
    |           |-ImplicitCastExpr 0x55ea8c078980 <col:15> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55ea8c078940 <col:15> 'int' lvalue Var 0x55ea8c055950 'x' 'int'
    |           `-ImplicitCastExpr 0x55ea8c078998 <col:17> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55ea8c078960 <col:17> 'int' lvalue Var 0x55ea8c055a80 'z' 'int'
    `-ReturnStmt 0x55ea8c078a98 <line:37:5, col:12>
      `-IntegerLiteral 0x55ea8c078a78 <col:12> 'int' 0
