TranslationUnitDecl 0x555a3eebf4d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x555a3eebfd98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x555a3eebfa70 '__int128'
|-TypedefDecl 0x555a3eebfe08 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x555a3eebfa90 'unsigned __int128'
|-TypedefDecl 0x555a3eec0110 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x555a3eebfee0 'struct __NSConstantString_tag'
|   `-Record 0x555a3eebfe60 '__NSConstantString_tag'
|-TypedefDecl 0x555a3eec01b8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x555a3eec0170 'char *'
|   `-BuiltinType 0x555a3eebf570 'char'
|-TypedefDecl 0x555a3eeff600 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x555a3eec0450 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x555a3eec0290 'struct __va_list_tag'
|     `-Record 0x555a3eec0210 '__va_list_tag'
|-TypedefDecl 0x555a3eeff670 <termination-crafted-lit/cstrncmp_false-no-overflow.c:5:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x555a3eebf690 'unsigned long'
|-FunctionDecl 0x555a3eeff880 <line:7:35> col:35 implicit used malloc 'void *(unsigned long)' extern
| `-ParmVarDecl 0x555a3eeff920 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x555a3eeff990 prev 0x555a3eeff880 <col:1, col:56> col:35 used malloc 'void *(unsigned long)'
| `-ParmVarDecl 0x555a3eeff708 <col:43, col:50> col:50 __size 'size_t':'unsigned long'
|-FunctionDecl 0x555a3eeffb08 <line:9:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-FunctionDecl 0x555a3eeffcc8 <line:12:1, line:20:1> line:12:7 used build_nondet_String 'char *(void)'
| `-CompoundStmt 0x555a3ef00310 <col:33, line:20:1>
|   |-DeclStmt 0x555a3eeffe78 <line:13:5, col:41>
|   | `-VarDecl 0x555a3eeffd80 <col:5, col:40> col:9 used length 'int' cinit
|   |   `-CallExpr 0x555a3eeffe58 <col:18, col:40> 'int'
|   |     `-ImplicitCastExpr 0x555a3eeffe40 <col:18> 'int (*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x555a3eeffde8 <col:18> 'int (void)' Function 0x555a3eeffb08 '__VERIFIER_nondet_int' 'int (void)'
|   |-IfStmt 0x555a3eefff80 <line:14:5, line:16:5>
|   | |-BinaryOperator 0x555a3eeffee8 <line:14:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x555a3eeffed0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555a3eeffe90 <col:9> 'int' lvalue Var 0x555a3eeffd80 'length' 'int'
|   | | `-IntegerLiteral 0x555a3eeffeb0 <col:18> 'int' 1
|   | `-CompoundStmt 0x555a3eefff68 <col:21, line:16:5>
|   |   `-BinaryOperator 0x555a3eefff48 <line:15:9, col:18> 'int' '='
|   |     |-DeclRefExpr 0x555a3eefff08 <col:9> 'int' lvalue Var 0x555a3eeffd80 'length' 'int'
|   |     `-IntegerLiteral 0x555a3eefff28 <col:18> 'int' 1
|   |-DeclStmt 0x555a3ef00190 <line:17:5, col:63>
|   | `-VarDecl 0x555a3eefffb0 <col:5, col:62> col:11 used nondetString 'char *' cinit
|   |   `-CStyleCastExpr 0x555a3ef00168 <col:26, col:62> 'char *' <BitCast>
|   |     `-CallExpr 0x555a3ef00128 <col:34, col:62> 'void *'
|   |       |-ImplicitCastExpr 0x555a3ef00110 <col:34> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x555a3ef00018 <col:34> 'void *(unsigned long)' Function 0x555a3eeff990 'malloc' 'void *(unsigned long)'
|   |       `-BinaryOperator 0x555a3ef000b8 <col:41, col:61> 'unsigned long' '*'
|   |         |-ImplicitCastExpr 0x555a3ef000a0 <col:41> 'unsigned long' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555a3ef00088 <col:41> 'int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555a3ef00038 <col:41> 'int' lvalue Var 0x555a3eeffd80 'length' 'int'
|   |         `-UnaryExprOrTypeTraitExpr 0x555a3ef00068 <col:50, col:61> 'unsigned long' sizeof 'char'
|   |-BinaryOperator 0x555a3ef002a8 <line:18:5, col:30> 'char' '='
|   | |-ArraySubscriptExpr 0x555a3ef00258 <col:5, col:26> 'char' lvalue
|   | | |-ImplicitCastExpr 0x555a3ef00240 <col:5> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555a3ef001a8 <col:5> 'char *' lvalue Var 0x555a3eefffb0 'nondetString' 'char *'
|   | | `-BinaryOperator 0x555a3ef00220 <col:18, col:25> 'int' '-'
|   | |   |-ImplicitCastExpr 0x555a3ef00208 <col:18> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555a3ef001c8 <col:18> 'int' lvalue Var 0x555a3eeffd80 'length' 'int'
|   | |   `-IntegerLiteral 0x555a3ef001e8 <col:25> 'int' 1
|   | `-ImplicitCastExpr 0x555a3ef00290 <col:30> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x555a3ef00278 <col:30> 'int' 0
|   `-ReturnStmt 0x555a3ef00300 <line:19:5, col:12>
|     `-ImplicitCastExpr 0x555a3ef002e8 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x555a3ef002c8 <col:12> 'char *' lvalue Var 0x555a3eefffb0 'nondetString' 'char *'
|-FunctionDecl 0x555a3ef257d0 <line:26:1, line:44:2> line:26:6 used cstrncmp 'int (const char *, const char *, int)':'int (const char *, const char *, int)'
| |-ParmVarDecl 0x555a3ef00360 <col:16, col:28> col:28 used s1 'const char *'
| |-ParmVarDecl 0x555a3ef003e0 <col:32, col:44> col:44 used s2 'const char *'
| |-ParmVarDecl 0x555a3ef00460 <col:48, col:52> col:52 used n 'int'
| `-CompoundStmt 0x555a3ef26348 <line:27:2, line:44:2>
|   |-DeclStmt 0x555a3ef259a0 <line:28:6, col:28>
|   | |-VarDecl 0x555a3ef258a0 <col:6, col:20> col:20 used uc1 'unsigned char'
|   | `-VarDecl 0x555a3ef25920 <col:6, col:25> col:25 used uc2 'unsigned char'
|   |-IfStmt 0x555a3ef25a60 <line:30:6, line:31:17>
|   | |-BinaryOperator 0x555a3ef25a10 <line:30:10, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x555a3ef259f8 <col:10> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555a3ef259b8 <col:10> 'int' lvalue ParmVar 0x555a3ef00460 'n' 'int'
|   | | `-IntegerLiteral 0x555a3ef259d8 <col:15> 'int' 0
|   | `-ReturnStmt 0x555a3ef25a50 <line:31:10, col:17>
|   |   `-IntegerLiteral 0x555a3ef25a30 <col:17> 'int' 0
|   |-WhileStmt 0x555a3ef25e90 <line:33:6, line:40:6>
|   | |-BinaryOperator 0x555a3ef25c40 <line:33:13, col:32> 'int' '&&'
|   | | |-BinaryOperator 0x555a3ef25ad0 <col:13, col:19> 'int' '>'
|   | | | |-UnaryOperator 0x555a3ef25a98 <col:13, col:14> 'int' postfix '--'
|   | | | | `-DeclRefExpr 0x555a3ef25a78 <col:13> 'int' lvalue ParmVar 0x555a3ef00460 'n' 'int'
|   | | | `-IntegerLiteral 0x555a3ef25ab0 <col:19> 'int' 0
|   | | `-BinaryOperator 0x555a3ef25c20 <col:24, col:32> 'int' '=='
|   | |   |-ImplicitCastExpr 0x555a3ef25bf0 <col:24, col:25> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x555a3ef25bc0 <col:24, col:25> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x555a3ef25b58 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x555a3ef25b40 <col:25> 'const char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x555a3ef25b20 <col:25> 'const char *' lvalue ParmVar 0x555a3ef00360 's1' 'const char *'
|   | |   `-ImplicitCastExpr 0x555a3ef25c08 <col:31, col:32> 'int' <IntegralCast>
|   | |     `-ImplicitCastExpr 0x555a3ef25bd8 <col:31, col:32> 'char' <LValueToRValue>
|   | |       `-UnaryOperator 0x555a3ef25ba8 <col:31, col:32> 'const char' lvalue prefix '*' cannot overflow
|   | |         `-ImplicitCastExpr 0x555a3ef25b90 <col:32> 'const char *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x555a3ef25b70 <col:32> 'const char *' lvalue ParmVar 0x555a3ef003e0 's2' 'const char *'
|   | `-CompoundStmt 0x555a3ef25e68 <col:36, line:40:6>
|   |   |-IfStmt 0x555a3ef25de0 <line:36:10, line:37:21>
|   |   | |-BinaryOperator 0x555a3ef25d90 <line:36:14, col:31> 'int' '||'
|   |   | | |-BinaryOperator 0x555a3ef25cb8 <col:14, col:19> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x555a3ef25ca0 <col:14> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x555a3ef25c60 <col:14> 'int' lvalue ParmVar 0x555a3ef00460 'n' 'int'
|   |   | | | `-IntegerLiteral 0x555a3ef25c80 <col:19> 'int' 0
|   |   | | `-BinaryOperator 0x555a3ef25d70 <col:24, col:31> 'int' '=='
|   |   | |   |-ImplicitCastExpr 0x555a3ef25d58 <col:24, col:25> 'int' <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x555a3ef25d40 <col:24, col:25> 'char' <LValueToRValue>
|   |   | |   |   `-UnaryOperator 0x555a3ef25d10 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   |     `-ImplicitCastExpr 0x555a3ef25cf8 <col:25> 'const char *' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x555a3ef25cd8 <col:25> 'const char *' lvalue ParmVar 0x555a3ef00360 's1' 'const char *'
|   |   | |   `-CharacterLiteral 0x555a3ef25d28 <col:31> 'int' 0
|   |   | `-ReturnStmt 0x555a3ef25dd0 <line:37:14, col:21>
|   |   |   `-IntegerLiteral 0x555a3ef25db0 <col:21> 'int' 0
|   |   |-UnaryOperator 0x555a3ef25e18 <line:38:10, col:12> 'const char *' postfix '++'
|   |   | `-DeclRefExpr 0x555a3ef25df8 <col:10> 'const char *' lvalue ParmVar 0x555a3ef00360 's1' 'const char *'
|   |   `-UnaryOperator 0x555a3ef25e50 <line:39:10, col:12> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x555a3ef25e30 <col:10> 'const char *' lvalue ParmVar 0x555a3ef003e0 's2' 'const char *'
|   |-BinaryOperator 0x555a3ef25fc8 <line:41:6, col:34> 'unsigned char' '='
|   | |-DeclRefExpr 0x555a3ef25ea8 <col:6> 'unsigned char' lvalue Var 0x555a3ef258a0 'uc1' 'unsigned char'
|   | `-ImplicitCastExpr 0x555a3ef25fb0 <col:12, col:34> 'unsigned char' <LValueToRValue>
|   |   `-ParenExpr 0x555a3ef25f90 <col:12, col:34> 'unsigned char' lvalue
|   |     `-UnaryOperator 0x555a3ef25f78 <col:13, col:32> 'unsigned char' lvalue prefix '*' cannot overflow
|   |       `-CStyleCastExpr 0x555a3ef25f50 <col:14, col:32> 'unsigned char *' <BitCast>
|   |         `-ImplicitCastExpr 0x555a3ef25f38 <col:32> 'const char *' <LValueToRValue> part_of_explicit_cast
|   |           `-DeclRefExpr 0x555a3ef25f00 <col:32> 'const char *' lvalue ParmVar 0x555a3ef00360 's1' 'const char *'
|   |-BinaryOperator 0x555a3ef260d0 <line:42:6, col:34> 'unsigned char' '='
|   | |-DeclRefExpr 0x555a3ef25fe8 <col:6> 'unsigned char' lvalue Var 0x555a3ef25920 'uc2' 'unsigned char'
|   | `-ImplicitCastExpr 0x555a3ef260b8 <col:12, col:34> 'unsigned char' <LValueToRValue>
|   |   `-ParenExpr 0x555a3ef26098 <col:12, col:34> 'unsigned char' lvalue
|   |     `-UnaryOperator 0x555a3ef26080 <col:13, col:32> 'unsigned char' lvalue prefix '*' cannot overflow
|   |       `-CStyleCastExpr 0x555a3ef26058 <col:14, col:32> 'unsigned char *' <BitCast>
|   |         `-ImplicitCastExpr 0x555a3ef26040 <col:32> 'const char *' <LValueToRValue> part_of_explicit_cast
|   |           `-DeclRefExpr 0x555a3ef26008 <col:32> 'const char *' lvalue ParmVar 0x555a3ef003e0 's2' 'const char *'
|   `-ReturnStmt 0x555a3ef26338 <line:43:6, col:44>
|     `-ParenExpr 0x555a3ef26318 <col:13, col:44> 'int'
|       `-ConditionalOperator 0x555a3ef262e8 <col:14, col:43> 'int'
|         |-ParenExpr 0x555a3ef261b0 <col:14, col:24> 'int'
|         | `-BinaryOperator 0x555a3ef26190 <col:15, col:21> 'int' '<'
|         |   |-ImplicitCastExpr 0x555a3ef26160 <col:15> 'int' <IntegralCast>
|         |   | `-ImplicitCastExpr 0x555a3ef26130 <col:15> 'unsigned char' <LValueToRValue>
|         |   |   `-DeclRefExpr 0x555a3ef260f0 <col:15> 'unsigned char' lvalue Var 0x555a3ef258a0 'uc1' 'unsigned char'
|         |   `-ImplicitCastExpr 0x555a3ef26178 <col:21> 'int' <IntegralCast>
|         |     `-ImplicitCastExpr 0x555a3ef26148 <col:21> 'unsigned char' <LValueToRValue>
|         |       `-DeclRefExpr 0x555a3ef26110 <col:21> 'unsigned char' lvalue Var 0x555a3ef25920 'uc2' 'unsigned char'
|         |-UnaryOperator 0x555a3ef261f0 <col:28, col:29> 'int' prefix '-'
|         | `-IntegerLiteral 0x555a3ef261d0 <col:29> 'int' 1
|         `-ParenExpr 0x555a3ef262c8 <col:33, col:43> 'int'
|           `-BinaryOperator 0x555a3ef262a8 <col:34, col:40> 'int' '>'
|             |-ImplicitCastExpr 0x555a3ef26278 <col:34> 'int' <IntegralCast>
|             | `-ImplicitCastExpr 0x555a3ef26248 <col:34> 'unsigned char' <LValueToRValue>
|             |   `-DeclRefExpr 0x555a3ef26208 <col:34> 'unsigned char' lvalue Var 0x555a3ef258a0 'uc1' 'unsigned char'
|             `-ImplicitCastExpr 0x555a3ef26290 <col:40> 'int' <IntegralCast>
|               `-ImplicitCastExpr 0x555a3ef26260 <col:40> 'unsigned char' <LValueToRValue>
|                 `-DeclRefExpr 0x555a3ef26228 <col:40> 'unsigned char' lvalue Var 0x555a3ef25920 'uc2' 'unsigned char'
`-FunctionDecl 0x555a3ef26418 <line:46:1, line:48:1> line:46:5 main 'int ()'
  `-CompoundStmt 0x555a3ef26710 <col:12, line:48:1>
    `-ReturnStmt 0x555a3ef26700 <line:47:5, col:88>
      `-CallExpr 0x555a3ef26698 <col:12, col:88> 'int'
        |-ImplicitCastExpr 0x555a3ef26680 <col:12> 'int (*)(const char *, const char *, int)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x555a3ef264b8 <col:12> 'int (const char *, const char *, int)':'int (const char *, const char *, int)' Function 0x555a3ef257d0 'cstrncmp' 'int (const char *, const char *, int)':'int (const char *, const char *, int)'
        |-ImplicitCastExpr 0x555a3ef266d0 <col:21, col:41> 'const char *' <NoOp>
        | `-CallExpr 0x555a3ef26548 <col:21, col:41> 'char *'
        |   `-ImplicitCastExpr 0x555a3ef26530 <col:21> 'char *(*)(void)' <FunctionToPointerDecay>
        |     `-DeclRefExpr 0x555a3ef264d8 <col:21> 'char *(void)' Function 0x555a3eeffcc8 'build_nondet_String' 'char *(void)'
        |-ImplicitCastExpr 0x555a3ef266e8 <col:43, col:63> 'const char *' <NoOp>
        | `-CallExpr 0x555a3ef265a0 <col:43, col:63> 'char *'
        |   `-ImplicitCastExpr 0x555a3ef26588 <col:43> 'char *(*)(void)' <FunctionToPointerDecay>
        |     `-DeclRefExpr 0x555a3ef26568 <col:43> 'char *(void)' Function 0x555a3eeffcc8 'build_nondet_String' 'char *(void)'
        `-CallExpr 0x555a3ef265f8 <col:65, col:87> 'int'
          `-ImplicitCastExpr 0x555a3ef265e0 <col:65> 'int (*)(void)' <FunctionToPointerDecay>
            `-DeclRefExpr 0x555a3ef265c0 <col:65> 'int (void)' Function 0x555a3eeffb08 '__VERIFIER_nondet_int' 'int (void)'
