TranslationUnitDecl 0x55aeacfedf88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55aeacfee848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55aeacfee520 '__int128'
|-TypedefDecl 0x55aeacfee8b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55aeacfee540 'unsigned __int128'
|-TypedefDecl 0x55aeacfeebc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55aeacfee990 'struct __NSConstantString_tag'
|   `-Record 0x55aeacfee910 '__NSConstantString_tag'
|-TypedefDecl 0x55aeacfeec68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55aeacfeec20 'char *'
|   `-BuiltinType 0x55aeacfee020 'char'
|-TypedefDecl 0x55aead02db60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55aeacfeef00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55aeacfeed40 'struct __va_list_tag'
|     `-Record 0x55aeacfeecc0 '__va_list_tag'
|-FunctionDecl 0x55aead02dc80 <pthread-wmm/safe032_power.opt_false-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x55aead02de50 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55aead02dd80 <col:31> col:34 'int'
|-FunctionDecl 0x55aead02dfc8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x55aead02e0f0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55aead02e238 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55aead02e1a8 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x55aead02e468 <col:40, col:99>
|   |-IfStmt 0x55aead02e438 <col:42, col:88>
|   | |-UnaryOperator 0x55aead02e318 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x55aead02e300 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55aead02e2e0 <col:47> 'int' lvalue ParmVar 0x55aead02e1a8 'expression' 'int'
|   | `-CompoundStmt 0x55aead02e420 <col:59, col:88>
|   |   `-LabelStmt 0x55aead02e408 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x55aead02e398 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x55aead02e380 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x55aead02e330 <col:68> 'void () __attribute__((noreturn))' Function 0x55aead02e0f0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x55aead02e450 <col:89>
|   `-ReturnStmt 0x55aead02e458 <col:91>
|-FunctionDecl 0x55aead02e4b0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x55aead02e570 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x55aead02e8f0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55aead02e628 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x55aead02e6a8 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x55aead02e728 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55aead02e7a8 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55aead02e9b0 <line:11:22>
|-FunctionDecl 0x55aead053f10 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55aead02ea20 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x55aead02eaa0 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x55aead053d40 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55aead053dc0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55aead053fd0 <line:14:22>
|-FunctionDecl 0x55aead054280 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55aead054040 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x55aead0540c0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x55aead054140 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x55aead054338 <line:16:22>
|-TypedefDecl 0x55aead0543a8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x55aeacfee0e0 'unsigned char'
|-TypedefDecl 0x55aead054418 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x55aeacfee100 'unsigned short'
|-TypedefDecl 0x55aead054488 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-TypedefDecl 0x55aead0544f8 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead054568 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x55aeacfee040 'signed char'
|-TypedefDecl 0x55aead0545d8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x55aeacfee0e0 'unsigned char'
|-TypedefDecl 0x55aead054648 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x55aeacfee060 'short'
|-TypedefDecl 0x55aead0546b8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x55aeacfee100 'unsigned short'
|-TypedefDecl 0x55aead054728 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x55aeacfee080 'int'
|-TypedefDecl 0x55aead054798 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-TypedefDecl 0x55aead054808 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead054878 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead0548e8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead054958 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead0549c8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead054a38 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-TypedefDecl 0x55aead054aa8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-TypedefDecl 0x55aead054b18 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead054b88 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead054bf8 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-TypedefDecl 0x55aead054c68 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead054cd8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead054d68 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead054dd8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x55aeacfee080 'int'
|-RecordDecl 0x55aead054e30 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x55aead054f78 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x55aead055030 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x55aead054fd0 'struct __fsid_t' sugar
|   `-RecordType 0x55aead054eb0 '__fsid_t'
|     `-Record 0x55aead054e30 ''
|-TypedefDecl 0x55aead0550b8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead055128 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead055198 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead055208 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-TypedefDecl 0x55aead055278 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead0552e8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-TypedefDecl 0x55aead055358 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead0553c8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x55aeacfee080 'int'
|-TypedefDecl 0x55aead055438 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x55aeacfee080 'int'
|-TypedefDecl 0x55aead0554a8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x55aeacfee080 'int'
|-TypedefDecl 0x55aead055518 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x55aeacfee7a0 'void *'
|   `-BuiltinType 0x55aeacfedfe0 'void'
|-TypedefDecl 0x55aead055588 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead0555f8 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead055668 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead0556d8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead055748 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead0557b8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead055828 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead055898 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead055908 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead055978 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead0559e8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead055a78 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x55aead055a40 '__off64_t' sugar
|   |-Typedef 0x55aead054d68 '__off64_t'
|   `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead055b70 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x55aead055b30 '__quad_t *'
|   `-TypedefType 0x55aead055ad0 '__quad_t' sugar
|     |-Typedef 0x55aead0548e8 '__quad_t'
|     `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead055be0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x55aeacfeec20 'char *'
|   `-BuiltinType 0x55aeacfee020 'char'
|-TypedefDecl 0x55aead055c50 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead055cc0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-FunctionDecl 0x55aead055e38 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x55aead055d60 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x55aead056148 <line:72:1, line:74:1>
|   `-ReturnStmt 0x55aead056138 <line:73:3, col:34>
|     `-CallExpr 0x55aead0560f8 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x55aead0560e0 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55aead056070 <col:10> '<builtin fn type>' Function 0x55aead055ee0 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x55aead056120 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55aead056090 <col:29> 'unsigned int' lvalue ParmVar 0x55aead055d60 '__bsx' 'unsigned int'
|-FunctionDecl 0x55aead055ee0 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x55aead055f80 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x55aead055ff0 <col:10> Implicit
| `-ConstAttr 0x55aead056048 <col:10> Implicit
|-FunctionDecl 0x55aead0562a0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x55aead056198 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x55aead0565b8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x55aead0565a8 <line:78:3, col:34>
|     `-CallExpr 0x55aead056568 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x55aead056550 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55aead0564d8 <col:10> '<builtin fn type>' Function 0x55aead056348 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x55aead056590 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55aead0564f8 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x55aead056198 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x55aead056348 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x55aead0563e8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x55aead056458 <col:10> Implicit
| `-ConstAttr 0x55aead0564b0 <col:10> Implicit
|-TypedefDecl 0x55aead0565e8 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-TypedefDecl 0x55aead056678 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x55aead056640 '__time_t' sugar
|   |-Typedef 0x55aead055278 '__time_t'
|   `-BuiltinType 0x55aeacfee0a0 'long'
|-RecordDecl 0x55aead0566d0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x55aead056788 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x55aead056818 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x55aead0568a8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x55aead056870 '__pid_t' sugar
|   |-Typedef 0x55aead054dd8 '__pid_t'
|   `-BuiltinType 0x55aeacfee080 'int'
|-RecordDecl 0x55aead056900 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x55aead0569c0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x55aead056a10 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x55aead056ad0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x55aead056b38 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-RecordDecl 0x55aead056b90 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x55aead058e70 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x55aead058f20 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x55aead058ec0 'struct cpu_set_t' sugar
|   `-RecordType 0x55aead056c10 'cpu_set_t'
|     `-Record 0x55aead056b90 ''
|-FunctionDecl 0x55aead0591f8 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x55aead058fc8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55aead0590d0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x55aead0592a8 <line:108:19>
|-FunctionDecl 0x55aead059480 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x55aead059310 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x55aead059528 <col:69>
|-FunctionDecl 0x55aead0596a0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x55aead059590 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x55aead059748 <col:64>
|-FunctionDecl 0x55aead059a08 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x55aead0597b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55aead0598e8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55aead059ab8 <line:114:22>
|-FunctionDecl 0x55aead059e60 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x55aead059b20 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55aead059c18 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x55aead059f10 <col:88>
|-FunctionDecl 0x55aead05a1c8 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55aead059f78 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55aead059ff8 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x55aead05a088 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55aead05a280 <col:62>
|-FunctionDecl 0x55aead05a3f8 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x55aead05a2e8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x55aead05a4a0 <col:63>
|-FunctionDecl 0x55aead05a5c8 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x55aead05a668 <col:47>
|-FunctionDecl 0x55aead05a770 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x55aead05a6d8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55aead05a818 <col:69>
|-FunctionDecl 0x55aead05a920 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x55aead05a888 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55aead05a9c8 <col:69>
|-FunctionDecl 0x55aead05ac88 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55aead05aa30 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55aead05ab68 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x55aead05ad38 <col:88>
|-TypedefDecl 0x55aead05adc8 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x55aead05ad90 '__clock_t' sugar
|   |-Typedef 0x55aead0550b8 '__clock_t'
|   `-BuiltinType 0x55aeacfee0a0 'long'
|-TypedefDecl 0x55aead05b7e0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x55aead05ae20 '__clockid_t' sugar
|   |-Typedef 0x55aead0554a8 '__clockid_t'
|   `-BuiltinType 0x55aeacfee080 'int'
|-TypedefDecl 0x55aead05b878 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x55aead05b840 '__timer_t' sugar
|   |-Typedef 0x55aead055518 '__timer_t'
|   `-PointerType 0x55aeacfee7a0 'void *'
|     `-BuiltinType 0x55aeacfedfe0 'void'
|-RecordDecl 0x55aead05b8d0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x55aead05b990 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x55aead05b9f8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x55aead05ba60 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x55aead05bac8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x55aead05bb30 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x55aead05bb98 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x55aead05bc00 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x55aead05bc68 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x55aead05bcd0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x55aead05bd38 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x55aead05bda0 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x55aead05bdf0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x55aead05beb8 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x55aead05bf28 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x55aead05bfd0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x55aead05c1a0 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x55aead05c240 <col:45>
|-FunctionDecl 0x55aead05c420 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x55aead05c310 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x55aead05c4c8 <col:54>
|-FunctionDecl 0x55aead05c6c8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x55aead05c530 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x55aead05c5a8 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x55aead05c778 <line:158:22>
| `-ConstAttr 0x55aead05d410 <col:63>
|-FunctionDecl 0x55aead05d610 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55aead05d508 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55aead05d6b8 <col:56>
|-FunctionDecl 0x55aead05da60 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x55aead05d728 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x55aead05d7a0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55aead05d820 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x55aead05d918 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x55aead05db20 <col:54>
|-RecordDecl 0x55aead05db78 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x55aead05dc28 parent 0x55aeacfedf88 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x55aead05de88 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x55aead05df28 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x55aead05df90 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x55aead05dff8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x55aead05e0e8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x55aead05e208 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x55aead05e1b0 'struct __locale_struct *'
|   `-ElaboratedType 0x55aead05e140 'struct __locale_struct' sugar
|     `-RecordType 0x55aead05dc00 'struct __locale_struct'
|       `-Record 0x55aead05db78 '__locale_struct'
|-TypedefDecl 0x55aead05e2b8 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x55aead05e280 '__locale_t' sugar
|   |-Typedef 0x55aead05e208 '__locale_t'
|   `-PointerType 0x55aead05e1b0 'struct __locale_struct *'
|     `-ElaboratedType 0x55aead05e140 'struct __locale_struct' sugar
|       `-RecordType 0x55aead05dc00 'struct __locale_struct'
|         `-Record 0x55aead05db78 '__locale_struct'
|-FunctionDecl 0x55aead05e6b0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x55aead05e328 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x55aead05e3a0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55aead05e438 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x55aead05e4c8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55aead05e540 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x55aead05e778 <col:40>
|-FunctionDecl 0x55aead05e968 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55aead05e840 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x55aead05ea10 <col:66>
|-FunctionDecl 0x55aead05eb20 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55aead05ea78 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x55aead05ebc8 <col:69>
|-FunctionDecl 0x55aead05edf8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55aead05ec30 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55aead05ecc0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55aead05eea8 <col:52>
|-FunctionDecl 0x55aead05f050 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55aead05ef10 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55aead05efa0 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55aead05f100 <col:55>
|-FunctionDecl 0x55aead05f298 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x55aead05f180 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x55aead05f340 <col:62>
|-FunctionDecl 0x55aead05f578 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x55aead05f3a8 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x55aead05f620 <col:60>
|-FunctionDecl 0x55aead05f848 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55aead05f6a0 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55aead05f720 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x55aead05f8f8 <col:44>
|-FunctionDecl 0x55aead05fb08 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55aead05f960 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55aead05f9e0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x55aead05fbb8 <col:49>
|-VarDecl 0x55aead05fcb8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x55aead05fd38 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x55aead05fdb8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x55aead05fe80 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x55aead05ffb0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x55aead060050 <col:42>
|-VarDecl 0x55aead0600c0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x55aead060140 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x55aead0602c8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x55aead0601b8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x55aead060370 <col:57>
|-FunctionDecl 0x55aead0614f0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55aead0603f0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55aead061598 <col:56>
|-FunctionDecl 0x55aead0616a8 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55aead061618 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x55aead061750 <col:59>
|-FunctionDecl 0x55aead061858 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x55aead0617c0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x55aead061900 <col:48>
| `-ConstAttr 0x55aead061958 <col:89>
|-FunctionDecl 0x55aead061bb8 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55aead061a08 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x55aead061a98 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x55aead061e18 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55aead061ca8 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55aead061d38 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x55aead061ec8 <col:88>
|-FunctionDecl 0x55aead062060 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55aead061f30 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55aead061fc0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x55aead062110 <col:88>
|-FunctionDecl 0x55aead062328 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x55aead062178 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55aead062208 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x55aead0623d8 <line:209:22>
|-FunctionDecl 0x55aead062778 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55aead062440 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55aead062500 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x55aead062590 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x55aead062620 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x55aead062a78 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x55aead062878 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x55aead062950 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x55aead062b28 <col:85>
|-FunctionDecl 0x55aead062f18 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x55aead062b90 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55aead062cc8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x55aead062dd0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x55aead062fd0 <col:52>
|-FunctionDecl 0x55aead063148 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x55aead063038 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55aead0631f0 <col:61>
|-FunctionDecl 0x55aead063668 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x55aead063258 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55aead0632d8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x55aead063408 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x55aead063510 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x55aead063728 <col:62>
|-FunctionDecl 0x55aead063948 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x55aead063790 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55aead063820 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x55aead0639f8 <line:222:22>
|-FunctionDecl 0x55aead063af8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x55aead063a60 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55aead063ba0 <col:65>
|-TypedefDecl 0x55aead063c10 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x55aeacfee140 'unsigned long'
|-RecordDecl 0x55aead063c68 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x55aead063db0 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55aead063e18 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55aead063ec8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x55aead063e70 'union pthread_attr_t' sugar
|   `-RecordType 0x55aead063cf0 'union pthread_attr_t'
|     `-Record 0x55aead063c68 'pthread_attr_t'
|-RecordDecl 0x55aead063f20 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x55aead064098 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x55aead064110 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x55aead0641c0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x55aead064160 'struct __pthread_internal_list' sugar
|   `-RecordType 0x55aead063fa0 'struct __pthread_internal_list'
|     `-Record 0x55aead063f20 '__pthread_internal_list'
|-RecordDecl 0x55aead064230 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x55aead0642d8 parent 0x55aeacfedf88 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x55aead0643b0 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55aead064418 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x55aead064480 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x55aead068530 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x55aead068598 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x55aead068600 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x55aead068688 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x55aead068740 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x55aead068830 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x55aead068898 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55aead068a20 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x55aead0689c0 'union pthread_mutex_t' sugar
|   `-RecordType 0x55aead0642b0 'pthread_mutex_t'
|     `-Record 0x55aead064230 ''
|-RecordDecl 0x55aead068a90 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x55aead068bd0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55aead068c38 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55aead068cf0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x55aead068c90 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x55aead068b10 'pthread_mutexattr_t'
|     `-Record 0x55aead068a90 ''
|-RecordDecl 0x55aead068d60 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x55aead068e08 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x55aead068ed0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55aead068f38 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x55aead068fa0 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x55aead069008 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x55aead069070 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x55aead0690d8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x55aead069140 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x55aead0691a8 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x55aead069260 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe032_power.opt_false-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/safe032_power.opt_false-unreach-call.i:259:3)'
| |-FieldDecl 0x55aead069350 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x55aead0693b8 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x55aead069540 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x55aead069490 'union pthread_cond_t' sugar
|   `-RecordType 0x55aead068de0 'pthread_cond_t'
|     `-Record 0x55aead068d60 ''
|-RecordDecl 0x55aead0695b0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x55aead0696b0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55aead069718 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55aead0697d0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x55aead069770 'union pthread_condattr_t' sugar
|   `-RecordType 0x55aead069630 'pthread_condattr_t'
|     `-Record 0x55aead0695b0 ''
|-TypedefDecl 0x55aead069858 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x55aeacfee120 'unsigned int'
|-TypedefDecl 0x55aead0698c8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x55aeacfee080 'int'
|-RecordDecl 0x55aead069920 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x55aead0699c8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x55aead069a90 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55aead069af8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x55aead069b60 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x55aead069bc8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x55aead069c30 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x55aead069c98 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x55aead069d00 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x55aead069d68 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x55aead069dd0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x55aead069e38 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x55aead069ea0 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x55aead069f50 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe032_power.opt_false-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/safe032_power.opt_false-unreach-call.i:282:3)'
| |-FieldDecl 0x55aead069ff8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55aead06a060 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55aead06a1b0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x55aead06a150 'union pthread_rwlock_t' sugar
|   `-RecordType 0x55aead0699a0 'pthread_rwlock_t'
|     `-Record 0x55aead069920 ''
|-RecordDecl 0x55aead06a220 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x55aead06a360 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x55aead06a3c8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55aead06a480 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x55aead06a420 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x55aead06a2a0 'pthread_rwlockattr_t'
|     `-Record 0x55aead06a220 ''
|-TypedefDecl 0x55aead06c560 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x55aeacfee084 'volatile int' volatile
|   `-BuiltinType 0x55aeacfee080 'int'
|-RecordDecl 0x55aead06c5b8 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x55aead06c700 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x55aead06c768 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55aead06c820 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x55aead06c7c0 'union pthread_barrier_t' sugar
|   `-RecordType 0x55aead06c640 'pthread_barrier_t'
|     `-Record 0x55aead06c5b8 ''
|-RecordDecl 0x55aead06c890 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x55aead06c990 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55aead06c9f8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55aead06cab0 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x55aead06ca50 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x55aead06c910 'pthread_barrierattr_t'
|     `-Record 0x55aead06c890 ''
|-TypedefDecl 0x55aead06cbc8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x55aead06cb60 'long [8]' 8 
|   `-BuiltinType 0x55aeacfee0a0 'long'
|-EnumDecl 0x55aead06cc20 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x55aead06cce8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x55aead06cd38 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x55aead06cd88 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x55aead06ce58 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x55aead06cea8 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x55aead06cef8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x55aead06cf48 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x55aead06cfd0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x55aead06cfb8 <col:26> 'int'
| |   `-DeclRefExpr 0x55aead06cf98 <col:26> 'int' EnumConstant 0x55aead06ce58 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x55aead06d058 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x55aead06d040 <col:29> 'int'
| |   `-DeclRefExpr 0x55aead06d020 <col:29> 'int' EnumConstant 0x55aead06cea8 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x55aead06d0e0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x55aead06d0c8 <col:30> 'int'
| |   `-DeclRefExpr 0x55aead06d0a8 <col:30> 'int' EnumConstant 0x55aead06cef8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x55aead06d168 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x55aead06d150 <col:27> 'int'
|     `-DeclRefExpr 0x55aead06d130 <col:27> 'int' EnumConstant 0x55aead06cfd0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x55aead06d1b8 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x55aead06d288 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x55aead06d310 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x55aead06d2f8 <col:30> 'int'
| |   `-DeclRefExpr 0x55aead06d2d8 <col:30> 'int' EnumConstant 0x55aead06d288 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x55aead06d360 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x55aead06d3e8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x55aead06d3d0 <col:29> 'int'
|     `-DeclRefExpr 0x55aead06d3b0 <col:29> 'int' EnumConstant 0x55aead06d360 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x55aead06d438 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x55aead06d508 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x55aead06d570 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x55aead06d5c0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x55aead06d610 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x55aead06d6d8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x55aead06d728 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x55aead06d778 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x55aead06d800 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x55aead06d7e8 <col:31> 'int'
|     `-DeclRefExpr 0x55aead06d7c8 <col:31> 'int' EnumConstant 0x55aead06d6d8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x55aead06d850 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x55aead06d918 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x55aead06d968 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x55aead06d9b8 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x55aead06da88 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x55aead06dad8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x55aead06db28 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x55aead06dbf8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x55aead06dc48 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x55aead06dc98 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x55aead06ded8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x55aead06df40 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x55aead06dfa8 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x55aead06e0c8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x55aead06e118 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x55aead06e1e8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x55aead06e238 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x55aead06e288 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x55aead06e358 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x55aead06e3a8 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x55aead06e9d8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x55aead06e4a0 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x55aead06e5c0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead06e7c0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x55aead06e840 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x55aead06ea98 <col:47>
| |-NonNullAttr 0x55aead06eaf0 <col:77, col:94> 1 3
| `-CallbackAttr 0x55aead06eb28 <line:386:12> Implicit 2 3
|-FunctionDecl 0x55aead06ec50 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x55aead06eb80 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x55aead06eea8 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x55aead06ed08 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x55aead06ed88 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x55aead06f078 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x55aead06ef68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x55aead06f120 <col:60>
|-FunctionDecl 0x55aead06f270 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x55aead06f310 <col:54>
| `-ConstAttr 0x55aead06f368 <col:95>
|-FunctionDecl 0x55aead06fda0 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x55aead06f3a0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55aead06f418 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x55aead06fe50 <line:395:19>
| `-ConstAttr 0x55aead06fea8 <col:60>
|-FunctionDecl 0x55aead070078 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55aead06ff40 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55aead070120 <col:71>
| `-NonNullAttr 0x55aead070178 <col:112, col:126> 1
|-FunctionDecl 0x55aead070280 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55aead0701c8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55aead070328 <line:398:22>
| `-NonNullAttr 0x55aead070380 <col:63, col:77> 1
|-FunctionDecl 0x55aead0705a8 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x55aead0703c8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55aead070448 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x55aead070658 <line:401:22>
| `-NonNullAttr 0x55aead0706b0 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead0708b8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55aead0706f8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55aead070778 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x55aead070968 <line:404:22>
| `-NonNullAttr 0x55aead0709c0 <col:63, col:77> 1
|-FunctionDecl 0x55aead070c18 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x55aead070a08 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55aead070ab0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x55aead070cc8 <line:407:22>
| `-NonNullAttr 0x55aead070d20 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead071f78 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55aead071dc0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55aead071e38 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55aead072028 <line:410:22>
| `-NonNullAttr 0x55aead072080 <col:63, col:77> 1
|-FunctionDecl 0x55aead0722b8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55aead0720c8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead072158 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55aead072368 <line:413:22>
| `-NonNullAttr 0x55aead0723c0 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead0725f8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55aead072408 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead072498 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x55aead0726a8 <col:37>
| `-NonNullAttr 0x55aead072700 <col:78, col:95> 1 2
|-FunctionDecl 0x55aead0728e8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead072748 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead0727c8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x55aead072998 <line:419:22>
| `-NonNullAttr 0x55aead0729f0 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead072b78 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55aead072a38 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55aead072ab8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x55aead072c28 <line:421:22>
| `-NonNullAttr 0x55aead072c80 <col:63, col:77> 1
|-FunctionDecl 0x55aead073e58 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead072cc8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead072d48 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x55aead073f08 <line:424:22>
| `-NonNullAttr 0x55aead073f60 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead0740e8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55aead073fa8 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55aead074028 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x55aead074198 <line:427:22>
| `-NonNullAttr 0x55aead0741f0 <col:63, col:77> 1
|-FunctionDecl 0x55aead074398 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead074238 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead0742b8 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x55aead074448 <line:430:22>
| `-NonNullAttr 0x55aead0744a0 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead074628 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55aead0744e8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55aead074568 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x55aead0746d8 <line:432:22>
| `-NonNullAttr 0x55aead074730 <col:63, col:77> 1
|-FunctionDecl 0x55aead074958 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x55aead074778 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead0747f8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x55aead074a08 <line:435:22>
| |-NonNullAttr 0x55aead074a60 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x55aead074a98 <col:100> "" ""
|-FunctionDecl 0x55aead074ca8 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x55aead074ae8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55aead074b68 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x55aead074d58 <line:438:22>
| |-NonNullAttr 0x55aead074db0 <col:63, col:77> 1
| `-DeprecatedAttr 0x55aead074df8 <col:97> "" ""
|-FunctionDecl 0x55aead074fe8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55aead074e48 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead074ec0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55aead075098 <line:441:22>
| `-NonNullAttr 0x55aead0750f0 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead075270 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55aead075138 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55aead0751b0 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55aead075320 <line:444:22>
| `-NonNullAttr 0x55aead075378 <col:63, col:77> 1
|-FunctionDecl 0x55aead075668 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55aead0753c8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55aead075448 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x55aead0754c0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55aead075720 <line:448:22>
| `-NonNullAttr 0x55aead075778 <col:63, col:83> 1 2 3
|-FunctionDecl 0x55aead075a28 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x55aead0757d0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55aead075850 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x55aead0758c8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55aead075ae0 <col:43>
| `-NonNullAttr 0x55aead075b38 <col:84, col:98> 1
|-FunctionDecl 0x55aead075e40 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55aead075b88 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55aead075c08 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x55aead075c98 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x55aead075ef8 <line:453:22>
| `-NonNullAttr 0x55aead075f50 <col:63, col:77> 3
|-FunctionDecl 0x55aead076228 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55aead075f98 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55aead076018 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x55aead0760a8 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55aead0762e0 <line:457:22>
| `-NonNullAttr 0x55aead076338 <col:63, col:80> 2 3
|-FunctionDecl 0x55aead076528 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x55aead076388 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55aead076408 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x55aead0765d8 <line:459:22>
|-FunctionDecl 0x55aead0769a8 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x55aead0766a0 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x55aead076840 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x55aead076a58 <col:52, col:69> 1 2
|-FunctionDecl 0x55aead076c00 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x55aead076ae0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x55aead076b60 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x55aead076e10 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x55aead076cc8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x55aead076d48 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x55aead076f68 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x55aead076ed0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x55aead0770a8 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x55aead077148 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x55aead0771f8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x55aead0772e8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x55aead077350 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x55aead077520 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/safe032_power.opt_false-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x55aead077618 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x55aead0776d0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x55aead077670 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x55aead0771d0 '__pthread_unwind_buf_t'
| |   `-Record 0x55aead077148 ''
| `-AlignedAttr 0x55aead077728 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x55aead0777a0 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x55aead077900 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x55aead077968 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x55aead0779d0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x55aead077a38 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x55aead077c40 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55aead077b30 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55aead077e20 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55aead077cf8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55aead077fe0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55aead077ed8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x55aead078088 <line:488:22>
|-RecordDecl 0x55aead0780e0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x55aead0783f8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x55aead078258 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x55aead0782d8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x55aead0784a8 <col:86>
| `-ReturnsTwiceAttr 0x55aead078500 <col:12> Implicit
|-FunctionDecl 0x55aead078828 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55aead0785d0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x55aead0786e0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x55aead0788d8 <line:494:22>
| `-NonNullAttr 0x55aead078930 <col:63, col:77> 1
|-FunctionDecl 0x55aead078aa8 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55aead078978 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55aead078b50 <line:496:22>
| `-NonNullAttr 0x55aead078ba8 <col:63, col:77> 1
|-FunctionDecl 0x55aead078cb0 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55aead078bf8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55aead078d58 <line:498:22>
| `-NonNullAttr 0x55aead078db0 <col:52, col:66> 1
|-FunctionDecl 0x55aead078ee8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55aead078e30 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55aead078f90 <line:500:22>
| `-NonNullAttr 0x55aead078fe8 <col:52, col:66> 1
|-FunctionDecl 0x55aead079228 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55aead079038 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55aead0790c8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55aead0792d8 <col:36>
| `-NonNullAttr 0x55aead079330 <col:66, col:83> 1 2
|-FunctionDecl 0x55aead079430 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55aead079378 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55aead0794d8 <line:505:22>
| `-NonNullAttr 0x55aead079530 <col:52, col:66> 1
|-FunctionDecl 0x55aead0797c8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead0795e0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55aead079660 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55aead079878 <line:509:22>
| `-NonNullAttr 0x55aead0798d0 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead079b98 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x55aead079918 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55aead079998 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x55aead079a18 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x55aead079c50 <line:513:22>
| `-NonNullAttr 0x55aead079ca8 <col:63, col:80> 1 3
|-FunctionDecl 0x55aead079e40 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55aead079cf8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55aead079ee8 <line:515:22>
| `-NonNullAttr 0x55aead079f40 <col:63, col:77> 1
|-FunctionDecl 0x55aead07a128 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55aead079ff0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55aead07a1d0 <line:517:22>
| `-NonNullAttr 0x55aead07a228 <col:63, col:77> 1
|-FunctionDecl 0x55aead07a330 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55aead07a278 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55aead07a3d8 <line:519:22>
| `-NonNullAttr 0x55aead07a430 <col:63, col:77> 1
|-FunctionDecl 0x55aead07a658 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead07a478 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55aead07a4f8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x55aead07a708 <line:523:22>
| `-NonNullAttr 0x55aead07a760 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead07a968 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55aead07a7a8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55aead07a828 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x55aead07aa18 <line:526:22>
| `-NonNullAttr 0x55aead07aa70 <col:63, col:77> 1
|-FunctionDecl 0x55aead07ac18 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead07aab8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55aead07ab38 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x55aead07acc8 <line:529:22>
| `-NonNullAttr 0x55aead07ad20 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead07bf20 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55aead07ad68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55aead07be60 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x55aead07bfd0 <line:531:22>
| `-NonNullAttr 0x55aead07c028 <col:63, col:77> 1
|-FunctionDecl 0x55aead07c1d8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead07c078 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55aead07c0f8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x55aead07c288 <line:535:22>
| `-NonNullAttr 0x55aead07c2e0 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead07c468 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55aead07c328 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55aead07c3a8 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x55aead07c518 <line:538:22>
| `-NonNullAttr 0x55aead07c570 <col:63, col:77> 1
|-FunctionDecl 0x55aead07c718 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead07c5b8 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55aead07c638 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55aead07c7c8 <line:542:22>
| `-NonNullAttr 0x55aead07c820 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead07c9a8 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55aead07c868 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55aead07c8e8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x55aead07ca58 <line:545:22>
| `-NonNullAttr 0x55aead07cab0 <col:63, col:77> 1
|-FunctionDecl 0x55aead07cc98 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x55aead07caf8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x55aead07cb78 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x55aead07cd48 <line:548:22>
| `-NonNullAttr 0x55aead07cda0 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead07df58 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55aead07cde8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55aead07de98 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x55aead07e008 <line:551:22>
| `-NonNullAttr 0x55aead07e060 <col:63, col:77> 1
|-FunctionDecl 0x55aead07e398 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x55aead07e140 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55aead07e250 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x55aead07e448 <col:29>
| `-NonNullAttr 0x55aead07e4a0 <col:70, col:84> 1
|-FunctionDecl 0x55aead07e618 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55aead07e4e8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55aead07e6c0 <line:556:22>
| `-NonNullAttr 0x55aead07e718 <col:63, col:77> 1
|-FunctionDecl 0x55aead07e820 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55aead07e768 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55aead07e8c8 <line:558:22>
| `-NonNullAttr 0x55aead07e920 <col:52, col:66> 1
|-FunctionDecl 0x55aead07ea20 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55aead07e968 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55aead07eac8 <line:560:19>
| `-NonNullAttr 0x55aead07eb20 <col:49, col:63> 1
|-FunctionDecl 0x55aead07ed58 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55aead07eb68 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55aead07ebf8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55aead07ee08 <col:39>
| `-NonNullAttr 0x55aead07ee90 <col:69, col:86> 1 2
|-FunctionDecl 0x55aead07ef90 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55aead07eed8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55aead07f038 <line:565:22>
| `-NonNullAttr 0x55aead07f090 <col:52, col:66> 1
|-FunctionDecl 0x55aead07f190 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55aead07f0d8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55aead07f238 <line:567:22>
| `-NonNullAttr 0x55aead07f290 <col:52, col:66> 1
|-FunctionDecl 0x55aead07f448 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55aead07f2d8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55aead07f368 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55aead07f4f8 <col:39>
| `-NonNullAttr 0x55aead07f550 <col:69, col:86> 1 2
|-FunctionDecl 0x55aead07f650 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55aead07f598 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55aead07f6f8 <line:572:22>
| `-NonNullAttr 0x55aead07f750 <col:52, col:66> 1
|-FunctionDecl 0x55aead07f938 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55aead07f800 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55aead07f9e0 <line:574:22>
| `-NonNullAttr 0x55aead07fa38 <col:63, col:77> 1
|-FunctionDecl 0x55aead07fb40 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55aead07fa88 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55aead07fbe8 <line:576:22>
| `-NonNullAttr 0x55aead07fc40 <col:63, col:77> 1
|-FunctionDecl 0x55aead07fea0 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead07fc88 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55aead07fd08 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x55aead07ff50 <line:580:22>
| `-NonNullAttr 0x55aead07ffa8 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead0801b8 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55aead07fff8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55aead080078 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x55aead080268 <line:583:22>
| `-NonNullAttr 0x55aead0802c0 <col:63, col:77> 1
|-FunctionDecl 0x55aead080468 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead080308 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55aead080388 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x55aead080518 <line:587:22>
| `-NonNullAttr 0x55aead080570 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead0806f8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55aead0805b8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55aead080638 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x55aead0807a8 <col:36>
| `-NonNullAttr 0x55aead080800 <col:77, col:91> 1
|-FunctionDecl 0x55aead080b38 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x55aead0808e0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55aead0809f0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x55aead080be8 <line:592:22>
| `-NonNullAttr 0x55aead080c40 <col:63, col:77> 1
|-FunctionDecl 0x55aead080db8 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55aead080c88 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55aead080e60 <line:594:22>
| `-NonNullAttr 0x55aead080ee0 <col:63, col:77> 1
|-FunctionDecl 0x55aead080fe0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55aead080f28 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55aead081088 <line:596:22>
| `-NonNullAttr 0x55aead0810e0 <col:52, col:66> 1
|-FunctionDecl 0x55aead0811e0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55aead081128 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55aead081288 <line:598:22>
| `-NonNullAttr 0x55aead0812e0 <col:52, col:66> 1
|-FunctionDecl 0x55aead081508 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x55aead081328 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55aead0813a0 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x55aead0815b8 <line:601:22, col:39> 1 2
|-FunctionDecl 0x55aead0818e8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55aead081638 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55aead0816b0 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55aead081740 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x55aead0819a0 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x55aead081bb8 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55aead081a80 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55aead081c60 <line:607:22>
| `-NonNullAttr 0x55aead081cb8 <col:63, col:77> 1
|-FunctionDecl 0x55aead081dc0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55aead081d08 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55aead081e68 <line:609:22>
| `-NonNullAttr 0x55aead081ef0 <col:63, col:77> 1
|-FunctionDecl 0x55aead082118 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead081f38 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55aead081fb8 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x55aead0821c8 <line:613:22>
| `-NonNullAttr 0x55aead082220 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead082428 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x55aead082268 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55aead0822e8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x55aead0824d8 <col:37>
| `-NonNullAttr 0x55aead082530 <col:78, col:92> 1
|-FunctionDecl 0x55aead082748 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x55aead082578 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55aead082620 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x55aead0827f8 <line:619:22>
| `-NonNullAttr 0x55aead082850 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead082a18 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x55aead082898 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55aead082910 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x55aead082ac8 <line:622:22>
| `-NonNullAttr 0x55aead082b20 <col:63, col:77> 1
|-FunctionDecl 0x55aead082dc8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x55aead082c00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x55aead082c80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x55aead082e78 <line:624:22>
| `-NonNullAttr 0x55aead082f00 <col:63, col:77> 1
|-FunctionDecl 0x55aead083078 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55aead082f48 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55aead083120 <line:626:22>
| `-NonNullAttr 0x55aead083178 <col:63, col:77> 1
|-FunctionDecl 0x55aead083280 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55aead0831c8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55aead083328 <line:628:22>
| `-NonNullAttr 0x55aead083380 <col:52, col:66> 1
|-FunctionDecl 0x55aead083480 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55aead0833c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55aead083528 <line:630:22>
| `-NonNullAttr 0x55aead083580 <col:52, col:66> 1
|-FunctionDecl 0x55aead083680 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55aead0835c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55aead083728 <line:632:22>
| `-NonNullAttr 0x55aead083780 <col:52, col:66> 1
|-FunctionDecl 0x55aead083b58 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x55aead083860 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x55aead083970 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55aead0839f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x55aead083c10 <line:636:22>
| `-NonNullAttr 0x55aead083c68 <col:63, col:77> 1
|-FunctionDecl 0x55aead083de8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55aead083cb8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55aead083e90 <line:638:22>
| `-NonNullAttr 0x55aead083f10 <col:63, col:77> 1
|-FunctionDecl 0x55aead084010 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55aead083f58 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55aead0840b8 <line:640:22>
| `-NonNullAttr 0x55aead084110 <col:52, col:66> 1
|-FunctionDecl 0x55aead0842f8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55aead0841c0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55aead0843a0 <line:642:22>
| `-NonNullAttr 0x55aead0843f8 <col:63, col:77> 1
|-FunctionDecl 0x55aead084500 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55aead084448 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55aead0845a8 <line:644:22>
| `-NonNullAttr 0x55aead084600 <col:63, col:77> 1
|-FunctionDecl 0x55aead084828 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55aead084648 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55aead0846c8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x55aead0848d8 <line:648:22>
| `-NonNullAttr 0x55aead084930 <col:63, col:80> 1 2
|-FunctionDecl 0x55aead084b38 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x55aead084978 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x55aead0849f8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x55aead084be8 <line:651:22>
| `-NonNullAttr 0x55aead084c40 <col:63, col:77> 1
|-FunctionDecl 0x55aead084fa8 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x55aead084d20 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x55aead084e40 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x55aead085058 <line:654:22>
| `-NonNullAttr 0x55aead0850b0 <col:63, col:77> 1
|-FunctionDecl 0x55aead085208 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x55aead0850f8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55aead0852b0 <col:69>
|-FunctionDecl 0x55aead085428 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x55aead085318 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55aead0854d0 <col:72>
|-FunctionDecl 0x55aead085708 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x55aead085538 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x55aead0855e8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x55aead0857b8 <col:44>
|-FunctionDecl 0x55aead0859d8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x55aead085820 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55aead085898 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x55aead085a88 <line:661:22>
| `-NonNullAttr 0x55aead085ae0 <col:63, col:77> 2
|-FunctionDecl 0x55aead086f50 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x55aead085bc0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x55aead085cd0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x55aead085de0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x55aead087008 <col:47>
|-FunctionDecl 0x55aead087110 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x55aead087078 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55aead087268 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x55aead0871d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55aead0873c0 <line:668:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x55aead087328 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55aead087488 <line:669:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x55aead087548 <line:670:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x55aead087608 <line:671:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x55aead0876c0 <line:672:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x55aead087740 prev 0x55aead0876c0 <line:673:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x55aead0877a8 <col:24> 'int' 0
|-VarDecl 0x55aead0877e0 <line:674:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x55aead087860 prev 0x55aead0877e0 <line:675:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x55aead0878c8 <col:27> 'int' 0
|-VarDecl 0x55aead087900 <line:676:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x55aead087980 prev 0x55aead087900 <line:677:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x55aead0879e8 <col:27> 'int' 0
|-VarDecl 0x55aead087a18 <line:678:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x55aead087a90 <line:679:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x55aead087b10 <line:680:1, col:5> col:5 used x 'int'
|-VarDecl 0x55aead087b90 prev 0x55aead087b10 <line:681:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x55aead087bf8 <col:9> 'int' 0
|-VarDecl 0x55aead087c28 <line:682:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x55aead087ca8 <line:683:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x55aead087d20 <line:684:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x55aead087d98 <line:685:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x55aead087e10 <line:686:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x55aead087e88 <line:687:1, col:7> col:7 used x$r_buff0_thd3 '_Bool'
|-VarDecl 0x55aead087f20 <line:688:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x55aead087f98 <line:689:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x55aead088010 <line:690:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x55aead088088 <line:691:1, col:7> col:7 used x$r_buff1_thd3 '_Bool'
|-VarDecl 0x55aead088100 <line:692:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x55aead088180 <line:693:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x55aead088200 <line:694:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x55aead088278 <line:695:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x55aead0882f8 <line:696:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x55aead088370 <line:697:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x55aead0883f0 <line:698:1, col:5> col:5 used y 'int'
|-VarDecl 0x55aead088470 prev 0x55aead0883f0 <line:699:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x55aead0884d8 <col:9> 'int' 0
|-VarDecl 0x55aead088508 <line:700:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x55aead088580 <line:701:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x55aead088698 prev 0x55aead087110 <line:702:1, line:731:1> line:702:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x55aead088600 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55aead08b6b8 <line:703:1, line:731:1>
|   |-CallExpr 0x55aead0887a8 <line:704:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead088790 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead088740 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead088808 <line:705:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55aead0887c8 <col:3> 'int' lvalue Var 0x55aead088470 'y' 'int'
|   | `-IntegerLiteral 0x55aead0887e8 <col:7> 'int' 2
|   |-CallExpr 0x55aead088860 <line:706:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead088848 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead088828 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead0888b8 <line:707:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead0888a0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead088880 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x55aead088910 <line:708:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead0888f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead0888d8 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead088968 <line:709:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead088950 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead088930 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead088a38 <line:710:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55aead088988 <col:3> '_Bool' lvalue Var 0x55aead088508 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x55aead088a18 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55aead088a00 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55aead0889a8 <col:19> '_Bool (void)' Function 0x55aead02dc80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55aead088ad0 <line:711:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55aead088a58 <col:3> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x55aead088ab0 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55aead088a98 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55aead088a78 <col:19> '_Bool (void)' Function 0x55aead02dc80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55aead088b48 <line:712:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55aead088af0 <col:3> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55aead088b30 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead088b10 <col:21> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55aead088bc0 <line:713:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55aead088b68 <col:3> 'int' lvalue Var 0x55aead087ca8 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55aead088ba8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead088b88 <col:15> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead089018 <line:714:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55aead088be0 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   | `-ConditionalOperator 0x55aead088fe8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55aead088df0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55aead088d10 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55aead088c38 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55aead088c20 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55aead088c00 <col:8> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55aead088cf0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55aead088c88 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55aead088c70 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55aead088c50 <col:27> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x55aead088cd8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55aead088cc0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55aead088ca0 <col:46> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55aead088dd0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55aead088d68 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55aead088d50 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55aead088d30 <col:65> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x55aead088db8 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55aead088da0 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55aead088d80 <col:84> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead088fd0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead088e10 <col:101> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |   `-ParenExpr 0x55aead088fb0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55aead088f80 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55aead088ed0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55aead088e88 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55aead088e70 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55aead088e30 <col:106> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55aead088eb8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55aead088ea0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55aead088e50 <col:124> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead088f50 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead088ef0 <col:141> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55aead088f68 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead088f30 <col:153> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55aead089528 <line:715:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55aead089038 <col:3> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x55aead0894f8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55aead0894c8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55aead0894b0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55aead089058 <col:15> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead0894e0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead089078 <col:31> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55aead089490 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55aead089460 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55aead089288 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55aead0891a8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55aead0890d0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55aead0890b8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55aead089098 <col:45> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55aead089188 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55aead089120 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55aead089108 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55aead0890e8 <col:64> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x55aead089170 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55aead089158 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55aead089138 <col:83> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55aead089268 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55aead089200 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55aead0891e8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55aead0891c8 <col:102> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x55aead089250 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55aead089238 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55aead089218 <col:121> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead089448 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead0892a8 <col:138> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x55aead089428 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55aead0893f8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55aead089368 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55aead089320 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55aead089308 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55aead0892c8 <col:151> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55aead089350 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55aead089338 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55aead0892e8 <col:169> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x55aead0893c8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55aead089388 <col:186> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55aead0893e0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55aead0893a8 <col:198> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55aead089a38 <line:716:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55aead089548 <col:3> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x55aead089a08 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55aead0899d8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55aead0899c0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55aead089568 <col:15> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead0899f0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead089588 <col:31> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x55aead0899a0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55aead089970 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55aead089798 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55aead0896b8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55aead0895e0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55aead0895c8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55aead0895a8 <col:45> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55aead089698 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55aead089630 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55aead089618 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55aead0895f8 <col:64> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x55aead089680 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55aead089668 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55aead089648 <col:83> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55aead089778 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55aead089710 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55aead0896f8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55aead0896d8 <col:102> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x55aead089760 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55aead089748 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55aead089728 <col:121> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead089958 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead0897b8 <col:138> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x55aead089938 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55aead089908 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55aead089878 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55aead089830 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55aead089818 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55aead0897d8 <col:151> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55aead089860 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55aead089848 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55aead0897f8 <col:169> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x55aead0898d8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55aead089898 <col:186> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55aead0898f0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55aead0898b8 <col:198> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55aead08a008 <line:717:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55aead089a58 <col:3> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead089ff0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead089fc0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55aead089f78 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead089f60 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead089a78 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead089fa8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead089f90 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead089a98 <col:36> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55aead089f40 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55aead089ee8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55aead089ca8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55aead089bc8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55aead089af0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55aead089ad8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55aead089ab8 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55aead089ba8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55aead089b40 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55aead089b28 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55aead089b08 <col:74> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55aead089b90 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55aead089b78 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55aead089b58 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55aead089c88 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55aead089c20 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55aead089c08 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55aead089be8 <col:112> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55aead089c70 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55aead089c58 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55aead089c38 <col:131> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55aead089ed0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55aead089eb8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55aead089cc8 <col:148> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55aead089e98 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55aead089e68 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55aead089d88 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55aead089d40 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55aead089d28 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55aead089ce8 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55aead089d70 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55aead089d58 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55aead089d08 <col:184> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55aead089e20 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55aead089dd8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55aead089da8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55aead089e50 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55aead089e38 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55aead089e00 <col:212> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55aead08a5d0 <line:718:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08a028 <col:3> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08a5b8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08a588 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55aead08a540 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08a528 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08a048 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08a570 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08a558 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08a068 <col:36> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55aead08a508 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55aead08a4d8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55aead08a278 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55aead08a198 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55aead08a0c0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55aead08a0a8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55aead08a088 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55aead08a178 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55aead08a110 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55aead08a0f8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55aead08a0d8 <col:74> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55aead08a160 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55aead08a148 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55aead08a128 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55aead08a258 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55aead08a1f0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55aead08a1d8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55aead08a1b8 <col:112> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55aead08a240 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55aead08a228 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55aead08a208 <col:131> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55aead08a4c0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55aead08a4a8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55aead08a298 <col:148> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55aead08a488 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55aead08a458 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55aead08a358 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55aead08a310 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55aead08a2f8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55aead08a2b8 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55aead08a340 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55aead08a328 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55aead08a2d8 <col:184> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55aead08a428 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55aead08a3a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55aead08a378 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55aead08a440 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55aead08a400 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55aead08a3d0 <col:219> 'int' 0
|   |-BinaryOperator 0x55aead08ab78 <line:719:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08a5f0 <col:3> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08ab60 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08ab30 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55aead08aae8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08aad0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08a610 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08ab18 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08ab00 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08a630 <col:36> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x55aead08aab0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55aead08aa80 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55aead08a840 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55aead08a760 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55aead08a688 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55aead08a670 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55aead08a650 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55aead08a740 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55aead08a6d8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55aead08a6c0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55aead08a6a0 <col:74> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55aead08a728 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55aead08a710 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55aead08a6f0 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55aead08a820 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55aead08a7b8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55aead08a7a0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55aead08a780 <col:112> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55aead08a808 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55aead08a7f0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55aead08a7d0 <col:131> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55aead08aa68 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55aead08aa50 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55aead08a860 <col:148> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x55aead08aa30 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55aead08aa00 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55aead08a920 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55aead08a8d8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55aead08a8c0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55aead08a880 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55aead08a908 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55aead08a8f0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55aead08a8a0 <col:184> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55aead08a9b8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55aead08a970 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55aead08a940 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55aead08a9e8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55aead08a9d0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55aead08a998 <col:212> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55aead08b150 <line:720:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08ab98 <col:3> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08b138 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08b108 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55aead08b0c0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08b0a8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08abb8 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08b0f0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08b0d8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08abd8 <col:36> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x55aead08b088 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55aead08b058 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55aead08ade8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55aead08ad08 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55aead08ac30 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55aead08ac18 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55aead08abf8 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55aead08ace8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55aead08ac80 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55aead08ac68 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55aead08ac48 <col:74> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55aead08acd0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55aead08acb8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55aead08ac98 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55aead08adc8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55aead08ad60 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55aead08ad48 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55aead08ad28 <col:112> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55aead08adb0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55aead08ad98 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55aead08ad78 <col:131> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55aead08b040 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55aead08b028 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55aead08ae08 <col:148> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x55aead08b008 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55aead08afd8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55aead08aec8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55aead08ae80 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55aead08ae68 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55aead08ae28 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55aead08aeb0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55aead08ae98 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55aead08ae48 <col:184> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55aead08afa8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55aead08af18 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55aead08aee8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55aead08afc0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55aead08af80 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55aead08af50 <col:219> 'int' 0
|   |-BinaryOperator 0x55aead08b1c8 <line:721:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55aead08b170 <col:3> 'int' lvalue Var 0x55aead087860 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x55aead08b1b0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead08b190 <col:25> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead08b2f8 <line:722:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55aead08b1e8 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   | `-ConditionalOperator 0x55aead08b2c8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55aead08b280 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55aead08b268 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55aead08b208 <col:7> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead08b298 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead08b228 <col:25> 'int' lvalue Var 0x55aead087ca8 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55aead08b2b0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55aead08b248 <col:37> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead08b390 <line:723:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08b318 <col:3> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55aead08b368 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55aead08b338 <col:28> 'int' 0
|   |-CallExpr 0x55aead08b3e8 <line:724:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead08b3d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08b3b0 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead08b440 <line:725:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead08b428 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08b408 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x55aead08b498 <line:726:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead08b480 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08b460 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead08b4f0 <line:727:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead08b4d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08b4b8 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead08b5a8 <line:728:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55aead08b510 <col:3> 'int' lvalue Var 0x55aead087740 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55aead08b588 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55aead08b570 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead08b530 <col:22> 'int' lvalue Var 0x55aead087740 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55aead08b550 <col:41> 'int' 1
|   |-CallExpr 0x55aead08b600 <line:729:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead08b5e8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08b5c8 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55aead08b6a8 <line:730:3, col:36>
|     `-CallExpr 0x55aead08b688 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55aead08b670 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55aead08b620 <col:10> 'void *(void)' Function 0x55aead02dfc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55aead08b850 prev 0x55aead087268 <line:732:1, line:771:1> line:732:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x55aead08b7b8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55aead090190 <line:733:1, line:771:1>
|   |-CallExpr 0x55aead08b930 <line:734:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead08b918 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08b8f8 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead08b990 <line:735:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55aead08b950 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   | `-IntegerLiteral 0x55aead08b970 <col:7> 'int' 1
|   |-CallExpr 0x55aead08b9e8 <line:736:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead08b9d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08b9b0 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead08ba40 <line:737:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead08ba28 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08ba08 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead08bd28 <line:738:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55aead08ba60 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   | `-ConditionalOperator 0x55aead08bcf8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55aead08bb20 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55aead08bad8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55aead08bac0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55aead08ba80 <col:7> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55aead08bb08 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55aead08baf0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55aead08baa0 <col:25> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead08bce0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead08bb40 <col:42> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55aead08bcc0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55aead08bc90 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55aead08bc00 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55aead08bbb8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55aead08bba0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55aead08bb60 <col:55> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55aead08bbe8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55aead08bbd0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55aead08bb80 <col:73> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead08bc60 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead08bc20 <col:90> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55aead08bc78 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08bc40 <col:102> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead08bf30 <line:739:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08bd48 <col:3> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08bf18 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08bee8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55aead08be08 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55aead08bdc0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55aead08bda8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55aead08bd68 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55aead08bdf0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55aead08bdd8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55aead08bd88 <col:38> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08bea0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead08be58 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead08be28 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead08bed0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead08beb8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08be80 <col:66> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55aead08c228 <line:740:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08bf60 <col:3> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08c210 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08c1e0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55aead08c100 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55aead08c020 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55aead08bfd8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55aead08bfc0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55aead08bf80 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55aead08c008 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55aead08bff0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55aead08bfa0 <col:38> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55aead08c0e0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55aead08c098 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55aead08c080 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55aead08c040 <col:56> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55aead08c0c8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55aead08c0b0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55aead08c060 <col:74> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08c198 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead08c150 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead08c120 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead08c1c8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead08c1b0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08c178 <col:102> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55aead08c430 <line:741:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08c248 <col:3> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08c418 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08c3e8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55aead08c308 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55aead08c2c0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55aead08c2a8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55aead08c268 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55aead08c2f0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55aead08c2d8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55aead08c288 <col:38> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08c3a0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead08c358 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead08c328 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead08c3d0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead08c3b8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08c380 <col:66> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55aead08c718 <line:742:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08c450 <col:3> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08c700 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08c6d0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55aead08c5f0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55aead08c510 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55aead08c4c8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55aead08c4b0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55aead08c470 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55aead08c4f8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55aead08c4e0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55aead08c490 <col:38> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55aead08c5d0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55aead08c588 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55aead08c570 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55aead08c530 <col:56> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55aead08c5b8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55aead08c5a0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55aead08c550 <col:74> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08c688 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead08c640 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead08c610 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead08c6b8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead08c6a0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08c668 <col:102> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x55aead08c770 <line:743:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead08c758 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08c738 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead08c7c8 <line:744:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead08c7b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08c790 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead08c860 <line:745:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08c7e8 <col:3> '_Bool' lvalue Var 0x55aead088508 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x55aead08c840 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55aead08c828 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55aead08c808 <col:19> '_Bool (void)' Function 0x55aead02dc80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55aead08c8f8 <line:746:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08c880 <col:3> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x55aead08c8d8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55aead08c8c0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55aead08c8a0 <col:19> '_Bool (void)' Function 0x55aead02dc80 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55aead08c970 <line:747:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08c918 <col:3> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08c958 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead08c938 <col:21> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55aead08c9e8 <line:748:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55aead08c990 <col:3> 'int' lvalue Var 0x55aead087ca8 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55aead08c9d0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead08c9b0 <col:15> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead08ce20 <line:749:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55aead08ca08 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   | `-ConditionalOperator 0x55aead08cdf0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55aead08cc18 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55aead08cb38 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55aead08ca60 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55aead08ca48 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55aead08ca28 <col:8> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55aead08cb18 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55aead08cab0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55aead08ca98 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55aead08ca78 <col:27> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x55aead08cb00 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55aead08cae8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55aead08cac8 <col:46> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55aead08cbf8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55aead08cb90 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55aead08cb78 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55aead08cb58 <col:65> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x55aead08cbe0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55aead08cbc8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55aead08cba8 <col:84> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead08cdd8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead08cc38 <col:101> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |   `-ParenExpr 0x55aead08cdb8 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55aead08cd88 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55aead08ccf8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55aead08ccb0 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55aead08cc98 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55aead08cc58 <col:106> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55aead08cce0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55aead08ccc8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55aead08cc78 <col:124> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead08cd58 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead08cd18 <col:141> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55aead08cd70 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08cd38 <col:153> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55aead08d340 <line:750:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55aead08ce40 <col:3> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x55aead08d310 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55aead08d2e0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55aead08d2c8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55aead08ce60 <col:15> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead08d2f8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead08ce80 <col:31> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55aead08d2a8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55aead08d278 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55aead08d0a0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55aead08cfc0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55aead08ced8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55aead08cec0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55aead08cea0 <col:45> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55aead08cfa0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55aead08cf28 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55aead08cf10 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55aead08cef0 <col:64> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x55aead08cf88 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55aead08cf70 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55aead08cf40 <col:83> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55aead08d080 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55aead08d018 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55aead08d000 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55aead08cfe0 <col:102> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x55aead08d068 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55aead08d050 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55aead08d030 <col:121> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead08d260 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead08d0c0 <col:138> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x55aead08d240 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55aead08d210 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55aead08d180 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55aead08d138 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55aead08d120 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55aead08d0e0 <col:151> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55aead08d168 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55aead08d150 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55aead08d100 <col:169> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x55aead08d1e0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55aead08d1a0 <col:186> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55aead08d1f8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55aead08d1c0 <col:198> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55aead08d850 <line:751:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55aead08d360 <col:3> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x55aead08d820 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55aead08d7f0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55aead08d7d8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55aead08d380 <col:15> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead08d808 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead08d3a0 <col:31> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x55aead08d7b8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55aead08d788 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55aead08d5b0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55aead08d4d0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55aead08d3f8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55aead08d3e0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55aead08d3c0 <col:45> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55aead08d4b0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55aead08d448 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55aead08d430 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55aead08d410 <col:64> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x55aead08d498 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55aead08d480 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55aead08d460 <col:83> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55aead08d590 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55aead08d528 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55aead08d510 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55aead08d4f0 <col:102> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x55aead08d578 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55aead08d560 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55aead08d540 <col:121> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead08d770 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead08d5d0 <col:138> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x55aead08d750 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55aead08d720 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55aead08d690 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55aead08d648 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55aead08d630 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55aead08d5f0 <col:151> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55aead08d678 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55aead08d660 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55aead08d610 <col:169> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x55aead08d6f0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55aead08d6b0 <col:186> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55aead08d708 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55aead08d6d0 <col:198> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55aead08ddf8 <line:752:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08d870 <col:3> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08dde0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08ddb0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55aead08dd68 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08dd50 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08d890 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08dd98 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08dd80 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08d8b0 <col:36> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55aead08dd30 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55aead08dd00 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55aead08dac0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55aead08d9e0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55aead08d908 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55aead08d8f0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55aead08d8d0 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55aead08d9c0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55aead08d958 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55aead08d940 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55aead08d920 <col:74> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55aead08d9a8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55aead08d990 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55aead08d970 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55aead08daa0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55aead08da38 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55aead08da20 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55aead08da00 <col:112> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55aead08da88 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55aead08da70 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55aead08da50 <col:131> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55aead08dce8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55aead08dcd0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55aead08dae0 <col:148> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55aead08dcb0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55aead08dc80 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55aead08dba0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55aead08db58 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55aead08db40 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55aead08db00 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55aead08db88 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55aead08db70 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55aead08db20 <col:184> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55aead08dc38 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55aead08dbf0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55aead08dbc0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55aead08dc68 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55aead08dc50 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55aead08dc18 <col:212> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55aead08e3d8 <line:753:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08de18 <col:3> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08e3c0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08e390 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55aead08e348 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08e330 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08de38 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08e378 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08e360 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08de58 <col:36> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55aead08e310 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55aead08e2e0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55aead08e080 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55aead08dfa0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55aead08deb0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55aead08de98 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55aead08de78 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55aead08df80 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55aead08df00 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55aead08dee8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55aead08dec8 <col:74> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55aead08df50 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55aead08df38 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55aead08df18 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55aead08e060 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55aead08dff8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55aead08dfe0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55aead08dfc0 <col:112> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55aead08e048 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55aead08e030 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55aead08e010 <col:131> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55aead08e2c8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55aead08e2b0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55aead08e0a0 <col:148> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55aead08e290 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55aead08e260 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55aead08e160 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55aead08e118 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55aead08e100 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55aead08e0c0 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55aead08e148 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55aead08e130 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55aead08e0e0 <col:184> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55aead08e230 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55aead08e1b0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55aead08e180 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55aead08e248 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55aead08e208 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55aead08e1d8 <col:219> 'int' 0
|   |-BinaryOperator 0x55aead08e980 <line:754:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08e3f8 <col:3> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08e968 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08e938 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55aead08e8f0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08e8d8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08e418 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08e920 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08e908 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08e438 <col:36> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x55aead08e8b8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55aead08e888 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55aead08e648 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55aead08e568 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55aead08e490 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55aead08e478 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55aead08e458 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55aead08e548 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55aead08e4e0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55aead08e4c8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55aead08e4a8 <col:74> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55aead08e530 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55aead08e518 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55aead08e4f8 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55aead08e628 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55aead08e5c0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55aead08e5a8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55aead08e588 <col:112> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55aead08e610 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55aead08e5f8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55aead08e5d8 <col:131> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55aead08e870 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55aead08e858 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55aead08e668 <col:148> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x55aead08e838 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55aead08e808 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55aead08e728 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55aead08e6e0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55aead08e6c8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55aead08e688 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55aead08e710 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55aead08e6f8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55aead08e6a8 <col:184> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55aead08e7c0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55aead08e778 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55aead08e748 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55aead08e7f0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55aead08e7d8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55aead08e7a0 <col:212> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55aead08ef48 <line:755:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08e9a0 <col:3> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08ef30 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08ef00 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55aead08eeb8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08eea0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08e9c0 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08eee8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55aead08eed0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55aead08e9e0 <col:36> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x55aead08ee80 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55aead08ee50 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55aead08ebf0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55aead08eb10 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55aead08ea38 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55aead08ea20 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55aead08ea00 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55aead08eaf0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55aead08ea88 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55aead08ea70 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55aead08ea50 <col:74> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55aead08ead8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55aead08eac0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55aead08eaa0 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55aead08ebd0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55aead08eb68 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55aead08eb50 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55aead08eb30 <col:112> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55aead08ebb8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55aead08eba0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55aead08eb80 <col:131> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55aead08ee38 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55aead08ee20 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55aead08ec10 <col:148> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x55aead08ee00 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55aead08edd0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55aead08ecd0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55aead08ec88 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55aead08ec70 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55aead08ec30 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55aead08ecb8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55aead08eca0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55aead08ec50 <col:184> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55aead08eda0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55aead08ed20 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55aead08ecf0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55aead08edb8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55aead08ed78 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55aead08ed48 <col:219> 'int' 0
|   |-BinaryOperator 0x55aead08efe8 <line:756:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55aead08ef90 <col:3> 'int' lvalue Var 0x55aead087980 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x55aead08efd0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead08efb0 <col:25> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead08f118 <line:757:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55aead08f008 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   | `-ConditionalOperator 0x55aead08f0e8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55aead08f0a0 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55aead08f088 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55aead08f028 <col:7> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead08f0b8 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead08f048 <col:25> 'int' lvalue Var 0x55aead087ca8 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55aead08f0d0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55aead08f068 <col:37> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead08f1b0 <line:758:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08f138 <col:3> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55aead08f188 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55aead08f158 <col:28> 'int' 0
|   |-CallExpr 0x55aead08f208 <line:759:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead08f1f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08f1d0 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead08f260 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead08f248 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08f228 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead08f548 <line:761:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55aead08f280 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   | `-ConditionalOperator 0x55aead08f518 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55aead08f340 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55aead08f2f8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55aead08f2e0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55aead08f2a0 <col:7> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55aead08f328 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55aead08f310 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55aead08f2c0 <col:25> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead08f500 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead08f360 <col:42> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55aead08f4e0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55aead08f4b0 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55aead08f420 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55aead08f3d8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55aead08f3c0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55aead08f380 <col:55> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55aead08f408 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55aead08f3f0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55aead08f3a0 <col:73> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead08f480 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead08f440 <col:90> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55aead08f498 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08f460 <col:102> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead08f750 <line:762:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08f568 <col:3> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08f738 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08f708 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55aead08f628 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55aead08f5e0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55aead08f5c8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55aead08f588 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55aead08f610 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55aead08f5f8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55aead08f5a8 <col:38> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08f6c0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead08f678 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead08f648 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead08f6f0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead08f6d8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08f6a0 <col:66> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55aead08fa38 <line:763:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08f770 <col:3> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08fa20 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08f9f0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55aead08f910 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55aead08f830 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55aead08f7e8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55aead08f7d0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55aead08f790 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55aead08f818 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55aead08f800 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55aead08f7b0 <col:38> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55aead08f8f0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55aead08f8a8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55aead08f890 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55aead08f850 <col:56> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55aead08f8d8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55aead08f8c0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55aead08f870 <col:74> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08f9a8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead08f960 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead08f930 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead08f9d8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead08f9c0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08f988 <col:102> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55aead08fc40 <line:764:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08fa58 <col:3> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08fc28 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08fbf8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55aead08fb18 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55aead08fad0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55aead08fab8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55aead08fa78 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55aead08fb00 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55aead08fae8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55aead08fa98 <col:38> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08fbb0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead08fb68 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead08fb38 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead08fbe0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead08fbc8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08fb90 <col:66> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55aead08ff28 <line:765:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55aead08fc60 <col:3> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55aead08ff10 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead08fee0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55aead08fe00 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55aead08fd20 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55aead08fcd8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55aead08fcc0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55aead08fc80 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55aead08fd08 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55aead08fcf0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55aead08fca0 <col:38> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55aead08fde0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55aead08fd98 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55aead08fd80 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55aead08fd40 <col:56> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55aead08fdc8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55aead08fdb0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55aead08fd60 <col:74> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead08fe98 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead08fe50 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead08fe20 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead08fec8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead08feb0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead08fe78 <col:102> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x55aead08ffa0 <line:766:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead08ff68 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08ff48 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead08fff8 <line:767:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead08ffe0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead08ffc0 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead0900b0 <line:768:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55aead090018 <col:3> 'int' lvalue Var 0x55aead087740 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55aead090090 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55aead090078 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead090038 <col:22> 'int' lvalue Var 0x55aead087740 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55aead090058 <col:41> 'int' 1
|   |-CallExpr 0x55aead090108 <line:769:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead0900f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead0900d0 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55aead090180 <line:770:3, col:36>
|     `-CallExpr 0x55aead090160 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55aead090148 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55aead090128 <col:10> 'void *(void)' Function 0x55aead02dfc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55aead090378 prev 0x55aead0873c0 <line:772:1, line:800:1> line:772:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x55aead0902e0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55aead091b28 <line:773:1, line:800:1>
|   |-CallExpr 0x55aead090458 <line:774:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead090440 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead090420 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead0904d0 <line:775:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55aead090478 <col:3> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x55aead0904b8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead090498 <col:15> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55aead090530 <line:776:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55aead0904f0 <col:3> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x55aead090510 <col:15> 'int' 2
|   |-BinaryOperator 0x55aead0905a8 <line:777:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55aead090550 <col:3> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead090590 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead090570 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55aead090640 <line:778:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55aead0905c8 <col:3> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x55aead090618 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55aead0905e8 <col:27> 'int' 1
|   |-CallExpr 0x55aead0907c8 <line:779:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x55aead0907b0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55aead090660 <col:3> 'void (int)' Function 0x55aead02e238 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x55aead090760 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x55aead090740 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x55aead090720 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x55aead0906d8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x55aead0906c0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55aead090680 <col:23> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x55aead090708 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x55aead0906f0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x55aead0906a0 <col:41> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55aead090848 <line:780:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55aead0907f0 <col:3> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x55aead090830 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead090810 <col:20> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x55aead0908c0 <line:781:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55aead090868 <col:3> '_Bool' lvalue Var 0x55aead087f98 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55aead0908a8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead090888 <col:20> '_Bool' lvalue Var 0x55aead087d98 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55aead090938 <line:782:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55aead0908e0 <col:3> '_Bool' lvalue Var 0x55aead088010 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55aead090920 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead090900 <col:20> '_Bool' lvalue Var 0x55aead087e10 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55aead0909b0 <line:783:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55aead090958 <col:3> '_Bool' lvalue Var 0x55aead088088 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55aead090998 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55aead090978 <col:20> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55aead090a48 <line:784:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55aead0909d0 <col:3> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   | `-CStyleCastExpr 0x55aead090a20 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55aead0909f0 <col:27> 'int' 1
|   |-CallExpr 0x55aead090aa0 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead090a88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead090a68 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead090af8 <line:786:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead090ae0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead090ac0 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead090b58 <line:787:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55aead090b18 <col:3> 'int' lvalue Var 0x55aead088470 'y' 'int'
|   | `-IntegerLiteral 0x55aead090b38 <col:7> 'int' 1
|   |-CallExpr 0x55aead090bb0 <line:788:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead090b98 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead090b78 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead090c08 <line:789:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead090bf0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead090bd0 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead090ef0 <line:790:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55aead090c28 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   | `-ConditionalOperator 0x55aead090ec0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55aead090ce8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55aead090ca0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55aead090c88 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55aead090c48 <col:7> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55aead090cd0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55aead090cb8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55aead090c68 <col:25> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x55aead090ea8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead090d08 <col:42> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55aead090e88 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55aead090e58 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55aead090dc8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55aead090d80 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55aead090d68 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55aead090d28 <col:55> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55aead090db0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55aead090d98 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55aead090d48 <col:73> '_Bool' lvalue Var 0x55aead088088 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x55aead090e28 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55aead090de8 <col:90> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55aead090e40 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead090e08 <col:102> 'int' lvalue Var 0x55aead087b90 'x' 'int'
|   |-BinaryOperator 0x55aead091108 <line:791:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55aead090f10 <col:3> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead0910f0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead0910c0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55aead090fe0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55aead090f88 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55aead090f70 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55aead090f30 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55aead090fc8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55aead090fb0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55aead090f50 <col:38> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead091078 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead091030 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead091000 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead0910a8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead091090 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead091058 <col:66> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55aead0913f0 <line:792:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55aead091128 <col:3> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55aead0913d8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead0913a8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55aead0912c8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55aead0911e8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55aead0911a0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55aead091188 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55aead091148 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55aead0911d0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55aead0911b8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55aead091168 <col:38> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x55aead0912a8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55aead091260 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55aead091248 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55aead091208 <col:56> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55aead091290 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55aead091278 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55aead091228 <col:74> '_Bool' lvalue Var 0x55aead088088 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead091360 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead091318 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead0912e8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead091390 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead091378 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead091340 <col:102> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55aead0915f8 <line:793:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55aead091410 <col:3> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55aead0915e0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead0915b0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55aead0914d0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55aead091488 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55aead091470 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55aead091430 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55aead0914b8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55aead0914a0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55aead091450 <col:38> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead091568 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead091520 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead0914f0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead091598 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead091580 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead091548 <col:66> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55aead0918e0 <line:794:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55aead091618 <col:3> '_Bool' lvalue Var 0x55aead088088 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55aead0918c8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55aead091898 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55aead0917b8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55aead0916d8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55aead091690 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55aead091678 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55aead091638 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55aead0916c0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55aead0916a8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55aead091658 <col:38> '_Bool' lvalue Var 0x55aead087e88 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x55aead091798 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55aead091750 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55aead091738 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55aead0916f8 <col:56> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55aead091780 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55aead091768 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55aead091718 <col:74> '_Bool' lvalue Var 0x55aead088088 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55aead091850 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55aead091808 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55aead0917d8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55aead091880 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55aead091868 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55aead091830 <col:102> '_Bool' lvalue Var 0x55aead088088 'x$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x55aead091938 <line:795:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead091920 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead091900 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55aead091990 <line:796:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55aead091978 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead091958 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55aead091a48 <line:797:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55aead0919b0 <col:3> 'int' lvalue Var 0x55aead087740 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55aead091a28 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55aead091a10 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55aead0919d0 <col:22> 'int' lvalue Var 0x55aead087740 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55aead0919f0 <col:41> 'int' 1
|   |-CallExpr 0x55aead091aa0 <line:798:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55aead091a88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55aead091a68 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55aead091b18 <line:799:3, col:36>
|     `-CallExpr 0x55aead091af8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55aead091ae0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55aead091ac0 <col:10> 'void *(void)' Function 0x55aead02dfc8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55aead091c28 prev 0x55aead087488 <line:801:1, line:803:1> line:801:6 fence 'void ()'
| `-CompoundStmt 0x55aead091cc8 <line:802:1, line:803:1>
|-FunctionDecl 0x55aead091cf8 prev 0x55aead087548 <line:804:1, line:806:1> line:804:6 isync 'void ()'
| `-CompoundStmt 0x55aead091d98 <line:805:1, line:806:1>
|-FunctionDecl 0x55aead091dc8 prev 0x55aead087608 <line:807:1, line:809:1> line:807:6 lwfence 'void ()'
| `-CompoundStmt 0x55aead091e68 <line:808:1, line:809:1>
`-FunctionDecl 0x55aead091ed8 <line:810:1, line:847:1> line:810:5 main 'int ()'
  `-CompoundStmt 0x55aead096558 <line:811:1, line:847:1>
    |-DeclStmt 0x55aead092028 <line:812:3, col:18>
    | `-VarDecl 0x55aead091fc0 <col:3, col:13> col:13 used t2542 'pthread_t':'unsigned long'
    |-CallExpr 0x55aead092238 <line:813:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55aead092220 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aead092040 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55aead06e9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55aead092080 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55aead092060 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55aead091fc0 't2542' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55aead092278 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55aead0920f8 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55aead0920d0 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55aead092098 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55aead092290 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aead092118 <col:39> 'void *(void *)' Function 0x55aead088698 'P0' 'void *(void *)'
    | `-ParenExpr 0x55aead092198 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55aead092170 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55aead092138 <col:52> 'int' 0
    |-DeclStmt 0x55aead092320 <line:814:3, col:18>
    | `-VarDecl 0x55aead0922b8 <col:3, col:13> col:13 used t2543 'pthread_t':'unsigned long'
    |-CallExpr 0x55aead0924c8 <line:815:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55aead0924b0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aead092338 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55aead06e9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55aead092378 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55aead092358 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55aead0922b8 't2543' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55aead092508 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55aead0923f0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55aead0923c8 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55aead092390 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55aead092520 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aead092410 <col:39> 'void *(void *)' Function 0x55aead08b850 'P1' 'void *(void *)'
    | `-ParenExpr 0x55aead092490 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55aead092468 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55aead092430 <col:52> 'int' 0
    |-DeclStmt 0x55aead0925b0 <line:816:3, col:18>
    | `-VarDecl 0x55aead092548 <col:3, col:13> col:13 used t2544 'pthread_t':'unsigned long'
    |-CallExpr 0x55aead092758 <line:817:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55aead092740 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aead0925c8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55aead06e9d8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55aead092608 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55aead0925e8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55aead092548 't2544' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55aead092798 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55aead092680 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55aead092658 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55aead092620 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55aead0927b0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aead0926a0 <col:39> 'void *(void *)' Function 0x55aead090378 'P2' 'void *(void *)'
    | `-ParenExpr 0x55aead092720 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55aead0926f8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55aead0926c0 <col:52> 'int' 0
    |-CallExpr 0x55aead092800 <line:818:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55aead0927e8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55aead0927c8 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55aead0928d0 <line:819:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x55aead092820 <col:3> '_Bool' lvalue Var 0x55aead087a18 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x55aead0928b8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x55aead092898 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x55aead092880 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x55aead092840 <col:21> 'int' lvalue Var 0x55aead087740 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x55aead092860 <col:41> 'int' 3
    |-CallExpr 0x55aead092928 <line:820:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55aead092910 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55aead0928f0 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55aead0929a0 <line:821:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55aead092988 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aead092948 <col:3> 'void (int)' Function 0x55aead02de50 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x55aead0929e0 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55aead0929c8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55aead092968 <col:21> '_Bool' lvalue Var 0x55aead087a18 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x55aead092a30 <line:822:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55aead092a18 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55aead0929f8 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55aead092d18 <line:823:3, col:103> 'int' '='
    | |-DeclRefExpr 0x55aead092a50 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
    | `-ConditionalOperator 0x55aead092ce8 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x55aead092b10 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x55aead092ac8 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x55aead092ab0 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55aead092a70 <col:7> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x55aead092af8 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x55aead092ae0 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55aead092a90 <col:25> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55aead092cd0 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55aead092b30 <col:42> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
    |   `-ParenExpr 0x55aead092cb0 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x55aead092c80 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x55aead092bf0 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55aead092ba8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55aead092b90 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55aead092b50 <col:55> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55aead092bd8 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55aead092bc0 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55aead092b70 <col:73> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55aead092c50 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55aead092c10 <col:90> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x55aead092c68 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55aead092c30 <col:102> 'int' lvalue Var 0x55aead087b90 'x' 'int'
    |-BinaryOperator 0x55aead092f20 <line:824:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55aead092d38 <col:3> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55aead092f08 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55aead092ed8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55aead092df8 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55aead092db0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55aead092d98 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55aead092d58 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55aead092de0 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55aead092dc8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55aead092d78 <col:38> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55aead092e90 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55aead092e48 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55aead092e18 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55aead092ec0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55aead092ea8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55aead092e70 <col:66> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55aead093220 <line:825:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55aead092f40 <col:3> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55aead093208 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55aead0931d8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55aead0930f8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55aead093018 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55aead092fd0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55aead092fa0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55aead092f60 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55aead093000 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55aead092fe8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55aead092f80 <col:38> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55aead0930d8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55aead093090 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55aead093078 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55aead093038 <col:56> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55aead0930c0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55aead0930a8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55aead093058 <col:74> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55aead093190 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55aead093148 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55aead093118 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55aead0931c0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55aead0931a8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55aead093170 <col:102> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x55aead093428 <line:826:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55aead093240 <col:3> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55aead093410 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55aead0933e0 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55aead093300 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55aead0932b8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55aead0932a0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55aead093260 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55aead0932e8 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55aead0932d0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55aead093280 <col:38> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55aead093398 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55aead093350 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55aead093320 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55aead0933c8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55aead0933b0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55aead093378 <col:66> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55aead093710 <line:827:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55aead093448 <col:3> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55aead0936f8 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55aead0936c8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55aead0935e8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55aead093508 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55aead0934c0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55aead0934a8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55aead093468 <col:20> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55aead0934f0 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55aead0934d8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55aead093488 <col:38> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55aead0935c8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55aead093580 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55aead093568 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55aead093528 <col:56> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55aead0935b0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55aead093598 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55aead093548 <col:74> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55aead093680 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55aead093638 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55aead093608 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55aead0936b0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55aead093698 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55aead093660 <col:102> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x55aead093768 <line:828:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55aead093750 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55aead093730 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55aead0937c0 <line:829:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55aead0937a8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55aead093788 <col:3> 'void ()' Function 0x55aead02e4b0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55aead093858 <line:830:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x55aead0937e0 <col:3> '_Bool' lvalue Var 0x55aead088508 'weak$$choice0' '_Bool'
    | `-CallExpr 0x55aead093838 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x55aead093820 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55aead093800 <col:19> '_Bool (void)' Function 0x55aead02dc80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x55aead0938f0 <line:831:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x55aead093878 <col:3> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
    | `-CallExpr 0x55aead0938d0 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x55aead0938b8 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55aead093898 <col:19> '_Bool (void)' Function 0x55aead02dc80 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x55aead093968 <line:832:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x55aead093910 <col:3> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x55aead093950 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x55aead093930 <col:21> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x55aead0939e0 <line:833:3, col:15> 'int' '='
    | |-DeclRefExpr 0x55aead093988 <col:3> 'int' lvalue Var 0x55aead087ca8 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x55aead0939c8 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55aead0939a8 <col:15> 'int' lvalue Var 0x55aead087b90 'x' 'int'
    |-BinaryOperator 0x55aead093e18 <line:834:3, col:162> 'int' '='
    | |-DeclRefExpr 0x55aead093a00 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
    | `-ConditionalOperator 0x55aead093de8 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x55aead093c10 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x55aead093b30 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x55aead093a58 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x55aead093a40 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x55aead093a20 <col:8> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x55aead093b10 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x55aead093aa8 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x55aead093a90 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x55aead093a70 <col:27> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x55aead093af8 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x55aead093ae0 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x55aead093ac0 <col:46> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x55aead093bf0 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x55aead093b88 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x55aead093b70 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x55aead093b50 <col:65> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x55aead093bd8 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x55aead093bc0 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55aead093ba0 <col:84> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55aead093dd0 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55aead093c30 <col:101> 'int' lvalue Var 0x55aead087b90 'x' 'int'
    |   `-ParenExpr 0x55aead093db0 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x55aead093d80 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x55aead093cf0 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55aead093ca8 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55aead093c90 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55aead093c50 <col:106> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55aead093cd8 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55aead093cc0 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55aead093c70 <col:124> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55aead093d50 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55aead093d10 <col:141> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x55aead093d68 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55aead093d30 <col:153> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
    |-BinaryOperator 0x55aead094340 <line:835:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55aead093e38 <col:3> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x55aead094310 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55aead0942e0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55aead0942c8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55aead093e58 <col:15> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55aead0942f8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55aead093e78 <col:31> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
    |   `-ParenExpr 0x55aead0942a8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55aead094278 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55aead0940a0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55aead093fa8 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55aead093ed0 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55aead093eb8 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55aead093e98 <col:45> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55aead093f88 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55aead093f20 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55aead093f08 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55aead093ee8 <col:64> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55aead093f70 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55aead093f58 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55aead093f38 <col:83> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55aead094080 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55aead094018 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55aead094000 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55aead093fe0 <col:102> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55aead094068 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55aead094050 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55aead094030 <col:121> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55aead094260 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55aead0940c0 <col:138> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
    |       `-ParenExpr 0x55aead094240 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55aead094210 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55aead094180 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55aead094138 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55aead094120 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55aead0940e0 <col:151> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55aead094168 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55aead094150 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55aead094100 <col:169> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55aead0941e0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55aead0941a0 <col:186> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x55aead0941f8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55aead0941c0 <col:198> 'int' lvalue Var 0x55aead088200 'x$w_buff0' 'int'
    |-BinaryOperator 0x55aead094850 <line:836:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55aead094360 <col:3> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x55aead094820 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55aead0947f0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55aead0947d8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55aead094380 <col:15> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55aead094808 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55aead0943a0 <col:31> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
    |   `-ParenExpr 0x55aead0947b8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55aead094788 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55aead0945b0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55aead0944d0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55aead0943f8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55aead0943e0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55aead0943c0 <col:45> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55aead0944b0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55aead094448 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55aead094430 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55aead094410 <col:64> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55aead094498 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55aead094480 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55aead094460 <col:83> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55aead094590 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55aead094528 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55aead094510 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55aead0944f0 <col:102> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55aead094578 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55aead094560 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55aead094540 <col:121> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55aead094770 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55aead0945d0 <col:138> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
    |       `-ParenExpr 0x55aead094750 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55aead094720 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55aead094690 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55aead094648 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55aead094630 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55aead0945f0 <col:151> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55aead094678 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55aead094660 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55aead094610 <col:169> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55aead0946f0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55aead0946b0 <col:186> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x55aead094708 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55aead0946d0 <col:198> 'int' lvalue Var 0x55aead0882f8 'x$w_buff1' 'int'
    |-BinaryOperator 0x55aead094df8 <line:837:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55aead094870 <col:3> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55aead094de0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55aead094db0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55aead094d68 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55aead094d50 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aead094890 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55aead094d98 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55aead094d80 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aead0948b0 <col:36> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x55aead094d30 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55aead094d00 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55aead094ac0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55aead0949e0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55aead094908 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55aead0948f0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55aead0948d0 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55aead0949c0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55aead094958 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55aead094940 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55aead094920 <col:74> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55aead0949a8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55aead094990 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55aead094970 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55aead094aa0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55aead094a38 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55aead094a20 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55aead094a00 <col:112> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55aead094a88 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55aead094a70 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55aead094a50 <col:131> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55aead094ce8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55aead094cd0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55aead094ae0 <col:148> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x55aead094cb0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55aead094c80 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55aead094ba0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55aead094b58 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55aead094b40 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55aead094b00 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55aead094b88 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55aead094b70 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55aead094b20 <col:184> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55aead094c38 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55aead094bf0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55aead094bc0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55aead094c68 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55aead094c50 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55aead094c18 <col:212> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55aead0953d0 <line:838:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55aead094e18 <col:3> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55aead0953b8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55aead095388 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55aead095340 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55aead095328 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aead094e38 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55aead095370 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55aead095358 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aead094e58 <col:36> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x55aead095308 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55aead0952d8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55aead095078 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55aead094f88 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55aead094eb0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55aead094e98 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55aead094e78 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55aead094f68 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55aead094f00 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55aead094ee8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55aead094ec8 <col:74> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55aead094f50 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55aead094f38 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55aead094f18 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55aead095058 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55aead094ff0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55aead094fc8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55aead094fa8 <col:112> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55aead095040 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55aead095028 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55aead095008 <col:131> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55aead0952c0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55aead0952a8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55aead095098 <col:148> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x55aead095288 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55aead095258 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55aead095158 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55aead095110 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55aead0950f8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55aead0950b8 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55aead095140 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55aead095128 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55aead0950d8 <col:184> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55aead095228 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55aead0951a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55aead095178 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55aead095240 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55aead095200 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55aead0951d0 <col:219> 'int' 0
    |-BinaryOperator 0x55aead095978 <line:839:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55aead0953f0 <col:3> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55aead095960 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55aead095930 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55aead0958e8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55aead0958d0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aead095410 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55aead095918 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55aead095900 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aead095430 <col:36> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x55aead0958b0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55aead095880 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55aead095640 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55aead095560 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55aead095488 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55aead095470 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55aead095450 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55aead095540 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55aead0954d8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55aead0954c0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55aead0954a0 <col:74> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55aead095528 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55aead095510 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55aead0954f0 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55aead095620 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55aead0955b8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55aead0955a0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55aead095580 <col:112> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55aead095608 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55aead0955f0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55aead0955d0 <col:131> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55aead095868 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55aead095850 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55aead095660 <col:148> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x55aead095830 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55aead095800 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55aead095720 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55aead0956d8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55aead0956c0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55aead095680 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55aead095708 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55aead0956f0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55aead0956a0 <col:184> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55aead0957b8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55aead095770 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55aead095740 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55aead0957e8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55aead0957d0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55aead095798 <col:212> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55aead095f40 <line:840:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55aead095998 <col:3> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55aead095f28 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55aead095ef8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55aead095eb0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55aead095e98 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aead0959b8 <col:20> '_Bool' lvalue Var 0x55aead088580 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55aead095ee0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55aead095ec8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55aead0959d8 <col:36> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x55aead095e78 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55aead095e48 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55aead095be8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55aead095b08 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55aead095a30 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55aead095a18 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55aead0959f8 <col:55> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55aead095ae8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55aead095a80 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55aead095a68 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55aead095a48 <col:74> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55aead095ad0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55aead095ab8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55aead095a98 <col:93> '_Bool' lvalue Var 0x55aead088370 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55aead095bc8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55aead095b60 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55aead095b48 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55aead095b28 <col:112> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55aead095bb0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55aead095b98 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55aead095b78 <col:131> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55aead095e30 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55aead095e18 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55aead095c08 <col:148> '_Bool' lvalue Var 0x55aead087f20 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x55aead095df8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55aead095dc8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55aead095cc8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55aead095c80 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55aead095c68 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55aead095c28 <col:166> '_Bool' lvalue Var 0x55aead088278 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55aead095cb0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55aead095c98 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55aead095c48 <col:184> '_Bool' lvalue Var 0x55aead087d20 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55aead095d98 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55aead095d18 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55aead095ce8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55aead095db0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55aead095d70 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55aead095d40 <col:219> 'int' 0
    |-BinaryOperator 0x55aead096238 <line:841:3, col:95> '_Bool' '='
    | |-DeclRefExpr 0x55aead095f60 <col:3> '_Bool' lvalue Var 0x55aead087a90 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x55aead096220 <col:21, col:95> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x55aead096208 <col:21, col:95> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x55aead0961e8 <col:22, col:95> 'int'
    |       `-BinaryOperator 0x55aead0961c8 <col:23, col:94> 'int' '&&'
    |         |-BinaryOperator 0x55aead096130 <col:23, col:66> 'int' '&&'
    |         | |-BinaryOperator 0x55aead096098 <col:23, col:38> 'int' '&&'
    |         | | |-BinaryOperator 0x55aead096000 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x55aead095fc0 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x55aead095f80 <col:23> 'int' lvalue Var 0x55aead087b90 'x' 'int'
    |         | | | `-IntegerLiteral 0x55aead095fa0 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x55aead096078 <col:33, col:38> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x55aead096060 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x55aead096020 <col:33> 'int' lvalue Var 0x55aead088470 'y' 'int'
    |         | |   `-IntegerLiteral 0x55aead096040 <col:38> 'int' 2
    |         | `-BinaryOperator 0x55aead096110 <col:43, col:66> 'int' '=='
    |         |   |-ImplicitCastExpr 0x55aead0960f8 <col:43> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x55aead0960b8 <col:43> 'int' lvalue Var 0x55aead087860 '__unbuffered_p0_EAX' 'int'
    |         |   `-IntegerLiteral 0x55aead0960d8 <col:66> 'int' 0
    |         `-BinaryOperator 0x55aead0961a8 <col:71, col:94> 'int' '=='
    |           |-ImplicitCastExpr 0x55aead096190 <col:71> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55aead096150 <col:71> 'int' lvalue Var 0x55aead087980 '__unbuffered_p1_EAX' 'int'
    |           `-IntegerLiteral 0x55aead096170 <col:94> 'int' 1
    |-BinaryOperator 0x55aead096368 <line:842:3, col:37> 'int' '='
    | |-DeclRefExpr 0x55aead096258 <col:3> 'int' lvalue Var 0x55aead087b90 'x' 'int'
    | `-ConditionalOperator 0x55aead096338 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x55aead0962f0 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55aead0962d8 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55aead096278 <col:7> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x55aead096308 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55aead096298 <col:25> 'int' lvalue Var 0x55aead087ca8 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x55aead096320 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x55aead0962b8 <col:37> 'int' lvalue Var 0x55aead087b90 'x' 'int'
    |-BinaryOperator 0x55aead096400 <line:843:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x55aead096388 <col:3> '_Bool' lvalue Var 0x55aead087c28 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x55aead0963d8 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x55aead0963a8 <col:28> 'int' 0
    |-CallExpr 0x55aead096458 <line:844:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55aead096440 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55aead096420 <col:3> 'void ()' Function 0x55aead02e570 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55aead0964d0 <line:845:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55aead0964b8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55aead096478 <col:3> 'void (int)' Function 0x55aead02e238 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x55aead096510 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55aead0964f8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55aead096498 <col:21> '_Bool' lvalue Var 0x55aead087a90 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x55aead096548 <line:846:3, col:10>
      `-IntegerLiteral 0x55aead096528 <col:10> 'int' 0
