TranslationUnitDecl 0x5568cf510698 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5568cf510f58 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5568cf510c30 '__int128'
|-TypedefDecl 0x5568cf510fc8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5568cf510c50 'unsigned __int128'
|-TypedefDecl 0x5568cf5112d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5568cf5110a0 'struct __NSConstantString_tag'
|   `-Record 0x5568cf511020 '__NSConstantString_tag'
|-TypedefDecl 0x5568cf511378 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5568cf511330 'char *'
|   `-BuiltinType 0x5568cf510730 'char'
|-TypedefDecl 0x5568cf550670 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5568cf511610 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5568cf511450 'struct __va_list_tag'
|     `-Record 0x5568cf5113d0 '__va_list_tag'
|-EnumDecl 0x5568cf5506c8 <termination-crafted-lit/ChenFlurMukhopadhyay-SAS2012-Ex3.10_false-no-overflow.c:18:9, col:26> col:9
| |-EnumConstantDecl 0x5568cf550798 <col:15> col:15 false 'int'
| `-EnumConstantDecl 0x5568cf5507e8 <col:22> col:22 true 'int'
|-TypedefDecl 0x5568cf5508a0 <col:1, col:28> col:28 bool 'enum bool':'bool'
| `-ElaboratedType 0x5568cf550840 'enum bool' sugar
|   `-EnumType 0x5568cf550770 'bool'
|     `-Enum 0x5568cf5506c8 ''
|-FunctionDecl 0x5568cf5509e8 <line:20:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
`-FunctionDecl 0x5568cf550b28 <line:22:1, line:32:1> line:22:5 main 'int ()'
  `-CompoundStmt 0x5568cf551340 <col:12, line:32:1>
    |-DeclStmt 0x5568cf550d68 <line:23:5, col:16>
    | |-VarDecl 0x5568cf550be0 <col:5, col:9> col:9 used x 'int'
    | |-VarDecl 0x5568cf550c60 <col:5, col:12> col:12 used y 'int'
    | `-VarDecl 0x5568cf550ce0 <col:5, col:15> col:15 used z 'int'
    |-BinaryOperator 0x5568cf550e28 <line:24:5, col:31> 'int' '='
    | |-DeclRefExpr 0x5568cf550d80 <col:5> 'int' lvalue Var 0x5568cf550be0 'x' 'int'
    | `-CallExpr 0x5568cf550e08 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x5568cf550df0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5568cf550da0 <col:9> 'int (void)' Function 0x5568cf5509e8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x5568cf550ec0 <line:25:5, col:31> 'int' '='
    | |-DeclRefExpr 0x5568cf550e48 <col:5> 'int' lvalue Var 0x5568cf550c60 'y' 'int'
    | `-CallExpr 0x5568cf550ea0 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x5568cf550e88 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5568cf550e68 <col:9> 'int (void)' Function 0x5568cf5509e8 '__VERIFIER_nondet_int' 'int (void)'
    |-BinaryOperator 0x5568cf550f58 <line:26:5, col:31> 'int' '='
    | |-DeclRefExpr 0x5568cf550ee0 <col:5> 'int' lvalue Var 0x5568cf550ce0 'z' 'int'
    | `-CallExpr 0x5568cf550f38 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x5568cf550f20 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5568cf550f00 <col:9> 'int (void)' Function 0x5568cf5509e8 '__VERIFIER_nondet_int' 'int (void)'
    |-WhileStmt 0x5568cf5512f8 <line:27:5, line:30:5>
    | |-BinaryOperator 0x5568cf5510c0 <line:27:12, col:31> 'int' '&&'
    | | |-BinaryOperator 0x5568cf550fd0 <col:12, col:17> 'int' '>='
    | | | |-ImplicitCastExpr 0x5568cf550fb8 <col:12> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x5568cf550f78 <col:12> 'int' lvalue Var 0x5568cf550be0 'x' 'int'
    | | | `-IntegerLiteral 0x5568cf550f98 <col:17> 'int' 0
    | | `-BinaryOperator 0x5568cf5510a0 <col:22, col:31> 'int' '>='
    | |   |-BinaryOperator 0x5568cf551060 <col:22, col:26> 'int' '+'
    | |   | |-ImplicitCastExpr 0x5568cf551030 <col:22> 'int' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x5568cf550ff0 <col:22> 'int' lvalue Var 0x5568cf550be0 'x' 'int'
    | |   | `-ImplicitCastExpr 0x5568cf551048 <col:26> 'int' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x5568cf551010 <col:26> 'int' lvalue Var 0x5568cf550c60 'y' 'int'
    | |   `-IntegerLiteral 0x5568cf551080 <col:31> 'int' 0
    | `-CompoundStmt 0x5568cf5512d8 <col:34, line:30:5>
    |   |-BinaryOperator 0x5568cf5511e8 <line:28:9, col:21> 'int' '='
    |   | |-DeclRefExpr 0x5568cf5510e0 <col:9> 'int' lvalue Var 0x5568cf550be0 'x' 'int'
    |   | `-BinaryOperator 0x5568cf5511c8 <col:13, col:21> 'int' '+'
    |   |   |-BinaryOperator 0x5568cf551170 <col:13, col:17> 'int' '+'
    |   |   | |-ImplicitCastExpr 0x5568cf551140 <col:13> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x5568cf551100 <col:13> 'int' lvalue Var 0x5568cf550be0 'x' 'int'
    |   |   | `-ImplicitCastExpr 0x5568cf551158 <col:17> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x5568cf551120 <col:17> 'int' lvalue Var 0x5568cf550c60 'y' 'int'
    |   |   `-ImplicitCastExpr 0x5568cf5511b0 <col:21> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x5568cf551190 <col:21> 'int' lvalue Var 0x5568cf550ce0 'z' 'int'
    |   `-BinaryOperator 0x5568cf5512b8 <line:29:9, col:18> 'int' '='
    |     |-DeclRefExpr 0x5568cf551208 <col:9> 'int' lvalue Var 0x5568cf550c60 'y' 'int'
    |     `-BinaryOperator 0x5568cf551298 <col:13, col:18> 'int' '-'
    |       |-UnaryOperator 0x5568cf551260 <col:13, col:14> 'int' prefix '-'
    |       | `-ImplicitCastExpr 0x5568cf551248 <col:14> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x5568cf551228 <col:14> 'int' lvalue Var 0x5568cf550ce0 'z' 'int'
    |       `-IntegerLiteral 0x5568cf551278 <col:18> 'int' 1
    `-ReturnStmt 0x5568cf551330 <line:31:5, col:12>
      `-IntegerLiteral 0x5568cf551310 <col:12> 'int' 0
