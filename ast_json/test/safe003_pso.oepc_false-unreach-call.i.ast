TranslationUnitDecl 0x562f5e333f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x562f5e334848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x562f5e334520 '__int128'
|-TypedefDecl 0x562f5e3348b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x562f5e334540 'unsigned __int128'
|-TypedefDecl 0x562f5e334bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x562f5e334990 'struct __NSConstantString_tag'
|   `-Record 0x562f5e334910 '__NSConstantString_tag'
|-TypedefDecl 0x562f5e334c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x562f5e334c20 'char *'
|   `-BuiltinType 0x562f5e334020 'char'
|-TypedefDecl 0x562f5e373b60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x562f5e334f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x562f5e334d40 'struct __va_list_tag'
|     `-Record 0x562f5e334cc0 '__va_list_tag'
|-FunctionDecl 0x562f5e373ca0 <pthread-wmm/safe003_pso.oepc_false-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x562f5e373bd0 <col:31> col:34 'int'
|-FunctionDecl 0x562f5e373e68 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x562f5e373f90 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x562f5e3740d8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x562f5e374048 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x562f5e374308 <col:40, col:99>
|   |-IfStmt 0x562f5e3742d8 <col:42, col:88>
|   | |-UnaryOperator 0x562f5e3741b8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x562f5e3741a0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x562f5e374180 <col:47> 'int' lvalue ParmVar 0x562f5e374048 'expression' 'int'
|   | `-CompoundStmt 0x562f5e3742c0 <col:59, col:88>
|   |   `-LabelStmt 0x562f5e3742a8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x562f5e374238 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x562f5e374220 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x562f5e3741d0 <col:68> 'void () __attribute__((noreturn))' Function 0x562f5e373f90 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x562f5e3742f0 <col:89>
|   `-ReturnStmt 0x562f5e3742f8 <col:91>
|-FunctionDecl 0x562f5e374350 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x562f5e374410 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x562f5e374790 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x562f5e3744c8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x562f5e374548 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x562f5e3745c8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x562f5e374648 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x562f5e374850 <line:10:22>
|-FunctionDecl 0x562f5e39a8a0 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x562f5e3748c0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x562f5e374940 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x562f5e3749c0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x562f5e374a40 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x562f5e39a960 <line:13:22>
|-FunctionDecl 0x562f5e39ac10 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x562f5e39a9d0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x562f5e39aa50 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x562f5e39aad0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x562f5e39acc8 <line:15:22>
|-TypedefDecl 0x562f5e39ad38 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x562f5e3340e0 'unsigned char'
|-TypedefDecl 0x562f5e39ada8 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x562f5e334100 'unsigned short'
|-TypedefDecl 0x562f5e39ae18 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-TypedefDecl 0x562f5e39ae88 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39aef8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x562f5e334040 'signed char'
|-TypedefDecl 0x562f5e39af68 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x562f5e3340e0 'unsigned char'
|-TypedefDecl 0x562f5e39afd8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x562f5e334060 'short'
|-TypedefDecl 0x562f5e39b048 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x562f5e334100 'unsigned short'
|-TypedefDecl 0x562f5e39b0b8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x562f5e334080 'int'
|-TypedefDecl 0x562f5e39b128 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-TypedefDecl 0x562f5e39b198 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39b208 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39b278 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39b2e8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39b358 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39b3c8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-TypedefDecl 0x562f5e39b438 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-TypedefDecl 0x562f5e39b4a8 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39b518 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39b588 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-TypedefDecl 0x562f5e39b5f8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39b668 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39b6d8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39b748 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x562f5e334080 'int'
|-RecordDecl 0x562f5e39b7a0 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x562f5e39b918 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x562f5e39b9d0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x562f5e39b970 'struct __fsid_t' sugar
|   `-RecordType 0x562f5e39b820 '__fsid_t'
|     `-Record 0x562f5e39b7a0 ''
|-TypedefDecl 0x562f5e39ba58 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39bac8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39bb38 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39bba8 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-TypedefDecl 0x562f5e39bc18 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39bc88 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-TypedefDecl 0x562f5e39bcf8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39bd68 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x562f5e334080 'int'
|-TypedefDecl 0x562f5e39bdd8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x562f5e334080 'int'
|-TypedefDecl 0x562f5e39be48 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x562f5e334080 'int'
|-TypedefDecl 0x562f5e39beb8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x562f5e3347a0 'void *'
|   `-BuiltinType 0x562f5e333fe0 'void'
|-TypedefDecl 0x562f5e39bf28 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39bf98 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39c008 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39c078 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39c0e8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39c158 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39c1c8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39c238 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39c2a8 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39c318 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39c388 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39c418 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x562f5e39c3e0 '__off64_t' sugar
|   |-Typedef 0x562f5e39b6d8 '__off64_t'
|   `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39c510 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x562f5e39c4d0 '__quad_t *'
|   `-TypedefType 0x562f5e39c470 '__quad_t' sugar
|     |-Typedef 0x562f5e39b278 '__quad_t'
|     `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39c580 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x562f5e334c20 'char *'
|   `-BuiltinType 0x562f5e334020 'char'
|-TypedefDecl 0x562f5e39c5f0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e39c660 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-FunctionDecl 0x562f5e39c7a8 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x562f5e39c6d0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x562f5e39cae8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x562f5e39cad8 <line:72:3, col:34>
|     `-CallExpr 0x562f5e39ca98 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x562f5e39ca80 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x562f5e39ca10 <col:10> '<builtin fn type>' Function 0x562f5e39c880 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x562f5e39cac0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x562f5e39ca30 <col:29> 'unsigned int' lvalue ParmVar 0x562f5e39c6d0 '__bsx' 'unsigned int'
|-FunctionDecl 0x562f5e39c880 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x562f5e39c920 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x562f5e39c990 <col:10> Implicit
| `-ConstAttr 0x562f5e39c9e8 <col:10> Implicit
|-FunctionDecl 0x562f5e39cc40 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x562f5e39cb38 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x562f5e39cf58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x562f5e39cf48 <line:77:3, col:34>
|     `-CallExpr 0x562f5e39cf08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x562f5e39cef0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x562f5e39ce78 <col:10> '<builtin fn type>' Function 0x562f5e39cce8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x562f5e39cf30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x562f5e39ce98 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x562f5e39cb38 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x562f5e39cce8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x562f5e39cd88 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x562f5e39cdf8 <col:10> Implicit
| `-ConstAttr 0x562f5e39ce50 <col:10> Implicit
|-TypedefDecl 0x562f5e39cf88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-TypedefDecl 0x562f5e39d018 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x562f5e39cfe0 '__time_t' sugar
|   |-Typedef 0x562f5e39bc18 '__time_t'
|   `-BuiltinType 0x562f5e3340a0 'long'
|-RecordDecl 0x562f5e39d070 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x562f5e39d128 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x562f5e39d1b8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x562f5e39d248 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x562f5e39d210 '__pid_t' sugar
|   |-Typedef 0x562f5e39b748 '__pid_t'
|   `-BuiltinType 0x562f5e334080 'int'
|-RecordDecl 0x562f5e39d2a0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x562f5e39d360 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x562f5e39d3b0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x562f5e39d470 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x562f5e39d4d8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-RecordDecl 0x562f5e39d530 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x562f5e39d7c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x562f5e39f8b0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x562f5e39d810 'struct cpu_set_t' sugar
|   `-RecordType 0x562f5e39d5b0 'cpu_set_t'
|     `-Record 0x562f5e39d530 ''
|-FunctionDecl 0x562f5e39fb88 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x562f5e39f958 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x562f5e39fa60 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x562f5e39fc38 <line:107:19>
|-FunctionDecl 0x562f5e39fe10 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x562f5e39fca0 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x562f5e39feb8 <col:69>
|-FunctionDecl 0x562f5e3a0030 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x562f5e39ff20 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x562f5e3a00d8 <col:64>
|-FunctionDecl 0x562f5e3a0398 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x562f5e3a0140 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x562f5e3a0278 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x562f5e3a0448 <line:113:22>
|-FunctionDecl 0x562f5e3a06c8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x562f5e3a04b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x562f5e3a05a8 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x562f5e3a0778 <col:88>
|-FunctionDecl 0x562f5e3a0a98 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x562f5e3a07e0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x562f5e3a08c0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x562f5e3a0950 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x562f5e3a0b50 <col:62>
|-FunctionDecl 0x562f5e3a0cc8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x562f5e3a0bb8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x562f5e3a0d70 <col:63>
|-FunctionDecl 0x562f5e3a0e98 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x562f5e3a0f38 <col:47>
|-FunctionDecl 0x562f5e3a1040 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x562f5e3a0fa8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x562f5e3a10e8 <col:69>
|-FunctionDecl 0x562f5e3a11f0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x562f5e3a1158 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x562f5e3a1298 <col:69>
|-FunctionDecl 0x562f5e3a1558 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x562f5e3a1300 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x562f5e3a1438 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x562f5e3a1608 <col:88>
|-TypedefDecl 0x562f5e3a1698 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x562f5e3a1660 '__clock_t' sugar
|   |-Typedef 0x562f5e39ba58 '__clock_t'
|   `-BuiltinType 0x562f5e3340a0 'long'
|-TypedefDecl 0x562f5e3a1728 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x562f5e3a16f0 '__clockid_t' sugar
|   |-Typedef 0x562f5e39be48 '__clockid_t'
|   `-BuiltinType 0x562f5e334080 'int'
|-TypedefDecl 0x562f5e3a17b8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x562f5e3a1780 '__timer_t' sugar
|   |-Typedef 0x562f5e39beb8 '__timer_t'
|   `-PointerType 0x562f5e3347a0 'void *'
|     `-BuiltinType 0x562f5e333fe0 'void'
|-RecordDecl 0x562f5e3a1810 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x562f5e3a18e8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x562f5e3a1950 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x562f5e3a19b8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x562f5e3a1a20 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x562f5e3a1a88 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x562f5e3a1af0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x562f5e3a1b58 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x562f5e3a1bc0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x562f5e3a1c28 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x562f5e3a1c90 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x562f5e3a1cf8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x562f5e3a1d48 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x562f5e3a1e18 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x562f5e3a1e88 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x562f5e3a1f30 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x562f5e3a2100 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x562f5e3a21a0 <col:45>
|-FunctionDecl 0x562f5e3a2380 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x562f5e3a2270 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x562f5e3a2428 <col:54>
|-FunctionDecl 0x562f5e3a2628 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x562f5e3a2490 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x562f5e3a2508 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x562f5e3a26d8 <line:157:22>
| `-ConstAttr 0x562f5e3a2730 <col:63>
|-FunctionDecl 0x562f5e3a3560 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x562f5e3a2828 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x562f5e3a3608 <col:56>
|-FunctionDecl 0x562f5e3a39b0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x562f5e3a3678 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x562f5e3a36f0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x562f5e3a3770 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x562f5e3a3868 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x562f5e3a3a70 <col:54>
|-RecordDecl 0x562f5e3a3ac8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x562f5e3a3b78 parent 0x562f5e333f88 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x562f5e3a3dd8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x562f5e3a3e78 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x562f5e3a3ee0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x562f5e3a3f48 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x562f5e3a4038 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x562f5e3a4158 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x562f5e3a4100 'struct __locale_struct *'
|   `-ElaboratedType 0x562f5e3a4090 'struct __locale_struct' sugar
|     `-RecordType 0x562f5e3a3b50 'struct __locale_struct'
|       `-Record 0x562f5e3a3ac8 '__locale_struct'
|-TypedefDecl 0x562f5e3a4208 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x562f5e3a41d0 '__locale_t' sugar
|   |-Typedef 0x562f5e3a4158 '__locale_t'
|   `-PointerType 0x562f5e3a4100 'struct __locale_struct *'
|     `-ElaboratedType 0x562f5e3a4090 'struct __locale_struct' sugar
|       `-RecordType 0x562f5e3a3b50 'struct __locale_struct'
|         `-Record 0x562f5e3a3ac8 '__locale_struct'
|-FunctionDecl 0x562f5e3a4610 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x562f5e3a4278 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x562f5e3a42f0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x562f5e3a4370 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x562f5e3a4400 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x562f5e3a4478 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x562f5e3a46d8 <col:40>
|-FunctionDecl 0x562f5e3a48c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x562f5e3a47a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x562f5e3a4970 <col:66>
|-FunctionDecl 0x562f5e3a4a80 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x562f5e3a49d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x562f5e3a4b28 <col:69>
|-FunctionDecl 0x562f5e3a4d58 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x562f5e3a4b90 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x562f5e3a4c20 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x562f5e3a4e08 <col:52>
|-FunctionDecl 0x562f5e3a4fb0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x562f5e3a4e70 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x562f5e3a4f00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x562f5e3a5060 <col:55>
|-FunctionDecl 0x562f5e3a51f8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x562f5e3a50e0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x562f5e3a52a0 <col:62>
|-FunctionDecl 0x562f5e3a5418 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x562f5e3a5308 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x562f5e3a54c0 <col:60>
|-FunctionDecl 0x562f5e3a5718 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x562f5e3a5578 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x562f5e3a55f8 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x562f5e3a57c8 <col:44>
|-FunctionDecl 0x562f5e3a59d8 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x562f5e3a5830 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x562f5e3a58b0 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x562f5e3a5a88 <col:49>
|-VarDecl 0x562f5e3a5b88 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x562f5e3a5c08 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x562f5e3a5c88 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x562f5e3a5d50 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x562f5e3a5e80 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x562f5e3a5f20 <col:42>
|-VarDecl 0x562f5e3a5f90 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x562f5e3a6010 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x562f5e3a6198 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x562f5e3a6088 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x562f5e3a6240 <col:57>
|-FunctionDecl 0x562f5e3a6350 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x562f5e3a62c0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x562f5e3a63f8 <col:56>
|-FunctionDecl 0x562f5e3a7540 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x562f5e3a6478 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x562f5e3a75e8 <col:59>
|-FunctionDecl 0x562f5e3a76f0 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x562f5e3a7658 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x562f5e3a7798 <col:48>
| `-ConstAttr 0x562f5e3a77f0 <col:89>
|-FunctionDecl 0x562f5e3a7a58 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x562f5e3a78a8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x562f5e3a7938 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x562f5e3a7cb8 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x562f5e3a7b48 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562f5e3a7bd8 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x562f5e3a7d68 <col:88>
|-FunctionDecl 0x562f5e3a7f00 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x562f5e3a7dd0 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562f5e3a7e60 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x562f5e3a7fb0 <col:88>
|-FunctionDecl 0x562f5e3a81c8 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x562f5e3a8018 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562f5e3a80a8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x562f5e3a8278 <line:208:22>
|-FunctionDecl 0x562f5e3a85e8 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x562f5e3a82e0 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562f5e3a8360 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x562f5e3a83f0 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x562f5e3a8480 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x562f5e3a88e8 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x562f5e3a86e8 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x562f5e3a87c0 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x562f5e3a8998 <col:85>
|-FunctionDecl 0x562f5e3a8d88 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x562f5e3a8a00 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x562f5e3a8b38 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x562f5e3a8c40 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x562f5e3a8e40 <col:52>
|-FunctionDecl 0x562f5e3a8fb8 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x562f5e3a8ea8 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x562f5e3a9060 <col:61>
|-FunctionDecl 0x562f5e3a9560 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x562f5e3a90c8 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x562f5e3a9148 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x562f5e3a9278 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x562f5e3a9368 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x562f5e3a9620 <col:62>
|-FunctionDecl 0x562f5e3a9838 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x562f5e3a9688 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x562f5e3a9718 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x562f5e3a98e8 <line:221:22>
|-FunctionDecl 0x562f5e3a99e8 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x562f5e3a9950 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x562f5e3a9a90 <col:65>
|-TypedefDecl 0x562f5e3a9b00 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x562f5e334140 'unsigned long'
|-RecordDecl 0x562f5e3a9b58 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x562f5e3a9ca0 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x562f5e3a9d08 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x562f5e3a9db8 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x562f5e3a9d60 'union pthread_attr_t' sugar
|   `-RecordType 0x562f5e3a9be0 'union pthread_attr_t'
|     `-Record 0x562f5e3a9b58 'pthread_attr_t'
|-RecordDecl 0x562f5e3a9e10 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x562f5e3a9f88 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x562f5e3aa000 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x562f5e3aa0b0 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x562f5e3aa050 'struct __pthread_internal_list' sugar
|   `-RecordType 0x562f5e3a9e90 'struct __pthread_internal_list'
|     `-Record 0x562f5e3a9e10 '__pthread_internal_list'
|-RecordDecl 0x562f5e3aa120 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x562f5e3aa1c8 parent 0x562f5e333f88 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x562f5e3aa2a0 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x562f5e3aa308 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x562f5e3aa370 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x562f5e3aa3d8 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x562f5e3aa440 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x562f5e3aa4a8 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x562f5e3ae580 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x562f5e3ae630 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x562f5e3ae720 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x562f5e3ae788 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x562f5e3ae910 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x562f5e3ae8b0 'union pthread_mutex_t' sugar
|   `-RecordType 0x562f5e3aa1a0 'pthread_mutex_t'
|     `-Record 0x562f5e3aa120 ''
|-RecordDecl 0x562f5e3ae980 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x562f5e3aeac0 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x562f5e3aeb28 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x562f5e3aebe0 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x562f5e3aeb80 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x562f5e3aea00 'pthread_mutexattr_t'
|     `-Record 0x562f5e3ae980 ''
|-RecordDecl 0x562f5e3aec50 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x562f5e3aecf8 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x562f5e3aedc0 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x562f5e3aee28 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x562f5e3aee90 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x562f5e3aeef8 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x562f5e3aef60 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x562f5e3aefc8 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x562f5e3af030 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x562f5e3af098 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x562f5e3af150 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe003_pso.oepc_false-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/safe003_pso.oepc_false-unreach-call.i:258:3)'
| |-FieldDecl 0x562f5e3af240 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x562f5e3af2a8 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x562f5e3af3e0 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x562f5e3af380 'union pthread_cond_t' sugar
|   `-RecordType 0x562f5e3aecd0 'pthread_cond_t'
|     `-Record 0x562f5e3aec50 ''
|-RecordDecl 0x562f5e3af450 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x562f5e3af590 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x562f5e3af5f8 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x562f5e3af6b0 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x562f5e3af650 'union pthread_condattr_t' sugar
|   `-RecordType 0x562f5e3af4d0 'pthread_condattr_t'
|     `-Record 0x562f5e3af450 ''
|-TypedefDecl 0x562f5e3af738 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x562f5e334120 'unsigned int'
|-TypedefDecl 0x562f5e3af7a8 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x562f5e334080 'int'
|-RecordDecl 0x562f5e3af800 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x562f5e3af8a8 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x562f5e3af970 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x562f5e3af9d8 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x562f5e3afa40 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x562f5e3afaa8 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x562f5e3afb10 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x562f5e3afb78 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x562f5e3afbe0 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x562f5e3afc48 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x562f5e3afcb0 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x562f5e3afd18 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x562f5e3afd80 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x562f5e3afe30 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at pthread-wmm/safe003_pso.oepc_false-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/safe003_pso.oepc_false-unreach-call.i:281:3)'
| |-FieldDecl 0x562f5e3afed8 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x562f5e3aff40 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x562f5e3b0090 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x562f5e3b0030 'union pthread_rwlock_t' sugar
|   `-RecordType 0x562f5e3af880 'pthread_rwlock_t'
|     `-Record 0x562f5e3af800 ''
|-RecordDecl 0x562f5e3b0100 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x562f5e3b0240 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x562f5e3b02a8 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x562f5e3b0360 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x562f5e3b0300 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x562f5e3b0180 'pthread_rwlockattr_t'
|     `-Record 0x562f5e3b0100 ''
|-TypedefDecl 0x562f5e3b03e8 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x562f5e334084 'volatile int' volatile
|   `-BuiltinType 0x562f5e334080 'int'
|-RecordDecl 0x562f5e3b0440 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x562f5e3b25b0 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x562f5e3b2618 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x562f5e3b26d0 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x562f5e3b2670 'union pthread_barrier_t' sugar
|   `-RecordType 0x562f5e3b04c0 'pthread_barrier_t'
|     `-Record 0x562f5e3b0440 ''
|-RecordDecl 0x562f5e3b2740 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x562f5e3b2840 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x562f5e3b28a8 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x562f5e3b2960 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x562f5e3b2900 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x562f5e3b27c0 'pthread_barrierattr_t'
|     `-Record 0x562f5e3b2740 ''
|-TypedefDecl 0x562f5e3b2a78 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x562f5e3b2a10 'long [8]' 8 
|   `-BuiltinType 0x562f5e3340a0 'long'
|-EnumDecl 0x562f5e3b2ad0 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x562f5e3b2b98 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x562f5e3b2be8 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x562f5e3b2c38 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x562f5e3b2d08 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x562f5e3b2d58 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x562f5e3b2da8 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x562f5e3b2df8 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x562f5e3b2e80 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x562f5e3b2e68 <col:26> 'int'
| |   `-DeclRefExpr 0x562f5e3b2e48 <col:26> 'int' EnumConstant 0x562f5e3b2d08 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x562f5e3b2f08 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x562f5e3b2ef0 <col:29> 'int'
| |   `-DeclRefExpr 0x562f5e3b2ed0 <col:29> 'int' EnumConstant 0x562f5e3b2d58 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x562f5e3b2f90 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x562f5e3b2f78 <col:30> 'int'
| |   `-DeclRefExpr 0x562f5e3b2f58 <col:30> 'int' EnumConstant 0x562f5e3b2da8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x562f5e3b3018 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x562f5e3b3000 <col:27> 'int'
|     `-DeclRefExpr 0x562f5e3b2fe0 <col:27> 'int' EnumConstant 0x562f5e3b2e80 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x562f5e3b3068 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x562f5e3b3138 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x562f5e3b31c0 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x562f5e3b31a8 <col:30> 'int'
| |   `-DeclRefExpr 0x562f5e3b3188 <col:30> 'int' EnumConstant 0x562f5e3b3138 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x562f5e3b3210 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x562f5e3b3298 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x562f5e3b3280 <col:29> 'int'
|     `-DeclRefExpr 0x562f5e3b3260 <col:29> 'int' EnumConstant 0x562f5e3b3210 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x562f5e3b32e8 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x562f5e3b33b8 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x562f5e3b3408 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x562f5e3b3458 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x562f5e3b34a8 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x562f5e3b35c0 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x562f5e3b3610 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x562f5e3b3660 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x562f5e3b36e8 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x562f5e3b36d0 <col:31> 'int'
|     `-DeclRefExpr 0x562f5e3b36b0 <col:31> 'int' EnumConstant 0x562f5e3b35c0 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x562f5e3b3738 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x562f5e3b3808 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x562f5e3b3858 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x562f5e3b38a8 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x562f5e3b3978 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x562f5e3b39c8 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x562f5e3b3a18 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x562f5e3b3ae8 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x562f5e3b3b38 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x562f5e3b3b88 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x562f5e3b3dc8 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x562f5e3b3e30 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x562f5e3b3e98 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x562f5e3b3fb8 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x562f5e3b4008 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x562f5e3b40d8 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x562f5e3b4128 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x562f5e3b4178 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x562f5e3b4248 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x562f5e3b4298 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x562f5e3b48f8 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x562f5e3b4390 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x562f5e3b44a0 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3b46e0 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x562f5e3b4760 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x562f5e3b49b8 <col:47>
| |-NonNullAttr 0x562f5e3b4a10 <col:77, col:94> 1 3
| `-CallbackAttr 0x562f5e3b4a48 <line:385:12> Implicit 2 3
|-FunctionDecl 0x562f5e3b4b70 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x562f5e3b4aa0 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x562f5e3b4dc8 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x562f5e3b4c28 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x562f5e3b4ca8 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x562f5e3b4f98 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x562f5e3b4e88 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x562f5e3b5040 <col:60>
|-FunctionDecl 0x562f5e3b5190 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x562f5e3b5230 <col:54>
| `-ConstAttr 0x562f5e3b5288 <col:95>
|-FunctionDecl 0x562f5e3b5458 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x562f5e3b52c0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x562f5e3b5338 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x562f5e3b5508 <line:394:19>
| `-ConstAttr 0x562f5e3b5560 <col:60>
|-FunctionDecl 0x562f5e3b5f68 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x562f5e3b5e30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x562f5e3b6010 <col:71>
| `-NonNullAttr 0x562f5e3b6068 <col:112, col:126> 1
|-FunctionDecl 0x562f5e3b6170 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x562f5e3b60b8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x562f5e3b6218 <line:397:22>
| `-NonNullAttr 0x562f5e3b6270 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3b6498 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x562f5e3b62b8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3b6338 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x562f5e3b6548 <line:400:22>
| `-NonNullAttr 0x562f5e3b65a0 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3b67a8 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3b65e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3b6668 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x562f5e3b6858 <line:403:22>
| `-NonNullAttr 0x562f5e3b68b0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3b6b08 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x562f5e3b68f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3b69a0 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x562f5e3b6bb8 <line:406:22>
| `-NonNullAttr 0x562f5e3b6c10 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3b7e48 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x562f5e3b6c58 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3b6cd0 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x562f5e3b7ef8 <line:409:22>
| `-NonNullAttr 0x562f5e3b7f50 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3b8188 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x562f5e3b7f98 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3b8028 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x562f5e3b8238 <line:412:22>
| `-NonNullAttr 0x562f5e3b8290 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3b84c8 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x562f5e3b82d8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3b8368 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x562f5e3b8578 <col:37>
| `-NonNullAttr 0x562f5e3b85d0 <col:78, col:95> 1 2
|-FunctionDecl 0x562f5e3b87b8 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3b8618 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3b8698 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x562f5e3b8868 <line:418:22>
| `-NonNullAttr 0x562f5e3b88c0 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3b8a48 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3b8908 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3b8988 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x562f5e3b8af8 <line:420:22>
| `-NonNullAttr 0x562f5e3b8b50 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3b8cf8 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3b8b98 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3b8c18 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x562f5e3b8da8 <line:423:22>
| `-NonNullAttr 0x562f5e3b9e30 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3b9fb8 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3b9e78 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3b9ef8 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x562f5e3ba068 <line:426:22>
| `-NonNullAttr 0x562f5e3ba0c0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3ba268 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3ba108 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3ba188 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x562f5e3ba318 <line:429:22>
| `-NonNullAttr 0x562f5e3ba370 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3ba4f8 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3ba3b8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3ba438 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x562f5e3ba5a8 <line:431:22>
| `-NonNullAttr 0x562f5e3ba600 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3ba828 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x562f5e3ba648 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3ba6c8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x562f5e3ba8d8 <line:434:22>
| |-NonNullAttr 0x562f5e3ba930 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x562f5e3ba968 <col:100> "" ""
|-FunctionDecl 0x562f5e3bab78 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x562f5e3ba9b8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3baa38 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x562f5e3bac28 <line:437:22>
| |-NonNullAttr 0x562f5e3bac80 <col:63, col:77> 1
| `-DeprecatedAttr 0x562f5e3bacb8 <col:97> "" ""
|-FunctionDecl 0x562f5e3baeb8 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x562f5e3bad08 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3bad80 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x562f5e3baf68 <line:440:22>
| `-NonNullAttr 0x562f5e3bafc0 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3bb140 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x562f5e3bb008 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3bb080 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x562f5e3bb1f0 <line:443:22>
| `-NonNullAttr 0x562f5e3bb248 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3bb538 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x562f5e3bb298 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x562f5e3bb318 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x562f5e3bb390 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x562f5e3bb5f0 <line:447:22>
| `-NonNullAttr 0x562f5e3bb648 <col:63, col:83> 1 2 3
|-FunctionDecl 0x562f5e3bb8f8 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x562f5e3bb6a0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x562f5e3bb720 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x562f5e3bb798 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x562f5e3bb9b0 <col:43>
| `-NonNullAttr 0x562f5e3bba08 <col:84, col:98> 1
|-FunctionDecl 0x562f5e3bbcc8 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x562f5e3bba58 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x562f5e3bbad8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x562f5e3bbb68 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x562f5e3bbd80 <line:452:22>
| `-NonNullAttr 0x562f5e3bbdd8 <col:63, col:77> 3
|-FunctionDecl 0x562f5e3bc0e8 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x562f5e3bbe50 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x562f5e3bbed0 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x562f5e3bbf60 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x562f5e3bc1a0 <line:456:22>
| `-NonNullAttr 0x562f5e3bc1f8 <col:63, col:80> 2 3
|-FunctionDecl 0x562f5e3bc3e8 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x562f5e3bc248 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x562f5e3bc2c8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x562f5e3bc498 <line:458:22>
|-FunctionDecl 0x562f5e3bc868 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x562f5e3bc560 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x562f5e3bc700 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x562f5e3bc918 <col:52, col:69> 1 2
|-FunctionDecl 0x562f5e3bcac0 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x562f5e3bc9a0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x562f5e3bca20 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x562f5e3bcca8 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x562f5e3bcb88 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x562f5e3bcc08 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x562f5e3bce60 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x562f5e3bcd68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x562f5e3bcfa0 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x562f5e3bd040 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x562f5e3bd0e8 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x562f5e3bd1d8 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x562f5e3bd240 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x562f5e3bd410 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/safe003_pso.oepc_false-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x562f5e3bd508 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x562f5e3bd5c0 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x562f5e3bd560 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x562f5e3bd0c0 '__pthread_unwind_buf_t'
| |   `-Record 0x562f5e3bd040 ''
| `-AlignedAttr 0x562f5e3bd618 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x562f5e3bd690 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x562f5e3bd7f0 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x562f5e3bd858 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x562f5e3bd8c0 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x562f5e3bd928 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x562f5e3bdb30 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x562f5e3bda20 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x562f5e3bdc78 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x562f5e3bdbe8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x562f5e3bde70 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x562f5e3bdd30 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x562f5e3bdf18 <line:487:22>
|-RecordDecl 0x562f5e3bdf70 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x562f5e3be288 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x562f5e3be0e8 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x562f5e3be168 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x562f5e3be338 <col:86>
| `-ReturnsTwiceAttr 0x562f5e3be390 <col:12> Implicit
|-FunctionDecl 0x562f5e3be6b8 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x562f5e3be460 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x562f5e3be570 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x562f5e3be768 <line:493:22>
| `-NonNullAttr 0x562f5e3be7c0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3be938 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x562f5e3be808 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x562f5e3be9e0 <line:495:22>
| `-NonNullAttr 0x562f5e3bea38 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3beb40 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x562f5e3bea88 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x562f5e3bebe8 <line:497:22>
| `-NonNullAttr 0x562f5e3bec40 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3bed40 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x562f5e3bec88 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x562f5e3bede8 <line:499:22>
| `-NonNullAttr 0x562f5e3bee40 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3bf088 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x562f5e3bee98 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x562f5e3bef28 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x562f5e3bf138 <col:36>
| `-NonNullAttr 0x562f5e3bf190 <col:66, col:83> 1 2
|-FunctionDecl 0x562f5e3bf290 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x562f5e3bf1d8 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x562f5e3bf338 <line:504:22>
| `-NonNullAttr 0x562f5e3bf390 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3bf628 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3bf440 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x562f5e3bf4c0 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x562f5e3bf6d8 <line:508:22>
| `-NonNullAttr 0x562f5e3bf730 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3bf9f8 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3bf778 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x562f5e3bf7f8 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x562f5e3bf878 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x562f5e3bfab0 <line:512:22>
| `-NonNullAttr 0x562f5e3bfb08 <col:63, col:80> 1 3
|-FunctionDecl 0x562f5e3bfc10 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x562f5e3bfb58 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x562f5e3bfcb8 <line:514:22>
| `-NonNullAttr 0x562f5e3bfd10 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3bff38 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x562f5e3bfdc0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x562f5e3bffe0 <line:516:22>
| `-NonNullAttr 0x562f5e3c0038 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c0140 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x562f5e3c0088 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x562f5e3c01e8 <line:518:22>
| `-NonNullAttr 0x562f5e3c0240 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c0468 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3c0288 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c0308 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x562f5e3c0518 <line:522:22>
| `-NonNullAttr 0x562f5e3c0570 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c0778 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c05b8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x562f5e3c0638 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x562f5e3c0828 <line:525:22>
| `-NonNullAttr 0x562f5e3c0880 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c0a28 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3c08c8 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c0948 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x562f5e3c0ad8 <line:528:22>
| `-NonNullAttr 0x562f5e3c0b30 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c0cb8 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c0b78 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x562f5e3c0bf8 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x562f5e3c0d68 <line:530:22>
| `-NonNullAttr 0x562f5e3c0dc0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c1f90 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3c0e08 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c1eb0 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x562f5e3c2040 <line:534:22>
| `-NonNullAttr 0x562f5e3c2098 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c2228 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c20e8 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x562f5e3c2168 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x562f5e3c22d8 <line:537:22>
| `-NonNullAttr 0x562f5e3c2330 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c24d8 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3c2378 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c23f8 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x562f5e3c2588 <line:541:22>
| `-NonNullAttr 0x562f5e3c25e0 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c2768 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c2628 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x562f5e3c26a8 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x562f5e3c2818 <line:544:22>
| `-NonNullAttr 0x562f5e3c2870 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c2a58 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x562f5e3c28b8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x562f5e3c2938 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x562f5e3c2b08 <line:547:22>
| `-NonNullAttr 0x562f5e3c2b60 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c2ce8 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c2ba8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x562f5e3c2c28 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x562f5e3c2d98 <line:550:22>
| `-NonNullAttr 0x562f5e3c2df0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c4168 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x562f5e3c3f10 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x562f5e3c4020 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x562f5e3c4218 <col:29>
| `-NonNullAttr 0x562f5e3c4270 <col:70, col:84> 1
|-FunctionDecl 0x562f5e3c43e8 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c42b8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x562f5e3c4490 <line:555:22>
| `-NonNullAttr 0x562f5e3c44e8 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c45f0 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c4538 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x562f5e3c4698 <line:557:22>
| `-NonNullAttr 0x562f5e3c46f0 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c47f0 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c4738 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x562f5e3c4898 <line:559:19>
| `-NonNullAttr 0x562f5e3c48f0 <col:49, col:63> 1
|-FunctionDecl 0x562f5e3c4b28 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x562f5e3c4938 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x562f5e3c49c8 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x562f5e3c4bd8 <col:39>
| `-NonNullAttr 0x562f5e3c4c30 <col:69, col:86> 1 2
|-FunctionDecl 0x562f5e3c4d30 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c4c78 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x562f5e3c4dd8 <line:564:22>
| `-NonNullAttr 0x562f5e3c4e30 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c4f98 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c4ee0 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x562f5e3c5040 <line:566:22>
| `-NonNullAttr 0x562f5e3c5098 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c5258 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x562f5e3c50e8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x562f5e3c5178 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x562f5e3c5308 <col:39>
| `-NonNullAttr 0x562f5e3c5360 <col:69, col:86> 1 2
|-FunctionDecl 0x562f5e3c5460 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c53a8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x562f5e3c5508 <line:571:22>
| `-NonNullAttr 0x562f5e3c5560 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c5748 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x562f5e3c5610 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x562f5e3c57f0 <line:573:22>
| `-NonNullAttr 0x562f5e3c5848 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c5950 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x562f5e3c5898 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x562f5e3c59f8 <line:575:22>
| `-NonNullAttr 0x562f5e3c5a50 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c5c78 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3c5a98 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c5b18 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x562f5e3c5d28 <line:579:22>
| `-NonNullAttr 0x562f5e3c5d80 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c5fa8 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c5dc8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x562f5e3c5e48 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x562f5e3c6058 <line:582:22>
| `-NonNullAttr 0x562f5e3c60b0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c6258 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3c60f8 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c6178 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x562f5e3c6308 <line:586:22>
| `-NonNullAttr 0x562f5e3c6360 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c64e8 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c63a8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x562f5e3c6428 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x562f5e3c6598 <col:36>
| `-NonNullAttr 0x562f5e3c65f0 <col:77, col:91> 1
|-FunctionDecl 0x562f5e3c6928 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x562f5e3c66d0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x562f5e3c67e0 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x562f5e3c69d8 <line:591:22>
| `-NonNullAttr 0x562f5e3c6a30 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c6ba8 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x562f5e3c6a78 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x562f5e3c6c50 <line:593:22>
| `-NonNullAttr 0x562f5e3c6ca8 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c6db0 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x562f5e3c6cf8 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x562f5e3c6e58 <line:595:22>
| `-NonNullAttr 0x562f5e3c6eb0 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c6fc8 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x562f5e3c6f10 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x562f5e3c7070 <line:597:22>
| `-NonNullAttr 0x562f5e3c70c8 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c72f8 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x562f5e3c7118 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x562f5e3c7190 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x562f5e3c73a8 <line:600:22, col:39> 1 2
|-FunctionDecl 0x562f5e3c76d8 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x562f5e3c7428 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x562f5e3c74a0 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x562f5e3c7530 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x562f5e3c7790 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x562f5e3c79a8 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x562f5e3c7870 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x562f5e3c7a50 <line:606:22>
| `-NonNullAttr 0x562f5e3c7aa8 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c7bb0 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x562f5e3c7af8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x562f5e3c7c58 <line:608:22>
| `-NonNullAttr 0x562f5e3c7cb0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c7f10 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3c7cf8 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c7d78 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x562f5e3c7fc0 <line:612:22>
| `-NonNullAttr 0x562f5e3c8018 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c8228 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c8068 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x562f5e3c80e8 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x562f5e3c82d8 <col:37>
| `-NonNullAttr 0x562f5e3c8330 <col:78, col:92> 1
|-FunctionDecl 0x562f5e3c8548 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x562f5e3c8378 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c8420 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x562f5e3c85f8 <line:618:22>
| `-NonNullAttr 0x562f5e3c8650 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3c8818 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x562f5e3c8698 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x562f5e3c8710 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x562f5e3c88c8 <line:621:22>
| `-NonNullAttr 0x562f5e3c8920 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c8bc8 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x562f5e3c8a00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x562f5e3c8a80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x562f5e3c8c78 <line:623:22>
| `-NonNullAttr 0x562f5e3c8cd0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c8e48 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c8d18 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x562f5e3c8f20 <line:625:22>
| `-NonNullAttr 0x562f5e3c8f78 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c9080 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c8fc8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x562f5e3c9128 <line:627:22>
| `-NonNullAttr 0x562f5e3c9180 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c9280 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c91c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x562f5e3c9328 <line:629:22>
| `-NonNullAttr 0x562f5e3c9380 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c9480 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x562f5e3c93c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x562f5e3c9528 <line:631:22>
| `-NonNullAttr 0x562f5e3c9580 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3c9958 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x562f5e3c9660 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x562f5e3c9770 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x562f5e3c97f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x562f5e3c9a10 <line:635:22>
| `-NonNullAttr 0x562f5e3c9a68 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c9be8 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x562f5e3c9ab8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x562f5e3c9c90 <line:637:22>
| `-NonNullAttr 0x562f5e3c9ce8 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3c9df0 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x562f5e3c9d38 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x562f5e3c9e98 <line:639:22>
| `-NonNullAttr 0x562f5e3c9ef0 <col:52, col:66> 1
|-FunctionDecl 0x562f5e3ca0e8 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x562f5e3c9fb0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x562f5e3ca190 <line:641:22>
| `-NonNullAttr 0x562f5e3ca1e8 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3ca2f0 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x562f5e3ca238 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x562f5e3ca398 <line:643:22>
| `-NonNullAttr 0x562f5e3ca3f0 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3ca618 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x562f5e3ca438 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x562f5e3ca4b8 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x562f5e3ca6c8 <line:647:22>
| `-NonNullAttr 0x562f5e3ca720 <col:63, col:80> 1 2
|-FunctionDecl 0x562f5e3ca928 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x562f5e3ca768 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x562f5e3ca7e8 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x562f5e3ca9d8 <line:650:22>
| `-NonNullAttr 0x562f5e3caa30 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3cad78 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x562f5e3cab10 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x562f5e3cac30 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x562f5e3cae28 <line:653:22>
| `-NonNullAttr 0x562f5e3cae80 <col:63, col:77> 1
|-FunctionDecl 0x562f5e3cafe8 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x562f5e3caec8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x562f5e3cb090 <col:69>
|-FunctionDecl 0x562f5e3cb208 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x562f5e3cb0f8 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x562f5e3cb2b0 <col:72>
|-FunctionDecl 0x562f5e3cb4e8 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x562f5e3cb318 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x562f5e3cb3c8 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x562f5e3cb598 <col:44>
|-FunctionDecl 0x562f5e3cb7b8 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x562f5e3cb600 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x562f5e3cb678 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x562f5e3cb868 <line:660:22>
| `-NonNullAttr 0x562f5e3cb8c0 <col:63, col:77> 2
|-FunctionDecl 0x562f5e3cbd08 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x562f5e3cb9a0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x562f5e3cbab0 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x562f5e3cbbc0 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x562f5e3cbdc0 <col:47>
|-FunctionDecl 0x562f5e3ccf60 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x562f5e3cbe30 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x562f5e3cd0b8 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x562f5e3cd020 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x562f5e3cd210 <line:667:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x562f5e3cd178 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x562f5e3cd2d8 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x562f5e3cd398 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x562f5e3cd458 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x562f5e3cd510 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x562f5e3cd590 prev 0x562f5e3cd510 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x562f5e3cd5f8 <col:24> 'int' 0
|-VarDecl 0x562f5e3cd630 <line:673:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x562f5e3cd6b0 prev 0x562f5e3cd630 <line:674:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x562f5e3cd718 <col:27> 'int' 0
|-VarDecl 0x562f5e3cd750 <line:675:1, col:5> col:5 used __unbuffered_p2_EAX 'int'
|-VarDecl 0x562f5e3cd7d0 prev 0x562f5e3cd750 <line:676:1, col:27> col:5 used __unbuffered_p2_EAX 'int' cinit
| `-IntegerLiteral 0x562f5e3cd838 <col:27> 'int' 0
|-VarDecl 0x562f5e3cd870 <line:677:1, col:5> col:5 used __unbuffered_p2_EBX 'int'
|-VarDecl 0x562f5e3cd8f0 prev 0x562f5e3cd870 <line:678:1, col:27> col:5 used __unbuffered_p2_EBX 'int' cinit
| `-IntegerLiteral 0x562f5e3cd958 <col:27> 'int' 0
|-VarDecl 0x562f5e3cd988 <line:679:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x562f5e3cda00 <line:680:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x562f5e3cda80 <line:681:1, col:5> col:5 used x 'int'
|-VarDecl 0x562f5e3cdb00 prev 0x562f5e3cda80 <line:682:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x562f5e3cdb68 <col:9> 'int' 0
|-VarDecl 0x562f5e3cdba0 <line:683:1, col:5> col:5 used y 'int'
|-VarDecl 0x562f5e3cdc20 prev 0x562f5e3cdba0 <line:684:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x562f5e3cdc88 <col:9> 'int' 0
|-VarDecl 0x562f5e3cdcb8 <line:685:1, col:7> col:7 used y$flush_delayed '_Bool'
|-VarDecl 0x562f5e3cdd38 <line:686:1, col:5> col:5 used y$mem_tmp 'int'
|-VarDecl 0x562f5e3cddb0 <line:687:1, col:7> col:7 used y$r_buff0_thd0 '_Bool'
|-VarDecl 0x562f5e3cde28 <line:688:1, col:7> col:7 used y$r_buff0_thd1 '_Bool'
|-VarDecl 0x562f5e3cdea0 <line:689:1, col:7> col:7 used y$r_buff0_thd2 '_Bool'
|-VarDecl 0x562f5e3cdf70 <line:690:1, col:7> col:7 used y$r_buff0_thd3 '_Bool'
|-VarDecl 0x562f5e3cdfe8 <line:691:1, col:7> col:7 used y$r_buff1_thd0 '_Bool'
|-VarDecl 0x562f5e3ce060 <line:692:1, col:7> col:7 used y$r_buff1_thd1 '_Bool'
|-VarDecl 0x562f5e3ce0d8 <line:693:1, col:7> col:7 used y$r_buff1_thd2 '_Bool'
|-VarDecl 0x562f5e3ce150 <line:694:1, col:7> col:7 used y$r_buff1_thd3 '_Bool'
|-VarDecl 0x562f5e3ce1c8 <line:695:1, col:7> col:7 y$read_delayed '_Bool'
|-VarDecl 0x562f5e3ce248 <line:696:1, col:6> col:6 y$read_delayed_var 'int *'
|-VarDecl 0x562f5e3ce2c8 <line:697:1, col:5> col:5 used y$w_buff0 'int'
|-VarDecl 0x562f5e3ce340 <line:698:1, col:7> col:7 used y$w_buff0_used '_Bool'
|-VarDecl 0x562f5e3ce3c0 <line:699:1, col:5> col:5 used y$w_buff1 'int'
|-VarDecl 0x562f5e3ce438 <line:700:1, col:7> col:7 used y$w_buff1_used '_Bool'
|-VarDecl 0x562f5e3ce4b0 <line:701:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x562f5e3ce528 <line:702:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x562f5e3ce640 prev 0x562f5e3ccf60 <line:703:1, line:731:1> line:703:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x562f5e3ce5a8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x562f5e3cfe68 <line:704:1, line:731:1>
|   |-CallExpr 0x562f5e3ce758 <line:705:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3ce740 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3ce6e8 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3ce7d0 <line:706:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x562f5e3ce778 <col:3> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x562f5e3ce7b8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3ce798 <col:15> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |-BinaryOperator 0x562f5e3ce830 <line:707:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x562f5e3ce7f0 <col:3> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   | `-IntegerLiteral 0x562f5e3ce810 <col:15> 'int' 2
|   |-BinaryOperator 0x562f5e3ce8a8 <line:708:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3ce850 <col:3> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3ce890 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3ce870 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x562f5e3ce940 <line:709:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3ce8c8 <col:3> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x562f5e3ce918 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x562f5e3ce8e8 <col:27> 'int' 1
|   |-CallExpr 0x562f5e3ceac8 <line:710:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x562f5e3ceab0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x562f5e3ce960 <col:3> 'void (int)' Function 0x562f5e3740d8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x562f5e3cea60 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x562f5e3cea40 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x562f5e3cea20 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x562f5e3ce9d8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x562f5e3ce9c0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x562f5e3ce980 <col:23> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x562f5e3cea08 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x562f5e3ce9f0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x562f5e3ce9a0 <col:41> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x562f5e3ceb48 <line:711:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3ceaf0 <col:3> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3ceb30 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3ceb10 <col:20> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x562f5e3cebc0 <line:712:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3ceb68 <col:3> '_Bool' lvalue Var 0x562f5e3ce060 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3ceba8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3ceb88 <col:20> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x562f5e3cec38 <line:713:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3cebe0 <col:3> '_Bool' lvalue Var 0x562f5e3ce0d8 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3cec20 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3cec00 <col:20> '_Bool' lvalue Var 0x562f5e3cdea0 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x562f5e3cecb0 <line:714:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3cec58 <col:3> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3cec98 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3cec78 <col:20> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x562f5e3ced48 <line:715:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3cecd0 <col:3> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   | `-CStyleCastExpr 0x562f5e3ced20 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x562f5e3cecf0 <col:27> 'int' 1
|   |-CallExpr 0x562f5e3ceda0 <line:716:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3ced88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3ced68 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3cedf8 <line:717:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3cede0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3cedc0 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3cee58 <line:718:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x562f5e3cee18 <col:3> 'int' lvalue Var 0x562f5e3cdb00 'x' 'int'
|   | `-IntegerLiteral 0x562f5e3cee38 <col:7> 'int' 1
|   |-CallExpr 0x562f5e3ceeb0 <line:719:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3cee98 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3cee78 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3cef08 <line:720:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3ceef0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3ceed0 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3cf208 <line:721:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x562f5e3cef28 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   | `-ConditionalOperator 0x562f5e3cf1d8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x562f5e3cf000 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x562f5e3cefb8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x562f5e3cefa0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x562f5e3cef48 <col:7> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x562f5e3cefe8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x562f5e3cefd0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x562f5e3cef80 <col:25> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3cf1c0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3cf020 <col:42> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x562f5e3cf1a0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x562f5e3cf170 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x562f5e3cf0e0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x562f5e3cf098 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x562f5e3cf080 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x562f5e3cf040 <col:55> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x562f5e3cf0c8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x562f5e3cf0b0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x562f5e3cf060 <col:73> '_Bool' lvalue Var 0x562f5e3ce060 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3cf140 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3cf100 <col:90> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x562f5e3cf158 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3cf120 <col:102> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3cf410 <line:722:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3cf228 <col:3> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3cf3f8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3cf3c8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x562f5e3cf2e8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x562f5e3cf2a0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x562f5e3cf288 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x562f5e3cf248 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x562f5e3cf2d0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x562f5e3cf2b8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x562f5e3cf268 <col:38> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3cf380 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3cf338 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3cf308 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3cf3b0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3cf398 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3cf360 <col:66> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x562f5e3cf6f8 <line:723:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3cf430 <col:3> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3cf6e0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3cf6b0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x562f5e3cf5d0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x562f5e3cf4f0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x562f5e3cf4a8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x562f5e3cf490 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x562f5e3cf450 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x562f5e3cf4d8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x562f5e3cf4c0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x562f5e3cf470 <col:38> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x562f5e3cf5b0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x562f5e3cf568 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x562f5e3cf550 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x562f5e3cf510 <col:56> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x562f5e3cf598 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x562f5e3cf580 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x562f5e3cf530 <col:74> '_Bool' lvalue Var 0x562f5e3ce060 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3cf668 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3cf620 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3cf5f0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3cf698 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3cf680 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3cf648 <col:102> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x562f5e3cf900 <line:724:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3cf718 <col:3> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3cf8e8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3cf8b8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x562f5e3cf7d8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x562f5e3cf790 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x562f5e3cf778 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x562f5e3cf738 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x562f5e3cf7c0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x562f5e3cf7a8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x562f5e3cf758 <col:38> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3cf870 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3cf828 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3cf7f8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3cf8a0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3cf888 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3cf850 <col:66> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x562f5e3cfbe8 <line:725:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3cf920 <col:3> '_Bool' lvalue Var 0x562f5e3ce060 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3cfbd0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3cfba0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x562f5e3cfac0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x562f5e3cf9e0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x562f5e3cf998 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x562f5e3cf980 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x562f5e3cf940 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x562f5e3cf9c8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x562f5e3cf9b0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x562f5e3cf960 <col:38> '_Bool' lvalue Var 0x562f5e3cde28 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x562f5e3cfaa0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x562f5e3cfa58 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x562f5e3cfa40 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x562f5e3cfa00 <col:56> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x562f5e3cfa88 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x562f5e3cfa70 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x562f5e3cfa20 <col:74> '_Bool' lvalue Var 0x562f5e3ce060 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3cfb58 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3cfb10 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3cfae0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3cfb88 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3cfb70 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3cfb38 <col:102> '_Bool' lvalue Var 0x562f5e3ce060 'y$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x562f5e3cfc40 <line:726:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3cfc28 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3cfc08 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3cfc98 <line:727:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3cfc80 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3cfc60 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3cfd50 <line:728:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x562f5e3cfcb8 <col:3> 'int' lvalue Var 0x562f5e3cd590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x562f5e3cfd30 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x562f5e3cfd18 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3cfcd8 <col:22> 'int' lvalue Var 0x562f5e3cd590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x562f5e3cfcf8 <col:41> 'int' 1
|   |-CallExpr 0x562f5e3cfda8 <line:729:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3cfd90 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3cfd70 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x562f5e3cfe58 <line:730:3, col:36>
|     `-CallExpr 0x562f5e3cfe38 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x562f5e3cfe20 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x562f5e3cfdc8 <col:10> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x562f5e3d0028 prev 0x562f5e3cd0b8 <line:732:1, line:751:1> line:732:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x562f5e3cff90 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x562f5e3d1260 <line:733:1, line:751:1>
|   |-CallExpr 0x562f5e3d0108 <line:734:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d00f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d00d0 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3d0180 <line:735:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d0128 <col:3> 'int' lvalue Var 0x562f5e3cd6b0 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x562f5e3d0168 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3d0148 <col:25> 'int' lvalue Var 0x562f5e3cdb00 'x' 'int'
|   |-CallExpr 0x562f5e3d01d8 <line:736:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d01c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d01a0 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3d0230 <line:737:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d0218 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d01f8 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3d0290 <line:738:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d0250 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   | `-IntegerLiteral 0x562f5e3d0270 <col:7> 'int' 1
|   |-CallExpr 0x562f5e3d02e8 <line:739:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d02d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d02b0 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3d0340 <line:740:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d0328 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d0308 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3d0628 <line:741:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d0360 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   | `-ConditionalOperator 0x562f5e3d05f8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x562f5e3d0420 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x562f5e3d03d8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x562f5e3d03c0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x562f5e3d0380 <col:7> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x562f5e3d0408 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x562f5e3d03f0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x562f5e3d03a0 <col:25> '_Bool' lvalue Var 0x562f5e3cdea0 'y$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d05e0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d0440 <col:42> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x562f5e3d05c0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x562f5e3d0590 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x562f5e3d0500 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x562f5e3d04b8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x562f5e3d04a0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x562f5e3d0460 <col:55> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x562f5e3d04e8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x562f5e3d04d0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x562f5e3d0480 <col:73> '_Bool' lvalue Var 0x562f5e3ce0d8 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3d0560 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3d0520 <col:90> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x562f5e3d0578 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d0540 <col:102> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3d0830 <line:742:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d0648 <col:3> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d0818 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d07e8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x562f5e3d0708 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x562f5e3d06c0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x562f5e3d06a8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x562f5e3d0668 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x562f5e3d06f0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x562f5e3d06d8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x562f5e3d0688 <col:38> '_Bool' lvalue Var 0x562f5e3cdea0 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d07a0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3d0758 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3d0728 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3d07d0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3d07b8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d0780 <col:66> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x562f5e3d0b18 <line:743:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d0850 <col:3> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d0b00 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d0ad0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x562f5e3d09f0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x562f5e3d0910 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x562f5e3d08c8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x562f5e3d08b0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x562f5e3d0870 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x562f5e3d08f8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x562f5e3d08e0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x562f5e3d0890 <col:38> '_Bool' lvalue Var 0x562f5e3cdea0 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x562f5e3d09d0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x562f5e3d0988 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x562f5e3d0970 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x562f5e3d0930 <col:56> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x562f5e3d09b8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x562f5e3d09a0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x562f5e3d0950 <col:74> '_Bool' lvalue Var 0x562f5e3ce0d8 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d0a88 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3d0a40 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3d0a10 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3d0ab8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3d0aa0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d0a68 <col:102> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x562f5e3d0d20 <line:744:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d0b38 <col:3> '_Bool' lvalue Var 0x562f5e3cdea0 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d0d08 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d0cd8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x562f5e3d0bf8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x562f5e3d0bb0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x562f5e3d0b98 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x562f5e3d0b58 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x562f5e3d0be0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x562f5e3d0bc8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x562f5e3d0b78 <col:38> '_Bool' lvalue Var 0x562f5e3cdea0 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d0c90 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3d0c48 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3d0c18 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3d0cc0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3d0ca8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d0c70 <col:66> '_Bool' lvalue Var 0x562f5e3cdea0 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x562f5e3d1018 <line:745:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d0d40 <col:3> '_Bool' lvalue Var 0x562f5e3ce0d8 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d1000 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d0fd0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x562f5e3d0ee0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x562f5e3d0e00 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x562f5e3d0db8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x562f5e3d0da0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x562f5e3d0d60 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x562f5e3d0de8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x562f5e3d0dd0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x562f5e3d0d80 <col:38> '_Bool' lvalue Var 0x562f5e3cdea0 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x562f5e3d0ec0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x562f5e3d0e78 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x562f5e3d0e60 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x562f5e3d0e20 <col:56> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x562f5e3d0ea8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x562f5e3d0e90 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x562f5e3d0e40 <col:74> '_Bool' lvalue Var 0x562f5e3ce0d8 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d0f78 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3d0f30 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3d0f00 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3d0fb8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3d0fa0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d0f58 <col:102> '_Bool' lvalue Var 0x562f5e3ce0d8 'y$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x562f5e3d1070 <line:746:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d1058 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d1038 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3d10c8 <line:747:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d10b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d1090 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3d1180 <line:748:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d10e8 <col:3> 'int' lvalue Var 0x562f5e3cd590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x562f5e3d1160 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x562f5e3d1148 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d1108 <col:22> 'int' lvalue Var 0x562f5e3cd590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x562f5e3d1128 <col:41> 'int' 1
|   |-CallExpr 0x562f5e3d11d8 <line:749:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d11c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d11a0 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x562f5e3d1250 <line:750:3, col:36>
|     `-CallExpr 0x562f5e3d1230 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x562f5e3d1218 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x562f5e3d11f8 <col:10> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x562f5e3d13a8 prev 0x562f5e3cd210 <line:752:1, line:797:1> line:752:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x562f5e3d1310 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x562f5e3d7920 <line:753:1, line:797:1>
|   |-CallExpr 0x562f5e3d1488 <line:754:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d1470 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d1450 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3d1538 <line:755:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d14a8 <col:3> '_Bool' lvalue Var 0x562f5e3ce4b0 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d1520 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x562f5e3d1500 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x562f5e3d14e8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x562f5e3d14c8 <col:19> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x562f5e3d15e8 <line:756:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d1558 <col:3> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d15d0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x562f5e3d15b0 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x562f5e3d1598 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x562f5e3d1578 <col:19> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x562f5e3d1660 <line:757:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d1608 <col:3> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d1648 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3d1628 <col:21> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x562f5e3d16d8 <line:758:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d1680 <col:3> 'int' lvalue Var 0x562f5e3cdd38 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x562f5e3d16c0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3d16a0 <col:15> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3d1b10 <line:759:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d16f8 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   | `-ConditionalOperator 0x562f5e3d1ae0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x562f5e3d1908 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x562f5e3d1828 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x562f5e3d1750 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x562f5e3d1738 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x562f5e3d1718 <col:8> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x562f5e3d1808 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x562f5e3d17a0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x562f5e3d1788 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x562f5e3d1768 <col:27> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |   | |   `-UnaryOperator 0x562f5e3d17f0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x562f5e3d17d8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x562f5e3d17b8 <col:46> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x562f5e3d18e8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x562f5e3d1880 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x562f5e3d1868 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x562f5e3d1848 <col:65> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |   |   `-UnaryOperator 0x562f5e3d18d0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x562f5e3d18b8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x562f5e3d1898 <col:84> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d1ac8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d1928 <col:101> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |   `-ParenExpr 0x562f5e3d1aa8 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x562f5e3d1a78 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x562f5e3d19e8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x562f5e3d19a0 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x562f5e3d1988 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x562f5e3d1948 <col:106> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x562f5e3d19d0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x562f5e3d19b8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x562f5e3d1968 <col:124> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3d1a48 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3d1a08 <col:141> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x562f5e3d1a60 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d1a28 <col:153> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x562f5e3d2048 <line:760:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d1b30 <col:3> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x562f5e3d2018 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x562f5e3d1fe8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x562f5e3d1fd0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x562f5e3d1b50 <col:15> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d2000 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d1b70 <col:31> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x562f5e3d1fb0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x562f5e3d1f58 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x562f5e3d1d80 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x562f5e3d1ca0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x562f5e3d1bc8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x562f5e3d1bb0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x562f5e3d1b90 <col:45> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x562f5e3d1c80 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x562f5e3d1c18 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x562f5e3d1c00 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x562f5e3d1be0 <col:64> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x562f5e3d1c68 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x562f5e3d1c50 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x562f5e3d1c30 <col:83> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x562f5e3d1d60 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x562f5e3d1cf8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x562f5e3d1ce0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x562f5e3d1cc0 <col:102> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x562f5e3d1d48 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x562f5e3d1d30 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x562f5e3d1d10 <col:121> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3d1f40 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3d1da0 <col:138> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x562f5e3d1f20 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x562f5e3d1ef0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x562f5e3d1e60 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x562f5e3d1e18 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x562f5e3d1e00 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x562f5e3d1dc0 <col:151> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x562f5e3d1e48 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x562f5e3d1e30 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x562f5e3d1de0 <col:169> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x562f5e3d1ec0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x562f5e3d1e80 <col:186> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x562f5e3d1ed8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x562f5e3d1ea0 <col:198> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |-BinaryOperator 0x562f5e3d2558 <line:761:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d2068 <col:3> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x562f5e3d2528 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x562f5e3d24f8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x562f5e3d24e0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x562f5e3d2088 <col:15> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d2510 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d20a8 <col:31> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x562f5e3d24c0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x562f5e3d2490 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x562f5e3d22b8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x562f5e3d21d8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x562f5e3d2100 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x562f5e3d20e8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x562f5e3d20c8 <col:45> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x562f5e3d21b8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x562f5e3d2150 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x562f5e3d2138 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x562f5e3d2118 <col:64> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x562f5e3d21a0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x562f5e3d2188 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x562f5e3d2168 <col:83> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x562f5e3d2298 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x562f5e3d2230 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x562f5e3d2218 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x562f5e3d21f8 <col:102> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x562f5e3d2280 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x562f5e3d2268 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x562f5e3d2248 <col:121> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3d2478 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3d22d8 <col:138> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x562f5e3d2458 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x562f5e3d2428 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x562f5e3d2398 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x562f5e3d2350 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x562f5e3d2338 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x562f5e3d22f8 <col:151> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x562f5e3d2380 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x562f5e3d2368 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x562f5e3d2318 <col:169> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x562f5e3d23f8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x562f5e3d23b8 <col:186> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x562f5e3d2410 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x562f5e3d23d8 <col:198> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x562f5e3d2b00 <line:762:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d2578 <col:3> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d2ae8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d2ab8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x562f5e3d2a70 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d2a58 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d2598 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d2aa0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d2a88 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d25b8 <col:36> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x562f5e3d2a38 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x562f5e3d2a08 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x562f5e3d27c8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x562f5e3d26e8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x562f5e3d2610 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x562f5e3d25f8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x562f5e3d25d8 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x562f5e3d26c8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x562f5e3d2660 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x562f5e3d2648 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x562f5e3d2628 <col:74> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x562f5e3d26b0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x562f5e3d2698 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x562f5e3d2678 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x562f5e3d27a8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x562f5e3d2740 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x562f5e3d2728 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x562f5e3d2708 <col:112> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x562f5e3d2790 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x562f5e3d2778 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x562f5e3d2758 <col:131> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x562f5e3d29f0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x562f5e3d29d8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x562f5e3d27e8 <col:148> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x562f5e3d29b8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x562f5e3d2988 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x562f5e3d28a8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x562f5e3d2860 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x562f5e3d2848 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x562f5e3d2808 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x562f5e3d2890 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x562f5e3d2878 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x562f5e3d2828 <col:184> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x562f5e3d2940 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x562f5e3d28f8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x562f5e3d28c8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x562f5e3d2970 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x562f5e3d2958 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x562f5e3d2920 <col:212> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x562f5e3d30e8 <line:763:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d2b20 <col:3> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d30d0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d30a0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x562f5e3d3058 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d3040 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d2b40 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d3088 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d3070 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d2b60 <col:36> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x562f5e3d3020 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x562f5e3d2ff0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x562f5e3d2d70 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x562f5e3d2c90 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x562f5e3d2bb8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x562f5e3d2ba0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x562f5e3d2b80 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x562f5e3d2c70 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x562f5e3d2c08 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x562f5e3d2bf0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x562f5e3d2bd0 <col:74> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x562f5e3d2c58 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x562f5e3d2c40 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x562f5e3d2c20 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x562f5e3d2d50 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x562f5e3d2ce8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x562f5e3d2cd0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x562f5e3d2cb0 <col:112> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x562f5e3d2d38 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x562f5e3d2d20 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x562f5e3d2d00 <col:131> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x562f5e3d2fd8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x562f5e3d2fc0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x562f5e3d2d90 <col:148> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x562f5e3d2f80 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x562f5e3d2f50 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x562f5e3d2e50 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x562f5e3d2e08 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x562f5e3d2df0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x562f5e3d2db0 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x562f5e3d2e38 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x562f5e3d2e20 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x562f5e3d2dd0 <col:184> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x562f5e3d2f20 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x562f5e3d2ea0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x562f5e3d2e70 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x562f5e3d2f38 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x562f5e3d2ef8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x562f5e3d2ec8 <col:219> 'int' 0
|   |-BinaryOperator 0x562f5e3d3690 <line:764:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d3108 <col:3> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d3678 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d3648 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x562f5e3d3600 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d35e8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d3128 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d3630 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d3618 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d3148 <col:36> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x562f5e3d35c8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x562f5e3d3598 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x562f5e3d3358 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x562f5e3d3278 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x562f5e3d31a0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x562f5e3d3188 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x562f5e3d3168 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x562f5e3d3258 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x562f5e3d31f0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x562f5e3d31d8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x562f5e3d31b8 <col:74> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x562f5e3d3240 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x562f5e3d3228 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x562f5e3d3208 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x562f5e3d3338 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x562f5e3d32d0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x562f5e3d32b8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x562f5e3d3298 <col:112> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x562f5e3d3320 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x562f5e3d3308 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x562f5e3d32e8 <col:131> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x562f5e3d3580 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x562f5e3d3568 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x562f5e3d3378 <col:148> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x562f5e3d3548 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x562f5e3d3518 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x562f5e3d3438 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x562f5e3d33f0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x562f5e3d33d8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x562f5e3d3398 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x562f5e3d3420 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x562f5e3d3408 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x562f5e3d33b8 <col:184> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x562f5e3d34d0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x562f5e3d3488 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x562f5e3d3458 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x562f5e3d3500 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x562f5e3d34e8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x562f5e3d34b0 <col:212> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x562f5e3d3c58 <line:765:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d36b0 <col:3> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d3c40 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d3c10 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x562f5e3d3bc8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d3bb0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d36d0 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d3bf8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d3be0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d36f0 <col:36> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x562f5e3d3b90 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x562f5e3d3b60 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x562f5e3d3900 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x562f5e3d3820 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x562f5e3d3748 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x562f5e3d3730 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x562f5e3d3710 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x562f5e3d3800 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x562f5e3d3798 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x562f5e3d3780 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x562f5e3d3760 <col:74> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x562f5e3d37e8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x562f5e3d37d0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x562f5e3d37b0 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x562f5e3d38e0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x562f5e3d3878 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x562f5e3d3860 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x562f5e3d3840 <col:112> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x562f5e3d38c8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x562f5e3d38b0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x562f5e3d3890 <col:131> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x562f5e3d3b48 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x562f5e3d3b30 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x562f5e3d3920 <col:148> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x562f5e3d3b10 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x562f5e3d3ae0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x562f5e3d39e0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x562f5e3d3998 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x562f5e3d3980 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x562f5e3d3940 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x562f5e3d39c8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x562f5e3d39b0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x562f5e3d3960 <col:184> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x562f5e3d3ab0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x562f5e3d3a30 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x562f5e3d3a00 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x562f5e3d3ac8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x562f5e3d3a88 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x562f5e3d3a58 <col:219> 'int' 0
|   |-BinaryOperator 0x562f5e3d3cd0 <line:766:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d3c78 <col:3> 'int' lvalue Var 0x562f5e3cd7d0 '__unbuffered_p2_EAX' 'int'
|   | `-ImplicitCastExpr 0x562f5e3d3cb8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3d3c98 <col:25> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3d3e00 <line:767:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d3cf0 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   | `-ConditionalOperator 0x562f5e3d3dd0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x562f5e3d3d88 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x562f5e3d3d70 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x562f5e3d3d10 <col:7> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d3da0 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d3d30 <col:25> 'int' lvalue Var 0x562f5e3cdd38 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x562f5e3d3db8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x562f5e3d3d50 <col:37> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3d3e98 <line:768:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d3e20 <col:3> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x562f5e3d3e70 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x562f5e3d3e40 <col:28> 'int' 0
|   |-CallExpr 0x562f5e3d3ef0 <line:769:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d3ed8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d3eb8 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3d3f48 <line:770:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d3f30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d3f10 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3d4008 <line:771:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d3f68 <col:3> '_Bool' lvalue Var 0x562f5e3ce4b0 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d3ff0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x562f5e3d3fd0 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x562f5e3d3fa8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x562f5e3d3f88 <col:19> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x562f5e3d40b8 <line:772:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d4028 <col:3> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d40a0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x562f5e3d4080 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x562f5e3d4068 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x562f5e3d4048 <col:19> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x562f5e3d4130 <line:773:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d40d8 <col:3> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d4118 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3d40f8 <col:21> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x562f5e3d41a8 <line:774:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d4150 <col:3> 'int' lvalue Var 0x562f5e3cdd38 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x562f5e3d4190 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3d4170 <col:15> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3d45e0 <line:775:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d41c8 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   | `-ConditionalOperator 0x562f5e3d45b0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x562f5e3d43d8 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x562f5e3d42f8 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x562f5e3d4220 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x562f5e3d4208 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x562f5e3d41e8 <col:8> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x562f5e3d42d8 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x562f5e3d4270 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x562f5e3d4258 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x562f5e3d4238 <col:27> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |   | |   `-UnaryOperator 0x562f5e3d42c0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x562f5e3d42a8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x562f5e3d4288 <col:46> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x562f5e3d43b8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x562f5e3d4350 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x562f5e3d4338 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x562f5e3d4318 <col:65> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |   |   `-UnaryOperator 0x562f5e3d43a0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x562f5e3d4388 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x562f5e3d4368 <col:84> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d4598 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d43f8 <col:101> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |   `-ParenExpr 0x562f5e3d4578 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x562f5e3d4548 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x562f5e3d44b8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x562f5e3d4470 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x562f5e3d4458 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x562f5e3d4418 <col:106> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x562f5e3d44a0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x562f5e3d4488 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x562f5e3d4438 <col:124> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3d4518 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3d44d8 <col:141> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x562f5e3d4530 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d44f8 <col:153> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x562f5e3d4af0 <line:776:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d4600 <col:3> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x562f5e3d4ac0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x562f5e3d4a90 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x562f5e3d4a78 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x562f5e3d4620 <col:15> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d4aa8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d4640 <col:31> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x562f5e3d4a58 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x562f5e3d4a28 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x562f5e3d4850 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x562f5e3d4770 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x562f5e3d4698 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x562f5e3d4680 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x562f5e3d4660 <col:45> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x562f5e3d4750 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x562f5e3d46e8 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x562f5e3d46d0 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x562f5e3d46b0 <col:64> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x562f5e3d4738 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x562f5e3d4720 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x562f5e3d4700 <col:83> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x562f5e3d4830 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x562f5e3d47c8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x562f5e3d47b0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x562f5e3d4790 <col:102> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x562f5e3d4818 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x562f5e3d4800 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x562f5e3d47e0 <col:121> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3d4a10 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3d4870 <col:138> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x562f5e3d49f0 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x562f5e3d49c0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x562f5e3d4930 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x562f5e3d48e8 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x562f5e3d48d0 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x562f5e3d4890 <col:151> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x562f5e3d4918 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x562f5e3d4900 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x562f5e3d48b0 <col:169> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x562f5e3d4990 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x562f5e3d4950 <col:186> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x562f5e3d49a8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x562f5e3d4970 <col:198> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |-BinaryOperator 0x562f5e3d5010 <line:777:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d4b10 <col:3> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x562f5e3d4fe0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x562f5e3d4fa0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x562f5e3d4f88 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x562f5e3d4b30 <col:15> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d4fb8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d4b50 <col:31> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x562f5e3d4f68 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x562f5e3d4f38 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x562f5e3d4d60 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x562f5e3d4c80 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x562f5e3d4ba8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x562f5e3d4b90 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x562f5e3d4b70 <col:45> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x562f5e3d4c60 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x562f5e3d4bf8 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x562f5e3d4be0 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x562f5e3d4bc0 <col:64> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x562f5e3d4c48 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x562f5e3d4c30 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x562f5e3d4c10 <col:83> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x562f5e3d4d40 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x562f5e3d4cd8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x562f5e3d4cc0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x562f5e3d4ca0 <col:102> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x562f5e3d4d28 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x562f5e3d4d10 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x562f5e3d4cf0 <col:121> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3d4f20 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3d4d80 <col:138> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x562f5e3d4f00 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x562f5e3d4ed0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x562f5e3d4e40 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x562f5e3d4df8 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x562f5e3d4de0 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x562f5e3d4da0 <col:151> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x562f5e3d4e28 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x562f5e3d4e10 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x562f5e3d4dc0 <col:169> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x562f5e3d4ea0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x562f5e3d4e60 <col:186> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x562f5e3d4eb8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x562f5e3d4e80 <col:198> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |-BinaryOperator 0x562f5e3d55b8 <line:778:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d5030 <col:3> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d55a0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d5570 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x562f5e3d5528 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d5510 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d5050 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d5558 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d5540 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d5070 <col:36> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x562f5e3d54f0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x562f5e3d54c0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x562f5e3d5280 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x562f5e3d51a0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x562f5e3d50c8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x562f5e3d50b0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x562f5e3d5090 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x562f5e3d5180 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x562f5e3d5118 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x562f5e3d5100 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x562f5e3d50e0 <col:74> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x562f5e3d5168 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x562f5e3d5150 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x562f5e3d5130 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x562f5e3d5260 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x562f5e3d51f8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x562f5e3d51e0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x562f5e3d51c0 <col:112> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x562f5e3d5248 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x562f5e3d5230 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x562f5e3d5210 <col:131> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x562f5e3d54a8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x562f5e3d5490 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x562f5e3d52a0 <col:148> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x562f5e3d5470 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x562f5e3d5440 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x562f5e3d5360 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x562f5e3d5318 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x562f5e3d5300 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x562f5e3d52c0 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x562f5e3d5348 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x562f5e3d5330 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x562f5e3d52e0 <col:184> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x562f5e3d53f8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x562f5e3d53b0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x562f5e3d5380 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x562f5e3d5428 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x562f5e3d5410 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x562f5e3d53d8 <col:212> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x562f5e3d5b80 <line:779:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d55d8 <col:3> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d5b68 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d5b38 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x562f5e3d5af0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d5ad8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d55f8 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d5b20 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d5b08 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d5618 <col:36> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x562f5e3d5ab8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x562f5e3d5a88 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x562f5e3d5828 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x562f5e3d5748 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x562f5e3d5670 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x562f5e3d5658 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x562f5e3d5638 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x562f5e3d5728 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x562f5e3d56c0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x562f5e3d56a8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x562f5e3d5688 <col:74> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x562f5e3d5710 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x562f5e3d56f8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x562f5e3d56d8 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x562f5e3d5808 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x562f5e3d57a0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x562f5e3d5788 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x562f5e3d5768 <col:112> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x562f5e3d57f0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x562f5e3d57d8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x562f5e3d57b8 <col:131> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x562f5e3d5a70 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x562f5e3d5a58 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x562f5e3d5848 <col:148> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x562f5e3d5a38 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x562f5e3d5a08 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x562f5e3d5908 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x562f5e3d58c0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x562f5e3d58a8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x562f5e3d5868 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x562f5e3d58f0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x562f5e3d58d8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x562f5e3d5888 <col:184> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x562f5e3d59d8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x562f5e3d5958 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x562f5e3d5928 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x562f5e3d59f0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x562f5e3d59b0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x562f5e3d5980 <col:219> 'int' 0
|   |-BinaryOperator 0x562f5e3d6138 <line:780:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d5ba0 <col:3> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d6120 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d60f0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x562f5e3d60a8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d6090 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d5bc0 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d60d8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d60c0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d5be0 <col:36> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x562f5e3d6070 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x562f5e3d6040 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x562f5e3d5df0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x562f5e3d5d10 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x562f5e3d5c38 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x562f5e3d5c20 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x562f5e3d5c00 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x562f5e3d5cf0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x562f5e3d5c88 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x562f5e3d5c70 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x562f5e3d5c50 <col:74> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x562f5e3d5cd8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x562f5e3d5cc0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x562f5e3d5ca0 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x562f5e3d5dd0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x562f5e3d5d68 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x562f5e3d5d50 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x562f5e3d5d30 <col:112> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x562f5e3d5db8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x562f5e3d5da0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x562f5e3d5d80 <col:131> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x562f5e3d6028 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x562f5e3d6010 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x562f5e3d5e10 <col:148> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x562f5e3d5ff0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x562f5e3d5fb0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x562f5e3d5ed0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x562f5e3d5e88 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x562f5e3d5e70 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x562f5e3d5e30 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x562f5e3d5eb8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x562f5e3d5ea0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x562f5e3d5e50 <col:184> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x562f5e3d5f68 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x562f5e3d5f20 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x562f5e3d5ef0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x562f5e3d5f98 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x562f5e3d5f80 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x562f5e3d5f48 <col:212> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x562f5e3d6700 <line:781:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d6158 <col:3> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d66e8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d66b8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x562f5e3d6670 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d6658 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d6178 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d66a0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x562f5e3d6688 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x562f5e3d6198 <col:36> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x562f5e3d6638 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x562f5e3d6608 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x562f5e3d63a8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x562f5e3d62c8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x562f5e3d61f0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x562f5e3d61d8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x562f5e3d61b8 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x562f5e3d62a8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x562f5e3d6240 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x562f5e3d6228 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x562f5e3d6208 <col:74> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x562f5e3d6290 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x562f5e3d6278 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x562f5e3d6258 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x562f5e3d6388 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x562f5e3d6320 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x562f5e3d6308 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x562f5e3d62e8 <col:112> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x562f5e3d6370 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x562f5e3d6358 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x562f5e3d6338 <col:131> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x562f5e3d65f0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x562f5e3d65d8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x562f5e3d63c8 <col:148> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x562f5e3d65b8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x562f5e3d6588 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x562f5e3d6488 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x562f5e3d6440 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x562f5e3d6428 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x562f5e3d63e8 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x562f5e3d6470 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x562f5e3d6458 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x562f5e3d6408 <col:184> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x562f5e3d6558 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x562f5e3d64d8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x562f5e3d64a8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x562f5e3d6570 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x562f5e3d6530 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x562f5e3d6500 <col:219> 'int' 0
|   |-BinaryOperator 0x562f5e3d6778 <line:782:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d6720 <col:3> 'int' lvalue Var 0x562f5e3cd8f0 '__unbuffered_p2_EBX' 'int'
|   | `-ImplicitCastExpr 0x562f5e3d6760 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562f5e3d6740 <col:25> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3d68a8 <line:783:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d6798 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   | `-ConditionalOperator 0x562f5e3d6878 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x562f5e3d6830 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x562f5e3d6818 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x562f5e3d67b8 <col:7> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d6848 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d67d8 <col:25> 'int' lvalue Var 0x562f5e3cdd38 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x562f5e3d6860 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x562f5e3d67f8 <col:37> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3d6940 <line:784:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d68c8 <col:3> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x562f5e3d6918 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x562f5e3d68e8 <col:28> 'int' 0
|   |-CallExpr 0x562f5e3d6998 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d6980 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d6960 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3d69f0 <line:786:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d69d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d69b8 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3d6cd8 <line:787:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d6a10 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   | `-ConditionalOperator 0x562f5e3d6ca8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x562f5e3d6ad0 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x562f5e3d6a88 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x562f5e3d6a70 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x562f5e3d6a30 <col:7> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x562f5e3d6ab8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x562f5e3d6aa0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x562f5e3d6a50 <col:25> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x562f5e3d6c90 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d6af0 <col:42> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x562f5e3d6c70 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x562f5e3d6c40 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x562f5e3d6bb0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x562f5e3d6b68 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x562f5e3d6b50 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x562f5e3d6b10 <col:55> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x562f5e3d6b98 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x562f5e3d6b80 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x562f5e3d6b30 <col:73> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x562f5e3d6c10 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x562f5e3d6bd0 <col:90> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x562f5e3d6c28 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d6bf0 <col:102> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
|   |-BinaryOperator 0x562f5e3d6ee0 <line:788:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d6cf8 <col:3> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d6ec8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d6e98 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x562f5e3d6db8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x562f5e3d6d70 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x562f5e3d6d58 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x562f5e3d6d18 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x562f5e3d6da0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x562f5e3d6d88 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x562f5e3d6d38 <col:38> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d6e50 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3d6e08 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3d6dd8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3d6e80 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3d6e68 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d6e30 <col:66> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x562f5e3d71e8 <line:789:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d6f00 <col:3> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d71d0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d71a0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x562f5e3d70c0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x562f5e3d6fc0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x562f5e3d6f78 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x562f5e3d6f60 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x562f5e3d6f20 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x562f5e3d6fa8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x562f5e3d6f90 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x562f5e3d6f40 <col:38> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x562f5e3d70a0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x562f5e3d7058 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x562f5e3d7040 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x562f5e3d7000 <col:56> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x562f5e3d7088 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x562f5e3d7070 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x562f5e3d7020 <col:74> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d7158 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3d7110 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3d70e0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3d7188 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3d7170 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d7138 <col:102> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x562f5e3d73f0 <line:790:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d7208 <col:3> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d73d8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d73a8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x562f5e3d72c8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x562f5e3d7280 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x562f5e3d7268 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x562f5e3d7228 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x562f5e3d72b0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x562f5e3d7298 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x562f5e3d7248 <col:38> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d7360 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3d7318 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3d72e8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3d7390 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3d7378 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d7340 <col:66> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x562f5e3d76d8 <line:791:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x562f5e3d7410 <col:3> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x562f5e3d76c0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x562f5e3d7690 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x562f5e3d75b0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x562f5e3d74d0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x562f5e3d7488 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x562f5e3d7470 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x562f5e3d7430 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x562f5e3d74b8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x562f5e3d74a0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x562f5e3d7450 <col:38> '_Bool' lvalue Var 0x562f5e3cdf70 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x562f5e3d7590 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x562f5e3d7548 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x562f5e3d7530 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x562f5e3d74f0 <col:56> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x562f5e3d7578 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x562f5e3d7560 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x562f5e3d7510 <col:74> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x562f5e3d7648 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x562f5e3d7600 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x562f5e3d75d0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x562f5e3d7678 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x562f5e3d7660 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x562f5e3d7628 <col:102> '_Bool' lvalue Var 0x562f5e3ce150 'y$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x562f5e3d7730 <line:792:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d7718 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d76f8 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x562f5e3d7788 <line:793:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d7770 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d7750 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x562f5e3d7840 <line:794:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x562f5e3d77a8 <col:3> 'int' lvalue Var 0x562f5e3cd590 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x562f5e3d7820 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x562f5e3d7808 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x562f5e3d77c8 <col:22> 'int' lvalue Var 0x562f5e3cd590 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x562f5e3d77e8 <col:41> 'int' 1
|   |-CallExpr 0x562f5e3d7898 <line:795:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x562f5e3d7880 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562f5e3d7860 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x562f5e3d7910 <line:796:3, col:36>
|     `-CallExpr 0x562f5e3d78f0 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x562f5e3d78d8 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x562f5e3d78b8 <col:10> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x562f5e3d7aa8 prev 0x562f5e3cd2d8 <line:798:1, line:800:1> line:798:6 fence 'void ()'
| `-CompoundStmt 0x562f5e3d7b48 <line:799:1, line:800:1>
|-FunctionDecl 0x562f5e3d7b78 prev 0x562f5e3cd398 <line:801:1, line:803:1> line:801:6 isync 'void ()'
| `-CompoundStmt 0x562f5e3d7c18 <line:802:1, line:803:1>
|-FunctionDecl 0x562f5e3d7c48 prev 0x562f5e3cd458 <line:804:1, line:806:1> line:804:6 lwfence 'void ()'
| `-CompoundStmt 0x562f5e3d7ce8 <line:805:1, line:806:1>
`-FunctionDecl 0x562f5e3d7d58 <line:807:1, line:844:1> line:807:5 main 'int ()'
  `-CompoundStmt 0x562f5e3dc3c0 <line:808:1, line:844:1>
    |-DeclStmt 0x562f5e3d7e70 <line:809:3, col:18>
    | `-VarDecl 0x562f5e3d7e08 <col:3, col:13> col:13 used t1857 'pthread_t':'unsigned long'
    |-CallExpr 0x562f5e3d8088 <line:810:3, col:54> 'int'
    | |-ImplicitCastExpr 0x562f5e3d8070 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x562f5e3d7e88 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x562f5e3b48f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x562f5e3d7ec8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x562f5e3d7ea8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x562f5e3d7e08 't1857' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x562f5e3d80c8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x562f5e3d7f40 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x562f5e3d7f18 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x562f5e3d7ee0 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x562f5e3d80e0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x562f5e3d7f60 <col:39> 'void *(void *)' Function 0x562f5e3ce640 'P0' 'void *(void *)'
    | `-ParenExpr 0x562f5e3d7fe0 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x562f5e3d7fb8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x562f5e3d7f80 <col:52> 'int' 0
    |-DeclStmt 0x562f5e3d8170 <line:811:3, col:18>
    | `-VarDecl 0x562f5e3d8108 <col:3, col:13> col:13 used t1858 'pthread_t':'unsigned long'
    |-CallExpr 0x562f5e3d8318 <line:812:3, col:54> 'int'
    | |-ImplicitCastExpr 0x562f5e3d8300 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x562f5e3d8188 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x562f5e3b48f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x562f5e3d81c8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x562f5e3d81a8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x562f5e3d8108 't1858' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x562f5e3d8358 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x562f5e3d8240 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x562f5e3d8218 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x562f5e3d81e0 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x562f5e3d8370 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x562f5e3d8260 <col:39> 'void *(void *)' Function 0x562f5e3d0028 'P1' 'void *(void *)'
    | `-ParenExpr 0x562f5e3d82e0 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x562f5e3d82b8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x562f5e3d8280 <col:52> 'int' 0
    |-DeclStmt 0x562f5e3d8400 <line:813:3, col:18>
    | `-VarDecl 0x562f5e3d8398 <col:3, col:13> col:13 used t1859 'pthread_t':'unsigned long'
    |-CallExpr 0x562f5e3d85a8 <line:814:3, col:54> 'int'
    | |-ImplicitCastExpr 0x562f5e3d8590 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x562f5e3d8418 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x562f5e3b48f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x562f5e3d8458 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x562f5e3d8438 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x562f5e3d8398 't1859' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x562f5e3d85e8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x562f5e3d84d0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x562f5e3d84a8 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x562f5e3d8470 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x562f5e3d8600 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x562f5e3d84f0 <col:39> 'void *(void *)' Function 0x562f5e3d13a8 'P2' 'void *(void *)'
    | `-ParenExpr 0x562f5e3d8570 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x562f5e3d8548 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x562f5e3d8510 <col:52> 'int' 0
    |-CallExpr 0x562f5e3d8650 <line:815:3, col:27> 'void'
    | `-ImplicitCastExpr 0x562f5e3d8638 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x562f5e3d8618 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x562f5e3d8720 <line:816:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3d8670 <col:3> '_Bool' lvalue Var 0x562f5e3cd988 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3d8708 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x562f5e3d86e8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x562f5e3d86d0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x562f5e3d8690 <col:21> 'int' lvalue Var 0x562f5e3cd590 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x562f5e3d86b0 <col:41> 'int' 3
    |-CallExpr 0x562f5e3d8778 <line:817:3, col:25> 'void'
    | `-ImplicitCastExpr 0x562f5e3d8760 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x562f5e3d8740 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x562f5e3d87f0 <line:818:3, col:36> 'void'
    | |-ImplicitCastExpr 0x562f5e3d87d8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x562f5e3d8798 <col:3> 'void (int)' Function 0x562f5e373ca0 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x562f5e3d8830 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x562f5e3d8818 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x562f5e3d87b8 <col:21> '_Bool' lvalue Var 0x562f5e3cd988 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x562f5e3d8880 <line:819:3, col:27> 'void'
    | `-ImplicitCastExpr 0x562f5e3d8868 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x562f5e3d8848 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x562f5e3d8b68 <line:820:3, col:103> 'int' '='
    | |-DeclRefExpr 0x562f5e3d88a0 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
    | `-ConditionalOperator 0x562f5e3d8b38 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x562f5e3d8960 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x562f5e3d8918 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x562f5e3d8900 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x562f5e3d88c0 <col:7> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x562f5e3d8948 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x562f5e3d8930 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x562f5e3d88e0 <col:25> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x562f5e3d8b20 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x562f5e3d8980 <col:42> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
    |   `-ParenExpr 0x562f5e3d8b00 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x562f5e3d8ad0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x562f5e3d8a40 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x562f5e3d89f8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x562f5e3d89e0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x562f5e3d89a0 <col:55> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x562f5e3d8a28 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x562f5e3d8a10 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x562f5e3d89c0 <col:73> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x562f5e3d8aa0 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x562f5e3d8a60 <col:90> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x562f5e3d8ab8 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x562f5e3d8a80 <col:102> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
    |-BinaryOperator 0x562f5e3d8d70 <line:821:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3d8b88 <col:3> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3d8d58 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x562f5e3d8d28 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x562f5e3d8c48 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x562f5e3d8c00 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x562f5e3d8be8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x562f5e3d8ba8 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x562f5e3d8c30 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x562f5e3d8c18 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x562f5e3d8bc8 <col:38> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x562f5e3d8ce0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x562f5e3d8c98 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x562f5e3d8c68 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x562f5e3d8d10 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x562f5e3d8cf8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x562f5e3d8cc0 <col:66> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x562f5e3d9068 <line:822:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3d8d90 <col:3> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3d9050 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x562f5e3d9020 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x562f5e3d8f30 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x562f5e3d8e50 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x562f5e3d8e08 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x562f5e3d8df0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x562f5e3d8db0 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x562f5e3d8e38 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x562f5e3d8e20 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x562f5e3d8dd0 <col:38> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x562f5e3d8f10 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x562f5e3d8ec8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x562f5e3d8eb0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x562f5e3d8e70 <col:56> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x562f5e3d8ef8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x562f5e3d8ee0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x562f5e3d8e90 <col:74> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x562f5e3d8fc8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x562f5e3d8f80 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x562f5e3d8f50 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x562f5e3d8ff8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x562f5e3d8fe0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x562f5e3d8fa8 <col:102> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |-BinaryOperator 0x562f5e3d9270 <line:823:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3d9088 <col:3> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3d9258 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x562f5e3d9228 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x562f5e3d9148 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x562f5e3d9100 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x562f5e3d90e8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x562f5e3d90a8 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x562f5e3d9130 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x562f5e3d9118 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x562f5e3d90c8 <col:38> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x562f5e3d91e0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x562f5e3d9198 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x562f5e3d9168 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x562f5e3d9210 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x562f5e3d91f8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x562f5e3d91c0 <col:66> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x562f5e3d9558 <line:824:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3d9290 <col:3> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3d9540 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x562f5e3d9510 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x562f5e3d9430 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x562f5e3d9350 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x562f5e3d9308 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x562f5e3d92f0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x562f5e3d92b0 <col:20> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x562f5e3d9338 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x562f5e3d9320 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x562f5e3d92d0 <col:38> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x562f5e3d9410 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x562f5e3d93c8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x562f5e3d93b0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x562f5e3d9370 <col:56> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x562f5e3d93f8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x562f5e3d93e0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x562f5e3d9390 <col:74> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x562f5e3d94c8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x562f5e3d9480 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x562f5e3d9450 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x562f5e3d94f8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x562f5e3d94e0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x562f5e3d94a8 <col:102> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |-CallExpr 0x562f5e3d95b0 <line:825:3, col:25> 'void'
    | `-ImplicitCastExpr 0x562f5e3d9598 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x562f5e3d9578 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x562f5e3d9608 <line:826:3, col:27> 'void'
    | `-ImplicitCastExpr 0x562f5e3d95f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x562f5e3d95d0 <col:3> 'void ()' Function 0x562f5e374350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x562f5e3d96b8 <line:827:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3d9628 <col:3> '_Bool' lvalue Var 0x562f5e3ce4b0 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3d96a0 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x562f5e3d9680 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x562f5e3d9668 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x562f5e3d9648 <col:19> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x562f5e3d9768 <line:828:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3d96d8 <col:3> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3d9750 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x562f5e3d9730 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x562f5e3d9718 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x562f5e3d96f8 <col:19> 'void *(void)' Function 0x562f5e373e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x562f5e3d97e0 <line:829:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3d9788 <col:3> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3d97c8 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x562f5e3d97a8 <col:21> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x562f5e3d9858 <line:830:3, col:15> 'int' '='
    | |-DeclRefExpr 0x562f5e3d9800 <col:3> 'int' lvalue Var 0x562f5e3cdd38 'y$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x562f5e3d9840 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x562f5e3d9820 <col:15> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
    |-BinaryOperator 0x562f5e3d9c90 <line:831:3, col:162> 'int' '='
    | |-DeclRefExpr 0x562f5e3d9878 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
    | `-ConditionalOperator 0x562f5e3d9c60 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x562f5e3d9a88 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x562f5e3d99a8 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x562f5e3d98d0 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x562f5e3d98b8 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x562f5e3d9898 <col:8> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x562f5e3d9988 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x562f5e3d9920 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x562f5e3d9908 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x562f5e3d98e8 <col:27> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x562f5e3d9970 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x562f5e3d9958 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x562f5e3d9938 <col:46> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x562f5e3d9a68 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x562f5e3d9a00 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x562f5e3d99e8 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x562f5e3d99c8 <col:65> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x562f5e3d9a50 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x562f5e3d9a38 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x562f5e3d9a18 <col:84> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x562f5e3d9c48 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x562f5e3d9aa8 <col:101> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
    |   `-ParenExpr 0x562f5e3d9c28 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x562f5e3d9bf8 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x562f5e3d9b68 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x562f5e3d9b20 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x562f5e3d9b08 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x562f5e3d9ac8 <col:106> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x562f5e3d9b50 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x562f5e3d9b38 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x562f5e3d9ae8 <col:124> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x562f5e3d9bc8 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x562f5e3d9b88 <col:141> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x562f5e3d9be0 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x562f5e3d9ba8 <col:153> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
    |-BinaryOperator 0x562f5e3da1b0 <line:832:3, col:208> 'int' '='
    | |-DeclRefExpr 0x562f5e3d9cb0 <col:3> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
    | `-ConditionalOperator 0x562f5e3da180 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x562f5e3da150 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x562f5e3da138 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x562f5e3d9cd0 <col:15> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x562f5e3da168 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x562f5e3d9cf0 <col:31> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
    |   `-ParenExpr 0x562f5e3da118 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x562f5e3da0e8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x562f5e3d9f00 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x562f5e3d9e20 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x562f5e3d9d48 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x562f5e3d9d30 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x562f5e3d9d10 <col:45> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x562f5e3d9e00 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x562f5e3d9d98 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x562f5e3d9d80 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x562f5e3d9d60 <col:64> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x562f5e3d9de8 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x562f5e3d9dd0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x562f5e3d9db0 <col:83> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x562f5e3d9ee0 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x562f5e3d9e78 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x562f5e3d9e60 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x562f5e3d9e40 <col:102> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x562f5e3d9ec8 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x562f5e3d9eb0 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x562f5e3d9e90 <col:121> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x562f5e3da0d0 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x562f5e3d9f20 <col:138> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
    |       `-ParenExpr 0x562f5e3da0b0 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x562f5e3da080 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x562f5e3d9fe0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x562f5e3d9f98 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x562f5e3d9f80 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x562f5e3d9f40 <col:151> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x562f5e3d9fc8 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x562f5e3d9fb0 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x562f5e3d9f60 <col:169> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x562f5e3da050 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x562f5e3da000 <col:186> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x562f5e3da068 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x562f5e3da030 <col:198> 'int' lvalue Var 0x562f5e3ce2c8 'y$w_buff0' 'int'
    |-BinaryOperator 0x562f5e3da6c0 <line:833:3, col:208> 'int' '='
    | |-DeclRefExpr 0x562f5e3da1d0 <col:3> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
    | `-ConditionalOperator 0x562f5e3da690 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x562f5e3da660 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x562f5e3da648 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x562f5e3da1f0 <col:15> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x562f5e3da678 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x562f5e3da210 <col:31> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
    |   `-ParenExpr 0x562f5e3da628 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x562f5e3da5f8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x562f5e3da420 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x562f5e3da340 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x562f5e3da268 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x562f5e3da250 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x562f5e3da230 <col:45> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x562f5e3da320 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x562f5e3da2b8 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x562f5e3da2a0 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x562f5e3da280 <col:64> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x562f5e3da308 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x562f5e3da2f0 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x562f5e3da2d0 <col:83> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x562f5e3da400 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x562f5e3da398 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x562f5e3da380 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x562f5e3da360 <col:102> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x562f5e3da3e8 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x562f5e3da3d0 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x562f5e3da3b0 <col:121> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x562f5e3da5e0 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x562f5e3da440 <col:138> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
    |       `-ParenExpr 0x562f5e3da5c0 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x562f5e3da590 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x562f5e3da500 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x562f5e3da4b8 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x562f5e3da4a0 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x562f5e3da460 <col:151> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x562f5e3da4e8 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x562f5e3da4d0 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x562f5e3da480 <col:169> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x562f5e3da560 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x562f5e3da520 <col:186> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x562f5e3da578 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x562f5e3da540 <col:198> 'int' lvalue Var 0x562f5e3ce3c0 'y$w_buff1' 'int'
    |-BinaryOperator 0x562f5e3dac68 <line:834:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3da6e0 <col:3> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3dac50 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x562f5e3dac20 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x562f5e3dabd8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x562f5e3dabc0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x562f5e3da700 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x562f5e3dac08 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x562f5e3dabf0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x562f5e3da720 <col:36> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x562f5e3daba0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x562f5e3dab70 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x562f5e3da930 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x562f5e3da850 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x562f5e3da778 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x562f5e3da760 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x562f5e3da740 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x562f5e3da830 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x562f5e3da7c8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x562f5e3da7b0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x562f5e3da790 <col:74> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x562f5e3da818 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x562f5e3da800 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x562f5e3da7e0 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x562f5e3da910 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x562f5e3da8a8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x562f5e3da890 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x562f5e3da870 <col:112> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x562f5e3da8f8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x562f5e3da8e0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x562f5e3da8c0 <col:131> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x562f5e3dab58 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x562f5e3dab40 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x562f5e3da950 <col:148> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x562f5e3dab20 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x562f5e3daaf0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x562f5e3daa10 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x562f5e3da9c8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x562f5e3da9b0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x562f5e3da970 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x562f5e3da9f8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x562f5e3da9e0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x562f5e3da990 <col:184> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x562f5e3daaa8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x562f5e3daa60 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x562f5e3daa30 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x562f5e3daad8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x562f5e3daac0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x562f5e3daa88 <col:212> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x562f5e3db240 <line:835:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3dac88 <col:3> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3db228 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x562f5e3db1f8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x562f5e3db1b0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x562f5e3db198 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x562f5e3daca8 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x562f5e3db1e0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x562f5e3db1c8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x562f5e3dacc8 <col:36> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x562f5e3db178 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x562f5e3db148 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x562f5e3daed8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x562f5e3dadf8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x562f5e3dad20 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x562f5e3dad08 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x562f5e3dace8 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x562f5e3dadd8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x562f5e3dad70 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x562f5e3dad58 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x562f5e3dad38 <col:74> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x562f5e3dadc0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x562f5e3dada8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x562f5e3dad88 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x562f5e3daeb8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x562f5e3dae50 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x562f5e3dae38 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x562f5e3dae18 <col:112> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x562f5e3daea0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x562f5e3dae88 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x562f5e3dae68 <col:131> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x562f5e3db130 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x562f5e3db118 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x562f5e3daef8 <col:148> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x562f5e3db0f8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x562f5e3db0c8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x562f5e3dafb8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x562f5e3daf70 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x562f5e3daf58 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x562f5e3daf18 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x562f5e3dafa0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x562f5e3daf88 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x562f5e3daf38 <col:184> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x562f5e3db098 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x562f5e3db008 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x562f5e3dafd8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x562f5e3db0b0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x562f5e3db070 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x562f5e3db040 <col:219> 'int' 0
    |-BinaryOperator 0x562f5e3db7e8 <line:836:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3db260 <col:3> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3db7d0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x562f5e3db7a0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x562f5e3db758 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x562f5e3db740 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x562f5e3db280 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x562f5e3db788 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x562f5e3db770 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x562f5e3db2a0 <col:36> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x562f5e3db720 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x562f5e3db6f0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x562f5e3db4b0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x562f5e3db3d0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x562f5e3db2f8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x562f5e3db2e0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x562f5e3db2c0 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x562f5e3db3b0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x562f5e3db348 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x562f5e3db330 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x562f5e3db310 <col:74> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x562f5e3db398 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x562f5e3db380 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x562f5e3db360 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x562f5e3db490 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x562f5e3db428 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x562f5e3db410 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x562f5e3db3f0 <col:112> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x562f5e3db478 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x562f5e3db460 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x562f5e3db440 <col:131> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x562f5e3db6d8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x562f5e3db6c0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x562f5e3db4d0 <col:148> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x562f5e3db6a0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x562f5e3db670 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x562f5e3db590 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x562f5e3db548 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x562f5e3db530 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x562f5e3db4f0 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x562f5e3db578 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x562f5e3db560 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x562f5e3db510 <col:184> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x562f5e3db628 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x562f5e3db5e0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x562f5e3db5b0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x562f5e3db658 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x562f5e3db640 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x562f5e3db608 <col:212> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x562f5e3dbdb0 <line:837:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3db808 <col:3> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3dbd98 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x562f5e3dbd68 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x562f5e3dbd20 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x562f5e3dbd08 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x562f5e3db828 <col:20> '_Bool' lvalue Var 0x562f5e3ce528 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x562f5e3dbd50 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x562f5e3dbd38 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x562f5e3db848 <col:36> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x562f5e3dbce8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x562f5e3dbcb8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x562f5e3dba58 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x562f5e3db978 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x562f5e3db8a0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x562f5e3db888 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x562f5e3db868 <col:55> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x562f5e3db958 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x562f5e3db8f0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x562f5e3db8d8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x562f5e3db8b8 <col:74> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x562f5e3db940 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x562f5e3db928 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x562f5e3db908 <col:93> '_Bool' lvalue Var 0x562f5e3ce438 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x562f5e3dba38 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x562f5e3db9d0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x562f5e3db9b8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x562f5e3db998 <col:112> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x562f5e3dba20 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x562f5e3dba08 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x562f5e3db9e8 <col:131> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x562f5e3dbca0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x562f5e3dbc88 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x562f5e3dba78 <col:148> '_Bool' lvalue Var 0x562f5e3cdfe8 'y$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x562f5e3dbc68 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x562f5e3dbc38 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x562f5e3dbb38 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x562f5e3dbaf0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x562f5e3dbad8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x562f5e3dba98 <col:166> '_Bool' lvalue Var 0x562f5e3ce340 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x562f5e3dbb20 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x562f5e3dbb08 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x562f5e3dbab8 <col:184> '_Bool' lvalue Var 0x562f5e3cddb0 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x562f5e3dbc08 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x562f5e3dbb88 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x562f5e3dbb58 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x562f5e3dbc20 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x562f5e3dbbe0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x562f5e3dbbb0 <col:219> 'int' 0
    |-BinaryOperator 0x562f5e3dc0a0 <line:838:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3dbdd0 <col:3> '_Bool' lvalue Var 0x562f5e3cda00 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x562f5e3dc088 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x562f5e3dc070 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x562f5e3dc050 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x562f5e3dc010 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x562f5e3dbf78 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x562f5e3dbee0 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x562f5e3dbe48 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x562f5e3dbe30 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x562f5e3dbdf0 <col:23> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
    |         | | | `-IntegerLiteral 0x562f5e3dbe10 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x562f5e3dbec0 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x562f5e3dbea8 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x562f5e3dbe68 <col:33> 'int' lvalue Var 0x562f5e3cd6b0 '__unbuffered_p1_EAX' 'int'
    |         | |   `-IntegerLiteral 0x562f5e3dbe88 <col:56> 'int' 1
    |         | `-BinaryOperator 0x562f5e3dbf58 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x562f5e3dbf40 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x562f5e3dbf00 <col:61> 'int' lvalue Var 0x562f5e3cd7d0 '__unbuffered_p2_EAX' 'int'
    |         |   `-IntegerLiteral 0x562f5e3dbf20 <col:84> 'int' 1
    |         `-BinaryOperator 0x562f5e3dbff0 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x562f5e3dbfd8 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x562f5e3dbf98 <col:89> 'int' lvalue Var 0x562f5e3cd8f0 '__unbuffered_p2_EBX' 'int'
    |           `-IntegerLiteral 0x562f5e3dbfb8 <col:112> 'int' 1
    |-BinaryOperator 0x562f5e3dc1d0 <line:839:3, col:37> 'int' '='
    | |-DeclRefExpr 0x562f5e3dc0c0 <col:3> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
    | `-ConditionalOperator 0x562f5e3dc1a0 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x562f5e3dc158 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x562f5e3dc140 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x562f5e3dc0e0 <col:7> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x562f5e3dc170 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x562f5e3dc100 <col:25> 'int' lvalue Var 0x562f5e3cdd38 'y$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x562f5e3dc188 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x562f5e3dc120 <col:37> 'int' lvalue Var 0x562f5e3cdc20 'y' 'int'
    |-BinaryOperator 0x562f5e3dc268 <line:840:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x562f5e3dc1f0 <col:3> '_Bool' lvalue Var 0x562f5e3cdcb8 'y$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x562f5e3dc240 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x562f5e3dc210 <col:28> 'int' 0
    |-CallExpr 0x562f5e3dc2c0 <line:841:3, col:25> 'void'
    | `-ImplicitCastExpr 0x562f5e3dc2a8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x562f5e3dc288 <col:3> 'void ()' Function 0x562f5e374410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x562f5e3dc338 <line:842:3, col:36> 'void'
    | |-ImplicitCastExpr 0x562f5e3dc320 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x562f5e3dc2e0 <col:3> 'void (int)' Function 0x562f5e3740d8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x562f5e3dc378 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x562f5e3dc360 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x562f5e3dc300 <col:21> '_Bool' lvalue Var 0x562f5e3cda00 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x562f5e3dc3b0 <line:843:3, col:10>
      `-IntegerLiteral 0x562f5e3dc390 <col:10> 'int' 0
