TranslationUnitDecl 0x55a3bb472f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55a3bb473848 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55a3bb473520 '__int128'
|-TypedefDecl 0x55a3bb4738b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55a3bb473540 'unsigned __int128'
|-TypedefDecl 0x55a3bb473bc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55a3bb473990 'struct __NSConstantString_tag'
|   `-Record 0x55a3bb473910 '__NSConstantString_tag'
|-TypedefDecl 0x55a3bb473c68 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55a3bb473c20 'char *'
|   `-BuiltinType 0x55a3bb473020 'char'
|-TypedefDecl 0x55a3bb4b2b60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55a3bb473f00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55a3bb473d40 'struct __va_list_tag'
|     `-Record 0x55a3bb473cc0 '__va_list_tag'
|-FunctionDecl 0x55a3bb4b2ca0 <pthread-wmm/mix023_tso.opt_false-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55a3bb4b2bd0 <col:31> col:34 'int'
|-FunctionDecl 0x55a3bb4b2e68 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x55a3bb4b2f90 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55a3bb4b30d8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55a3bb4b3048 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x55a3bb4b3308 <col:40, col:99>
|   |-IfStmt 0x55a3bb4b32d8 <col:42, col:88>
|   | |-UnaryOperator 0x55a3bb4b31b8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x55a3bb4b31a0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55a3bb4b3180 <col:47> 'int' lvalue ParmVar 0x55a3bb4b3048 'expression' 'int'
|   | `-CompoundStmt 0x55a3bb4b32c0 <col:59, col:88>
|   |   `-LabelStmt 0x55a3bb4b32a8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x55a3bb4b3238 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x55a3bb4b3220 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x55a3bb4b31d0 <col:68> 'void () __attribute__((noreturn))' Function 0x55a3bb4b2f90 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x55a3bb4b32f0 <col:89>
|   `-ReturnStmt 0x55a3bb4b32f8 <col:91>
|-FunctionDecl 0x55a3bb4b3350 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x55a3bb4b3410 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x55a3bb4b3790 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55a3bb4b34c8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x55a3bb4b3548 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x55a3bb4b35c8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55a3bb4b3648 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55a3bb4b3850 <line:10:22>
|-FunctionDecl 0x55a3bb4d98a0 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55a3bb4b38c0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x55a3bb4b3940 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x55a3bb4b39c0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55a3bb4b3a40 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55a3bb4d9960 <line:13:22>
|-FunctionDecl 0x55a3bb4d9c10 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55a3bb4d99d0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x55a3bb4d9a50 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x55a3bb4d9ad0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x55a3bb4d9cc8 <line:15:22>
|-TypedefDecl 0x55a3bb4d9d38 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x55a3bb4730e0 'unsigned char'
|-TypedefDecl 0x55a3bb4d9da8 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x55a3bb473100 'unsigned short'
|-TypedefDecl 0x55a3bb4d9e18 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-TypedefDecl 0x55a3bb4d9e88 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4d9ef8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x55a3bb473040 'signed char'
|-TypedefDecl 0x55a3bb4d9f68 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x55a3bb4730e0 'unsigned char'
|-TypedefDecl 0x55a3bb4d9fd8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x55a3bb473060 'short'
|-TypedefDecl 0x55a3bb4da048 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x55a3bb473100 'unsigned short'
|-TypedefDecl 0x55a3bb4da0b8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x55a3bb473080 'int'
|-TypedefDecl 0x55a3bb4da128 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-TypedefDecl 0x55a3bb4da198 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4da208 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4da278 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4da2e8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4da358 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4da3c8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-TypedefDecl 0x55a3bb4da438 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-TypedefDecl 0x55a3bb4da4a8 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4da518 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4da588 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-TypedefDecl 0x55a3bb4da5f8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4da668 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4da6d8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4da748 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x55a3bb473080 'int'
|-RecordDecl 0x55a3bb4da7a0 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x55a3bb4da918 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x55a3bb4da9d0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x55a3bb4da970 'struct __fsid_t' sugar
|   `-RecordType 0x55a3bb4da820 '__fsid_t'
|     `-Record 0x55a3bb4da7a0 ''
|-TypedefDecl 0x55a3bb4daa58 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4daac8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4dab38 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4daba8 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-TypedefDecl 0x55a3bb4dac18 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4dac88 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-TypedefDecl 0x55a3bb4dacf8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4dad68 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x55a3bb473080 'int'
|-TypedefDecl 0x55a3bb4dadd8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x55a3bb473080 'int'
|-TypedefDecl 0x55a3bb4dae48 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x55a3bb473080 'int'
|-TypedefDecl 0x55a3bb4daeb8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x55a3bb4737a0 'void *'
|   `-BuiltinType 0x55a3bb472fe0 'void'
|-TypedefDecl 0x55a3bb4daf28 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4daf98 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4db008 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4db078 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4db0e8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4db158 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4db1c8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4db238 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4db2a8 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4db318 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4db388 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4db418 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x55a3bb4db3e0 '__off64_t' sugar
|   |-Typedef 0x55a3bb4da6d8 '__off64_t'
|   `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4db510 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x55a3bb4db4d0 '__quad_t *'
|   `-TypedefType 0x55a3bb4db470 '__quad_t' sugar
|     |-Typedef 0x55a3bb4da278 '__quad_t'
|     `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4db580 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x55a3bb473c20 'char *'
|   `-BuiltinType 0x55a3bb473020 'char'
|-TypedefDecl 0x55a3bb4db5f0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4db660 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-FunctionDecl 0x55a3bb4db7a8 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x55a3bb4db6d0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x55a3bb4dbae8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x55a3bb4dbad8 <line:72:3, col:34>
|     `-CallExpr 0x55a3bb4dba98 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x55a3bb4dba80 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55a3bb4dba10 <col:10> '<builtin fn type>' Function 0x55a3bb4db880 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x55a3bb4dbac0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55a3bb4dba30 <col:29> 'unsigned int' lvalue ParmVar 0x55a3bb4db6d0 '__bsx' 'unsigned int'
|-FunctionDecl 0x55a3bb4db880 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x55a3bb4db920 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x55a3bb4db990 <col:10> Implicit
| `-ConstAttr 0x55a3bb4db9e8 <col:10> Implicit
|-FunctionDecl 0x55a3bb4dbc40 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x55a3bb4dbb38 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x55a3bb4dbf58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x55a3bb4dbf48 <line:77:3, col:34>
|     `-CallExpr 0x55a3bb4dbf08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x55a3bb4dbef0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55a3bb4dbe78 <col:10> '<builtin fn type>' Function 0x55a3bb4dbce8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x55a3bb4dbf30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55a3bb4dbe98 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x55a3bb4dbb38 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x55a3bb4dbce8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x55a3bb4dbd88 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x55a3bb4dbdf8 <col:10> Implicit
| `-ConstAttr 0x55a3bb4dbe50 <col:10> Implicit
|-TypedefDecl 0x55a3bb4dbf88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-TypedefDecl 0x55a3bb4dc018 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x55a3bb4dbfe0 '__time_t' sugar
|   |-Typedef 0x55a3bb4dac18 '__time_t'
|   `-BuiltinType 0x55a3bb4730a0 'long'
|-RecordDecl 0x55a3bb4dc070 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x55a3bb4dc128 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x55a3bb4dc1b8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x55a3bb4dc248 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x55a3bb4dc210 '__pid_t' sugar
|   |-Typedef 0x55a3bb4da748 '__pid_t'
|   `-BuiltinType 0x55a3bb473080 'int'
|-RecordDecl 0x55a3bb4dc2a0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x55a3bb4dc360 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x55a3bb4dc3b0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x55a3bb4dc470 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x55a3bb4dc4d8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-RecordDecl 0x55a3bb4dc530 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x55a3bb4dc7c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x55a3bb4de8b0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x55a3bb4dc810 'struct cpu_set_t' sugar
|   `-RecordType 0x55a3bb4dc5b0 'cpu_set_t'
|     `-Record 0x55a3bb4dc530 ''
|-FunctionDecl 0x55a3bb4deb88 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x55a3bb4de958 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55a3bb4dea60 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x55a3bb4dec38 <line:107:19>
|-FunctionDecl 0x55a3bb4dee10 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x55a3bb4deca0 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x55a3bb4deeb8 <col:69>
|-FunctionDecl 0x55a3bb4df030 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x55a3bb4def20 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x55a3bb4df0d8 <col:64>
|-FunctionDecl 0x55a3bb4df398 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x55a3bb4df140 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55a3bb4df278 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55a3bb4df448 <line:113:22>
|-FunctionDecl 0x55a3bb4df6c8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x55a3bb4df4b0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55a3bb4df5a8 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x55a3bb4df778 <col:88>
|-FunctionDecl 0x55a3bb4dfa98 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55a3bb4df7e0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55a3bb4df8c0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x55a3bb4df950 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55a3bb4dfb50 <col:62>
|-FunctionDecl 0x55a3bb4dfcc8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x55a3bb4dfbb8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x55a3bb4dfd70 <col:63>
|-FunctionDecl 0x55a3bb4dfe98 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x55a3bb4dff38 <col:47>
|-FunctionDecl 0x55a3bb4e0040 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x55a3bb4dffa8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55a3bb4e00e8 <col:69>
|-FunctionDecl 0x55a3bb4e01f0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x55a3bb4e0158 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55a3bb4e0298 <col:69>
|-FunctionDecl 0x55a3bb4e0558 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55a3bb4e0300 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55a3bb4e0438 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x55a3bb4e0608 <col:88>
|-TypedefDecl 0x55a3bb4e0698 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x55a3bb4e0660 '__clock_t' sugar
|   |-Typedef 0x55a3bb4daa58 '__clock_t'
|   `-BuiltinType 0x55a3bb4730a0 'long'
|-TypedefDecl 0x55a3bb4e0728 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x55a3bb4e06f0 '__clockid_t' sugar
|   |-Typedef 0x55a3bb4dae48 '__clockid_t'
|   `-BuiltinType 0x55a3bb473080 'int'
|-TypedefDecl 0x55a3bb4e07b8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x55a3bb4e0780 '__timer_t' sugar
|   |-Typedef 0x55a3bb4daeb8 '__timer_t'
|   `-PointerType 0x55a3bb4737a0 'void *'
|     `-BuiltinType 0x55a3bb472fe0 'void'
|-RecordDecl 0x55a3bb4e0810 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x55a3bb4e08e8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x55a3bb4e0950 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x55a3bb4e09b8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x55a3bb4e0a20 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x55a3bb4e0a88 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x55a3bb4e0af0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x55a3bb4e0b58 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x55a3bb4e0bc0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x55a3bb4e0c28 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x55a3bb4e0c90 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x55a3bb4e0cf8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x55a3bb4e0d48 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x55a3bb4e0e18 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x55a3bb4e0e88 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x55a3bb4e0f30 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x55a3bb4e1100 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x55a3bb4e11a0 <col:45>
|-FunctionDecl 0x55a3bb4e1380 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x55a3bb4e1270 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x55a3bb4e1428 <col:54>
|-FunctionDecl 0x55a3bb4e1628 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x55a3bb4e1490 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x55a3bb4e1508 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x55a3bb4e16d8 <line:157:22>
| `-ConstAttr 0x55a3bb4e1730 <col:63>
|-FunctionDecl 0x55a3bb4e2560 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55a3bb4e1828 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55a3bb4e2608 <col:56>
|-FunctionDecl 0x55a3bb4e29b0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x55a3bb4e2678 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x55a3bb4e26f0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55a3bb4e2770 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x55a3bb4e2868 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x55a3bb4e2a70 <col:54>
|-RecordDecl 0x55a3bb4e2ac8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x55a3bb4e2b78 parent 0x55a3bb472f88 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x55a3bb4e2dd8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x55a3bb4e2e78 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x55a3bb4e2ee0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x55a3bb4e2f48 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x55a3bb4e3038 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x55a3bb4e3158 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x55a3bb4e3100 'struct __locale_struct *'
|   `-ElaboratedType 0x55a3bb4e3090 'struct __locale_struct' sugar
|     `-RecordType 0x55a3bb4e2b50 'struct __locale_struct'
|       `-Record 0x55a3bb4e2ac8 '__locale_struct'
|-TypedefDecl 0x55a3bb4e3208 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x55a3bb4e31d0 '__locale_t' sugar
|   |-Typedef 0x55a3bb4e3158 '__locale_t'
|   `-PointerType 0x55a3bb4e3100 'struct __locale_struct *'
|     `-ElaboratedType 0x55a3bb4e3090 'struct __locale_struct' sugar
|       `-RecordType 0x55a3bb4e2b50 'struct __locale_struct'
|         `-Record 0x55a3bb4e2ac8 '__locale_struct'
|-FunctionDecl 0x55a3bb4e3610 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x55a3bb4e3278 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x55a3bb4e32f0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55a3bb4e3370 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x55a3bb4e3400 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55a3bb4e3478 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x55a3bb4e36d8 <col:40>
|-FunctionDecl 0x55a3bb4e38c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55a3bb4e37a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x55a3bb4e3970 <col:66>
|-FunctionDecl 0x55a3bb4e3a80 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55a3bb4e39d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x55a3bb4e3b28 <col:69>
|-FunctionDecl 0x55a3bb4e3d58 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55a3bb4e3b90 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55a3bb4e3c20 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55a3bb4e3e08 <col:52>
|-FunctionDecl 0x55a3bb4e3fb0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55a3bb4e3e70 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55a3bb4e3f00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55a3bb4e4060 <col:55>
|-FunctionDecl 0x55a3bb4e41f8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x55a3bb4e40e0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x55a3bb4e42a0 <col:62>
|-FunctionDecl 0x55a3bb4e4418 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x55a3bb4e4308 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x55a3bb4e44c0 <col:60>
|-FunctionDecl 0x55a3bb4e4718 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55a3bb4e4578 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55a3bb4e45f8 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x55a3bb4e47c8 <col:44>
|-FunctionDecl 0x55a3bb4e49d8 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55a3bb4e4830 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55a3bb4e48b0 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x55a3bb4e4a88 <col:49>
|-VarDecl 0x55a3bb4e4b88 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x55a3bb4e4c08 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x55a3bb4e4c88 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x55a3bb4e4d50 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x55a3bb4e4e80 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x55a3bb4e4f20 <col:42>
|-VarDecl 0x55a3bb4e4f90 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x55a3bb4e5010 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x55a3bb4e5198 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x55a3bb4e5088 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x55a3bb4e5240 <col:57>
|-FunctionDecl 0x55a3bb4e5350 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55a3bb4e52c0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55a3bb4e53f8 <col:56>
|-FunctionDecl 0x55a3bb4e6540 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55a3bb4e5478 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x55a3bb4e65e8 <col:59>
|-FunctionDecl 0x55a3bb4e66f0 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x55a3bb4e6658 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x55a3bb4e6798 <col:48>
| `-ConstAttr 0x55a3bb4e67f0 <col:89>
|-FunctionDecl 0x55a3bb4e6a58 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55a3bb4e68a8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x55a3bb4e6938 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x55a3bb4e6cb8 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55a3bb4e6b48 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55a3bb4e6bd8 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x55a3bb4e6d68 <col:88>
|-FunctionDecl 0x55a3bb4e6f00 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55a3bb4e6dd0 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55a3bb4e6e60 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x55a3bb4e6fb0 <col:88>
|-FunctionDecl 0x55a3bb4e71c8 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x55a3bb4e7018 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55a3bb4e70a8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x55a3bb4e7278 <line:208:22>
|-FunctionDecl 0x55a3bb4e75e8 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55a3bb4e72e0 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55a3bb4e7360 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x55a3bb4e73f0 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x55a3bb4e7480 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x55a3bb4e78e8 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x55a3bb4e76e8 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x55a3bb4e77c0 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x55a3bb4e7998 <col:85>
|-FunctionDecl 0x55a3bb4e7d88 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x55a3bb4e7a00 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55a3bb4e7b38 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x55a3bb4e7c40 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x55a3bb4e7e40 <col:52>
|-FunctionDecl 0x55a3bb4e7fb8 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x55a3bb4e7ea8 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55a3bb4e8060 <col:61>
|-FunctionDecl 0x55a3bb4e8560 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x55a3bb4e80c8 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55a3bb4e8148 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x55a3bb4e8278 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x55a3bb4e8368 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x55a3bb4e8620 <col:62>
|-FunctionDecl 0x55a3bb4e8838 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x55a3bb4e8688 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55a3bb4e8718 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x55a3bb4e88e8 <line:221:22>
|-FunctionDecl 0x55a3bb4e89e8 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x55a3bb4e8950 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55a3bb4e8a90 <col:65>
|-TypedefDecl 0x55a3bb4e8b00 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x55a3bb473140 'unsigned long'
|-RecordDecl 0x55a3bb4e8b58 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x55a3bb4e8ca0 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55a3bb4e8d08 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55a3bb4e8db8 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x55a3bb4e8d60 'union pthread_attr_t' sugar
|   `-RecordType 0x55a3bb4e8be0 'union pthread_attr_t'
|     `-Record 0x55a3bb4e8b58 'pthread_attr_t'
|-RecordDecl 0x55a3bb4e8e10 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x55a3bb4e8f88 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x55a3bb4e9000 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x55a3bb4e90b0 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x55a3bb4e9050 'struct __pthread_internal_list' sugar
|   `-RecordType 0x55a3bb4e8e90 'struct __pthread_internal_list'
|     `-Record 0x55a3bb4e8e10 '__pthread_internal_list'
|-RecordDecl 0x55a3bb4e9120 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x55a3bb4e91c8 parent 0x55a3bb472f88 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x55a3bb4e92a0 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55a3bb4e9308 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x55a3bb4e9370 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x55a3bb4e93d8 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x55a3bb4e9440 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x55a3bb4e94a8 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x55a3bb4ed580 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x55a3bb4ed630 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x55a3bb4ed720 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x55a3bb4ed788 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55a3bb4ed910 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x55a3bb4ed8b0 'union pthread_mutex_t' sugar
|   `-RecordType 0x55a3bb4e91a0 'pthread_mutex_t'
|     `-Record 0x55a3bb4e9120 ''
|-RecordDecl 0x55a3bb4ed980 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x55a3bb4edac0 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55a3bb4edb28 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55a3bb4edbe0 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x55a3bb4edb80 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x55a3bb4eda00 'pthread_mutexattr_t'
|     `-Record 0x55a3bb4ed980 ''
|-RecordDecl 0x55a3bb4edc50 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x55a3bb4edcf8 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x55a3bb4eddc0 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55a3bb4ede28 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x55a3bb4ede90 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x55a3bb4edef8 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x55a3bb4edf60 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x55a3bb4edfc8 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x55a3bb4ee030 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x55a3bb4ee098 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x55a3bb4ee150 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at pthread-wmm/mix023_tso.opt_false-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at pthread-wmm/mix023_tso.opt_false-unreach-call.i:258:3)'
| |-FieldDecl 0x55a3bb4ee240 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x55a3bb4ee2a8 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x55a3bb4ee3e0 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x55a3bb4ee380 'union pthread_cond_t' sugar
|   `-RecordType 0x55a3bb4edcd0 'pthread_cond_t'
|     `-Record 0x55a3bb4edc50 ''
|-RecordDecl 0x55a3bb4ee450 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x55a3bb4ee590 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55a3bb4ee5f8 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55a3bb4ee6b0 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x55a3bb4ee650 'union pthread_condattr_t' sugar
|   `-RecordType 0x55a3bb4ee4d0 'pthread_condattr_t'
|     `-Record 0x55a3bb4ee450 ''
|-TypedefDecl 0x55a3bb4ee738 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x55a3bb473120 'unsigned int'
|-TypedefDecl 0x55a3bb4ee7a8 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x55a3bb473080 'int'
|-RecordDecl 0x55a3bb4ee800 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x55a3bb4ee8a8 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x55a3bb4ee970 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55a3bb4ee9d8 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x55a3bb4eea40 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x55a3bb4eeaa8 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x55a3bb4eeb10 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x55a3bb4eeb78 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x55a3bb4eebe0 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x55a3bb4eec48 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x55a3bb4eecb0 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x55a3bb4eed18 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x55a3bb4eed80 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x55a3bb4eee30 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at pthread-wmm/mix023_tso.opt_false-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at pthread-wmm/mix023_tso.opt_false-unreach-call.i:281:3)'
| |-FieldDecl 0x55a3bb4eeed8 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55a3bb4eef40 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55a3bb4ef090 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x55a3bb4ef030 'union pthread_rwlock_t' sugar
|   `-RecordType 0x55a3bb4ee880 'pthread_rwlock_t'
|     `-Record 0x55a3bb4ee800 ''
|-RecordDecl 0x55a3bb4ef100 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x55a3bb4ef240 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x55a3bb4ef2a8 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55a3bb4ef360 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x55a3bb4ef300 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x55a3bb4ef180 'pthread_rwlockattr_t'
|     `-Record 0x55a3bb4ef100 ''
|-TypedefDecl 0x55a3bb4ef3e8 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x55a3bb473084 'volatile int' volatile
|   `-BuiltinType 0x55a3bb473080 'int'
|-RecordDecl 0x55a3bb4ef440 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x55a3bb4f15b0 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x55a3bb4f1618 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55a3bb4f16d0 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x55a3bb4f1670 'union pthread_barrier_t' sugar
|   `-RecordType 0x55a3bb4ef4c0 'pthread_barrier_t'
|     `-Record 0x55a3bb4ef440 ''
|-RecordDecl 0x55a3bb4f1740 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x55a3bb4f1840 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55a3bb4f18a8 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55a3bb4f1960 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x55a3bb4f1900 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x55a3bb4f17c0 'pthread_barrierattr_t'
|     `-Record 0x55a3bb4f1740 ''
|-TypedefDecl 0x55a3bb4f1a78 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x55a3bb4f1a10 'long [8]' 8 
|   `-BuiltinType 0x55a3bb4730a0 'long'
|-EnumDecl 0x55a3bb4f1ad0 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x55a3bb4f1b98 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x55a3bb4f1be8 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x55a3bb4f1c38 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x55a3bb4f1d08 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x55a3bb4f1d58 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x55a3bb4f1da8 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x55a3bb4f1df8 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x55a3bb4f1e80 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x55a3bb4f1e68 <col:26> 'int'
| |   `-DeclRefExpr 0x55a3bb4f1e48 <col:26> 'int' EnumConstant 0x55a3bb4f1d08 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x55a3bb4f1f08 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x55a3bb4f1ef0 <col:29> 'int'
| |   `-DeclRefExpr 0x55a3bb4f1ed0 <col:29> 'int' EnumConstant 0x55a3bb4f1d58 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x55a3bb4f1f90 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x55a3bb4f1f78 <col:30> 'int'
| |   `-DeclRefExpr 0x55a3bb4f1f58 <col:30> 'int' EnumConstant 0x55a3bb4f1da8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x55a3bb4f2018 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x55a3bb4f2000 <col:27> 'int'
|     `-DeclRefExpr 0x55a3bb4f1fe0 <col:27> 'int' EnumConstant 0x55a3bb4f1e80 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x55a3bb4f2068 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x55a3bb4f2138 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x55a3bb4f21c0 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x55a3bb4f21a8 <col:30> 'int'
| |   `-DeclRefExpr 0x55a3bb4f2188 <col:30> 'int' EnumConstant 0x55a3bb4f2138 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x55a3bb4f2210 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x55a3bb4f2298 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x55a3bb4f2280 <col:29> 'int'
|     `-DeclRefExpr 0x55a3bb4f2260 <col:29> 'int' EnumConstant 0x55a3bb4f2210 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x55a3bb4f22e8 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x55a3bb4f23b8 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x55a3bb4f2408 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x55a3bb4f2458 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x55a3bb4f24a8 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x55a3bb4f25c0 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x55a3bb4f2610 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x55a3bb4f2660 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x55a3bb4f26e8 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x55a3bb4f26d0 <col:31> 'int'
|     `-DeclRefExpr 0x55a3bb4f26b0 <col:31> 'int' EnumConstant 0x55a3bb4f25c0 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x55a3bb4f2738 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x55a3bb4f2808 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x55a3bb4f2858 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x55a3bb4f28a8 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x55a3bb4f2978 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x55a3bb4f29c8 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x55a3bb4f2a18 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x55a3bb4f2ae8 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x55a3bb4f2b38 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x55a3bb4f2b88 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x55a3bb4f2dc8 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x55a3bb4f2e30 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x55a3bb4f2e98 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x55a3bb4f2fb8 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x55a3bb4f3008 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x55a3bb4f30d8 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x55a3bb4f3128 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x55a3bb4f3178 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x55a3bb4f3248 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x55a3bb4f3298 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x55a3bb4f38f8 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x55a3bb4f3390 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x55a3bb4f34a0 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4f36e0 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x55a3bb4f3760 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x55a3bb4f39b8 <col:47>
| |-NonNullAttr 0x55a3bb4f3a10 <col:77, col:94> 1 3
| `-CallbackAttr 0x55a3bb4f3a48 <line:385:12> Implicit 2 3
|-FunctionDecl 0x55a3bb4f3b70 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x55a3bb4f3aa0 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x55a3bb4f3dc8 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x55a3bb4f3c28 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x55a3bb4f3ca8 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x55a3bb4f3f98 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x55a3bb4f3e88 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x55a3bb4f4040 <col:60>
|-FunctionDecl 0x55a3bb4f4190 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x55a3bb4f4230 <col:54>
| `-ConstAttr 0x55a3bb4f4288 <col:95>
|-FunctionDecl 0x55a3bb4f4458 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x55a3bb4f42c0 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55a3bb4f4338 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x55a3bb4f4508 <line:394:19>
| `-ConstAttr 0x55a3bb4f4560 <col:60>
|-FunctionDecl 0x55a3bb4f4f68 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55a3bb4f4e30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55a3bb4f5010 <col:71>
| `-NonNullAttr 0x55a3bb4f5068 <col:112, col:126> 1
|-FunctionDecl 0x55a3bb4f5170 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55a3bb4f50b8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55a3bb4f5218 <line:397:22>
| `-NonNullAttr 0x55a3bb4f5270 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4f5498 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x55a3bb4f52b8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4f5338 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x55a3bb4f5548 <line:400:22>
| `-NonNullAttr 0x55a3bb4f55a0 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4f57a8 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb4f55e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4f5668 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x55a3bb4f5858 <line:403:22>
| `-NonNullAttr 0x55a3bb4f58b0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4f5b08 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x55a3bb4f58f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4f59a0 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x55a3bb4f5bb8 <line:406:22>
| `-NonNullAttr 0x55a3bb4f5c10 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4f6e48 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55a3bb4f5c58 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4f5cd0 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55a3bb4f6ef8 <line:409:22>
| `-NonNullAttr 0x55a3bb4f6f50 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4f7188 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55a3bb4f6f98 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4f7028 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55a3bb4f7238 <line:412:22>
| `-NonNullAttr 0x55a3bb4f7290 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4f74c8 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55a3bb4f72d8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4f7368 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x55a3bb4f7578 <col:37>
| `-NonNullAttr 0x55a3bb4f75d0 <col:78, col:95> 1 2
|-FunctionDecl 0x55a3bb4f77b8 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb4f7618 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4f7698 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x55a3bb4f7868 <line:418:22>
| `-NonNullAttr 0x55a3bb4f78c0 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4f7a48 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb4f7908 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4f7988 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x55a3bb4f7af8 <line:420:22>
| `-NonNullAttr 0x55a3bb4f7b50 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4f7cf8 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb4f7b98 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4f7c18 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x55a3bb4f7da8 <line:423:22>
| `-NonNullAttr 0x55a3bb4f8e30 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4f8fb8 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb4f8e78 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4f8ef8 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x55a3bb4f9068 <line:426:22>
| `-NonNullAttr 0x55a3bb4f90c0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4f9268 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb4f9108 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4f9188 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x55a3bb4f9318 <line:429:22>
| `-NonNullAttr 0x55a3bb4f9370 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4f94f8 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb4f93b8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4f9438 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x55a3bb4f95a8 <line:431:22>
| `-NonNullAttr 0x55a3bb4f9600 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4f9828 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x55a3bb4f9648 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4f96c8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x55a3bb4f98d8 <line:434:22>
| |-NonNullAttr 0x55a3bb4f9930 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x55a3bb4f9968 <col:100> "" ""
|-FunctionDecl 0x55a3bb4f9b78 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x55a3bb4f99b8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4f9a38 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x55a3bb4f9c28 <line:437:22>
| |-NonNullAttr 0x55a3bb4f9c80 <col:63, col:77> 1
| `-DeprecatedAttr 0x55a3bb4f9cb8 <col:97> "" ""
|-FunctionDecl 0x55a3bb4f9eb8 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55a3bb4f9d08 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4f9d80 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55a3bb4f9f68 <line:440:22>
| `-NonNullAttr 0x55a3bb4f9fc0 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4fa140 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55a3bb4fa008 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4fa080 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55a3bb4fa1f0 <line:443:22>
| `-NonNullAttr 0x55a3bb4fa248 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4fa538 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55a3bb4fa298 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55a3bb4fa318 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x55a3bb4fa390 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55a3bb4fa5f0 <line:447:22>
| `-NonNullAttr 0x55a3bb4fa648 <col:63, col:83> 1 2 3
|-FunctionDecl 0x55a3bb4fa8f8 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x55a3bb4fa6a0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55a3bb4fa720 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x55a3bb4fa798 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55a3bb4fa9b0 <col:43>
| `-NonNullAttr 0x55a3bb4faa08 <col:84, col:98> 1
|-FunctionDecl 0x55a3bb4facc8 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55a3bb4faa58 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55a3bb4faad8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x55a3bb4fab68 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x55a3bb4fad80 <line:452:22>
| `-NonNullAttr 0x55a3bb4fadd8 <col:63, col:77> 3
|-FunctionDecl 0x55a3bb4fb0e8 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55a3bb4fae50 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55a3bb4faed0 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x55a3bb4faf60 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55a3bb4fb1a0 <line:456:22>
| `-NonNullAttr 0x55a3bb4fb1f8 <col:63, col:80> 2 3
|-FunctionDecl 0x55a3bb4fb3e8 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x55a3bb4fb248 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55a3bb4fb2c8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x55a3bb4fb498 <line:458:22>
|-FunctionDecl 0x55a3bb4fb868 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x55a3bb4fb560 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x55a3bb4fb700 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x55a3bb4fb918 <col:52, col:69> 1 2
|-FunctionDecl 0x55a3bb4fbac0 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x55a3bb4fb9a0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x55a3bb4fba20 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x55a3bb4fbca8 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x55a3bb4fbb88 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x55a3bb4fbc08 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x55a3bb4fbe60 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x55a3bb4fbd68 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x55a3bb4fbfa0 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x55a3bb4fc040 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x55a3bb4fc0e8 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x55a3bb4fc1d8 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x55a3bb4fc240 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x55a3bb4fc410 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at pthread-wmm/mix023_tso.opt_false-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x55a3bb4fc508 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x55a3bb4fc5c0 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x55a3bb4fc560 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x55a3bb4fc0c0 '__pthread_unwind_buf_t'
| |   `-Record 0x55a3bb4fc040 ''
| `-AlignedAttr 0x55a3bb4fc618 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x55a3bb4fc690 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x55a3bb4fc7f0 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x55a3bb4fc858 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x55a3bb4fc8c0 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x55a3bb4fc928 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x55a3bb4fcb30 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55a3bb4fca20 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55a3bb4fcc78 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55a3bb4fcbe8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55a3bb4fce70 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55a3bb4fcd30 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x55a3bb4fcf18 <line:487:22>
|-RecordDecl 0x55a3bb4fcf70 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x55a3bb4fd288 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x55a3bb4fd0e8 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x55a3bb4fd168 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x55a3bb4fd338 <col:86>
| `-ReturnsTwiceAttr 0x55a3bb4fd390 <col:12> Implicit
|-FunctionDecl 0x55a3bb4fd6b8 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55a3bb4fd460 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x55a3bb4fd570 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x55a3bb4fd768 <line:493:22>
| `-NonNullAttr 0x55a3bb4fd7c0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4fd938 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55a3bb4fd808 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55a3bb4fd9e0 <line:495:22>
| `-NonNullAttr 0x55a3bb4fda38 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4fdb40 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55a3bb4fda88 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55a3bb4fdbe8 <line:497:22>
| `-NonNullAttr 0x55a3bb4fdc40 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb4fdd40 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55a3bb4fdc88 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55a3bb4fdde8 <line:499:22>
| `-NonNullAttr 0x55a3bb4fde40 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb4fe088 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55a3bb4fde98 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55a3bb4fdf28 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55a3bb4fe138 <col:36>
| `-NonNullAttr 0x55a3bb4fe190 <col:66, col:83> 1 2
|-FunctionDecl 0x55a3bb4fe290 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55a3bb4fe1d8 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55a3bb4fe338 <line:504:22>
| `-NonNullAttr 0x55a3bb4fe390 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb4fe628 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb4fe440 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55a3bb4fe4c0 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55a3bb4fe6d8 <line:508:22>
| `-NonNullAttr 0x55a3bb4fe730 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4fe9f8 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb4fe778 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55a3bb4fe7f8 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x55a3bb4fe878 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x55a3bb4feab0 <line:512:22>
| `-NonNullAttr 0x55a3bb4feb08 <col:63, col:80> 1 3
|-FunctionDecl 0x55a3bb4fec10 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55a3bb4feb58 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55a3bb4fecb8 <line:514:22>
| `-NonNullAttr 0x55a3bb4fed10 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4fef38 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55a3bb4fedc0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55a3bb4fefe0 <line:516:22>
| `-NonNullAttr 0x55a3bb4ff038 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4ff140 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55a3bb4ff088 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55a3bb4ff1e8 <line:518:22>
| `-NonNullAttr 0x55a3bb4ff240 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4ff468 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb4ff288 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55a3bb4ff308 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x55a3bb4ff518 <line:522:22>
| `-NonNullAttr 0x55a3bb4ff570 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4ff778 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb4ff5b8 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55a3bb4ff638 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x55a3bb4ff828 <line:525:22>
| `-NonNullAttr 0x55a3bb4ff880 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb4ffa28 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb4ff8c8 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55a3bb4ff948 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x55a3bb4ffad8 <line:528:22>
| `-NonNullAttr 0x55a3bb4ffb30 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb4ffcb8 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb4ffb78 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55a3bb4ffbf8 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x55a3bb4ffd68 <line:530:22>
| `-NonNullAttr 0x55a3bb4ffdc0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb500f90 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb4ffe08 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55a3bb500eb0 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x55a3bb501040 <line:534:22>
| `-NonNullAttr 0x55a3bb501098 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb501228 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb5010e8 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55a3bb501168 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x55a3bb5012d8 <line:537:22>
| `-NonNullAttr 0x55a3bb501330 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb5014d8 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb501378 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55a3bb5013f8 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55a3bb501588 <line:541:22>
| `-NonNullAttr 0x55a3bb5015e0 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb501768 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb501628 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55a3bb5016a8 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x55a3bb501818 <line:544:22>
| `-NonNullAttr 0x55a3bb501870 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb501a58 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x55a3bb5018b8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x55a3bb501938 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x55a3bb501b08 <line:547:22>
| `-NonNullAttr 0x55a3bb501b60 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb501ce8 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb501ba8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55a3bb501c28 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x55a3bb501d98 <line:550:22>
| `-NonNullAttr 0x55a3bb501df0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb503168 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x55a3bb502f10 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55a3bb503020 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x55a3bb503218 <col:29>
| `-NonNullAttr 0x55a3bb503270 <col:70, col:84> 1
|-FunctionDecl 0x55a3bb5033e8 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55a3bb5032b8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55a3bb503490 <line:555:22>
| `-NonNullAttr 0x55a3bb5034e8 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb5035f0 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55a3bb503538 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55a3bb503698 <line:557:22>
| `-NonNullAttr 0x55a3bb5036f0 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb5037f0 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55a3bb503738 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55a3bb503898 <line:559:19>
| `-NonNullAttr 0x55a3bb5038f0 <col:49, col:63> 1
|-FunctionDecl 0x55a3bb503b28 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55a3bb503938 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55a3bb5039c8 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55a3bb503bd8 <col:39>
| `-NonNullAttr 0x55a3bb503c30 <col:69, col:86> 1 2
|-FunctionDecl 0x55a3bb503d30 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55a3bb503c78 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55a3bb503dd8 <line:564:22>
| `-NonNullAttr 0x55a3bb503e30 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb503f98 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55a3bb503ee0 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55a3bb504040 <line:566:22>
| `-NonNullAttr 0x55a3bb504098 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb504258 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55a3bb5040e8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55a3bb504178 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55a3bb504308 <col:39>
| `-NonNullAttr 0x55a3bb504360 <col:69, col:86> 1 2
|-FunctionDecl 0x55a3bb504460 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55a3bb5043a8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55a3bb504508 <line:571:22>
| `-NonNullAttr 0x55a3bb504560 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb504748 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55a3bb504610 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55a3bb5047f0 <line:573:22>
| `-NonNullAttr 0x55a3bb504848 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb504950 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55a3bb504898 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55a3bb5049f8 <line:575:22>
| `-NonNullAttr 0x55a3bb504a50 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb504c78 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb504a98 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55a3bb504b18 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x55a3bb504d28 <line:579:22>
| `-NonNullAttr 0x55a3bb504d80 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb504fa8 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb504dc8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55a3bb504e48 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x55a3bb505058 <line:582:22>
| `-NonNullAttr 0x55a3bb5050b0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb505258 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb5050f8 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55a3bb505178 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x55a3bb505308 <line:586:22>
| `-NonNullAttr 0x55a3bb505360 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb5054e8 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb5053a8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55a3bb505428 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x55a3bb505598 <col:36>
| `-NonNullAttr 0x55a3bb5055f0 <col:77, col:91> 1
|-FunctionDecl 0x55a3bb505928 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x55a3bb5056d0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55a3bb5057e0 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x55a3bb5059d8 <line:591:22>
| `-NonNullAttr 0x55a3bb505a30 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb505ba8 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55a3bb505a78 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55a3bb505c50 <line:593:22>
| `-NonNullAttr 0x55a3bb505ca8 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb505db0 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55a3bb505cf8 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55a3bb505e58 <line:595:22>
| `-NonNullAttr 0x55a3bb505eb0 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb505fc8 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55a3bb505f10 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55a3bb506070 <line:597:22>
| `-NonNullAttr 0x55a3bb5060c8 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb5062f8 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x55a3bb506118 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55a3bb506190 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x55a3bb5063a8 <line:600:22, col:39> 1 2
|-FunctionDecl 0x55a3bb5066d8 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55a3bb506428 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55a3bb5064a0 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55a3bb506530 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x55a3bb506790 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x55a3bb5069a8 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55a3bb506870 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55a3bb506a50 <line:606:22>
| `-NonNullAttr 0x55a3bb506aa8 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb506bb0 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55a3bb506af8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55a3bb506c58 <line:608:22>
| `-NonNullAttr 0x55a3bb506cb0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb506f10 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb506cf8 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55a3bb506d78 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x55a3bb506fc0 <line:612:22>
| `-NonNullAttr 0x55a3bb507018 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb507228 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb507068 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55a3bb5070e8 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x55a3bb5072d8 <col:37>
| `-NonNullAttr 0x55a3bb507330 <col:78, col:92> 1
|-FunctionDecl 0x55a3bb507548 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x55a3bb507378 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55a3bb507420 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x55a3bb5075f8 <line:618:22>
| `-NonNullAttr 0x55a3bb507650 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb507818 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x55a3bb507698 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55a3bb507710 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x55a3bb5078c8 <line:621:22>
| `-NonNullAttr 0x55a3bb507920 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb507bc8 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x55a3bb507a00 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x55a3bb507a80 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x55a3bb507c78 <line:623:22>
| `-NonNullAttr 0x55a3bb507cd0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb507e48 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55a3bb507d18 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55a3bb507f20 <line:625:22>
| `-NonNullAttr 0x55a3bb507f78 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb508080 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55a3bb507fc8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55a3bb508128 <line:627:22>
| `-NonNullAttr 0x55a3bb508180 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb508280 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55a3bb5081c8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55a3bb508328 <line:629:22>
| `-NonNullAttr 0x55a3bb508380 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb508480 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55a3bb5083c8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55a3bb508528 <line:631:22>
| `-NonNullAttr 0x55a3bb508580 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb508958 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x55a3bb508660 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x55a3bb508770 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55a3bb5087f0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x55a3bb508a10 <line:635:22>
| `-NonNullAttr 0x55a3bb508a68 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb508be8 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55a3bb508ab8 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55a3bb508c90 <line:637:22>
| `-NonNullAttr 0x55a3bb508ce8 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb508df0 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55a3bb508d38 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55a3bb508e98 <line:639:22>
| `-NonNullAttr 0x55a3bb508ef0 <col:52, col:66> 1
|-FunctionDecl 0x55a3bb5090e8 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55a3bb508fb0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55a3bb509190 <line:641:22>
| `-NonNullAttr 0x55a3bb5091e8 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb5092f0 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55a3bb509238 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55a3bb509398 <line:643:22>
| `-NonNullAttr 0x55a3bb5093f0 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb509618 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55a3bb509438 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55a3bb5094b8 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x55a3bb5096c8 <line:647:22>
| `-NonNullAttr 0x55a3bb509720 <col:63, col:80> 1 2
|-FunctionDecl 0x55a3bb509928 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x55a3bb509768 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x55a3bb5097e8 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x55a3bb5099d8 <line:650:22>
| `-NonNullAttr 0x55a3bb509a30 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb509d78 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x55a3bb509b10 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x55a3bb509c30 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x55a3bb509e28 <line:653:22>
| `-NonNullAttr 0x55a3bb509e80 <col:63, col:77> 1
|-FunctionDecl 0x55a3bb509fe8 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x55a3bb509ec8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55a3bb50a090 <col:69>
|-FunctionDecl 0x55a3bb50a208 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x55a3bb50a0f8 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55a3bb50a2b0 <col:72>
|-FunctionDecl 0x55a3bb50a4e8 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x55a3bb50a318 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x55a3bb50a3c8 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x55a3bb50a598 <col:44>
|-FunctionDecl 0x55a3bb50a7b8 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x55a3bb50a600 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55a3bb50a678 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x55a3bb50a868 <line:660:22>
| `-NonNullAttr 0x55a3bb50a8c0 <col:63, col:77> 2
|-FunctionDecl 0x55a3bb50ad08 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x55a3bb50a9a0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x55a3bb50aab0 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x55a3bb50abc0 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x55a3bb50adc0 <col:47>
|-FunctionDecl 0x55a3bb50bf60 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x55a3bb50ae30 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55a3bb50c0b8 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x55a3bb50c020 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55a3bb50c210 <line:667:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x55a3bb50c178 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55a3bb50c368 <line:668:1, col:20> col:8 used P3 'void *(void *)'
| `-ParmVarDecl 0x55a3bb50c2d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55a3bb50c430 <line:669:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x55a3bb50c4f0 <line:670:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x55a3bb50c5b0 <line:671:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x55a3bb50c668 <line:672:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x55a3bb50c6e8 prev 0x55a3bb50c668 <line:673:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x55a3bb50c750 <col:24> 'int' 0
|-VarDecl 0x55a3bb50c788 <line:674:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x55a3bb50c808 prev 0x55a3bb50c788 <line:675:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x55a3bb50c870 <col:27> 'int' 0
|-VarDecl 0x55a3bb50c8a8 <line:676:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x55a3bb50c928 prev 0x55a3bb50c8a8 <line:677:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x55a3bb50c990 <col:27> 'int' 0
|-VarDecl 0x55a3bb50c9c8 <line:678:1, col:5> col:5 used __unbuffered_p3_EAX 'int'
|-VarDecl 0x55a3bb50ca48 prev 0x55a3bb50c9c8 <line:679:1, col:27> col:5 used __unbuffered_p3_EAX 'int' cinit
| `-IntegerLiteral 0x55a3bb50cab0 <col:27> 'int' 0
|-VarDecl 0x55a3bb50cae8 <line:680:1, col:5> col:5 used __unbuffered_p3_EBX 'int'
|-VarDecl 0x55a3bb50cb68 prev 0x55a3bb50cae8 <line:681:1, col:27> col:5 used __unbuffered_p3_EBX 'int' cinit
| `-IntegerLiteral 0x55a3bb50cbd0 <col:27> 'int' 0
|-VarDecl 0x55a3bb50cc08 <line:682:1, col:5> col:5 used a 'int'
|-VarDecl 0x55a3bb50cc88 prev 0x55a3bb50cc08 <line:683:1, col:9> col:5 used a 'int' cinit
| `-IntegerLiteral 0x55a3bb50ccf0 <col:9> 'int' 0
|-VarDecl 0x55a3bb50cd20 <line:684:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x55a3bb50cd98 <line:685:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x55a3bb50ce18 <line:686:1, col:5> col:5 used x 'int'
|-VarDecl 0x55a3bb50ce98 prev 0x55a3bb50ce18 <line:687:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x55a3bb50cf00 <col:9> 'int' 0
|-VarDecl 0x55a3bb50cf70 <line:688:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x55a3bb50cff0 <line:689:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x55a3bb50d068 <line:690:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x55a3bb50d0e0 <line:691:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x55a3bb50d158 <line:692:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x55a3bb50d1d0 <line:693:1, col:7> col:7 used x$r_buff0_thd3 '_Bool'
|-VarDecl 0x55a3bb50d248 <line:694:1, col:7> col:7 used x$r_buff0_thd4 '_Bool'
|-VarDecl 0x55a3bb50d2c0 <line:695:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x55a3bb50d338 <line:696:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x55a3bb50d3b0 <line:697:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x55a3bb50d428 <line:698:1, col:7> col:7 used x$r_buff1_thd3 '_Bool'
|-VarDecl 0x55a3bb50d4a0 <line:699:1, col:7> col:7 used x$r_buff1_thd4 '_Bool'
|-VarDecl 0x55a3bb50d518 <line:700:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x55a3bb50d598 <line:701:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x55a3bb50d618 <line:702:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x55a3bb50d690 <line:703:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x55a3bb50d710 <line:704:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x55a3bb50d788 <line:705:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x55a3bb50d808 <line:706:1, col:5> col:5 used y 'int'
|-VarDecl 0x55a3bb50d888 prev 0x55a3bb50d808 <line:707:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x55a3bb50d8f0 <col:9> 'int' 0
|-VarDecl 0x55a3bb50d928 <line:708:1, col:5> col:5 used z 'int'
|-VarDecl 0x55a3bb50d9a8 prev 0x55a3bb50d928 <line:709:1, col:9> col:5 used z 'int' cinit
| `-IntegerLiteral 0x55a3bb50da10 <col:9> 'int' 0
|-VarDecl 0x55a3bb50da40 <line:710:1, col:7> col:7 used z$flush_delayed '_Bool'
|-VarDecl 0x55a3bb50dac0 <line:711:1, col:5> col:5 used z$mem_tmp 'int'
|-VarDecl 0x55a3bb50db38 <line:712:1, col:7> col:7 used z$r_buff0_thd0 '_Bool'
|-VarDecl 0x55a3bb50dbb0 <line:713:1, col:7> col:7 used z$r_buff0_thd1 '_Bool'
|-VarDecl 0x55a3bb50dc28 <line:714:1, col:7> col:7 used z$r_buff0_thd2 '_Bool'
|-VarDecl 0x55a3bb50dca0 <line:715:1, col:7> col:7 used z$r_buff0_thd3 '_Bool'
|-VarDecl 0x55a3bb50dd18 <line:716:1, col:7> col:7 used z$r_buff0_thd4 '_Bool'
|-VarDecl 0x55a3bb50dd90 <line:717:1, col:7> col:7 used z$r_buff1_thd0 '_Bool'
|-VarDecl 0x55a3bb50de08 <line:718:1, col:7> col:7 used z$r_buff1_thd1 '_Bool'
|-VarDecl 0x55a3bb50de80 <line:719:1, col:7> col:7 used z$r_buff1_thd2 '_Bool'
|-VarDecl 0x55a3bb50def8 <line:720:1, col:7> col:7 used z$r_buff1_thd3 '_Bool'
|-VarDecl 0x55a3bb50df80 <line:721:1, col:7> col:7 used z$r_buff1_thd4 '_Bool'
|-VarDecl 0x55a3bb50dff8 <line:722:1, col:7> col:7 z$read_delayed '_Bool'
|-VarDecl 0x55a3bb50e078 <line:723:1, col:6> col:6 z$read_delayed_var 'int *'
|-VarDecl 0x55a3bb50e0f8 <line:724:1, col:5> col:5 used z$w_buff0 'int'
|-VarDecl 0x55a3bb50e170 <line:725:1, col:7> col:7 used z$w_buff0_used '_Bool'
|-VarDecl 0x55a3bb50e1f0 <line:726:1, col:5> col:5 used z$w_buff1 'int'
|-VarDecl 0x55a3bb50e268 <line:727:1, col:7> col:7 used z$w_buff1_used '_Bool'
|-VarDecl 0x55a3bb50e2e0 <line:728:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x55a3bb50e358 <line:729:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x55a3bb50e470 prev 0x55a3bb50bf60 <line:730:1, line:749:1> line:730:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x55a3bb50e3d8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55a3bb50f6f8 <line:731:1, line:749:1>
|   |-CallExpr 0x55a3bb50e588 <line:732:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50e570 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50e518 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb50e5e8 <line:733:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55a3bb50e5a8 <col:3> 'int' lvalue Var 0x55a3bb50cc88 'a' 'int'
|   | `-IntegerLiteral 0x55a3bb50e5c8 <col:7> 'int' 1
|   |-CallExpr 0x55a3bb50e640 <line:734:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50e628 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50e608 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb50e698 <line:735:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50e680 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50e660 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb50e6f8 <line:736:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55a3bb50e6b8 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   | `-IntegerLiteral 0x55a3bb50e6d8 <col:7> 'int' 1
|   |-CallExpr 0x55a3bb50e750 <line:737:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50e738 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50e718 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb50e7a8 <line:738:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50e790 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50e770 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb50ea90 <line:739:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55a3bb50e7c8 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   | `-ConditionalOperator 0x55a3bb50ea60 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55a3bb50e888 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55a3bb50e840 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55a3bb50e828 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55a3bb50e7e8 <col:7> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55a3bb50e870 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55a3bb50e858 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55a3bb50e808 <col:25> '_Bool' lvalue Var 0x55a3bb50d0e0 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb50ea48 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb50e8a8 <col:42> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55a3bb50ea28 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55a3bb50e9f8 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55a3bb50e968 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55a3bb50e920 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55a3bb50e908 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55a3bb50e8c8 <col:55> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55a3bb50e950 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55a3bb50e938 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55a3bb50e8e8 <col:73> '_Bool' lvalue Var 0x55a3bb50d338 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb50e9c8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb50e988 <col:90> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55a3bb50e9e0 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb50e9a8 <col:102> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   |-BinaryOperator 0x55a3bb50ec98 <line:740:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50eab0 <col:3> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50ec80 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb50ec50 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb50eb70 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb50eb28 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb50eb10 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb50ead0 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb50eb58 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb50eb40 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb50eaf0 <col:38> '_Bool' lvalue Var 0x55a3bb50d0e0 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb50ec08 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb50ebc0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb50eb90 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb50ec38 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb50ec20 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb50ebe8 <col:66> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb50ef90 <line:741:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50ecb8 <col:3> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50ef68 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb50ef38 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb50ee58 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb50ed78 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb50ed30 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb50ed18 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb50ecd8 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb50ed60 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb50ed48 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb50ecf8 <col:38> '_Bool' lvalue Var 0x55a3bb50d0e0 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb50ee38 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb50edf0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb50edd8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb50ed98 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb50ee20 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb50ee08 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb50edb8 <col:74> '_Bool' lvalue Var 0x55a3bb50d338 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb50eef0 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb50eea8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb50ee78 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb50ef20 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb50ef08 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb50eed0 <col:102> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55a3bb50f198 <line:742:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50efb0 <col:3> '_Bool' lvalue Var 0x55a3bb50d0e0 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50f180 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb50f150 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb50f070 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb50f028 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb50f010 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb50efd0 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb50f058 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb50f040 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb50eff0 <col:38> '_Bool' lvalue Var 0x55a3bb50d0e0 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb50f108 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb50f0c0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb50f090 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb50f138 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb50f120 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb50f0e8 <col:66> '_Bool' lvalue Var 0x55a3bb50d0e0 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55a3bb50f480 <line:743:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50f1b8 <col:3> '_Bool' lvalue Var 0x55a3bb50d338 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50f468 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb50f438 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb50f358 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb50f278 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb50f230 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb50f218 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb50f1d8 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb50f260 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb50f248 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb50f1f8 <col:38> '_Bool' lvalue Var 0x55a3bb50d0e0 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb50f338 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb50f2f0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb50f2d8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb50f298 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb50f320 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb50f308 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb50f2b8 <col:74> '_Bool' lvalue Var 0x55a3bb50d338 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb50f3f0 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb50f3a8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb50f378 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb50f420 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb50f408 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb50f3d0 <col:102> '_Bool' lvalue Var 0x55a3bb50d338 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x55a3bb50f4d8 <line:744:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50f4c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50f4a0 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb50f530 <line:745:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50f518 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50f4f8 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb50f5e8 <line:746:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55a3bb50f550 <col:3> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55a3bb50f5c8 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55a3bb50f5b0 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb50f570 <col:22> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55a3bb50f590 <col:41> 'int' 1
|   |-CallExpr 0x55a3bb50f640 <line:747:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50f628 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50f608 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55a3bb50f6e8 <line:748:3, col:36>
|     `-CallExpr 0x55a3bb50f6c8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55a3bb50f6b0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55a3bb50f660 <col:10> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55a3bb50f840 prev 0x55a3bb50c0b8 <line:750:1, line:795:1> line:750:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x55a3bb50f7a8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55a3bb513b48 <line:751:1, line:795:1>
|   |-CallExpr 0x55a3bb50f920 <line:752:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50f908 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50f8e8 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb50f998 <line:753:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55a3bb50f940 <col:3> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x55a3bb50f980 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb50f960 <col:15> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55a3bb50f9f8 <line:754:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55a3bb50f9b8 <col:3> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x55a3bb50f9d8 <col:15> 'int' 2
|   |-BinaryOperator 0x55a3bb50fa70 <line:755:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50fa18 <col:3> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50fa58 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb50fa38 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb50fb08 <line:756:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50fa90 <col:3> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x55a3bb50fae0 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55a3bb50fab0 <col:27> 'int' 1
|   |-CallExpr 0x55a3bb50fc88 <line:757:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x55a3bb50fc70 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55a3bb50fb28 <col:3> 'void (int)' Function 0x55a3bb4b30d8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x55a3bb50fc28 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x55a3bb50fc08 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x55a3bb50fbe8 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x55a3bb50fba0 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x55a3bb50fb88 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55a3bb50fb48 <col:23> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x55a3bb50fbd0 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x55a3bb50fbb8 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x55a3bb50fb68 <col:41> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb50fd08 <line:758:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50fcb0 <col:3> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50fcf0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb50fcd0 <col:20> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x55a3bb50fd80 <line:759:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50fd28 <col:3> '_Bool' lvalue Var 0x55a3bb50d338 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50fd68 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb50fd48 <col:20> '_Bool' lvalue Var 0x55a3bb50d0e0 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55a3bb50fdf8 <line:760:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50fda0 <col:3> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50fde0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb50fdc0 <col:20> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55a3bb50fe70 <line:761:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50fe18 <col:3> '_Bool' lvalue Var 0x55a3bb50d428 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50fe58 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb50fe38 <col:20> '_Bool' lvalue Var 0x55a3bb50d1d0 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55a3bb50fee8 <line:762:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50fe90 <col:3> '_Bool' lvalue Var 0x55a3bb50d4a0 'x$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb50fed0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb50feb0 <col:20> '_Bool' lvalue Var 0x55a3bb50d248 'x$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x55a3bb50ffa0 <line:763:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb50ff08 <col:3> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x55a3bb50ff58 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55a3bb50ff28 <col:27> 'int' 1
|   |-CallExpr 0x55a3bb50fff8 <line:764:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb50ffe0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb50ffc0 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb510050 <line:765:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb510038 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb510018 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb510100 <line:766:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb510070 <col:3> '_Bool' lvalue Var 0x55a3bb50e2e0 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5100e8 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x55a3bb5100c8 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x55a3bb5100b0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x55a3bb510090 <col:19> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x55a3bb5101b0 <line:767:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb510120 <col:3> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb510198 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x55a3bb510178 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x55a3bb510160 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x55a3bb510140 <col:19> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x55a3bb510228 <line:768:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb5101d0 <col:3> '_Bool' lvalue Var 0x55a3bb50cf70 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb510210 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb5101f0 <col:21> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55a3bb5102a0 <line:769:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55a3bb510248 <col:3> 'int' lvalue Var 0x55a3bb50cff0 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55a3bb510288 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb510268 <col:15> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   |-BinaryOperator 0x55a3bb5106d8 <line:770:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55a3bb5102c0 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   | `-ConditionalOperator 0x55a3bb5106a8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55a3bb5104d0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55a3bb5103f0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55a3bb510318 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55a3bb510300 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55a3bb5102e0 <col:8> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55a3bb5103d0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55a3bb510368 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55a3bb510350 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55a3bb510330 <col:27> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x55a3bb5103b8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55a3bb5103a0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55a3bb510380 <col:46> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55a3bb5104b0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55a3bb510448 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55a3bb510430 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55a3bb510410 <col:65> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x55a3bb510498 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55a3bb510480 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55a3bb510460 <col:84> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb510690 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb5104f0 <col:101> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   |   `-ParenExpr 0x55a3bb510670 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55a3bb510640 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55a3bb5105b0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55a3bb510568 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55a3bb510550 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55a3bb510510 <col:106> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55a3bb510598 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55a3bb510580 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55a3bb510530 <col:124> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb510610 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb5105d0 <col:141> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55a3bb510628 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb5105f0 <col:153> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55a3bb510be8 <line:771:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55a3bb5106f8 <col:3> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x55a3bb510bb8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55a3bb510b88 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55a3bb510b70 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55a3bb510718 <col:15> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb510ba0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb510738 <col:31> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55a3bb510b50 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55a3bb510b20 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55a3bb510948 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55a3bb510868 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55a3bb510790 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55a3bb510778 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55a3bb510758 <col:45> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55a3bb510848 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55a3bb5107e0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55a3bb5107c8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55a3bb5107a8 <col:64> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x55a3bb510830 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55a3bb510818 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55a3bb5107f8 <col:83> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55a3bb510928 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55a3bb5108c0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55a3bb5108a8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55a3bb510888 <col:102> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x55a3bb510910 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55a3bb5108f8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55a3bb5108d8 <col:121> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb510b08 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb510968 <col:138> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x55a3bb510ae8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55a3bb510ab8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55a3bb510a28 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55a3bb5109e0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55a3bb5109c8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55a3bb510988 <col:151> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55a3bb510a10 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55a3bb5109f8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55a3bb5109a8 <col:169> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x55a3bb510a88 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55a3bb510a48 <col:186> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55a3bb510aa0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55a3bb510a68 <col:198> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55a3bb511110 <line:772:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55a3bb510c08 <col:3> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x55a3bb5110e0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55a3bb5110b0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55a3bb511098 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55a3bb510c28 <col:15> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb5110c8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb510c48 <col:31> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x55a3bb511078 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55a3bb511048 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55a3bb510e58 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55a3bb510d78 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55a3bb510ca0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55a3bb510c88 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55a3bb510c68 <col:45> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55a3bb510d58 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55a3bb510cf0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55a3bb510cd8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55a3bb510cb8 <col:64> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x55a3bb510d40 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55a3bb510d28 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55a3bb510d08 <col:83> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55a3bb510e38 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55a3bb510dd0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55a3bb510db8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55a3bb510d98 <col:102> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x55a3bb510e20 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55a3bb510e08 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55a3bb510de8 <col:121> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb511030 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb510e78 <col:138> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x55a3bb511010 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55a3bb510fe0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55a3bb510f38 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55a3bb510ef0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55a3bb510ed8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55a3bb510e98 <col:151> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55a3bb510f20 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55a3bb510f08 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55a3bb510eb8 <col:169> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x55a3bb510fb0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55a3bb510f58 <col:186> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55a3bb510fc8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55a3bb510f78 <col:198> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55a3bb5116b8 <line:773:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb511130 <col:3> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5116a0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb511670 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55a3bb511628 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb511610 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb511150 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb511658 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb511640 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb511170 <col:36> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55a3bb5115f0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55a3bb5115c0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55a3bb511380 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55a3bb5112a0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55a3bb5111c8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55a3bb5111b0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55a3bb511190 <col:55> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55a3bb511280 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55a3bb511218 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55a3bb511200 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55a3bb5111e0 <col:74> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55a3bb511268 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55a3bb511250 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55a3bb511230 <col:93> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55a3bb511360 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55a3bb5112f8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55a3bb5112e0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55a3bb5112c0 <col:112> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55a3bb511348 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55a3bb511330 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55a3bb511310 <col:131> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55a3bb5115a8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55a3bb511590 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55a3bb5113a0 <col:148> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55a3bb511570 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55a3bb511540 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55a3bb511460 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55a3bb511418 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55a3bb511400 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55a3bb5113c0 <col:166> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55a3bb511448 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55a3bb511430 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55a3bb5113e0 <col:184> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55a3bb5114f8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55a3bb5114b0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55a3bb511480 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55a3bb511528 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55a3bb511510 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55a3bb5114d8 <col:212> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb511c80 <line:774:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb5116d8 <col:3> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb511c68 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb511c38 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55a3bb511bf0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb511bd8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb5116f8 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb511c20 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb511c08 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb511718 <col:36> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55a3bb511bb8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55a3bb511b88 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55a3bb511928 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55a3bb511848 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55a3bb511770 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55a3bb511758 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55a3bb511738 <col:55> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55a3bb511828 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55a3bb5117c0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55a3bb5117a8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55a3bb511788 <col:74> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55a3bb511810 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55a3bb5117f8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55a3bb5117d8 <col:93> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55a3bb511908 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55a3bb5118a0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55a3bb511888 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55a3bb511868 <col:112> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55a3bb5118f0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55a3bb5118d8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55a3bb5118b8 <col:131> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55a3bb511b70 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55a3bb511b58 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55a3bb511948 <col:148> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55a3bb511b38 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55a3bb511b08 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55a3bb511a08 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55a3bb5119c0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55a3bb5119a8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55a3bb511968 <col:166> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55a3bb5119f0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55a3bb5119d8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55a3bb511988 <col:184> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55a3bb511ad8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55a3bb511a58 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55a3bb511a28 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55a3bb511af0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55a3bb511ab0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55a3bb511a80 <col:219> 'int' 0
|   |-BinaryOperator 0x55a3bb512248 <line:775:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb511ca0 <col:3> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb512230 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb512200 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55a3bb5121b8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb5121a0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb511cc0 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5121e8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb5121d0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb511ce0 <col:36> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x55a3bb512180 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55a3bb512150 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55a3bb511ef0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55a3bb511e10 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55a3bb511d38 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55a3bb511d20 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55a3bb511d00 <col:55> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55a3bb511df0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55a3bb511d88 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55a3bb511d70 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55a3bb511d50 <col:74> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55a3bb511dd8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55a3bb511dc0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55a3bb511da0 <col:93> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55a3bb511ed0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55a3bb511e68 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55a3bb511e50 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55a3bb511e30 <col:112> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55a3bb511eb8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55a3bb511ea0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55a3bb511e80 <col:131> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55a3bb512138 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55a3bb512120 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55a3bb511f10 <col:148> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x55a3bb512100 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55a3bb5120d0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55a3bb511ff0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55a3bb511f88 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55a3bb511f70 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55a3bb511f30 <col:166> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55a3bb511fd8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55a3bb511fc0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55a3bb511f50 <col:184> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55a3bb512088 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55a3bb512040 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55a3bb512010 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55a3bb5120b8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55a3bb5120a0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55a3bb512068 <col:212> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55a3bb512810 <line:776:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb512268 <col:3> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5127f8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5127c8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55a3bb512780 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb512768 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb512288 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5127b0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb512798 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb5122a8 <col:36> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x55a3bb512748 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55a3bb512718 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55a3bb5124b8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55a3bb5123d8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55a3bb512300 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55a3bb5122e8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55a3bb5122c8 <col:55> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55a3bb5123b8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55a3bb512350 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55a3bb512338 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55a3bb512318 <col:74> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55a3bb5123a0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55a3bb512388 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55a3bb512368 <col:93> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55a3bb512498 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55a3bb512430 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55a3bb512418 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55a3bb5123f8 <col:112> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55a3bb512480 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55a3bb512468 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55a3bb512448 <col:131> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55a3bb512700 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55a3bb5126e8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55a3bb5124d8 <col:148> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x55a3bb5126c8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55a3bb512698 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55a3bb512598 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55a3bb512550 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55a3bb512538 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55a3bb5124f8 <col:166> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55a3bb512580 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55a3bb512568 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55a3bb512518 <col:184> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55a3bb512668 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55a3bb5125e8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55a3bb5125b8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55a3bb512680 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55a3bb512640 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55a3bb512610 <col:219> 'int' 0
|   |-BinaryOperator 0x55a3bb512888 <line:777:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55a3bb512830 <col:3> 'int' lvalue Var 0x55a3bb50c808 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x55a3bb512870 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb512850 <col:25> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   |-BinaryOperator 0x55a3bb5129b8 <line:778:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55a3bb5128a8 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   | `-ConditionalOperator 0x55a3bb512988 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55a3bb512940 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55a3bb512928 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55a3bb5128c8 <col:7> '_Bool' lvalue Var 0x55a3bb50cf70 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb512958 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb5128e8 <col:25> 'int' lvalue Var 0x55a3bb50cff0 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55a3bb512970 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55a3bb512908 <col:37> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   |-BinaryOperator 0x55a3bb512a50 <line:779:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb5129d8 <col:3> '_Bool' lvalue Var 0x55a3bb50cf70 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55a3bb512a28 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55a3bb5129f8 <col:28> 'int' 0
|   |-CallExpr 0x55a3bb512aa8 <line:780:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb512a90 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb512a70 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb512b00 <line:781:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb512ae8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb512ac8 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb512b78 <line:782:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55a3bb512b20 <col:3> 'int' lvalue Var 0x55a3bb50c928 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x55a3bb512b60 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb512b40 <col:25> 'int' lvalue Var 0x55a3bb50d888 'y' 'int'
|   |-CallExpr 0x55a3bb512bd0 <line:783:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb512bb8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb512b98 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb512c28 <line:784:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb512c10 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb512bf0 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb512f10 <line:785:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55a3bb512c48 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   | `-ConditionalOperator 0x55a3bb512ee0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55a3bb512d08 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55a3bb512cc0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55a3bb512ca8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55a3bb512c68 <col:7> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55a3bb512cf0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55a3bb512cd8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55a3bb512c88 <col:25> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb512ec8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb512d28 <col:42> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55a3bb512ea8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55a3bb512e78 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55a3bb512de8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55a3bb512da0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55a3bb512d88 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55a3bb512d48 <col:55> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55a3bb512dd0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55a3bb512db8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55a3bb512d68 <col:73> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb512e48 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb512e08 <col:90> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55a3bb512e60 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb512e28 <col:102> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   |-BinaryOperator 0x55a3bb513128 <line:786:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb512f30 <col:3> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb513110 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5130e0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb513000 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb512fa8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb512f90 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb512f50 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb512fe8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb512fd0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb512f70 <col:38> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb513098 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb513050 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb513020 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5130c8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5130b0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb513078 <col:66> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb513410 <line:787:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb513148 <col:3> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5133f8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5133c8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb5132e8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb513208 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb5131c0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb5131a8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb513168 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb5131f0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb5131d8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb513188 <col:38> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb5132c8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb513280 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb513268 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb513228 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb5132b0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb513298 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb513248 <col:74> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb513380 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb513338 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb513308 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5133b0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb513398 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb513360 <col:102> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55a3bb513618 <line:788:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb513430 <col:3> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb513600 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5135d0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb5134f0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb5134a8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb513490 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb513450 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb5134d8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb5134c0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb513470 <col:38> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb513588 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb513540 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb513510 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5135b8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5135a0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb513568 <col:66> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55a3bb513900 <line:789:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb513638 <col:3> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5138e8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5138b8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb5137d8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb5136f8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb5136b0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb513698 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb513658 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb5136e0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb5136c8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb513678 <col:38> '_Bool' lvalue Var 0x55a3bb50d158 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb5137b8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb513770 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb513758 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb513718 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb5137a0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb513788 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb513738 <col:74> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb513870 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb513828 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb5137f8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5138a0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb513888 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb513850 <col:102> '_Bool' lvalue Var 0x55a3bb50d3b0 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x55a3bb513958 <line:790:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb513940 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb513920 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb5139b0 <line:791:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb513998 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb513978 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb513a68 <line:792:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55a3bb5139d0 <col:3> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55a3bb513a48 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55a3bb513a30 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb5139f0 <col:22> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55a3bb513a10 <col:41> 'int' 1
|   |-CallExpr 0x55a3bb513ac0 <line:793:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb513aa8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb513a88 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55a3bb513b38 <line:794:3, col:36>
|     `-CallExpr 0x55a3bb513b18 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55a3bb513b00 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55a3bb513ae0 <col:10> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55a3bb513d60 prev 0x55a3bb50c210 <line:796:1, line:820:1> line:796:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x55a3bb513cc8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55a3bb515c60 <line:797:1, line:820:1>
|   |-CallExpr 0x55a3bb513e40 <line:798:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb513e28 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb513e08 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb513ea0 <line:799:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55a3bb513e60 <col:3> 'int' lvalue Var 0x55a3bb50d888 'y' 'int'
|   | `-IntegerLiteral 0x55a3bb513e80 <col:7> 'int' 1
|   |-CallExpr 0x55a3bb513ef8 <line:800:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb513ee0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb513ec0 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb513f50 <line:801:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb513f38 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb513f18 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb513fb0 <line:802:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55a3bb513f70 <col:3> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   | `-IntegerLiteral 0x55a3bb513f90 <col:7> 'int' 1
|   |-CallExpr 0x55a3bb514018 <line:803:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb514000 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb513fe0 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb514070 <line:804:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb514058 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb514038 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb514358 <line:805:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55a3bb514090 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   | `-ConditionalOperator 0x55a3bb514328 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55a3bb514150 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55a3bb514108 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55a3bb5140f0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55a3bb5140b0 <col:7> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55a3bb514138 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55a3bb514120 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55a3bb5140d0 <col:25> '_Bool' lvalue Var 0x55a3bb50d1d0 'x$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb514310 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb514170 <col:42> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55a3bb5142f0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55a3bb5142c0 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55a3bb514230 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55a3bb5141e8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55a3bb5141d0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55a3bb514190 <col:55> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55a3bb514218 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55a3bb514200 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55a3bb5141b0 <col:73> '_Bool' lvalue Var 0x55a3bb50d428 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb514290 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb514250 <col:90> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55a3bb5142a8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb514270 <col:102> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   |-BinaryOperator 0x55a3bb514560 <line:806:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb514378 <col:3> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb514548 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb514518 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb514438 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb5143f0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb5143d8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb514398 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb514420 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb514408 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb5143b8 <col:38> '_Bool' lvalue Var 0x55a3bb50d1d0 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5144d0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb514488 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb514458 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb514500 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5144e8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb5144b0 <col:66> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb514848 <line:807:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb514580 <col:3> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb514830 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb514800 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb514720 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb514640 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb5145f8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb5145e0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb5145a0 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb514628 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb514610 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb5145c0 <col:38> '_Bool' lvalue Var 0x55a3bb50d1d0 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb514700 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb5146b8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb5146a0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb514660 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb5146e8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb5146d0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb514680 <col:74> '_Bool' lvalue Var 0x55a3bb50d428 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5147b8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb514770 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb514740 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5147e8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5147d0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb514798 <col:102> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55a3bb514a50 <line:808:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb514868 <col:3> '_Bool' lvalue Var 0x55a3bb50d1d0 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb514a38 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb514a08 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb514928 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb5148e0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb5148c8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb514888 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb514910 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb5148f8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb5148a8 <col:38> '_Bool' lvalue Var 0x55a3bb50d1d0 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5149c0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb514978 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb514948 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5149f0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5149d8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb5149a0 <col:66> '_Bool' lvalue Var 0x55a3bb50d1d0 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55a3bb514d38 <line:809:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb514a70 <col:3> '_Bool' lvalue Var 0x55a3bb50d428 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb514d20 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb514cf0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb514c10 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb514b30 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb514ae8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb514ad0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb514a90 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb514b18 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb514b00 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb514ab0 <col:38> '_Bool' lvalue Var 0x55a3bb50d1d0 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb514bf0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb514ba8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb514b90 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb514b50 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb514bd8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb514bc0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb514b70 <col:74> '_Bool' lvalue Var 0x55a3bb50d428 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb514ca8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb514c60 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb514c30 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb514cd8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb514cc0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb514c88 <col:102> '_Bool' lvalue Var 0x55a3bb50d428 'x$r_buff1_thd3' '_Bool'
|   |-BinaryOperator 0x55a3bb515038 <line:810:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55a3bb514d58 <col:3> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   | `-ConditionalOperator 0x55a3bb515008 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55a3bb514e18 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55a3bb514dd0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55a3bb514db8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55a3bb514d78 <col:7> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55a3bb514e00 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55a3bb514de8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55a3bb514d98 <col:25> '_Bool' lvalue Var 0x55a3bb50dca0 'z$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb514ff0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb514e38 <col:42> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x55a3bb514fb8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55a3bb514f88 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55a3bb514ef8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55a3bb514eb0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55a3bb514e98 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55a3bb514e58 <col:55> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55a3bb514ee0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55a3bb514ec8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55a3bb514e78 <col:73> '_Bool' lvalue Var 0x55a3bb50def8 'z$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb514f58 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb514f18 <col:90> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55a3bb514f70 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb514f38 <col:102> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   |-BinaryOperator 0x55a3bb515240 <line:811:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb515058 <col:3> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb515228 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5151f8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb515118 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb5150d0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb5150b8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb515078 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb515100 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb5150e8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb515098 <col:38> '_Bool' lvalue Var 0x55a3bb50dca0 'z$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5151b0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb515168 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb515138 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5151e0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5151c8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb515190 <col:66> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb515528 <line:812:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb515260 <col:3> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb515510 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5154e0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb515400 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb515320 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb5152d8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb5152c0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb515280 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb515308 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb5152f0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb5152a0 <col:38> '_Bool' lvalue Var 0x55a3bb50dca0 'z$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb5153e0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb515398 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb515380 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb515340 <col:56> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb5153c8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb5153b0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb515360 <col:74> '_Bool' lvalue Var 0x55a3bb50def8 'z$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb515498 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb515450 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb515420 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5154c8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5154b0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb515478 <col:102> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55a3bb515730 <line:813:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb515548 <col:3> '_Bool' lvalue Var 0x55a3bb50dca0 'z$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb515718 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5156e8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb515608 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb5155c0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb5155a8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb515568 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb5155f0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb5155d8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb515588 <col:38> '_Bool' lvalue Var 0x55a3bb50dca0 'z$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5156a0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb515658 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb515628 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5156d0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5156b8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb515680 <col:66> '_Bool' lvalue Var 0x55a3bb50dca0 'z$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55a3bb515a18 <line:814:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb515750 <col:3> '_Bool' lvalue Var 0x55a3bb50def8 'z$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb515a00 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5159d0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb5158f0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb515810 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb5157c8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb5157b0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb515770 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb5157f8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb5157e0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb515790 <col:38> '_Bool' lvalue Var 0x55a3bb50dca0 'z$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb5158d0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb515888 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb515870 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb515830 <col:56> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb5158b8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb5158a0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb515850 <col:74> '_Bool' lvalue Var 0x55a3bb50def8 'z$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb515988 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb515940 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb515910 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb5159b8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5159a0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb515968 <col:102> '_Bool' lvalue Var 0x55a3bb50def8 'z$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x55a3bb515a70 <line:815:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb515a58 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb515a38 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb515ac8 <line:816:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb515ab0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb515a90 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb515b80 <line:817:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55a3bb515ae8 <col:3> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55a3bb515b60 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55a3bb515b48 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb515b08 <col:22> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55a3bb515b28 <col:41> 'int' 1
|   |-CallExpr 0x55a3bb515bd8 <line:818:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb515bc0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb515ba0 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55a3bb515c50 <line:819:3, col:36>
|     `-CallExpr 0x55a3bb515c30 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55a3bb515c18 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55a3bb515bf8 <col:10> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55a3bb515dd0 prev 0x55a3bb50c368 <line:821:1, line:871:1> line:821:8 used P3 'void *(void *)'
| |-ParmVarDecl 0x55a3bb515d38 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55a3bb51ad90 <line:822:1, line:871:1>
|   |-CallExpr 0x55a3bb515eb0 <line:823:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb515e98 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb515e78 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb515f28 <line:824:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55a3bb515ed0 <col:3> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x55a3bb515f10 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb515ef0 <col:15> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   |-BinaryOperator 0x55a3bb515f88 <line:825:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55a3bb515f48 <col:3> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   | `-IntegerLiteral 0x55a3bb515f68 <col:15> 'int' 2
|   |-BinaryOperator 0x55a3bb516018 <line:826:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb515fa8 <col:3> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb516000 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb515fc8 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb5160b0 <line:827:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb516038 <col:3> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x55a3bb516088 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55a3bb516058 <col:27> 'int' 1
|   |-CallExpr 0x55a3bb516200 <line:828:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x55a3bb5161e8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55a3bb5160d0 <col:3> 'void (int)' Function 0x55a3bb4b30d8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x55a3bb5161d0 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x55a3bb5161b0 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x55a3bb516190 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x55a3bb516148 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x55a3bb516130 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55a3bb5160f0 <col:23> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x55a3bb516178 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x55a3bb516160 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x55a3bb516110 <col:41> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb516280 <line:829:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb516228 <col:3> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb516268 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb516248 <col:20> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x55a3bb5162f8 <line:830:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb5162a0 <col:3> '_Bool' lvalue Var 0x55a3bb50de08 'z$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5162e0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb5162c0 <col:20> '_Bool' lvalue Var 0x55a3bb50dbb0 'z$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55a3bb516370 <line:831:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb516318 <col:3> '_Bool' lvalue Var 0x55a3bb50de80 'z$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb516358 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb516338 <col:20> '_Bool' lvalue Var 0x55a3bb50dc28 'z$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55a3bb5163e8 <line:832:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb516390 <col:3> '_Bool' lvalue Var 0x55a3bb50def8 'z$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5163d0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb5163b0 <col:20> '_Bool' lvalue Var 0x55a3bb50dca0 'z$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55a3bb516460 <line:833:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb516408 <col:3> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb516448 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb516428 <col:20> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x55a3bb5164f8 <line:834:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb516480 <col:3> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   | `-CStyleCastExpr 0x55a3bb5164d0 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55a3bb5164a0 <col:27> 'int' 1
|   |-CallExpr 0x55a3bb516550 <line:835:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb516538 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb516518 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb5165a8 <line:836:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb516590 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb516570 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb516658 <line:837:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb5165c8 <col:3> '_Bool' lvalue Var 0x55a3bb50e2e0 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb516640 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x55a3bb516620 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x55a3bb516608 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x55a3bb5165e8 <col:19> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x55a3bb516708 <line:838:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb516678 <col:3> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5166f0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x55a3bb5166d0 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x55a3bb5166b8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x55a3bb516698 <col:19> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x55a3bb516780 <line:839:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb516728 <col:3> '_Bool' lvalue Var 0x55a3bb50da40 'z$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb516768 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb516748 <col:21> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55a3bb5167f8 <line:840:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55a3bb5167a0 <col:3> 'int' lvalue Var 0x55a3bb50dac0 'z$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55a3bb5167e0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb5167c0 <col:15> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   |-BinaryOperator 0x55a3bb516c30 <line:841:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55a3bb516818 <col:3> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   | `-ConditionalOperator 0x55a3bb516c00 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55a3bb516a28 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55a3bb516948 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55a3bb516870 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55a3bb516858 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55a3bb516838 <col:8> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55a3bb516928 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55a3bb5168c0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55a3bb5168a8 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55a3bb516888 <col:27> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |   | |   `-UnaryOperator 0x55a3bb516910 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55a3bb5168f8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55a3bb5168d8 <col:46> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55a3bb516a08 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55a3bb5169a0 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55a3bb516988 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55a3bb516968 <col:65> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |   |   `-UnaryOperator 0x55a3bb5169f0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55a3bb5169d8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55a3bb5169b8 <col:84> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb516be8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb516a48 <col:101> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   |   `-ParenExpr 0x55a3bb516bc8 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55a3bb516b98 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55a3bb516b08 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55a3bb516ac0 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55a3bb516aa8 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55a3bb516a68 <col:106> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55a3bb516af0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55a3bb516ad8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55a3bb516a88 <col:124> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb516b68 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb516b28 <col:141> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55a3bb516b80 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb516b48 <col:153> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   |-BinaryOperator 0x55a3bb517158 <line:842:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55a3bb516c50 <col:3> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   | `-ConditionalOperator 0x55a3bb517128 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55a3bb5170f8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55a3bb5170e0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55a3bb516c70 <col:15> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb517110 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb516c90 <col:31> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x55a3bb5170c0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55a3bb517090 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55a3bb516ea0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55a3bb516dc0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55a3bb516ce8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55a3bb516cd0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55a3bb516cb0 <col:45> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55a3bb516da0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55a3bb516d38 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55a3bb516d20 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55a3bb516d00 <col:64> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |       | |   `-UnaryOperator 0x55a3bb516d88 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55a3bb516d70 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55a3bb516d50 <col:83> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55a3bb516e80 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55a3bb516e18 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55a3bb516e00 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55a3bb516de0 <col:102> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |       |   `-UnaryOperator 0x55a3bb516e68 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55a3bb516e50 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55a3bb516e30 <col:121> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb517078 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb516ec0 <col:138> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   |       `-ParenExpr 0x55a3bb517058 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55a3bb517028 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55a3bb516f80 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55a3bb516f38 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55a3bb516f20 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55a3bb516ee0 <col:151> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55a3bb516f68 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55a3bb516f50 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55a3bb516f00 <col:169> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |           |-ImplicitCastExpr 0x55a3bb516fe0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55a3bb516fa0 <col:186> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55a3bb517010 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55a3bb516fc0 <col:198> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   |-BinaryOperator 0x55a3bb517668 <line:843:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55a3bb517178 <col:3> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   | `-ConditionalOperator 0x55a3bb517638 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55a3bb517608 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55a3bb5175f0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55a3bb517198 <col:15> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb517620 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb5171b8 <col:31> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   |   `-ParenExpr 0x55a3bb5175d0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55a3bb5175a0 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55a3bb5173c8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55a3bb5172e8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55a3bb517210 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55a3bb5171f8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55a3bb5171d8 <col:45> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55a3bb5172c8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55a3bb517260 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55a3bb517248 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55a3bb517228 <col:64> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |       | |   `-UnaryOperator 0x55a3bb5172b0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55a3bb517298 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55a3bb517278 <col:83> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55a3bb5173a8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55a3bb517340 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55a3bb517328 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55a3bb517308 <col:102> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |       |   `-UnaryOperator 0x55a3bb517390 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55a3bb517378 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55a3bb517358 <col:121> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb517588 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb5173e8 <col:138> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   |       `-ParenExpr 0x55a3bb517568 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55a3bb517538 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55a3bb5174a8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55a3bb517460 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55a3bb517448 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55a3bb517408 <col:151> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55a3bb517490 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55a3bb517478 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55a3bb517428 <col:169> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |           |-ImplicitCastExpr 0x55a3bb517508 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55a3bb5174c8 <col:186> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55a3bb517520 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55a3bb5174e8 <col:198> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   |-BinaryOperator 0x55a3bb517c10 <line:844:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb517688 <col:3> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb517bf8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb517bc8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55a3bb517b80 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb517b68 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb5176a8 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb517bb0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb517b98 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb5176c8 <col:36> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55a3bb517b48 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55a3bb517b18 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55a3bb5178d8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55a3bb5177f8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55a3bb517720 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55a3bb517708 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55a3bb5176e8 <col:55> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55a3bb5177d8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55a3bb517770 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55a3bb517758 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55a3bb517738 <col:74> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x55a3bb5177c0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55a3bb5177a8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55a3bb517788 <col:93> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55a3bb5178b8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55a3bb517850 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55a3bb517838 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55a3bb517818 <col:112> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x55a3bb5178a0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55a3bb517888 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55a3bb517868 <col:131> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x55a3bb517b00 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55a3bb517ae8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55a3bb5178f8 <col:148> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55a3bb517ac8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55a3bb517a98 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55a3bb5179b8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55a3bb517970 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55a3bb517958 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55a3bb517918 <col:166> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55a3bb5179a0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55a3bb517988 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55a3bb517938 <col:184> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x55a3bb517a50 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55a3bb517a08 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55a3bb5179d8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55a3bb517a80 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55a3bb517a68 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55a3bb517a30 <col:212> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb5181f0 <line:845:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb517c30 <col:3> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb5181d8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb5181a8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55a3bb518160 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb518148 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb517c50 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb518190 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb518178 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb517c70 <col:36> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55a3bb518128 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55a3bb5180f8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55a3bb517e80 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55a3bb517da0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55a3bb517cc8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55a3bb517cb0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55a3bb517c90 <col:55> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55a3bb517d80 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55a3bb517d18 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55a3bb517d00 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55a3bb517ce0 <col:74> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x55a3bb517d68 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55a3bb517d50 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55a3bb517d30 <col:93> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55a3bb517e60 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55a3bb517df8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55a3bb517de0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55a3bb517dc0 <col:112> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x55a3bb517e48 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55a3bb517e30 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55a3bb517e10 <col:131> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x55a3bb5180e0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55a3bb5180c8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55a3bb517ea0 <col:148> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55a3bb5180a8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55a3bb518078 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55a3bb517f60 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55a3bb517f18 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55a3bb517f00 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55a3bb517ec0 <col:166> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55a3bb517f48 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55a3bb517f30 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55a3bb517ee0 <col:184> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x55a3bb518048 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55a3bb517fb0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55a3bb517f80 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55a3bb518060 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55a3bb518020 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55a3bb517fd8 <col:219> 'int' 0
|   |-BinaryOperator 0x55a3bb518798 <line:846:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb518210 <col:3> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb518780 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb518750 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55a3bb518708 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb5186f0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb518230 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb518738 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb518720 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb518250 <col:36> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |     `-ParenExpr 0x55a3bb5186d0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55a3bb5186a0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55a3bb518460 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55a3bb518380 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55a3bb5182a8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55a3bb518290 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55a3bb518270 <col:55> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55a3bb518360 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55a3bb5182f8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55a3bb5182e0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55a3bb5182c0 <col:74> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x55a3bb518348 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55a3bb518330 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55a3bb518310 <col:93> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55a3bb518440 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55a3bb5183d8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55a3bb5183c0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55a3bb5183a0 <col:112> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x55a3bb518428 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55a3bb518410 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55a3bb5183f0 <col:131> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x55a3bb518688 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55a3bb518670 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55a3bb518480 <col:148> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         `-ParenExpr 0x55a3bb518650 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55a3bb518620 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55a3bb518540 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55a3bb5184f8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55a3bb5184e0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55a3bb5184a0 <col:166> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55a3bb518528 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55a3bb518510 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55a3bb5184c0 <col:184> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x55a3bb5185d8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55a3bb518590 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55a3bb518560 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55a3bb518608 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55a3bb5185f0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55a3bb5185b8 <col:212> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x55a3bb518d60 <line:847:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb5187b8 <col:3> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb518d48 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb518d18 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55a3bb518cd0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb518cb8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb5187d8 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb518d00 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55a3bb518ce8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55a3bb5187f8 <col:36> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |     `-ParenExpr 0x55a3bb518c98 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55a3bb518c68 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55a3bb518a08 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55a3bb518928 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55a3bb518850 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55a3bb518838 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55a3bb518818 <col:55> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55a3bb518908 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55a3bb5188a0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55a3bb518888 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55a3bb518868 <col:74> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x55a3bb5188f0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55a3bb5188d8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55a3bb5188b8 <col:93> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55a3bb5189e8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55a3bb518980 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55a3bb518968 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55a3bb518948 <col:112> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x55a3bb5189d0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55a3bb5189b8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55a3bb518998 <col:131> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x55a3bb518c50 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55a3bb518c38 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55a3bb518a28 <col:148> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |         `-ParenExpr 0x55a3bb518c18 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55a3bb518be8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55a3bb518ae8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55a3bb518aa0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55a3bb518a88 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55a3bb518a48 <col:166> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55a3bb518ad0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55a3bb518ab8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55a3bb518a68 <col:184> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x55a3bb518bb8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55a3bb518b38 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55a3bb518b08 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55a3bb518bd0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55a3bb518b90 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55a3bb518b60 <col:219> 'int' 0
|   |-BinaryOperator 0x55a3bb518dd8 <line:848:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55a3bb518d80 <col:3> 'int' lvalue Var 0x55a3bb50ca48 '__unbuffered_p3_EAX' 'int'
|   | `-ImplicitCastExpr 0x55a3bb518dc0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb518da0 <col:25> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   |-BinaryOperator 0x55a3bb518f08 <line:849:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55a3bb518df8 <col:3> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   | `-ConditionalOperator 0x55a3bb518ed8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55a3bb518e90 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55a3bb518e78 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55a3bb518e18 <col:7> '_Bool' lvalue Var 0x55a3bb50da40 'z$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb518ea8 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb518e38 <col:25> 'int' lvalue Var 0x55a3bb50dac0 'z$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55a3bb518ec0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55a3bb518e58 <col:37> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   |-BinaryOperator 0x55a3bb518fa0 <line:850:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb518f28 <col:3> '_Bool' lvalue Var 0x55a3bb50da40 'z$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55a3bb518f78 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55a3bb518f48 <col:28> 'int' 0
|   |-CallExpr 0x55a3bb518ff8 <line:851:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb518fe0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb518fc0 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb519068 <line:852:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb519050 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb519030 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb5190e0 <line:853:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55a3bb519088 <col:3> 'int' lvalue Var 0x55a3bb50cb68 '__unbuffered_p3_EBX' 'int'
|   | `-ImplicitCastExpr 0x55a3bb5190c8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a3bb5190a8 <col:25> 'int' lvalue Var 0x55a3bb50cc88 'a' 'int'
|   |-CallExpr 0x55a3bb519138 <line:854:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb519120 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb519100 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb519190 <line:855:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb519178 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb519158 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb519478 <line:856:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55a3bb5191b0 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   | `-ConditionalOperator 0x55a3bb519448 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55a3bb519270 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55a3bb519228 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55a3bb519210 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55a3bb5191d0 <col:7> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55a3bb519258 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55a3bb519240 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55a3bb5191f0 <col:25> '_Bool' lvalue Var 0x55a3bb50d248 'x$r_buff0_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb519430 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb519290 <col:42> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55a3bb519410 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55a3bb5193e0 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55a3bb519350 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55a3bb519308 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55a3bb5192f0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55a3bb5192b0 <col:55> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55a3bb519338 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55a3bb519320 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55a3bb5192d0 <col:73> '_Bool' lvalue Var 0x55a3bb50d4a0 'x$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb5193b0 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb519370 <col:90> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55a3bb5193c8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb519390 <col:102> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
|   |-BinaryOperator 0x55a3bb519680 <line:857:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb519498 <col:3> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb519668 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb519638 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb519558 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb519510 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb5194f8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb5194b8 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb519540 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb519528 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb5194d8 <col:38> '_Bool' lvalue Var 0x55a3bb50d248 'x$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5195f0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb5195a8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb519578 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb519620 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb519608 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb5195d0 <col:66> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb519968 <line:858:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb5196a0 <col:3> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb519950 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb519920 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb519840 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb519760 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb519718 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb519700 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb5196c0 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb519748 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb519730 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb5196e0 <col:38> '_Bool' lvalue Var 0x55a3bb50d248 'x$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb519820 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb5197d8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb5197c0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb519780 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb519808 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb5197f0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb5197a0 <col:74> '_Bool' lvalue Var 0x55a3bb50d4a0 'x$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb5198d8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb519890 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb519860 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb519908 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb5198f0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb5198b8 <col:102> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55a3bb519b70 <line:859:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb519988 <col:3> '_Bool' lvalue Var 0x55a3bb50d248 'x$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb519b58 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb519b28 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb519a48 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb519a00 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb5199e8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb5199a8 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb519a30 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb519a18 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb5199c8 <col:38> '_Bool' lvalue Var 0x55a3bb50d248 'x$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb519ae0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb519a98 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb519a68 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb519b10 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb519af8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb519ac0 <col:66> '_Bool' lvalue Var 0x55a3bb50d248 'x$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x55a3bb519e58 <line:860:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb519b90 <col:3> '_Bool' lvalue Var 0x55a3bb50d4a0 'x$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb519e40 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb519e10 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb519d30 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb519c50 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb519c08 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb519bf0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb519bb0 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb519c38 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb519c20 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb519bd0 <col:38> '_Bool' lvalue Var 0x55a3bb50d248 'x$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb519d10 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb519cc8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb519cb0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb519c70 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb519cf8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb519ce0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb519c90 <col:74> '_Bool' lvalue Var 0x55a3bb50d4a0 'x$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb519dc8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb519d80 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb519d50 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb519df8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb519de0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb519da8 <col:102> '_Bool' lvalue Var 0x55a3bb50d4a0 'x$r_buff1_thd4' '_Bool'
|   |-BinaryOperator 0x55a3bb51a168 <line:861:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55a3bb519e78 <col:3> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   | `-ConditionalOperator 0x55a3bb51a138 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55a3bb519f38 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55a3bb519ef0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55a3bb519ed8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55a3bb519e98 <col:7> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55a3bb519f20 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55a3bb519f08 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55a3bb519eb8 <col:25> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x55a3bb51a120 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb519f58 <col:42> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x55a3bb51a100 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55a3bb51a0d0 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55a3bb51a040 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55a3bb519fd0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55a3bb519fb8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55a3bb519f78 <col:55> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55a3bb51a000 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55a3bb519fe8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55a3bb519f98 <col:73> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x55a3bb51a0a0 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55a3bb51a060 <col:90> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55a3bb51a0b8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb51a080 <col:102> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
|   |-BinaryOperator 0x55a3bb51a370 <line:862:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb51a188 <col:3> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb51a358 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb51a328 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb51a248 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb51a200 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb51a1e8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb51a1a8 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb51a230 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb51a218 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb51a1c8 <col:38> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb51a2e0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb51a298 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb51a268 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb51a310 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb51a2f8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb51a2c0 <col:66> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55a3bb51a658 <line:863:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb51a390 <col:3> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb51a640 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb51a610 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb51a530 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb51a450 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb51a408 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb51a3f0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb51a3b0 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb51a438 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb51a420 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb51a3d0 <col:38> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb51a510 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb51a4c8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb51a4b0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb51a470 <col:56> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb51a4f8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb51a4e0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb51a490 <col:74> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb51a5c8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb51a580 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb51a550 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb51a5f8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb51a5e0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb51a5a8 <col:102> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55a3bb51a860 <line:864:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb51a678 <col:3> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb51a848 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb51a818 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55a3bb51a738 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55a3bb51a6f0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55a3bb51a6d8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55a3bb51a698 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55a3bb51a720 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55a3bb51a708 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55a3bb51a6b8 <col:38> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb51a7d0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb51a788 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb51a758 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb51a800 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb51a7e8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb51a7b0 <col:66> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x55a3bb51ab48 <line:865:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55a3bb51a880 <col:3> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x55a3bb51ab30 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55a3bb51ab00 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55a3bb51aa20 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55a3bb51a940 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55a3bb51a8f8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55a3bb51a8e0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55a3bb51a8a0 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55a3bb51a928 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55a3bb51a910 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55a3bb51a8c0 <col:38> '_Bool' lvalue Var 0x55a3bb50dd18 'z$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x55a3bb51aa00 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55a3bb51a9b8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55a3bb51a9a0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55a3bb51a960 <col:56> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55a3bb51a9e8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55a3bb51a9d0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55a3bb51a980 <col:74> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x55a3bb51aab8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55a3bb51aa70 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55a3bb51aa40 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55a3bb51aae8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55a3bb51aad0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55a3bb51aa98 <col:102> '_Bool' lvalue Var 0x55a3bb50df80 'z$r_buff1_thd4' '_Bool'
|   |-CallExpr 0x55a3bb51aba0 <line:866:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb51ab88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb51ab68 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55a3bb51abf8 <line:867:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55a3bb51abe0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb51abc0 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55a3bb51acb0 <line:868:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55a3bb51ac18 <col:3> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55a3bb51ac90 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55a3bb51ac78 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a3bb51ac38 <col:22> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55a3bb51ac58 <col:41> 'int' 1
|   |-CallExpr 0x55a3bb51ad08 <line:869:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55a3bb51acf0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55a3bb51acd0 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55a3bb51ad80 <line:870:3, col:36>
|     `-CallExpr 0x55a3bb51ad60 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55a3bb51ad48 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55a3bb51ad28 <col:10> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55a3bb51af40 prev 0x55a3bb50c430 <line:872:1, line:874:1> line:872:6 fence 'void ()'
| `-CompoundStmt 0x55a3bb51afe0 <line:873:1, line:874:1>
|-FunctionDecl 0x55a3bb51b050 prev 0x55a3bb50c4f0 <line:875:1, line:877:1> line:875:6 isync 'void ()'
| `-CompoundStmt 0x55a3bb51b0f0 <line:876:1, line:877:1>
|-FunctionDecl 0x55a3bb51b120 prev 0x55a3bb50c5b0 <line:878:1, line:880:1> line:878:6 lwfence 'void ()'
| `-CompoundStmt 0x55a3bb51b1c0 <line:879:1, line:880:1>
`-FunctionDecl 0x55a3bb51b228 <line:881:1, line:938:1> line:881:5 main 'int ()'
  `-CompoundStmt 0x55a3bb5232f0 <line:882:1, line:938:1>
    |-DeclStmt 0x55a3bb51b340 <line:883:3, col:17>
    | `-VarDecl 0x55a3bb51b2d8 <col:3, col:13> col:13 used t631 'pthread_t':'unsigned long'
    |-CallExpr 0x55a3bb51b548 <line:884:3, col:53> 'int'
    | |-ImplicitCastExpr 0x55a3bb51b530 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51b358 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55a3bb4f38f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55a3bb51b398 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55a3bb51b378 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55a3bb51b2d8 't631' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55a3bb51b588 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55a3bb51b410 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x55a3bb51b3e8 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55a3bb51b3b0 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x55a3bb51b5a0 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51b430 <col:38> 'void *(void *)' Function 0x55a3bb50e470 'P0' 'void *(void *)'
    | `-ParenExpr 0x55a3bb51b4b0 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x55a3bb51b488 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55a3bb51b450 <col:51> 'int' 0
    |-DeclStmt 0x55a3bb51b630 <line:885:3, col:17>
    | `-VarDecl 0x55a3bb51b5c8 <col:3, col:13> col:13 used t632 'pthread_t':'unsigned long'
    |-CallExpr 0x55a3bb51b7d8 <line:886:3, col:53> 'int'
    | |-ImplicitCastExpr 0x55a3bb51b7c0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51b648 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55a3bb4f38f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55a3bb51b688 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55a3bb51b668 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55a3bb51b5c8 't632' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55a3bb51b818 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55a3bb51b700 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x55a3bb51b6d8 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55a3bb51b6a0 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x55a3bb51b830 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51b720 <col:38> 'void *(void *)' Function 0x55a3bb50f840 'P1' 'void *(void *)'
    | `-ParenExpr 0x55a3bb51b7a0 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x55a3bb51b778 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55a3bb51b740 <col:51> 'int' 0
    |-DeclStmt 0x55a3bb51b8c0 <line:887:3, col:17>
    | `-VarDecl 0x55a3bb51b858 <col:3, col:13> col:13 used t633 'pthread_t':'unsigned long'
    |-CallExpr 0x55a3bb51ba68 <line:888:3, col:53> 'int'
    | |-ImplicitCastExpr 0x55a3bb51ba50 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51b8d8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55a3bb4f38f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55a3bb51b918 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55a3bb51b8f8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55a3bb51b858 't633' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55a3bb51baa8 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55a3bb51b990 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x55a3bb51b968 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55a3bb51b930 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x55a3bb51bac0 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51b9b0 <col:38> 'void *(void *)' Function 0x55a3bb513d60 'P2' 'void *(void *)'
    | `-ParenExpr 0x55a3bb51ba30 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x55a3bb51ba08 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55a3bb51b9d0 <col:51> 'int' 0
    |-DeclStmt 0x55a3bb51bb50 <line:889:3, col:17>
    | `-VarDecl 0x55a3bb51bae8 <col:3, col:13> col:13 used t634 'pthread_t':'unsigned long'
    |-CallExpr 0x55a3bb51bcf8 <line:890:3, col:53> 'int'
    | |-ImplicitCastExpr 0x55a3bb51bce0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51bb68 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55a3bb4f38f8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55a3bb51bba8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55a3bb51bb88 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55a3bb51bae8 't634' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55a3bb51bd38 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55a3bb51bc20 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x55a3bb51bbf8 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55a3bb51bbc0 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x55a3bb51bd50 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51bc40 <col:38> 'void *(void *)' Function 0x55a3bb515dd0 'P3' 'void *(void *)'
    | `-ParenExpr 0x55a3bb51bcc0 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x55a3bb51bc98 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55a3bb51bc60 <col:51> 'int' 0
    |-CallExpr 0x55a3bb51bda0 <line:891:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55a3bb51bd88 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55a3bb51bd68 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55a3bb51be70 <line:892:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51bdc0 <col:3> '_Bool' lvalue Var 0x55a3bb50cd20 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51be58 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x55a3bb51be38 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x55a3bb51be20 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x55a3bb51bde0 <col:21> 'int' lvalue Var 0x55a3bb50c6e8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x55a3bb51be00 <col:41> 'int' 4
    |-CallExpr 0x55a3bb51bec8 <line:893:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55a3bb51beb0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55a3bb51be90 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55a3bb51bf40 <line:894:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55a3bb51bf28 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb51bee8 <col:3> 'void (int)' Function 0x55a3bb4b2ca0 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x55a3bb51bf80 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55a3bb51bf68 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55a3bb51bf08 <col:21> '_Bool' lvalue Var 0x55a3bb50cd20 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x55a3bb51bfd0 <line:895:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55a3bb51bfb8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55a3bb51bf98 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55a3bb51c2c8 <line:896:3, col:103> 'int' '='
    | |-DeclRefExpr 0x55a3bb51bff0 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
    | `-ConditionalOperator 0x55a3bb51c298 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x55a3bb51c0c0 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x55a3bb51c078 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x55a3bb51c060 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55a3bb51c010 <col:7> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x55a3bb51c0a8 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x55a3bb51c090 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55a3bb51c030 <col:25> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb51c280 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb51c0e0 <col:42> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
    |   `-ParenExpr 0x55a3bb51c260 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x55a3bb51c230 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x55a3bb51c1a0 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55a3bb51c158 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55a3bb51c140 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55a3bb51c100 <col:55> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55a3bb51c188 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55a3bb51c170 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55a3bb51c120 <col:73> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55a3bb51c200 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a3bb51c1c0 <col:90> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x55a3bb51c218 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51c1e0 <col:102> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
    |-BinaryOperator 0x55a3bb51c4d0 <line:897:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51c2e8 <col:3> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51c4b8 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51c488 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55a3bb51c3a8 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55a3bb51c360 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55a3bb51c348 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55a3bb51c308 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55a3bb51c390 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55a3bb51c378 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55a3bb51c328 <col:38> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51c440 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55a3bb51c3f8 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55a3bb51c3c8 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55a3bb51c470 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55a3bb51c458 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51c420 <col:66> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55a3bb51c7b8 <line:898:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51c4f0 <col:3> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51c7a0 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51c770 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55a3bb51c690 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55a3bb51c5b0 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55a3bb51c568 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55a3bb51c550 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55a3bb51c510 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55a3bb51c598 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55a3bb51c580 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55a3bb51c530 <col:38> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55a3bb51c670 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55a3bb51c628 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55a3bb51c610 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55a3bb51c5d0 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55a3bb51c658 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55a3bb51c640 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55a3bb51c5f0 <col:74> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51c728 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55a3bb51c6e0 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55a3bb51c6b0 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55a3bb51c758 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55a3bb51c740 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51c708 <col:102> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x55a3bb51c9c0 <line:899:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51c7d8 <col:3> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51c9a8 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51c978 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55a3bb51c898 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55a3bb51c850 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55a3bb51c838 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55a3bb51c7f8 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55a3bb51c880 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55a3bb51c868 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55a3bb51c818 <col:38> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51c930 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55a3bb51c8e8 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55a3bb51c8b8 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55a3bb51c960 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55a3bb51c948 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51c910 <col:66> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55a3bb51cca8 <line:900:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51c9e0 <col:3> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51cc90 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51cc60 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55a3bb51cb80 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55a3bb51caa0 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55a3bb51ca58 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55a3bb51ca40 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55a3bb51ca00 <col:20> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55a3bb51ca88 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55a3bb51ca70 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55a3bb51ca20 <col:38> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55a3bb51cb60 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55a3bb51cb18 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55a3bb51cb00 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55a3bb51cac0 <col:56> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55a3bb51cb48 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55a3bb51cb30 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55a3bb51cae0 <col:74> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51cc18 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55a3bb51cbd0 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55a3bb51cba0 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55a3bb51cc48 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55a3bb51cc30 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51cbf8 <col:102> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |-BinaryOperator 0x55a3bb51cf90 <line:901:3, col:103> 'int' '='
    | |-DeclRefExpr 0x55a3bb51ccc8 <col:3> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
    | `-ConditionalOperator 0x55a3bb51cf60 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x55a3bb51cd88 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x55a3bb51cd40 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x55a3bb51cd28 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55a3bb51cce8 <col:7> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x55a3bb51cd70 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x55a3bb51cd58 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55a3bb51cd08 <col:25> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb51cf48 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb51cda8 <col:42> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
    |   `-ParenExpr 0x55a3bb51cf28 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x55a3bb51cef8 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x55a3bb51ce68 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55a3bb51ce20 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55a3bb51ce08 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55a3bb51cdc8 <col:55> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55a3bb51ce50 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55a3bb51ce38 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55a3bb51cde8 <col:73> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55a3bb51cec8 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a3bb51ce88 <col:90> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x55a3bb51cee0 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51cea8 <col:102> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
    |-BinaryOperator 0x55a3bb51d1b0 <line:902:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51cfb0 <col:3> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51d198 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51d168 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55a3bb51d088 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55a3bb51d028 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55a3bb51d010 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55a3bb51cfd0 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55a3bb51d070 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55a3bb51d040 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55a3bb51cff0 <col:38> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51d120 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55a3bb51d0d8 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55a3bb51d0a8 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55a3bb51d150 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55a3bb51d138 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51d100 <col:66> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55a3bb51d498 <line:903:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51d1d0 <col:3> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51d480 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51d450 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55a3bb51d370 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55a3bb51d290 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55a3bb51d248 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55a3bb51d230 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55a3bb51d1f0 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55a3bb51d278 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55a3bb51d260 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55a3bb51d210 <col:38> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55a3bb51d350 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55a3bb51d308 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55a3bb51d2f0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55a3bb51d2b0 <col:56> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55a3bb51d338 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55a3bb51d320 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55a3bb51d2d0 <col:74> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51d408 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55a3bb51d3c0 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55a3bb51d390 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55a3bb51d438 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55a3bb51d420 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51d3e8 <col:102> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |-BinaryOperator 0x55a3bb51d6a0 <line:904:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51d4b8 <col:3> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51d688 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51d658 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55a3bb51d578 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55a3bb51d530 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55a3bb51d518 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55a3bb51d4d8 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55a3bb51d560 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55a3bb51d548 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55a3bb51d4f8 <col:38> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51d610 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55a3bb51d5c8 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55a3bb51d598 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55a3bb51d640 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55a3bb51d628 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51d5f0 <col:66> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55a3bb51d988 <line:905:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51d6c0 <col:3> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51d970 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51d940 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55a3bb51d860 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55a3bb51d780 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55a3bb51d738 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55a3bb51d720 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55a3bb51d6e0 <col:20> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55a3bb51d768 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55a3bb51d750 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55a3bb51d700 <col:38> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55a3bb51d840 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55a3bb51d7f8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55a3bb51d7e0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55a3bb51d7a0 <col:56> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55a3bb51d828 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55a3bb51d810 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55a3bb51d7c0 <col:74> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51d8f8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55a3bb51d8b0 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55a3bb51d880 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55a3bb51d928 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55a3bb51d910 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51d8d8 <col:102> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |-CallExpr 0x55a3bb51d9e0 <line:906:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55a3bb51d9c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55a3bb51d9a8 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55a3bb51da38 <line:907:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55a3bb51da20 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55a3bb51da00 <col:3> 'void ()' Function 0x55a3bb4b3350 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55a3bb51dae8 <line:908:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51da58 <col:3> '_Bool' lvalue Var 0x55a3bb50e2e0 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51dad0 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x55a3bb51dab0 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x55a3bb51da98 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x55a3bb51da78 <col:19> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x55a3bb51db98 <line:909:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51db08 <col:3> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51db80 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x55a3bb51db60 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x55a3bb51db48 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x55a3bb51db28 <col:19> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x55a3bb51dc10 <line:910:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51dbb8 <col:3> '_Bool' lvalue Var 0x55a3bb50da40 'z$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51dbf8 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x55a3bb51dbd8 <col:21> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x55a3bb51dc88 <line:911:3, col:15> 'int' '='
    | |-DeclRefExpr 0x55a3bb51dc30 <col:3> 'int' lvalue Var 0x55a3bb50dac0 'z$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x55a3bb51dc70 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55a3bb51dc50 <col:15> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
    |-BinaryOperator 0x55a3bb51e0e8 <line:912:3, col:162> 'int' '='
    | |-DeclRefExpr 0x55a3bb51dca8 <col:3> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
    | `-ConditionalOperator 0x55a3bb51e0b8 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x55a3bb51deb8 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x55a3bb51ddd8 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x55a3bb51dd00 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x55a3bb51dce8 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x55a3bb51dcc8 <col:8> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x55a3bb51ddb8 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x55a3bb51dd50 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x55a3bb51dd38 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x55a3bb51dd18 <col:27> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x55a3bb51dda0 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x55a3bb51dd88 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x55a3bb51dd68 <col:46> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x55a3bb51de98 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x55a3bb51de30 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x55a3bb51de18 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x55a3bb51ddf8 <col:65> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x55a3bb51de80 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x55a3bb51de68 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55a3bb51de48 <col:84> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb51e0a0 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb51ded8 <col:101> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
    |   `-ParenExpr 0x55a3bb51e080 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x55a3bb51e028 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x55a3bb51df98 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55a3bb51df50 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55a3bb51df38 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55a3bb51def8 <col:106> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55a3bb51df80 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55a3bb51df68 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55a3bb51df18 <col:124> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55a3bb51dff8 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a3bb51dfb8 <col:141> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x55a3bb51e010 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb51dfd8 <col:153> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
    |-BinaryOperator 0x55a3bb51e5f8 <line:913:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55a3bb51e108 <col:3> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
    | `-ConditionalOperator 0x55a3bb51e5c8 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55a3bb51e598 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55a3bb51e580 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55a3bb51e128 <col:15> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb51e5b0 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb51e148 <col:31> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
    |   `-ParenExpr 0x55a3bb51e560 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55a3bb51e530 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55a3bb51e358 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55a3bb51e278 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55a3bb51e1a0 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55a3bb51e188 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55a3bb51e168 <col:45> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55a3bb51e258 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55a3bb51e1f0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55a3bb51e1d8 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55a3bb51e1b8 <col:64> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55a3bb51e240 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55a3bb51e228 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55a3bb51e208 <col:83> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55a3bb51e338 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55a3bb51e2d0 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55a3bb51e2b8 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55a3bb51e298 <col:102> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55a3bb51e320 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55a3bb51e308 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55a3bb51e2e8 <col:121> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55a3bb51e518 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a3bb51e378 <col:138> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
    |       `-ParenExpr 0x55a3bb51e4f8 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55a3bb51e4c8 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55a3bb51e438 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55a3bb51e3f0 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55a3bb51e3d8 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55a3bb51e398 <col:151> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55a3bb51e420 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55a3bb51e408 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55a3bb51e3b8 <col:169> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55a3bb51e498 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55a3bb51e458 <col:186> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x55a3bb51e4b0 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55a3bb51e478 <col:198> 'int' lvalue Var 0x55a3bb50e0f8 'z$w_buff0' 'int'
    |-BinaryOperator 0x55a3bb51eb08 <line:914:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55a3bb51e618 <col:3> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
    | `-ConditionalOperator 0x55a3bb51ead8 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55a3bb51eaa8 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55a3bb51ea90 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55a3bb51e638 <col:15> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb51eac0 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb51e658 <col:31> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
    |   `-ParenExpr 0x55a3bb51ea70 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55a3bb51ea40 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55a3bb51e868 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55a3bb51e788 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55a3bb51e6b0 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55a3bb51e698 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55a3bb51e678 <col:45> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55a3bb51e768 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55a3bb51e700 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55a3bb51e6e8 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55a3bb51e6c8 <col:64> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55a3bb51e750 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55a3bb51e738 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55a3bb51e718 <col:83> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55a3bb51e848 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55a3bb51e7e0 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55a3bb51e7c8 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55a3bb51e7a8 <col:102> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55a3bb51e830 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55a3bb51e818 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55a3bb51e7f8 <col:121> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55a3bb51ea28 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a3bb51e888 <col:138> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
    |       `-ParenExpr 0x55a3bb51ea08 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55a3bb51e9d8 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55a3bb51e948 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55a3bb51e900 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55a3bb51e8e8 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55a3bb51e8a8 <col:151> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55a3bb51e930 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55a3bb51e918 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55a3bb51e8c8 <col:169> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55a3bb51e9a8 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55a3bb51e968 <col:186> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x55a3bb51e9c0 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55a3bb51e988 <col:198> 'int' lvalue Var 0x55a3bb50e1f0 'z$w_buff1' 'int'
    |-BinaryOperator 0x55a3bb51f0d8 <line:915:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51eb28 <col:3> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51f0c0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51f090 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55a3bb51f020 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb51f008 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb51eb48 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51f050 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb51f038 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb51eb68 <col:36> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x55a3bb51efe8 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55a3bb51efb8 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55a3bb51ed78 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55a3bb51ec98 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55a3bb51ebc0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55a3bb51eba8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55a3bb51eb88 <col:55> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55a3bb51ec78 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55a3bb51ec10 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55a3bb51ebf8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55a3bb51ebd8 <col:74> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55a3bb51ec60 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55a3bb51ec48 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55a3bb51ec28 <col:93> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55a3bb51ed58 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55a3bb51ecf0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55a3bb51ecd8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55a3bb51ecb8 <col:112> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55a3bb51ed40 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55a3bb51ed28 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55a3bb51ed08 <col:131> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55a3bb51efa0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55a3bb51ef88 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55a3bb51ed98 <col:148> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x55a3bb51ef68 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55a3bb51ef38 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55a3bb51ee58 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55a3bb51ee10 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55a3bb51edf8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55a3bb51edb8 <col:166> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55a3bb51ee40 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55a3bb51ee28 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55a3bb51edd8 <col:184> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55a3bb51eef0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55a3bb51eea8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55a3bb51ee78 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55a3bb51ef20 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55a3bb51ef08 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55a3bb51eed0 <col:212> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55a3bb51f6a0 <line:916:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51f0f8 <col:3> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51f688 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51f658 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55a3bb51f610 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb51f5f8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb51f118 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51f640 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb51f628 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb51f138 <col:36> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x55a3bb51f5d8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55a3bb51f5a8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55a3bb51f348 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55a3bb51f268 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55a3bb51f190 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55a3bb51f178 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55a3bb51f158 <col:55> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55a3bb51f248 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55a3bb51f1e0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55a3bb51f1c8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55a3bb51f1a8 <col:74> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55a3bb51f230 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55a3bb51f218 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55a3bb51f1f8 <col:93> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55a3bb51f328 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55a3bb51f2c0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55a3bb51f2a8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55a3bb51f288 <col:112> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55a3bb51f310 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55a3bb51f2f8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55a3bb51f2d8 <col:131> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55a3bb51f590 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55a3bb51f578 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55a3bb51f368 <col:148> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x55a3bb51f558 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55a3bb51f528 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55a3bb51f428 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55a3bb51f3e0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55a3bb51f3c8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55a3bb51f388 <col:166> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55a3bb51f410 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55a3bb51f3f8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55a3bb51f3a8 <col:184> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55a3bb51f4f8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55a3bb51f478 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55a3bb51f448 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55a3bb51f510 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55a3bb51f4d0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55a3bb51f4a0 <col:219> 'int' 0
    |-BinaryOperator 0x55a3bb51fc48 <line:917:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51f6c0 <col:3> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb51fc30 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb51fc00 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55a3bb51fbb8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb51fba0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb51f6e0 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb51fbe8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb51fbd0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb51f700 <col:36> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x55a3bb51fb80 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55a3bb51fb50 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55a3bb51f910 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55a3bb51f830 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55a3bb51f758 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55a3bb51f740 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55a3bb51f720 <col:55> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55a3bb51f810 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55a3bb51f7a8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55a3bb51f790 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55a3bb51f770 <col:74> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55a3bb51f7f8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55a3bb51f7e0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55a3bb51f7c0 <col:93> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55a3bb51f8f0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55a3bb51f888 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55a3bb51f870 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55a3bb51f850 <col:112> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55a3bb51f8d8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55a3bb51f8c0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55a3bb51f8a0 <col:131> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55a3bb51fb38 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55a3bb51fb20 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55a3bb51f930 <col:148> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x55a3bb51fb00 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55a3bb51fad0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55a3bb51f9f0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55a3bb51f9a8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55a3bb51f990 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55a3bb51f950 <col:166> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55a3bb51f9d8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55a3bb51f9c0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55a3bb51f970 <col:184> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55a3bb51fa88 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55a3bb51fa40 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55a3bb51fa10 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55a3bb51fab8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55a3bb51faa0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55a3bb51fa68 <col:212> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55a3bb520230 <line:918:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb51fc68 <col:3> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb520218 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb5201e8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55a3bb5201a0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb520188 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb51fc88 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb5201d0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb5201b8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb51fca8 <col:36> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x55a3bb520168 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55a3bb520138 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55a3bb51feb8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55a3bb51fdd8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55a3bb51fd00 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55a3bb51fce8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55a3bb51fcc8 <col:55> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55a3bb51fdb8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55a3bb51fd50 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55a3bb51fd38 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55a3bb51fd18 <col:74> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55a3bb51fda0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55a3bb51fd88 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55a3bb51fd68 <col:93> '_Bool' lvalue Var 0x55a3bb50e268 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55a3bb51fe98 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55a3bb51fe30 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55a3bb51fe18 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55a3bb51fdf8 <col:112> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55a3bb51fe80 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55a3bb51fe68 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55a3bb51fe48 <col:131> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55a3bb520120 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55a3bb520108 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55a3bb51fed8 <col:148> '_Bool' lvalue Var 0x55a3bb50dd90 'z$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x55a3bb5200e8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55a3bb5200b8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55a3bb51ff98 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55a3bb51ff50 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55a3bb51ff38 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55a3bb51fef8 <col:166> '_Bool' lvalue Var 0x55a3bb50e170 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55a3bb51ff80 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55a3bb51ff68 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55a3bb51ff18 <col:184> '_Bool' lvalue Var 0x55a3bb50db38 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55a3bb520068 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55a3bb51ffe8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55a3bb51ffb8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55a3bb5200a0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55a3bb520040 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55a3bb520010 <col:219> 'int' 0
    |-BinaryOperator 0x55a3bb5202e0 <line:919:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb520250 <col:3> '_Bool' lvalue Var 0x55a3bb50e2e0 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb5202c8 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x55a3bb5202a8 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x55a3bb520290 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x55a3bb520270 <col:19> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x55a3bb520390 <line:920:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb520300 <col:3> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb520378 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x55a3bb520358 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x55a3bb520340 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x55a3bb520320 <col:19> 'void *(void)' Function 0x55a3bb4b2e68 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x55a3bb520408 <line:921:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb5203b0 <col:3> '_Bool' lvalue Var 0x55a3bb50cf70 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb5203f0 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x55a3bb5203d0 <col:21> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x55a3bb520480 <line:922:3, col:15> 'int' '='
    | |-DeclRefExpr 0x55a3bb520428 <col:3> 'int' lvalue Var 0x55a3bb50cff0 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x55a3bb520468 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55a3bb520448 <col:15> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
    |-BinaryOperator 0x55a3bb5208b8 <line:923:3, col:162> 'int' '='
    | |-DeclRefExpr 0x55a3bb5204a0 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
    | `-ConditionalOperator 0x55a3bb520888 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x55a3bb5206b0 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x55a3bb5205d0 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x55a3bb5204f8 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x55a3bb5204e0 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x55a3bb5204c0 <col:8> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x55a3bb5205b0 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x55a3bb520548 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x55a3bb520530 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x55a3bb520510 <col:27> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x55a3bb520598 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x55a3bb520580 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x55a3bb520560 <col:46> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x55a3bb520690 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x55a3bb520628 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x55a3bb520610 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x55a3bb5205f0 <col:65> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x55a3bb520678 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x55a3bb520660 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55a3bb520640 <col:84> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb520870 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb5206d0 <col:101> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
    |   `-ParenExpr 0x55a3bb520850 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x55a3bb520820 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x55a3bb520790 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55a3bb520748 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55a3bb520730 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55a3bb5206f0 <col:106> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55a3bb520778 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55a3bb520760 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55a3bb520710 <col:124> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55a3bb5207f0 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a3bb5207b0 <col:141> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x55a3bb520808 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55a3bb5207d0 <col:153> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
    |-BinaryOperator 0x55a3bb520dc8 <line:924:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55a3bb5208d8 <col:3> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x55a3bb520d98 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55a3bb520d68 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55a3bb520d50 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55a3bb5208f8 <col:15> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb520d80 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb520918 <col:31> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
    |   `-ParenExpr 0x55a3bb520d30 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55a3bb520d00 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55a3bb520b28 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55a3bb520a48 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55a3bb520970 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55a3bb520958 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55a3bb520938 <col:45> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55a3bb520a28 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55a3bb5209c0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55a3bb5209a8 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55a3bb520988 <col:64> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55a3bb520a10 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55a3bb5209f8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55a3bb5209d8 <col:83> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55a3bb520b08 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55a3bb520aa0 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55a3bb520a88 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55a3bb520a68 <col:102> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55a3bb520af0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55a3bb520ad8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55a3bb520ab8 <col:121> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55a3bb520ce8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a3bb520b48 <col:138> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
    |       `-ParenExpr 0x55a3bb520cc8 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55a3bb520c98 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55a3bb520c08 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55a3bb520bc0 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55a3bb520ba8 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55a3bb520b68 <col:151> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55a3bb520bf0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55a3bb520bd8 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55a3bb520b88 <col:169> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55a3bb520c68 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55a3bb520c28 <col:186> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x55a3bb520c80 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55a3bb520c48 <col:198> 'int' lvalue Var 0x55a3bb50d618 'x$w_buff0' 'int'
    |-BinaryOperator 0x55a3bb5212f0 <line:925:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55a3bb520de8 <col:3> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x55a3bb5212c0 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55a3bb521290 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55a3bb521278 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55a3bb520e08 <col:15> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb5212a8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb520e28 <col:31> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
    |   `-ParenExpr 0x55a3bb521258 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55a3bb521228 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55a3bb521038 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55a3bb520f58 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55a3bb520e80 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55a3bb520e68 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55a3bb520e48 <col:45> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55a3bb520f38 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55a3bb520ed0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55a3bb520eb8 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55a3bb520e98 <col:64> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55a3bb520f20 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55a3bb520f08 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55a3bb520ee8 <col:83> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55a3bb521018 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55a3bb520fb0 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55a3bb520f98 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55a3bb520f78 <col:102> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55a3bb521000 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55a3bb520fe8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55a3bb520fc8 <col:121> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55a3bb521210 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55a3bb521058 <col:138> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
    |       `-ParenExpr 0x55a3bb5211f0 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55a3bb5211c0 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55a3bb521130 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55a3bb5210e8 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55a3bb5210d0 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55a3bb521078 <col:151> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55a3bb521118 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55a3bb521100 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55a3bb5210b0 <col:169> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55a3bb521190 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55a3bb521150 <col:186> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x55a3bb5211a8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55a3bb521170 <col:198> 'int' lvalue Var 0x55a3bb50d710 'x$w_buff1' 'int'
    |-BinaryOperator 0x55a3bb521898 <line:926:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb521310 <col:3> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb521880 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb521850 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55a3bb521808 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb5217f0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb521330 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb521838 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb521820 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb521350 <col:36> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x55a3bb5217d0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55a3bb5217a0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55a3bb521560 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55a3bb521480 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55a3bb5213a8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55a3bb521390 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55a3bb521370 <col:55> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55a3bb521460 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55a3bb5213f8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55a3bb5213e0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55a3bb5213c0 <col:74> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55a3bb521448 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55a3bb521430 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55a3bb521410 <col:93> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55a3bb521540 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55a3bb5214d8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55a3bb5214c0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55a3bb5214a0 <col:112> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55a3bb521528 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55a3bb521510 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55a3bb5214f0 <col:131> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55a3bb521788 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55a3bb521770 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55a3bb521580 <col:148> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x55a3bb521750 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55a3bb521720 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55a3bb521640 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55a3bb5215f8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55a3bb5215e0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55a3bb5215a0 <col:166> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55a3bb521628 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55a3bb521610 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55a3bb5215c0 <col:184> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55a3bb5216d8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55a3bb521690 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55a3bb521660 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55a3bb521708 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55a3bb5216f0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55a3bb5216b8 <col:212> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55a3bb521e60 <line:927:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb5218b8 <col:3> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb521e48 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb521e18 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55a3bb521dd0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb521db8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb5218d8 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb521e00 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb521de8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb5218f8 <col:36> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x55a3bb521d98 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55a3bb521d68 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55a3bb521b08 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55a3bb521a28 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55a3bb521950 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55a3bb521938 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55a3bb521918 <col:55> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55a3bb521a08 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55a3bb5219a0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55a3bb521988 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55a3bb521968 <col:74> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55a3bb5219f0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55a3bb5219d8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55a3bb5219b8 <col:93> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55a3bb521ae8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55a3bb521a80 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55a3bb521a68 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55a3bb521a48 <col:112> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55a3bb521ad0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55a3bb521ab8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55a3bb521a98 <col:131> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55a3bb521d50 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55a3bb521d38 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55a3bb521b28 <col:148> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x55a3bb521d18 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55a3bb521ce8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55a3bb521be8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55a3bb521ba0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55a3bb521b88 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55a3bb521b48 <col:166> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55a3bb521bd0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55a3bb521bb8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55a3bb521b68 <col:184> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55a3bb521cb8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55a3bb521c38 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55a3bb521c08 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55a3bb521cd0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55a3bb521c90 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55a3bb521c60 <col:219> 'int' 0
    |-BinaryOperator 0x55a3bb522418 <line:928:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb521e80 <col:3> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb522400 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb5223d0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55a3bb522388 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb522370 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb521ea0 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb5223b8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb5223a0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb521ec0 <col:36> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x55a3bb522350 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55a3bb522320 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55a3bb5220e0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55a3bb521ff0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55a3bb521f18 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55a3bb521f00 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55a3bb521ee0 <col:55> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55a3bb521fd0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55a3bb521f68 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55a3bb521f50 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55a3bb521f30 <col:74> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55a3bb521fb8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55a3bb521fa0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55a3bb521f80 <col:93> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55a3bb5220c0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55a3bb522048 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55a3bb522030 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55a3bb522010 <col:112> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55a3bb522098 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55a3bb522080 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55a3bb522060 <col:131> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55a3bb522308 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55a3bb5222f0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55a3bb522100 <col:148> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x55a3bb5222d0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55a3bb5222a0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55a3bb5221c0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55a3bb522178 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55a3bb522160 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55a3bb522120 <col:166> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55a3bb5221a8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55a3bb522190 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55a3bb522140 <col:184> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55a3bb522258 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55a3bb522210 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55a3bb5221e0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55a3bb522288 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55a3bb522270 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55a3bb522238 <col:212> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55a3bb5229e0 <line:929:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb522438 <col:3> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb5229c8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55a3bb522998 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55a3bb522950 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb522938 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb522458 <col:20> '_Bool' lvalue Var 0x55a3bb50e358 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55a3bb522980 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55a3bb522968 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55a3bb522478 <col:36> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x55a3bb522918 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55a3bb5228e8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55a3bb522688 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55a3bb5225a8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55a3bb5224d0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55a3bb5224b8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55a3bb522498 <col:55> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55a3bb522588 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55a3bb522520 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55a3bb522508 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55a3bb5224e8 <col:74> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55a3bb522570 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55a3bb522558 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55a3bb522538 <col:93> '_Bool' lvalue Var 0x55a3bb50d788 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55a3bb522668 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55a3bb522600 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55a3bb5225e8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55a3bb5225c8 <col:112> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55a3bb522650 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55a3bb522638 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55a3bb522618 <col:131> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55a3bb5228d0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55a3bb5228b8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55a3bb5226a8 <col:148> '_Bool' lvalue Var 0x55a3bb50d2c0 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x55a3bb522898 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55a3bb522868 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55a3bb522768 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55a3bb522720 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55a3bb522708 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55a3bb5226c8 <col:166> '_Bool' lvalue Var 0x55a3bb50d690 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55a3bb522750 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55a3bb522738 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55a3bb5226e8 <col:184> '_Bool' lvalue Var 0x55a3bb50d068 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55a3bb522838 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55a3bb5227b8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55a3bb522788 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55a3bb522850 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55a3bb522810 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55a3bb5227e0 <col:219> 'int' 0
    |-BinaryOperator 0x55a3bb522de0 <line:930:3, col:151> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb522a00 <col:3> '_Bool' lvalue Var 0x55a3bb50cd98 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x55a3bb522dc8 <col:21, col:151> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x55a3bb522db0 <col:21, col:151> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x55a3bb522d90 <col:22, col:151> 'int'
    |       `-BinaryOperator 0x55a3bb522d70 <col:23, col:150> 'int' '&&'
    |         |-BinaryOperator 0x55a3bb522cd8 <col:23, col:122> 'int' '&&'
    |         | |-BinaryOperator 0x55a3bb522c40 <col:23, col:94> 'int' '&&'
    |         | | |-BinaryOperator 0x55a3bb522ba8 <col:23, col:66> 'int' '&&'
    |         | | | |-BinaryOperator 0x55a3bb522b10 <col:23, col:38> 'int' '&&'
    |         | | | | |-BinaryOperator 0x55a3bb522a78 <col:23, col:28> 'int' '=='
    |         | | | | | |-ImplicitCastExpr 0x55a3bb522a60 <col:23> 'int' <LValueToRValue>
    |         | | | | | | `-DeclRefExpr 0x55a3bb522a20 <col:23> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
    |         | | | | | `-IntegerLiteral 0x55a3bb522a40 <col:28> 'int' 2
    |         | | | | `-BinaryOperator 0x55a3bb522af0 <col:33, col:38> 'int' '=='
    |         | | | |   |-ImplicitCastExpr 0x55a3bb522ad8 <col:33> 'int' <LValueToRValue>
    |         | | | |   | `-DeclRefExpr 0x55a3bb522a98 <col:33> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
    |         | | | |   `-IntegerLiteral 0x55a3bb522ab8 <col:38> 'int' 2
    |         | | | `-BinaryOperator 0x55a3bb522b88 <col:43, col:66> 'int' '=='
    |         | | |   |-ImplicitCastExpr 0x55a3bb522b70 <col:43> 'int' <LValueToRValue>
    |         | | |   | `-DeclRefExpr 0x55a3bb522b30 <col:43> 'int' lvalue Var 0x55a3bb50c808 '__unbuffered_p1_EAX' 'int'
    |         | | |   `-IntegerLiteral 0x55a3bb522b50 <col:66> 'int' 2
    |         | | `-BinaryOperator 0x55a3bb522c20 <col:71, col:94> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x55a3bb522c08 <col:71> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x55a3bb522bc8 <col:71> 'int' lvalue Var 0x55a3bb50c928 '__unbuffered_p1_EBX' 'int'
    |         | |   `-IntegerLiteral 0x55a3bb522be8 <col:94> 'int' 0
    |         | `-BinaryOperator 0x55a3bb522cb8 <col:99, col:122> 'int' '=='
    |         |   |-ImplicitCastExpr 0x55a3bb522ca0 <col:99> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x55a3bb522c60 <col:99> 'int' lvalue Var 0x55a3bb50ca48 '__unbuffered_p3_EAX' 'int'
    |         |   `-IntegerLiteral 0x55a3bb522c80 <col:122> 'int' 2
    |         `-BinaryOperator 0x55a3bb522d50 <col:127, col:150> 'int' '=='
    |           |-ImplicitCastExpr 0x55a3bb522d38 <col:127> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55a3bb522cf8 <col:127> 'int' lvalue Var 0x55a3bb50cb68 '__unbuffered_p3_EBX' 'int'
    |           `-IntegerLiteral 0x55a3bb522d18 <col:150> 'int' 0
    |-BinaryOperator 0x55a3bb522f10 <line:931:3, col:37> 'int' '='
    | |-DeclRefExpr 0x55a3bb522e00 <col:3> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
    | `-ConditionalOperator 0x55a3bb522ee0 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x55a3bb522e98 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55a3bb522e80 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55a3bb522e20 <col:7> '_Bool' lvalue Var 0x55a3bb50da40 'z$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb522eb0 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb522e40 <col:25> 'int' lvalue Var 0x55a3bb50dac0 'z$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x55a3bb522ec8 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x55a3bb522e60 <col:37> 'int' lvalue Var 0x55a3bb50d9a8 'z' 'int'
    |-BinaryOperator 0x55a3bb522fa8 <line:932:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb522f30 <col:3> '_Bool' lvalue Var 0x55a3bb50da40 'z$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x55a3bb522f80 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x55a3bb522f50 <col:28> 'int' 0
    |-BinaryOperator 0x55a3bb523100 <line:933:3, col:37> 'int' '='
    | |-DeclRefExpr 0x55a3bb522fc8 <col:3> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
    | `-ConditionalOperator 0x55a3bb5230d0 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x55a3bb523060 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55a3bb523048 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55a3bb522fe8 <col:7> '_Bool' lvalue Var 0x55a3bb50cf70 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x55a3bb523078 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55a3bb523008 <col:25> 'int' lvalue Var 0x55a3bb50cff0 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x55a3bb523090 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x55a3bb523028 <col:37> 'int' lvalue Var 0x55a3bb50ce98 'x' 'int'
    |-BinaryOperator 0x55a3bb523198 <line:934:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x55a3bb523120 <col:3> '_Bool' lvalue Var 0x55a3bb50cf70 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x55a3bb523170 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x55a3bb523140 <col:28> 'int' 0
    |-CallExpr 0x55a3bb5231f0 <line:935:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55a3bb5231d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55a3bb5231b8 <col:3> 'void ()' Function 0x55a3bb4b3410 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55a3bb523268 <line:936:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55a3bb523250 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55a3bb523210 <col:3> 'void (int)' Function 0x55a3bb4b30d8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x55a3bb5232a8 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55a3bb523290 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55a3bb523230 <col:21> '_Bool' lvalue Var 0x55a3bb50cd98 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x55a3bb5232e0 <line:937:3, col:10>
      `-IntegerLiteral 0x55a3bb5232c0 <col:10> 'int' 0
