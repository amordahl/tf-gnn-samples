TranslationUnitDecl 0x561f41b6b538 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x561f41b6bdf8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x561f41b6bad0 '__int128'
|-TypedefDecl 0x561f41b6be68 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x561f41b6baf0 'unsigned __int128'
|-TypedefDecl 0x561f41b6c170 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x561f41b6bf40 'struct __NSConstantString_tag'
|   `-Record 0x561f41b6bec0 '__NSConstantString_tag'
|-TypedefDecl 0x561f41b6c218 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x561f41b6c1d0 'char *'
|   `-BuiltinType 0x561f41b6b5d0 'char'
|-TypedefDecl 0x561f41bad8b0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x561f41b6c4b0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x561f41b6c2f0 'struct __va_list_tag'
|     `-Record 0x561f41b6c270 '__va_list_tag'
|-FunctionDecl 0x561f41bad990 <seq-mthreaded/pals_lcr.4_true-unreach-call.ufo.UNBOUNDED.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x561f41badb70 <line:61:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
| `-FullComment 0x561f41be5720 <line:3:4, line:56:69>
|   |-ParagraphComment 0x561f41be4d50 <line:3:4, col:71>
|   | `-TextComment 0x561f41be3d00 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x561f41be4da0 <line:5:1, col:67>
|   | `-TextComment 0x561f41be4d70 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x561f41be4e40 <line:7:1, line:9:4>
|   | |-TextComment 0x561f41be4dc0 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x561f41be4de0 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x561f41be4e00 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x561f41be4ee0 <line:11:1, line:13:12>
|   | |-TextComment 0x561f41be4e60 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x561f41be4e80 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x561f41be4ea0 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x561f41be4f80 <line:15:1, line:17:68>
|   | |-TextComment 0x561f41be4f00 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x561f41be4f20 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x561f41be4f40 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x561f41be5070 <line:19:1, line:23:10>
|   | |-TextComment 0x561f41be4fa0 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x561f41be4fc0 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x561f41be4fe0 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x561f41be5000 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x561f41be5020 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x561f41be5090 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x561f41be50f0 <col:15, col:23>
|   |   `-TextComment 0x561f41be50c0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x561f41be5190 <line:25:1, line:27:10>
|   | |-TextComment 0x561f41be5110 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x561f41be5130 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x561f41be5150 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x561f41be51b0 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x561f41be5210 <col:15, col:23>
|   |   `-TextComment 0x561f41be51e0 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x561f41be5280 <line:29:1, line:30:15>
|   | |-TextComment 0x561f41be5230 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x561f41be5250 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x561f41be5370 <line:32:1, line:36:7>
|   | |-TextComment 0x561f41be52a0 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x561f41be52c0 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x561f41be52e0 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x561f41be5300 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x561f41be5320 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x561f41be5410 <line:38:1, line:40:61>
|   | |-TextComment 0x561f41be5390 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x561f41be53b0 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x561f41be53d0 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x561f41be5570 <line:42:1, line:49:37>
|   | |-TextComment 0x561f41be5430 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x561f41be5450 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x561f41be5470 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x561f41be5490 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x561f41be54b0 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x561f41be54d0 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x561f41be54f0 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x561f41be5510 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x561f41be55e0 <line:51:1, line:52:13>
|   | |-TextComment 0x561f41be5590 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x561f41be55b0 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x561f41be5630 <line:54:1, col:10>
|   | `-TextComment 0x561f41be5600 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x561f41be5680 <line:56:2, col:69>
|     `-TextComment 0x561f41be5650 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x561f41badce0 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x561f41bade58 <line:63:1, col:43> col:15 used __VERIFIER_nondet_uchar 'unsigned char (void)'
|-FunctionDecl 0x561f41badfd0 <line:64:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x561f41badf08 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x561f41bae160 <line:65:1, col:32> col:6 used __VERIFIER_assume 'void (int)'
| `-ParmVarDecl 0x561f41bae090 <col:24, col:28> col:28 arg 'int'
|-TypedefDecl 0x561f41bae218 <line:66:1, col:14> col:14 referenced msg_t 'char'
| `-BuiltinType 0x561f41b6b5d0 'char'
|-TypedefDecl 0x561f41bae288 <line:67:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x561f41b6b630 'int'
|-FunctionDecl 0x561f41bae4d0 <line:68:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x561f41bae318 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x561f41bae3b8 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x561f41bae6a0 <line:69:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x561f41bae590 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x561f41bae608 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x561f41bae760 <line:70:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x561f41bae810 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x561f41bae7e8 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x561f41bae7c8 <col:28> 'int' 1
|-VarDecl 0x561f41bd4350 <line:71:1, col:15> col:15 used r1 'unsigned char'
|-VarDecl 0x561f41bd43c8 <line:72:1, col:8> col:8 p1 'port_t':'int'
|-VarDecl 0x561f41bd4440 <line:73:1, col:6> col:6 used p1_old 'char'
|-VarDecl 0x561f41bd44b8 <line:74:1, col:6> col:6 used p1_new 'char'
|-VarDecl 0x561f41bd4530 <line:75:1, col:6> col:6 used id1 'char'
|-VarDecl 0x561f41bd45a8 <line:76:1, col:6> col:6 used st1 'char'
|-VarDecl 0x561f41bd4620 <line:77:1, col:7> col:7 used send1 'msg_t':'char'
|-VarDecl 0x561f41bd4698 <line:78:1, col:7> col:7 used mode1 '_Bool'
|-VarDecl 0x561f41bd4710 <line:79:1, col:8> col:8 p2 'port_t':'int'
|-VarDecl 0x561f41bd4788 <line:80:1, col:6> col:6 used p2_old 'char'
|-VarDecl 0x561f41bd4800 <line:81:1, col:6> col:6 used p2_new 'char'
|-VarDecl 0x561f41bd4878 <line:82:1, col:6> col:6 used id2 'char'
|-VarDecl 0x561f41bd48f0 <line:83:1, col:6> col:6 used st2 'char'
|-VarDecl 0x561f41bd4968 <line:84:1, col:7> col:7 used send2 'msg_t':'char'
|-VarDecl 0x561f41bd49e0 <line:85:1, col:7> col:7 used mode2 '_Bool'
|-VarDecl 0x561f41bd4a58 <line:86:1, col:8> col:8 p3 'port_t':'int'
|-VarDecl 0x561f41bd4ad0 <line:87:1, col:6> col:6 used p3_old 'char'
|-VarDecl 0x561f41bd4b48 <line:88:1, col:6> col:6 used p3_new 'char'
|-VarDecl 0x561f41bd4bc0 <line:89:1, col:6> col:6 used id3 'char'
|-VarDecl 0x561f41bd4c38 <line:90:1, col:6> col:6 used st3 'char'
|-VarDecl 0x561f41bd4cb0 <line:91:1, col:7> col:7 used send3 'msg_t':'char'
|-VarDecl 0x561f41bd4d28 <line:92:1, col:7> col:7 used mode3 '_Bool'
|-VarDecl 0x561f41bd4da0 <line:93:1, col:8> col:8 p4 'port_t':'int'
|-VarDecl 0x561f41bd4e18 <line:94:1, col:6> col:6 used p4_old 'char'
|-VarDecl 0x561f41bd4e90 <line:95:1, col:6> col:6 used p4_new 'char'
|-VarDecl 0x561f41bd4f08 <line:96:1, col:6> col:6 used id4 'char'
|-VarDecl 0x561f41bd4f80 <line:97:1, col:6> col:6 used st4 'char'
|-VarDecl 0x561f41bd4ff8 <line:98:1, col:7> col:7 used send4 'msg_t':'char'
|-VarDecl 0x561f41bd5070 <line:99:1, col:7> col:7 used mode4 '_Bool'
|-FunctionDecl 0x561f41bd51a0 <line:100:1, line:128:1> line:100:6 used node1 'void (void)'
| `-CompoundStmt 0x561f41bd6a30 <line:101:1, line:128:1>
|   |-DeclStmt 0x561f41bd52b8 <line:102:3, col:12>
|   | `-VarDecl 0x561f41bd5250 <col:3, col:9> col:9 used m1 'msg_t':'char'
|   `-CompoundStmt 0x561f41bd6a08 <line:104:3, line:127:1>
|     |-BinaryOperator 0x561f41bd5328 <line:105:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x561f41bd52d0 <col:3> 'msg_t':'char' lvalue Var 0x561f41bd5250 'm1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x561f41bd5310 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x561f41bd52f0 <col:8> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x561f41bd69d0 <line:106:3, line:125:3> has_else
|     | |-ImplicitCastExpr 0x561f41bd5d70 <line:106:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x561f41bd5d50 <col:7> '_Bool' lvalue Var 0x561f41bd4698 'mode1' '_Bool'
|     | |-CompoundStmt 0x561f41bd6610 <col:14, line:122:3>
|     | | |-IfStmt 0x561f41bd5ea8 <line:107:5, line:109:5>
|     | | | |-BinaryOperator 0x561f41bd5df8 <line:107:9, col:15> 'int' '=='
|     | | | | |-ImplicitCastExpr 0x561f41bd5de0 <col:9> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x561f41bd5dc8 <col:9> 'unsigned char' <LValueToRValue>
|     | | | | |   `-DeclRefExpr 0x561f41bd5d88 <col:9> 'unsigned char' lvalue Var 0x561f41bd4350 'r1' 'unsigned char'
|     | | | | `-IntegerLiteral 0x561f41bd5da8 <col:15> 'int' 255
|     | | | `-CompoundStmt 0x561f41bd5e90 <col:20, line:109:5>
|     | | |   `-BinaryOperator 0x561f41bd5e70 <line:108:7, col:12> 'unsigned char' '='
|     | | |     |-DeclRefExpr 0x561f41bd5e18 <col:7> 'unsigned char' lvalue Var 0x561f41bd4350 'r1' 'unsigned char'
|     | | |     `-ImplicitCastExpr 0x561f41bd5e58 <col:12> 'unsigned char' <IntegralCast>
|     | | |       `-IntegerLiteral 0x561f41bd5e38 <col:12> 'int' 3
|     | | |-BinaryOperator 0x561f41bd5f88 <line:110:5, col:15> 'unsigned char' '='
|     | | | |-DeclRefExpr 0x561f41bd5ec0 <col:5> 'unsigned char' lvalue Var 0x561f41bd4350 'r1' 'unsigned char'
|     | | | `-ImplicitCastExpr 0x561f41bd5f70 <col:10, col:15> 'unsigned char' <IntegralCast>
|     | | |   `-BinaryOperator 0x561f41bd5f50 <col:10, col:15> 'int' '+'
|     | | |     |-ImplicitCastExpr 0x561f41bd5f38 <col:10> 'int' <IntegralCast>
|     | | |     | `-ImplicitCastExpr 0x561f41bd5f20 <col:10> 'unsigned char' <LValueToRValue>
|     | | |     |   `-DeclRefExpr 0x561f41bd5ee0 <col:10> 'unsigned char' lvalue Var 0x561f41bd4350 'r1' 'unsigned char'
|     | | |     `-IntegerLiteral 0x561f41bd5f00 <col:15> 'int' 1
|     | | |-BinaryOperator 0x561f41bd6000 <line:111:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x561f41bd5fa8 <col:5> 'msg_t':'char' lvalue Var 0x561f41bd5250 'm1' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x561f41bd5fe8 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561f41bd5fc8 <col:10> 'char' lvalue Var 0x561f41bd4e18 'p4_old' 'char'
|     | | |-BinaryOperator 0x561f41bd6078 <line:112:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x561f41bd6020 <col:5> 'char' lvalue Var 0x561f41bd4e18 'p4_old' 'char'
|     | | | `-ImplicitCastExpr 0x561f41bd6060 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561f41bd6040 <col:14> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x561f41bd6560 <line:113:5, line:120:5>
|     | | | |-BinaryOperator 0x561f41bd6188 <line:113:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x561f41bd60e8 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x561f41bd60d0 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x561f41bd6098 <col:15> 'msg_t':'char' lvalue Var 0x561f41bd5250 'm1' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x561f41bd6160 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x561f41bd6148 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x561f41bd6110 <col:27> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x561f41bd6548 <col:34, line:120:5>
|     | | |   `-IfStmt 0x561f41bd6520 <line:114:7, line:119:7> has_else
|     | | |     |-BinaryOperator 0x561f41bd6298 <line:114:11, col:28> 'int' '>'
|     | | |     | |-CStyleCastExpr 0x561f41bd61f8 <col:11, col:17> 'int' <IntegralCast>
|     | | |     | | `-ImplicitCastExpr 0x561f41bd61e0 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     | |   `-DeclRefExpr 0x561f41bd61a8 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd5250 'm1' 'msg_t':'char'
|     | | |     | `-CStyleCastExpr 0x561f41bd6270 <col:22, col:28> 'int' <IntegralCast>
|     | | |     |   `-ImplicitCastExpr 0x561f41bd6258 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     `-DeclRefExpr 0x561f41bd6220 <col:28> 'char' lvalue Var 0x561f41bd4530 'id1' 'char'
|     | | |     |-CompoundStmt 0x561f41bd6330 <col:33, line:116:7>
|     | | |     | `-BinaryOperator 0x561f41bd6310 <line:115:9, col:17> 'msg_t':'char' '='
|     | | |     |   |-DeclRefExpr 0x561f41bd62b8 <col:9> 'msg_t':'char' lvalue Var 0x561f41bd4620 'send1' 'msg_t':'char'
|     | | |     |   `-ImplicitCastExpr 0x561f41bd62f8 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |     |     `-DeclRefExpr 0x561f41bd62d8 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd5250 'm1' 'msg_t':'char'
|     | | |     `-IfStmt 0x561f41bd6508 <line:117:7, line:119:7>
|     | | |       |-BinaryOperator 0x561f41bd6438 <line:117:11, col:29> 'int' '=='
|     | | |       | |-CStyleCastExpr 0x561f41bd6398 <col:11, col:17> 'int' <IntegralCast>
|     | | |       | | `-ImplicitCastExpr 0x561f41bd6380 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |       | |   `-DeclRefExpr 0x561f41bd6348 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd5250 'm1' 'msg_t':'char'
|     | | |       | `-CStyleCastExpr 0x561f41bd6410 <col:23, col:29> 'int' <IntegralCast>
|     | | |       |   `-ImplicitCastExpr 0x561f41bd63f8 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |       |     `-DeclRefExpr 0x561f41bd63c0 <col:29> 'char' lvalue Var 0x561f41bd4530 'id1' 'char'
|     | | |       `-CompoundStmt 0x561f41bd64f0 <col:34, line:119:7>
|     | | |         `-BinaryOperator 0x561f41bd64d0 <line:118:9, col:21> 'char' '='
|     | | |           |-DeclRefExpr 0x561f41bd6458 <col:9> 'char' lvalue Var 0x561f41bd45a8 'st1' 'char'
|     | | |           `-CStyleCastExpr 0x561f41bd64a8 <col:15, col:21> 'char' <IntegralCast>
|     | | |             `-IntegerLiteral 0x561f41bd6478 <col:21> 'int' 1
|     | | `-BinaryOperator 0x561f41bd65f0 <line:121:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x561f41bd6578 <col:5> '_Bool' lvalue Var 0x561f41bd4698 'mode1' '_Bool'
|     | |   `-CStyleCastExpr 0x561f41bd65c8 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x561f41bd6598 <col:20> 'int' 0
|     | `-CompoundStmt 0x561f41bd69b0 <line:122:10, line:125:3>
|     |   |-BinaryOperator 0x561f41bd68f8 <line:123:5, col:58> 'char' '='
|     |   | |-DeclRefExpr 0x561f41bd6650 <col:5> 'char' lvalue Var 0x561f41bd44b8 'p1_new' 'char'
|     |   | `-ImplicitCastExpr 0x561f41bd68e0 <col:14, col:58> 'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x561f41bd68b0 <col:14, col:58> 'int'
|     |   |     |-BinaryOperator 0x561f41bd67f0 <col:14, col:42> 'int' '&&'
|     |   |     | |-BinaryOperator 0x561f41bd6710 <col:14, col:23> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x561f41bd66e0 <col:14> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x561f41bd66b0 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x561f41bd6670 <col:14> 'msg_t':'char' lvalue Var 0x561f41bd4620 'send1' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x561f41bd66f8 <col:23> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x561f41bd66c8 <col:23> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x561f41bd6690 <col:23> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x561f41bd67d0 <col:32, col:42> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x561f41bd67a0 <col:32> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x561f41bd6770 <col:32> 'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x561f41bd6730 <col:32> 'char' lvalue Var 0x561f41bd44b8 'p1_new' 'char'
|     |   |     |   `-ImplicitCastExpr 0x561f41bd67b8 <col:42> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x561f41bd6788 <col:42> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x561f41bd6750 <col:42> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x561f41bd6868 <col:50> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x561f41bd6850 <col:50> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x561f41bd6810 <col:50> 'msg_t':'char' lvalue Var 0x561f41bd4620 'send1' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x561f41bd6898 <col:58> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x561f41bd6880 <col:58> 'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x561f41bd6830 <col:58> 'char' lvalue Var 0x561f41bd44b8 'p1_new' 'char'
|     |   `-BinaryOperator 0x561f41bd6990 <line:124:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x561f41bd6918 <col:5> '_Bool' lvalue Var 0x561f41bd4698 'mode1' '_Bool'
|     |     `-CStyleCastExpr 0x561f41bd6968 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x561f41bd6938 <col:20> 'int' 1
|     `-ReturnStmt 0x561f41bd69f8 <line:126:3>
|-FunctionDecl 0x561f41bd6ae8 <line:129:1, line:153:1> line:129:6 used node2 'void (void)'
| `-CompoundStmt 0x561f41bd83a0 <line:130:1, line:153:1>
|   |-DeclStmt 0x561f41bd6c00 <line:131:3, col:12>
|   | `-VarDecl 0x561f41bd6b98 <col:3, col:9> col:9 used m2 'msg_t':'char'
|   `-CompoundStmt 0x561f41bd8378 <line:133:3, line:152:1>
|     |-BinaryOperator 0x561f41bd6c70 <line:134:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x561f41bd6c18 <col:3> 'msg_t':'char' lvalue Var 0x561f41bd6b98 'm2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x561f41bd6c58 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x561f41bd6c38 <col:8> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x561f41bd8340 <line:135:3, line:150:3> has_else
|     | |-ImplicitCastExpr 0x561f41bd6cb0 <line:135:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x561f41bd6c90 <col:7> '_Bool' lvalue Var 0x561f41bd49e0 'mode2' '_Bool'
|     | |-CompoundStmt 0x561f41bd7f90 <col:14, line:147:3>
|     | | |-BinaryOperator 0x561f41bd6d20 <line:136:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x561f41bd6cc8 <col:5> 'msg_t':'char' lvalue Var 0x561f41bd6b98 'm2' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x561f41bd6d08 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561f41bd6ce8 <col:10> 'char' lvalue Var 0x561f41bd4440 'p1_old' 'char'
|     | | |-BinaryOperator 0x561f41bd79f8 <line:137:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x561f41bd79a0 <col:5> 'char' lvalue Var 0x561f41bd4440 'p1_old' 'char'
|     | | | `-ImplicitCastExpr 0x561f41bd79e0 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561f41bd79c0 <col:14> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x561f41bd7ee0 <line:138:5, line:145:5>
|     | | | |-BinaryOperator 0x561f41bd7b08 <line:138:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x561f41bd7a68 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x561f41bd7a50 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x561f41bd7a18 <col:15> 'msg_t':'char' lvalue Var 0x561f41bd6b98 'm2' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x561f41bd7ae0 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x561f41bd7ac8 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x561f41bd7a90 <col:27> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x561f41bd7ec8 <col:34, line:145:5>
|     | | |   `-IfStmt 0x561f41bd7ea0 <line:139:7, line:144:7> has_else
|     | | |     |-BinaryOperator 0x561f41bd7c18 <line:139:11, col:28> 'int' '>'
|     | | |     | |-CStyleCastExpr 0x561f41bd7b78 <col:11, col:17> 'int' <IntegralCast>
|     | | |     | | `-ImplicitCastExpr 0x561f41bd7b60 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     | |   `-DeclRefExpr 0x561f41bd7b28 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd6b98 'm2' 'msg_t':'char'
|     | | |     | `-CStyleCastExpr 0x561f41bd7bf0 <col:22, col:28> 'int' <IntegralCast>
|     | | |     |   `-ImplicitCastExpr 0x561f41bd7bd8 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     `-DeclRefExpr 0x561f41bd7ba0 <col:28> 'char' lvalue Var 0x561f41bd4878 'id2' 'char'
|     | | |     |-CompoundStmt 0x561f41bd7cb0 <col:33, line:141:7>
|     | | |     | `-BinaryOperator 0x561f41bd7c90 <line:140:9, col:17> 'msg_t':'char' '='
|     | | |     |   |-DeclRefExpr 0x561f41bd7c38 <col:9> 'msg_t':'char' lvalue Var 0x561f41bd4968 'send2' 'msg_t':'char'
|     | | |     |   `-ImplicitCastExpr 0x561f41bd7c78 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |     |     `-DeclRefExpr 0x561f41bd7c58 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd6b98 'm2' 'msg_t':'char'
|     | | |     `-IfStmt 0x561f41bd7e88 <line:142:7, line:144:7>
|     | | |       |-BinaryOperator 0x561f41bd7db8 <line:142:11, col:29> 'int' '=='
|     | | |       | |-CStyleCastExpr 0x561f41bd7d18 <col:11, col:17> 'int' <IntegralCast>
|     | | |       | | `-ImplicitCastExpr 0x561f41bd7d00 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |       | |   `-DeclRefExpr 0x561f41bd7cc8 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd6b98 'm2' 'msg_t':'char'
|     | | |       | `-CStyleCastExpr 0x561f41bd7d90 <col:23, col:29> 'int' <IntegralCast>
|     | | |       |   `-ImplicitCastExpr 0x561f41bd7d78 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |       |     `-DeclRefExpr 0x561f41bd7d40 <col:29> 'char' lvalue Var 0x561f41bd4878 'id2' 'char'
|     | | |       `-CompoundStmt 0x561f41bd7e70 <col:34, line:144:7>
|     | | |         `-BinaryOperator 0x561f41bd7e50 <line:143:9, col:21> 'char' '='
|     | | |           |-DeclRefExpr 0x561f41bd7dd8 <col:9> 'char' lvalue Var 0x561f41bd48f0 'st2' 'char'
|     | | |           `-CStyleCastExpr 0x561f41bd7e28 <col:15, col:21> 'char' <IntegralCast>
|     | | |             `-IntegerLiteral 0x561f41bd7df8 <col:21> 'int' 1
|     | | `-BinaryOperator 0x561f41bd7f70 <line:146:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x561f41bd7ef8 <col:5> '_Bool' lvalue Var 0x561f41bd49e0 'mode2' '_Bool'
|     | |   `-CStyleCastExpr 0x561f41bd7f48 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x561f41bd7f18 <col:20> 'int' 0
|     | `-CompoundStmt 0x561f41bd8320 <line:147:10, line:150:3>
|     |   |-BinaryOperator 0x561f41bd8268 <line:148:5, col:58> 'char' '='
|     |   | |-DeclRefExpr 0x561f41bd7fc0 <col:5> 'char' lvalue Var 0x561f41bd4800 'p2_new' 'char'
|     |   | `-ImplicitCastExpr 0x561f41bd8250 <col:14, col:58> 'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x561f41bd8220 <col:14, col:58> 'int'
|     |   |     |-BinaryOperator 0x561f41bd8160 <col:14, col:42> 'int' '&&'
|     |   |     | |-BinaryOperator 0x561f41bd8080 <col:14, col:23> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x561f41bd8050 <col:14> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x561f41bd8020 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x561f41bd7fe0 <col:14> 'msg_t':'char' lvalue Var 0x561f41bd4968 'send2' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x561f41bd8068 <col:23> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x561f41bd8038 <col:23> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x561f41bd8000 <col:23> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x561f41bd8140 <col:32, col:42> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x561f41bd8110 <col:32> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x561f41bd80e0 <col:32> 'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x561f41bd80a0 <col:32> 'char' lvalue Var 0x561f41bd4800 'p2_new' 'char'
|     |   |     |   `-ImplicitCastExpr 0x561f41bd8128 <col:42> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x561f41bd80f8 <col:42> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x561f41bd80c0 <col:42> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x561f41bd81d8 <col:50> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x561f41bd81c0 <col:50> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x561f41bd8180 <col:50> 'msg_t':'char' lvalue Var 0x561f41bd4968 'send2' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x561f41bd8208 <col:58> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x561f41bd81f0 <col:58> 'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x561f41bd81a0 <col:58> 'char' lvalue Var 0x561f41bd4800 'p2_new' 'char'
|     |   `-BinaryOperator 0x561f41bd8300 <line:149:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x561f41bd8288 <col:5> '_Bool' lvalue Var 0x561f41bd49e0 'mode2' '_Bool'
|     |     `-CStyleCastExpr 0x561f41bd82d8 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x561f41bd82a8 <col:20> 'int' 1
|     `-ReturnStmt 0x561f41bd8368 <line:151:3>
|-FunctionDecl 0x561f41bd8458 <line:154:1, line:178:1> line:154:6 used node3 'void (void)'
| `-CompoundStmt 0x561f41bd90c0 <line:155:1, line:178:1>
|   |-DeclStmt 0x561f41bd8570 <line:156:3, col:12>
|   | `-VarDecl 0x561f41bd8508 <col:3, col:9> col:9 used m3 'msg_t':'char'
|   `-CompoundStmt 0x561f41bd9098 <line:158:3, line:177:1>
|     |-BinaryOperator 0x561f41bd85e0 <line:159:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x561f41bd8588 <col:3> 'msg_t':'char' lvalue Var 0x561f41bd8508 'm3' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x561f41bd85c8 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x561f41bd85a8 <col:8> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x561f41bd9060 <line:160:3, line:175:3> has_else
|     | |-ImplicitCastExpr 0x561f41bd8620 <line:160:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x561f41bd8600 <col:7> '_Bool' lvalue Var 0x561f41bd4d28 'mode3' '_Bool'
|     | |-CompoundStmt 0x561f41bd8cb0 <col:14, line:172:3>
|     | | |-BinaryOperator 0x561f41bd8690 <line:161:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x561f41bd8638 <col:5> 'msg_t':'char' lvalue Var 0x561f41bd8508 'm3' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x561f41bd8678 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561f41bd8658 <col:10> 'char' lvalue Var 0x561f41bd4788 'p2_old' 'char'
|     | | |-BinaryOperator 0x561f41bd8708 <line:162:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x561f41bd86b0 <col:5> 'char' lvalue Var 0x561f41bd4788 'p2_old' 'char'
|     | | | `-ImplicitCastExpr 0x561f41bd86f0 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561f41bd86d0 <col:14> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x561f41bd8c00 <line:163:5, line:170:5>
|     | | | |-BinaryOperator 0x561f41bd8818 <line:163:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x561f41bd8778 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x561f41bd8760 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x561f41bd8728 <col:15> 'msg_t':'char' lvalue Var 0x561f41bd8508 'm3' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x561f41bd87f0 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x561f41bd87d8 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x561f41bd87a0 <col:27> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x561f41bd8be8 <col:34, line:170:5>
|     | | |   `-IfStmt 0x561f41bd8bc0 <line:164:7, line:169:7> has_else
|     | | |     |-BinaryOperator 0x561f41bd8928 <line:164:11, col:28> 'int' '>'
|     | | |     | |-CStyleCastExpr 0x561f41bd8888 <col:11, col:17> 'int' <IntegralCast>
|     | | |     | | `-ImplicitCastExpr 0x561f41bd8870 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     | |   `-DeclRefExpr 0x561f41bd8838 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd8508 'm3' 'msg_t':'char'
|     | | |     | `-CStyleCastExpr 0x561f41bd8900 <col:22, col:28> 'int' <IntegralCast>
|     | | |     |   `-ImplicitCastExpr 0x561f41bd88e8 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     `-DeclRefExpr 0x561f41bd88b0 <col:28> 'char' lvalue Var 0x561f41bd4bc0 'id3' 'char'
|     | | |     |-CompoundStmt 0x561f41bd89d0 <col:33, line:166:7>
|     | | |     | `-BinaryOperator 0x561f41bd89b0 <line:165:9, col:17> 'msg_t':'char' '='
|     | | |     |   |-DeclRefExpr 0x561f41bd8948 <col:9> 'msg_t':'char' lvalue Var 0x561f41bd4cb0 'send3' 'msg_t':'char'
|     | | |     |   `-ImplicitCastExpr 0x561f41bd8988 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |     |     `-DeclRefExpr 0x561f41bd8968 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd8508 'm3' 'msg_t':'char'
|     | | |     `-IfStmt 0x561f41bd8ba8 <line:167:7, line:169:7>
|     | | |       |-BinaryOperator 0x561f41bd8ad8 <line:167:11, col:29> 'int' '=='
|     | | |       | |-CStyleCastExpr 0x561f41bd8a38 <col:11, col:17> 'int' <IntegralCast>
|     | | |       | | `-ImplicitCastExpr 0x561f41bd8a20 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |       | |   `-DeclRefExpr 0x561f41bd89e8 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd8508 'm3' 'msg_t':'char'
|     | | |       | `-CStyleCastExpr 0x561f41bd8ab0 <col:23, col:29> 'int' <IntegralCast>
|     | | |       |   `-ImplicitCastExpr 0x561f41bd8a98 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |       |     `-DeclRefExpr 0x561f41bd8a60 <col:29> 'char' lvalue Var 0x561f41bd4bc0 'id3' 'char'
|     | | |       `-CompoundStmt 0x561f41bd8b90 <col:34, line:169:7>
|     | | |         `-BinaryOperator 0x561f41bd8b70 <line:168:9, col:21> 'char' '='
|     | | |           |-DeclRefExpr 0x561f41bd8af8 <col:9> 'char' lvalue Var 0x561f41bd4c38 'st3' 'char'
|     | | |           `-CStyleCastExpr 0x561f41bd8b48 <col:15, col:21> 'char' <IntegralCast>
|     | | |             `-IntegerLiteral 0x561f41bd8b18 <col:21> 'int' 1
|     | | `-BinaryOperator 0x561f41bd8c90 <line:171:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x561f41bd8c18 <col:5> '_Bool' lvalue Var 0x561f41bd4d28 'mode3' '_Bool'
|     | |   `-CStyleCastExpr 0x561f41bd8c68 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x561f41bd8c38 <col:20> 'int' 0
|     | `-CompoundStmt 0x561f41bd9040 <line:172:10, line:175:3>
|     |   |-BinaryOperator 0x561f41bd8f88 <line:173:5, col:58> 'char' '='
|     |   | |-DeclRefExpr 0x561f41bd8ce0 <col:5> 'char' lvalue Var 0x561f41bd4b48 'p3_new' 'char'
|     |   | `-ImplicitCastExpr 0x561f41bd8f70 <col:14, col:58> 'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x561f41bd8f40 <col:14, col:58> 'int'
|     |   |     |-BinaryOperator 0x561f41bd8e80 <col:14, col:42> 'int' '&&'
|     |   |     | |-BinaryOperator 0x561f41bd8da0 <col:14, col:23> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x561f41bd8d70 <col:14> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x561f41bd8d40 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x561f41bd8d00 <col:14> 'msg_t':'char' lvalue Var 0x561f41bd4cb0 'send3' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x561f41bd8d88 <col:23> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x561f41bd8d58 <col:23> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x561f41bd8d20 <col:23> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x561f41bd8e60 <col:32, col:42> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x561f41bd8e30 <col:32> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x561f41bd8e00 <col:32> 'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x561f41bd8dc0 <col:32> 'char' lvalue Var 0x561f41bd4b48 'p3_new' 'char'
|     |   |     |   `-ImplicitCastExpr 0x561f41bd8e48 <col:42> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x561f41bd8e18 <col:42> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x561f41bd8de0 <col:42> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x561f41bd8ef8 <col:50> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x561f41bd8ee0 <col:50> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x561f41bd8ea0 <col:50> 'msg_t':'char' lvalue Var 0x561f41bd4cb0 'send3' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x561f41bd8f28 <col:58> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x561f41bd8f10 <col:58> 'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x561f41bd8ec0 <col:58> 'char' lvalue Var 0x561f41bd4b48 'p3_new' 'char'
|     |   `-BinaryOperator 0x561f41bd9020 <line:174:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x561f41bd8fa8 <col:5> '_Bool' lvalue Var 0x561f41bd4d28 'mode3' '_Bool'
|     |     `-CStyleCastExpr 0x561f41bd8ff8 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x561f41bd8fc8 <col:20> 'int' 1
|     `-ReturnStmt 0x561f41bd9088 <line:176:3>
|-FunctionDecl 0x561f41bd9178 <line:179:1, line:203:1> line:179:6 used node4 'void (void)'
| `-CompoundStmt 0x561f41bd9df0 <line:180:1, line:203:1>
|   |-DeclStmt 0x561f41bd9290 <line:181:3, col:12>
|   | `-VarDecl 0x561f41bd9228 <col:3, col:9> col:9 used m4 'msg_t':'char'
|   `-CompoundStmt 0x561f41bd9dc8 <line:183:3, line:202:1>
|     |-BinaryOperator 0x561f41bd9300 <line:184:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x561f41bd92a8 <col:3> 'msg_t':'char' lvalue Var 0x561f41bd9228 'm4' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x561f41bd92e8 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x561f41bd92c8 <col:8> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x561f41bd9d90 <line:185:3, line:200:3> has_else
|     | |-ImplicitCastExpr 0x561f41bd9340 <line:185:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x561f41bd9320 <col:7> '_Bool' lvalue Var 0x561f41bd5070 'mode4' '_Bool'
|     | |-CompoundStmt 0x561f41bd99e0 <col:14, line:197:3>
|     | | |-BinaryOperator 0x561f41bd93b0 <line:186:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x561f41bd9358 <col:5> 'msg_t':'char' lvalue Var 0x561f41bd9228 'm4' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x561f41bd9398 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561f41bd9378 <col:10> 'char' lvalue Var 0x561f41bd4ad0 'p3_old' 'char'
|     | | |-BinaryOperator 0x561f41bd9428 <line:187:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x561f41bd93d0 <col:5> 'char' lvalue Var 0x561f41bd4ad0 'p3_old' 'char'
|     | | | `-ImplicitCastExpr 0x561f41bd9410 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561f41bd93f0 <col:14> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x561f41bd9910 <line:188:5, line:195:5>
|     | | | |-BinaryOperator 0x561f41bd9538 <line:188:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x561f41bd9498 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x561f41bd9480 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x561f41bd9448 <col:15> 'msg_t':'char' lvalue Var 0x561f41bd9228 'm4' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x561f41bd9510 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x561f41bd94f8 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x561f41bd94c0 <col:27> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x561f41bd98f8 <col:34, line:195:5>
|     | | |   `-IfStmt 0x561f41bd98d0 <line:189:7, line:194:7> has_else
|     | | |     |-BinaryOperator 0x561f41bd9648 <line:189:11, col:28> 'int' '>'
|     | | |     | |-CStyleCastExpr 0x561f41bd95a8 <col:11, col:17> 'int' <IntegralCast>
|     | | |     | | `-ImplicitCastExpr 0x561f41bd9590 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     | |   `-DeclRefExpr 0x561f41bd9558 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd9228 'm4' 'msg_t':'char'
|     | | |     | `-CStyleCastExpr 0x561f41bd9620 <col:22, col:28> 'int' <IntegralCast>
|     | | |     |   `-ImplicitCastExpr 0x561f41bd9608 <col:28> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     `-DeclRefExpr 0x561f41bd95d0 <col:28> 'char' lvalue Var 0x561f41bd4f08 'id4' 'char'
|     | | |     |-CompoundStmt 0x561f41bd96e0 <col:33, line:191:7>
|     | | |     | `-BinaryOperator 0x561f41bd96c0 <line:190:9, col:17> 'msg_t':'char' '='
|     | | |     |   |-DeclRefExpr 0x561f41bd9668 <col:9> 'msg_t':'char' lvalue Var 0x561f41bd4ff8 'send4' 'msg_t':'char'
|     | | |     |   `-ImplicitCastExpr 0x561f41bd96a8 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |     |     `-DeclRefExpr 0x561f41bd9688 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd9228 'm4' 'msg_t':'char'
|     | | |     `-IfStmt 0x561f41bd98b8 <line:192:7, line:194:7>
|     | | |       |-BinaryOperator 0x561f41bd97e8 <line:192:11, col:29> 'int' '=='
|     | | |       | |-CStyleCastExpr 0x561f41bd9748 <col:11, col:17> 'int' <IntegralCast>
|     | | |       | | `-ImplicitCastExpr 0x561f41bd9730 <col:17> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |       | |   `-DeclRefExpr 0x561f41bd96f8 <col:17> 'msg_t':'char' lvalue Var 0x561f41bd9228 'm4' 'msg_t':'char'
|     | | |       | `-CStyleCastExpr 0x561f41bd97c0 <col:23, col:29> 'int' <IntegralCast>
|     | | |       |   `-ImplicitCastExpr 0x561f41bd97a8 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |       |     `-DeclRefExpr 0x561f41bd9770 <col:29> 'char' lvalue Var 0x561f41bd4f08 'id4' 'char'
|     | | |       `-CompoundStmt 0x561f41bd98a0 <col:34, line:194:7>
|     | | |         `-BinaryOperator 0x561f41bd9880 <line:193:9, col:21> 'char' '='
|     | | |           |-DeclRefExpr 0x561f41bd9808 <col:9> 'char' lvalue Var 0x561f41bd4f80 'st4' 'char'
|     | | |           `-CStyleCastExpr 0x561f41bd9858 <col:15, col:21> 'char' <IntegralCast>
|     | | |             `-IntegerLiteral 0x561f41bd9828 <col:21> 'int' 1
|     | | `-BinaryOperator 0x561f41bd99c0 <line:196:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x561f41bd9928 <col:5> '_Bool' lvalue Var 0x561f41bd5070 'mode4' '_Bool'
|     | |   `-CStyleCastExpr 0x561f41bd9978 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x561f41bd9948 <col:20> 'int' 0
|     | `-CompoundStmt 0x561f41bd9d70 <line:197:10, line:200:3>
|     |   |-BinaryOperator 0x561f41bd9cb8 <line:198:5, col:58> 'char' '='
|     |   | |-DeclRefExpr 0x561f41bd9a10 <col:5> 'char' lvalue Var 0x561f41bd4e90 'p4_new' 'char'
|     |   | `-ImplicitCastExpr 0x561f41bd9ca0 <col:14, col:58> 'char' <IntegralCast>
|     |   |   `-ConditionalOperator 0x561f41bd9c70 <col:14, col:58> 'int'
|     |   |     |-BinaryOperator 0x561f41bd9bb0 <col:14, col:42> 'int' '&&'
|     |   |     | |-BinaryOperator 0x561f41bd9ad0 <col:14, col:23> 'int' '!='
|     |   |     | | |-ImplicitCastExpr 0x561f41bd9aa0 <col:14> 'int' <IntegralCast>
|     |   |     | | | `-ImplicitCastExpr 0x561f41bd9a70 <col:14> 'msg_t':'char' <LValueToRValue>
|     |   |     | | |   `-DeclRefExpr 0x561f41bd9a30 <col:14> 'msg_t':'char' lvalue Var 0x561f41bd4ff8 'send4' 'msg_t':'char'
|     |   |     | | `-ImplicitCastExpr 0x561f41bd9ab8 <col:23> 'int' <IntegralCast>
|     |   |     | |   `-ImplicitCastExpr 0x561f41bd9a88 <col:23> 'msg_t':'char' <LValueToRValue>
|     |   |     | |     `-DeclRefExpr 0x561f41bd9a50 <col:23> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |   |     | `-BinaryOperator 0x561f41bd9b90 <col:32, col:42> 'int' '=='
|     |   |     |   |-ImplicitCastExpr 0x561f41bd9b60 <col:32> 'int' <IntegralCast>
|     |   |     |   | `-ImplicitCastExpr 0x561f41bd9b30 <col:32> 'char' <LValueToRValue>
|     |   |     |   |   `-DeclRefExpr 0x561f41bd9af0 <col:32> 'char' lvalue Var 0x561f41bd4e90 'p4_new' 'char'
|     |   |     |   `-ImplicitCastExpr 0x561f41bd9b78 <col:42> 'int' <IntegralCast>
|     |   |     |     `-ImplicitCastExpr 0x561f41bd9b48 <col:42> 'msg_t':'char' <LValueToRValue>
|     |   |     |       `-DeclRefExpr 0x561f41bd9b10 <col:42> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|     |   |     |-ImplicitCastExpr 0x561f41bd9c28 <col:50> 'int' <IntegralCast>
|     |   |     | `-ImplicitCastExpr 0x561f41bd9c10 <col:50> 'msg_t':'char' <LValueToRValue>
|     |   |     |   `-DeclRefExpr 0x561f41bd9bd0 <col:50> 'msg_t':'char' lvalue Var 0x561f41bd4ff8 'send4' 'msg_t':'char'
|     |   |     `-ImplicitCastExpr 0x561f41bd9c58 <col:58> 'int' <IntegralCast>
|     |   |       `-ImplicitCastExpr 0x561f41bd9c40 <col:58> 'char' <LValueToRValue>
|     |   |         `-DeclRefExpr 0x561f41bd9bf0 <col:58> 'char' lvalue Var 0x561f41bd4e90 'p4_new' 'char'
|     |   `-BinaryOperator 0x561f41bd9d50 <line:199:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x561f41bd9cd8 <col:5> '_Bool' lvalue Var 0x561f41bd5070 'mode4' '_Bool'
|     |     `-CStyleCastExpr 0x561f41bd9d28 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x561f41bd9cf8 <col:20> 'int' 1
|     `-ReturnStmt 0x561f41bd9db8 <line:201:3>
|-VarDecl 0x561f41bda020 <line:204:1, col:83> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x561f41bda1d8 <col:27, col:83> 'void (*[4])(void)'
|   |-UnaryOperator 0x561f41bda0a8 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x561f41bda088 <col:36> 'void (void)' Function 0x561f41bd51a0 'node1' 'void (void)'
|   |-UnaryOperator 0x561f41bda0e0 <col:48, col:50> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x561f41bda0c0 <col:50> 'void (void)' Function 0x561f41bd6ae8 'node2' 'void (void)'
|   |-UnaryOperator 0x561f41bda118 <col:62, col:64> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x561f41bda0f8 <col:64> 'void (void)' Function 0x561f41bd8458 'node3' 'void (void)'
|   `-UnaryOperator 0x561f41bda150 <col:76, col:78> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x561f41bda130 <col:78> 'void (void)' Function 0x561f41bd9178 'node4' 'void (void)'
|-FunctionDecl 0x561f41bda308 <line:205:1, line:305:1> line:205:5 used init 'int (void)'
| `-CompoundStmt 0x561f41be0d00 <line:206:1, line:305:1>
|   |-DeclStmt 0x561f41bda428 <line:207:3, col:11>
|   | `-VarDecl 0x561f41bda3c0 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x561f41be0cd0 <line:209:3, line:304:1>
|     |-IfStmt 0x561f41be0c40 <line:210:3, line:302:3> has_else
|     | |-BinaryOperator 0x561f41bda4d8 <line:210:7, col:19> 'int' '=='
|     | | |-CStyleCastExpr 0x561f41bda490 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x561f41bda478 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x561f41bda440 <col:13> 'unsigned char' lvalue Var 0x561f41bd4350 'r1' 'unsigned char'
|     | | `-IntegerLiteral 0x561f41bda4b8 <col:19> 'int' 0
|     | |-CompoundStmt 0x561f41be0bb0 <col:22, line:300:3>
|     | | `-IfStmt 0x561f41be0b88 <line:211:5, line:299:5> has_else
|     | |   |-BinaryOperator 0x561f41bda590 <line:211:9, col:22> 'int' '>='
|     | |   | |-CStyleCastExpr 0x561f41bda548 <col:9, col:15> 'int' <IntegralCast>
|     | |   | | `-ImplicitCastExpr 0x561f41bda530 <col:15> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   | |   `-DeclRefExpr 0x561f41bda4f8 <col:15> 'char' lvalue Var 0x561f41bd4530 'id1' 'char'
|     | |   | `-IntegerLiteral 0x561f41bda570 <col:22> 'int' 0
|     | |   |-CompoundStmt 0x561f41be0af8 <col:25, line:297:5>
|     | |   | `-IfStmt 0x561f41be0ad0 <line:212:7, line:296:7> has_else
|     | |   |   |-BinaryOperator 0x561f41bda648 <line:212:11, col:24> 'int' '=='
|     | |   |   | |-CStyleCastExpr 0x561f41bda600 <col:11, col:17> 'int' <IntegralCast>
|     | |   |   | | `-ImplicitCastExpr 0x561f41bda5e8 <col:17> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   | |   `-DeclRefExpr 0x561f41bda5b0 <col:17> 'char' lvalue Var 0x561f41bd45a8 'st1' 'char'
|     | |   |   | `-IntegerLiteral 0x561f41bda628 <col:24> 'int' 0
|     | |   |   |-CompoundStmt 0x561f41be0a40 <col:27, line:294:7>
|     | |   |   | `-IfStmt 0x561f41be0a18 <line:213:9, line:293:9> has_else
|     | |   |   |   |-BinaryOperator 0x561f41bda758 <line:213:13, col:34> 'int' '=='
|     | |   |   |   | |-CStyleCastExpr 0x561f41bda6b8 <col:13, col:19> 'int' <IntegralCast>
|     | |   |   |   | | `-ImplicitCastExpr 0x561f41bda6a0 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   | |   `-DeclRefExpr 0x561f41bda668 <col:19> 'msg_t':'char' lvalue Var 0x561f41bd4620 'send1' 'msg_t':'char'
|     | |   |   |   | `-CStyleCastExpr 0x561f41bda730 <col:28, col:34> 'int' <IntegralCast>
|     | |   |   |   |   `-ImplicitCastExpr 0x561f41bda718 <col:34> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |     `-DeclRefExpr 0x561f41bda6e0 <col:34> 'char' lvalue Var 0x561f41bd4530 'id1' 'char'
|     | |   |   |   |-CompoundStmt 0x561f41be0988 <col:39, line:291:9>
|     | |   |   |   | `-IfStmt 0x561f41be0960 <line:214:11, line:290:11> has_else
|     | |   |   |   |   |-BinaryOperator 0x561f41bda810 <line:214:15, col:30> 'int' '=='
|     | |   |   |   |   | |-CStyleCastExpr 0x561f41bda7c8 <col:15, col:21> 'int' <IntegralCast>
|     | |   |   |   |   | | `-ImplicitCastExpr 0x561f41bda7b0 <col:21> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   | |   `-DeclRefExpr 0x561f41bda778 <col:21> '_Bool' lvalue Var 0x561f41bd4698 'mode1' '_Bool'
|     | |   |   |   |   | `-IntegerLiteral 0x561f41bda7f0 <col:30> 'int' 0
|     | |   |   |   |   |-CompoundStmt 0x561f41be08d0 <col:33, line:288:11>
|     | |   |   |   |   | `-IfStmt 0x561f41be08a8 <line:215:13, line:287:13> has_else
|     | |   |   |   |   |   |-BinaryOperator 0x561f41bda8c8 <line:215:17, col:30> 'int' '>='
|     | |   |   |   |   |   | |-CStyleCastExpr 0x561f41bda880 <col:17, col:23> 'int' <IntegralCast>
|     | |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bda868 <col:23> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bda830 <col:23> 'char' lvalue Var 0x561f41bd4878 'id2' 'char'
|     | |   |   |   |   |   | `-IntegerLiteral 0x561f41bda8a8 <col:30> 'int' 0
|     | |   |   |   |   |   |-CompoundStmt 0x561f41be0818 <col:33, line:285:13>
|     | |   |   |   |   |   | `-IfStmt 0x561f41be07f0 <line:216:15, line:284:15> has_else
|     | |   |   |   |   |   |   |-BinaryOperator 0x561f41bda980 <line:216:19, col:32> 'int' '=='
|     | |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bda938 <col:19, col:25> 'int' <IntegralCast>
|     | |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bda920 <col:25> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bda8e8 <col:25> 'char' lvalue Var 0x561f41bd48f0 'st2' 'char'
|     | |   |   |   |   |   |   | `-IntegerLiteral 0x561f41bda960 <col:32> 'int' 0
|     | |   |   |   |   |   |   |-CompoundStmt 0x561f41be0760 <col:35, line:282:15>
|     | |   |   |   |   |   |   | `-IfStmt 0x561f41be0738 <line:217:17, line:281:17> has_else
|     | |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdb6e0 <line:217:21, col:42> 'int' '=='
|     | |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdb640 <col:21, col:27> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdb628 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bda9a0 <col:27> 'msg_t':'char' lvalue Var 0x561f41bd4968 'send2' 'msg_t':'char'
|     | |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdb6b8 <col:36, col:42> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdb6a0 <col:42> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdb668 <col:42> 'char' lvalue Var 0x561f41bd4878 'id2' 'char'
|     | |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be06a8 <col:47, line:279:17>
|     | |   |   |   |   |   |   |   | `-IfStmt 0x561f41be0680 <line:218:19, line:278:19> has_else
|     | |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdb798 <line:218:23, col:38> 'int' '=='
|     | |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdb750 <col:23, col:29> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdb738 <col:29> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdb700 <col:29> '_Bool' lvalue Var 0x561f41bd49e0 'mode2' '_Bool'
|     | |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x561f41bdb778 <col:38> 'int' 0
|     | |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be05f0 <col:41, line:276:19>
|     | |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be05c8 <line:219:21, line:275:21> has_else
|     | |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdb850 <line:219:25, col:38> 'int' '>='
|     | |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdb808 <col:25, col:31> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdb7f0 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdb7b8 <col:31> 'char' lvalue Var 0x561f41bd4bc0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x561f41bdb830 <col:38> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be0538 <col:41, line:273:21>
|     | |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be0510 <line:220:23, line:272:23> has_else
|     | |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdb908 <line:220:27, col:40> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdb8c0 <col:27, col:33> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdb8a8 <col:33> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdb870 <col:33> 'char' lvalue Var 0x561f41bd4c38 'st3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x561f41bdb8e8 <col:40> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be0480 <col:43, line:270:23>
|     | |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be0458 <line:221:25, line:269:25> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdba18 <line:221:29, col:50> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdb978 <col:29, col:35> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdb960 <col:35> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdb928 <col:35> 'msg_t':'char' lvalue Var 0x561f41bd4cb0 'send3' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdb9f0 <col:44, col:50> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdb9d8 <col:50> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdb9a0 <col:50> 'char' lvalue Var 0x561f41bd4bc0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be03c8 <col:55, line:267:25>
|     | |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be03a0 <line:222:27, line:266:27> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdbad0 <line:222:31, col:46> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdba88 <col:31, col:37> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdba70 <col:37> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdba38 <col:37> '_Bool' lvalue Var 0x561f41bd4d28 'mode3' '_Bool'
|     | |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x561f41bdbab0 <col:46> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be0310 <col:49, line:264:27>
|     | |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be02e8 <line:223:29, line:263:29> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdbb88 <line:223:33, col:46> 'int' '>='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdbb40 <col:33, col:39> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdbb28 <col:39> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdbaf0 <col:39> 'char' lvalue Var 0x561f41bd4f08 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x561f41bdbb68 <col:46> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be0258 <col:49, line:261:29>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be0230 <line:224:31, line:260:31> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdbc40 <line:224:35, col:48> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdbbf8 <col:35, col:41> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdbbe0 <col:41> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdbba8 <col:41> 'char' lvalue Var 0x561f41bd4f80 'st4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x561f41bdbc20 <col:48> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be01a0 <col:51, line:258:31>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be0178 <line:225:33, line:257:33> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdbd50 <line:225:37, col:58> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdbcb0 <col:37, col:43> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdbc98 <col:43> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdbc60 <col:43> 'msg_t':'char' lvalue Var 0x561f41bd4ff8 'send4' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdbd28 <col:52, col:58> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdbd10 <col:58> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdbcd8 <col:58> 'char' lvalue Var 0x561f41bd4f08 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be00e8 <col:63, line:255:33>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be00c0 <line:226:35, line:254:35> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdbe08 <line:226:39, col:54> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdbdc0 <col:39, col:45> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdbda8 <col:45> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdbd70 <col:45> '_Bool' lvalue Var 0x561f41bd5070 'mode4' '_Bool'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x561f41bdbde8 <col:54> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41be0030 <col:57, line:252:35>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41be0008 <line:227:37, line:251:37> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdbf18 <line:227:41, col:60> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdbe78 <col:41, col:47> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdbe60 <col:47> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdbe28 <col:47> 'char' lvalue Var 0x561f41bd4530 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdbef0 <col:54, col:60> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdbed8 <col:60> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdbea0 <col:60> 'char' lvalue Var 0x561f41bd4878 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41bdff78 <col:65, line:249:37>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41bdff50 <line:228:39, line:248:39> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdc028 <line:228:43, col:62> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdbf88 <col:43, col:49> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdbf70 <col:49> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdbf38 <col:49> 'char' lvalue Var 0x561f41bd4530 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdc000 <col:56, col:62> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdbfe8 <col:62> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdbfb0 <col:62> 'char' lvalue Var 0x561f41bd4bc0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41bdfec0 <col:67, line:246:39>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41bdfe98 <line:229:41, line:245:41> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdc138 <line:229:45, col:64> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdc098 <col:45, col:51> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdc080 <col:51> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdc048 <col:51> 'char' lvalue Var 0x561f41bd4530 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdc110 <col:58, col:64> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdc0f8 <col:64> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdc0c0 <col:64> 'char' lvalue Var 0x561f41bd4f08 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41bdfe08 <col:69, line:243:41>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41bdfde0 <line:230:43, line:242:43> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdc248 <line:230:47, col:66> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdc1a8 <col:47, col:53> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdc190 <col:53> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdc158 <col:53> 'char' lvalue Var 0x561f41bd4878 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdc220 <col:60, col:66> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdc208 <col:66> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdc1d0 <col:66> 'char' lvalue Var 0x561f41bd4bc0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41bdfd50 <col:71, line:240:43>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41bdfd28 <line:231:45, line:239:45> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdc358 <line:231:49, col:68> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdc2b8 <col:49, col:55> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdc2a0 <col:55> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdc268 <col:55> 'char' lvalue Var 0x561f41bd4878 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdc330 <col:62, col:68> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdc318 <col:68> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdc2e0 <col:68> 'char' lvalue Var 0x561f41bd4f08 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41bdc5a0 <col:73, line:237:45>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x561f41bdc578 <line:232:47, line:236:47> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x561f41bdc468 <line:232:51, col:70> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x561f41bdc3c8 <col:51, col:57> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x561f41bdc3b0 <col:57> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x561f41bdc378 <col:57> 'char' lvalue Var 0x561f41bd4bc0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x561f41bdc440 <col:64, col:70> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x561f41bdc428 <col:70> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x561f41bdc3f0 <col:70> 'char' lvalue Var 0x561f41bd4f08 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x561f41bdc4e8 <col:75, line:234:47>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-BinaryOperator 0x561f41bdc4c8 <line:233:49, col:55> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-DeclRefExpr 0x561f41bdc488 <col:49> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-IntegerLiteral 0x561f41bdc4a8 <col:55> 'int' 1
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41bdc560 <line:234:54, line:236:47>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41bdc540 <line:235:49, col:55> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41bdc500 <col:49> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41bdc520 <col:55> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41bdfd10 <line:237:52, line:239:45>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41bdfcf0 <line:238:47, col:53> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41bdc5b8 <col:47> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41bdc5d8 <col:53> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41bdfdc8 <line:240:50, line:242:43>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41bdfda8 <line:241:45, col:51> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41bdfd68 <col:45> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41bdfd88 <col:51> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41bdfe80 <line:243:48, line:245:41>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41bdfe60 <line:244:43, col:49> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41bdfe20 <col:43> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41bdfe40 <col:49> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41bdff38 <line:246:46, line:248:39>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41bdff18 <line:247:41, col:47> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41bdfed8 <col:41> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41bdfef8 <col:47> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41bdfff0 <line:249:44, line:251:37>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41bdffd0 <line:250:39, col:45> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41bdff90 <col:39> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41bdffb0 <col:45> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be00a8 <line:252:42, line:254:35>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be0088 <line:253:37, col:43> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be0048 <col:37> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be0068 <col:43> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be0160 <line:255:40, line:257:33>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be0140 <line:256:35, col:41> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be0100 <col:35> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be0120 <col:41> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be0218 <line:258:38, line:260:31>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be01f8 <line:259:33, col:39> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be01b8 <col:33> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be01d8 <col:39> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be02d0 <line:261:36, line:263:29>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be02b0 <line:262:31, col:37> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be0270 <col:31> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be0290 <col:37> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be0388 <line:264:34, line:266:27>
|     | |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be0368 <line:265:29, col:35> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be0328 <col:29> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be0348 <col:35> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be0440 <line:267:32, line:269:25>
|     | |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be0420 <line:268:27, col:33> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be03e0 <col:27> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be0400 <col:33> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be04f8 <line:270:30, line:272:23>
|     | |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be04d8 <line:271:25, col:31> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be0498 <col:25> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be04b8 <col:31> 'int' 0
|     | |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be05b0 <line:273:28, line:275:21>
|     | |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be0590 <line:274:23, col:29> 'int' '='
|     | |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be0550 <col:23> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be0570 <col:29> 'int' 0
|     | |   |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be0668 <line:276:26, line:278:19>
|     | |   |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be0648 <line:277:21, col:27> 'int' '='
|     | |   |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be0608 <col:21> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be0628 <col:27> 'int' 0
|     | |   |   |   |   |   |   |   `-CompoundStmt 0x561f41be0720 <line:279:24, line:281:17>
|     | |   |   |   |   |   |   |     `-BinaryOperator 0x561f41be0700 <line:280:19, col:25> 'int' '='
|     | |   |   |   |   |   |   |       |-DeclRefExpr 0x561f41be06c0 <col:19> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |   |       `-IntegerLiteral 0x561f41be06e0 <col:25> 'int' 0
|     | |   |   |   |   |   |   `-CompoundStmt 0x561f41be07d8 <line:282:22, line:284:15>
|     | |   |   |   |   |   |     `-BinaryOperator 0x561f41be07b8 <line:283:17, col:23> 'int' '='
|     | |   |   |   |   |   |       |-DeclRefExpr 0x561f41be0778 <col:17> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |   |       `-IntegerLiteral 0x561f41be0798 <col:23> 'int' 0
|     | |   |   |   |   |   `-CompoundStmt 0x561f41be0890 <line:285:20, line:287:13>
|     | |   |   |   |   |     `-BinaryOperator 0x561f41be0870 <line:286:15, col:21> 'int' '='
|     | |   |   |   |   |       |-DeclRefExpr 0x561f41be0830 <col:15> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |   |       `-IntegerLiteral 0x561f41be0850 <col:21> 'int' 0
|     | |   |   |   |   `-CompoundStmt 0x561f41be0948 <line:288:18, line:290:11>
|     | |   |   |   |     `-BinaryOperator 0x561f41be0928 <line:289:13, col:19> 'int' '='
|     | |   |   |   |       |-DeclRefExpr 0x561f41be08e8 <col:13> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |   |       `-IntegerLiteral 0x561f41be0908 <col:19> 'int' 0
|     | |   |   |   `-CompoundStmt 0x561f41be0a00 <line:291:16, line:293:9>
|     | |   |   |     `-BinaryOperator 0x561f41be09e0 <line:292:11, col:17> 'int' '='
|     | |   |   |       |-DeclRefExpr 0x561f41be09a0 <col:11> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |   |       `-IntegerLiteral 0x561f41be09c0 <col:17> 'int' 0
|     | |   |   `-CompoundStmt 0x561f41be0ab8 <line:294:14, line:296:7>
|     | |   |     `-BinaryOperator 0x561f41be0a98 <line:295:9, col:15> 'int' '='
|     | |   |       |-DeclRefExpr 0x561f41be0a58 <col:9> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |   |       `-IntegerLiteral 0x561f41be0a78 <col:15> 'int' 0
|     | |   `-CompoundStmt 0x561f41be0b70 <line:297:12, line:299:5>
|     | |     `-BinaryOperator 0x561f41be0b50 <line:298:7, col:13> 'int' '='
|     | |       |-DeclRefExpr 0x561f41be0b10 <col:7> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     | |       `-IntegerLiteral 0x561f41be0b30 <col:13> 'int' 0
|     | `-CompoundStmt 0x561f41be0c28 <line:300:10, line:302:3>
|     |   `-BinaryOperator 0x561f41be0c08 <line:301:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x561f41be0bc8 <col:5> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|     |     `-IntegerLiteral 0x561f41be0be8 <col:11> 'int' 0
|     `-ReturnStmt 0x561f41be0cc0 <line:303:3, col:14>
|       `-ImplicitCastExpr 0x561f41be0ca8 <col:10, col:14> 'int' <LValueToRValue>
|         `-ParenExpr 0x561f41be0c88 <col:10, col:14> 'int' lvalue
|           `-DeclRefExpr 0x561f41be0c68 <col:11> 'int' lvalue Var 0x561f41bda3c0 'tmp' 'int'
|-FunctionDecl 0x561f41be0dc0 <line:306:1, line:333:1> line:306:5 used check 'int (void)'
| `-CompoundStmt 0x561f41be1d30 <line:307:1, line:333:1>
|   |-DeclStmt 0x561f41be0ee0 <line:308:3, col:11>
|   | `-VarDecl 0x561f41be0e78 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x561f41be1d10 <line:310:3, line:332:1>
|     |-IfStmt 0x561f41be1c68 <line:311:3, line:330:3> has_else
|     | |-BinaryOperator 0x561f41be1198 <line:311:7, col:60> 'int' '<='
|     | | |-BinaryOperator 0x561f41be1158 <col:7, col:53> 'int' '+'
|     | | | |-ParenExpr 0x561f41be10c0 <col:7, col:43> 'int'
|     | | | | `-BinaryOperator 0x561f41be10a0 <col:8, col:40> 'int' '+'
|     | | | |   |-ParenExpr 0x561f41be1008 <col:8, col:30> 'int'
|     | | | |   | `-BinaryOperator 0x561f41be0fe8 <col:9, col:27> 'int' '+'
|     | | | |   |   |-CStyleCastExpr 0x561f41be0f48 <col:9, col:15> 'int' <IntegralCast>
|     | | | |   |   | `-ImplicitCastExpr 0x561f41be0f30 <col:15> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |   |   |   `-DeclRefExpr 0x561f41be0ef8 <col:15> 'char' lvalue Var 0x561f41bd45a8 'st1' 'char'
|     | | | |   |   `-CStyleCastExpr 0x561f41be0fc0 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   |     `-ImplicitCastExpr 0x561f41be0fa8 <col:27> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |   |       `-DeclRefExpr 0x561f41be0f70 <col:27> 'char' lvalue Var 0x561f41bd48f0 'st2' 'char'
|     | | | |   `-CStyleCastExpr 0x561f41be1078 <col:34, col:40> 'int' <IntegralCast>
|     | | | |     `-ImplicitCastExpr 0x561f41be1060 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |       `-DeclRefExpr 0x561f41be1028 <col:40> 'char' lvalue Var 0x561f41bd4c38 'st3' 'char'
|     | | | `-CStyleCastExpr 0x561f41be1130 <col:47, col:53> 'int' <IntegralCast>
|     | | |   `-ImplicitCastExpr 0x561f41be1118 <col:53> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     `-DeclRefExpr 0x561f41be10e0 <col:53> 'char' lvalue Var 0x561f41bd4f80 'st4' 'char'
|     | | `-IntegerLiteral 0x561f41be1178 <col:60> 'int' 1
|     | |-CompoundStmt 0x561f41be1bd8 <col:63, line:328:3>
|     | | `-IfStmt 0x561f41be1bb0 <line:312:5, line:327:5> has_else
|     | |   |-BinaryOperator 0x561f41be1250 <line:312:9, col:21> 'int' '>='
|     | |   | |-CStyleCastExpr 0x561f41be1208 <col:9, col:15> 'int' <IntegralCast>
|     | |   | | `-ImplicitCastExpr 0x561f41be11f0 <col:15> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | |   | |   `-DeclRefExpr 0x561f41be11b8 <col:15> 'unsigned char' lvalue Var 0x561f41bd4350 'r1' 'unsigned char'
|     | |   | `-IntegerLiteral 0x561f41be1230 <col:21> 'int' 4
|     | |   |-CompoundStmt 0x561f41be12d8 <col:24, line:314:5>
|     | |   | `-GotoStmt 0x561f41be12c0 <line:313:7, col:12> '_L' 0x561f41be1270
|     | |   `-IfStmt 0x561f41be1b88 <line:315:5, line:327:5> has_else
|     | |     |-BinaryOperator 0x561f41be1590 <line:315:9, col:62> 'int' '=='
|     | |     | |-BinaryOperator 0x561f41be1550 <col:9, col:55> 'int' '+'
|     | |     | | |-ParenExpr 0x561f41be14b8 <col:9, col:45> 'int'
|     | |     | | | `-BinaryOperator 0x561f41be1498 <col:10, col:42> 'int' '+'
|     | |     | | |   |-ParenExpr 0x561f41be1400 <col:10, col:32> 'int'
|     | |     | | |   | `-BinaryOperator 0x561f41be13e0 <col:11, col:29> 'int' '+'
|     | |     | | |   |   |-CStyleCastExpr 0x561f41be1340 <col:11, col:17> 'int' <IntegralCast>
|     | |     | | |   |   | `-ImplicitCastExpr 0x561f41be1328 <col:17> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |   |   |   `-DeclRefExpr 0x561f41be12f0 <col:17> 'char' lvalue Var 0x561f41bd45a8 'st1' 'char'
|     | |     | | |   |   `-CStyleCastExpr 0x561f41be13b8 <col:23, col:29> 'int' <IntegralCast>
|     | |     | | |   |     `-ImplicitCastExpr 0x561f41be13a0 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |   |       `-DeclRefExpr 0x561f41be1368 <col:29> 'char' lvalue Var 0x561f41bd48f0 'st2' 'char'
|     | |     | | |   `-CStyleCastExpr 0x561f41be1470 <col:36, col:42> 'int' <IntegralCast>
|     | |     | | |     `-ImplicitCastExpr 0x561f41be1458 <col:42> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |       `-DeclRefExpr 0x561f41be1420 <col:42> 'char' lvalue Var 0x561f41bd4c38 'st3' 'char'
|     | |     | | `-CStyleCastExpr 0x561f41be1528 <col:49, col:55> 'int' <IntegralCast>
|     | |     | |   `-ImplicitCastExpr 0x561f41be1510 <col:55> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | |     `-DeclRefExpr 0x561f41be14d8 <col:55> 'char' lvalue Var 0x561f41bd4f80 'st4' 'char'
|     | |     | `-IntegerLiteral 0x561f41be1570 <col:62> 'int' 0
|     | |     |-CompoundStmt 0x561f41be1af8 <col:65, line:325:5>
|     | |     | `-LabelStmt 0x561f41be1ae0 <line:316:7, line:324:7> '_L'
|     | |     |   `-IfStmt 0x561f41be1ab8 <line:317:7, line:324:7> has_else
|     | |     |     |-BinaryOperator 0x561f41be1648 <line:317:11, col:22> 'int' '<'
|     | |     |     | |-CStyleCastExpr 0x561f41be1600 <col:11, col:17> 'int' <IntegralCast>
|     | |     |     | | `-ImplicitCastExpr 0x561f41be15e8 <col:17> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | |     |     | |   `-DeclRefExpr 0x561f41be15b0 <col:17> 'unsigned char' lvalue Var 0x561f41bd4350 'r1' 'unsigned char'
|     | |     |     | `-IntegerLiteral 0x561f41be1628 <col:22> 'int' 4
|     | |     |     |-CompoundStmt 0x561f41be16c8 <col:25, line:319:7>
|     | |     |     | `-BinaryOperator 0x561f41be16a8 <line:318:9, col:15> 'int' '='
|     | |     |     |   |-DeclRefExpr 0x561f41be1668 <col:9> 'int' lvalue Var 0x561f41be0e78 'tmp' 'int'
|     | |     |     |   `-IntegerLiteral 0x561f41be1688 <col:15> 'int' 1
|     | |     |     `-IfStmt 0x561f41be1a90 <line:320:7, line:324:7> has_else
|     | |     |       |-BinaryOperator 0x561f41be1980 <line:320:11, col:64> 'int' '=='
|     | |     |       | |-BinaryOperator 0x561f41be1940 <col:11, col:57> 'int' '+'
|     | |     |       | | |-ParenExpr 0x561f41be18a8 <col:11, col:47> 'int'
|     | |     |       | | | `-BinaryOperator 0x561f41be1888 <col:12, col:44> 'int' '+'
|     | |     |       | | |   |-ParenExpr 0x561f41be17f0 <col:12, col:34> 'int'
|     | |     |       | | |   | `-BinaryOperator 0x561f41be17d0 <col:13, col:31> 'int' '+'
|     | |     |       | | |   |   |-CStyleCastExpr 0x561f41be1730 <col:13, col:19> 'int' <IntegralCast>
|     | |     |       | | |   |   | `-ImplicitCastExpr 0x561f41be1718 <col:19> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     |       | | |   |   |   `-DeclRefExpr 0x561f41be16e0 <col:19> 'char' lvalue Var 0x561f41bd45a8 'st1' 'char'
|     | |     |       | | |   |   `-CStyleCastExpr 0x561f41be17a8 <col:25, col:31> 'int' <IntegralCast>
|     | |     |       | | |   |     `-ImplicitCastExpr 0x561f41be1790 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     |       | | |   |       `-DeclRefExpr 0x561f41be1758 <col:31> 'char' lvalue Var 0x561f41bd48f0 'st2' 'char'
|     | |     |       | | |   `-CStyleCastExpr 0x561f41be1860 <col:38, col:44> 'int' <IntegralCast>
|     | |     |       | | |     `-ImplicitCastExpr 0x561f41be1848 <col:44> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     |       | | |       `-DeclRefExpr 0x561f41be1810 <col:44> 'char' lvalue Var 0x561f41bd4c38 'st3' 'char'
|     | |     |       | | `-CStyleCastExpr 0x561f41be1918 <col:51, col:57> 'int' <IntegralCast>
|     | |     |       | |   `-ImplicitCastExpr 0x561f41be1900 <col:57> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     |       | |     `-DeclRefExpr 0x561f41be18c8 <col:57> 'char' lvalue Var 0x561f41bd4f80 'st4' 'char'
|     | |     |       | `-IntegerLiteral 0x561f41be1960 <col:64> 'int' 1
|     | |     |       |-CompoundStmt 0x561f41be1a00 <col:67, line:322:7>
|     | |     |       | `-BinaryOperator 0x561f41be19e0 <line:321:9, col:15> 'int' '='
|     | |     |       |   |-DeclRefExpr 0x561f41be19a0 <col:9> 'int' lvalue Var 0x561f41be0e78 'tmp' 'int'
|     | |     |       |   `-IntegerLiteral 0x561f41be19c0 <col:15> 'int' 1
|     | |     |       `-CompoundStmt 0x561f41be1a78 <line:322:14, line:324:7>
|     | |     |         `-BinaryOperator 0x561f41be1a58 <line:323:9, col:15> 'int' '='
|     | |     |           |-DeclRefExpr 0x561f41be1a18 <col:9> 'int' lvalue Var 0x561f41be0e78 'tmp' 'int'
|     | |     |           `-IntegerLiteral 0x561f41be1a38 <col:15> 'int' 0
|     | |     `-CompoundStmt 0x561f41be1b70 <line:325:12, line:327:5>
|     | |       `-BinaryOperator 0x561f41be1b50 <line:326:7, col:13> 'int' '='
|     | |         |-DeclRefExpr 0x561f41be1b10 <col:7> 'int' lvalue Var 0x561f41be0e78 'tmp' 'int'
|     | |         `-IntegerLiteral 0x561f41be1b30 <col:13> 'int' 0
|     | `-CompoundStmt 0x561f41be1c50 <line:328:10, line:330:3>
|     |   `-BinaryOperator 0x561f41be1c30 <line:329:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x561f41be1bf0 <col:5> 'int' lvalue Var 0x561f41be0e78 'tmp' 'int'
|     |     `-IntegerLiteral 0x561f41be1c10 <col:11> 'int' 0
|     `-ReturnStmt 0x561f41be1ce8 <line:331:3, col:14>
|       `-ImplicitCastExpr 0x561f41be1cd0 <col:10, col:14> 'int' <LValueToRValue>
|         `-ParenExpr 0x561f41be1cb0 <col:10, col:14> 'int' lvalue
|           `-DeclRefExpr 0x561f41be1c90 <col:11> 'int' lvalue Var 0x561f41be0e78 'tmp' 'int'
|-FunctionDecl 0x561f41be1df0 <line:334:1, line:389:1> line:334:5 main 'int (void)'
| `-CompoundStmt 0x561f41be3980 <line:335:1, line:389:1>
|   |-DeclStmt 0x561f41be1f40 <line:336:3, col:10>
|   | `-VarDecl 0x561f41be1ed8 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x561f41be1fd8 <line:337:3, col:10>
|   | `-VarDecl 0x561f41be1f70 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x561f41be3850 <line:339:3, line:387:1>
|   | |-BinaryOperator 0x561f41be2030 <line:340:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x561f41be1ff0 <col:3> 'int' lvalue Var 0x561f41be1ed8 'c1' 'int'
|   | | `-IntegerLiteral 0x561f41be2010 <col:8> 'int' 0
|   | |-BinaryOperator 0x561f41be20f8 <line:341:3, col:32> 'unsigned char' '='
|   | | |-DeclRefExpr 0x561f41be2050 <col:3> 'unsigned char' lvalue Var 0x561f41bd4350 'r1' 'unsigned char'
|   | | `-CallExpr 0x561f41be20d8 <col:8, col:32> 'unsigned char'
|   | |   `-ImplicitCastExpr 0x561f41be20c0 <col:8> 'unsigned char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2070 <col:8> 'unsigned char (void)' Function 0x561f41bade58 '__VERIFIER_nondet_uchar' 'unsigned char (void)'
|   | |-BinaryOperator 0x561f41be21c8 <line:342:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2118 <col:3> 'char' lvalue Var 0x561f41bd4530 'id1' 'char'
|   | | `-CallExpr 0x561f41be21a8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be2190 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2138 <col:9> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be2260 <line:343:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x561f41be21e8 <col:3> 'char' lvalue Var 0x561f41bd45a8 'st1' 'char'
|   | | `-CallExpr 0x561f41be2240 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be2228 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2208 <col:9> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be22f8 <line:344:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x561f41be2280 <col:3> 'msg_t':'char' lvalue Var 0x561f41bd4620 'send1' 'msg_t':'char'
|   | | `-CallExpr 0x561f41be22d8 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be22c0 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be22a0 <col:11> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be23c8 <line:345:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x561f41be2318 <col:3> '_Bool' lvalue Var 0x561f41bd4698 'mode1' '_Bool'
|   | | `-CallExpr 0x561f41be23a8 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x561f41be2390 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2338 <col:11> '_Bool (void)' Function 0x561f41badb70 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x561f41be2460 <line:346:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x561f41be23e8 <col:3> 'char' lvalue Var 0x561f41bd4878 'id2' 'char'
|   | | `-CallExpr 0x561f41be2440 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be2428 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2408 <col:9> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be24f8 <line:347:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2480 <col:3> 'char' lvalue Var 0x561f41bd48f0 'st2' 'char'
|   | | `-CallExpr 0x561f41be24d8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be24c0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be24a0 <col:9> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be2590 <line:348:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x561f41be2518 <col:3> 'msg_t':'char' lvalue Var 0x561f41bd4968 'send2' 'msg_t':'char'
|   | | `-CallExpr 0x561f41be2570 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be2558 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2538 <col:11> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be2628 <line:349:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x561f41be25b0 <col:3> '_Bool' lvalue Var 0x561f41bd49e0 'mode2' '_Bool'
|   | | `-CallExpr 0x561f41be2608 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x561f41be25f0 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be25d0 <col:11> '_Bool (void)' Function 0x561f41badb70 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x561f41be26c0 <line:350:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2648 <col:3> 'char' lvalue Var 0x561f41bd4bc0 'id3' 'char'
|   | | `-CallExpr 0x561f41be26a0 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be2688 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2668 <col:9> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be2758 <line:351:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x561f41be26e0 <col:3> 'char' lvalue Var 0x561f41bd4c38 'st3' 'char'
|   | | `-CallExpr 0x561f41be2738 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be2720 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2700 <col:9> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be27f0 <line:352:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x561f41be2778 <col:3> 'msg_t':'char' lvalue Var 0x561f41bd4cb0 'send3' 'msg_t':'char'
|   | | `-CallExpr 0x561f41be27d0 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be27b8 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2798 <col:11> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be2888 <line:353:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x561f41be2810 <col:3> '_Bool' lvalue Var 0x561f41bd4d28 'mode3' '_Bool'
|   | | `-CallExpr 0x561f41be2868 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x561f41be2850 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2830 <col:11> '_Bool (void)' Function 0x561f41badb70 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x561f41be2920 <line:354:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x561f41be28a8 <col:3> 'char' lvalue Var 0x561f41bd4f08 'id4' 'char'
|   | | `-CallExpr 0x561f41be2900 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be28e8 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be28c8 <col:9> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be29b8 <line:355:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2940 <col:3> 'char' lvalue Var 0x561f41bd4f80 'st4' 'char'
|   | | `-CallExpr 0x561f41be2998 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be2980 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2960 <col:9> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be2a50 <line:356:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x561f41be29d8 <col:3> 'msg_t':'char' lvalue Var 0x561f41bd4ff8 'send4' 'msg_t':'char'
|   | | `-CallExpr 0x561f41be2a30 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x561f41be2a18 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be29f8 <col:11> 'char (void)' Function 0x561f41badce0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x561f41be2ae8 <line:357:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x561f41be2a70 <col:3> '_Bool' lvalue Var 0x561f41bd5070 'mode4' '_Bool'
|   | | `-CallExpr 0x561f41be2ac8 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x561f41be2ab0 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2a90 <col:11> '_Bool (void)' Function 0x561f41badb70 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x561f41be2bb8 <line:358:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x561f41be2b08 <col:3> 'int' lvalue Var 0x561f41be1f70 'i2' 'int'
|   | | `-CallExpr 0x561f41be2b98 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x561f41be2b80 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x561f41be2b28 <col:8> 'int (void)' Function 0x561f41bda308 'init' 'int (void)'
|   | |-CallExpr 0x561f41be2c68 <line:359:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x561f41be2c50 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x561f41be2bd8 <col:3> 'void (int)' Function 0x561f41bae160 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x561f41be2c90 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be2bf8 <col:21> 'int' lvalue Var 0x561f41be1f70 'i2' 'int'
|   | |-BinaryOperator 0x561f41be2d20 <line:360:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2ca8 <col:3> 'char' lvalue Var 0x561f41bd4440 'p1_old' 'char'
|   | | `-ImplicitCastExpr 0x561f41be2ce8 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be2cc8 <col:12> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x561f41be2d98 <line:361:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2d40 <col:3> 'char' lvalue Var 0x561f41bd44b8 'p1_new' 'char'
|   | | `-ImplicitCastExpr 0x561f41be2d80 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be2d60 <col:12> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x561f41be2e10 <line:362:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2db8 <col:3> 'char' lvalue Var 0x561f41bd4788 'p2_old' 'char'
|   | | `-ImplicitCastExpr 0x561f41be2df8 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be2dd8 <col:12> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x561f41be2e88 <line:363:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2e30 <col:3> 'char' lvalue Var 0x561f41bd4800 'p2_new' 'char'
|   | | `-ImplicitCastExpr 0x561f41be2e70 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be2e50 <col:12> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x561f41be2f00 <line:364:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2ea8 <col:3> 'char' lvalue Var 0x561f41bd4ad0 'p3_old' 'char'
|   | | `-ImplicitCastExpr 0x561f41be2ee8 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be2ec8 <col:12> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x561f41be2f78 <line:365:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2f20 <col:3> 'char' lvalue Var 0x561f41bd4b48 'p3_new' 'char'
|   | | `-ImplicitCastExpr 0x561f41be2f60 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be2f40 <col:12> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x561f41be2ff0 <line:366:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x561f41be2f98 <col:3> 'char' lvalue Var 0x561f41bd4e18 'p4_old' 'char'
|   | | `-ImplicitCastExpr 0x561f41be2fd8 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be2fb8 <col:12> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x561f41be3068 <line:367:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x561f41be3010 <col:3> 'char' lvalue Var 0x561f41bd4e90 'p4_new' 'char'
|   | | `-ImplicitCastExpr 0x561f41be3050 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561f41be3030 <col:12> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x561f41be30c8 <line:368:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x561f41be3088 <col:3> 'int' lvalue Var 0x561f41be1f70 'i2' 'int'
|   | | `-IntegerLiteral 0x561f41be30a8 <col:8> 'int' 0
|   | `-WhileStmt 0x561f41be3838 <line:369:3, line:386:3>
|   |   |-IntegerLiteral 0x561f41be30e8 <line:369:10> 'int' 1
|   |   `-CompoundStmt 0x561f41be3820 <col:13, line:386:3>
|   |     `-CompoundStmt 0x561f41be37a0 <line:370:5, line:385:5>
|   |       |-CallExpr 0x561f41be3140 <line:371:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x561f41be3128 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x561f41be3108 <col:5> 'void (void)' Function 0x561f41bd51a0 'node1' 'void (void)'
|   |       |-CallExpr 0x561f41be3198 <line:372:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x561f41be3180 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x561f41be3160 <col:5> 'void (void)' Function 0x561f41bd6ae8 'node2' 'void (void)'
|   |       |-CallExpr 0x561f41be31f0 <line:373:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x561f41be31d8 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x561f41be31b8 <col:5> 'void (void)' Function 0x561f41bd8458 'node3' 'void (void)'
|   |       |-CallExpr 0x561f41be3248 <line:374:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x561f41be3230 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x561f41be3210 <col:5> 'void (void)' Function 0x561f41bd9178 'node4' 'void (void)'
|   |       |-BinaryOperator 0x561f41be32c0 <line:375:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x561f41be3268 <col:5> 'char' lvalue Var 0x561f41bd4440 'p1_old' 'char'
|   |       | `-ImplicitCastExpr 0x561f41be32a8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561f41be3288 <col:14> 'char' lvalue Var 0x561f41bd44b8 'p1_new' 'char'
|   |       |-BinaryOperator 0x561f41be3338 <line:376:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x561f41be32e0 <col:5> 'char' lvalue Var 0x561f41bd44b8 'p1_new' 'char'
|   |       | `-ImplicitCastExpr 0x561f41be3320 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561f41be3300 <col:14> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x561f41be33b0 <line:377:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x561f41be3358 <col:5> 'char' lvalue Var 0x561f41bd4788 'p2_old' 'char'
|   |       | `-ImplicitCastExpr 0x561f41be3398 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561f41be3378 <col:14> 'char' lvalue Var 0x561f41bd4800 'p2_new' 'char'
|   |       |-BinaryOperator 0x561f41be3428 <line:378:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x561f41be33d0 <col:5> 'char' lvalue Var 0x561f41bd4800 'p2_new' 'char'
|   |       | `-ImplicitCastExpr 0x561f41be3410 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561f41be33f0 <col:14> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x561f41be34a0 <line:379:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x561f41be3448 <col:5> 'char' lvalue Var 0x561f41bd4ad0 'p3_old' 'char'
|   |       | `-ImplicitCastExpr 0x561f41be3488 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561f41be3468 <col:14> 'char' lvalue Var 0x561f41bd4b48 'p3_new' 'char'
|   |       |-BinaryOperator 0x561f41be3518 <line:380:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x561f41be34c0 <col:5> 'char' lvalue Var 0x561f41bd4b48 'p3_new' 'char'
|   |       | `-ImplicitCastExpr 0x561f41be3500 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561f41be34e0 <col:14> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x561f41be3590 <line:381:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x561f41be3538 <col:5> 'char' lvalue Var 0x561f41bd4e18 'p4_old' 'char'
|   |       | `-ImplicitCastExpr 0x561f41be3578 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561f41be3558 <col:14> 'char' lvalue Var 0x561f41bd4e90 'p4_new' 'char'
|   |       |-BinaryOperator 0x561f41be3608 <line:382:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x561f41be35b0 <col:5> 'char' lvalue Var 0x561f41bd4e90 'p4_new' 'char'
|   |       | `-ImplicitCastExpr 0x561f41be35f0 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561f41be35d0 <col:14> 'msg_t':'char' lvalue Var 0x561f41bae760 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x561f41be36a0 <line:383:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x561f41be3628 <col:5> 'int' lvalue Var 0x561f41be1ed8 'c1' 'int'
|   |       | `-CallExpr 0x561f41be3680 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x561f41be3668 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x561f41be3648 <col:10> 'int (void)' Function 0x561f41be0dc0 'check' 'int (void)'
|   |       `-CallExpr 0x561f41be3748 <line:384:5, col:14> 'void'
|   |         |-ImplicitCastExpr 0x561f41be3730 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x561f41be36c0 <col:5> 'void (_Bool)' Function 0x561f41badfd0 'assert' 'void (_Bool)'
|   |         `-ImplicitCastExpr 0x561f41be3788 <col:12> '_Bool' <IntegralToBoolean>
|   |           `-ImplicitCastExpr 0x561f41be3770 <col:12> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x561f41be36e0 <col:12> 'int' lvalue Var 0x561f41be1ed8 'c1' 'int'
|   `-ReturnStmt 0x561f41be3970 <line:388:1, col:8>
|     `-IntegerLiteral 0x561f41be3950 <col:8> 'int' 0
`-FunctionDecl 0x561f41be3a50 prev 0x561f41badfd0 <line:390:1, line:401:1> line:390:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x561f41be39c0 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x561f41be3ca0 <line:391:1, line:401:1>
    `-CompoundStmt 0x561f41be3c88 <line:394:3, line:400:1>
      `-IfStmt 0x561f41be3c70 <line:395:3, line:399:3>
        |-UnaryOperator 0x561f41be3b30 <line:395:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x561f41be3b18 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x561f41be3af8 <col:9> '_Bool' lvalue ParmVar 0x561f41be39c0 'arg' '_Bool'
        `-CompoundStmt 0x561f41be3c58 <col:14, line:399:3>
          `-CompoundStmt 0x561f41be3c40 <line:396:5, line:398:5>
            `-LabelStmt 0x561f41be3c28 <line:397:5, col:29> 'ERROR'
              `-CallExpr 0x561f41be3bb8 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x561f41be3ba0 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x561f41be3b48 <col:12> 'void () __attribute__((noreturn))' Function 0x561f41bad990 '__VERIFIER_error' 'void () __attribute__((noreturn))'
