TranslationUnitDecl 0x55d566ae1dd8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55d566ae2698 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55d566ae2370 '__int128'
|-TypedefDecl 0x55d566ae2708 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55d566ae2390 'unsigned __int128'
|-TypedefDecl 0x55d566ae2a10 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55d566ae27e0 'struct __NSConstantString_tag'
|   `-Record 0x55d566ae2760 '__NSConstantString_tag'
|-TypedefDecl 0x55d566ae2ab8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55d566ae2a70 'char *'
|   `-BuiltinType 0x55d566ae1e70 'char'
|-TypedefDecl 0x55d566b21c50 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55d566ae2d50 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55d566ae2b90 'struct __va_list_tag'
|     `-Record 0x55d566ae2b10 '__va_list_tag'
|-FunctionDecl 0x55d566b21d30 <array-examples/standard_partition_original_true-unreach-call_ground.i:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55d566b21f00 <line:2:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55d566b21e30 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x55d566b22140 <col:34, col:79>
|   `-IfStmt 0x55d566b22128 <col:36, col:77>
|     |-UnaryOperator 0x55d566b22000 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x55d566b21fe8 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x55d566b21fc8 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x55d566b21fa8 <col:41> 'int' lvalue ParmVar 0x55d566b21e30 'cond' 'int'
|     `-CompoundStmt 0x55d566b22110 <col:48, col:77>
|       `-LabelStmt 0x55d566b220f8 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x55d566b22088 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x55d566b22070 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x55d566b22018 <col:57> 'void () __attribute__((noreturn))' Function 0x55d566b21d30 '__VERIFIER_error' 'void () __attribute__((noreturn))'
`-FunctionDecl 0x55d566b221b8 <line:3:1, line:29:1> line:3:5 main 'int ()'
  `-CompoundStmt 0x55d566b47a30 <col:13, line:29:1>
    |-DeclStmt 0x55d566b22360 <line:4:3, col:17>
    | `-VarDecl 0x55d566b222f8 <col:3, col:16> col:7 used aa 'int [100000]'
    |-DeclStmt 0x55d566b22418 <line:5:3, col:12>
    | `-VarDecl 0x55d566b22390 <col:3, col:11> col:7 used a 'int' cinit
    |   `-IntegerLiteral 0x55d566b223f8 <col:11> 'int' 0
    |-DeclStmt 0x55d566b224d0 <line:6:3, col:12>
    | `-VarDecl 0x55d566b22448 <col:3, col:11> col:7 used b 'int' cinit
    |   `-IntegerLiteral 0x55d566b224b0 <col:11> 'int' 0
    |-DeclStmt 0x55d566b22588 <line:7:3, col:12>
    | `-VarDecl 0x55d566b22500 <col:3, col:11> col:7 used c 'int' cinit
    |   `-IntegerLiteral 0x55d566b22568 <col:11> 'int' 0
    |-DeclStmt 0x55d566b22668 <line:8:3, col:17>
    | `-VarDecl 0x55d566b22600 <col:3, col:16> col:7 used bb 'int [100000]'
    |-DeclStmt 0x55d566b22748 <line:9:3, col:17>
    | `-VarDecl 0x55d566b226e0 <col:3, col:16> col:7 used cc 'int [100000]'
    |-WhileStmt 0x55d566b473a0 <line:10:3, line:20:3>
    | |-BinaryOperator 0x55d566b227b8 <line:10:10, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x55d566b227a0 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55d566b22760 <col:10> 'int' lvalue Var 0x55d566b22390 'a' 'int'
    | | `-IntegerLiteral 0x55d566b22780 <col:14> 'int' 100000
    | `-CompoundStmt 0x55d566b47380 <col:23, line:20:3>
    |   |-IfStmt 0x55d566b472a0 <line:11:5, line:18:5> has_else
    |   | |-BinaryOperator 0x55d566b228d8 <line:11:9, col:20> 'int' '>='
    |   | | |-ImplicitCastExpr 0x55d566b228c0 <col:9, col:15> 'int' <LValueToRValue>
    |   | | | `-ArraySubscriptExpr 0x55d566b22880 <col:9, col:15> 'int' lvalue
    |   | | |   |-ImplicitCastExpr 0x55d566b22850 <col:9> 'int *' <ArrayToPointerDecay>
    |   | | |   | `-DeclRefExpr 0x55d566b227d8 <col:9> 'int [100000]' lvalue Var 0x55d566b222f8 'aa' 'int [100000]'
    |   | | |   `-ImplicitCastExpr 0x55d566b22868 <col:13> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x55d566b227f8 <col:13> 'int' lvalue Var 0x55d566b22390 'a' 'int'
    |   | | `-IntegerLiteral 0x55d566b228a0 <col:20> 'int' 0
    |   | |-CompoundStmt 0x55d566b22b08 <col:24, line:14:5>
    |   | | |-BinaryOperator 0x55d566b22a30 <line:12:7, col:23> 'int' '='
    |   | | | |-ArraySubscriptExpr 0x55d566b22968 <col:7, col:13> 'int' lvalue
    |   | | | | |-ImplicitCastExpr 0x55d566b22938 <col:7> 'int *' <ArrayToPointerDecay>
    |   | | | | | `-DeclRefExpr 0x55d566b228f8 <col:7> 'int [100000]' lvalue Var 0x55d566b22600 'bb' 'int [100000]'
    |   | | | | `-ImplicitCastExpr 0x55d566b22950 <col:11> 'int' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x55d566b22918 <col:11> 'int' lvalue Var 0x55d566b22448 'b' 'int'
    |   | | | `-ImplicitCastExpr 0x55d566b22a18 <col:17, col:23> 'int' <LValueToRValue>
    |   | | |   `-ArraySubscriptExpr 0x55d566b229f8 <col:17, col:23> 'int' lvalue
    |   | | |     |-ImplicitCastExpr 0x55d566b229c8 <col:17> 'int *' <ArrayToPointerDecay>
    |   | | |     | `-DeclRefExpr 0x55d566b22988 <col:17> 'int [100000]' lvalue Var 0x55d566b222f8 'aa' 'int [100000]'
    |   | | |     `-ImplicitCastExpr 0x55d566b229e0 <col:21> 'int' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x55d566b229a8 <col:21> 'int' lvalue Var 0x55d566b22390 'a' 'int'
    |   | | `-BinaryOperator 0x55d566b22ae8 <line:13:7, col:15> 'int' '='
    |   | |   |-DeclRefExpr 0x55d566b22a50 <col:7> 'int' lvalue Var 0x55d566b22448 'b' 'int'
    |   | |   `-BinaryOperator 0x55d566b22ac8 <col:11, col:15> 'int' '+'
    |   | |     |-ImplicitCastExpr 0x55d566b22ab0 <col:11> 'int' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x55d566b22a70 <col:11> 'int' lvalue Var 0x55d566b22448 'b' 'int'
    |   | |     `-IntegerLiteral 0x55d566b22a90 <col:15> 'int' 1
    |   | `-CompoundStmt 0x55d566b47280 <line:15:10, line:18:5>
    |   |   |-BinaryOperator 0x55d566b471a8 <line:16:7, col:23> 'int' '='
    |   |   | |-ArraySubscriptExpr 0x55d566b22b98 <col:7, col:13> 'int' lvalue
    |   |   | | |-ImplicitCastExpr 0x55d566b22b68 <col:7> 'int *' <ArrayToPointerDecay>
    |   |   | | | `-DeclRefExpr 0x55d566b22b28 <col:7> 'int [100000]' lvalue Var 0x55d566b226e0 'cc' 'int [100000]'
    |   |   | | `-ImplicitCastExpr 0x55d566b22b80 <col:11> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x55d566b22b48 <col:11> 'int' lvalue Var 0x55d566b22500 'c' 'int'
    |   |   | `-ImplicitCastExpr 0x55d566b47190 <col:17, col:23> 'int' <LValueToRValue>
    |   |   |   `-ArraySubscriptExpr 0x55d566b22c28 <col:17, col:23> 'int' lvalue
    |   |   |     |-ImplicitCastExpr 0x55d566b22bf8 <col:17> 'int *' <ArrayToPointerDecay>
    |   |   |     | `-DeclRefExpr 0x55d566b22bb8 <col:17> 'int [100000]' lvalue Var 0x55d566b222f8 'aa' 'int [100000]'
    |   |   |     `-ImplicitCastExpr 0x55d566b22c10 <col:21> 'int' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x55d566b22bd8 <col:21> 'int' lvalue Var 0x55d566b22390 'a' 'int'
    |   |   `-BinaryOperator 0x55d566b47260 <line:17:7, col:15> 'int' '='
    |   |     |-DeclRefExpr 0x55d566b471c8 <col:7> 'int' lvalue Var 0x55d566b22500 'c' 'int'
    |   |     `-BinaryOperator 0x55d566b47240 <col:11, col:15> 'int' '+'
    |   |       |-ImplicitCastExpr 0x55d566b47228 <col:11> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x55d566b471e8 <col:11> 'int' lvalue Var 0x55d566b22500 'c' 'int'
    |   |       `-IntegerLiteral 0x55d566b47208 <col:15> 'int' 1
    |   `-BinaryOperator 0x55d566b47360 <line:19:5, col:13> 'int' '='
    |     |-DeclRefExpr 0x55d566b472c8 <col:5> 'int' lvalue Var 0x55d566b22390 'a' 'int'
    |     `-BinaryOperator 0x55d566b47340 <col:9, col:13> 'int' '+'
    |       |-ImplicitCastExpr 0x55d566b47328 <col:9> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55d566b472e8 <col:9> 'int' lvalue Var 0x55d566b22390 'a' 'int'
    |       `-IntegerLiteral 0x55d566b47308 <col:13> 'int' 1
    |-DeclStmt 0x55d566b47438 <line:21:3, col:8>
    | `-VarDecl 0x55d566b473d0 <col:3, col:7> col:7 used x 'int'
    |-ForStmt 0x55d566b47708 <line:22:3, line:24:3>
    | |-BinaryOperator 0x55d566b47490 <line:22:9, col:13> 'int' '='
    | | |-DeclRefExpr 0x55d566b47450 <col:9> 'int' lvalue Var 0x55d566b473d0 'x' 'int'
    | | `-IntegerLiteral 0x55d566b47470 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55d566b47520 <col:17, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x55d566b474f0 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55d566b474b0 <col:17> 'int' lvalue Var 0x55d566b473d0 'x' 'int'
    | | `-ImplicitCastExpr 0x55d566b47508 <col:21> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55d566b474d0 <col:21> 'int' lvalue Var 0x55d566b22448 'b' 'int'
    | |-UnaryOperator 0x55d566b47560 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x55d566b47540 <col:25> 'int' lvalue Var 0x55d566b473d0 'x' 'int'
    | `-CompoundStmt 0x55d566b476f0 <col:31, line:24:3>
    |   `-CallExpr 0x55d566b476c8 <line:23:5, col:37> 'void'
    |     |-ImplicitCastExpr 0x55d566b476b0 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x55d566b47578 <col:5> 'void (int)' Function 0x55d566b21f00 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x55d566b47660 <col:24, col:35> 'int' '>='
    |       |-ImplicitCastExpr 0x55d566b47648 <col:24, col:30> 'int' <LValueToRValue>
    |       | `-ArraySubscriptExpr 0x55d566b47608 <col:24, col:30> 'int' lvalue
    |       |   |-ImplicitCastExpr 0x55d566b475d8 <col:24> 'int *' <ArrayToPointerDecay>
    |       |   | `-DeclRefExpr 0x55d566b47598 <col:24> 'int [100000]' lvalue Var 0x55d566b22600 'bb' 'int [100000]'
    |       |   `-ImplicitCastExpr 0x55d566b475f0 <col:28> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55d566b475b8 <col:28> 'int' lvalue Var 0x55d566b473d0 'x' 'int'
    |       `-IntegerLiteral 0x55d566b47628 <col:35> 'int' 0
    |-ForStmt 0x55d566b479c8 <line:25:3, line:27:3>
    | |-BinaryOperator 0x55d566b47780 <line:25:9, col:13> 'int' '='
    | | |-DeclRefExpr 0x55d566b47740 <col:9> 'int' lvalue Var 0x55d566b473d0 'x' 'int'
    | | `-IntegerLiteral 0x55d566b47760 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55d566b47810 <col:17, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x55d566b477e0 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55d566b477a0 <col:17> 'int' lvalue Var 0x55d566b473d0 'x' 'int'
    | | `-ImplicitCastExpr 0x55d566b477f8 <col:21> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55d566b477c0 <col:21> 'int' lvalue Var 0x55d566b22500 'c' 'int'
    | |-UnaryOperator 0x55d566b47850 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x55d566b47830 <col:25> 'int' lvalue Var 0x55d566b473d0 'x' 'int'
    | `-CompoundStmt 0x55d566b479b0 <col:31, line:27:3>
    |   `-CallExpr 0x55d566b47988 <line:26:5, col:36> 'void'
    |     |-ImplicitCastExpr 0x55d566b47970 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x55d566b47868 <col:5> 'void (int)' Function 0x55d566b21f00 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x55d566b47950 <col:24, col:34> 'int' '<'
    |       |-ImplicitCastExpr 0x55d566b47938 <col:24, col:30> 'int' <LValueToRValue>
    |       | `-ArraySubscriptExpr 0x55d566b478f8 <col:24, col:30> 'int' lvalue
    |       |   |-ImplicitCastExpr 0x55d566b478c8 <col:24> 'int *' <ArrayToPointerDecay>
    |       |   | `-DeclRefExpr 0x55d566b47888 <col:24> 'int [100000]' lvalue Var 0x55d566b226e0 'cc' 'int [100000]'
    |       |   `-ImplicitCastExpr 0x55d566b478e0 <col:28> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55d566b478a8 <col:28> 'int' lvalue Var 0x55d566b473d0 'x' 'int'
    |       `-IntegerLiteral 0x55d566b47918 <col:34> 'int' 0
    `-ReturnStmt 0x55d566b47a20 <line:28:3, col:10>
      `-IntegerLiteral 0x55d566b47a00 <col:10> 'int' 0
