TranslationUnitDecl 0x55dd553b96c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55dd553b9f88 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55dd553b9c60 '__int128'
|-TypedefDecl 0x55dd553b9ff8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55dd553b9c80 'unsigned __int128'
|-TypedefDecl 0x55dd553ba300 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55dd553ba0d0 'struct __NSConstantString_tag'
|   `-Record 0x55dd553ba050 '__NSConstantString_tag'
|-TypedefDecl 0x55dd553ba3a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55dd553ba360 'char *'
|   `-BuiltinType 0x55dd553b9760 'char'
|-TypedefDecl 0x55dd553fbf90 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55dd553ba640 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55dd553ba480 'struct __va_list_tag'
|     `-Record 0x55dd553ba400 '__va_list_tag'
|-FunctionDecl 0x55dd553fc070 <seq-mthreaded/pals_lcr-var-start-time.4_false-unreach-call.2.ufo.UNBOUNDED.pals.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55dd553fc250 <line:61:1, col:34> col:7 used __VERIFIER_nondet_bool '_Bool (void)'
| `-FullComment 0x55dd55434790 <line:3:4, line:56:69>
|   |-ParagraphComment 0x55dd55433dc0 <line:3:4, col:71>
|   | `-TextComment 0x55dd55433d90 <col:4, col:71> Text="********************************************************************"
|   |-ParagraphComment 0x55dd55433e10 <line:5:1, col:67>
|   | `-TextComment 0x55dd55433de0 <col:1, col:67> Text="Copyright (c) 2013 Carnegie Mellon University. All Rights Reserved."
|   |-ParagraphComment 0x55dd55433eb0 <line:7:1, line:9:4>
|   | |-TextComment 0x55dd55433e30 <line:7:1, col:66> Text="Redistribution and use in source and binary forms, with or without"
|   | |-TextComment 0x55dd55433e50 <line:8:1, col:70> Text="modification, are permitted provided that the following conditions are"
|   | `-TextComment 0x55dd55433e70 <line:9:1, col:4> Text="met:"
|   |-ParagraphComment 0x55dd55433f50 <line:11:1, line:13:12>
|   | |-TextComment 0x55dd55433ed0 <line:11:1, col:65> Text="1. Redistributions of source code must retain the above copyright"
|   | |-TextComment 0x55dd55433ef0 <line:12:1, col:69> Text="notice, this list of conditions and the following acknowledgments and"
|   | `-TextComment 0x55dd55433f10 <line:13:1, col:12> Text="disclaimers."
|   |-ParagraphComment 0x55dd55433ff0 <line:15:1, line:17:68>
|   | |-TextComment 0x55dd55433f70 <line:15:1, col:68> Text="2. Redistributions in binary form must reproduce the above copyright"
|   | |-TextComment 0x55dd55433f90 <line:16:1, col:67> Text="notice, this list of conditions and the following disclaimer in the"
|   | `-TextComment 0x55dd55433fb0 <line:17:1, col:68> Text="documentation and/or other materials provided with the distribution."
|   |-ParagraphComment 0x55dd554340e0 <line:19:1, line:23:10>
|   | |-TextComment 0x55dd55434010 <line:19:1, col:65> Text="3. The names "Carnegie Mellon University," "SEI" and/or "Software"
|   | |-TextComment 0x55dd55434030 <line:20:1, col:62> Text="Engineering Institute" shall not be used to endorse or promote"
|   | |-TextComment 0x55dd55434050 <line:21:1, col:57> Text="products derived from this software without prior written"
|   | |-TextComment 0x55dd55434070 <line:22:1, col:50> Text="permission. For written permission, please contact"
|   | `-TextComment 0x55dd55434090 <line:23:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55dd55434100 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55dd55434160 <col:15, col:23>
|   |   `-TextComment 0x55dd55434130 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55dd55434200 <line:25:1, line:27:10>
|   | |-TextComment 0x55dd55434180 <line:25:1, col:70> Text="4. Products derived from this software may not be called "SEI" nor may"
|   | |-TextComment 0x55dd554341a0 <line:26:1, col:63> Text=""SEI" appear in their names without prior written permission of"
|   | `-TextComment 0x55dd554341c0 <line:27:1, col:10> Text="permission"
|   |-BlockCommandComment 0x55dd55434220 <col:11, col:23> Name="see"
|   | `-ParagraphComment 0x55dd55434280 <col:15, col:23>
|   |   `-TextComment 0x55dd55434250 <col:15, col:23> Text=".cmu.edu."
|   |-ParagraphComment 0x55dd554342f0 <line:29:1, line:30:15>
|   | |-TextComment 0x55dd554342a0 <line:29:1, col:67> Text="5. Redistributions of any form whatsoever must retain the following"
|   | `-TextComment 0x55dd554342c0 <line:30:1, col:15> Text="acknowledgment:"
|   |-ParagraphComment 0x55dd554343e0 <line:32:1, line:36:7>
|   | |-TextComment 0x55dd55434310 <line:32:1, col:60> Text="This material is based upon work funded and supported by the"
|   | |-TextComment 0x55dd55434330 <line:33:1, col:62> Text="Department of Defense under Contract No. FA8721-05-C-0003 with"
|   | |-TextComment 0x55dd55434350 <line:34:1, col:60> Text="Carnegie Mellon University for the operation of the Software"
|   | |-TextComment 0x55dd55434370 <line:35:1, col:66> Text="Engineering Institute, a federally funded research and development"
|   | `-TextComment 0x55dd55434390 <line:36:1, col:7> Text="center."
|   |-ParagraphComment 0x55dd55434480 <line:38:1, line:40:61>
|   | |-TextComment 0x55dd55434400 <line:38:1, col:70> Text="Any opinions, findings and conclusions or recommendations expressed in"
|   | |-TextComment 0x55dd55434420 <line:39:1, col:63> Text="this material are those of the author(s) and do not necessarily"
|   | `-TextComment 0x55dd55434440 <line:40:1, col:61> Text="reflect the views of the United States Department of Defense."
|   |-ParagraphComment 0x55dd554345e0 <line:42:1, line:49:37>
|   | |-TextComment 0x55dd554344a0 <line:42:1, col:69> Text="NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING"
|   | |-TextComment 0x55dd554344c0 <line:43:1, col:67> Text="INSTITUTE MATERIAL IS FURNISHEDON AN "AS-IS" BASIS. CARNEGIE MELLON"
|   | |-TextComment 0x55dd554344e0 <line:44:1, col:63> Text="UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR"
|   | |-TextComment 0x55dd55434500 <line:45:1, col:68> Text="IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF"
|   | |-TextComment 0x55dd55434520 <line:46:1, col:63> Text="FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS"
|   | |-TextComment 0x55dd55434540 <line:47:1, col:70> Text="OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT"
|   | |-TextComment 0x55dd55434560 <line:48:1, col:66> Text="MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,"
|   | `-TextComment 0x55dd55434580 <line:49:1, col:37> Text="TRADEMARK, OR COPYRIGHT INFRINGEMENT."
|   |-ParagraphComment 0x55dd55434650 <line:51:1, line:52:13>
|   | |-TextComment 0x55dd55434600 <line:51:1, col:64> Text="This material has been approved for public release and unlimited"
|   | `-TextComment 0x55dd55434620 <line:52:1, col:13> Text="distribution."
|   |-ParagraphComment 0x55dd554346a0 <line:54:1, col:10>
|   | `-TextComment 0x55dd55434670 <col:1, col:10> Text="DM-0000575"
|   `-ParagraphComment 0x55dd554346f0 <line:56:2, col:69>
|     `-TextComment 0x55dd554346c0 <col:2, col:69> Text="********************************************************************"
|-FunctionDecl 0x55dd553fc3c0 <line:62:1, col:33> col:6 used __VERIFIER_nondet_char 'char (void)'
|-FunctionDecl 0x55dd553fc538 <line:63:1, col:43> col:15 used __VERIFIER_nondet_uchar 'unsigned char (void)'
|-FunctionDecl 0x55dd553fc6b0 <line:64:1, col:23> col:6 used assert 'void (_Bool)'
| `-ParmVarDecl 0x55dd553fc5e8 <col:13, col:19> col:19 arg '_Bool'
|-FunctionDecl 0x55dd553fc840 <line:65:1, col:32> col:6 used __VERIFIER_assume 'void (int)'
| `-ParmVarDecl 0x55dd553fc770 <col:24, col:28> col:28 arg 'int'
|-TypedefDecl 0x55dd553fc8f8 <line:66:1, col:14> col:14 referenced msg_t 'char'
| `-BuiltinType 0x55dd553b9760 'char'
|-TypedefDecl 0x55dd553fc968 <line:67:1, col:13> col:13 referenced port_t 'int'
| `-BuiltinType 0x55dd553b97c0 'int'
|-FunctionDecl 0x55dd553fcbb0 <line:68:1, col:37> col:13 read 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55dd553fc9f8 <col:18, col:25> col:25 p 'port_t':'int'
| `-ParmVarDecl 0x55dd553fca98 <col:29, col:35> col:35 m 'msg_t':'char'
|-FunctionDecl 0x55dd553fcd80 <line:69:1, col:38> col:13 write 'void (port_t, msg_t)' extern
| |-ParmVarDecl 0x55dd553fcc70 <col:19, col:26> col:26 p 'port_t':'int'
| `-ParmVarDecl 0x55dd553fcce8 <col:30, col:36> col:36 m 'msg_t':'char'
|-VarDecl 0x55dd553fce40 <line:70:1, col:28> col:7 used nomsg 'msg_t':'char' cinit
| `-CStyleCastExpr 0x55dd553fcef0 <col:19, col:28> 'msg_t':'char' <IntegralCast>
|   `-UnaryOperator 0x55dd553fcec8 <col:27, col:28> 'int' prefix '-'
|     `-IntegerLiteral 0x55dd553fcea8 <col:28> 'int' 1
|-VarDecl 0x55dd55422a80 <line:71:1, col:15> col:15 used r1 'unsigned char'
|-VarDecl 0x55dd55422af8 <line:72:1, col:8> col:8 p1 'port_t':'int'
|-VarDecl 0x55dd55422b70 <line:73:1, col:6> col:6 used p1_old 'char'
|-VarDecl 0x55dd55422be8 <line:74:1, col:6> col:6 used p1_new 'char'
|-VarDecl 0x55dd55422c60 <line:75:1, col:6> col:6 used id1 'char'
|-VarDecl 0x55dd55422cd8 <line:76:1, col:6> col:6 used st1 'char'
|-VarDecl 0x55dd55422d50 <line:77:1, col:7> col:7 used send1 'msg_t':'char'
|-VarDecl 0x55dd55422dc8 <line:78:1, col:7> col:7 used mode1 '_Bool'
|-VarDecl 0x55dd55422e40 <line:79:1, col:7> col:7 used alive1 '_Bool'
|-VarDecl 0x55dd55422eb8 <line:80:1, col:8> col:8 p2 'port_t':'int'
|-VarDecl 0x55dd55422f30 <line:81:1, col:6> col:6 used p2_old 'char'
|-VarDecl 0x55dd55422fa8 <line:82:1, col:6> col:6 used p2_new 'char'
|-VarDecl 0x55dd55423020 <line:83:1, col:6> col:6 used id2 'char'
|-VarDecl 0x55dd55423098 <line:84:1, col:6> col:6 used st2 'char'
|-VarDecl 0x55dd55423110 <line:85:1, col:7> col:7 used send2 'msg_t':'char'
|-VarDecl 0x55dd55423188 <line:86:1, col:7> col:7 used mode2 '_Bool'
|-VarDecl 0x55dd55423200 <line:87:1, col:7> col:7 used alive2 '_Bool'
|-VarDecl 0x55dd55423278 <line:88:1, col:8> col:8 p3 'port_t':'int'
|-VarDecl 0x55dd554232f0 <line:89:1, col:6> col:6 used p3_old 'char'
|-VarDecl 0x55dd55423368 <line:90:1, col:6> col:6 used p3_new 'char'
|-VarDecl 0x55dd554233e0 <line:91:1, col:6> col:6 used id3 'char'
|-VarDecl 0x55dd55423458 <line:92:1, col:6> col:6 used st3 'char'
|-VarDecl 0x55dd554234d0 <line:93:1, col:7> col:7 used send3 'msg_t':'char'
|-VarDecl 0x55dd55423548 <line:94:1, col:7> col:7 used mode3 '_Bool'
|-VarDecl 0x55dd554235c0 <line:95:1, col:7> col:7 used alive3 '_Bool'
|-VarDecl 0x55dd55423638 <line:96:1, col:8> col:8 p4 'port_t':'int'
|-VarDecl 0x55dd554236b0 <line:97:1, col:6> col:6 used p4_old 'char'
|-VarDecl 0x55dd55423728 <line:98:1, col:6> col:6 used p4_new 'char'
|-VarDecl 0x55dd554237a0 <line:99:1, col:6> col:6 used id4 'char'
|-VarDecl 0x55dd55423818 <line:100:1, col:6> col:6 used st4 'char'
|-VarDecl 0x55dd55423890 <line:101:1, col:7> col:7 used send4 'msg_t':'char'
|-VarDecl 0x55dd55423908 <line:102:1, col:7> col:7 used mode4 '_Bool'
|-VarDecl 0x55dd55423980 <line:103:1, col:7> col:7 used alive4 '_Bool'
|-FunctionDecl 0x55dd55423c60 <line:104:1, line:138:1> line:104:6 used node1 'void (void)'
| `-CompoundStmt 0x55dd554264b0 <line:105:1, line:138:1>
|   |-DeclStmt 0x55dd55423d78 <line:106:3, col:12>
|   | `-VarDecl 0x55dd55423d10 <col:3, col:9> col:9 used m1 'msg_t':'char'
|   `-CompoundStmt 0x55dd55426488 <line:108:3, line:137:1>
|     |-BinaryOperator 0x55dd55423de8 <line:109:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55dd55423d90 <col:3> 'msg_t':'char' lvalue Var 0x55dd55423d10 'm1' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55dd55423dd0 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dd55423db0 <col:8> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55dd55426450 <line:110:3, line:135:3> has_else
|     | |-ImplicitCastExpr 0x55dd55423e28 <line:110:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55dd55423e08 <col:7> '_Bool' lvalue Var 0x55dd55422dc8 'mode1' '_Bool'
|     | |-CompoundStmt 0x55dd554247d0 <col:14, line:130:3>
|     | | |-IfStmt 0x55dd55423f60 <line:111:5, line:113:5>
|     | | | |-BinaryOperator 0x55dd55423eb0 <line:111:9, col:15> 'int' '=='
|     | | | | |-ImplicitCastExpr 0x55dd55423e98 <col:9> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55dd55423e80 <col:9> 'unsigned char' <LValueToRValue>
|     | | | | |   `-DeclRefExpr 0x55dd55423e40 <col:9> 'unsigned char' lvalue Var 0x55dd55422a80 'r1' 'unsigned char'
|     | | | | `-IntegerLiteral 0x55dd55423e60 <col:15> 'int' 255
|     | | | `-CompoundStmt 0x55dd55423f48 <col:20, line:113:5>
|     | | |   `-BinaryOperator 0x55dd55423f28 <line:112:7, col:12> 'unsigned char' '='
|     | | |     |-DeclRefExpr 0x55dd55423ed0 <col:7> 'unsigned char' lvalue Var 0x55dd55422a80 'r1' 'unsigned char'
|     | | |     `-ImplicitCastExpr 0x55dd55423f10 <col:12> 'unsigned char' <IntegralCast>
|     | | |       `-IntegerLiteral 0x55dd55423ef0 <col:12> 'int' 3
|     | | |-BinaryOperator 0x55dd55424040 <line:114:5, col:15> 'unsigned char' '='
|     | | | |-DeclRefExpr 0x55dd55423f78 <col:5> 'unsigned char' lvalue Var 0x55dd55422a80 'r1' 'unsigned char'
|     | | | `-ImplicitCastExpr 0x55dd55424028 <col:10, col:15> 'unsigned char' <IntegralCast>
|     | | |   `-BinaryOperator 0x55dd55424008 <col:10, col:15> 'int' '+'
|     | | |     |-ImplicitCastExpr 0x55dd55423ff0 <col:10> 'int' <IntegralCast>
|     | | |     | `-ImplicitCastExpr 0x55dd55423fd8 <col:10> 'unsigned char' <LValueToRValue>
|     | | |     |   `-DeclRefExpr 0x55dd55423f98 <col:10> 'unsigned char' lvalue Var 0x55dd55422a80 'r1' 'unsigned char'
|     | | |     `-IntegerLiteral 0x55dd55423fb8 <col:15> 'int' 1
|     | | |-BinaryOperator 0x55dd554240b8 <line:115:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55dd55424060 <col:5> 'msg_t':'char' lvalue Var 0x55dd55423d10 'm1' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55dd554240a0 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55dd55424080 <col:10> 'char' lvalue Var 0x55dd554236b0 'p4_old' 'char'
|     | | |-BinaryOperator 0x55dd55424130 <line:116:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55dd554240d8 <col:5> 'char' lvalue Var 0x55dd554236b0 'p4_old' 'char'
|     | | | `-ImplicitCastExpr 0x55dd55424118 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55dd554240f8 <col:14> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55dd55424720 <line:117:5, line:128:5>
|     | | | |-BinaryOperator 0x55dd55424240 <line:117:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55dd554241a0 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55dd55424188 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55dd55424150 <col:15> 'msg_t':'char' lvalue Var 0x55dd55423d10 'm1' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55dd55424218 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55dd55424200 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55dd554241c8 <col:27> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55dd55424708 <col:34, line:128:5>
|     | | |   `-IfStmt 0x55dd554246e0 <line:118:7, line:127:7> has_else
|     | | |     |-ImplicitCastExpr 0x55dd55424280 <line:118:11> '_Bool' <LValueToRValue>
|     | | |     | `-DeclRefExpr 0x55dd55424260 <col:11> '_Bool' lvalue Var 0x55dd55422e40 'alive1' '_Bool'
|     | | |     |-CompoundStmt 0x55dd55424638 <col:19, line:125:7>
|     | | |     | `-IfStmt 0x55dd55424610 <line:119:9, line:124:9> has_else
|     | | |     |   |-BinaryOperator 0x55dd55424388 <line:119:13, col:30> 'int' '>'
|     | | |     |   | |-CStyleCastExpr 0x55dd554242e8 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |   | | `-ImplicitCastExpr 0x55dd554242d0 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   | |   `-DeclRefExpr 0x55dd55424298 <col:19> 'msg_t':'char' lvalue Var 0x55dd55423d10 'm1' 'msg_t':'char'
|     | | |     |   | `-CStyleCastExpr 0x55dd55424360 <col:24, col:30> 'int' <IntegralCast>
|     | | |     |   |   `-ImplicitCastExpr 0x55dd55424348 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   |     `-DeclRefExpr 0x55dd55424310 <col:30> 'char' lvalue Var 0x55dd55422c60 'id1' 'char'
|     | | |     |   |-CompoundStmt 0x55dd55424420 <col:35, line:121:9>
|     | | |     |   | `-BinaryOperator 0x55dd55424400 <line:120:11, col:19> 'msg_t':'char' '='
|     | | |     |   |   |-DeclRefExpr 0x55dd554243a8 <col:11> 'msg_t':'char' lvalue Var 0x55dd55422d50 'send1' 'msg_t':'char'
|     | | |     |   |   `-ImplicitCastExpr 0x55dd554243e8 <col:19> 'msg_t':'char' <LValueToRValue>
|     | | |     |   |     `-DeclRefExpr 0x55dd554243c8 <col:19> 'msg_t':'char' lvalue Var 0x55dd55423d10 'm1' 'msg_t':'char'
|     | | |     |   `-IfStmt 0x55dd554245f8 <line:122:9, line:124:9>
|     | | |     |     |-BinaryOperator 0x55dd55424528 <line:122:13, col:31> 'int' '=='
|     | | |     |     | |-CStyleCastExpr 0x55dd55424488 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |     | | `-ImplicitCastExpr 0x55dd55424470 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     | |   `-DeclRefExpr 0x55dd55424438 <col:19> 'msg_t':'char' lvalue Var 0x55dd55423d10 'm1' 'msg_t':'char'
|     | | |     |     | `-CStyleCastExpr 0x55dd55424500 <col:25, col:31> 'int' <IntegralCast>
|     | | |     |     |   `-ImplicitCastExpr 0x55dd554244e8 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     |     `-DeclRefExpr 0x55dd554244b0 <col:31> 'char' lvalue Var 0x55dd55422c60 'id1' 'char'
|     | | |     |     `-CompoundStmt 0x55dd554245e0 <col:36, line:124:9>
|     | | |     |       `-BinaryOperator 0x55dd554245c0 <line:123:11, col:23> 'char' '='
|     | | |     |         |-DeclRefExpr 0x55dd55424548 <col:11> 'char' lvalue Var 0x55dd55422cd8 'st1' 'char'
|     | | |     |         `-CStyleCastExpr 0x55dd55424598 <col:17, col:23> 'char' <IntegralCast>
|     | | |     |           `-IntegerLiteral 0x55dd55424568 <col:23> 'int' 1
|     | | |     `-CompoundStmt 0x55dd554246c8 <line:125:14, line:127:7>
|     | | |       `-BinaryOperator 0x55dd554246a8 <line:126:9, col:17> 'msg_t':'char' '='
|     | | |         |-DeclRefExpr 0x55dd55424650 <col:9> 'msg_t':'char' lvalue Var 0x55dd55422d50 'send1' 'msg_t':'char'
|     | | |         `-ImplicitCastExpr 0x55dd55424690 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |           `-DeclRefExpr 0x55dd55424670 <col:17> 'msg_t':'char' lvalue Var 0x55dd55423d10 'm1' 'msg_t':'char'
|     | | `-BinaryOperator 0x55dd554247b0 <line:129:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55dd55424738 <col:5> '_Bool' lvalue Var 0x55dd55422dc8 'mode1' '_Bool'
|     | |   `-CStyleCastExpr 0x55dd55424788 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55dd55424758 <col:20> 'int' 0
|     | `-CompoundStmt 0x55dd55424bd8 <line:130:10, line:135:3>
|     |   |-IfStmt 0x55dd55424b28 <line:131:5, line:133:5>
|     |   | |-ImplicitCastExpr 0x55dd55424830 <line:131:9> '_Bool' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55dd55424810 <col:9> '_Bool' lvalue Var 0x55dd55422e40 'alive1' '_Bool'
|     |   | `-CompoundStmt 0x55dd55424b10 <col:17, line:133:5>
|     |   |   `-BinaryOperator 0x55dd55424af0 <line:132:7, col:60> 'char' '='
|     |   |     |-DeclRefExpr 0x55dd55424848 <col:7> 'char' lvalue Var 0x55dd55422be8 'p1_new' 'char'
|     |   |     `-ImplicitCastExpr 0x55dd55424ad8 <col:16, col:60> 'char' <IntegralCast>
|     |   |       `-ConditionalOperator 0x55dd55424aa8 <col:16, col:60> 'int'
|     |   |         |-BinaryOperator 0x55dd554249e8 <col:16, col:44> 'int' '&&'
|     |   |         | |-BinaryOperator 0x55dd55424908 <col:16, col:25> 'int' '!='
|     |   |         | | |-ImplicitCastExpr 0x55dd554248d8 <col:16> 'int' <IntegralCast>
|     |   |         | | | `-ImplicitCastExpr 0x55dd554248a8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |         | | |   `-DeclRefExpr 0x55dd55424868 <col:16> 'msg_t':'char' lvalue Var 0x55dd55422d50 'send1' 'msg_t':'char'
|     |   |         | | `-ImplicitCastExpr 0x55dd554248f0 <col:25> 'int' <IntegralCast>
|     |   |         | |   `-ImplicitCastExpr 0x55dd554248c0 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |         | |     `-DeclRefExpr 0x55dd55424888 <col:25> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   |         | `-BinaryOperator 0x55dd554249c8 <col:34, col:44> 'int' '=='
|     |   |         |   |-ImplicitCastExpr 0x55dd55424998 <col:34> 'int' <IntegralCast>
|     |   |         |   | `-ImplicitCastExpr 0x55dd55424968 <col:34> 'char' <LValueToRValue>
|     |   |         |   |   `-DeclRefExpr 0x55dd55424928 <col:34> 'char' lvalue Var 0x55dd55422be8 'p1_new' 'char'
|     |   |         |   `-ImplicitCastExpr 0x55dd554249b0 <col:44> 'int' <IntegralCast>
|     |   |         |     `-ImplicitCastExpr 0x55dd55424980 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |         |       `-DeclRefExpr 0x55dd55424948 <col:44> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   |         |-ImplicitCastExpr 0x55dd55424a60 <col:52> 'int' <IntegralCast>
|     |   |         | `-ImplicitCastExpr 0x55dd55424a48 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |         |   `-DeclRefExpr 0x55dd55424a08 <col:52> 'msg_t':'char' lvalue Var 0x55dd55422d50 'send1' 'msg_t':'char'
|     |   |         `-ImplicitCastExpr 0x55dd55424a90 <col:60> 'int' <IntegralCast>
|     |   |           `-ImplicitCastExpr 0x55dd55424a78 <col:60> 'char' <LValueToRValue>
|     |   |             `-DeclRefExpr 0x55dd55424a28 <col:60> 'char' lvalue Var 0x55dd55422be8 'p1_new' 'char'
|     |   `-BinaryOperator 0x55dd55424bb8 <line:134:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55dd55424b40 <col:5> '_Bool' lvalue Var 0x55dd55422dc8 'mode1' '_Bool'
|     |     `-CStyleCastExpr 0x55dd55424b90 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55dd55424b60 <col:20> 'int' 1
|     `-ReturnStmt 0x55dd55426478 <line:136:3>
|-FunctionDecl 0x55dd55426568 <line:139:1, line:172:1> line:139:6 used node2 'void (void)'
| `-CompoundStmt 0x55dd55427760 <line:140:1, line:172:1>
|   |-DeclStmt 0x55dd55426680 <line:141:3, col:12>
|   | `-VarDecl 0x55dd55426618 <col:3, col:9> col:9 used m2 'msg_t':'char'
|   `-CompoundStmt 0x55dd55427738 <line:143:3, line:171:1>
|     |-BinaryOperator 0x55dd554266f0 <line:144:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55dd55426698 <col:3> 'msg_t':'char' lvalue Var 0x55dd55426618 'm2' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55dd554266d8 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dd554266b8 <col:8> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55dd55427700 <line:145:3, line:169:3> has_else
|     | |-ImplicitCastExpr 0x55dd55426730 <line:145:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55dd55426710 <col:7> '_Bool' lvalue Var 0x55dd55423188 'mode2' '_Bool'
|     | |-CompoundStmt 0x55dd55426eb8 <col:14, line:161:3>
|     | | |-BinaryOperator 0x55dd554267a0 <line:146:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55dd55426748 <col:5> 'msg_t':'char' lvalue Var 0x55dd55426618 'm2' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55dd55426788 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55dd55426768 <col:10> 'char' lvalue Var 0x55dd55422b70 'p1_old' 'char'
|     | | |-BinaryOperator 0x55dd55426818 <line:147:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55dd554267c0 <col:5> 'char' lvalue Var 0x55dd55422b70 'p1_old' 'char'
|     | | | `-ImplicitCastExpr 0x55dd55426800 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55dd554267e0 <col:14> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55dd55426e08 <line:148:5, line:159:5>
|     | | | |-BinaryOperator 0x55dd55426928 <line:148:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55dd55426888 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55dd55426870 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55dd55426838 <col:15> 'msg_t':'char' lvalue Var 0x55dd55426618 'm2' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55dd55426900 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55dd554268e8 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55dd554268b0 <col:27> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55dd55426df0 <col:34, line:159:5>
|     | | |   `-IfStmt 0x55dd55426dc8 <line:149:7, line:158:7> has_else
|     | | |     |-ImplicitCastExpr 0x55dd55426968 <line:149:11> '_Bool' <LValueToRValue>
|     | | |     | `-DeclRefExpr 0x55dd55426948 <col:11> '_Bool' lvalue Var 0x55dd55423200 'alive2' '_Bool'
|     | | |     |-CompoundStmt 0x55dd55426d20 <col:19, line:156:7>
|     | | |     | `-IfStmt 0x55dd55426cf8 <line:150:9, line:155:9> has_else
|     | | |     |   |-BinaryOperator 0x55dd55426a70 <line:150:13, col:30> 'int' '>'
|     | | |     |   | |-CStyleCastExpr 0x55dd554269d0 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |   | | `-ImplicitCastExpr 0x55dd554269b8 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   | |   `-DeclRefExpr 0x55dd55426980 <col:19> 'msg_t':'char' lvalue Var 0x55dd55426618 'm2' 'msg_t':'char'
|     | | |     |   | `-CStyleCastExpr 0x55dd55426a48 <col:24, col:30> 'int' <IntegralCast>
|     | | |     |   |   `-ImplicitCastExpr 0x55dd55426a30 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   |     `-DeclRefExpr 0x55dd554269f8 <col:30> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|     | | |     |   |-CompoundStmt 0x55dd55426b08 <col:35, line:152:9>
|     | | |     |   | `-BinaryOperator 0x55dd55426ae8 <line:151:11, col:19> 'msg_t':'char' '='
|     | | |     |   |   |-DeclRefExpr 0x55dd55426a90 <col:11> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|     | | |     |   |   `-ImplicitCastExpr 0x55dd55426ad0 <col:19> 'msg_t':'char' <LValueToRValue>
|     | | |     |   |     `-DeclRefExpr 0x55dd55426ab0 <col:19> 'msg_t':'char' lvalue Var 0x55dd55426618 'm2' 'msg_t':'char'
|     | | |     |   `-IfStmt 0x55dd55426ce0 <line:153:9, line:155:9>
|     | | |     |     |-BinaryOperator 0x55dd55426c10 <line:153:13, col:31> 'int' '=='
|     | | |     |     | |-CStyleCastExpr 0x55dd55426b70 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |     | | `-ImplicitCastExpr 0x55dd55426b58 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     | |   `-DeclRefExpr 0x55dd55426b20 <col:19> 'msg_t':'char' lvalue Var 0x55dd55426618 'm2' 'msg_t':'char'
|     | | |     |     | `-CStyleCastExpr 0x55dd55426be8 <col:25, col:31> 'int' <IntegralCast>
|     | | |     |     |   `-ImplicitCastExpr 0x55dd55426bd0 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     |     `-DeclRefExpr 0x55dd55426b98 <col:31> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|     | | |     |     `-CompoundStmt 0x55dd55426cc8 <col:36, line:155:9>
|     | | |     |       `-BinaryOperator 0x55dd55426ca8 <line:154:11, col:23> 'char' '='
|     | | |     |         |-DeclRefExpr 0x55dd55426c30 <col:11> 'char' lvalue Var 0x55dd55423098 'st2' 'char'
|     | | |     |         `-CStyleCastExpr 0x55dd55426c80 <col:17, col:23> 'char' <IntegralCast>
|     | | |     |           `-IntegerLiteral 0x55dd55426c50 <col:23> 'int' 1
|     | | |     `-CompoundStmt 0x55dd55426db0 <line:156:14, line:158:7>
|     | | |       `-BinaryOperator 0x55dd55426d90 <line:157:9, col:17> 'msg_t':'char' '='
|     | | |         |-DeclRefExpr 0x55dd55426d38 <col:9> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|     | | |         `-ImplicitCastExpr 0x55dd55426d78 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |           `-DeclRefExpr 0x55dd55426d58 <col:17> 'msg_t':'char' lvalue Var 0x55dd55426618 'm2' 'msg_t':'char'
|     | | `-BinaryOperator 0x55dd55426e98 <line:160:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55dd55426e20 <col:5> '_Bool' lvalue Var 0x55dd55423188 'mode2' '_Bool'
|     | |   `-CStyleCastExpr 0x55dd55426e70 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55dd55426e40 <col:20> 'int' 0
|     | `-CompoundStmt 0x55dd554276e0 <line:161:10, line:169:3>
|     |   |-IfStmt 0x55dd55427620 <line:162:5, line:167:5> has_else
|     |   | |-ImplicitCastExpr 0x55dd55426f08 <line:162:9> '_Bool' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55dd55426ee8 <col:9> '_Bool' lvalue Var 0x55dd55423200 'alive2' '_Bool'
|     |   | |-CompoundStmt 0x55dd554271e8 <col:17, line:164:5>
|     |   | | `-BinaryOperator 0x55dd554271c8 <line:163:7, col:60> 'char' '='
|     |   | |   |-DeclRefExpr 0x55dd55426f20 <col:7> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|     |   | |   `-ImplicitCastExpr 0x55dd554271b0 <col:16, col:60> 'char' <IntegralCast>
|     |   | |     `-ConditionalOperator 0x55dd55427180 <col:16, col:60> 'int'
|     |   | |       |-BinaryOperator 0x55dd554270c0 <col:16, col:44> 'int' '&&'
|     |   | |       | |-BinaryOperator 0x55dd55426fe0 <col:16, col:25> 'int' '!='
|     |   | |       | | |-ImplicitCastExpr 0x55dd55426fb0 <col:16> 'int' <IntegralCast>
|     |   | |       | | | `-ImplicitCastExpr 0x55dd55426f80 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   | |       | | |   `-DeclRefExpr 0x55dd55426f40 <col:16> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|     |   | |       | | `-ImplicitCastExpr 0x55dd55426fc8 <col:25> 'int' <IntegralCast>
|     |   | |       | |   `-ImplicitCastExpr 0x55dd55426f98 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   | |       | |     `-DeclRefExpr 0x55dd55426f60 <col:25> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   | |       | `-BinaryOperator 0x55dd554270a0 <col:34, col:44> 'int' '=='
|     |   | |       |   |-ImplicitCastExpr 0x55dd55427070 <col:34> 'int' <IntegralCast>
|     |   | |       |   | `-ImplicitCastExpr 0x55dd55427040 <col:34> 'char' <LValueToRValue>
|     |   | |       |   |   `-DeclRefExpr 0x55dd55427000 <col:34> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|     |   | |       |   `-ImplicitCastExpr 0x55dd55427088 <col:44> 'int' <IntegralCast>
|     |   | |       |     `-ImplicitCastExpr 0x55dd55427058 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   | |       |       `-DeclRefExpr 0x55dd55427020 <col:44> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   | |       |-ImplicitCastExpr 0x55dd55427138 <col:52> 'int' <IntegralCast>
|     |   | |       | `-ImplicitCastExpr 0x55dd55427120 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   | |       |   `-DeclRefExpr 0x55dd554270e0 <col:52> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|     |   | |       `-ImplicitCastExpr 0x55dd55427168 <col:60> 'int' <IntegralCast>
|     |   | |         `-ImplicitCastExpr 0x55dd55427150 <col:60> 'char' <LValueToRValue>
|     |   | |           `-DeclRefExpr 0x55dd55427100 <col:60> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|     |   | `-IfStmt 0x55dd55427608 <line:165:5, line:167:5>
|     |   |   |-BinaryOperator 0x55dd554272f0 <line:165:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55dd55427250 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55dd55427238 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55dd55427200 <col:15> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|     |   |   | `-CStyleCastExpr 0x55dd554272c8 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55dd554272b0 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55dd55427278 <col:30> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|     |   |   `-CompoundStmt 0x55dd554275f0 <col:35, line:167:5>
|     |   |     `-BinaryOperator 0x55dd554275d0 <line:166:7, col:60> 'char' '='
|     |   |       |-DeclRefExpr 0x55dd55427310 <col:7> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|     |   |       `-ImplicitCastExpr 0x55dd554275b8 <col:16, col:60> 'char' <IntegralCast>
|     |   |         `-ConditionalOperator 0x55dd55427588 <col:16, col:60> 'int'
|     |   |           |-BinaryOperator 0x55dd554274c8 <col:16, col:44> 'int' '&&'
|     |   |           | |-BinaryOperator 0x55dd554273d0 <col:16, col:25> 'int' '!='
|     |   |           | | |-ImplicitCastExpr 0x55dd554273a0 <col:16> 'int' <IntegralCast>
|     |   |           | | | `-ImplicitCastExpr 0x55dd55427370 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |           | | |   `-DeclRefExpr 0x55dd55427330 <col:16> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|     |   |           | | `-ImplicitCastExpr 0x55dd554273b8 <col:25> 'int' <IntegralCast>
|     |   |           | |   `-ImplicitCastExpr 0x55dd55427388 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |           | |     `-DeclRefExpr 0x55dd55427350 <col:25> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   |           | `-BinaryOperator 0x55dd554274a8 <col:34, col:44> 'int' '=='
|     |   |           |   |-ImplicitCastExpr 0x55dd55427478 <col:34> 'int' <IntegralCast>
|     |   |           |   | `-ImplicitCastExpr 0x55dd55427430 <col:34> 'char' <LValueToRValue>
|     |   |           |   |   `-DeclRefExpr 0x55dd554273f0 <col:34> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|     |   |           |   `-ImplicitCastExpr 0x55dd55427490 <col:44> 'int' <IntegralCast>
|     |   |           |     `-ImplicitCastExpr 0x55dd55427460 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |           |       `-DeclRefExpr 0x55dd55427410 <col:44> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   |           |-ImplicitCastExpr 0x55dd55427540 <col:52> 'int' <IntegralCast>
|     |   |           | `-ImplicitCastExpr 0x55dd55427528 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |           |   `-DeclRefExpr 0x55dd554274e8 <col:52> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|     |   |           `-ImplicitCastExpr 0x55dd55427570 <col:60> 'int' <IntegralCast>
|     |   |             `-ImplicitCastExpr 0x55dd55427558 <col:60> 'char' <LValueToRValue>
|     |   |               `-DeclRefExpr 0x55dd55427508 <col:60> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|     |   `-BinaryOperator 0x55dd554276c0 <line:168:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55dd55427648 <col:5> '_Bool' lvalue Var 0x55dd55423188 'mode2' '_Bool'
|     |     `-CStyleCastExpr 0x55dd55427698 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55dd55427668 <col:20> 'int' 1
|     `-ReturnStmt 0x55dd55427728 <line:170:3>
|-FunctionDecl 0x55dd55427818 <line:173:1, line:206:1> line:173:6 used node3 'void (void)'
| `-CompoundStmt 0x55dd55428a08 <line:174:1, line:206:1>
|   |-DeclStmt 0x55dd55427930 <line:175:3, col:12>
|   | `-VarDecl 0x55dd554278c8 <col:3, col:9> col:9 used m3 'msg_t':'char'
|   `-CompoundStmt 0x55dd554289e0 <line:177:3, line:205:1>
|     |-BinaryOperator 0x55dd554279a0 <line:178:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55dd55427948 <col:3> 'msg_t':'char' lvalue Var 0x55dd554278c8 'm3' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55dd55427988 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dd55427968 <col:8> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55dd554289a8 <line:179:3, line:203:3> has_else
|     | |-ImplicitCastExpr 0x55dd554279e0 <line:179:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55dd554279c0 <col:7> '_Bool' lvalue Var 0x55dd55423548 'mode3' '_Bool'
|     | |-CompoundStmt 0x55dd55428168 <col:14, line:195:3>
|     | | |-BinaryOperator 0x55dd55427a50 <line:180:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55dd554279f8 <col:5> 'msg_t':'char' lvalue Var 0x55dd554278c8 'm3' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55dd55427a38 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55dd55427a18 <col:10> 'char' lvalue Var 0x55dd55422f30 'p2_old' 'char'
|     | | |-BinaryOperator 0x55dd55427ac8 <line:181:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55dd55427a70 <col:5> 'char' lvalue Var 0x55dd55422f30 'p2_old' 'char'
|     | | | `-ImplicitCastExpr 0x55dd55427ab0 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55dd55427a90 <col:14> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55dd554280b8 <line:182:5, line:193:5>
|     | | | |-BinaryOperator 0x55dd55427bd8 <line:182:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55dd55427b38 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55dd55427b20 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55dd55427ae8 <col:15> 'msg_t':'char' lvalue Var 0x55dd554278c8 'm3' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55dd55427bb0 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55dd55427b98 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55dd55427b60 <col:27> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55dd554280a0 <col:34, line:193:5>
|     | | |   `-IfStmt 0x55dd55428078 <line:183:7, line:192:7> has_else
|     | | |     |-ImplicitCastExpr 0x55dd55427c18 <line:183:11> '_Bool' <LValueToRValue>
|     | | |     | `-DeclRefExpr 0x55dd55427bf8 <col:11> '_Bool' lvalue Var 0x55dd554235c0 'alive3' '_Bool'
|     | | |     |-CompoundStmt 0x55dd55427fd0 <col:19, line:190:7>
|     | | |     | `-IfStmt 0x55dd55427fa8 <line:184:9, line:189:9> has_else
|     | | |     |   |-BinaryOperator 0x55dd55427d20 <line:184:13, col:30> 'int' '>'
|     | | |     |   | |-CStyleCastExpr 0x55dd55427c80 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |   | | `-ImplicitCastExpr 0x55dd55427c68 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   | |   `-DeclRefExpr 0x55dd55427c30 <col:19> 'msg_t':'char' lvalue Var 0x55dd554278c8 'm3' 'msg_t':'char'
|     | | |     |   | `-CStyleCastExpr 0x55dd55427cf8 <col:24, col:30> 'int' <IntegralCast>
|     | | |     |   |   `-ImplicitCastExpr 0x55dd55427ce0 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   |     `-DeclRefExpr 0x55dd55427ca8 <col:30> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|     | | |     |   |-CompoundStmt 0x55dd55427db8 <col:35, line:186:9>
|     | | |     |   | `-BinaryOperator 0x55dd55427d98 <line:185:11, col:19> 'msg_t':'char' '='
|     | | |     |   |   |-DeclRefExpr 0x55dd55427d40 <col:11> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|     | | |     |   |   `-ImplicitCastExpr 0x55dd55427d80 <col:19> 'msg_t':'char' <LValueToRValue>
|     | | |     |   |     `-DeclRefExpr 0x55dd55427d60 <col:19> 'msg_t':'char' lvalue Var 0x55dd554278c8 'm3' 'msg_t':'char'
|     | | |     |   `-IfStmt 0x55dd55427f90 <line:187:9, line:189:9>
|     | | |     |     |-BinaryOperator 0x55dd55427ec0 <line:187:13, col:31> 'int' '=='
|     | | |     |     | |-CStyleCastExpr 0x55dd55427e20 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |     | | `-ImplicitCastExpr 0x55dd55427e08 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     | |   `-DeclRefExpr 0x55dd55427dd0 <col:19> 'msg_t':'char' lvalue Var 0x55dd554278c8 'm3' 'msg_t':'char'
|     | | |     |     | `-CStyleCastExpr 0x55dd55427e98 <col:25, col:31> 'int' <IntegralCast>
|     | | |     |     |   `-ImplicitCastExpr 0x55dd55427e80 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     |     `-DeclRefExpr 0x55dd55427e48 <col:31> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|     | | |     |     `-CompoundStmt 0x55dd55427f78 <col:36, line:189:9>
|     | | |     |       `-BinaryOperator 0x55dd55427f58 <line:188:11, col:23> 'char' '='
|     | | |     |         |-DeclRefExpr 0x55dd55427ee0 <col:11> 'char' lvalue Var 0x55dd55423458 'st3' 'char'
|     | | |     |         `-CStyleCastExpr 0x55dd55427f30 <col:17, col:23> 'char' <IntegralCast>
|     | | |     |           `-IntegerLiteral 0x55dd55427f00 <col:23> 'int' 1
|     | | |     `-CompoundStmt 0x55dd55428060 <line:190:14, line:192:7>
|     | | |       `-BinaryOperator 0x55dd55428040 <line:191:9, col:17> 'msg_t':'char' '='
|     | | |         |-DeclRefExpr 0x55dd55427fe8 <col:9> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|     | | |         `-ImplicitCastExpr 0x55dd55428028 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |           `-DeclRefExpr 0x55dd55428008 <col:17> 'msg_t':'char' lvalue Var 0x55dd554278c8 'm3' 'msg_t':'char'
|     | | `-BinaryOperator 0x55dd55428148 <line:194:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55dd554280d0 <col:5> '_Bool' lvalue Var 0x55dd55423548 'mode3' '_Bool'
|     | |   `-CStyleCastExpr 0x55dd55428120 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55dd554280f0 <col:20> 'int' 0
|     | `-CompoundStmt 0x55dd55428988 <line:195:10, line:203:3>
|     |   |-IfStmt 0x55dd554288c8 <line:196:5, line:201:5> has_else
|     |   | |-ImplicitCastExpr 0x55dd554281b8 <line:196:9> '_Bool' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55dd55428198 <col:9> '_Bool' lvalue Var 0x55dd554235c0 'alive3' '_Bool'
|     |   | |-CompoundStmt 0x55dd554284a8 <col:17, line:198:5>
|     |   | | `-BinaryOperator 0x55dd55428488 <line:197:7, col:60> 'char' '='
|     |   | |   |-DeclRefExpr 0x55dd554281d0 <col:7> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|     |   | |   `-ImplicitCastExpr 0x55dd55428470 <col:16, col:60> 'char' <IntegralCast>
|     |   | |     `-ConditionalOperator 0x55dd55428430 <col:16, col:60> 'int'
|     |   | |       |-BinaryOperator 0x55dd55428370 <col:16, col:44> 'int' '&&'
|     |   | |       | |-BinaryOperator 0x55dd55428290 <col:16, col:25> 'int' '!='
|     |   | |       | | |-ImplicitCastExpr 0x55dd55428260 <col:16> 'int' <IntegralCast>
|     |   | |       | | | `-ImplicitCastExpr 0x55dd55428230 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   | |       | | |   `-DeclRefExpr 0x55dd554281f0 <col:16> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|     |   | |       | | `-ImplicitCastExpr 0x55dd55428278 <col:25> 'int' <IntegralCast>
|     |   | |       | |   `-ImplicitCastExpr 0x55dd55428248 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   | |       | |     `-DeclRefExpr 0x55dd55428210 <col:25> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   | |       | `-BinaryOperator 0x55dd55428350 <col:34, col:44> 'int' '=='
|     |   | |       |   |-ImplicitCastExpr 0x55dd55428320 <col:34> 'int' <IntegralCast>
|     |   | |       |   | `-ImplicitCastExpr 0x55dd554282f0 <col:34> 'char' <LValueToRValue>
|     |   | |       |   |   `-DeclRefExpr 0x55dd554282b0 <col:34> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|     |   | |       |   `-ImplicitCastExpr 0x55dd55428338 <col:44> 'int' <IntegralCast>
|     |   | |       |     `-ImplicitCastExpr 0x55dd55428308 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   | |       |       `-DeclRefExpr 0x55dd554282d0 <col:44> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   | |       |-ImplicitCastExpr 0x55dd554283e8 <col:52> 'int' <IntegralCast>
|     |   | |       | `-ImplicitCastExpr 0x55dd554283d0 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   | |       |   `-DeclRefExpr 0x55dd55428390 <col:52> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|     |   | |       `-ImplicitCastExpr 0x55dd55428418 <col:60> 'int' <IntegralCast>
|     |   | |         `-ImplicitCastExpr 0x55dd55428400 <col:60> 'char' <LValueToRValue>
|     |   | |           `-DeclRefExpr 0x55dd554283b0 <col:60> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|     |   | `-IfStmt 0x55dd554288b0 <line:199:5, line:201:5>
|     |   |   |-BinaryOperator 0x55dd554285b0 <line:199:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55dd55428510 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55dd554284f8 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55dd554284c0 <col:15> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|     |   |   | `-CStyleCastExpr 0x55dd55428588 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55dd55428570 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55dd55428538 <col:30> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|     |   |   `-CompoundStmt 0x55dd55428898 <col:35, line:201:5>
|     |   |     `-BinaryOperator 0x55dd55428878 <line:200:7, col:60> 'char' '='
|     |   |       |-DeclRefExpr 0x55dd554285d0 <col:7> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|     |   |       `-ImplicitCastExpr 0x55dd55428860 <col:16, col:60> 'char' <IntegralCast>
|     |   |         `-ConditionalOperator 0x55dd55428830 <col:16, col:60> 'int'
|     |   |           |-BinaryOperator 0x55dd55428770 <col:16, col:44> 'int' '&&'
|     |   |           | |-BinaryOperator 0x55dd55428690 <col:16, col:25> 'int' '!='
|     |   |           | | |-ImplicitCastExpr 0x55dd55428660 <col:16> 'int' <IntegralCast>
|     |   |           | | | `-ImplicitCastExpr 0x55dd55428630 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |           | | |   `-DeclRefExpr 0x55dd554285f0 <col:16> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|     |   |           | | `-ImplicitCastExpr 0x55dd55428678 <col:25> 'int' <IntegralCast>
|     |   |           | |   `-ImplicitCastExpr 0x55dd55428648 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |           | |     `-DeclRefExpr 0x55dd55428610 <col:25> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   |           | `-BinaryOperator 0x55dd55428750 <col:34, col:44> 'int' '=='
|     |   |           |   |-ImplicitCastExpr 0x55dd55428720 <col:34> 'int' <IntegralCast>
|     |   |           |   | `-ImplicitCastExpr 0x55dd554286f0 <col:34> 'char' <LValueToRValue>
|     |   |           |   |   `-DeclRefExpr 0x55dd554286b0 <col:34> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|     |   |           |   `-ImplicitCastExpr 0x55dd55428738 <col:44> 'int' <IntegralCast>
|     |   |           |     `-ImplicitCastExpr 0x55dd55428708 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |           |       `-DeclRefExpr 0x55dd554286d0 <col:44> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   |           |-ImplicitCastExpr 0x55dd554287e8 <col:52> 'int' <IntegralCast>
|     |   |           | `-ImplicitCastExpr 0x55dd554287d0 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |           |   `-DeclRefExpr 0x55dd55428790 <col:52> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|     |   |           `-ImplicitCastExpr 0x55dd55428818 <col:60> 'int' <IntegralCast>
|     |   |             `-ImplicitCastExpr 0x55dd55428800 <col:60> 'char' <LValueToRValue>
|     |   |               `-DeclRefExpr 0x55dd554287b0 <col:60> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|     |   `-BinaryOperator 0x55dd55428968 <line:202:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55dd554288f0 <col:5> '_Bool' lvalue Var 0x55dd55423548 'mode3' '_Bool'
|     |     `-CStyleCastExpr 0x55dd55428940 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55dd55428910 <col:20> 'int' 1
|     `-ReturnStmt 0x55dd554289d0 <line:204:3>
|-FunctionDecl 0x55dd55428ac0 <line:207:1, line:240:1> line:207:6 used node4 'void (void)'
| `-CompoundStmt 0x55dd55429cc0 <line:208:1, line:240:1>
|   |-DeclStmt 0x55dd55428bd8 <line:209:3, col:12>
|   | `-VarDecl 0x55dd55428b70 <col:3, col:9> col:9 used m4 'msg_t':'char'
|   `-CompoundStmt 0x55dd55429c98 <line:211:3, line:239:1>
|     |-BinaryOperator 0x55dd55428c48 <line:212:3, col:8> 'msg_t':'char' '='
|     | |-DeclRefExpr 0x55dd55428bf0 <col:3> 'msg_t':'char' lvalue Var 0x55dd55428b70 'm4' 'msg_t':'char'
|     | `-ImplicitCastExpr 0x55dd55428c30 <col:8> 'msg_t':'char' <LValueToRValue>
|     |   `-DeclRefExpr 0x55dd55428c10 <col:8> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |-IfStmt 0x55dd55429c60 <line:213:3, line:237:3> has_else
|     | |-ImplicitCastExpr 0x55dd55428c88 <line:213:7> '_Bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x55dd55428c68 <col:7> '_Bool' lvalue Var 0x55dd55423908 'mode4' '_Bool'
|     | |-CompoundStmt 0x55dd55429410 <col:14, line:229:3>
|     | | |-BinaryOperator 0x55dd55428cf8 <line:214:5, col:10> 'msg_t':'char' '='
|     | | | |-DeclRefExpr 0x55dd55428ca0 <col:5> 'msg_t':'char' lvalue Var 0x55dd55428b70 'm4' 'msg_t':'char'
|     | | | `-ImplicitCastExpr 0x55dd55428ce0 <col:10> 'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55dd55428cc0 <col:10> 'char' lvalue Var 0x55dd554232f0 'p3_old' 'char'
|     | | |-BinaryOperator 0x55dd55428d70 <line:215:5, col:14> 'char' '='
|     | | | |-DeclRefExpr 0x55dd55428d18 <col:5> 'char' lvalue Var 0x55dd554232f0 'p3_old' 'char'
|     | | | `-ImplicitCastExpr 0x55dd55428d58 <col:14> 'msg_t':'char' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55dd55428d38 <col:14> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     | | |-IfStmt 0x55dd55429360 <line:216:5, line:227:5>
|     | | | |-BinaryOperator 0x55dd55428e80 <line:216:9, col:27> 'int' '!='
|     | | | | |-CStyleCastExpr 0x55dd55428de0 <col:9, col:15> 'int' <IntegralCast>
|     | | | | | `-ImplicitCastExpr 0x55dd55428dc8 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | | |   `-DeclRefExpr 0x55dd55428d90 <col:15> 'msg_t':'char' lvalue Var 0x55dd55428b70 'm4' 'msg_t':'char'
|     | | | | `-CStyleCastExpr 0x55dd55428e58 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   `-ImplicitCastExpr 0x55dd55428e40 <col:27> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | | |     `-DeclRefExpr 0x55dd55428e08 <col:27> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     | | | `-CompoundStmt 0x55dd55429348 <col:34, line:227:5>
|     | | |   `-IfStmt 0x55dd55429320 <line:217:7, line:226:7> has_else
|     | | |     |-ImplicitCastExpr 0x55dd55428ec0 <line:217:11> '_Bool' <LValueToRValue>
|     | | |     | `-DeclRefExpr 0x55dd55428ea0 <col:11> '_Bool' lvalue Var 0x55dd55423980 'alive4' '_Bool'
|     | | |     |-CompoundStmt 0x55dd55429278 <col:19, line:224:7>
|     | | |     | `-IfStmt 0x55dd55429250 <line:218:9, line:223:9> has_else
|     | | |     |   |-BinaryOperator 0x55dd55428fc8 <line:218:13, col:30> 'int' '>'
|     | | |     |   | |-CStyleCastExpr 0x55dd55428f28 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |   | | `-ImplicitCastExpr 0x55dd55428f10 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   | |   `-DeclRefExpr 0x55dd55428ed8 <col:19> 'msg_t':'char' lvalue Var 0x55dd55428b70 'm4' 'msg_t':'char'
|     | | |     |   | `-CStyleCastExpr 0x55dd55428fa0 <col:24, col:30> 'int' <IntegralCast>
|     | | |     |   |   `-ImplicitCastExpr 0x55dd55428f88 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |   |     `-DeclRefExpr 0x55dd55428f50 <col:30> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|     | | |     |   |-CompoundStmt 0x55dd55429060 <col:35, line:220:9>
|     | | |     |   | `-BinaryOperator 0x55dd55429040 <line:219:11, col:19> 'msg_t':'char' '='
|     | | |     |   |   |-DeclRefExpr 0x55dd55428fe8 <col:11> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|     | | |     |   |   `-ImplicitCastExpr 0x55dd55429028 <col:19> 'msg_t':'char' <LValueToRValue>
|     | | |     |   |     `-DeclRefExpr 0x55dd55429008 <col:19> 'msg_t':'char' lvalue Var 0x55dd55428b70 'm4' 'msg_t':'char'
|     | | |     |   `-IfStmt 0x55dd55429238 <line:221:9, line:223:9>
|     | | |     |     |-BinaryOperator 0x55dd55429168 <line:221:13, col:31> 'int' '=='
|     | | |     |     | |-CStyleCastExpr 0x55dd554290c8 <col:13, col:19> 'int' <IntegralCast>
|     | | |     |     | | `-ImplicitCastExpr 0x55dd554290b0 <col:19> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     | |   `-DeclRefExpr 0x55dd55429078 <col:19> 'msg_t':'char' lvalue Var 0x55dd55428b70 'm4' 'msg_t':'char'
|     | | |     |     | `-CStyleCastExpr 0x55dd55429140 <col:25, col:31> 'int' <IntegralCast>
|     | | |     |     |   `-ImplicitCastExpr 0x55dd55429128 <col:31> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     |     |     `-DeclRefExpr 0x55dd554290f0 <col:31> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|     | | |     |     `-CompoundStmt 0x55dd55429220 <col:36, line:223:9>
|     | | |     |       `-BinaryOperator 0x55dd55429200 <line:222:11, col:23> 'char' '='
|     | | |     |         |-DeclRefExpr 0x55dd55429188 <col:11> 'char' lvalue Var 0x55dd55423818 'st4' 'char'
|     | | |     |         `-CStyleCastExpr 0x55dd554291d8 <col:17, col:23> 'char' <IntegralCast>
|     | | |     |           `-IntegerLiteral 0x55dd554291a8 <col:23> 'int' 1
|     | | |     `-CompoundStmt 0x55dd55429308 <line:224:14, line:226:7>
|     | | |       `-BinaryOperator 0x55dd554292e8 <line:225:9, col:17> 'msg_t':'char' '='
|     | | |         |-DeclRefExpr 0x55dd55429290 <col:9> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|     | | |         `-ImplicitCastExpr 0x55dd554292d0 <col:17> 'msg_t':'char' <LValueToRValue>
|     | | |           `-DeclRefExpr 0x55dd554292b0 <col:17> 'msg_t':'char' lvalue Var 0x55dd55428b70 'm4' 'msg_t':'char'
|     | | `-BinaryOperator 0x55dd554293f0 <line:228:5, col:20> '_Bool' '='
|     | |   |-DeclRefExpr 0x55dd55429378 <col:5> '_Bool' lvalue Var 0x55dd55423908 'mode4' '_Bool'
|     | |   `-CStyleCastExpr 0x55dd554293c8 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     | |     `-IntegerLiteral 0x55dd55429398 <col:20> 'int' 0
|     | `-CompoundStmt 0x55dd55429c40 <line:229:10, line:237:3>
|     |   |-IfStmt 0x55dd55429b80 <line:230:5, line:235:5> has_else
|     |   | |-ImplicitCastExpr 0x55dd55429480 <line:230:9> '_Bool' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55dd55429440 <col:9> '_Bool' lvalue Var 0x55dd55423980 'alive4' '_Bool'
|     |   | |-CompoundStmt 0x55dd55429760 <col:17, line:232:5>
|     |   | | `-BinaryOperator 0x55dd55429740 <line:231:7, col:60> 'char' '='
|     |   | |   |-DeclRefExpr 0x55dd55429498 <col:7> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|     |   | |   `-ImplicitCastExpr 0x55dd55429728 <col:16, col:60> 'char' <IntegralCast>
|     |   | |     `-ConditionalOperator 0x55dd554296f8 <col:16, col:60> 'int'
|     |   | |       |-BinaryOperator 0x55dd55429638 <col:16, col:44> 'int' '&&'
|     |   | |       | |-BinaryOperator 0x55dd55429558 <col:16, col:25> 'int' '!='
|     |   | |       | | |-ImplicitCastExpr 0x55dd55429528 <col:16> 'int' <IntegralCast>
|     |   | |       | | | `-ImplicitCastExpr 0x55dd554294f8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   | |       | | |   `-DeclRefExpr 0x55dd554294b8 <col:16> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|     |   | |       | | `-ImplicitCastExpr 0x55dd55429540 <col:25> 'int' <IntegralCast>
|     |   | |       | |   `-ImplicitCastExpr 0x55dd55429510 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   | |       | |     `-DeclRefExpr 0x55dd554294d8 <col:25> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   | |       | `-BinaryOperator 0x55dd55429618 <col:34, col:44> 'int' '=='
|     |   | |       |   |-ImplicitCastExpr 0x55dd554295e8 <col:34> 'int' <IntegralCast>
|     |   | |       |   | `-ImplicitCastExpr 0x55dd554295b8 <col:34> 'char' <LValueToRValue>
|     |   | |       |   |   `-DeclRefExpr 0x55dd55429578 <col:34> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|     |   | |       |   `-ImplicitCastExpr 0x55dd55429600 <col:44> 'int' <IntegralCast>
|     |   | |       |     `-ImplicitCastExpr 0x55dd554295d0 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   | |       |       `-DeclRefExpr 0x55dd55429598 <col:44> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   | |       |-ImplicitCastExpr 0x55dd554296b0 <col:52> 'int' <IntegralCast>
|     |   | |       | `-ImplicitCastExpr 0x55dd55429698 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   | |       |   `-DeclRefExpr 0x55dd55429658 <col:52> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|     |   | |       `-ImplicitCastExpr 0x55dd554296e0 <col:60> 'int' <IntegralCast>
|     |   | |         `-ImplicitCastExpr 0x55dd554296c8 <col:60> 'char' <LValueToRValue>
|     |   | |           `-DeclRefExpr 0x55dd55429678 <col:60> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|     |   | `-IfStmt 0x55dd55429b68 <line:233:5, line:235:5>
|     |   |   |-BinaryOperator 0x55dd55429868 <line:233:9, col:30> 'int' '!='
|     |   |   | |-CStyleCastExpr 0x55dd554297c8 <col:9, col:15> 'int' <IntegralCast>
|     |   |   | | `-ImplicitCastExpr 0x55dd554297b0 <col:15> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     |   |   | |   `-DeclRefExpr 0x55dd55429778 <col:15> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|     |   |   | `-CStyleCastExpr 0x55dd55429840 <col:24, col:30> 'int' <IntegralCast>
|     |   |   |   `-ImplicitCastExpr 0x55dd55429828 <col:30> 'char' <LValueToRValue> part_of_explicit_cast
|     |   |   |     `-DeclRefExpr 0x55dd554297f0 <col:30> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|     |   |   `-CompoundStmt 0x55dd55429b50 <col:35, line:235:5>
|     |   |     `-BinaryOperator 0x55dd55429b30 <line:234:7, col:60> 'char' '='
|     |   |       |-DeclRefExpr 0x55dd55429888 <col:7> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|     |   |       `-ImplicitCastExpr 0x55dd55429b18 <col:16, col:60> 'char' <IntegralCast>
|     |   |         `-ConditionalOperator 0x55dd55429ae8 <col:16, col:60> 'int'
|     |   |           |-BinaryOperator 0x55dd55429a28 <col:16, col:44> 'int' '&&'
|     |   |           | |-BinaryOperator 0x55dd55429948 <col:16, col:25> 'int' '!='
|     |   |           | | |-ImplicitCastExpr 0x55dd55429918 <col:16> 'int' <IntegralCast>
|     |   |           | | | `-ImplicitCastExpr 0x55dd554298e8 <col:16> 'msg_t':'char' <LValueToRValue>
|     |   |           | | |   `-DeclRefExpr 0x55dd554298a8 <col:16> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|     |   |           | | `-ImplicitCastExpr 0x55dd55429930 <col:25> 'int' <IntegralCast>
|     |   |           | |   `-ImplicitCastExpr 0x55dd55429900 <col:25> 'msg_t':'char' <LValueToRValue>
|     |   |           | |     `-DeclRefExpr 0x55dd554298c8 <col:25> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   |           | `-BinaryOperator 0x55dd55429a08 <col:34, col:44> 'int' '=='
|     |   |           |   |-ImplicitCastExpr 0x55dd554299d8 <col:34> 'int' <IntegralCast>
|     |   |           |   | `-ImplicitCastExpr 0x55dd554299a8 <col:34> 'char' <LValueToRValue>
|     |   |           |   |   `-DeclRefExpr 0x55dd55429968 <col:34> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|     |   |           |   `-ImplicitCastExpr 0x55dd554299f0 <col:44> 'int' <IntegralCast>
|     |   |           |     `-ImplicitCastExpr 0x55dd554299c0 <col:44> 'msg_t':'char' <LValueToRValue>
|     |   |           |       `-DeclRefExpr 0x55dd55429988 <col:44> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|     |   |           |-ImplicitCastExpr 0x55dd55429aa0 <col:52> 'int' <IntegralCast>
|     |   |           | `-ImplicitCastExpr 0x55dd55429a88 <col:52> 'msg_t':'char' <LValueToRValue>
|     |   |           |   `-DeclRefExpr 0x55dd55429a48 <col:52> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|     |   |           `-ImplicitCastExpr 0x55dd55429ad0 <col:60> 'int' <IntegralCast>
|     |   |             `-ImplicitCastExpr 0x55dd55429ab8 <col:60> 'char' <LValueToRValue>
|     |   |               `-DeclRefExpr 0x55dd55429a68 <col:60> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|     |   `-BinaryOperator 0x55dd55429c20 <line:236:5, col:20> '_Bool' '='
|     |     |-DeclRefExpr 0x55dd55429ba8 <col:5> '_Bool' lvalue Var 0x55dd55423908 'mode4' '_Bool'
|     |     `-CStyleCastExpr 0x55dd55429bf8 <col:13, col:20> '_Bool' <IntegralToBoolean>
|     |       `-IntegerLiteral 0x55dd55429bc8 <col:20> 'int' 1
|     `-ReturnStmt 0x55dd55429c88 <line:238:3>
|-VarDecl 0x55dd55429ef0 <line:241:1, col:83> col:8 nodes 'void (*[4])(void)' cinit
| `-InitListExpr 0x55dd5542a0a8 <col:27, col:83> 'void (*[4])(void)'
|   |-UnaryOperator 0x55dd55429f78 <col:34, col:36> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55dd55429f58 <col:36> 'void (void)' Function 0x55dd55423c60 'node1' 'void (void)'
|   |-UnaryOperator 0x55dd55429fb0 <col:48, col:50> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55dd55429f90 <col:50> 'void (void)' Function 0x55dd55426568 'node2' 'void (void)'
|   |-UnaryOperator 0x55dd55429fe8 <col:62, col:64> 'void (*)(void)' prefix '&' cannot overflow
|   | `-DeclRefExpr 0x55dd55429fc8 <col:64> 'void (void)' Function 0x55dd55427818 'node3' 'void (void)'
|   `-UnaryOperator 0x55dd5542a020 <col:76, col:78> 'void (*)(void)' prefix '&' cannot overflow
|     `-DeclRefExpr 0x55dd5542a000 <col:78> 'void (void)' Function 0x55dd55428ac0 'node4' 'void (void)'
|-FunctionDecl 0x55dd5542a1d8 <line:242:1, line:346:1> line:242:5 used init 'int (void)'
| `-CompoundStmt 0x55dd55430fe0 <line:243:1, line:346:1>
|   |-DeclStmt 0x55dd5542a2f8 <line:244:3, col:11>
|   | `-VarDecl 0x55dd5542a290 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x55dd55430fc0 <line:246:3, line:345:1>
|     |-IfStmt 0x55dd55430f30 <line:247:3, line:343:3> has_else
|     | |-BinaryOperator 0x55dd5542a3a8 <line:247:7, col:19> 'int' '=='
|     | | |-CStyleCastExpr 0x55dd5542a360 <col:7, col:13> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55dd5542a348 <col:13> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | | |   `-DeclRefExpr 0x55dd5542a310 <col:13> 'unsigned char' lvalue Var 0x55dd55422a80 'r1' 'unsigned char'
|     | | `-IntegerLiteral 0x55dd5542a388 <col:19> 'int' 0
|     | |-CompoundStmt 0x55dd55430ea0 <col:22, line:341:3>
|     | | `-IfStmt 0x55dd55430e78 <line:248:5, line:340:5> has_else
|     | |   |-BinaryOperator 0x55dd5542a680 <line:248:9, col:74> 'int' '>='
|     | |   | |-BinaryOperator 0x55dd5542a640 <col:9, col:64> 'int' '+'
|     | |   | | |-ParenExpr 0x55dd5542a5a8 <col:9, col:54> 'int'
|     | |   | | | `-BinaryOperator 0x55dd5542a588 <col:10, col:48> 'int' '+'
|     | |   | | |   |-ParenExpr 0x55dd5542a4f0 <col:10, col:38> 'int'
|     | |   | | |   | `-BinaryOperator 0x55dd5542a4d0 <col:11, col:32> 'int' '+'
|     | |   | | |   |   |-CStyleCastExpr 0x55dd5542a418 <col:11, col:17> 'int' <IntegralCast>
|     | |   | | |   |   | `-ImplicitCastExpr 0x55dd5542a400 <col:17> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   | | |   |   |   `-DeclRefExpr 0x55dd5542a3c8 <col:17> '_Bool' lvalue Var 0x55dd55422e40 'alive1' '_Bool'
|     | |   | | |   |   `-CStyleCastExpr 0x55dd5542a4a8 <col:26, col:32> 'int' <IntegralCast>
|     | |   | | |   |     `-ImplicitCastExpr 0x55dd5542a490 <col:32> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   | | |   |       `-DeclRefExpr 0x55dd5542a440 <col:32> '_Bool' lvalue Var 0x55dd55423200 'alive2' '_Bool'
|     | |   | | |   `-CStyleCastExpr 0x55dd5542a560 <col:42, col:48> 'int' <IntegralCast>
|     | |   | | |     `-ImplicitCastExpr 0x55dd5542a548 <col:48> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   | | |       `-DeclRefExpr 0x55dd5542a510 <col:48> '_Bool' lvalue Var 0x55dd554235c0 'alive3' '_Bool'
|     | |   | | `-CStyleCastExpr 0x55dd5542a618 <col:58, col:64> 'int' <IntegralCast>
|     | |   | |   `-ImplicitCastExpr 0x55dd5542a600 <col:64> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   | |     `-DeclRefExpr 0x55dd5542a5c8 <col:64> '_Bool' lvalue Var 0x55dd55423980 'alive4' '_Bool'
|     | |   | `-IntegerLiteral 0x55dd5542a660 <col:74> 'int' 1
|     | |   |-CompoundStmt 0x55dd55430de8 <col:77, line:338:5>
|     | |   | `-IfStmt 0x55dd55430dc0 <line:249:7, line:337:7> has_else
|     | |   |   |-BinaryOperator 0x55dd5542a738 <line:249:11, col:24> 'int' '>='
|     | |   |   | |-CStyleCastExpr 0x55dd5542a6f0 <col:11, col:17> 'int' <IntegralCast>
|     | |   |   | | `-ImplicitCastExpr 0x55dd5542a6d8 <col:17> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   | |   `-DeclRefExpr 0x55dd5542a6a0 <col:17> 'char' lvalue Var 0x55dd55422c60 'id1' 'char'
|     | |   |   | `-IntegerLiteral 0x55dd5542a718 <col:24> 'int' 0
|     | |   |   |-CompoundStmt 0x55dd55430d30 <col:27, line:335:7>
|     | |   |   | `-IfStmt 0x55dd55430d08 <line:250:9, line:334:9> has_else
|     | |   |   |   |-BinaryOperator 0x55dd5542a7f0 <line:250:13, col:26> 'int' '=='
|     | |   |   |   | |-CStyleCastExpr 0x55dd5542a7a8 <col:13, col:19> 'int' <IntegralCast>
|     | |   |   |   | | `-ImplicitCastExpr 0x55dd5542a790 <col:19> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   | |   `-DeclRefExpr 0x55dd5542a758 <col:19> 'char' lvalue Var 0x55dd55422cd8 'st1' 'char'
|     | |   |   |   | `-IntegerLiteral 0x55dd5542a7d0 <col:26> 'int' 0
|     | |   |   |   |-CompoundStmt 0x55dd55430c78 <col:29, line:332:9>
|     | |   |   |   | `-IfStmt 0x55dd55430c50 <line:251:11, line:331:11> has_else
|     | |   |   |   |   |-BinaryOperator 0x55dd5542a900 <line:251:15, col:36> 'int' '=='
|     | |   |   |   |   | |-CStyleCastExpr 0x55dd5542a860 <col:15, col:21> 'int' <IntegralCast>
|     | |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542a848 <col:21> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   | |   `-DeclRefExpr 0x55dd5542a810 <col:21> 'msg_t':'char' lvalue Var 0x55dd55422d50 'send1' 'msg_t':'char'
|     | |   |   |   |   | `-CStyleCastExpr 0x55dd5542a8d8 <col:30, col:36> 'int' <IntegralCast>
|     | |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542a8c0 <col:36> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |     `-DeclRefExpr 0x55dd5542a888 <col:36> 'char' lvalue Var 0x55dd55422c60 'id1' 'char'
|     | |   |   |   |   |-CompoundStmt 0x55dd55430bc0 <col:41, line:329:11>
|     | |   |   |   |   | `-IfStmt 0x55dd55430b98 <line:252:13, line:328:13> has_else
|     | |   |   |   |   |   |-BinaryOperator 0x55dd5542a9b8 <line:252:17, col:32> 'int' '=='
|     | |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542a970 <col:17, col:23> 'int' <IntegralCast>
|     | |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542a958 <col:23> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542a920 <col:23> '_Bool' lvalue Var 0x55dd55422dc8 'mode1' '_Bool'
|     | |   |   |   |   |   | `-IntegerLiteral 0x55dd5542a998 <col:32> 'int' 0
|     | |   |   |   |   |   |-CompoundStmt 0x55dd55430b08 <col:35, line:326:13>
|     | |   |   |   |   |   | `-IfStmt 0x55dd55430ae0 <line:253:15, line:325:15> has_else
|     | |   |   |   |   |   |   |-BinaryOperator 0x55dd5542aa70 <line:253:19, col:32> 'int' '>='
|     | |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542aa28 <col:19, col:25> 'int' <IntegralCast>
|     | |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542aa10 <col:25> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542a9d8 <col:25> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|     | |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542aa50 <col:32> 'int' 0
|     | |   |   |   |   |   |   |-CompoundStmt 0x55dd55430a50 <col:35, line:323:15>
|     | |   |   |   |   |   |   | `-IfStmt 0x55dd55430a28 <line:254:17, line:322:17> has_else
|     | |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542ab28 <line:254:21, col:34> 'int' '=='
|     | |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542aae0 <col:21, col:27> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542aac8 <col:27> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542aa90 <col:27> 'char' lvalue Var 0x55dd55423098 'st2' 'char'
|     | |   |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542ab08 <col:34> 'int' 0
|     | |   |   |   |   |   |   |   |-CompoundStmt 0x55dd55430998 <col:37, line:320:17>
|     | |   |   |   |   |   |   |   | `-IfStmt 0x55dd55430970 <line:255:19, line:319:19> has_else
|     | |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542ac38 <line:255:23, col:44> 'int' '=='
|     | |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542ab98 <col:23, col:29> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542ab80 <col:29> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542ab48 <col:29> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542ac10 <col:38, col:44> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542abf8 <col:44> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542abc0 <col:44> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd554308e0 <col:49, line:317:19>
|     | |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd554308b8 <line:256:21, line:316:21> has_else
|     | |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542acf0 <line:256:25, col:40> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542aca8 <col:25, col:31> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542ac90 <col:31> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542ac58 <col:31> '_Bool' lvalue Var 0x55dd55423188 'mode2' '_Bool'
|     | |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542acd0 <col:40> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f7b0 <col:43, line:314:21>
|     | |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f788 <line:257:23, line:313:23> has_else
|     | |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542ada8 <line:257:27, col:40> 'int' '>='
|     | |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542ad60 <col:27, col:33> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542ad48 <col:33> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542ad10 <col:33> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542ad88 <col:40> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f6f8 <col:43, line:311:23>
|     | |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f6d0 <line:258:25, line:310:25> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542ae60 <line:258:29, col:42> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542ae18 <col:29, col:35> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542ae00 <col:35> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542adc8 <col:35> 'char' lvalue Var 0x55dd55423458 'st3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542ae40 <col:42> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f640 <col:45, line:308:25>
|     | |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f618 <line:259:27, line:307:27> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542af70 <line:259:31, col:52> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542aed0 <col:31, col:37> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542aeb8 <col:37> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542ae80 <col:37> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542af48 <col:46, col:52> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542af30 <col:52> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542aef8 <col:52> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f588 <col:57, line:305:27>
|     | |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f560 <line:260:29, line:304:29> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542b028 <line:260:33, col:48> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542afe0 <col:33, col:39> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542afc8 <col:39> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542af90 <col:39> '_Bool' lvalue Var 0x55dd55423548 'mode3' '_Bool'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542b008 <col:48> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f4d0 <col:51, line:302:29>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f4a8 <line:261:31, line:301:31> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542b0e0 <line:261:35, col:48> 'int' '>='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542b098 <col:35, col:41> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542b080 <col:41> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542b048 <col:41> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542b0c0 <col:48> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f418 <col:51, line:299:31>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f3f0 <line:262:33, line:298:33> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542b198 <line:262:37, col:50> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542b150 <col:37, col:43> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542b138 <col:43> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542b100 <col:43> 'char' lvalue Var 0x55dd55423818 'st4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542b178 <col:50> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f360 <col:53, line:296:33>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f338 <line:263:35, line:295:35> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542b2a8 <line:263:39, col:60> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542b208 <col:39, col:45> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542b1f0 <col:45> 'msg_t':'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542b1b8 <col:45> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542b280 <col:54, col:60> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542b268 <col:60> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542b230 <col:60> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f2a8 <col:65, line:293:35>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f280 <line:264:37, line:292:37> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542b360 <line:264:41, col:56> 'int' '=='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542b318 <col:41, col:47> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542b300 <col:47> '_Bool' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542b2c8 <col:47> '_Bool' lvalue Var 0x55dd55423908 'mode4' '_Bool'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IntegerLiteral 0x55dd5542b340 <col:56> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f1f0 <col:59, line:290:37>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f1c8 <line:265:39, line:289:39> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542b470 <line:265:43, col:62> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542b3d0 <col:43, col:49> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542b3b8 <col:49> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542b380 <col:49> 'char' lvalue Var 0x55dd55422c60 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542b448 <col:56, col:62> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542b430 <col:62> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542b3f8 <col:62> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f138 <col:67, line:287:39>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f110 <line:266:41, line:286:41> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542e8e0 <line:266:45, col:64> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542e840 <col:45, col:51> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542e828 <col:51> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542e7f0 <col:51> 'char' lvalue Var 0x55dd55422c60 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542e8b8 <col:58, col:64> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542e8a0 <col:64> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542e868 <col:64> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542f080 <col:69, line:284:41>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542f058 <line:267:43, line:283:43> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542e9f0 <line:267:47, col:66> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542e950 <col:47, col:53> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542e938 <col:53> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542e900 <col:53> 'char' lvalue Var 0x55dd55422c60 'id1' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542e9c8 <col:60, col:66> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542e9b0 <col:66> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542e978 <col:66> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542efc8 <col:71, line:281:43>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542efa0 <line:268:45, line:280:45> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542eb00 <line:268:49, col:68> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542ea60 <col:49, col:55> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542ea48 <col:55> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542ea10 <col:55> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542ead8 <col:62, col:68> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542eac0 <col:68> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542ea88 <col:68> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542ef10 <col:73, line:278:45>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542eee8 <line:269:47, line:277:47> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542ec10 <line:269:51, col:70> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542eb70 <col:51, col:57> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542eb58 <col:57> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542eb20 <col:57> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542ebe8 <col:64, col:70> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542ebd0 <col:70> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542eb98 <col:70> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542ee58 <col:75, line:275:47>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-IfStmt 0x55dd5542ee30 <line:270:49, line:274:49> has_else
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-BinaryOperator 0x55dd5542ed20 <line:270:53, col:72> 'int' '!='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |-CStyleCastExpr 0x55dd5542ec80 <col:53, col:59> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | | `-ImplicitCastExpr 0x55dd5542ec68 <col:59> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | |   `-DeclRefExpr 0x55dd5542ec30 <col:59> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-CStyleCastExpr 0x55dd5542ecf8 <col:66, col:72> 'int' <IntegralCast>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-ImplicitCastExpr 0x55dd5542ece0 <col:72> 'char' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-DeclRefExpr 0x55dd5542eca8 <col:72> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-CompoundStmt 0x55dd5542eda0 <col:77, line:272:49>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | `-BinaryOperator 0x55dd5542ed80 <line:271:51, col:57> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |-DeclRefExpr 0x55dd5542ed40 <col:51> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-IntegerLiteral 0x55dd5542ed60 <col:57> 'int' 1
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542ee18 <line:272:56, line:274:49>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542edf8 <line:273:51, col:57> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542edb8 <col:51> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542edd8 <col:57> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542eed0 <line:275:54, line:277:47>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542eeb0 <line:276:49, col:55> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542ee70 <col:49> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542ee90 <col:55> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542ef88 <line:278:52, line:280:45>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542ef68 <line:279:47, col:53> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542ef28 <col:47> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542ef48 <col:53> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f040 <line:281:50, line:283:43>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f020 <line:282:45, col:51> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542efe0 <col:45> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f000 <col:51> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f0f8 <line:284:48, line:286:41>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f0d8 <line:285:43, col:49> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f098 <col:43> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f0b8 <col:49> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f1b0 <line:287:46, line:289:39>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f190 <line:288:41, col:47> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f150 <col:41> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f170 <col:47> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f268 <line:290:44, line:292:37>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f248 <line:291:39, col:45> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f208 <col:39> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f228 <col:45> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f320 <line:293:42, line:295:35>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f300 <line:294:37, col:43> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f2c0 <col:37> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f2e0 <col:43> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f3d8 <line:296:40, line:298:33>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f3b8 <line:297:35, col:41> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f378 <col:35> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f398 <col:41> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f490 <line:299:38, line:301:31>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f470 <line:300:33, col:39> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f430 <col:33> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f450 <col:39> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f548 <line:302:36, line:304:29>
|     | |   |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f528 <line:303:31, col:37> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f4e8 <col:31> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f508 <col:37> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f600 <line:305:34, line:307:27>
|     | |   |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f5e0 <line:306:29, col:35> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f5a0 <col:29> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f5c0 <col:35> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f6b8 <line:308:32, line:310:25>
|     | |   |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f698 <line:309:27, col:33> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f658 <col:27> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f678 <col:33> 'int' 0
|     | |   |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd5542f770 <line:311:30, line:313:23>
|     | |   |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd5542f750 <line:312:25, col:31> 'int' '='
|     | |   |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f710 <col:25> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd5542f730 <col:31> 'int' 0
|     | |   |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd554308a0 <line:314:28, line:316:21>
|     | |   |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd55430880 <line:315:23, col:29> 'int' '='
|     | |   |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd5542f7c8 <col:23> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd55430860 <col:29> 'int' 0
|     | |   |   |   |   |   |   |   |   `-CompoundStmt 0x55dd55430958 <line:317:26, line:319:19>
|     | |   |   |   |   |   |   |   |     `-BinaryOperator 0x55dd55430938 <line:318:21, col:27> 'int' '='
|     | |   |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd554308f8 <col:21> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd55430918 <col:27> 'int' 0
|     | |   |   |   |   |   |   |   `-CompoundStmt 0x55dd55430a10 <line:320:24, line:322:17>
|     | |   |   |   |   |   |   |     `-BinaryOperator 0x55dd554309f0 <line:321:19, col:25> 'int' '='
|     | |   |   |   |   |   |   |       |-DeclRefExpr 0x55dd554309b0 <col:19> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |   |       `-IntegerLiteral 0x55dd554309d0 <col:25> 'int' 0
|     | |   |   |   |   |   |   `-CompoundStmt 0x55dd55430ac8 <line:323:22, line:325:15>
|     | |   |   |   |   |   |     `-BinaryOperator 0x55dd55430aa8 <line:324:17, col:23> 'int' '='
|     | |   |   |   |   |   |       |-DeclRefExpr 0x55dd55430a68 <col:17> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |   |       `-IntegerLiteral 0x55dd55430a88 <col:23> 'int' 0
|     | |   |   |   |   |   `-CompoundStmt 0x55dd55430b80 <line:326:20, line:328:13>
|     | |   |   |   |   |     `-BinaryOperator 0x55dd55430b60 <line:327:15, col:21> 'int' '='
|     | |   |   |   |   |       |-DeclRefExpr 0x55dd55430b20 <col:15> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |   |       `-IntegerLiteral 0x55dd55430b40 <col:21> 'int' 0
|     | |   |   |   |   `-CompoundStmt 0x55dd55430c38 <line:329:18, line:331:11>
|     | |   |   |   |     `-BinaryOperator 0x55dd55430c18 <line:330:13, col:19> 'int' '='
|     | |   |   |   |       |-DeclRefExpr 0x55dd55430bd8 <col:13> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |   |       `-IntegerLiteral 0x55dd55430bf8 <col:19> 'int' 0
|     | |   |   |   `-CompoundStmt 0x55dd55430cf0 <line:332:16, line:334:9>
|     | |   |   |     `-BinaryOperator 0x55dd55430cd0 <line:333:11, col:17> 'int' '='
|     | |   |   |       |-DeclRefExpr 0x55dd55430c90 <col:11> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |   |       `-IntegerLiteral 0x55dd55430cb0 <col:17> 'int' 0
|     | |   |   `-CompoundStmt 0x55dd55430da8 <line:335:14, line:337:7>
|     | |   |     `-BinaryOperator 0x55dd55430d88 <line:336:9, col:15> 'int' '='
|     | |   |       |-DeclRefExpr 0x55dd55430d48 <col:9> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |   |       `-IntegerLiteral 0x55dd55430d68 <col:15> 'int' 0
|     | |   `-CompoundStmt 0x55dd55430e60 <line:338:12, line:340:5>
|     | |     `-BinaryOperator 0x55dd55430e40 <line:339:7, col:13> 'int' '='
|     | |       |-DeclRefExpr 0x55dd55430e00 <col:7> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     | |       `-IntegerLiteral 0x55dd55430e20 <col:13> 'int' 0
|     | `-CompoundStmt 0x55dd55430f18 <line:341:10, line:343:3>
|     |   `-BinaryOperator 0x55dd55430ef8 <line:342:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x55dd55430eb8 <col:5> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|     |     `-IntegerLiteral 0x55dd55430ed8 <col:11> 'int' 0
|     `-ReturnStmt 0x55dd55430fb0 <line:344:3, col:14>
|       `-ImplicitCastExpr 0x55dd55430f98 <col:10, col:14> 'int' <LValueToRValue>
|         `-ParenExpr 0x55dd55430f78 <col:10, col:14> 'int' lvalue
|           `-DeclRefExpr 0x55dd55430f58 <col:11> 'int' lvalue Var 0x55dd5542a290 'tmp' 'int'
|-FunctionDecl 0x55dd554310a0 <line:347:1, line:366:1> line:347:5 used check 'int (void)'
| `-CompoundStmt 0x55dd55431b30 <line:348:1, line:366:1>
|   |-DeclStmt 0x55dd554311c0 <line:349:3, col:11>
|   | `-VarDecl 0x55dd55431158 <col:3, col:7> col:7 used tmp 'int'
|   `-CompoundStmt 0x55dd55431b10 <line:351:3, line:365:1>
|     |-IfStmt 0x55dd55431a80 <line:352:3, line:363:3> has_else
|     | |-BinaryOperator 0x55dd55431478 <line:352:7, col:60> 'int' '<='
|     | | |-BinaryOperator 0x55dd55431438 <col:7, col:53> 'int' '+'
|     | | | |-ParenExpr 0x55dd554313a0 <col:7, col:43> 'int'
|     | | | | `-BinaryOperator 0x55dd55431380 <col:8, col:40> 'int' '+'
|     | | | |   |-ParenExpr 0x55dd554312e8 <col:8, col:30> 'int'
|     | | | |   | `-BinaryOperator 0x55dd554312c8 <col:9, col:27> 'int' '+'
|     | | | |   |   |-CStyleCastExpr 0x55dd55431228 <col:9, col:15> 'int' <IntegralCast>
|     | | | |   |   | `-ImplicitCastExpr 0x55dd55431210 <col:15> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |   |   |   `-DeclRefExpr 0x55dd554311d8 <col:15> 'char' lvalue Var 0x55dd55422cd8 'st1' 'char'
|     | | | |   |   `-CStyleCastExpr 0x55dd554312a0 <col:21, col:27> 'int' <IntegralCast>
|     | | | |   |     `-ImplicitCastExpr 0x55dd55431288 <col:27> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |   |       `-DeclRefExpr 0x55dd55431250 <col:27> 'char' lvalue Var 0x55dd55423098 'st2' 'char'
|     | | | |   `-CStyleCastExpr 0x55dd55431358 <col:34, col:40> 'int' <IntegralCast>
|     | | | |     `-ImplicitCastExpr 0x55dd55431340 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|     | | | |       `-DeclRefExpr 0x55dd55431308 <col:40> 'char' lvalue Var 0x55dd55423458 'st3' 'char'
|     | | | `-CStyleCastExpr 0x55dd55431410 <col:47, col:53> 'int' <IntegralCast>
|     | | |   `-ImplicitCastExpr 0x55dd554313f8 <col:53> 'char' <LValueToRValue> part_of_explicit_cast
|     | | |     `-DeclRefExpr 0x55dd554313c0 <col:53> 'char' lvalue Var 0x55dd55423818 'st4' 'char'
|     | | `-IntegerLiteral 0x55dd55431458 <col:60> 'int' 1
|     | |-CompoundStmt 0x55dd554319f0 <col:63, line:361:3>
|     | | `-IfStmt 0x55dd554319c8 <line:353:5, line:360:5> has_else
|     | |   |-BinaryOperator 0x55dd55431530 <line:353:9, col:20> 'int' '<'
|     | |   | |-CStyleCastExpr 0x55dd554314e8 <col:9, col:15> 'int' <IntegralCast>
|     | |   | | `-ImplicitCastExpr 0x55dd554314d0 <col:15> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|     | |   | |   `-DeclRefExpr 0x55dd55431498 <col:15> 'unsigned char' lvalue Var 0x55dd55422a80 'r1' 'unsigned char'
|     | |   | `-IntegerLiteral 0x55dd55431510 <col:20> 'int' 4
|     | |   |-CompoundStmt 0x55dd554315b0 <col:23, line:355:5>
|     | |   | `-BinaryOperator 0x55dd55431590 <line:354:7, col:13> 'int' '='
|     | |   |   |-DeclRefExpr 0x55dd55431550 <col:7> 'int' lvalue Var 0x55dd55431158 'tmp' 'int'
|     | |   |   `-IntegerLiteral 0x55dd55431570 <col:13> 'int' 1
|     | |   `-IfStmt 0x55dd554319a0 <line:356:5, line:360:5> has_else
|     | |     |-BinaryOperator 0x55dd55431890 <line:356:9, col:62> 'int' '=='
|     | |     | |-BinaryOperator 0x55dd55431828 <col:9, col:55> 'int' '+'
|     | |     | | |-ParenExpr 0x55dd55431790 <col:9, col:45> 'int'
|     | |     | | | `-BinaryOperator 0x55dd55431770 <col:10, col:42> 'int' '+'
|     | |     | | |   |-ParenExpr 0x55dd554316d8 <col:10, col:32> 'int'
|     | |     | | |   | `-BinaryOperator 0x55dd554316b8 <col:11, col:29> 'int' '+'
|     | |     | | |   |   |-CStyleCastExpr 0x55dd55431618 <col:11, col:17> 'int' <IntegralCast>
|     | |     | | |   |   | `-ImplicitCastExpr 0x55dd55431600 <col:17> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |   |   |   `-DeclRefExpr 0x55dd554315c8 <col:17> 'char' lvalue Var 0x55dd55422cd8 'st1' 'char'
|     | |     | | |   |   `-CStyleCastExpr 0x55dd55431690 <col:23, col:29> 'int' <IntegralCast>
|     | |     | | |   |     `-ImplicitCastExpr 0x55dd55431678 <col:29> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |   |       `-DeclRefExpr 0x55dd55431640 <col:29> 'char' lvalue Var 0x55dd55423098 'st2' 'char'
|     | |     | | |   `-CStyleCastExpr 0x55dd55431748 <col:36, col:42> 'int' <IntegralCast>
|     | |     | | |     `-ImplicitCastExpr 0x55dd55431730 <col:42> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | | |       `-DeclRefExpr 0x55dd554316f8 <col:42> 'char' lvalue Var 0x55dd55423458 'st3' 'char'
|     | |     | | `-CStyleCastExpr 0x55dd55431800 <col:49, col:55> 'int' <IntegralCast>
|     | |     | |   `-ImplicitCastExpr 0x55dd554317e8 <col:55> 'char' <LValueToRValue> part_of_explicit_cast
|     | |     | |     `-DeclRefExpr 0x55dd554317b0 <col:55> 'char' lvalue Var 0x55dd55423818 'st4' 'char'
|     | |     | `-IntegerLiteral 0x55dd55431870 <col:62> 'int' 1
|     | |     |-CompoundStmt 0x55dd55431910 <col:65, line:358:5>
|     | |     | `-BinaryOperator 0x55dd554318f0 <line:357:7, col:13> 'int' '='
|     | |     |   |-DeclRefExpr 0x55dd554318b0 <col:7> 'int' lvalue Var 0x55dd55431158 'tmp' 'int'
|     | |     |   `-IntegerLiteral 0x55dd554318d0 <col:13> 'int' 1
|     | |     `-CompoundStmt 0x55dd55431988 <line:358:12, line:360:5>
|     | |       `-BinaryOperator 0x55dd55431968 <line:359:7, col:13> 'int' '='
|     | |         |-DeclRefExpr 0x55dd55431928 <col:7> 'int' lvalue Var 0x55dd55431158 'tmp' 'int'
|     | |         `-IntegerLiteral 0x55dd55431948 <col:13> 'int' 0
|     | `-CompoundStmt 0x55dd55431a68 <line:361:10, line:363:3>
|     |   `-BinaryOperator 0x55dd55431a48 <line:362:5, col:11> 'int' '='
|     |     |-DeclRefExpr 0x55dd55431a08 <col:5> 'int' lvalue Var 0x55dd55431158 'tmp' 'int'
|     |     `-IntegerLiteral 0x55dd55431a28 <col:11> 'int' 0
|     `-ReturnStmt 0x55dd55431b00 <line:364:3, col:14>
|       `-ImplicitCastExpr 0x55dd55431ae8 <col:10, col:14> 'int' <LValueToRValue>
|         `-ParenExpr 0x55dd55431ac8 <col:10, col:14> 'int' lvalue
|           `-DeclRefExpr 0x55dd55431aa8 <col:11> 'int' lvalue Var 0x55dd55431158 'tmp' 'int'
|-FunctionDecl 0x55dd55431bf0 <line:367:1, line:426:1> line:367:5 main 'int (void)'
| `-CompoundStmt 0x55dd55433a10 <line:368:1, line:426:1>
|   |-DeclStmt 0x55dd55431d40 <line:369:3, col:10>
|   | `-VarDecl 0x55dd55431cd8 <col:3, col:7> col:7 used c1 'int'
|   |-DeclStmt 0x55dd55431dd8 <line:370:3, col:10>
|   | `-VarDecl 0x55dd55431d70 <col:3, col:7> col:7 used i2 'int'
|   |-CompoundStmt 0x55dd554338c0 <line:372:3, line:424:1>
|   | |-BinaryOperator 0x55dd55431e30 <line:373:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55dd55431df0 <col:3> 'int' lvalue Var 0x55dd55431cd8 'c1' 'int'
|   | | `-IntegerLiteral 0x55dd55431e10 <col:8> 'int' 0
|   | |-BinaryOperator 0x55dd55431ef8 <line:374:3, col:32> 'unsigned char' '='
|   | | |-DeclRefExpr 0x55dd55431e50 <col:3> 'unsigned char' lvalue Var 0x55dd55422a80 'r1' 'unsigned char'
|   | | `-CallExpr 0x55dd55431ed8 <col:8, col:32> 'unsigned char'
|   | |   `-ImplicitCastExpr 0x55dd55431ec0 <col:8> 'unsigned char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55431e70 <col:8> 'unsigned char (void)' Function 0x55dd553fc538 '__VERIFIER_nondet_uchar' 'unsigned char (void)'
|   | |-BinaryOperator 0x55dd55431fc8 <line:375:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55dd55431f18 <col:3> 'char' lvalue Var 0x55dd55422c60 'id1' 'char'
|   | | `-CallExpr 0x55dd55431fa8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55dd55431f90 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55431f38 <col:9> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd55432060 <line:376:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55dd55431fe8 <col:3> 'char' lvalue Var 0x55dd55422cd8 'st1' 'char'
|   | | `-CallExpr 0x55dd55432040 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55dd55432028 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432008 <col:9> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd554320f8 <line:377:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55dd55432080 <col:3> 'msg_t':'char' lvalue Var 0x55dd55422d50 'send1' 'msg_t':'char'
|   | | `-CallExpr 0x55dd554320d8 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55dd554320c0 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd554320a0 <col:11> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd554321c8 <line:378:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55dd55432118 <col:3> '_Bool' lvalue Var 0x55dd55422dc8 'mode1' '_Bool'
|   | | `-CallExpr 0x55dd554321a8 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55dd55432190 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432138 <col:11> '_Bool (void)' Function 0x55dd553fc250 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55dd55432260 <line:379:3, col:35> '_Bool' '='
|   | | |-DeclRefExpr 0x55dd554321e8 <col:3> '_Bool' lvalue Var 0x55dd55422e40 'alive1' '_Bool'
|   | | `-CallExpr 0x55dd55432240 <col:12, col:35> '_Bool'
|   | |   `-ImplicitCastExpr 0x55dd55432228 <col:12> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432208 <col:12> '_Bool (void)' Function 0x55dd553fc250 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55dd554322f8 <line:380:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432280 <col:3> 'char' lvalue Var 0x55dd55423020 'id2' 'char'
|   | | `-CallExpr 0x55dd554322d8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55dd554322c0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd554322a0 <col:9> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd55432390 <line:381:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432318 <col:3> 'char' lvalue Var 0x55dd55423098 'st2' 'char'
|   | | `-CallExpr 0x55dd55432370 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55dd55432358 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432338 <col:9> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd55432428 <line:382:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55dd554323b0 <col:3> 'msg_t':'char' lvalue Var 0x55dd55423110 'send2' 'msg_t':'char'
|   | | `-CallExpr 0x55dd55432408 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55dd554323f0 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd554323d0 <col:11> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd554324c0 <line:383:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55dd55432448 <col:3> '_Bool' lvalue Var 0x55dd55423188 'mode2' '_Bool'
|   | | `-CallExpr 0x55dd554324a0 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55dd55432488 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432468 <col:11> '_Bool (void)' Function 0x55dd553fc250 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55dd55432558 <line:384:3, col:35> '_Bool' '='
|   | | |-DeclRefExpr 0x55dd554324e0 <col:3> '_Bool' lvalue Var 0x55dd55423200 'alive2' '_Bool'
|   | | `-CallExpr 0x55dd55432538 <col:12, col:35> '_Bool'
|   | |   `-ImplicitCastExpr 0x55dd55432520 <col:12> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432500 <col:12> '_Bool (void)' Function 0x55dd553fc250 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55dd554325f0 <line:385:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432578 <col:3> 'char' lvalue Var 0x55dd554233e0 'id3' 'char'
|   | | `-CallExpr 0x55dd554325d0 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55dd554325b8 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432598 <col:9> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd55432688 <line:386:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432610 <col:3> 'char' lvalue Var 0x55dd55423458 'st3' 'char'
|   | | `-CallExpr 0x55dd55432668 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55dd55432650 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432630 <col:9> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd55432720 <line:387:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55dd554326a8 <col:3> 'msg_t':'char' lvalue Var 0x55dd554234d0 'send3' 'msg_t':'char'
|   | | `-CallExpr 0x55dd55432700 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55dd554326e8 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd554326c8 <col:11> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd554327b8 <line:388:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55dd55432740 <col:3> '_Bool' lvalue Var 0x55dd55423548 'mode3' '_Bool'
|   | | `-CallExpr 0x55dd55432798 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55dd55432780 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432760 <col:11> '_Bool (void)' Function 0x55dd553fc250 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55dd55432850 <line:389:3, col:35> '_Bool' '='
|   | | |-DeclRefExpr 0x55dd554327d8 <col:3> '_Bool' lvalue Var 0x55dd554235c0 'alive3' '_Bool'
|   | | `-CallExpr 0x55dd55432830 <col:12, col:35> '_Bool'
|   | |   `-ImplicitCastExpr 0x55dd55432818 <col:12> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd554327f8 <col:12> '_Bool (void)' Function 0x55dd553fc250 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55dd554328f8 <line:390:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432880 <col:3> 'char' lvalue Var 0x55dd554237a0 'id4' 'char'
|   | | `-CallExpr 0x55dd554328d8 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55dd554328c0 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd554328a0 <col:9> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd55432990 <line:391:3, col:32> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432918 <col:3> 'char' lvalue Var 0x55dd55423818 'st4' 'char'
|   | | `-CallExpr 0x55dd55432970 <col:9, col:32> 'char'
|   | |   `-ImplicitCastExpr 0x55dd55432958 <col:9> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432938 <col:9> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd55432a28 <line:392:3, col:34> 'msg_t':'char' '='
|   | | |-DeclRefExpr 0x55dd554329b0 <col:3> 'msg_t':'char' lvalue Var 0x55dd55423890 'send4' 'msg_t':'char'
|   | | `-CallExpr 0x55dd55432a08 <col:11, col:34> 'char'
|   | |   `-ImplicitCastExpr 0x55dd554329f0 <col:11> 'char (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd554329d0 <col:11> 'char (void)' Function 0x55dd553fc3c0 '__VERIFIER_nondet_char' 'char (void)'
|   | |-BinaryOperator 0x55dd55432ac0 <line:393:3, col:34> '_Bool' '='
|   | | |-DeclRefExpr 0x55dd55432a48 <col:3> '_Bool' lvalue Var 0x55dd55423908 'mode4' '_Bool'
|   | | `-CallExpr 0x55dd55432aa0 <col:11, col:34> '_Bool'
|   | |   `-ImplicitCastExpr 0x55dd55432a88 <col:11> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432a68 <col:11> '_Bool (void)' Function 0x55dd553fc250 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55dd55432b58 <line:394:3, col:35> '_Bool' '='
|   | | |-DeclRefExpr 0x55dd55432ae0 <col:3> '_Bool' lvalue Var 0x55dd55423980 'alive4' '_Bool'
|   | | `-CallExpr 0x55dd55432b38 <col:12, col:35> '_Bool'
|   | |   `-ImplicitCastExpr 0x55dd55432b20 <col:12> '_Bool (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432b00 <col:12> '_Bool (void)' Function 0x55dd553fc250 '__VERIFIER_nondet_bool' '_Bool (void)'
|   | |-BinaryOperator 0x55dd55432c28 <line:395:3, col:13> 'int' '='
|   | | |-DeclRefExpr 0x55dd55432b78 <col:3> 'int' lvalue Var 0x55dd55431d70 'i2' 'int'
|   | | `-CallExpr 0x55dd55432c08 <col:8, col:13> 'int'
|   | |   `-ImplicitCastExpr 0x55dd55432bf0 <col:8> 'int (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x55dd55432b98 <col:8> 'int (void)' Function 0x55dd5542a1d8 'init' 'int (void)'
|   | |-CallExpr 0x55dd55432cd8 <line:396:3, col:23> 'void'
|   | | |-ImplicitCastExpr 0x55dd55432cc0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55dd55432c48 <col:3> 'void (int)' Function 0x55dd553fc840 '__VERIFIER_assume' 'void (int)'
|   | | `-ImplicitCastExpr 0x55dd55432d00 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55432c68 <col:21> 'int' lvalue Var 0x55dd55431d70 'i2' 'int'
|   | |-BinaryOperator 0x55dd55432d70 <line:397:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432d18 <col:3> 'char' lvalue Var 0x55dd55422b70 'p1_old' 'char'
|   | | `-ImplicitCastExpr 0x55dd55432d58 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55432d38 <col:12> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55dd55432de8 <line:398:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432d90 <col:3> 'char' lvalue Var 0x55dd55422be8 'p1_new' 'char'
|   | | `-ImplicitCastExpr 0x55dd55432dd0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55432db0 <col:12> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55dd55432e60 <line:399:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432e08 <col:3> 'char' lvalue Var 0x55dd55422f30 'p2_old' 'char'
|   | | `-ImplicitCastExpr 0x55dd55432e48 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55432e28 <col:12> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55dd55432ed8 <line:400:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432e80 <col:3> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|   | | `-ImplicitCastExpr 0x55dd55432ec0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55432ea0 <col:12> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55dd55432f50 <line:401:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432ef8 <col:3> 'char' lvalue Var 0x55dd554232f0 'p3_old' 'char'
|   | | `-ImplicitCastExpr 0x55dd55432f38 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55432f18 <col:12> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55dd55432fc8 <line:402:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432f70 <col:3> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|   | | `-ImplicitCastExpr 0x55dd55432fb0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55432f90 <col:12> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55dd55433040 <line:403:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55dd55432fe8 <col:3> 'char' lvalue Var 0x55dd554236b0 'p4_old' 'char'
|   | | `-ImplicitCastExpr 0x55dd55433028 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55433008 <col:12> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55dd554330b8 <line:404:3, col:12> 'char' '='
|   | | |-DeclRefExpr 0x55dd55433060 <col:3> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|   | | `-ImplicitCastExpr 0x55dd554330a0 <col:12> 'msg_t':'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55dd55433080 <col:12> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   | |-BinaryOperator 0x55dd55433118 <line:405:3, col:8> 'int' '='
|   | | |-DeclRefExpr 0x55dd554330d8 <col:3> 'int' lvalue Var 0x55dd55431d70 'i2' 'int'
|   | | `-IntegerLiteral 0x55dd554330f8 <col:8> 'int' 0
|   | `-WhileStmt 0x55dd554338a8 <line:406:3, line:423:3>
|   |   |-IntegerLiteral 0x55dd55433138 <line:406:10> 'int' 1
|   |   `-CompoundStmt 0x55dd55433890 <col:13, line:423:3>
|   |     `-CompoundStmt 0x55dd554337f0 <line:407:5, line:422:5>
|   |       |-CallExpr 0x55dd55433190 <line:408:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55dd55433178 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55dd55433158 <col:5> 'void (void)' Function 0x55dd55423c60 'node1' 'void (void)'
|   |       |-CallExpr 0x55dd554331e8 <line:409:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55dd554331d0 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55dd554331b0 <col:5> 'void (void)' Function 0x55dd55426568 'node2' 'void (void)'
|   |       |-CallExpr 0x55dd55433240 <line:410:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55dd55433228 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55dd55433208 <col:5> 'void (void)' Function 0x55dd55427818 'node3' 'void (void)'
|   |       |-CallExpr 0x55dd55433298 <line:411:5, col:11> 'void'
|   |       | `-ImplicitCastExpr 0x55dd55433280 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x55dd55433260 <col:5> 'void (void)' Function 0x55dd55428ac0 'node4' 'void (void)'
|   |       |-BinaryOperator 0x55dd55433310 <line:412:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55dd554332b8 <col:5> 'char' lvalue Var 0x55dd55422b70 'p1_old' 'char'
|   |       | `-ImplicitCastExpr 0x55dd554332f8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55dd554332d8 <col:14> 'char' lvalue Var 0x55dd55422be8 'p1_new' 'char'
|   |       |-BinaryOperator 0x55dd55433388 <line:413:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55dd55433330 <col:5> 'char' lvalue Var 0x55dd55422be8 'p1_new' 'char'
|   |       | `-ImplicitCastExpr 0x55dd55433370 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55dd55433350 <col:14> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55dd55433400 <line:414:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55dd554333a8 <col:5> 'char' lvalue Var 0x55dd55422f30 'p2_old' 'char'
|   |       | `-ImplicitCastExpr 0x55dd554333e8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55dd554333c8 <col:14> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|   |       |-BinaryOperator 0x55dd55433478 <line:415:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55dd55433420 <col:5> 'char' lvalue Var 0x55dd55422fa8 'p2_new' 'char'
|   |       | `-ImplicitCastExpr 0x55dd55433460 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55dd55433440 <col:14> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55dd554334f0 <line:416:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55dd55433498 <col:5> 'char' lvalue Var 0x55dd554232f0 'p3_old' 'char'
|   |       | `-ImplicitCastExpr 0x55dd554334d8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55dd554334b8 <col:14> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|   |       |-BinaryOperator 0x55dd55433568 <line:417:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55dd55433510 <col:5> 'char' lvalue Var 0x55dd55423368 'p3_new' 'char'
|   |       | `-ImplicitCastExpr 0x55dd55433550 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55dd55433530 <col:14> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55dd554335e0 <line:418:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55dd55433588 <col:5> 'char' lvalue Var 0x55dd554236b0 'p4_old' 'char'
|   |       | `-ImplicitCastExpr 0x55dd554335c8 <col:14> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55dd554335a8 <col:14> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|   |       |-BinaryOperator 0x55dd55433658 <line:419:5, col:14> 'char' '='
|   |       | |-DeclRefExpr 0x55dd55433600 <col:5> 'char' lvalue Var 0x55dd55423728 'p4_new' 'char'
|   |       | `-ImplicitCastExpr 0x55dd55433640 <col:14> 'msg_t':'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55dd55433620 <col:14> 'msg_t':'char' lvalue Var 0x55dd553fce40 'nomsg' 'msg_t':'char'
|   |       |-BinaryOperator 0x55dd554336f0 <line:420:5, col:16> 'int' '='
|   |       | |-DeclRefExpr 0x55dd55433678 <col:5> 'int' lvalue Var 0x55dd55431cd8 'c1' 'int'
|   |       | `-CallExpr 0x55dd554336d0 <col:10, col:16> 'int'
|   |       |   `-ImplicitCastExpr 0x55dd554336b8 <col:10> 'int (*)(void)' <FunctionToPointerDecay>
|   |       |     `-DeclRefExpr 0x55dd55433698 <col:10> 'int (void)' Function 0x55dd554310a0 'check' 'int (void)'
|   |       `-CallExpr 0x55dd55433798 <line:421:5, col:14> 'void'
|   |         |-ImplicitCastExpr 0x55dd55433780 <col:5> 'void (*)(_Bool)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x55dd55433710 <col:5> 'void (_Bool)' Function 0x55dd553fc6b0 'assert' 'void (_Bool)'
|   |         `-ImplicitCastExpr 0x55dd554337d8 <col:12> '_Bool' <IntegralToBoolean>
|   |           `-ImplicitCastExpr 0x55dd554337c0 <col:12> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55dd55433730 <col:12> 'int' lvalue Var 0x55dd55431cd8 'c1' 'int'
|   `-ReturnStmt 0x55dd55433a00 <line:425:1, col:8>
|     `-IntegerLiteral 0x55dd554339e0 <col:8> 'int' 0
`-FunctionDecl 0x55dd55433ae0 prev 0x55dd553fc6b0 <line:427:1, line:438:1> line:427:6 used assert 'void (_Bool)'
  |-ParmVarDecl 0x55dd55433a50 <col:13, col:19> col:19 used arg '_Bool'
  `-CompoundStmt 0x55dd55433d30 <line:428:1, line:438:1>
    `-CompoundStmt 0x55dd55433d18 <line:431:3, line:437:1>
      `-IfStmt 0x55dd55433d00 <line:432:3, line:436:3>
        |-UnaryOperator 0x55dd55433bc0 <line:432:7, col:9> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x55dd55433ba8 <col:9> '_Bool' <LValueToRValue>
        |   `-DeclRefExpr 0x55dd55433b88 <col:9> '_Bool' lvalue ParmVar 0x55dd55433a50 'arg' '_Bool'
        `-CompoundStmt 0x55dd55433ce8 <col:14, line:436:3>
          `-CompoundStmt 0x55dd55433cd0 <line:433:5, line:435:5>
            `-LabelStmt 0x55dd55433cb8 <line:434:5, col:29> 'ERROR'
              `-CallExpr 0x55dd55433c48 <col:12, col:29> 'void'
                `-ImplicitCastExpr 0x55dd55433c30 <col:12> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
                  `-DeclRefExpr 0x55dd55433bd8 <col:12> 'void () __attribute__((noreturn))' Function 0x55dd553fc070 '__VERIFIER_error' 'void () __attribute__((noreturn))'
