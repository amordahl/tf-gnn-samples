TranslationUnitDecl 0x5631dffede18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5631dffee6d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5631dffee3b0 '__int128'
|-TypedefDecl 0x5631dffee748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5631dffee3d0 'unsigned __int128'
|-TypedefDecl 0x5631dffeea50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5631dffee820 'struct __NSConstantString_tag'
|   `-Record 0x5631dffee7a0 '__NSConstantString_tag'
|-TypedefDecl 0x5631dffeeaf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5631dffeeab0 'char *'
|   `-BuiltinType 0x5631dffedeb0 'char'
|-TypedefDecl 0x5631e002d650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5631dffeed90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5631dffeebd0 'struct __va_list_tag'
|     `-Record 0x5631dffeeb50 '__va_list_tag'
|-FunctionDecl 0x5631e002d790 <./split_5/rfi000_tso.opt_true-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x5631e002d6c0 <col:31> col:34 'int'
|-FunctionDecl 0x5631e002d958 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x5631e002da80 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x5631e002dbc8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x5631e002db38 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x5631e002ddf8 <col:40, col:99>
|   |-IfStmt 0x5631e002ddc8 <col:42, col:88>
|   | |-UnaryOperator 0x5631e002dca8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x5631e002dc90 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5631e002dc70 <col:47> 'int' lvalue ParmVar 0x5631e002db38 'expression' 'int'
|   | `-CompoundStmt 0x5631e002ddb0 <col:59, col:88>
|   |   `-LabelStmt 0x5631e002dd98 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x5631e002dd28 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x5631e002dd10 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5631e002dcc0 <col:68> 'void () __attribute__((noreturn))' Function 0x5631e002da80 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x5631e002dde0 <col:89>
|   `-ReturnStmt 0x5631e002dde8 <col:91>
|-FunctionDecl 0x5631e002de40 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x5631e002df00 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x5631e002e280 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5631e002dfb8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x5631e002e038 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x5631e002e0b8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x5631e002e138 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x5631e002e340 <line:10:22>
|-FunctionDecl 0x5631e0054390 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5631e002e3b0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x5631e002e430 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x5631e002e4b0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x5631e002e530 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x5631e0054450 <line:13:22>
|-FunctionDecl 0x5631e0054700 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5631e00544c0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x5631e0054540 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x5631e00545c0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x5631e00547b8 <line:15:22>
|-TypedefDecl 0x5631e0054828 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x5631dffedf70 'unsigned char'
|-TypedefDecl 0x5631e0054898 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x5631dffedf90 'unsigned short'
|-TypedefDecl 0x5631e0054908 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-TypedefDecl 0x5631e0054978 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e00549e8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x5631dffeded0 'signed char'
|-TypedefDecl 0x5631e0054a58 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x5631dffedf70 'unsigned char'
|-TypedefDecl 0x5631e0054ac8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x5631dffedef0 'short'
|-TypedefDecl 0x5631e0054b38 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x5631dffedf90 'unsigned short'
|-TypedefDecl 0x5631e0054ba8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x5631dffedf10 'int'
|-TypedefDecl 0x5631e0054c18 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-TypedefDecl 0x5631e0054c88 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0054cf8 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0054d68 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0054dd8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0054e48 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0054eb8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-TypedefDecl 0x5631e0054f28 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-TypedefDecl 0x5631e0054f98 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055008 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055078 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-TypedefDecl 0x5631e00550e8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055158 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e00551c8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055238 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x5631dffedf10 'int'
|-RecordDecl 0x5631e0055290 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x5631e0055408 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x5631e00554c0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x5631e0055460 'struct __fsid_t' sugar
|   `-RecordType 0x5631e0055310 '__fsid_t'
|     `-Record 0x5631e0055290 ''
|-TypedefDecl 0x5631e0055548 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e00555b8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055628 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055698 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-TypedefDecl 0x5631e0055708 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055778 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-TypedefDecl 0x5631e00557e8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055858 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x5631dffedf10 'int'
|-TypedefDecl 0x5631e00558c8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x5631dffedf10 'int'
|-TypedefDecl 0x5631e0055938 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x5631dffedf10 'int'
|-TypedefDecl 0x5631e00559a8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x5631dffee630 'void *'
|   `-BuiltinType 0x5631dffede70 'void'
|-TypedefDecl 0x5631e0055a18 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055a88 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055af8 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055b68 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055bd8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055c48 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055cb8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055d28 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055d98 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055e08 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0055e78 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0055f08 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x5631e0055ed0 '__off64_t' sugar
|   |-Typedef 0x5631e00551c8 '__off64_t'
|   `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0056000 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x5631e0055fc0 '__quad_t *'
|   `-TypedefType 0x5631e0055f60 '__quad_t' sugar
|     |-Typedef 0x5631e0054d68 '__quad_t'
|     `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0056070 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x5631dffeeab0 'char *'
|   `-BuiltinType 0x5631dffedeb0 'char'
|-TypedefDecl 0x5631e00560e0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e0056150 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-FunctionDecl 0x5631e0056298 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x5631e00561c0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x5631e00575e8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x5631e00575d8 <line:72:3, col:34>
|     `-CallExpr 0x5631e0057598 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x5631e0057580 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x5631e0057510 <col:10> '<builtin fn type>' Function 0x5631e0057380 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x5631e00575c0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5631e0057530 <col:29> 'unsigned int' lvalue ParmVar 0x5631e00561c0 '__bsx' 'unsigned int'
|-FunctionDecl 0x5631e0057380 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x5631e0057420 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x5631e0057490 <col:10> Implicit
| `-ConstAttr 0x5631e00574e8 <col:10> Implicit
|-FunctionDecl 0x5631e0057740 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x5631e0057638 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x5631e0057a58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x5631e0057a48 <line:77:3, col:34>
|     `-CallExpr 0x5631e0057a08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x5631e00579f0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x5631e0057978 <col:10> '<builtin fn type>' Function 0x5631e00577e8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x5631e0057a30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x5631e0057998 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x5631e0057638 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x5631e00577e8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x5631e0057888 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x5631e00578f8 <col:10> Implicit
| `-ConstAttr 0x5631e0057950 <col:10> Implicit
|-TypedefDecl 0x5631e0057a88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-TypedefDecl 0x5631e0057b18 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x5631e0057ae0 '__time_t' sugar
|   |-Typedef 0x5631e0055708 '__time_t'
|   `-BuiltinType 0x5631dffedf30 'long'
|-RecordDecl 0x5631e0057b70 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x5631e0057c28 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x5631e0057cb8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x5631e0057d48 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x5631e0057d10 '__pid_t' sugar
|   |-Typedef 0x5631e0055238 '__pid_t'
|   `-BuiltinType 0x5631dffedf10 'int'
|-RecordDecl 0x5631e0057da0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x5631e0057e60 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x5631e0057eb0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x5631e0057f70 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x5631e0057fd8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-RecordDecl 0x5631e0058030 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x5631e00582c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x5631e00593a0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x5631e0058310 'struct cpu_set_t' sugar
|   `-RecordType 0x5631e00580b0 'cpu_set_t'
|     `-Record 0x5631e0058030 ''
|-FunctionDecl 0x5631e0059678 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x5631e0059448 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x5631e0059550 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x5631e0059728 <line:107:19>
|-FunctionDecl 0x5631e0059900 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x5631e0059790 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x5631e00599a8 <col:69>
|-FunctionDecl 0x5631e0059b20 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x5631e0059a10 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x5631e0059bc8 <col:64>
|-FunctionDecl 0x5631e0059e88 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x5631e0059c30 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x5631e0059d68 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x5631e0059f38 <line:113:22>
|-FunctionDecl 0x5631e005a1b8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x5631e0059fa0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x5631e005a098 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x5631e005a268 <col:88>
|-FunctionDecl 0x5631e005a588 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x5631e005a2d0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x5631e005a3b0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x5631e005a440 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x5631e005a640 <col:62>
|-FunctionDecl 0x5631e005a7b8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x5631e005a6a8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x5631e005a860 <col:63>
|-FunctionDecl 0x5631e005a988 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x5631e005aa28 <col:47>
|-FunctionDecl 0x5631e005ab30 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x5631e005aa98 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x5631e005abd8 <col:69>
|-FunctionDecl 0x5631e005ace0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x5631e005ac48 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x5631e005ad88 <col:69>
|-FunctionDecl 0x5631e005b048 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x5631e005adf0 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x5631e005af28 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x5631e005b0f8 <col:88>
|-TypedefDecl 0x5631e005b188 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x5631e005b150 '__clock_t' sugar
|   |-Typedef 0x5631e0055548 '__clock_t'
|   `-BuiltinType 0x5631dffedf30 'long'
|-TypedefDecl 0x5631e005b218 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x5631e005b1e0 '__clockid_t' sugar
|   |-Typedef 0x5631e0055938 '__clockid_t'
|   `-BuiltinType 0x5631dffedf10 'int'
|-TypedefDecl 0x5631e005b2a8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x5631e005b270 '__timer_t' sugar
|   |-Typedef 0x5631e00559a8 '__timer_t'
|   `-PointerType 0x5631dffee630 'void *'
|     `-BuiltinType 0x5631dffede70 'void'
|-RecordDecl 0x5631e005b300 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x5631e005b3d8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x5631e005b440 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x5631e005b4a8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x5631e005b510 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x5631e005b578 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x5631e005b5e0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x5631e005b648 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x5631e005b6b0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x5631e005b718 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x5631e005b780 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x5631e005b7e8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x5631e005b838 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x5631e005b908 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x5631e005b978 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x5631e005ba20 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x5631e005bbf0 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x5631e005bc90 <col:45>
|-FunctionDecl 0x5631e005be70 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x5631e005bd60 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x5631e005bf18 <col:54>
|-FunctionDecl 0x5631e005c118 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x5631e005bf80 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x5631e005bff8 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x5631e005c1c8 <line:157:22>
| `-ConstAttr 0x5631e005c220 <col:63>
|-FunctionDecl 0x5631e005d050 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5631e005c318 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x5631e005d0f8 <col:56>
|-FunctionDecl 0x5631e005d4a0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x5631e005d168 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x5631e005d1e0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x5631e005d260 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x5631e005d358 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x5631e005d560 <col:54>
|-RecordDecl 0x5631e005d5b8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x5631e005d668 parent 0x5631dffede18 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x5631e005d8c8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x5631e005d968 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x5631e005d9d0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x5631e005da38 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x5631e005db28 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x5631e005dc48 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x5631e005dbf0 'struct __locale_struct *'
|   `-ElaboratedType 0x5631e005db80 'struct __locale_struct' sugar
|     `-RecordType 0x5631e005d640 'struct __locale_struct'
|       `-Record 0x5631e005d5b8 '__locale_struct'
|-TypedefDecl 0x5631e005dcf8 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x5631e005dcc0 '__locale_t' sugar
|   |-Typedef 0x5631e005dc48 '__locale_t'
|   `-PointerType 0x5631e005dbf0 'struct __locale_struct *'
|     `-ElaboratedType 0x5631e005db80 'struct __locale_struct' sugar
|       `-RecordType 0x5631e005d640 'struct __locale_struct'
|         `-Record 0x5631e005d5b8 '__locale_struct'
|-FunctionDecl 0x5631e005f110 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x5631e005dd68 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x5631e005dde0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x5631e005de60 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x5631e005def0 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x5631e005df68 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5631e005f1d8 <col:40>
|-FunctionDecl 0x5631e005f3c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x5631e005f2a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x5631e005f470 <col:66>
|-FunctionDecl 0x5631e005f580 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x5631e005f4d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x5631e005f628 <col:69>
|-FunctionDecl 0x5631e005f858 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x5631e005f690 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5631e005f720 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x5631e005f908 <col:52>
|-FunctionDecl 0x5631e005fab0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x5631e005f970 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5631e005fa00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x5631e005fb60 <col:55>
|-FunctionDecl 0x5631e005fcf8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x5631e005fbe0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x5631e005fda0 <col:62>
|-FunctionDecl 0x5631e005ff18 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x5631e005fe08 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x5631e005ffc0 <col:60>
|-FunctionDecl 0x5631e00602b8 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x5631e0060118 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x5631e0060198 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x5631e0060368 <col:44>
|-FunctionDecl 0x5631e0060578 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x5631e00603d0 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5631e0060450 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x5631e0060628 <col:49>
|-VarDecl 0x5631e0060728 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x5631e00607a8 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x5631e0060828 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x5631e00608f0 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x5631e0060a20 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x5631e0060ac0 <col:42>
|-VarDecl 0x5631e0060b30 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x5631e0060bb0 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x5631e0060d38 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x5631e0060c28 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x5631e0060de0 <col:57>
|-FunctionDecl 0x5631e0060ef0 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5631e0060e60 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x5631e0060f98 <col:56>
|-FunctionDecl 0x5631e00610d0 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5631e0061018 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x5631e0061178 <col:59>
|-FunctionDecl 0x5631e0061280 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x5631e00611e8 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x5631e0061328 <col:48>
| `-ConstAttr 0x5631e0061380 <col:89>
|-FunctionDecl 0x5631e00615e8 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x5631e0061438 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x5631e00614c8 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x5631e0061848 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x5631e00616d8 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5631e0061768 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x5631e00618f8 <col:88>
|-FunctionDecl 0x5631e0061a90 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x5631e0061960 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5631e00619f0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x5631e0061b40 <col:88>
|-FunctionDecl 0x5631e0061d58 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x5631e0061ba8 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5631e0061c38 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x5631e0061e08 <line:208:22>
|-FunctionDecl 0x5631e0062178 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x5631e0061e70 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5631e0061ef0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x5631e0061f80 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x5631e0062010 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x5631e0062478 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x5631e0062278 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x5631e0062350 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x5631e0062528 <col:85>
|-FunctionDecl 0x5631e0062918 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x5631e0062590 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5631e00626c8 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x5631e00627d0 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x5631e00629d0 <col:52>
|-FunctionDecl 0x5631e0062b48 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x5631e0062a38 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x5631e0062bf0 <col:61>
|-FunctionDecl 0x5631e00630f0 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x5631e0062c58 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x5631e0062cd8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x5631e0062e08 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x5631e0062ef8 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x5631e00631b0 <col:62>
|-FunctionDecl 0x5631e00633c8 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x5631e0063218 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x5631e00632a8 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x5631e0063478 <line:221:22>
|-FunctionDecl 0x5631e0063578 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x5631e00634e0 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x5631e0063620 <col:65>
|-TypedefDecl 0x5631e0063690 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x5631dffedfd0 'unsigned long'
|-RecordDecl 0x5631e00636e8 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x5631e0063830 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x5631e0063898 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5631e0063948 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x5631e00638f0 'union pthread_attr_t' sugar
|   `-RecordType 0x5631e0063770 'union pthread_attr_t'
|     `-Record 0x5631e00636e8 'pthread_attr_t'
|-RecordDecl 0x5631e00639a0 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x5631e0063b18 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x5631e0063b90 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x5631e0063c40 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x5631e0063be0 'struct __pthread_internal_list' sugar
|   `-RecordType 0x5631e0063a20 'struct __pthread_internal_list'
|     `-Record 0x5631e00639a0 '__pthread_internal_list'
|-RecordDecl 0x5631e0063cb0 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x5631e0063d58 parent 0x5631dffede18 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x5631e0063e30 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x5631e0063e98 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x5631e0063f00 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x5631e0063f68 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x5631e0063fd0 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x5631e0064038 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x5631e0068110 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x5631e00681c0 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x5631e00682b0 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x5631e0068318 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5631e00684a0 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x5631e0068440 'union pthread_mutex_t' sugar
|   `-RecordType 0x5631e0063d30 'pthread_mutex_t'
|     `-Record 0x5631e0063cb0 ''
|-RecordDecl 0x5631e0068510 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x5631e0068650 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x5631e00686b8 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x5631e0068770 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x5631e0068710 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x5631e0068590 'pthread_mutexattr_t'
|     `-Record 0x5631e0068510 ''
|-RecordDecl 0x5631e00687e0 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x5631e0068888 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x5631e0068950 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x5631e00689b8 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x5631e0068a20 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x5631e0068a88 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x5631e0068af0 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x5631e0068b58 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x5631e0068bc0 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x5631e0068c28 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x5631e0068ce0 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at ./split_5/rfi000_tso.opt_true-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at ./split_5/rfi000_tso.opt_true-unreach-call.i:258:3)'
| |-FieldDecl 0x5631e0068dd0 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x5631e0068e38 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x5631e0068f70 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x5631e0068f10 'union pthread_cond_t' sugar
|   `-RecordType 0x5631e0068860 'pthread_cond_t'
|     `-Record 0x5631e00687e0 ''
|-RecordDecl 0x5631e0068fe0 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x5631e006a130 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x5631e006a198 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x5631e006a250 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x5631e006a1f0 'union pthread_condattr_t' sugar
|   `-RecordType 0x5631e0069060 'pthread_condattr_t'
|     `-Record 0x5631e0068fe0 ''
|-TypedefDecl 0x5631e006a2d8 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x5631dffedfb0 'unsigned int'
|-TypedefDecl 0x5631e006a348 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x5631dffedf10 'int'
|-RecordDecl 0x5631e006a3a0 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x5631e006a448 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x5631e006a510 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x5631e006a578 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x5631e006a5e0 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x5631e006a648 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x5631e006a6b0 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x5631e006a718 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x5631e006a780 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x5631e006a7e8 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x5631e006a850 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x5631e006a8b8 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x5631e006a920 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x5631e006a9d0 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at ./split_5/rfi000_tso.opt_true-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at ./split_5/rfi000_tso.opt_true-unreach-call.i:281:3)'
| |-FieldDecl 0x5631e006aa78 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x5631e006aae0 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5631e006ac30 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x5631e006abd0 'union pthread_rwlock_t' sugar
|   `-RecordType 0x5631e006a420 'pthread_rwlock_t'
|     `-Record 0x5631e006a3a0 ''
|-RecordDecl 0x5631e006aca0 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x5631e006ade0 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x5631e006ae48 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5631e006af00 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x5631e006aea0 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x5631e006ad20 'pthread_rwlockattr_t'
|     `-Record 0x5631e006aca0 ''
|-TypedefDecl 0x5631e006af88 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x5631dffedf14 'volatile int' volatile
|   `-BuiltinType 0x5631dffedf10 'int'
|-RecordDecl 0x5631e006afe0 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x5631e006c140 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x5631e006c1a8 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5631e006c260 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x5631e006c200 'union pthread_barrier_t' sugar
|   `-RecordType 0x5631e006b060 'pthread_barrier_t'
|     `-Record 0x5631e006afe0 ''
|-RecordDecl 0x5631e006c2d0 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x5631e006c3d0 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x5631e006c438 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x5631e006c4f0 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x5631e006c490 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x5631e006c350 'pthread_barrierattr_t'
|     `-Record 0x5631e006c2d0 ''
|-TypedefDecl 0x5631e006c608 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x5631e006c5a0 'long [8]' 8 
|   `-BuiltinType 0x5631dffedf30 'long'
|-EnumDecl 0x5631e006c660 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x5631e006c728 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x5631e006c778 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x5631e006c7c8 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x5631e006c898 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x5631e006c8e8 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x5631e006c938 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x5631e006c988 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x5631e006ca10 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x5631e006c9f8 <col:26> 'int'
| |   `-DeclRefExpr 0x5631e006c9d8 <col:26> 'int' EnumConstant 0x5631e006c898 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x5631e006ca98 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x5631e006ca80 <col:29> 'int'
| |   `-DeclRefExpr 0x5631e006ca60 <col:29> 'int' EnumConstant 0x5631e006c8e8 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x5631e006cb20 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x5631e006cb08 <col:30> 'int'
| |   `-DeclRefExpr 0x5631e006cae8 <col:30> 'int' EnumConstant 0x5631e006c938 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x5631e006cba8 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x5631e006cb90 <col:27> 'int'
|     `-DeclRefExpr 0x5631e006cb70 <col:27> 'int' EnumConstant 0x5631e006ca10 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x5631e006cbf8 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x5631e006ccc8 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x5631e006cd50 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x5631e006cd38 <col:30> 'int'
| |   `-DeclRefExpr 0x5631e006cd18 <col:30> 'int' EnumConstant 0x5631e006ccc8 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x5631e006cda0 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x5631e006ce28 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x5631e006ce10 <col:29> 'int'
|     `-DeclRefExpr 0x5631e006cdf0 <col:29> 'int' EnumConstant 0x5631e006cda0 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x5631e006ce78 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x5631e006cf48 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x5631e006cf98 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x5631e006cfe8 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x5631e006d038 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x5631e006d150 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x5631e006d1a0 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x5631e006d1f0 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x5631e006d278 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x5631e006d260 <col:31> 'int'
|     `-DeclRefExpr 0x5631e006d240 <col:31> 'int' EnumConstant 0x5631e006d150 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x5631e006d2c8 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x5631e006d398 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x5631e006d3e8 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x5631e006d438 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x5631e006d508 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x5631e006d558 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x5631e006d5a8 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x5631e006d678 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x5631e006d6c8 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x5631e006d718 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x5631e006d958 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x5631e006d9c0 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x5631e006da28 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x5631e006db48 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x5631e006db98 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x5631e006dc68 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x5631e006dcb8 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x5631e006dd08 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x5631e006ddd8 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x5631e006de28 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x5631e006e488 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x5631e006df20 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x5631e006e030 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e006e270 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x5631e006e2f0 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x5631e006e548 <col:47>
| |-NonNullAttr 0x5631e006e5a0 <col:77, col:94> 1 3
| `-CallbackAttr 0x5631e006e5d8 <line:385:12> Implicit 2 3
|-FunctionDecl 0x5631e006e700 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x5631e006e630 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x5631e006e958 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x5631e006e7b8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x5631e006e838 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x5631e006eb28 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x5631e006ea18 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x5631e006ebd0 <col:60>
|-FunctionDecl 0x5631e006ed20 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x5631e006edc0 <col:54>
| `-ConstAttr 0x5631e006ee18 <col:95>
|-FunctionDecl 0x5631e006efe8 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x5631e006ee50 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5631e006eec8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x5631e006f098 <line:394:19>
| `-ConstAttr 0x5631e006f0f0 <col:60>
|-FunctionDecl 0x5631e0070b08 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x5631e00709d0 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x5631e0070bb0 <col:71>
| `-NonNullAttr 0x5631e0070c08 <col:112, col:126> 1
|-FunctionDecl 0x5631e0070d10 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x5631e0070c58 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x5631e0070db8 <line:397:22>
| `-NonNullAttr 0x5631e0070e10 <col:63, col:77> 1
|-FunctionDecl 0x5631e0071038 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x5631e0070e58 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x5631e0070ed8 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x5631e00710e8 <line:400:22>
| `-NonNullAttr 0x5631e0071140 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e0071348 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x5631e0071188 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5631e0071208 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x5631e00713f8 <line:403:22>
| `-NonNullAttr 0x5631e0071450 <col:63, col:77> 1
|-FunctionDecl 0x5631e00716a8 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x5631e0071498 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x5631e0071540 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x5631e0071758 <line:406:22>
| `-NonNullAttr 0x5631e00717b0 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e00729e8 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x5631e00717f8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5631e0071870 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x5631e0072a98 <line:409:22>
| `-NonNullAttr 0x5631e0072af0 <col:63, col:77> 1
|-FunctionDecl 0x5631e0072d28 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x5631e0072b38 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e0072bc8 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x5631e0072dd8 <line:412:22>
| `-NonNullAttr 0x5631e0072e30 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e0073068 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x5631e0072e78 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e0072f08 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x5631e0073118 <col:37>
| `-NonNullAttr 0x5631e0073170 <col:78, col:95> 1 2
|-FunctionDecl 0x5631e0073358 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e00731b8 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e0073238 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x5631e0073408 <line:418:22>
| `-NonNullAttr 0x5631e0073460 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e00735e8 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x5631e00734a8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5631e0073528 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x5631e0073698 <line:420:22>
| `-NonNullAttr 0x5631e00736f0 <col:63, col:77> 1
|-FunctionDecl 0x5631e0073898 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e0073738 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e00737b8 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x5631e0073948 <line:423:22>
| `-NonNullAttr 0x5631e00739c0 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e0073b48 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x5631e0073a08 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5631e0073a88 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x5631e0073bf8 <line:426:22>
| `-NonNullAttr 0x5631e0073c50 <col:63, col:77> 1
|-FunctionDecl 0x5631e0073df8 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e0073c98 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e0073d18 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x5631e0073ea8 <line:429:22>
| `-NonNullAttr 0x5631e0073f00 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e0074088 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x5631e0073f48 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5631e0073fc8 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x5631e0074138 <line:431:22>
| `-NonNullAttr 0x5631e0074190 <col:63, col:77> 1
|-FunctionDecl 0x5631e00743b8 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x5631e00741d8 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e0074258 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x5631e0074468 <line:434:22>
| |-NonNullAttr 0x5631e00744c0 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x5631e00744f8 <col:100> "" ""
|-FunctionDecl 0x5631e0074708 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x5631e0074548 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5631e00745c8 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x5631e00747b8 <line:437:22>
| |-NonNullAttr 0x5631e0074810 <col:63, col:77> 1
| `-DeprecatedAttr 0x5631e0074848 <col:97> "" ""
|-FunctionDecl 0x5631e0074a48 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x5631e0074898 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e0074910 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x5631e0074af8 <line:440:22>
| `-NonNullAttr 0x5631e0074b50 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e0074cd0 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x5631e0074b98 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5631e0074c10 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x5631e0074d80 <line:443:22>
| `-NonNullAttr 0x5631e0074dd8 <col:63, col:77> 1
|-FunctionDecl 0x5631e00750c8 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x5631e0074e28 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x5631e0074ea8 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x5631e0074f20 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x5631e0075180 <line:447:22>
| `-NonNullAttr 0x5631e00751d8 <col:63, col:83> 1 2 3
|-FunctionDecl 0x5631e0075488 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x5631e0075230 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x5631e00752b0 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x5631e0075328 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x5631e0075540 <col:43>
| `-NonNullAttr 0x5631e0075598 <col:84, col:98> 1
|-FunctionDecl 0x5631e0075858 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x5631e00755e8 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5631e0075668 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x5631e00756f8 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x5631e0075910 <line:452:22>
| `-NonNullAttr 0x5631e0075968 <col:63, col:77> 3
|-FunctionDecl 0x5631e0075c78 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x5631e00759e0 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5631e0075a60 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x5631e0075af0 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x5631e0075d30 <line:456:22>
| `-NonNullAttr 0x5631e0075d88 <col:63, col:80> 2 3
|-FunctionDecl 0x5631e0075f78 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x5631e0075dd8 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5631e0075e58 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x5631e0076028 <line:458:22>
|-FunctionDecl 0x5631e00763f8 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x5631e00760f0 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x5631e0076290 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x5631e00764a8 <col:52, col:69> 1 2
|-FunctionDecl 0x5631e0076650 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x5631e0076530 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x5631e00765b0 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x5631e0076838 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x5631e0076718 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x5631e0076798 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x5631e00769f0 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x5631e00768f8 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x5631e0076b30 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x5631e0076bd0 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x5631e0076c78 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x5631e0076d68 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x5631e0076dd0 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x5631e0076fa0 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./split_5/rfi000_tso.opt_true-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x5631e0077098 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x5631e0077150 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x5631e00770f0 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x5631e0076c50 '__pthread_unwind_buf_t'
| |   `-Record 0x5631e0076bd0 ''
| `-AlignedAttr 0x5631e00771a8 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x5631e0077220 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x5631e0077380 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x5631e00773e8 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x5631e0077450 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x5631e00774b8 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x5631e00776c0 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x5631e00775b0 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x5631e0077808 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x5631e0077778 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x5631e0077a00 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5631e00778c0 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x5631e0077aa8 <line:487:22>
|-RecordDecl 0x5631e0077b00 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x5631e0077e18 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x5631e0077c78 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x5631e0077cf8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x5631e0077ec8 <col:86>
| `-ReturnsTwiceAttr 0x5631e0077f20 <col:12> Implicit
|-FunctionDecl 0x5631e0078248 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x5631e0077ff0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x5631e0078100 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x5631e00782f8 <line:493:22>
| `-NonNullAttr 0x5631e0078350 <col:63, col:77> 1
|-FunctionDecl 0x5631e00784c8 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5631e0078398 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5631e0078570 <line:495:22>
| `-NonNullAttr 0x5631e00785c8 <col:63, col:77> 1
|-FunctionDecl 0x5631e00786d0 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5631e0078618 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5631e0078778 <line:497:22>
| `-NonNullAttr 0x5631e00787d0 <col:52, col:66> 1
|-FunctionDecl 0x5631e00788d0 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5631e0078818 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5631e0078978 <line:499:22>
| `-NonNullAttr 0x5631e00789d0 <col:52, col:66> 1
|-FunctionDecl 0x5631e0079c28 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x5631e0079a38 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x5631e0079ac8 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x5631e0079cd8 <col:36>
| `-NonNullAttr 0x5631e0079d30 <col:66, col:83> 1 2
|-FunctionDecl 0x5631e0079e30 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5631e0079d78 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5631e0079ed8 <line:504:22>
| `-NonNullAttr 0x5631e0079f30 <col:52, col:66> 1
|-FunctionDecl 0x5631e007a1c8 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e0079fe0 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x5631e007a060 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x5631e007a278 <line:508:22>
| `-NonNullAttr 0x5631e007a2d0 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e007a598 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x5631e007a318 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x5631e007a398 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x5631e007a418 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x5631e007a650 <line:512:22>
| `-NonNullAttr 0x5631e007a6a8 <col:63, col:80> 1 3
|-FunctionDecl 0x5631e007a7b0 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x5631e007a6f8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x5631e007a858 <line:514:22>
| `-NonNullAttr 0x5631e007a8b0 <col:63, col:77> 1
|-FunctionDecl 0x5631e007aad8 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x5631e007a960 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x5631e007ab80 <line:516:22>
| `-NonNullAttr 0x5631e007abd8 <col:63, col:77> 1
|-FunctionDecl 0x5631e007ace0 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x5631e007ac28 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x5631e007ad88 <line:518:22>
| `-NonNullAttr 0x5631e007ade0 <col:63, col:77> 1
|-FunctionDecl 0x5631e007b008 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e007ae28 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x5631e007aea8 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x5631e007b0b8 <line:522:22>
| `-NonNullAttr 0x5631e007b110 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e007b318 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5631e007b158 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5631e007b1d8 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x5631e007b3c8 <line:525:22>
| `-NonNullAttr 0x5631e007b420 <col:63, col:77> 1
|-FunctionDecl 0x5631e007b5c8 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e007b468 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x5631e007b4e8 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x5631e007b678 <line:528:22>
| `-NonNullAttr 0x5631e007b6d0 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e007b858 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5631e007b718 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5631e007b798 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x5631e007b908 <line:530:22>
| `-NonNullAttr 0x5631e007b960 <col:63, col:77> 1
|-FunctionDecl 0x5631e007bb20 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e007b9a8 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x5631e007ba40 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x5631e007bbd0 <line:534:22>
| `-NonNullAttr 0x5631e007bc28 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e007bdb8 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5631e007bc78 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5631e007bcf8 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x5631e007be68 <line:537:22>
| `-NonNullAttr 0x5631e007bec0 <col:63, col:77> 1
|-FunctionDecl 0x5631e007c068 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e007bf08 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x5631e007bf88 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x5631e007c118 <line:541:22>
| `-NonNullAttr 0x5631e007c170 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e007c2f8 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5631e007c1b8 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5631e007c238 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x5631e007c3a8 <line:544:22>
| `-NonNullAttr 0x5631e007c400 <col:63, col:77> 1
|-FunctionDecl 0x5631e007c5e8 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x5631e007c448 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x5631e007c4c8 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x5631e007c698 <line:547:22>
| `-NonNullAttr 0x5631e007c6f0 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e007c878 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x5631e007c738 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x5631e007c7b8 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x5631e007c928 <line:550:22>
| `-NonNullAttr 0x5631e007c980 <col:63, col:77> 1
|-FunctionDecl 0x5631e007dcf8 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x5631e007daa0 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x5631e007dbb0 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x5631e007dda8 <col:29>
| `-NonNullAttr 0x5631e007de00 <col:70, col:84> 1
|-FunctionDecl 0x5631e007df78 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5631e007de48 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5631e007e020 <line:555:22>
| `-NonNullAttr 0x5631e007e078 <col:63, col:77> 1
|-FunctionDecl 0x5631e007e180 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5631e007e0c8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5631e007e228 <line:557:22>
| `-NonNullAttr 0x5631e007e280 <col:52, col:66> 1
|-FunctionDecl 0x5631e007e380 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5631e007e2c8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5631e007e428 <line:559:19>
| `-NonNullAttr 0x5631e007e480 <col:49, col:63> 1
|-FunctionDecl 0x5631e007e6b8 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x5631e007e4c8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x5631e007e558 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x5631e007e768 <col:39>
| `-NonNullAttr 0x5631e007e7c0 <col:69, col:86> 1 2
|-FunctionDecl 0x5631e007e8c0 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5631e007e808 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5631e007e968 <line:564:22>
| `-NonNullAttr 0x5631e007e9c0 <col:52, col:66> 1
|-FunctionDecl 0x5631e007eb28 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5631e007ea70 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5631e007ebd0 <line:566:22>
| `-NonNullAttr 0x5631e007ec28 <col:52, col:66> 1
|-FunctionDecl 0x5631e007ede8 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x5631e007ec78 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x5631e007ed08 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x5631e007ee98 <col:39>
| `-NonNullAttr 0x5631e007eef0 <col:69, col:86> 1 2
|-FunctionDecl 0x5631e007eff0 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x5631e007ef38 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x5631e007f098 <line:571:22>
| `-NonNullAttr 0x5631e007f0f0 <col:52, col:66> 1
|-FunctionDecl 0x5631e007f2d8 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x5631e007f1a0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x5631e007f380 <line:573:22>
| `-NonNullAttr 0x5631e007f3d8 <col:63, col:77> 1
|-FunctionDecl 0x5631e007f4e0 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x5631e007f428 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x5631e007f588 <line:575:22>
| `-NonNullAttr 0x5631e007f5e0 <col:63, col:77> 1
|-FunctionDecl 0x5631e007f808 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e007f628 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x5631e007f6a8 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x5631e007f8b8 <line:579:22>
| `-NonNullAttr 0x5631e007f910 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e007fb38 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x5631e007f958 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x5631e007f9d8 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x5631e007fbe8 <line:582:22>
| `-NonNullAttr 0x5631e007fc40 <col:63, col:77> 1
|-FunctionDecl 0x5631e007fde8 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e007fc88 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x5631e007fd08 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x5631e007fe98 <line:586:22>
| `-NonNullAttr 0x5631e007fef0 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e0080078 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x5631e007ff38 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x5631e007ffb8 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x5631e0080128 <col:36>
| `-NonNullAttr 0x5631e0080180 <col:77, col:91> 1
|-FunctionDecl 0x5631e00804b8 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x5631e0080260 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x5631e0080370 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x5631e0080568 <line:591:22>
| `-NonNullAttr 0x5631e00805c0 <col:63, col:77> 1
|-FunctionDecl 0x5631e0080738 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x5631e0080608 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x5631e00807e0 <line:593:22>
| `-NonNullAttr 0x5631e0080838 <col:63, col:77> 1
|-FunctionDecl 0x5631e0080940 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x5631e0080888 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x5631e00809e8 <line:595:22>
| `-NonNullAttr 0x5631e0080a40 <col:52, col:66> 1
|-FunctionDecl 0x5631e0080b58 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x5631e0080aa0 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x5631e0080c00 <line:597:22>
| `-NonNullAttr 0x5631e0080c58 <col:52, col:66> 1
|-FunctionDecl 0x5631e0080e88 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x5631e0080ca8 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x5631e0080d20 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x5631e0080f38 <line:600:22, col:39> 1 2
|-FunctionDecl 0x5631e0081268 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x5631e0080fb8 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x5631e0081030 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x5631e00810c0 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x5631e0081320 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x5631e0081538 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x5631e0081400 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x5631e00815e0 <line:606:22>
| `-NonNullAttr 0x5631e0081638 <col:63, col:77> 1
|-FunctionDecl 0x5631e0081740 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x5631e0081688 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x5631e00817e8 <line:608:22>
| `-NonNullAttr 0x5631e0081840 <col:63, col:77> 1
|-FunctionDecl 0x5631e0081aa0 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e0081888 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x5631e0081908 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x5631e0081b50 <line:612:22>
| `-NonNullAttr 0x5631e0081ba8 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e0081db8 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x5631e0081bf8 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x5631e0081c78 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x5631e0081e68 <col:37>
| `-NonNullAttr 0x5631e0081ec0 <col:78, col:92> 1
|-FunctionDecl 0x5631e00820d8 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x5631e0081f08 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x5631e0081fb0 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x5631e0082188 <line:618:22>
| `-NonNullAttr 0x5631e00821e0 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e00823a8 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x5631e0082228 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x5631e00822a0 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x5631e0082458 <line:621:22>
| `-NonNullAttr 0x5631e00824b0 <col:63, col:77> 1
|-FunctionDecl 0x5631e0082758 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x5631e0082590 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x5631e0082610 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x5631e0082808 <line:623:22>
| `-NonNullAttr 0x5631e0082860 <col:63, col:77> 1
|-FunctionDecl 0x5631e00829d8 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x5631e00828a8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x5631e0082ab0 <line:625:22>
| `-NonNullAttr 0x5631e0082b08 <col:63, col:77> 1
|-FunctionDecl 0x5631e0082c10 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x5631e0082b58 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x5631e0082cb8 <line:627:22>
| `-NonNullAttr 0x5631e0082d10 <col:52, col:66> 1
|-FunctionDecl 0x5631e0082e10 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x5631e0082d58 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x5631e0082eb8 <line:629:22>
| `-NonNullAttr 0x5631e0082f10 <col:52, col:66> 1
|-FunctionDecl 0x5631e0083010 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x5631e0082f58 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x5631e00830b8 <line:631:22>
| `-NonNullAttr 0x5631e0083110 <col:52, col:66> 1
|-FunctionDecl 0x5631e00834e8 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x5631e00831f0 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x5631e0083300 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x5631e0083380 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x5631e00835a0 <line:635:22>
| `-NonNullAttr 0x5631e00835f8 <col:63, col:77> 1
|-FunctionDecl 0x5631e0083778 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x5631e0083648 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x5631e0083820 <line:637:22>
| `-NonNullAttr 0x5631e0083878 <col:63, col:77> 1
|-FunctionDecl 0x5631e0083980 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x5631e00838c8 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x5631e0083a28 <line:639:22>
| `-NonNullAttr 0x5631e0083a80 <col:52, col:66> 1
|-FunctionDecl 0x5631e0084c88 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x5631e0084b50 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x5631e0084d30 <line:641:22>
| `-NonNullAttr 0x5631e0084d88 <col:63, col:77> 1
|-FunctionDecl 0x5631e0084e90 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x5631e0084dd8 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x5631e0084f38 <line:643:22>
| `-NonNullAttr 0x5631e0084f90 <col:63, col:77> 1
|-FunctionDecl 0x5631e00851b8 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5631e0084fd8 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x5631e0085058 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x5631e0085268 <line:647:22>
| `-NonNullAttr 0x5631e00852c0 <col:63, col:80> 1 2
|-FunctionDecl 0x5631e00854c8 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x5631e0085308 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x5631e0085388 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x5631e0085578 <line:650:22>
| `-NonNullAttr 0x5631e00855d0 <col:63, col:77> 1
|-FunctionDecl 0x5631e0085918 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x5631e00856b0 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x5631e00857d0 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x5631e00859c8 <line:653:22>
| `-NonNullAttr 0x5631e0085a20 <col:63, col:77> 1
|-FunctionDecl 0x5631e0085b88 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x5631e0085a68 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x5631e0085c30 <col:69>
|-FunctionDecl 0x5631e0085da8 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x5631e0085c98 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x5631e0085e50 <col:72>
|-FunctionDecl 0x5631e0086088 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x5631e0085eb8 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x5631e0085f68 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x5631e0086138 <col:44>
|-FunctionDecl 0x5631e0086358 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x5631e00861a0 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x5631e0086218 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x5631e0086408 <line:660:22>
| `-NonNullAttr 0x5631e0086460 <col:63, col:77> 2
|-FunctionDecl 0x5631e00868a8 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x5631e0086540 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x5631e0086650 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x5631e0086760 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x5631e0086960 <col:47>
|-FunctionDecl 0x5631e0086af0 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x5631e00869d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x5631e0086c48 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x5631e0086bb0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x5631e0086d10 <line:667:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x5631e0086dd0 <line:668:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x5631e0086e90 <line:669:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x5631e0086f48 <line:670:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x5631e0086fc8 prev 0x5631e0086f48 <line:671:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x5631e0087030 <col:24> 'int' 0
|-VarDecl 0x5631e0087068 <line:672:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x5631e00870e8 prev 0x5631e0087068 <line:673:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x5631e0087150 <col:27> 'int' 0
|-VarDecl 0x5631e0087188 <line:674:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x5631e0087208 prev 0x5631e0087188 <line:675:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x5631e0087270 <col:27> 'int' 0
|-VarDecl 0x5631e00872a0 <line:676:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x5631e0087318 <line:677:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x5631e0087398 <line:678:1, col:5> col:5 used x 'int'
|-VarDecl 0x5631e0087418 prev 0x5631e0087398 <line:679:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x5631e0087480 <col:9> 'int' 0
|-VarDecl 0x5631e00874b8 <line:680:1, col:5> col:5 used y 'int'
|-VarDecl 0x5631e0087538 prev 0x5631e00874b8 <line:681:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x5631e00875a0 <col:9> 'int' 0
|-VarDecl 0x5631e00875d0 <line:682:1, col:7> col:7 used y$flush_delayed '_Bool'
|-VarDecl 0x5631e0087650 <line:683:1, col:5> col:5 used y$mem_tmp 'int'
|-VarDecl 0x5631e00876c8 <line:684:1, col:7> col:7 used y$r_buff0_thd0 '_Bool'
|-VarDecl 0x5631e0087740 <line:685:1, col:7> col:7 used y$r_buff0_thd1 '_Bool'
|-VarDecl 0x5631e00877b8 <line:686:1, col:7> col:7 used y$r_buff0_thd2 '_Bool'
|-VarDecl 0x5631e0087830 <line:687:1, col:7> col:7 used y$r_buff1_thd0 '_Bool'
|-VarDecl 0x5631e00878a8 <line:688:1, col:7> col:7 used y$r_buff1_thd1 '_Bool'
|-VarDecl 0x5631e0087920 <line:689:1, col:7> col:7 used y$r_buff1_thd2 '_Bool'
|-VarDecl 0x5631e0087998 <line:690:1, col:7> col:7 y$read_delayed '_Bool'
|-VarDecl 0x5631e0087a18 <line:691:1, col:6> col:6 y$read_delayed_var 'int *'
|-VarDecl 0x5631e0087b00 <line:692:1, col:5> col:5 used y$w_buff0 'int'
|-VarDecl 0x5631e0087b78 <line:693:1, col:7> col:7 used y$w_buff0_used '_Bool'
|-VarDecl 0x5631e0087bf8 <line:694:1, col:5> col:5 used y$w_buff1 'int'
|-VarDecl 0x5631e0087c70 <line:695:1, col:7> col:7 used y$w_buff1_used '_Bool'
|-VarDecl 0x5631e0087ce8 <line:696:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x5631e0087d60 <line:697:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x5631e0087e78 prev 0x5631e0086af0 <line:698:1, line:717:1> line:698:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x5631e0087de0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x5631e0089108 <line:699:1, line:717:1>
|   |-CallExpr 0x5631e0087f88 <line:700:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e0087f70 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0087f20 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e0087fe8 <line:701:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x5631e0087fa8 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   | `-IntegerLiteral 0x5631e0087fc8 <col:7> 'int' 2
|   |-CallExpr 0x5631e0088040 <line:702:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e0088028 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0088008 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5631e0088098 <line:703:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e0088080 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0088060 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e00880f8 <line:704:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x5631e00880b8 <col:3> 'int' lvalue Var 0x5631e0087418 'x' 'int'
|   | `-IntegerLiteral 0x5631e00880d8 <col:7> 'int' 1
|   |-CallExpr 0x5631e0088150 <line:705:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e0088138 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0088118 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5631e00881a8 <line:706:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e0088190 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0088170 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e0088490 <line:707:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x5631e00881c8 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   | `-ConditionalOperator 0x5631e0088460 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x5631e0088288 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x5631e0088240 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x5631e0088228 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5631e00881e8 <col:7> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x5631e0088270 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x5631e0088258 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5631e0088208 <col:25> '_Bool' lvalue Var 0x5631e0087740 'y$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e0088448 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e00882a8 <col:42> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5631e0088428 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x5631e00883f8 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x5631e0088368 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5631e0088320 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5631e0088308 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5631e00882c8 <col:55> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5631e0088350 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5631e0088338 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5631e00882e8 <col:73> '_Bool' lvalue Var 0x5631e00878a8 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x5631e00883c8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5631e0088388 <col:90> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x5631e00883e0 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e00883a8 <col:102> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |-BinaryOperator 0x5631e0088698 <line:708:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5631e00884b0 <col:3> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0088680 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e0088650 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5631e0088570 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5631e0088528 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5631e0088510 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5631e00884d0 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5631e0088558 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5631e0088540 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5631e00884f0 <col:38> '_Bool' lvalue Var 0x5631e0087740 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e0088608 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5631e00885c0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5631e0088590 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5631e0088638 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5631e0088620 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e00885e8 <col:66> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5631e0088980 <line:709:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5631e00886b8 <col:3> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0088968 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e0088938 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5631e0088858 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5631e0088778 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5631e0088730 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5631e0088718 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5631e00886d8 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5631e0088760 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5631e0088748 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5631e00886f8 <col:38> '_Bool' lvalue Var 0x5631e0087740 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x5631e0088838 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5631e00887f0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5631e00887d8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5631e0088798 <col:56> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5631e0088820 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5631e0088808 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5631e00887b8 <col:74> '_Bool' lvalue Var 0x5631e00878a8 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e00888f0 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5631e00888a8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5631e0088878 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5631e0088920 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5631e0088908 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e00888d0 <col:102> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x5631e0088ba0 <line:710:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5631e00889a0 <col:3> '_Bool' lvalue Var 0x5631e0087740 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0088b88 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e0088b58 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5631e0088a60 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5631e0088a18 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5631e0088a00 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5631e00889c0 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5631e0088a48 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5631e0088a30 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5631e00889e0 <col:38> '_Bool' lvalue Var 0x5631e0087740 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e0088b10 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5631e0088ab0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5631e0088a80 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5631e0088b40 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5631e0088b28 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e0088ad8 <col:66> '_Bool' lvalue Var 0x5631e0087740 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x5631e0088e88 <line:711:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5631e0088bc0 <col:3> '_Bool' lvalue Var 0x5631e00878a8 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0088e70 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e0088e40 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5631e0088d60 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5631e0088c80 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5631e0088c38 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5631e0088c20 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5631e0088be0 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5631e0088c68 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5631e0088c50 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5631e0088c00 <col:38> '_Bool' lvalue Var 0x5631e0087740 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x5631e0088d40 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5631e0088cf8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5631e0088ce0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5631e0088ca0 <col:56> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5631e0088d28 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5631e0088d10 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5631e0088cc0 <col:74> '_Bool' lvalue Var 0x5631e00878a8 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e0088df8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5631e0088db0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5631e0088d80 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5631e0088e28 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5631e0088e10 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e0088dd8 <col:102> '_Bool' lvalue Var 0x5631e00878a8 'y$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x5631e0088ee0 <line:712:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e0088ec8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0088ea8 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5631e0088f38 <line:713:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e0088f20 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0088f00 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e0088ff0 <line:714:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x5631e0088f58 <col:3> 'int' lvalue Var 0x5631e0086fc8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x5631e0088fd0 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x5631e0088fb8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e0088f78 <col:22> 'int' lvalue Var 0x5631e0086fc8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x5631e0088f98 <col:41> 'int' 1
|   |-CallExpr 0x5631e0089048 <line:715:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e0089030 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0089010 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x5631e00890f8 <line:716:3, col:36>
|     `-CallExpr 0x5631e00890d8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x5631e00890c0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5631e0089068 <col:10> 'void *(void)' Function 0x5631e002d958 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x5631e0089250 prev 0x5631e0086c48 <line:718:1, line:777:1> line:718:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x5631e00891b8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x5631e008ff10 <line:719:1, line:777:1>
|   |-CallExpr 0x5631e0089330 <line:720:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e0089318 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e00892f8 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e0089390 <line:721:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x5631e0089350 <col:3> 'int' lvalue Var 0x5631e0087418 'x' 'int'
|   | `-IntegerLiteral 0x5631e0089370 <col:7> 'int' 2
|   |-CallExpr 0x5631e00893e8 <line:722:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e00893d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e00893b0 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5631e0089440 <line:723:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e0089428 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0089408 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e00894b8 <line:724:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x5631e0089460 <col:3> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x5631e00894a0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e0089480 <col:15> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |-BinaryOperator 0x5631e0089518 <line:725:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x5631e00894d8 <col:3> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   | `-IntegerLiteral 0x5631e00894f8 <col:15> 'int' 1
|   |-BinaryOperator 0x5631e0089590 <line:726:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5631e0089538 <col:3> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0089578 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e0089558 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5631e0089628 <line:727:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x5631e00895b0 <col:3> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x5631e0089600 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x5631e00895d0 <col:27> 'int' 1
|   |-CallExpr 0x5631e00897a8 <line:728:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x5631e0089790 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5631e0089648 <col:3> 'void (int)' Function 0x5631e002dbc8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x5631e0089748 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x5631e0089728 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x5631e0089708 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x5631e00896c0 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x5631e00896a8 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5631e0089668 <col:23> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x5631e00896f0 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x5631e00896d8 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x5631e0089688 <col:41> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5631e0089828 <line:729:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5631e00897d0 <col:3> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0089810 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e00897f0 <col:20> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x5631e00898a0 <line:730:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5631e0089848 <col:3> '_Bool' lvalue Var 0x5631e00878a8 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0089888 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e0089868 <col:20> '_Bool' lvalue Var 0x5631e0087740 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x5631e0089918 <line:731:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x5631e00898c0 <col:3> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0089900 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e00898e0 <col:20> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x5631e00899b0 <line:732:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x5631e0089938 <col:3> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x5631e0089988 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x5631e0089958 <col:27> 'int' 1
|   |-CallExpr 0x5631e0089a08 <line:733:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e00899f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e00899d0 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5631e0089a60 <line:734:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e0089a48 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e0089a28 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e0089b20 <line:735:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x5631e0089a80 <col:3> '_Bool' lvalue Var 0x5631e0087ce8 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0089af8 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x5631e0089ad8 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x5631e0089ac0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5631e0089aa0 <col:19> 'void *(void)' Function 0x5631e002d958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x5631e0089bd0 <line:736:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x5631e0089b40 <col:3> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0089bb8 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x5631e0089b98 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x5631e0089b80 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5631e0089b60 <col:19> 'void *(void)' Function 0x5631e002d958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x5631e0089c48 <line:737:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x5631e0089bf0 <col:3> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x5631e0089c30 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e0089c10 <col:21> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x5631e0089cc0 <line:738:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x5631e0089c68 <col:3> 'int' lvalue Var 0x5631e0087650 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x5631e0089ca8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e0089c88 <col:15> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |-BinaryOperator 0x5631e008a0f8 <line:739:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x5631e0089ce0 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   | `-ConditionalOperator 0x5631e008a0c8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x5631e0089ef0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x5631e0089e10 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x5631e0089d38 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x5631e0089d20 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x5631e0089d00 <col:8> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x5631e0089df0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x5631e0089d88 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x5631e0089d70 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x5631e0089d50 <col:27> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x5631e0089dd8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x5631e0089dc0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x5631e0089da0 <col:46> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x5631e0089ed0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x5631e0089e68 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x5631e0089e50 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5631e0089e30 <col:65> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x5631e0089eb8 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x5631e0089ea0 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x5631e0089e80 <col:84> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008a0b0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e0089f10 <col:101> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |   `-ParenExpr 0x5631e008a090 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x5631e008a060 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x5631e0089fd0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5631e0089f88 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5631e0089f70 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5631e0089f30 <col:106> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5631e0089fb8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5631e0089fa0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5631e0089f50 <col:124> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x5631e008a030 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5631e0089ff0 <col:141> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x5631e008a048 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e008a010 <col:153> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |-BinaryOperator 0x5631e008a608 <line:740:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x5631e008a118 <col:3> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x5631e008a5d8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x5631e008a5a8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5631e008a590 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5631e008a138 <col:15> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008a5c0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008a158 <col:31> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5631e008a570 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x5631e008a540 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x5631e008a368 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x5631e008a288 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x5631e008a1b0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x5631e008a198 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x5631e008a178 <col:45> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x5631e008a268 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x5631e008a200 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x5631e008a1e8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x5631e008a1c8 <col:64> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x5631e008a250 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x5631e008a238 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x5631e008a218 <col:83> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x5631e008a348 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x5631e008a2e0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x5631e008a2c8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x5631e008a2a8 <col:102> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x5631e008a330 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x5631e008a318 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5631e008a2f8 <col:121> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x5631e008a528 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5631e008a388 <col:138> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x5631e008a508 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x5631e008a4d8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x5631e008a448 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x5631e008a400 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x5631e008a3e8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x5631e008a3a8 <col:151> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x5631e008a430 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x5631e008a418 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x5631e008a3c8 <col:169> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x5631e008a4a8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5631e008a468 <col:186> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x5631e008a4c0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5631e008a488 <col:198> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |-BinaryOperator 0x5631e008ab30 <line:741:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x5631e008a628 <col:3> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x5631e008aae8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x5631e008aab8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5631e008aaa0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5631e008a648 <col:15> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008aad0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008a668 <col:31> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x5631e008aa80 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x5631e008aa50 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x5631e008a878 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x5631e008a798 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x5631e008a6c0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x5631e008a6a8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x5631e008a688 <col:45> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x5631e008a778 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x5631e008a710 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x5631e008a6f8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x5631e008a6d8 <col:64> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x5631e008a760 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x5631e008a748 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x5631e008a728 <col:83> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x5631e008a858 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x5631e008a7f0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x5631e008a7d8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x5631e008a7b8 <col:102> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x5631e008a840 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x5631e008a828 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5631e008a808 <col:121> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x5631e008aa38 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5631e008a898 <col:138> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x5631e008aa18 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x5631e008a9e8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x5631e008a958 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x5631e008a910 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x5631e008a8f8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x5631e008a8b8 <col:151> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x5631e008a940 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x5631e008a928 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x5631e008a8d8 <col:169> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x5631e008a9b8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5631e008a978 <col:186> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x5631e008a9d0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5631e008a998 <col:198> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |-BinaryOperator 0x5631e008b0d8 <line:742:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008ab50 <col:3> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008b0c0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008b090 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x5631e008b048 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008b030 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008ab70 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008b078 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008b060 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008ab90 <col:36> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x5631e008b010 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x5631e008afe0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x5631e008ada0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5631e008acc0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5631e008abe8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5631e008abd0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5631e008abb0 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5631e008aca0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5631e008ac38 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5631e008ac20 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5631e008ac00 <col:74> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x5631e008ac88 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5631e008ac70 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5631e008ac50 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5631e008ad80 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5631e008ad18 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5631e008ad00 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5631e008ace0 <col:112> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x5631e008ad68 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5631e008ad50 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5631e008ad30 <col:131> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x5631e008afc8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5631e008afb0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5631e008adc0 <col:148> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x5631e008af90 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x5631e008af60 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x5631e008ae80 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5631e008ae38 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5631e008ae20 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5631e008ade0 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5631e008ae68 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5631e008ae50 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5631e008ae00 <col:184> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x5631e008af18 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5631e008aed0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5631e008aea0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5631e008af48 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x5631e008af30 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5631e008aef8 <col:212> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5631e008b6a0 <line:743:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008b0f8 <col:3> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008b688 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008b658 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x5631e008b610 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008b5f8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008b118 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008b640 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008b628 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008b138 <col:36> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x5631e008b5d8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x5631e008b5a8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x5631e008b348 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5631e008b268 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5631e008b190 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5631e008b178 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5631e008b158 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5631e008b248 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5631e008b1e0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5631e008b1c8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5631e008b1a8 <col:74> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x5631e008b230 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5631e008b218 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5631e008b1f8 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5631e008b328 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5631e008b2c0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5631e008b2a8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5631e008b288 <col:112> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x5631e008b310 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5631e008b2f8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5631e008b2d8 <col:131> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x5631e008b590 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5631e008b578 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5631e008b368 <col:148> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x5631e008b558 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x5631e008b528 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x5631e008b428 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5631e008b3e0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5631e008b3c8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5631e008b388 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5631e008b410 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5631e008b3f8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5631e008b3a8 <col:184> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x5631e008b4f8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5631e008b478 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5631e008b448 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5631e008b510 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x5631e008b4d0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x5631e008b4a0 <col:219> 'int' 0
|   |-BinaryOperator 0x5631e008bc68 <line:744:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008b6c0 <col:3> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008bc50 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008bc20 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x5631e008bbd8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008bbc0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008b6e0 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008bc08 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008bbf0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008b700 <col:36> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x5631e008bba0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x5631e008bb70 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x5631e008b910 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5631e008b830 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5631e008b758 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5631e008b740 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5631e008b720 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5631e008b810 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5631e008b7a8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5631e008b790 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5631e008b770 <col:74> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x5631e008b7f8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5631e008b7e0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5631e008b7c0 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5631e008b8f0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5631e008b888 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5631e008b870 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5631e008b850 <col:112> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x5631e008b8d8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5631e008b8c0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5631e008b8a0 <col:131> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x5631e008bb58 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5631e008bb40 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5631e008b930 <col:148> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x5631e008bb00 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x5631e008bad0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x5631e008b9f0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5631e008b9a8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5631e008b990 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5631e008b950 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5631e008b9d8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5631e008b9c0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5631e008b970 <col:184> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x5631e008ba88 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5631e008ba40 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5631e008ba10 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5631e008bab8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x5631e008baa0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5631e008ba68 <col:212> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x5631e008c230 <line:745:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008bc88 <col:3> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008c218 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008c1e8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x5631e008c1a0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008c188 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008bca8 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008c1d0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008c1b8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008bcc8 <col:36> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x5631e008c168 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x5631e008c138 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x5631e008bed8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5631e008bdf8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5631e008bd20 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5631e008bd08 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5631e008bce8 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5631e008bdd8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5631e008bd70 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5631e008bd58 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5631e008bd38 <col:74> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x5631e008bdc0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5631e008bda8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5631e008bd88 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5631e008beb8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5631e008be50 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5631e008be38 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5631e008be18 <col:112> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x5631e008bea0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5631e008be88 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5631e008be68 <col:131> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x5631e008c120 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5631e008c108 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5631e008bef8 <col:148> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x5631e008c0e8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x5631e008c0b8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x5631e008bfb8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5631e008bf70 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5631e008bf58 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5631e008bf18 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5631e008bfa0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5631e008bf88 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5631e008bf38 <col:184> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x5631e008c088 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5631e008c008 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5631e008bfd8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5631e008c0a0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x5631e008c060 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x5631e008c030 <col:219> 'int' 0
|   |-BinaryOperator 0x5631e008c2a8 <line:746:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x5631e008c250 <col:3> 'int' lvalue Var 0x5631e00870e8 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x5631e008c290 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e008c270 <col:25> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |-BinaryOperator 0x5631e008c3d8 <line:747:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x5631e008c2c8 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   | `-ConditionalOperator 0x5631e008c3a8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x5631e008c360 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5631e008c348 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5631e008c2e8 <col:7> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008c378 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008c308 <col:25> 'int' lvalue Var 0x5631e0087650 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x5631e008c390 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x5631e008c328 <col:37> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |-BinaryOperator 0x5631e008c470 <line:748:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008c3f8 <col:3> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x5631e008c448 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x5631e008c418 <col:28> 'int' 0
|   |-CallExpr 0x5631e008c4c8 <line:749:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e008c4b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e008c490 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5631e008c520 <line:750:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e008c508 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e008c4e8 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e008c5d0 <line:751:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008c540 <col:3> '_Bool' lvalue Var 0x5631e0087ce8 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008c5b8 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x5631e008c598 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x5631e008c580 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5631e008c560 <col:19> 'void *(void)' Function 0x5631e002d958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x5631e008c680 <line:752:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008c5f0 <col:3> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008c668 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x5631e008c648 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x5631e008c630 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5631e008c610 <col:19> 'void *(void)' Function 0x5631e002d958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x5631e008c6f8 <line:753:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008c6a0 <col:3> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008c6e0 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e008c6c0 <col:21> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x5631e008c770 <line:754:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x5631e008c718 <col:3> 'int' lvalue Var 0x5631e0087650 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x5631e008c758 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e008c738 <col:15> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |-BinaryOperator 0x5631e008cbb8 <line:755:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x5631e008c790 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   | `-ConditionalOperator 0x5631e008cb88 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x5631e008c9a0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x5631e008c8c0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x5631e008c7e8 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x5631e008c7d0 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x5631e008c7b0 <col:8> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x5631e008c8a0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x5631e008c838 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x5631e008c820 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x5631e008c800 <col:27> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x5631e008c888 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x5631e008c870 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x5631e008c850 <col:46> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x5631e008c980 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x5631e008c918 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x5631e008c900 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x5631e008c8e0 <col:65> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x5631e008c968 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x5631e008c950 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x5631e008c930 <col:84> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008cb70 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008c9c0 <col:101> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |   `-ParenExpr 0x5631e008cb50 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x5631e008cb10 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x5631e008ca80 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5631e008ca38 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5631e008ca20 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5631e008c9e0 <col:106> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5631e008ca68 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5631e008ca50 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5631e008ca00 <col:124> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x5631e008cae0 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5631e008caa0 <col:141> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x5631e008caf8 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e008cac0 <col:153> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |-BinaryOperator 0x5631e008d0c8 <line:756:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x5631e008cbd8 <col:3> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x5631e008d098 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x5631e008d068 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5631e008d050 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5631e008cbf8 <col:15> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008d080 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008cc18 <col:31> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5631e008d030 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x5631e008d000 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x5631e008ce28 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x5631e008cd48 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x5631e008cc70 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x5631e008cc58 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x5631e008cc38 <col:45> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x5631e008cd28 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x5631e008ccc0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x5631e008cca8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x5631e008cc88 <col:64> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x5631e008cd10 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x5631e008ccf8 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x5631e008ccd8 <col:83> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x5631e008ce08 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x5631e008cda0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x5631e008cd88 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x5631e008cd68 <col:102> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x5631e008cdf0 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x5631e008cdd8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5631e008cdb8 <col:121> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x5631e008cfe8 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5631e008ce48 <col:138> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x5631e008cfc8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x5631e008cf98 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x5631e008cf08 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x5631e008cec0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x5631e008cea8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x5631e008ce68 <col:151> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x5631e008cef0 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x5631e008ced8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x5631e008ce88 <col:169> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x5631e008cf68 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5631e008cf28 <col:186> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x5631e008cf80 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5631e008cf48 <col:198> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |-BinaryOperator 0x5631e008d5d8 <line:757:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x5631e008d0e8 <col:3> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x5631e008d5a8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x5631e008d578 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5631e008d560 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5631e008d108 <col:15> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008d590 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008d128 <col:31> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x5631e008d540 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x5631e008d510 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x5631e008d338 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x5631e008d258 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x5631e008d180 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x5631e008d168 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x5631e008d148 <col:45> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x5631e008d238 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x5631e008d1d0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x5631e008d1b8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x5631e008d198 <col:64> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x5631e008d220 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x5631e008d208 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x5631e008d1e8 <col:83> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x5631e008d318 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x5631e008d2b0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x5631e008d298 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x5631e008d278 <col:102> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x5631e008d300 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x5631e008d2e8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5631e008d2c8 <col:121> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x5631e008d4f8 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5631e008d358 <col:138> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x5631e008d4d8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x5631e008d4a8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x5631e008d418 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x5631e008d3d0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x5631e008d3b8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x5631e008d378 <col:151> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x5631e008d400 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x5631e008d3e8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x5631e008d398 <col:169> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x5631e008d478 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5631e008d438 <col:186> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x5631e008d490 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5631e008d458 <col:198> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |-BinaryOperator 0x5631e008dba8 <line:758:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008d5f8 <col:3> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008db90 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008db60 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x5631e008daf0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008dad8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008d618 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008db20 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008db08 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008d638 <col:36> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x5631e008dab8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x5631e008da88 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x5631e008d848 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5631e008d768 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5631e008d690 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5631e008d678 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5631e008d658 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5631e008d748 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5631e008d6e0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5631e008d6c8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5631e008d6a8 <col:74> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x5631e008d730 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5631e008d718 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5631e008d6f8 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5631e008d828 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5631e008d7c0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5631e008d7a8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5631e008d788 <col:112> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x5631e008d810 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5631e008d7f8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5631e008d7d8 <col:131> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x5631e008da70 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5631e008da58 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5631e008d868 <col:148> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x5631e008da38 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x5631e008da08 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x5631e008d928 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5631e008d8e0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5631e008d8c8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5631e008d888 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5631e008d910 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5631e008d8f8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5631e008d8a8 <col:184> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x5631e008d9c0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5631e008d978 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5631e008d948 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5631e008d9f0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x5631e008d9d8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5631e008d9a0 <col:212> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5631e008e170 <line:759:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008dbc8 <col:3> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008e158 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008e128 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x5631e008e0e0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008e0c8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008dbe8 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008e110 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008e0f8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008dc08 <col:36> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x5631e008e0a8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x5631e008e078 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x5631e008de18 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5631e008dd38 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5631e008dc60 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5631e008dc48 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5631e008dc28 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5631e008dd18 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5631e008dcb0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5631e008dc98 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5631e008dc78 <col:74> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x5631e008dd00 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5631e008dce8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5631e008dcc8 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5631e008ddf8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5631e008dd90 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5631e008dd78 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5631e008dd58 <col:112> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x5631e008dde0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5631e008ddc8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5631e008dda8 <col:131> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x5631e008e060 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5631e008e048 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5631e008de38 <col:148> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x5631e008e028 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x5631e008dff8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x5631e008def8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5631e008deb0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5631e008de98 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5631e008de58 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5631e008dee0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5631e008dec8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5631e008de78 <col:184> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x5631e008dfc8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5631e008df48 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5631e008df18 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5631e008dfe0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x5631e008dfa0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x5631e008df70 <col:219> 'int' 0
|   |-BinaryOperator 0x5631e008e718 <line:760:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008e190 <col:3> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008e700 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008e6d0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x5631e008e688 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008e670 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008e1b0 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008e6b8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008e6a0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008e1d0 <col:36> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x5631e008e650 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x5631e008e620 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x5631e008e3e0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5631e008e300 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5631e008e228 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5631e008e210 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5631e008e1f0 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5631e008e2e0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5631e008e278 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5631e008e260 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5631e008e240 <col:74> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x5631e008e2c8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5631e008e2b0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5631e008e290 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5631e008e3c0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5631e008e358 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5631e008e340 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5631e008e320 <col:112> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x5631e008e3a8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5631e008e390 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5631e008e370 <col:131> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x5631e008e608 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5631e008e5f0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5631e008e400 <col:148> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x5631e008e5d0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x5631e008e5a0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x5631e008e4c0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5631e008e478 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5631e008e460 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5631e008e420 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5631e008e4a8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5631e008e490 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5631e008e440 <col:184> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x5631e008e558 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5631e008e510 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5631e008e4e0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5631e008e588 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x5631e008e570 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5631e008e538 <col:212> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x5631e008ed00 <line:761:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008e738 <col:3> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008ece8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008ecb8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x5631e008ec70 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008ec58 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008e758 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008eca0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x5631e008ec88 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5631e008e778 <col:36> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x5631e008ec38 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x5631e008ec08 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x5631e008e988 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x5631e008e8a8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x5631e008e7d0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x5631e008e7b8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x5631e008e798 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x5631e008e888 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x5631e008e820 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x5631e008e808 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x5631e008e7e8 <col:74> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x5631e008e870 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x5631e008e858 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x5631e008e838 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x5631e008e968 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x5631e008e900 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x5631e008e8e8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x5631e008e8c8 <col:112> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x5631e008e950 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x5631e008e938 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x5631e008e918 <col:131> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x5631e008ebf0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x5631e008ebd8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x5631e008e9a8 <col:148> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x5631e008ebb8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x5631e008eb88 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x5631e008ea68 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x5631e008ea20 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x5631e008ea08 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x5631e008e9c8 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x5631e008ea50 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x5631e008ea38 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x5631e008e9e8 <col:184> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x5631e008eb38 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x5631e008eab8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x5631e008ea88 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x5631e008eb70 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x5631e008eb10 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x5631e008eae0 <col:219> 'int' 0
|   |-BinaryOperator 0x5631e008ed78 <line:762:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x5631e008ed20 <col:3> 'int' lvalue Var 0x5631e0087208 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x5631e008ed60 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5631e008ed40 <col:25> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |-BinaryOperator 0x5631e008eea8 <line:763:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x5631e008ed98 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   | `-ConditionalOperator 0x5631e008ee78 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x5631e008ee30 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x5631e008ee18 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5631e008edb8 <col:7> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008ee48 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008edd8 <col:25> 'int' lvalue Var 0x5631e0087650 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x5631e008ee60 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x5631e008edf8 <col:37> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |-BinaryOperator 0x5631e008ef40 <line:764:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008eec8 <col:3> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x5631e008ef18 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x5631e008eee8 <col:28> 'int' 0
|   |-CallExpr 0x5631e008ef98 <line:765:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e008ef80 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e008ef60 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5631e008eff0 <line:766:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e008efd8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e008efb8 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e008f2d8 <line:767:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x5631e008f010 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   | `-ConditionalOperator 0x5631e008f2a8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x5631e008f0d0 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x5631e008f088 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x5631e008f070 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5631e008f030 <col:7> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x5631e008f0b8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x5631e008f0a0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5631e008f050 <col:25> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x5631e008f290 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008f0f0 <col:42> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x5631e008f270 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x5631e008f240 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x5631e008f1b0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x5631e008f168 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x5631e008f150 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5631e008f110 <col:55> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x5631e008f198 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x5631e008f180 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5631e008f130 <col:73> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x5631e008f210 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5631e008f1d0 <col:90> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x5631e008f228 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e008f1f0 <col:102> 'int' lvalue Var 0x5631e0087538 'y' 'int'
|   |-BinaryOperator 0x5631e008f4e0 <line:768:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008f2f8 <col:3> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008f4c8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008f498 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5631e008f3b8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5631e008f370 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5631e008f358 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5631e008f318 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5631e008f3a0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5631e008f388 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5631e008f338 <col:38> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008f450 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5631e008f408 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5631e008f3d8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5631e008f480 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5631e008f468 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e008f430 <col:66> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x5631e008f7c8 <line:769:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008f500 <col:3> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008f7b0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008f780 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5631e008f6a0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5631e008f5c0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5631e008f578 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5631e008f560 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5631e008f520 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5631e008f5a8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5631e008f590 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5631e008f540 <col:38> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x5631e008f680 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5631e008f638 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5631e008f620 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5631e008f5e0 <col:56> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5631e008f668 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5631e008f650 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5631e008f600 <col:74> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008f738 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5631e008f6f0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5631e008f6c0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5631e008f768 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5631e008f750 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e008f718 <col:102> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x5631e008f9d0 <line:770:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008f7e8 <col:3> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008f9b8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008f988 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x5631e008f8a8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x5631e008f860 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x5631e008f848 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5631e008f808 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x5631e008f890 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x5631e008f878 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5631e008f828 <col:38> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008f940 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5631e008f8f8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5631e008f8c8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x5631e008f970 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5631e008f958 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e008f920 <col:66> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x5631e008fcc8 <line:771:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x5631e008f9f0 <col:3> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x5631e008fcb0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x5631e008fc80 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x5631e008fba0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x5631e008fab0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x5631e008fa68 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x5631e008fa50 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x5631e008fa10 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x5631e008fa98 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x5631e008fa80 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5631e008fa30 <col:38> '_Bool' lvalue Var 0x5631e00877b8 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x5631e008fb80 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x5631e008fb28 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x5631e008fb10 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5631e008fad0 <col:56> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x5631e008fb58 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x5631e008fb40 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5631e008faf0 <col:74> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x5631e008fc38 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x5631e008fbf0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x5631e008fbc0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x5631e008fc68 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x5631e008fc50 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x5631e008fc18 <col:102> '_Bool' lvalue Var 0x5631e0087920 'y$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x5631e008fd20 <line:772:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e008fd08 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e008fce8 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x5631e008fd78 <line:773:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x5631e008fd60 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e008fd40 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x5631e008fe30 <line:774:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x5631e008fd98 <col:3> 'int' lvalue Var 0x5631e0086fc8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x5631e008fe10 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x5631e008fdf8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5631e008fdb8 <col:22> 'int' lvalue Var 0x5631e0086fc8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x5631e008fdd8 <col:41> 'int' 1
|   |-CallExpr 0x5631e008fe88 <line:775:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x5631e008fe70 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5631e008fe50 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x5631e008ff00 <line:776:3, col:36>
|     `-CallExpr 0x5631e008fee0 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x5631e008fec8 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5631e008fea8 <col:10> 'void *(void)' Function 0x5631e002d958 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x5631e0090108 prev 0x5631e0086d10 <line:778:1, line:780:1> line:778:6 fence 'void ()'
| `-CompoundStmt 0x5631e00901a8 <line:779:1, line:780:1>
|-FunctionDecl 0x5631e00901d8 prev 0x5631e0086dd0 <line:781:1, line:783:1> line:781:6 isync 'void ()'
| `-CompoundStmt 0x5631e0090278 <line:782:1, line:783:1>
|-FunctionDecl 0x5631e00902a8 prev 0x5631e0086e90 <line:784:1, line:786:1> line:784:6 lwfence 'void ()'
| `-CompoundStmt 0x5631e0090348 <line:785:1, line:786:1>
`-FunctionDecl 0x5631e00903b8 <line:787:1, line:822:1> line:787:5 main 'int ()'
  `-CompoundStmt 0x5631e0094790 <line:788:1, line:822:1>
    |-DeclStmt 0x5631e00904d0 <line:789:3, col:18>
    | `-VarDecl 0x5631e0090468 <col:3, col:13> col:13 used t1601 'pthread_t':'unsigned long'
    |-CallExpr 0x5631e00906d8 <line:790:3, col:54> 'int'
    | |-ImplicitCastExpr 0x5631e00906c0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5631e00904e8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x5631e006e488 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x5631e0090528 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x5631e0090508 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x5631e0090468 't1601' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x5631e0090718 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x5631e00905a0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x5631e0090578 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x5631e0090540 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x5631e0090730 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5631e00905c0 <col:39> 'void *(void *)' Function 0x5631e0087e78 'P0' 'void *(void *)'
    | `-ParenExpr 0x5631e0090640 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x5631e0090618 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x5631e00905e0 <col:52> 'int' 0
    |-DeclStmt 0x5631e00907c0 <line:791:3, col:18>
    | `-VarDecl 0x5631e0090758 <col:3, col:13> col:13 used t1602 'pthread_t':'unsigned long'
    |-CallExpr 0x5631e0090968 <line:792:3, col:54> 'int'
    | |-ImplicitCastExpr 0x5631e0090950 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5631e00907d8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x5631e006e488 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x5631e0090818 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x5631e00907f8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x5631e0090758 't1602' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x5631e00909a8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x5631e0090890 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x5631e0090868 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x5631e0090830 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x5631e00909c0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5631e00908b0 <col:39> 'void *(void *)' Function 0x5631e0089250 'P1' 'void *(void *)'
    | `-ParenExpr 0x5631e0090930 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x5631e0090908 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x5631e00908d0 <col:52> 'int' 0
    |-CallExpr 0x5631e0090a10 <line:793:3, col:27> 'void'
    | `-ImplicitCastExpr 0x5631e00909f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5631e00909d8 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x5631e0090ae0 <line:794:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x5631e0090a30 <col:3> '_Bool' lvalue Var 0x5631e00872a0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x5631e0090ac8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x5631e0090aa8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x5631e0090a90 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x5631e0090a50 <col:21> 'int' lvalue Var 0x5631e0086fc8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x5631e0090a70 <col:41> 'int' 2
    |-CallExpr 0x5631e0090b38 <line:795:3, col:25> 'void'
    | `-ImplicitCastExpr 0x5631e0090b20 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5631e0090b00 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x5631e0090bc8 <line:796:3, col:36> 'void'
    | |-ImplicitCastExpr 0x5631e0090bb0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5631e0090b58 <col:3> 'void (int)' Function 0x5631e002d790 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x5631e0090c08 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5631e0090bf0 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x5631e0090b90 <col:21> '_Bool' lvalue Var 0x5631e00872a0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x5631e0090c58 <line:797:3, col:27> 'void'
    | `-ImplicitCastExpr 0x5631e0090c40 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5631e0090c20 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x5631e0090f40 <line:798:3, col:103> 'int' '='
    | |-DeclRefExpr 0x5631e0090c78 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
    | `-ConditionalOperator 0x5631e0090f10 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x5631e0090d38 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x5631e0090cf0 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x5631e0090cd8 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x5631e0090c98 <col:7> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x5631e0090d20 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x5631e0090d08 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x5631e0090cb8 <col:25> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x5631e0090ef8 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5631e0090d58 <col:42> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
    |   `-ParenExpr 0x5631e0090ed8 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x5631e0090ea8 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x5631e0090e18 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x5631e0090dd0 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x5631e0090db8 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x5631e0090d78 <col:55> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x5631e0090e00 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x5631e0090de8 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x5631e0090d98 <col:73> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x5631e0090e78 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5631e0090e38 <col:90> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x5631e0090e90 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x5631e0090e58 <col:102> 'int' lvalue Var 0x5631e0087538 'y' 'int'
    |-BinaryOperator 0x5631e0091148 <line:799:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x5631e0090f60 <col:3> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x5631e0091130 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5631e0091100 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x5631e0091020 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x5631e0090fd8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x5631e0090fc0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x5631e0090f80 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x5631e0091008 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x5631e0090ff0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x5631e0090fa0 <col:38> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x5631e00910b8 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x5631e0091070 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x5631e0091040 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x5631e00910e8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x5631e00910d0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x5631e0091098 <col:66> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x5631e0091430 <line:800:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x5631e0091168 <col:3> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x5631e0091418 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5631e00913e8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x5631e0091308 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x5631e0091228 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x5631e00911e0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x5631e00911c8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x5631e0091188 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x5631e0091210 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x5631e00911f8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x5631e00911a8 <col:38> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x5631e00912e8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x5631e00912a0 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x5631e0091288 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x5631e0091248 <col:56> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x5631e00912d0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x5631e00912b8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x5631e0091268 <col:74> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x5631e00913a0 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x5631e0091358 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x5631e0091328 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x5631e00913d0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x5631e00913b8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x5631e0091380 <col:102> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |-BinaryOperator 0x5631e0091638 <line:801:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x5631e0091450 <col:3> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x5631e0091620 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5631e00915f0 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x5631e0091510 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x5631e00914c8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x5631e00914b0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x5631e0091470 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x5631e00914f8 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x5631e00914e0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x5631e0091490 <col:38> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x5631e00915a8 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x5631e0091560 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x5631e0091530 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x5631e00915d8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x5631e00915c0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x5631e0091588 <col:66> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x5631e0091920 <line:802:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x5631e0091658 <col:3> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x5631e0091908 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5631e00918d8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x5631e00917f8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x5631e0091718 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x5631e00916d0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x5631e00916b8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x5631e0091678 <col:20> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x5631e0091700 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x5631e00916e8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x5631e0091698 <col:38> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x5631e00917d8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x5631e0091790 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x5631e0091778 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x5631e0091738 <col:56> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x5631e00917c0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x5631e00917a8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x5631e0091758 <col:74> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x5631e0091890 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x5631e0091848 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x5631e0091818 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x5631e00918c0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x5631e00918a8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x5631e0091870 <col:102> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |-CallExpr 0x5631e0091978 <line:803:3, col:25> 'void'
    | `-ImplicitCastExpr 0x5631e0091960 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5631e0091940 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x5631e00919d0 <line:804:3, col:27> 'void'
    | `-ImplicitCastExpr 0x5631e00919b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5631e0091998 <col:3> 'void ()' Function 0x5631e002de40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x5631e0091a80 <line:805:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x5631e00919f0 <col:3> '_Bool' lvalue Var 0x5631e0087ce8 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x5631e0091a68 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x5631e0091a48 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x5631e0091a30 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x5631e0091a10 <col:19> 'void *(void)' Function 0x5631e002d958 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x5631e0091b30 <line:806:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x5631e0091aa0 <col:3> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x5631e0091b18 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x5631e0091af8 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x5631e0091ae0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x5631e0091ac0 <col:19> 'void *(void)' Function 0x5631e002d958 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x5631e0091bb8 <line:807:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x5631e0091b50 <col:3> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x5631e0091ba0 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x5631e0091b70 <col:21> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x5631e0091c30 <line:808:3, col:15> 'int' '='
    | |-DeclRefExpr 0x5631e0091bd8 <col:3> 'int' lvalue Var 0x5631e0087650 'y$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x5631e0091c18 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x5631e0091bf8 <col:15> 'int' lvalue Var 0x5631e0087538 'y' 'int'
    |-BinaryOperator 0x5631e0092068 <line:809:3, col:162> 'int' '='
    | |-DeclRefExpr 0x5631e0091c50 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
    | `-ConditionalOperator 0x5631e0092038 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x5631e0091e60 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x5631e0091d80 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x5631e0091ca8 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x5631e0091c90 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x5631e0091c70 <col:8> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x5631e0091d60 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x5631e0091cf8 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x5631e0091ce0 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x5631e0091cc0 <col:27> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x5631e0091d48 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x5631e0091d30 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x5631e0091d10 <col:46> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x5631e0091e40 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x5631e0091dd8 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x5631e0091dc0 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x5631e0091da0 <col:65> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x5631e0091e28 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x5631e0091e10 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x5631e0091df0 <col:84> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x5631e0092020 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5631e0091e80 <col:101> 'int' lvalue Var 0x5631e0087538 'y' 'int'
    |   `-ParenExpr 0x5631e0092000 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x5631e0091fd0 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x5631e0091f40 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x5631e0091ef8 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x5631e0091ee0 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x5631e0091ea0 <col:106> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x5631e0091f28 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x5631e0091f10 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x5631e0091ec0 <col:124> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x5631e0091fa0 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5631e0091f60 <col:141> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x5631e0091fb8 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x5631e0091f80 <col:153> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
    |-BinaryOperator 0x5631e0092578 <line:810:3, col:208> 'int' '='
    | |-DeclRefExpr 0x5631e0092088 <col:3> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
    | `-ConditionalOperator 0x5631e0092548 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x5631e0092518 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x5631e0092500 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x5631e00920a8 <col:15> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x5631e0092530 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5631e00920c8 <col:31> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
    |   `-ParenExpr 0x5631e00924e0 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x5631e00924b0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x5631e00922d8 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x5631e00921f8 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x5631e0092120 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x5631e0092108 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x5631e00920e8 <col:45> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x5631e00921d8 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x5631e0092170 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x5631e0092158 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x5631e0092138 <col:64> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x5631e00921c0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x5631e00921a8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x5631e0092188 <col:83> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x5631e00922b8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x5631e0092250 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x5631e0092238 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x5631e0092218 <col:102> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x5631e00922a0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x5631e0092288 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x5631e0092268 <col:121> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x5631e0092498 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5631e00922f8 <col:138> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
    |       `-ParenExpr 0x5631e0092478 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x5631e0092448 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x5631e00923b8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x5631e0092370 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x5631e0092358 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x5631e0092318 <col:151> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x5631e00923a0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x5631e0092388 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x5631e0092338 <col:169> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x5631e0092418 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x5631e00923d8 <col:186> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x5631e0092430 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x5631e00923f8 <col:198> 'int' lvalue Var 0x5631e0087b00 'y$w_buff0' 'int'
    |-BinaryOperator 0x5631e0092a88 <line:811:3, col:208> 'int' '='
    | |-DeclRefExpr 0x5631e0092598 <col:3> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
    | `-ConditionalOperator 0x5631e0092a58 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x5631e0092a28 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x5631e0092a10 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x5631e00925b8 <col:15> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x5631e0092a40 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5631e00925d8 <col:31> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
    |   `-ParenExpr 0x5631e00929f0 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x5631e00929c0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x5631e00927e8 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x5631e0092708 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x5631e0092630 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x5631e0092618 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x5631e00925f8 <col:45> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x5631e00926e8 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x5631e0092680 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x5631e0092668 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x5631e0092648 <col:64> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x5631e00926d0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x5631e00926b8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x5631e0092698 <col:83> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x5631e00927c8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x5631e0092760 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x5631e0092748 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x5631e0092728 <col:102> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x5631e00927b0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x5631e0092798 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x5631e0092778 <col:121> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x5631e00929a8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5631e0092808 <col:138> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
    |       `-ParenExpr 0x5631e0092988 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x5631e0092958 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x5631e00928c8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x5631e0092880 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x5631e0092868 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x5631e0092828 <col:151> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x5631e00928b0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x5631e0092898 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x5631e0092848 <col:169> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x5631e0092928 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x5631e00928e8 <col:186> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x5631e0092940 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x5631e0092908 <col:198> 'int' lvalue Var 0x5631e0087bf8 'y$w_buff1' 'int'
    |-BinaryOperator 0x5631e0093050 <line:812:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x5631e0092aa8 <col:3> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x5631e0093038 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5631e0093008 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x5631e0092fc0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5631e0092fa8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5631e0092ac8 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x5631e0092ff0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5631e0092fd8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5631e0092ae8 <col:36> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x5631e0092f88 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x5631e0092f58 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x5631e0092d18 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x5631e0092c38 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x5631e0092b40 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x5631e0092b28 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x5631e0092b08 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x5631e0092c18 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x5631e0092bb0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x5631e0092b78 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x5631e0092b58 <col:74> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x5631e0092c00 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x5631e0092be8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x5631e0092bc8 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x5631e0092cf8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x5631e0092c90 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x5631e0092c78 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x5631e0092c58 <col:112> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x5631e0092ce0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x5631e0092cc8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x5631e0092ca8 <col:131> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x5631e0092f40 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x5631e0092f28 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5631e0092d38 <col:148> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x5631e0092f08 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x5631e0092ed8 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x5631e0092df8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x5631e0092db0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x5631e0092d98 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x5631e0092d58 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x5631e0092de0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x5631e0092dc8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x5631e0092d78 <col:184> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x5631e0092e90 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x5631e0092e48 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x5631e0092e18 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x5631e0092ec0 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x5631e0092ea8 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x5631e0092e70 <col:212> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x5631e0093618 <line:813:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x5631e0093070 <col:3> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x5631e0093600 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5631e00935d0 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x5631e0093588 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5631e0093570 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5631e0093090 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x5631e00935b8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5631e00935a0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5631e00930b0 <col:36> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x5631e0093550 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x5631e0093520 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x5631e00932c0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x5631e00931e0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x5631e0093108 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x5631e00930f0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x5631e00930d0 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x5631e00931c0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x5631e0093158 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x5631e0093140 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x5631e0093120 <col:74> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x5631e00931a8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x5631e0093190 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x5631e0093170 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x5631e00932a0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x5631e0093238 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x5631e0093220 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x5631e0093200 <col:112> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x5631e0093288 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x5631e0093270 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x5631e0093250 <col:131> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x5631e0093508 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x5631e00934f0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5631e00932e0 <col:148> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x5631e00934d0 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x5631e00934a0 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x5631e00933a0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x5631e0093358 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x5631e0093340 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x5631e0093300 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x5631e0093388 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x5631e0093370 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x5631e0093320 <col:184> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x5631e0093470 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x5631e00933f0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x5631e00933c0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x5631e0093488 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x5631e0093448 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x5631e0093418 <col:219> 'int' 0
    |-BinaryOperator 0x5631e0093bd8 <line:814:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x5631e0093638 <col:3> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x5631e0093bc0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5631e0093b78 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x5631e0093b30 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5631e0093b18 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5631e0093658 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x5631e0093b60 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5631e0093b48 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5631e0093678 <col:36> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x5631e0093af8 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x5631e0093ac8 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x5631e0093888 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x5631e00937a8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x5631e00936d0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x5631e00936b8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x5631e0093698 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x5631e0093788 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x5631e0093720 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x5631e0093708 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x5631e00936e8 <col:74> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x5631e0093770 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x5631e0093758 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x5631e0093738 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x5631e0093868 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x5631e0093800 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x5631e00937e8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x5631e00937c8 <col:112> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x5631e0093850 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x5631e0093838 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x5631e0093818 <col:131> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x5631e0093ab0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x5631e0093a98 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5631e00938a8 <col:148> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x5631e0093a78 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x5631e0093a48 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x5631e0093968 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x5631e0093920 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x5631e0093908 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x5631e00938c8 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x5631e0093950 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x5631e0093938 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x5631e00938e8 <col:184> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x5631e0093a00 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x5631e00939b8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x5631e0093988 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x5631e0093a30 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x5631e0093a18 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x5631e00939e0 <col:212> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x5631e00941a0 <line:815:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x5631e0093bf8 <col:3> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x5631e0094188 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x5631e0094158 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x5631e0094110 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5631e00940f8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5631e0093c18 <col:20> '_Bool' lvalue Var 0x5631e0087d60 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x5631e0094140 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x5631e0094128 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5631e0093c38 <col:36> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x5631e00940d8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x5631e00940a8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x5631e0093e48 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x5631e0093d68 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x5631e0093c90 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x5631e0093c78 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x5631e0093c58 <col:55> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x5631e0093d48 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x5631e0093ce0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x5631e0093cc8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x5631e0093ca8 <col:74> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x5631e0093d30 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x5631e0093d18 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x5631e0093cf8 <col:93> '_Bool' lvalue Var 0x5631e0087c70 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x5631e0093e28 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x5631e0093dc0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x5631e0093da8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x5631e0093d88 <col:112> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x5631e0093e10 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x5631e0093df8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x5631e0093dd8 <col:131> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x5631e0094090 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x5631e0094078 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x5631e0093e68 <col:148> '_Bool' lvalue Var 0x5631e0087830 'y$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x5631e0094058 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x5631e0094028 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x5631e0093f28 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x5631e0093ee0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x5631e0093ec8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x5631e0093e88 <col:166> '_Bool' lvalue Var 0x5631e0087b78 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x5631e0093f10 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x5631e0093ef8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x5631e0093ea8 <col:184> '_Bool' lvalue Var 0x5631e00876c8 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x5631e0093ff8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x5631e0093f78 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x5631e0093f48 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x5631e0094010 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x5631e0093fd0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x5631e0093fa0 <col:219> 'int' 0
    |-BinaryOperator 0x5631e0094470 <line:816:3, col:95> '_Bool' '='
    | |-DeclRefExpr 0x5631e00941c0 <col:3> '_Bool' lvalue Var 0x5631e0087318 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x5631e0094458 <col:21, col:95> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x5631e0094440 <col:21, col:95> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x5631e0094420 <col:22, col:95> 'int'
    |       `-BinaryOperator 0x5631e0094400 <col:23, col:94> 'int' '&&'
    |         |-BinaryOperator 0x5631e0094368 <col:23, col:66> 'int' '&&'
    |         | |-BinaryOperator 0x5631e00942d0 <col:23, col:38> 'int' '&&'
    |         | | |-BinaryOperator 0x5631e0094238 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x5631e0094220 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x5631e00941e0 <col:23> 'int' lvalue Var 0x5631e0087418 'x' 'int'
    |         | | | `-IntegerLiteral 0x5631e0094200 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x5631e00942b0 <col:33, col:38> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x5631e0094298 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x5631e0094258 <col:33> 'int' lvalue Var 0x5631e0087538 'y' 'int'
    |         | |   `-IntegerLiteral 0x5631e0094278 <col:38> 'int' 2
    |         | `-BinaryOperator 0x5631e0094348 <col:43, col:66> 'int' '=='
    |         |   |-ImplicitCastExpr 0x5631e0094330 <col:43> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x5631e00942f0 <col:43> 'int' lvalue Var 0x5631e00870e8 '__unbuffered_p1_EAX' 'int'
    |         |   `-IntegerLiteral 0x5631e0094310 <col:66> 'int' 1
    |         `-BinaryOperator 0x5631e00943e0 <col:71, col:94> 'int' '=='
    |           |-ImplicitCastExpr 0x5631e00943c8 <col:71> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x5631e0094388 <col:71> 'int' lvalue Var 0x5631e0087208 '__unbuffered_p1_EBX' 'int'
    |           `-IntegerLiteral 0x5631e00943a8 <col:94> 'int' 1
    |-BinaryOperator 0x5631e00945a0 <line:817:3, col:37> 'int' '='
    | |-DeclRefExpr 0x5631e0094490 <col:3> 'int' lvalue Var 0x5631e0087538 'y' 'int'
    | `-ConditionalOperator 0x5631e0094570 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x5631e0094528 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x5631e0094510 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x5631e00944b0 <col:7> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x5631e0094540 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x5631e00944d0 <col:25> 'int' lvalue Var 0x5631e0087650 'y$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x5631e0094558 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x5631e00944f0 <col:37> 'int' lvalue Var 0x5631e0087538 'y' 'int'
    |-BinaryOperator 0x5631e0094638 <line:818:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x5631e00945c0 <col:3> '_Bool' lvalue Var 0x5631e00875d0 'y$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x5631e0094610 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x5631e00945e0 <col:28> 'int' 0
    |-CallExpr 0x5631e0094690 <line:819:3, col:25> 'void'
    | `-ImplicitCastExpr 0x5631e0094678 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x5631e0094658 <col:3> 'void ()' Function 0x5631e002df00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x5631e0094708 <line:820:3, col:36> 'void'
    | |-ImplicitCastExpr 0x5631e00946f0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5631e00946b0 <col:3> 'void (int)' Function 0x5631e002dbc8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x5631e0094748 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x5631e0094730 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x5631e00946d0 <col:21> '_Bool' lvalue Var 0x5631e0087318 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x5631e0094780 <line:821:3, col:10>
      `-IntegerLiteral 0x5631e0094760 <col:10> 'int' 0
