TranslationUnitDecl 0x56109c937e18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x56109c9386d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x56109c9383b0 '__int128'
|-TypedefDecl 0x56109c938748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x56109c9383d0 'unsigned __int128'
|-TypedefDecl 0x56109c938a50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x56109c938820 'struct __NSConstantString_tag'
|   `-Record 0x56109c9387a0 '__NSConstantString_tag'
|-TypedefDecl 0x56109c938af8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x56109c938ab0 'char *'
|   `-BuiltinType 0x56109c937eb0 'char'
|-TypedefDecl 0x56109c977650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x56109c938d90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x56109c938bd0 'struct __va_list_tag'
|     `-Record 0x56109c938b50 '__va_list_tag'
|-FunctionDecl 0x56109c977770 <./split_7/safe032_rmo.oepc_false-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x56109c977940 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x56109c977870 <col:31> col:34 'int'
|-FunctionDecl 0x56109c977ab8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x56109c977be0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x56109c977d28 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x56109c977c98 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x56109c977f58 <col:40, col:99>
|   |-IfStmt 0x56109c977f28 <col:42, col:88>
|   | |-UnaryOperator 0x56109c977e08 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x56109c977df0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56109c977dd0 <col:47> 'int' lvalue ParmVar 0x56109c977c98 'expression' 'int'
|   | `-CompoundStmt 0x56109c977f10 <col:59, col:88>
|   |   `-LabelStmt 0x56109c977ef8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x56109c977e88 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x56109c977e70 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x56109c977e20 <col:68> 'void () __attribute__((noreturn))' Function 0x56109c977be0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x56109c977f40 <col:89>
|   `-ReturnStmt 0x56109c977f48 <col:91>
|-FunctionDecl 0x56109c977fa0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x56109c978060 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x56109c9783e0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56109c978118 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x56109c978198 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x56109c978218 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x56109c978298 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56109c9784a0 <line:11:22>
|-FunctionDecl 0x56109c99e520 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56109c978510 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x56109c978590 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x56109c99e350 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x56109c99e3d0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56109c99e5e0 <line:14:22>
|-FunctionDecl 0x56109c99e890 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56109c99e650 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x56109c99e6d0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x56109c99e750 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x56109c99e948 <line:16:22>
|-TypedefDecl 0x56109c99e9b8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x56109c937f70 'unsigned char'
|-TypedefDecl 0x56109c99ea28 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x56109c937f90 'unsigned short'
|-TypedefDecl 0x56109c99ea98 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-TypedefDecl 0x56109c99eb08 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99eb78 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x56109c937ed0 'signed char'
|-TypedefDecl 0x56109c99ebe8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x56109c937f70 'unsigned char'
|-TypedefDecl 0x56109c99ec58 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x56109c937ef0 'short'
|-TypedefDecl 0x56109c99ecc8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x56109c937f90 'unsigned short'
|-TypedefDecl 0x56109c99ed38 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x56109c937f10 'int'
|-TypedefDecl 0x56109c99eda8 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-TypedefDecl 0x56109c99ee18 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99ee88 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99eef8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99ef68 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99efd8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99f048 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-TypedefDecl 0x56109c99f0b8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-TypedefDecl 0x56109c99f128 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99f198 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99f208 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-TypedefDecl 0x56109c99f278 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99f2e8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99f378 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99f3e8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x56109c937f10 'int'
|-RecordDecl 0x56109c99f440 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x56109c99f588 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x56109c99f640 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x56109c99f5e0 'struct __fsid_t' sugar
|   `-RecordType 0x56109c99f4c0 '__fsid_t'
|     `-Record 0x56109c99f440 ''
|-TypedefDecl 0x56109c99f6c8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99f738 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99f7a8 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99f818 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-TypedefDecl 0x56109c99f888 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99f8f8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-TypedefDecl 0x56109c99f968 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99f9d8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x56109c937f10 'int'
|-TypedefDecl 0x56109c99fa48 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x56109c937f10 'int'
|-TypedefDecl 0x56109c99fab8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x56109c937f10 'int'
|-TypedefDecl 0x56109c99fb28 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x56109c938630 'void *'
|   `-BuiltinType 0x56109c937e70 'void'
|-TypedefDecl 0x56109c99fb98 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99fc08 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99fc78 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99fce8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99fd58 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99fdc8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99fe38 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c99fea8 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99ff18 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99ff88 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c99fff8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c9a0088 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x56109c9a0050 '__off64_t' sugar
|   |-Typedef 0x56109c99f378 '__off64_t'
|   `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c9a0180 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x56109c9a0140 '__quad_t *'
|   `-TypedefType 0x56109c9a00e0 '__quad_t' sugar
|     |-Typedef 0x56109c99eef8 '__quad_t'
|     `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c9a01f0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x56109c938ab0 'char *'
|   `-BuiltinType 0x56109c937eb0 'char'
|-TypedefDecl 0x56109c9a0260 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c9a02d0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-FunctionDecl 0x56109c9a1458 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x56109c9a1380 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x56109c9a1768 <line:72:1, line:74:1>
|   `-ReturnStmt 0x56109c9a1758 <line:73:3, col:34>
|     `-CallExpr 0x56109c9a1718 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x56109c9a1700 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56109c9a1690 <col:10> '<builtin fn type>' Function 0x56109c9a1500 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x56109c9a1740 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56109c9a16b0 <col:29> 'unsigned int' lvalue ParmVar 0x56109c9a1380 '__bsx' 'unsigned int'
|-FunctionDecl 0x56109c9a1500 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x56109c9a15a0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x56109c9a1610 <col:10> Implicit
| `-ConstAttr 0x56109c9a1668 <col:10> Implicit
|-FunctionDecl 0x56109c9a18c0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x56109c9a17b8 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x56109c9a1bd8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x56109c9a1bc8 <line:78:3, col:34>
|     `-CallExpr 0x56109c9a1b88 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x56109c9a1b70 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56109c9a1af8 <col:10> '<builtin fn type>' Function 0x56109c9a1968 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x56109c9a1bb0 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x56109c9a1b18 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x56109c9a17b8 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x56109c9a1968 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x56109c9a1a08 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x56109c9a1a78 <col:10> Implicit
| `-ConstAttr 0x56109c9a1ad0 <col:10> Implicit
|-TypedefDecl 0x56109c9a1c08 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-TypedefDecl 0x56109c9a1c98 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x56109c9a1c60 '__time_t' sugar
|   |-Typedef 0x56109c99f888 '__time_t'
|   `-BuiltinType 0x56109c937f30 'long'
|-RecordDecl 0x56109c9a1cf0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x56109c9a1da8 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x56109c9a1e38 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x56109c9a1ec8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x56109c9a1e90 '__pid_t' sugar
|   |-Typedef 0x56109c99f3e8 '__pid_t'
|   `-BuiltinType 0x56109c937f10 'int'
|-RecordDecl 0x56109c9a1f20 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x56109c9a1fe0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x56109c9a2030 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x56109c9a20f0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x56109c9a2158 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-RecordDecl 0x56109c9a21b0 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x56109c9a3480 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x56109c9a3530 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x56109c9a34d0 'struct cpu_set_t' sugar
|   `-RecordType 0x56109c9a2230 'cpu_set_t'
|     `-Record 0x56109c9a21b0 ''
|-FunctionDecl 0x56109c9a3808 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x56109c9a35d8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56109c9a36e0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x56109c9a38b8 <line:108:19>
|-FunctionDecl 0x56109c9a3a90 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x56109c9a3920 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x56109c9a3b38 <col:69>
|-FunctionDecl 0x56109c9a3cb0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x56109c9a3ba0 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x56109c9a3d58 <col:64>
|-FunctionDecl 0x56109c9a4018 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x56109c9a3dc0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56109c9a3ef8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x56109c9a40c8 <line:114:22>
|-FunctionDecl 0x56109c9a43b0 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x56109c9a4130 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56109c9a4228 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x56109c9a4460 <col:88>
|-FunctionDecl 0x56109c9a4718 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x56109c9a44c8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56109c9a4548 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x56109c9a45d8 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x56109c9a47d0 <col:62>
|-FunctionDecl 0x56109c9a4948 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x56109c9a4838 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x56109c9a49f0 <col:63>
|-FunctionDecl 0x56109c9a4b18 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x56109c9a4bb8 <col:47>
|-FunctionDecl 0x56109c9a4cc0 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x56109c9a4c28 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x56109c9a4d68 <col:69>
|-FunctionDecl 0x56109c9a4e70 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x56109c9a4dd8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x56109c9a4f18 <col:69>
|-FunctionDecl 0x56109c9a51d8 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56109c9a4f80 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56109c9a50b8 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x56109c9a5288 <col:88>
|-TypedefDecl 0x56109c9a5318 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x56109c9a52e0 '__clock_t' sugar
|   |-Typedef 0x56109c99f6c8 '__clock_t'
|   `-BuiltinType 0x56109c937f30 'long'
|-TypedefDecl 0x56109c9a53c0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x56109c9a5370 '__clockid_t' sugar
|   |-Typedef 0x56109c99fab8 '__clockid_t'
|   `-BuiltinType 0x56109c937f10 'int'
|-TypedefDecl 0x56109c9a5458 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x56109c9a5420 '__timer_t' sugar
|   |-Typedef 0x56109c99fb28 '__timer_t'
|   `-PointerType 0x56109c938630 'void *'
|     `-BuiltinType 0x56109c937e70 'void'
|-RecordDecl 0x56109c9a54b0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x56109c9a5570 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x56109c9a55d8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x56109c9a5640 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x56109c9a56a8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x56109c9a5710 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x56109c9a5778 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x56109c9a57e0 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x56109c9a5848 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x56109c9a58b0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x56109c9a5918 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x56109c9a5980 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x56109c9a59d0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x56109c9a5a98 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x56109c9a5b08 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x56109c9a5bb0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x56109c9a5d80 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x56109c9a5e20 <col:45>
|-FunctionDecl 0x56109c9a6000 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x56109c9a5ef0 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x56109c9a60a8 <col:54>
|-FunctionDecl 0x56109c9a62a8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x56109c9a6110 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x56109c9a6188 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x56109c9a6358 <line:158:22>
| `-ConstAttr 0x56109c9a6ff0 <col:63>
|-FunctionDecl 0x56109c9a71f0 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56109c9a70e8 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x56109c9a7298 <col:56>
|-FunctionDecl 0x56109c9a7640 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x56109c9a7308 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x56109c9a7380 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56109c9a7400 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x56109c9a74f8 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x56109c9a7700 <col:54>
|-RecordDecl 0x56109c9a7758 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x56109c9a7808 parent 0x56109c937e18 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x56109c9a7a68 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x56109c9a7b08 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x56109c9a7b70 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x56109c9a7bd8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x56109c9a7cc8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x56109c9a7de8 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x56109c9a7d90 'struct __locale_struct *'
|   `-ElaboratedType 0x56109c9a7d20 'struct __locale_struct' sugar
|     `-RecordType 0x56109c9a77e0 'struct __locale_struct'
|       `-Record 0x56109c9a7758 '__locale_struct'
|-TypedefDecl 0x56109c9a7e98 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x56109c9a7e60 '__locale_t' sugar
|   |-Typedef 0x56109c9a7de8 '__locale_t'
|   `-PointerType 0x56109c9a7d90 'struct __locale_struct *'
|     `-ElaboratedType 0x56109c9a7d20 'struct __locale_struct' sugar
|       `-RecordType 0x56109c9a77e0 'struct __locale_struct'
|         `-Record 0x56109c9a7758 '__locale_struct'
|-FunctionDecl 0x56109c9a92a0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x56109c9a7f08 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x56109c9a7f80 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56109c9a9028 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x56109c9a90b8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x56109c9a9130 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x56109c9a9368 <col:40>
|-FunctionDecl 0x56109c9a9558 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x56109c9a9430 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x56109c9a9600 <col:66>
|-FunctionDecl 0x56109c9a9710 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x56109c9a9668 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x56109c9a97b8 <col:69>
|-FunctionDecl 0x56109c9a99e8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x56109c9a9820 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56109c9a98b0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x56109c9a9a98 <col:52>
|-FunctionDecl 0x56109c9a9c40 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x56109c9a9b00 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56109c9a9b90 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x56109c9a9cf0 <col:55>
|-FunctionDecl 0x56109c9a9e88 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x56109c9a9d70 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x56109c9a9f30 <col:62>
|-FunctionDecl 0x56109c9aa168 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x56109c9a9f98 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x56109c9aa210 <col:60>
|-FunctionDecl 0x56109c9aa438 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x56109c9aa290 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x56109c9aa310 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x56109c9aa4e8 <col:44>
|-FunctionDecl 0x56109c9aa6f8 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x56109c9aa550 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56109c9aa5d0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x56109c9aa7a8 <col:49>
|-VarDecl 0x56109c9aa8a8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x56109c9aa928 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x56109c9aa9a8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x56109c9aaa70 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x56109c9aaba0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x56109c9aac40 <col:42>
|-VarDecl 0x56109c9aacb0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x56109c9aad30 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x56109c9aaeb8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x56109c9aada8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x56109c9aaf60 <col:57>
|-FunctionDecl 0x56109c9ab0d0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56109c9aafe0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x56109c9ab178 <col:56>
|-FunctionDecl 0x56109c9ab288 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56109c9ab1f8 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x56109c9ab330 <col:59>
|-FunctionDecl 0x56109c9ab438 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x56109c9ab3a0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x56109c9ab4e0 <col:48>
| `-ConstAttr 0x56109c9ab538 <col:89>
|-FunctionDecl 0x56109c9ab798 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x56109c9ab5e8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x56109c9ab678 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x56109c9ab9f8 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56109c9ab888 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56109c9ab918 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x56109c9abaa8 <col:88>
|-FunctionDecl 0x56109c9abc40 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56109c9abb10 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56109c9abba0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x56109c9abcf0 <col:88>
|-FunctionDecl 0x56109c9abf08 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x56109c9abd58 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56109c9abde8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x56109c9abfb8 <line:209:22>
|-FunctionDecl 0x56109c9ac358 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x56109c9ac020 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56109c9ac0e0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x56109c9ac170 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x56109c9ac200 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x56109c9ac658 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x56109c9ac458 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x56109c9ac530 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x56109c9ac708 <col:85>
|-FunctionDecl 0x56109c9acaf8 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x56109c9ac770 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56109c9ac8a8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x56109c9ac9b0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x56109c9acbb0 <col:52>
|-FunctionDecl 0x56109c9acd28 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x56109c9acc18 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56109c9acdd0 <col:61>
|-FunctionDecl 0x56109c9ad248 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x56109c9ace38 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56109c9aceb8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x56109c9acfe8 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x56109c9ad0f0 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x56109c9ad308 <col:62>
|-FunctionDecl 0x56109c9ad528 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x56109c9ad370 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56109c9ad400 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x56109c9ad5d8 <line:222:22>
|-FunctionDecl 0x56109c9ad6d8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x56109c9ad640 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56109c9ad780 <col:65>
|-TypedefDecl 0x56109c9ad7f0 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x56109c937fd0 'unsigned long'
|-RecordDecl 0x56109c9ad848 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x56109c9ad990 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56109c9ad9f8 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56109c9adaa8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x56109c9ada50 'union pthread_attr_t' sugar
|   `-RecordType 0x56109c9ad8d0 'union pthread_attr_t'
|     `-Record 0x56109c9ad848 'pthread_attr_t'
|-RecordDecl 0x56109c9adb00 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x56109c9adc78 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x56109c9adcf0 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x56109c9adda0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x56109c9add40 'struct __pthread_internal_list' sugar
|   `-RecordType 0x56109c9adb80 'struct __pthread_internal_list'
|     `-Record 0x56109c9adb00 '__pthread_internal_list'
|-RecordDecl 0x56109c9ade10 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x56109c9adeb8 parent 0x56109c937e18 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x56109c9adf90 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56109c9adff8 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x56109c9ae060 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x56109c9b2110 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x56109c9b2178 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x56109c9b21e0 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x56109c9b2268 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x56109c9b2320 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x56109c9b2410 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x56109c9b2478 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56109c9b2600 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x56109c9b25a0 'union pthread_mutex_t' sugar
|   `-RecordType 0x56109c9ade90 'pthread_mutex_t'
|     `-Record 0x56109c9ade10 ''
|-RecordDecl 0x56109c9b2670 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x56109c9b27b0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56109c9b2818 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56109c9b28d0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x56109c9b2870 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x56109c9b26f0 'pthread_mutexattr_t'
|     `-Record 0x56109c9b2670 ''
|-RecordDecl 0x56109c9b2940 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x56109c9b29e8 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x56109c9b2ab0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56109c9b2b18 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x56109c9b2b80 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x56109c9b2be8 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x56109c9b2c50 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x56109c9b2cb8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x56109c9b2d20 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x56109c9b2d88 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x56109c9b2e40 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at ./split_7/safe032_rmo.oepc_false-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at ./split_7/safe032_rmo.oepc_false-unreach-call.i:259:3)'
| |-FieldDecl 0x56109c9b2f30 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x56109c9b2f98 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x56109c9b4130 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x56109c9b3070 'union pthread_cond_t' sugar
|   `-RecordType 0x56109c9b29c0 'pthread_cond_t'
|     `-Record 0x56109c9b2940 ''
|-RecordDecl 0x56109c9b41a0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x56109c9b42a0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56109c9b4308 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56109c9b43c0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x56109c9b4360 'union pthread_condattr_t' sugar
|   `-RecordType 0x56109c9b4220 'pthread_condattr_t'
|     `-Record 0x56109c9b41a0 ''
|-TypedefDecl 0x56109c9b4448 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x56109c937fb0 'unsigned int'
|-TypedefDecl 0x56109c9b44b8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x56109c937f10 'int'
|-RecordDecl 0x56109c9b4510 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x56109c9b45b8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x56109c9b4680 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56109c9b46e8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x56109c9b4750 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x56109c9b47b8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x56109c9b4820 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x56109c9b4888 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x56109c9b48f0 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x56109c9b4958 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x56109c9b49c0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x56109c9b4a28 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x56109c9b4a90 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x56109c9b4b40 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at ./split_7/safe032_rmo.oepc_false-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at ./split_7/safe032_rmo.oepc_false-unreach-call.i:282:3)'
| |-FieldDecl 0x56109c9b4be8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56109c9b4c50 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56109c9b4da0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x56109c9b4d40 'union pthread_rwlock_t' sugar
|   `-RecordType 0x56109c9b4590 'pthread_rwlock_t'
|     `-Record 0x56109c9b4510 ''
|-RecordDecl 0x56109c9b4e10 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x56109c9b4f50 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x56109c9b4fb8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56109c9b5070 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x56109c9b5010 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x56109c9b4e90 'pthread_rwlockattr_t'
|     `-Record 0x56109c9b4e10 ''
|-TypedefDecl 0x56109c9b6140 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x56109c937f14 'volatile int' volatile
|   `-BuiltinType 0x56109c937f10 'int'
|-RecordDecl 0x56109c9b6198 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x56109c9b62e0 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x56109c9b6348 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56109c9b6400 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x56109c9b63a0 'union pthread_barrier_t' sugar
|   `-RecordType 0x56109c9b6220 'pthread_barrier_t'
|     `-Record 0x56109c9b6198 ''
|-RecordDecl 0x56109c9b6470 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x56109c9b6570 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56109c9b65d8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56109c9b6690 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x56109c9b6630 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x56109c9b64f0 'pthread_barrierattr_t'
|     `-Record 0x56109c9b6470 ''
|-TypedefDecl 0x56109c9b67a8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x56109c9b6740 'long [8]' 8 
|   `-BuiltinType 0x56109c937f30 'long'
|-EnumDecl 0x56109c9b6800 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x56109c9b68c8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x56109c9b6918 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x56109c9b6968 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x56109c9b6a38 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x56109c9b6a88 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x56109c9b6ad8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x56109c9b6b28 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x56109c9b6bb0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x56109c9b6b98 <col:26> 'int'
| |   `-DeclRefExpr 0x56109c9b6b78 <col:26> 'int' EnumConstant 0x56109c9b6a38 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x56109c9b6c38 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x56109c9b6c20 <col:29> 'int'
| |   `-DeclRefExpr 0x56109c9b6c00 <col:29> 'int' EnumConstant 0x56109c9b6a88 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x56109c9b6cc0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x56109c9b6ca8 <col:30> 'int'
| |   `-DeclRefExpr 0x56109c9b6c88 <col:30> 'int' EnumConstant 0x56109c9b6ad8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x56109c9b6d48 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x56109c9b6d30 <col:27> 'int'
|     `-DeclRefExpr 0x56109c9b6d10 <col:27> 'int' EnumConstant 0x56109c9b6bb0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x56109c9b6d98 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x56109c9b6e68 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x56109c9b6ef0 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x56109c9b6ed8 <col:30> 'int'
| |   `-DeclRefExpr 0x56109c9b6eb8 <col:30> 'int' EnumConstant 0x56109c9b6e68 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x56109c9b6f40 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x56109c9b6fc8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x56109c9b6fb0 <col:29> 'int'
|     `-DeclRefExpr 0x56109c9b6f90 <col:29> 'int' EnumConstant 0x56109c9b6f40 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x56109c9b7018 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x56109c9b70e8 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x56109c9b7150 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x56109c9b71a0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x56109c9b71f0 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x56109c9b72b8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x56109c9b7308 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x56109c9b7358 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x56109c9b73e0 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x56109c9b73c8 <col:31> 'int'
|     `-DeclRefExpr 0x56109c9b73a8 <col:31> 'int' EnumConstant 0x56109c9b72b8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x56109c9b7430 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x56109c9b74f8 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x56109c9b7548 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x56109c9b7598 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x56109c9b7668 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x56109c9b76b8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x56109c9b7708 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x56109c9b77d8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x56109c9b7828 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x56109c9b7878 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x56109c9b7ab8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x56109c9b7b20 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x56109c9b7b88 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x56109c9b7ca8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x56109c9b7cf8 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x56109c9b7dc8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x56109c9b7e18 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x56109c9b7e68 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x56109c9b7f38 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x56109c9b7f88 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x56109c9b85b8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x56109c9b8080 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x56109c9b81a0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9b83a0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x56109c9b8420 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x56109c9b8678 <col:47>
| |-NonNullAttr 0x56109c9b86d0 <col:77, col:94> 1 3
| `-CallbackAttr 0x56109c9b8708 <line:386:12> Implicit 2 3
|-FunctionDecl 0x56109c9b8830 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x56109c9b8760 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x56109c9b8a88 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x56109c9b88e8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x56109c9b8968 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x56109c9b8c58 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x56109c9b8b48 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x56109c9b8d00 <col:60>
|-FunctionDecl 0x56109c9b8e50 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x56109c9b8ef0 <col:54>
| `-ConstAttr 0x56109c9b8f48 <col:95>
|-FunctionDecl 0x56109c9ba990 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x56109c9b8f80 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56109c9b8ff8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x56109c9baa40 <line:395:19>
| `-ConstAttr 0x56109c9baa98 <col:60>
|-FunctionDecl 0x56109c9bac68 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x56109c9bab30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x56109c9bad10 <col:71>
| `-NonNullAttr 0x56109c9bad68 <col:112, col:126> 1
|-FunctionDecl 0x56109c9bae70 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x56109c9badb8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x56109c9baf18 <line:398:22>
| `-NonNullAttr 0x56109c9baf70 <col:63, col:77> 1
|-FunctionDecl 0x56109c9bb198 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x56109c9bafb8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x56109c9bb038 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x56109c9bb248 <line:401:22>
| `-NonNullAttr 0x56109c9bb2a0 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9bb4a8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56109c9bb2e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56109c9bb368 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x56109c9bb558 <line:404:22>
| `-NonNullAttr 0x56109c9bb5b0 <col:63, col:77> 1
|-FunctionDecl 0x56109c9bb808 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x56109c9bb5f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x56109c9bb6a0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x56109c9bb8b8 <line:407:22>
| `-NonNullAttr 0x56109c9bb910 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9bcb68 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x56109c9bc9b0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56109c9bca28 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56109c9bcc18 <line:410:22>
| `-NonNullAttr 0x56109c9bcc70 <col:63, col:77> 1
|-FunctionDecl 0x56109c9bcea8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56109c9bccb8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9bcd48 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x56109c9bcf58 <line:413:22>
| `-NonNullAttr 0x56109c9bcfb0 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9bd1e8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56109c9bcff8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9bd088 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x56109c9bd298 <col:37>
| `-NonNullAttr 0x56109c9bd2f0 <col:78, col:95> 1 2
|-FunctionDecl 0x56109c9bd4d8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9bd338 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9bd3b8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x56109c9bd588 <line:419:22>
| `-NonNullAttr 0x56109c9bd5e0 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9bd768 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56109c9bd628 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56109c9bd6a8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x56109c9bd818 <line:421:22>
| `-NonNullAttr 0x56109c9bd870 <col:63, col:77> 1
|-FunctionDecl 0x56109c9bda38 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9bd8b8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9bd938 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x56109c9bdae8 <line:424:22>
| `-NonNullAttr 0x56109c9bdb40 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9bdcc8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56109c9bdb88 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56109c9bdc08 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x56109c9bdd78 <line:427:22>
| `-NonNullAttr 0x56109c9bddd0 <col:63, col:77> 1
|-FunctionDecl 0x56109c9bdf78 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9bde18 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9bde98 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x56109c9be028 <line:430:22>
| `-NonNullAttr 0x56109c9be080 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9be208 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56109c9be0c8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56109c9be148 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x56109c9be2b8 <line:432:22>
| `-NonNullAttr 0x56109c9be310 <col:63, col:77> 1
|-FunctionDecl 0x56109c9be538 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x56109c9be358 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9be3d8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x56109c9be5e8 <line:435:22>
| |-NonNullAttr 0x56109c9be640 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x56109c9be678 <col:100> "" ""
|-FunctionDecl 0x56109c9be888 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x56109c9be6c8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56109c9be748 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x56109c9be938 <line:438:22>
| |-NonNullAttr 0x56109c9be990 <col:63, col:77> 1
| `-DeprecatedAttr 0x56109c9be9d8 <col:97> "" ""
|-FunctionDecl 0x56109c9bebc8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x56109c9bea28 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9beaa0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x56109c9bec78 <line:441:22>
| `-NonNullAttr 0x56109c9becd0 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9bee50 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x56109c9bed18 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56109c9bed90 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56109c9bef00 <line:444:22>
| `-NonNullAttr 0x56109c9bef58 <col:63, col:77> 1
|-FunctionDecl 0x56109c9bf248 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x56109c9befa8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56109c9bf028 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x56109c9bf0a0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x56109c9bf300 <line:448:22>
| `-NonNullAttr 0x56109c9bf358 <col:63, col:83> 1 2 3
|-FunctionDecl 0x56109c9bf608 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x56109c9bf3b0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56109c9bf430 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x56109c9bf4a8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56109c9bf6c0 <col:43>
| `-NonNullAttr 0x56109c9bf718 <col:84, col:98> 1
|-FunctionDecl 0x56109c9bfa20 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x56109c9bf768 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56109c9bf7e8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x56109c9bf878 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x56109c9bfad8 <line:453:22>
| `-NonNullAttr 0x56109c9bfb30 <col:63, col:77> 3
|-FunctionDecl 0x56109c9bfe08 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56109c9bfb78 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56109c9bfbf8 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x56109c9bfc88 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x56109c9bfec0 <line:457:22>
| `-NonNullAttr 0x56109c9bff18 <col:63, col:80> 2 3
|-FunctionDecl 0x56109c9c0108 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x56109c9bff68 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56109c9bffe8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x56109c9c01b8 <line:459:22>
|-FunctionDecl 0x56109c9c0588 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x56109c9c0280 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x56109c9c0420 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x56109c9c0638 <col:52, col:69> 1 2
|-FunctionDecl 0x56109c9c07e0 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x56109c9c06c0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x56109c9c0740 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x56109c9c09f0 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x56109c9c08a8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x56109c9c0928 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x56109c9c0b48 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x56109c9c0ab0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x56109c9c0c88 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x56109c9c0d28 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x56109c9c0dd8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x56109c9c0ec8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x56109c9c0f30 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x56109c9c1100 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./split_7/safe032_rmo.oepc_false-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x56109c9c11f8 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x56109c9c12b0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x56109c9c1250 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x56109c9c0db0 '__pthread_unwind_buf_t'
| |   `-Record 0x56109c9c0d28 ''
| `-AlignedAttr 0x56109c9c1308 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x56109c9c1380 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x56109c9c14e0 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x56109c9c1548 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x56109c9c15b0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x56109c9c1618 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x56109c9c1820 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x56109c9c1710 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x56109c9c1a00 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x56109c9c18d8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x56109c9c1bc0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56109c9c1ab8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x56109c9c1c68 <line:488:22>
|-RecordDecl 0x56109c9c1cc0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x56109c9c1fd8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x56109c9c1e38 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x56109c9c1eb8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x56109c9c2088 <col:86>
| `-ReturnsTwiceAttr 0x56109c9c20e0 <col:12> Implicit
|-FunctionDecl 0x56109c9c2408 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56109c9c21b0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x56109c9c22c0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x56109c9c24b8 <line:494:22>
| `-NonNullAttr 0x56109c9c2510 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c2688 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56109c9c2558 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56109c9c2730 <line:496:22>
| `-NonNullAttr 0x56109c9c2788 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c2890 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56109c9c27d8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56109c9c2938 <line:498:22>
| `-NonNullAttr 0x56109c9c2990 <col:52, col:66> 1
|-FunctionDecl 0x56109c9c3ad8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56109c9c3a20 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56109c9c3b80 <line:500:22>
| `-NonNullAttr 0x56109c9c3bd8 <col:52, col:66> 1
|-FunctionDecl 0x56109c9c3e18 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56109c9c3c28 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56109c9c3cb8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56109c9c3ec8 <col:36>
| `-NonNullAttr 0x56109c9c3f20 <col:66, col:83> 1 2
|-FunctionDecl 0x56109c9c4020 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56109c9c3f68 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56109c9c40c8 <line:505:22>
| `-NonNullAttr 0x56109c9c4120 <col:52, col:66> 1
|-FunctionDecl 0x56109c9c43b8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9c41d0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56109c9c4250 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x56109c9c4468 <line:509:22>
| `-NonNullAttr 0x56109c9c44c0 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9c4788 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x56109c9c4508 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56109c9c4588 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x56109c9c4608 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x56109c9c4840 <line:513:22>
| `-NonNullAttr 0x56109c9c4898 <col:63, col:80> 1 3
|-FunctionDecl 0x56109c9c4a30 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56109c9c48e8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56109c9c4ad8 <line:515:22>
| `-NonNullAttr 0x56109c9c4b30 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c4d18 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56109c9c4be0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x56109c9c4dc0 <line:517:22>
| `-NonNullAttr 0x56109c9c4e18 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c4f20 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56109c9c4e68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x56109c9c4fc8 <line:519:22>
| `-NonNullAttr 0x56109c9c5020 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c5248 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9c5068 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56109c9c50e8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x56109c9c52f8 <line:523:22>
| `-NonNullAttr 0x56109c9c5350 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9c5558 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9c5398 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56109c9c5418 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x56109c9c5608 <line:526:22>
| `-NonNullAttr 0x56109c9c5660 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c5808 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9c56a8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56109c9c5728 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x56109c9c58b8 <line:529:22>
| `-NonNullAttr 0x56109c9c5910 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9c5b00 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9c5958 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56109c9c5a40 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x56109c9c5bb0 <line:531:22>
| `-NonNullAttr 0x56109c9c5c08 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c5db8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9c5c58 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56109c9c5cd8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x56109c9c5e68 <line:535:22>
| `-NonNullAttr 0x56109c9c5ec0 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9c6048 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9c5f08 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56109c9c5f88 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x56109c9c60f8 <line:538:22>
| `-NonNullAttr 0x56109c9c6150 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c62f8 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9c6198 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56109c9c6218 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x56109c9c63a8 <line:542:22>
| `-NonNullAttr 0x56109c9c6400 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9c6588 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9c6448 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56109c9c64c8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x56109c9c6638 <line:545:22>
| `-NonNullAttr 0x56109c9c6690 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c6878 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x56109c9c66d8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x56109c9c6758 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x56109c9c6928 <line:548:22>
| `-NonNullAttr 0x56109c9c6980 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9c7b38 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9c69c8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56109c9c7a78 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x56109c9c7be8 <line:551:22>
| `-NonNullAttr 0x56109c9c7c40 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c7f78 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x56109c9c7d20 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56109c9c7e30 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x56109c9c8028 <col:29>
| `-NonNullAttr 0x56109c9c8080 <col:70, col:84> 1
|-FunctionDecl 0x56109c9c81f8 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56109c9c80c8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56109c9c82a0 <line:556:22>
| `-NonNullAttr 0x56109c9c82f8 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c8400 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56109c9c8348 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56109c9c84a8 <line:558:22>
| `-NonNullAttr 0x56109c9c8500 <col:52, col:66> 1
|-FunctionDecl 0x56109c9c8600 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56109c9c8548 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56109c9c86a8 <line:560:19>
| `-NonNullAttr 0x56109c9c8700 <col:49, col:63> 1
|-FunctionDecl 0x56109c9c8938 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56109c9c8748 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56109c9c87d8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56109c9c89e8 <col:39>
| `-NonNullAttr 0x56109c9c8a70 <col:69, col:86> 1 2
|-FunctionDecl 0x56109c9c8b70 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56109c9c8ab8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56109c9c8c18 <line:565:22>
| `-NonNullAttr 0x56109c9c8c70 <col:52, col:66> 1
|-FunctionDecl 0x56109c9c8d70 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56109c9c8cb8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56109c9c8e18 <line:567:22>
| `-NonNullAttr 0x56109c9c8e70 <col:52, col:66> 1
|-FunctionDecl 0x56109c9c9028 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56109c9c8eb8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56109c9c8f48 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56109c9c90d8 <col:39>
| `-NonNullAttr 0x56109c9c9130 <col:69, col:86> 1 2
|-FunctionDecl 0x56109c9c9230 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56109c9c9178 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56109c9c92d8 <line:572:22>
| `-NonNullAttr 0x56109c9c9330 <col:52, col:66> 1
|-FunctionDecl 0x56109c9c9518 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x56109c9c93e0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x56109c9c95c0 <line:574:22>
| `-NonNullAttr 0x56109c9c9618 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c9720 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x56109c9c9668 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x56109c9c97c8 <line:576:22>
| `-NonNullAttr 0x56109c9c9820 <col:63, col:77> 1
|-FunctionDecl 0x56109c9c9a80 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9c9868 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x56109c9c98e8 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x56109c9c9b30 <line:580:22>
| `-NonNullAttr 0x56109c9c9b88 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9c9d98 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9c9bd8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x56109c9c9c58 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x56109c9c9e48 <line:583:22>
| `-NonNullAttr 0x56109c9c9ea0 <col:63, col:77> 1
|-FunctionDecl 0x56109c9ca048 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9c9ee8 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x56109c9c9f68 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x56109c9ca0f8 <line:587:22>
| `-NonNullAttr 0x56109c9ca150 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9ca2d8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9ca198 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x56109c9ca218 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x56109c9ca388 <col:36>
| `-NonNullAttr 0x56109c9ca3e0 <col:77, col:91> 1
|-FunctionDecl 0x56109c9ca718 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x56109c9ca4c0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56109c9ca5d0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x56109c9ca7c8 <line:592:22>
| `-NonNullAttr 0x56109c9ca820 <col:63, col:77> 1
|-FunctionDecl 0x56109c9ca998 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56109c9ca868 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56109c9caa40 <line:594:22>
| `-NonNullAttr 0x56109c9caac0 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cabc0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56109c9cab08 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56109c9cac68 <line:596:22>
| `-NonNullAttr 0x56109c9cacc0 <col:52, col:66> 1
|-FunctionDecl 0x56109c9cadc0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56109c9cad08 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56109c9cae68 <line:598:22>
| `-NonNullAttr 0x56109c9caec0 <col:52, col:66> 1
|-FunctionDecl 0x56109c9cb0e8 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x56109c9caf08 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56109c9caf80 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x56109c9cb198 <line:601:22, col:39> 1 2
|-FunctionDecl 0x56109c9cb4c8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56109c9cb218 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56109c9cb290 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56109c9cb320 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x56109c9cb580 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x56109c9cb798 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x56109c9cb660 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x56109c9cb840 <line:607:22>
| `-NonNullAttr 0x56109c9cb898 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cb9a0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x56109c9cb8e8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x56109c9cba48 <line:609:22>
| `-NonNullAttr 0x56109c9cbad0 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cbcf8 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9cbb18 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x56109c9cbb98 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x56109c9cbda8 <line:613:22>
| `-NonNullAttr 0x56109c9cbe00 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9cc008 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9cbe48 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x56109c9cbec8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x56109c9cc0b8 <col:37>
| `-NonNullAttr 0x56109c9cc110 <col:78, col:92> 1
|-FunctionDecl 0x56109c9cc328 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x56109c9cc158 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x56109c9cc200 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x56109c9cc3d8 <line:619:22>
| `-NonNullAttr 0x56109c9cc430 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9cc5f8 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x56109c9cc478 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x56109c9cc4f0 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x56109c9cc6a8 <line:622:22>
| `-NonNullAttr 0x56109c9cc700 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cc9a8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x56109c9cc7e0 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x56109c9cc860 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x56109c9cca58 <line:624:22>
| `-NonNullAttr 0x56109c9ccae0 <col:63, col:77> 1
|-FunctionDecl 0x56109c9ccc58 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56109c9ccb28 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56109c9ccd00 <line:626:22>
| `-NonNullAttr 0x56109c9ccd58 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cce60 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56109c9ccda8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56109c9ccf08 <line:628:22>
| `-NonNullAttr 0x56109c9ccf60 <col:52, col:66> 1
|-FunctionDecl 0x56109c9cd060 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56109c9ccfa8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56109c9cd108 <line:630:22>
| `-NonNullAttr 0x56109c9cd160 <col:52, col:66> 1
|-FunctionDecl 0x56109c9cd260 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56109c9cd1a8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56109c9cd308 <line:632:22>
| `-NonNullAttr 0x56109c9cd360 <col:52, col:66> 1
|-FunctionDecl 0x56109c9cd738 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x56109c9cd440 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x56109c9cd550 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x56109c9cd5d0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x56109c9cd7f0 <line:636:22>
| `-NonNullAttr 0x56109c9cd848 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cd9c8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x56109c9cd898 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x56109c9cda70 <line:638:22>
| `-NonNullAttr 0x56109c9ceb00 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cec00 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x56109c9ceb48 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x56109c9ceca8 <line:640:22>
| `-NonNullAttr 0x56109c9ced00 <col:52, col:66> 1
|-FunctionDecl 0x56109c9ceee8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x56109c9cedb0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x56109c9cef90 <line:642:22>
| `-NonNullAttr 0x56109c9cefe8 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cf0f0 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x56109c9cf038 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x56109c9cf198 <line:644:22>
| `-NonNullAttr 0x56109c9cf1f0 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cf418 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56109c9cf238 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x56109c9cf2b8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x56109c9cf4c8 <line:648:22>
| `-NonNullAttr 0x56109c9cf520 <col:63, col:80> 1 2
|-FunctionDecl 0x56109c9cf728 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x56109c9cf568 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x56109c9cf5e8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x56109c9cf7d8 <line:651:22>
| `-NonNullAttr 0x56109c9cf830 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cfb98 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x56109c9cf910 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x56109c9cfa30 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x56109c9cfc48 <line:654:22>
| `-NonNullAttr 0x56109c9cfca0 <col:63, col:77> 1
|-FunctionDecl 0x56109c9cfdf8 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x56109c9cfce8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x56109c9cfea0 <col:69>
|-FunctionDecl 0x56109c9d0018 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x56109c9cff08 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x56109c9d00c0 <col:72>
|-FunctionDecl 0x56109c9d02f8 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x56109c9d0128 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x56109c9d01d8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x56109c9d03a8 <col:44>
|-FunctionDecl 0x56109c9d05c8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x56109c9d0410 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56109c9d0488 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x56109c9d0678 <line:661:22>
| `-NonNullAttr 0x56109c9d06d0 <col:63, col:77> 2
|-FunctionDecl 0x56109c9d0b30 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x56109c9d07b0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x56109c9d08c0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x56109c9d09d0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x56109c9d0be8 <col:47>
|-FunctionDecl 0x56109c9d0cf0 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x56109c9d0c58 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56109c9d0e48 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x56109c9d0db0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56109c9d0fa0 <line:668:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x56109c9d0f08 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56109c9d1068 <line:669:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x56109c9d1128 <line:670:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x56109c9d11e8 <line:671:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x56109c9d12a0 <line:672:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x56109c9d1320 prev 0x56109c9d12a0 <line:673:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x56109c9d1388 <col:24> 'int' 0
|-VarDecl 0x56109c9d13c0 <line:674:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x56109c9d1440 prev 0x56109c9d13c0 <line:675:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x56109c9d14a8 <col:27> 'int' 0
|-VarDecl 0x56109c9d14e0 <line:676:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x56109c9d1560 prev 0x56109c9d14e0 <line:677:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x56109c9d15c8 <col:27> 'int' 0
|-VarDecl 0x56109c9d15f8 <line:678:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x56109c9d1670 <line:679:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x56109c9d16f0 <line:680:1, col:5> col:5 used x 'int'
|-VarDecl 0x56109c9d1770 prev 0x56109c9d16f0 <line:681:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x56109c9d17d8 <col:9> 'int' 0
|-VarDecl 0x56109c9d1808 <line:682:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x56109c9d1888 <line:683:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x56109c9d1900 <line:684:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x56109c9d1978 <line:685:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x56109c9d19f0 <line:686:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x56109c9d1a68 <line:687:1, col:7> col:7 used x$r_buff0_thd3 '_Bool'
|-VarDecl 0x56109c9d1b00 <line:688:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x56109c9d1b78 <line:689:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x56109c9d1bf0 <line:690:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x56109c9d1c68 <line:691:1, col:7> col:7 used x$r_buff1_thd3 '_Bool'
|-VarDecl 0x56109c9d1ce0 <line:692:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x56109c9d1d60 <line:693:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x56109c9d1de0 <line:694:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x56109c9d1e58 <line:695:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x56109c9d1ed8 <line:696:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x56109c9d1f50 <line:697:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x56109c9d1fd0 <line:698:1, col:5> col:5 used y 'int'
|-VarDecl 0x56109c9d2050 prev 0x56109c9d1fd0 <line:699:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x56109c9d20b8 <col:9> 'int' 0
|-VarDecl 0x56109c9d20e8 <line:700:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x56109c9d2160 <line:701:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x56109c9d2278 prev 0x56109c9d0cf0 <line:702:1, line:731:1> line:702:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x56109c9d21e0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56109c9d5298 <line:703:1, line:731:1>
|   |-CallExpr 0x56109c9d2388 <line:704:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d2370 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d2320 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9d23e8 <line:705:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56109c9d23a8 <col:3> 'int' lvalue Var 0x56109c9d2050 'y' 'int'
|   | `-IntegerLiteral 0x56109c9d23c8 <col:7> 'int' 2
|   |-CallExpr 0x56109c9d2440 <line:706:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d2428 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d2408 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9d2498 <line:707:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d2480 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d2460 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x56109c9d24f0 <line:708:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d24d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d24b8 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9d2548 <line:709:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d2530 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d2510 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9d2618 <line:710:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d2568 <col:3> '_Bool' lvalue Var 0x56109c9d20e8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x56109c9d25f8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56109c9d25e0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56109c9d2588 <col:19> '_Bool (void)' Function 0x56109c977770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56109c9d26b0 <line:711:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d2638 <col:3> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x56109c9d2690 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56109c9d2678 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56109c9d2658 <col:19> '_Bool (void)' Function 0x56109c977770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56109c9d2728 <line:712:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d26d0 <col:3> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d2710 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9d26f0 <col:21> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x56109c9d27a0 <line:713:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56109c9d2748 <col:3> 'int' lvalue Var 0x56109c9d1888 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x56109c9d2788 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9d2768 <col:15> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9d2bf8 <line:714:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x56109c9d27c0 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   | `-ConditionalOperator 0x56109c9d2bc8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x56109c9d29d0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x56109c9d28f0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x56109c9d2818 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x56109c9d2800 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x56109c9d27e0 <col:8> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x56109c9d28d0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x56109c9d2868 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x56109c9d2850 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x56109c9d2830 <col:27> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x56109c9d28b8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x56109c9d28a0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x56109c9d2880 <col:46> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x56109c9d29b0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x56109c9d2948 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x56109c9d2930 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x56109c9d2910 <col:65> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x56109c9d2998 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x56109c9d2980 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x56109c9d2960 <col:84> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d2bb0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d29f0 <col:101> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |   `-ParenExpr 0x56109c9d2b90 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x56109c9d2b60 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x56109c9d2ab0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56109c9d2a68 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56109c9d2a50 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56109c9d2a10 <col:106> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56109c9d2a98 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56109c9d2a80 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56109c9d2a30 <col:124> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9d2b30 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9d2ad0 <col:141> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x56109c9d2b48 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d2b10 <col:153> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56109c9d3108 <line:715:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56109c9d2c18 <col:3> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x56109c9d30d8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56109c9d30a8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56109c9d3090 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56109c9d2c38 <col:15> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d30c0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d2c58 <col:31> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56109c9d3070 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56109c9d3040 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56109c9d2e68 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56109c9d2d88 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56109c9d2cb0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56109c9d2c98 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56109c9d2c78 <col:45> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56109c9d2d68 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56109c9d2d00 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56109c9d2ce8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56109c9d2cc8 <col:64> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x56109c9d2d50 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56109c9d2d38 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56109c9d2d18 <col:83> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56109c9d2e48 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56109c9d2de0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56109c9d2dc8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56109c9d2da8 <col:102> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x56109c9d2e30 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56109c9d2e18 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56109c9d2df8 <col:121> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9d3028 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9d2e88 <col:138> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x56109c9d3008 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56109c9d2fd8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56109c9d2f48 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56109c9d2f00 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56109c9d2ee8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56109c9d2ea8 <col:151> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56109c9d2f30 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56109c9d2f18 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56109c9d2ec8 <col:169> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x56109c9d2fa8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56109c9d2f68 <col:186> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x56109c9d2fc0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56109c9d2f88 <col:198> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x56109c9d3618 <line:716:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56109c9d3128 <col:3> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x56109c9d35e8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56109c9d35b8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56109c9d35a0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56109c9d3148 <col:15> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d35d0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d3168 <col:31> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x56109c9d3580 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56109c9d3550 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56109c9d3378 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56109c9d3298 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56109c9d31c0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56109c9d31a8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56109c9d3188 <col:45> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56109c9d3278 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56109c9d3210 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56109c9d31f8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56109c9d31d8 <col:64> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x56109c9d3260 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56109c9d3248 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56109c9d3228 <col:83> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56109c9d3358 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56109c9d32f0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56109c9d32d8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56109c9d32b8 <col:102> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x56109c9d3340 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56109c9d3328 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56109c9d3308 <col:121> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9d3538 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9d3398 <col:138> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x56109c9d3518 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56109c9d34e8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56109c9d3458 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56109c9d3410 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56109c9d33f8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56109c9d33b8 <col:151> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56109c9d3440 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56109c9d3428 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56109c9d33d8 <col:169> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x56109c9d34b8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56109c9d3478 <col:186> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x56109c9d34d0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56109c9d3498 <col:198> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56109c9d3be8 <line:717:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d3638 <col:3> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d3bd0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d3ba0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56109c9d3b58 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d3b40 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d3658 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d3b88 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d3b70 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d3678 <col:36> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x56109c9d3b20 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56109c9d3ac8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56109c9d3888 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56109c9d37a8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56109c9d36d0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56109c9d36b8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56109c9d3698 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56109c9d3788 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56109c9d3720 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56109c9d3708 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56109c9d36e8 <col:74> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x56109c9d3770 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56109c9d3758 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56109c9d3738 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56109c9d3868 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56109c9d3800 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56109c9d37e8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56109c9d37c8 <col:112> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x56109c9d3850 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56109c9d3838 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56109c9d3818 <col:131> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x56109c9d3ab0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56109c9d3a98 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56109c9d38a8 <col:148> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x56109c9d3a78 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56109c9d3a48 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56109c9d3968 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56109c9d3920 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56109c9d3908 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56109c9d38c8 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56109c9d3950 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56109c9d3938 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56109c9d38e8 <col:184> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x56109c9d3a00 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56109c9d39b8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56109c9d3988 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56109c9d3a30 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56109c9d3a18 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56109c9d39e0 <col:212> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56109c9d41b0 <line:718:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d3c08 <col:3> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d4198 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d4168 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56109c9d4120 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d4108 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d3c28 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d4150 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d4138 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d3c48 <col:36> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x56109c9d40e8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56109c9d40b8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56109c9d3e58 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56109c9d3d78 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56109c9d3ca0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56109c9d3c88 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56109c9d3c68 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56109c9d3d58 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56109c9d3cf0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56109c9d3cd8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56109c9d3cb8 <col:74> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x56109c9d3d40 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56109c9d3d28 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56109c9d3d08 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56109c9d3e38 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56109c9d3dd0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56109c9d3db8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56109c9d3d98 <col:112> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x56109c9d3e20 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56109c9d3e08 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56109c9d3de8 <col:131> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x56109c9d40a0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56109c9d4088 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56109c9d3e78 <col:148> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x56109c9d4068 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56109c9d4038 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56109c9d3f38 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56109c9d3ef0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56109c9d3ed8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56109c9d3e98 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56109c9d3f20 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56109c9d3f08 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56109c9d3eb8 <col:184> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x56109c9d4008 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56109c9d3f88 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56109c9d3f58 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56109c9d4020 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56109c9d3fe0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56109c9d3fb0 <col:219> 'int' 0
|   |-BinaryOperator 0x56109c9d4758 <line:719:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d41d0 <col:3> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d4740 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d4710 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56109c9d46c8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d46b0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d41f0 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d46f8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d46e0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d4210 <col:36> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x56109c9d4690 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56109c9d4660 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56109c9d4420 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56109c9d4340 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56109c9d4268 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56109c9d4250 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56109c9d4230 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56109c9d4320 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56109c9d42b8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56109c9d42a0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56109c9d4280 <col:74> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x56109c9d4308 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56109c9d42f0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56109c9d42d0 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56109c9d4400 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56109c9d4398 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56109c9d4380 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56109c9d4360 <col:112> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x56109c9d43e8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56109c9d43d0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56109c9d43b0 <col:131> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x56109c9d4648 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56109c9d4630 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56109c9d4440 <col:148> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x56109c9d4610 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56109c9d45e0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56109c9d4500 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56109c9d44b8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56109c9d44a0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56109c9d4460 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56109c9d44e8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56109c9d44d0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56109c9d4480 <col:184> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x56109c9d4598 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56109c9d4550 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56109c9d4520 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56109c9d45c8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56109c9d45b0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56109c9d4578 <col:212> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56109c9d4d30 <line:720:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d4778 <col:3> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d4d18 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d4ce8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56109c9d4ca0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d4c88 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d4798 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d4cd0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d4cb8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d47b8 <col:36> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x56109c9d4c68 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56109c9d4c38 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56109c9d49c8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56109c9d48e8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56109c9d4810 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56109c9d47f8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56109c9d47d8 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56109c9d48c8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56109c9d4860 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56109c9d4848 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56109c9d4828 <col:74> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x56109c9d48b0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56109c9d4898 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56109c9d4878 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56109c9d49a8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56109c9d4940 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56109c9d4928 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56109c9d4908 <col:112> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x56109c9d4990 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56109c9d4978 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56109c9d4958 <col:131> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x56109c9d4c20 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56109c9d4c08 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56109c9d49e8 <col:148> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x56109c9d4be8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56109c9d4bb8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56109c9d4aa8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56109c9d4a60 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56109c9d4a48 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56109c9d4a08 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56109c9d4a90 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56109c9d4a78 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56109c9d4a28 <col:184> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x56109c9d4b88 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56109c9d4af8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56109c9d4ac8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56109c9d4ba0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56109c9d4b60 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56109c9d4b30 <col:219> 'int' 0
|   |-BinaryOperator 0x56109c9d4da8 <line:721:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56109c9d4d50 <col:3> 'int' lvalue Var 0x56109c9d1440 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x56109c9d4d90 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9d4d70 <col:25> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9d4ed8 <line:722:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x56109c9d4dc8 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   | `-ConditionalOperator 0x56109c9d4ea8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x56109c9d4e60 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56109c9d4e48 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56109c9d4de8 <col:7> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d4e78 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d4e08 <col:25> 'int' lvalue Var 0x56109c9d1888 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x56109c9d4e90 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x56109c9d4e28 <col:37> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9d4f70 <line:723:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d4ef8 <col:3> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x56109c9d4f48 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56109c9d4f18 <col:28> 'int' 0
|   |-CallExpr 0x56109c9d4fc8 <line:724:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d4fb0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d4f90 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9d5020 <line:725:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d5008 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d4fe8 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x56109c9d5078 <line:726:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d5060 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d5040 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9d50d0 <line:727:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d50b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d5098 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9d5188 <line:728:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56109c9d50f0 <col:3> 'int' lvalue Var 0x56109c9d1320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56109c9d5168 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56109c9d5150 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d5110 <col:22> 'int' lvalue Var 0x56109c9d1320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56109c9d5130 <col:41> 'int' 1
|   |-CallExpr 0x56109c9d51e0 <line:729:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d51c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d51a8 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56109c9d5288 <line:730:3, col:36>
|     `-CallExpr 0x56109c9d5268 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56109c9d5250 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56109c9d5200 <col:10> 'void *(void)' Function 0x56109c977ab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56109c9d5430 prev 0x56109c9d0e48 <line:732:1, line:771:1> line:732:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x56109c9d5398 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56109c9d9d70 <line:733:1, line:771:1>
|   |-CallExpr 0x56109c9d5510 <line:734:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d54f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d54d8 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9d5570 <line:735:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56109c9d5530 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   | `-IntegerLiteral 0x56109c9d5550 <col:7> 'int' 1
|   |-CallExpr 0x56109c9d55c8 <line:736:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d55b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d5590 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9d5620 <line:737:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d5608 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d55e8 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9d5908 <line:738:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56109c9d5640 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   | `-ConditionalOperator 0x56109c9d58d8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56109c9d5700 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56109c9d56b8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56109c9d56a0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56109c9d5660 <col:7> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56109c9d56e8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56109c9d56d0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56109c9d5680 <col:25> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d58c0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d5720 <col:42> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56109c9d58a0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56109c9d5870 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56109c9d57e0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56109c9d5798 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56109c9d5780 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56109c9d5740 <col:55> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56109c9d57c8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56109c9d57b0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56109c9d5760 <col:73> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9d5840 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9d5800 <col:90> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56109c9d5858 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d5820 <col:102> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9d5b10 <line:739:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d5928 <col:3> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d5af8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d5ac8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56109c9d59e8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56109c9d59a0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56109c9d5988 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56109c9d5948 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56109c9d59d0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56109c9d59b8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56109c9d5968 <col:38> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d5a80 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9d5a38 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9d5a08 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9d5ab0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9d5a98 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d5a60 <col:66> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56109c9d5e08 <line:740:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d5b40 <col:3> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d5df0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d5dc0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56109c9d5ce0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56109c9d5c00 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56109c9d5bb8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56109c9d5ba0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56109c9d5b60 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56109c9d5be8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56109c9d5bd0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56109c9d5b80 <col:38> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56109c9d5cc0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56109c9d5c78 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56109c9d5c60 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56109c9d5c20 <col:56> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56109c9d5ca8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56109c9d5c90 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56109c9d5c40 <col:74> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d5d78 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9d5d30 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9d5d00 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9d5da8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9d5d90 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d5d58 <col:102> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56109c9d6010 <line:741:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d5e28 <col:3> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d5ff8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d5fc8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56109c9d5ee8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56109c9d5ea0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56109c9d5e88 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56109c9d5e48 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56109c9d5ed0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56109c9d5eb8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56109c9d5e68 <col:38> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d5f80 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9d5f38 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9d5f08 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9d5fb0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9d5f98 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d5f60 <col:66> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56109c9d62f8 <line:742:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d6030 <col:3> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d62e0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d62b0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56109c9d61d0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56109c9d60f0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56109c9d60a8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56109c9d6090 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56109c9d6050 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56109c9d60d8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56109c9d60c0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56109c9d6070 <col:38> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56109c9d61b0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56109c9d6168 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56109c9d6150 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56109c9d6110 <col:56> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56109c9d6198 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56109c9d6180 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56109c9d6130 <col:74> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d6268 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9d6220 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9d61f0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9d6298 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9d6280 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d6248 <col:102> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x56109c9d6350 <line:743:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d6338 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d6318 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9d63a8 <line:744:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d6390 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d6370 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9d6440 <line:745:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d63c8 <col:3> '_Bool' lvalue Var 0x56109c9d20e8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x56109c9d6420 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56109c9d6408 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56109c9d63e8 <col:19> '_Bool (void)' Function 0x56109c977770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56109c9d64d8 <line:746:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d6460 <col:3> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x56109c9d64b8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x56109c9d64a0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x56109c9d6480 <col:19> '_Bool (void)' Function 0x56109c977770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x56109c9d6550 <line:747:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d64f8 <col:3> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d6538 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9d6518 <col:21> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x56109c9d65c8 <line:748:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56109c9d6570 <col:3> 'int' lvalue Var 0x56109c9d1888 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x56109c9d65b0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9d6590 <col:15> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9d6a00 <line:749:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x56109c9d65e8 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   | `-ConditionalOperator 0x56109c9d69d0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x56109c9d67f8 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x56109c9d6718 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x56109c9d6640 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x56109c9d6628 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x56109c9d6608 <col:8> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x56109c9d66f8 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x56109c9d6690 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x56109c9d6678 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x56109c9d6658 <col:27> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x56109c9d66e0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x56109c9d66c8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x56109c9d66a8 <col:46> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x56109c9d67d8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x56109c9d6770 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x56109c9d6758 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x56109c9d6738 <col:65> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x56109c9d67c0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x56109c9d67a8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x56109c9d6788 <col:84> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d69b8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d6818 <col:101> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |   `-ParenExpr 0x56109c9d6998 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x56109c9d6968 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x56109c9d68d8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56109c9d6890 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56109c9d6878 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56109c9d6838 <col:106> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56109c9d68c0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56109c9d68a8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56109c9d6858 <col:124> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9d6938 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9d68f8 <col:141> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x56109c9d6950 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d6918 <col:153> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56109c9d6f20 <line:750:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56109c9d6a20 <col:3> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x56109c9d6ef0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56109c9d6ec0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56109c9d6ea8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56109c9d6a40 <col:15> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d6ed8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d6a60 <col:31> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56109c9d6e88 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56109c9d6e58 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56109c9d6c80 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56109c9d6ba0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56109c9d6ab8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56109c9d6aa0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56109c9d6a80 <col:45> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56109c9d6b80 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56109c9d6b08 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56109c9d6af0 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56109c9d6ad0 <col:64> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x56109c9d6b68 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56109c9d6b50 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56109c9d6b20 <col:83> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56109c9d6c60 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56109c9d6bf8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56109c9d6be0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56109c9d6bc0 <col:102> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x56109c9d6c48 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56109c9d6c30 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56109c9d6c10 <col:121> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9d6e40 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9d6ca0 <col:138> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x56109c9d6e20 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56109c9d6df0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56109c9d6d60 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56109c9d6d18 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56109c9d6d00 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56109c9d6cc0 <col:151> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56109c9d6d48 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56109c9d6d30 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56109c9d6ce0 <col:169> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x56109c9d6dc0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56109c9d6d80 <col:186> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x56109c9d6dd8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56109c9d6da0 <col:198> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x56109c9d7430 <line:751:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56109c9d6f40 <col:3> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x56109c9d7400 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56109c9d73d0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56109c9d73b8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56109c9d6f60 <col:15> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d73e8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d6f80 <col:31> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x56109c9d7398 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56109c9d7368 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56109c9d7190 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56109c9d70b0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56109c9d6fd8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56109c9d6fc0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56109c9d6fa0 <col:45> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56109c9d7090 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56109c9d7028 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56109c9d7010 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56109c9d6ff0 <col:64> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x56109c9d7078 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56109c9d7060 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56109c9d7040 <col:83> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56109c9d7170 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56109c9d7108 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56109c9d70f0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56109c9d70d0 <col:102> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x56109c9d7158 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56109c9d7140 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56109c9d7120 <col:121> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9d7350 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9d71b0 <col:138> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x56109c9d7330 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56109c9d7300 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56109c9d7270 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56109c9d7228 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56109c9d7210 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56109c9d71d0 <col:151> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56109c9d7258 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56109c9d7240 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56109c9d71f0 <col:169> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x56109c9d72d0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56109c9d7290 <col:186> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x56109c9d72e8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56109c9d72b0 <col:198> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56109c9d79d8 <line:752:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d7450 <col:3> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d79c0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d7990 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56109c9d7948 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d7930 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d7470 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d7978 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d7960 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d7490 <col:36> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x56109c9d7910 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56109c9d78e0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56109c9d76a0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56109c9d75c0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56109c9d74e8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56109c9d74d0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56109c9d74b0 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56109c9d75a0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56109c9d7538 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56109c9d7520 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56109c9d7500 <col:74> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56109c9d7588 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56109c9d7570 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56109c9d7550 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56109c9d7680 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56109c9d7618 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56109c9d7600 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56109c9d75e0 <col:112> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56109c9d7668 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56109c9d7650 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56109c9d7630 <col:131> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56109c9d78c8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56109c9d78b0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56109c9d76c0 <col:148> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x56109c9d7890 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56109c9d7860 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56109c9d7780 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56109c9d7738 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56109c9d7720 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56109c9d76e0 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56109c9d7768 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56109c9d7750 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56109c9d7700 <col:184> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56109c9d7818 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56109c9d77d0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56109c9d77a0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56109c9d7848 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56109c9d7830 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56109c9d77f8 <col:212> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56109c9d7fb8 <line:753:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d79f8 <col:3> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d7fa0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d7f70 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56109c9d7f28 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d7f10 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d7a18 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d7f58 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d7f40 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d7a38 <col:36> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x56109c9d7ef0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56109c9d7ec0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56109c9d7c60 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56109c9d7b80 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56109c9d7a90 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56109c9d7a78 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56109c9d7a58 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56109c9d7b60 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56109c9d7ae0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56109c9d7ac8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56109c9d7aa8 <col:74> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56109c9d7b30 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56109c9d7b18 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56109c9d7af8 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56109c9d7c40 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56109c9d7bd8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56109c9d7bc0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56109c9d7ba0 <col:112> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56109c9d7c28 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56109c9d7c10 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56109c9d7bf0 <col:131> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56109c9d7ea8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56109c9d7e90 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56109c9d7c80 <col:148> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x56109c9d7e70 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56109c9d7e40 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56109c9d7d40 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56109c9d7cf8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56109c9d7ce0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56109c9d7ca0 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56109c9d7d28 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56109c9d7d10 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56109c9d7cc0 <col:184> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56109c9d7e10 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56109c9d7d90 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56109c9d7d60 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56109c9d7e28 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56109c9d7de8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56109c9d7db8 <col:219> 'int' 0
|   |-BinaryOperator 0x56109c9d8560 <line:754:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d7fd8 <col:3> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d8548 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d8518 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56109c9d84d0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d84b8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d7ff8 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d8500 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d84e8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d8018 <col:36> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x56109c9d8498 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56109c9d8468 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56109c9d8228 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56109c9d8148 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56109c9d8070 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56109c9d8058 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56109c9d8038 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56109c9d8128 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56109c9d80c0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56109c9d80a8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56109c9d8088 <col:74> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56109c9d8110 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56109c9d80f8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56109c9d80d8 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56109c9d8208 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56109c9d81a0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56109c9d8188 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56109c9d8168 <col:112> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56109c9d81f0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56109c9d81d8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56109c9d81b8 <col:131> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56109c9d8450 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56109c9d8438 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56109c9d8248 <col:148> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x56109c9d8418 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56109c9d83e8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56109c9d8308 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56109c9d82c0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56109c9d82a8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56109c9d8268 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56109c9d82f0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56109c9d82d8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56109c9d8288 <col:184> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56109c9d83a0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56109c9d8358 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56109c9d8328 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56109c9d83d0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56109c9d83b8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56109c9d8380 <col:212> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56109c9d8b28 <line:755:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d8580 <col:3> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d8b10 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d8ae0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56109c9d8a98 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d8a80 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d85a0 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d8ac8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56109c9d8ab0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56109c9d85c0 <col:36> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x56109c9d8a60 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56109c9d8a30 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56109c9d87d0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56109c9d86f0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56109c9d8618 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56109c9d8600 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56109c9d85e0 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56109c9d86d0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56109c9d8668 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56109c9d8650 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56109c9d8630 <col:74> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56109c9d86b8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56109c9d86a0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56109c9d8680 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56109c9d87b0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56109c9d8748 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56109c9d8730 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56109c9d8710 <col:112> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56109c9d8798 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56109c9d8780 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56109c9d8760 <col:131> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56109c9d8a18 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56109c9d8a00 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56109c9d87f0 <col:148> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x56109c9d89e0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56109c9d89b0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56109c9d88b0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56109c9d8868 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56109c9d8850 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56109c9d8810 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56109c9d8898 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56109c9d8880 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56109c9d8830 <col:184> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56109c9d8980 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56109c9d8900 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56109c9d88d0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56109c9d8998 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56109c9d8958 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56109c9d8928 <col:219> 'int' 0
|   |-BinaryOperator 0x56109c9d8bc8 <line:756:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56109c9d8b70 <col:3> 'int' lvalue Var 0x56109c9d1560 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x56109c9d8bb0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9d8b90 <col:25> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9d8cf8 <line:757:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x56109c9d8be8 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   | `-ConditionalOperator 0x56109c9d8cc8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x56109c9d8c80 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56109c9d8c68 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56109c9d8c08 <col:7> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d8c98 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d8c28 <col:25> 'int' lvalue Var 0x56109c9d1888 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x56109c9d8cb0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x56109c9d8c48 <col:37> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9d8d90 <line:758:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d8d18 <col:3> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x56109c9d8d68 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56109c9d8d38 <col:28> 'int' 0
|   |-CallExpr 0x56109c9d8de8 <line:759:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d8dd0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d8db0 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9d8e40 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d8e28 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d8e08 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9d9128 <line:761:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56109c9d8e60 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   | `-ConditionalOperator 0x56109c9d90f8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56109c9d8f20 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56109c9d8ed8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56109c9d8ec0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56109c9d8e80 <col:7> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56109c9d8f08 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56109c9d8ef0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56109c9d8ea0 <col:25> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9d90e0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d8f40 <col:42> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56109c9d90c0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56109c9d9090 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56109c9d9000 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56109c9d8fb8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56109c9d8fa0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56109c9d8f60 <col:55> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56109c9d8fe8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56109c9d8fd0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56109c9d8f80 <col:73> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9d9060 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9d9020 <col:90> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56109c9d9078 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d9040 <col:102> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9d9330 <line:762:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d9148 <col:3> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d9318 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d92e8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56109c9d9208 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56109c9d91c0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56109c9d91a8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56109c9d9168 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56109c9d91f0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56109c9d91d8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56109c9d9188 <col:38> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d92a0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9d9258 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9d9228 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9d92d0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9d92b8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d9280 <col:66> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56109c9d9618 <line:763:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d9350 <col:3> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d9600 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d95d0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56109c9d94f0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56109c9d9410 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56109c9d93c8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56109c9d93b0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56109c9d9370 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56109c9d93f8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56109c9d93e0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56109c9d9390 <col:38> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56109c9d94d0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56109c9d9488 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56109c9d9470 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56109c9d9430 <col:56> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56109c9d94b8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56109c9d94a0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56109c9d9450 <col:74> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d9588 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9d9540 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9d9510 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9d95b8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9d95a0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d9568 <col:102> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56109c9d9820 <line:764:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d9638 <col:3> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d9808 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d97d8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56109c9d96f8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56109c9d96b0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56109c9d9698 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56109c9d9658 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56109c9d96e0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56109c9d96c8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56109c9d9678 <col:38> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d9790 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9d9748 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9d9718 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9d97c0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9d97a8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d9770 <col:66> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56109c9d9b08 <line:765:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9d9840 <col:3> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9d9af0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9d9ac0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56109c9d99e0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56109c9d9900 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56109c9d98b8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56109c9d98a0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56109c9d9860 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56109c9d98e8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56109c9d98d0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56109c9d9880 <col:38> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56109c9d99c0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56109c9d9978 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56109c9d9960 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56109c9d9920 <col:56> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56109c9d99a8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56109c9d9990 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56109c9d9940 <col:74> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9d9a78 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9d9a30 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9d9a00 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9d9aa8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9d9a90 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9d9a58 <col:102> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x56109c9d9b80 <line:766:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d9b48 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d9b28 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9d9bd8 <line:767:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9d9bc0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d9ba0 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9d9c90 <line:768:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56109c9d9bf8 <col:3> 'int' lvalue Var 0x56109c9d1320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56109c9d9c70 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56109c9d9c58 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9d9c18 <col:22> 'int' lvalue Var 0x56109c9d1320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56109c9d9c38 <col:41> 'int' 1
|   |-CallExpr 0x56109c9d9ce8 <line:769:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9d9cd0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9d9cb0 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56109c9d9d60 <line:770:3, col:36>
|     `-CallExpr 0x56109c9d9d40 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56109c9d9d28 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56109c9d9d08 <col:10> 'void *(void)' Function 0x56109c977ab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56109c9d9f58 prev 0x56109c9d0fa0 <line:772:1, line:800:1> line:772:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x56109c9d9ec0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56109c9db708 <line:773:1, line:800:1>
|   |-CallExpr 0x56109c9da038 <line:774:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9da020 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9da000 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9da0b0 <line:775:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56109c9da058 <col:3> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x56109c9da098 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9da078 <col:15> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x56109c9da110 <line:776:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56109c9da0d0 <col:3> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x56109c9da0f0 <col:15> 'int' 2
|   |-BinaryOperator 0x56109c9da188 <line:777:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9da130 <col:3> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9da170 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9da150 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56109c9da220 <line:778:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9da1a8 <col:3> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x56109c9da1f8 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56109c9da1c8 <col:27> 'int' 1
|   |-CallExpr 0x56109c9da3a8 <line:779:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x56109c9da390 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56109c9da240 <col:3> 'void (int)' Function 0x56109c977d28 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x56109c9da340 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x56109c9da320 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x56109c9da300 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x56109c9da2b8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x56109c9da2a0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56109c9da260 <col:23> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x56109c9da2e8 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x56109c9da2d0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x56109c9da280 <col:41> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56109c9da428 <line:780:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9da3d0 <col:3> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9da410 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9da3f0 <col:20> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x56109c9da4a0 <line:781:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9da448 <col:3> '_Bool' lvalue Var 0x56109c9d1b78 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9da488 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9da468 <col:20> '_Bool' lvalue Var 0x56109c9d1978 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56109c9da518 <line:782:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9da4c0 <col:3> '_Bool' lvalue Var 0x56109c9d1bf0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9da500 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9da4e0 <col:20> '_Bool' lvalue Var 0x56109c9d19f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56109c9da590 <line:783:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9da538 <col:3> '_Bool' lvalue Var 0x56109c9d1c68 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9da578 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56109c9da558 <col:20> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56109c9da628 <line:784:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9da5b0 <col:3> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   | `-CStyleCastExpr 0x56109c9da600 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56109c9da5d0 <col:27> 'int' 1
|   |-CallExpr 0x56109c9da680 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9da668 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9da648 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9da6d8 <line:786:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9da6c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9da6a0 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9da738 <line:787:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56109c9da6f8 <col:3> 'int' lvalue Var 0x56109c9d2050 'y' 'int'
|   | `-IntegerLiteral 0x56109c9da718 <col:7> 'int' 1
|   |-CallExpr 0x56109c9da790 <line:788:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9da778 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9da758 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9da7e8 <line:789:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9da7d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9da7b0 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9daad0 <line:790:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56109c9da808 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   | `-ConditionalOperator 0x56109c9daaa0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56109c9da8c8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56109c9da880 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56109c9da868 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56109c9da828 <col:7> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56109c9da8b0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56109c9da898 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56109c9da848 <col:25> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x56109c9daa88 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9da8e8 <col:42> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56109c9daa68 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56109c9daa38 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56109c9da9a8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56109c9da960 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56109c9da948 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56109c9da908 <col:55> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56109c9da990 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56109c9da978 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56109c9da928 <col:73> '_Bool' lvalue Var 0x56109c9d1c68 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x56109c9daa08 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56109c9da9c8 <col:90> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56109c9daa20 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9da9e8 <col:102> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
|   |-BinaryOperator 0x56109c9dace8 <line:791:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9daaf0 <col:3> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9dacd0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9daca0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56109c9dabc0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56109c9dab68 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56109c9dab50 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56109c9dab10 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56109c9daba8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56109c9dab90 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56109c9dab30 <col:38> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9dac58 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9dac10 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9dabe0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9dac88 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9dac70 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9dac38 <col:66> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56109c9dafd0 <line:792:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9dad08 <col:3> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9dafb8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9daf88 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56109c9daea8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56109c9dadc8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56109c9dad80 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56109c9dad68 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56109c9dad28 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56109c9dadb0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56109c9dad98 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56109c9dad48 <col:38> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56109c9dae88 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56109c9dae40 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56109c9dae28 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56109c9dade8 <col:56> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56109c9dae70 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56109c9dae58 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56109c9dae08 <col:74> '_Bool' lvalue Var 0x56109c9d1c68 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9daf40 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9daef8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9daec8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9daf70 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9daf58 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9daf20 <col:102> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56109c9db1d8 <line:793:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9daff0 <col:3> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9db1c0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9db190 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56109c9db0b0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56109c9db068 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56109c9db050 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56109c9db010 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56109c9db098 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56109c9db080 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56109c9db030 <col:38> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9db148 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9db100 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9db0d0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9db178 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9db160 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9db128 <col:66> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56109c9db4c0 <line:794:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56109c9db1f8 <col:3> '_Bool' lvalue Var 0x56109c9d1c68 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56109c9db4a8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56109c9db478 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56109c9db398 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56109c9db2b8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56109c9db270 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56109c9db258 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56109c9db218 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56109c9db2a0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56109c9db288 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56109c9db238 <col:38> '_Bool' lvalue Var 0x56109c9d1a68 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56109c9db378 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56109c9db330 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56109c9db318 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56109c9db2d8 <col:56> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56109c9db360 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56109c9db348 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56109c9db2f8 <col:74> '_Bool' lvalue Var 0x56109c9d1c68 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56109c9db430 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56109c9db3e8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56109c9db3b8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56109c9db460 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56109c9db448 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56109c9db410 <col:102> '_Bool' lvalue Var 0x56109c9d1c68 'x$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x56109c9db518 <line:795:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9db500 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9db4e0 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56109c9db570 <line:796:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56109c9db558 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9db538 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56109c9db628 <line:797:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56109c9db590 <col:3> 'int' lvalue Var 0x56109c9d1320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56109c9db608 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56109c9db5f0 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56109c9db5b0 <col:22> 'int' lvalue Var 0x56109c9d1320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56109c9db5d0 <col:41> 'int' 1
|   |-CallExpr 0x56109c9db680 <line:798:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56109c9db668 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56109c9db648 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56109c9db6f8 <line:799:3, col:36>
|     `-CallExpr 0x56109c9db6d8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56109c9db6c0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56109c9db6a0 <col:10> 'void *(void)' Function 0x56109c977ab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56109c9db808 prev 0x56109c9d1068 <line:801:1, line:803:1> line:801:6 fence 'void ()'
| `-CompoundStmt 0x56109c9db8a8 <line:802:1, line:803:1>
|-FunctionDecl 0x56109c9db8d8 prev 0x56109c9d1128 <line:804:1, line:806:1> line:804:6 isync 'void ()'
| `-CompoundStmt 0x56109c9db978 <line:805:1, line:806:1>
|-FunctionDecl 0x56109c9db9a8 prev 0x56109c9d11e8 <line:807:1, line:809:1> line:807:6 lwfence 'void ()'
| `-CompoundStmt 0x56109c9dba48 <line:808:1, line:809:1>
`-FunctionDecl 0x56109c9dbab8 <line:810:1, line:847:1> line:810:5 main 'int ()'
  `-CompoundStmt 0x56109c9e0138 <line:811:1, line:847:1>
    |-DeclStmt 0x56109c9dbc08 <line:812:3, col:18>
    | `-VarDecl 0x56109c9dbba0 <col:3, col:13> col:13 used t2551 'pthread_t':'unsigned long'
    |-CallExpr 0x56109c9dbe18 <line:813:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56109c9dbe00 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56109c9dbc20 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56109c9b85b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56109c9dbc60 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56109c9dbc40 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56109c9dbba0 't2551' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56109c9dbe58 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56109c9dbcd8 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56109c9dbcb0 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56109c9dbc78 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56109c9dbe70 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56109c9dbcf8 <col:39> 'void *(void *)' Function 0x56109c9d2278 'P0' 'void *(void *)'
    | `-ParenExpr 0x56109c9dbd78 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56109c9dbd50 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56109c9dbd18 <col:52> 'int' 0
    |-DeclStmt 0x56109c9dbf00 <line:814:3, col:18>
    | `-VarDecl 0x56109c9dbe98 <col:3, col:13> col:13 used t2552 'pthread_t':'unsigned long'
    |-CallExpr 0x56109c9dc0a8 <line:815:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56109c9dc090 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56109c9dbf18 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56109c9b85b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56109c9dbf58 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56109c9dbf38 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56109c9dbe98 't2552' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56109c9dc0e8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56109c9dbfd0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56109c9dbfa8 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56109c9dbf70 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56109c9dc100 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56109c9dbff0 <col:39> 'void *(void *)' Function 0x56109c9d5430 'P1' 'void *(void *)'
    | `-ParenExpr 0x56109c9dc070 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56109c9dc048 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56109c9dc010 <col:52> 'int' 0
    |-DeclStmt 0x56109c9dc190 <line:816:3, col:18>
    | `-VarDecl 0x56109c9dc128 <col:3, col:13> col:13 used t2553 'pthread_t':'unsigned long'
    |-CallExpr 0x56109c9dc338 <line:817:3, col:54> 'int'
    | |-ImplicitCastExpr 0x56109c9dc320 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56109c9dc1a8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56109c9b85b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56109c9dc1e8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56109c9dc1c8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56109c9dc128 't2553' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56109c9dc378 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56109c9dc260 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x56109c9dc238 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56109c9dc200 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x56109c9dc390 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56109c9dc280 <col:39> 'void *(void *)' Function 0x56109c9d9f58 'P2' 'void *(void *)'
    | `-ParenExpr 0x56109c9dc300 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x56109c9dc2d8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56109c9dc2a0 <col:52> 'int' 0
    |-CallExpr 0x56109c9dc3e0 <line:818:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56109c9dc3c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56109c9dc3a8 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56109c9dc4b0 <line:819:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dc400 <col:3> '_Bool' lvalue Var 0x56109c9d15f8 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x56109c9dc498 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x56109c9dc478 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x56109c9dc460 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x56109c9dc420 <col:21> 'int' lvalue Var 0x56109c9d1320 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x56109c9dc440 <col:41> 'int' 3
    |-CallExpr 0x56109c9dc508 <line:820:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56109c9dc4f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56109c9dc4d0 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56109c9dc580 <line:821:3, col:36> 'void'
    | |-ImplicitCastExpr 0x56109c9dc568 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56109c9dc528 <col:3> 'void (int)' Function 0x56109c977940 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x56109c9dc5c0 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x56109c9dc5a8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x56109c9dc548 <col:21> '_Bool' lvalue Var 0x56109c9d15f8 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x56109c9dc610 <line:822:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56109c9dc5f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56109c9dc5d8 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56109c9dc8f8 <line:823:3, col:103> 'int' '='
    | |-DeclRefExpr 0x56109c9dc630 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
    | `-ConditionalOperator 0x56109c9dc8c8 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x56109c9dc6f0 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x56109c9dc6a8 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x56109c9dc690 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x56109c9dc650 <col:7> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x56109c9dc6d8 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x56109c9dc6c0 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x56109c9dc670 <col:25> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56109c9dc8b0 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56109c9dc710 <col:42> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x56109c9dc890 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x56109c9dc860 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x56109c9dc7d0 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56109c9dc788 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56109c9dc770 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56109c9dc730 <col:55> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56109c9dc7b8 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56109c9dc7a0 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56109c9dc750 <col:73> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56109c9dc830 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56109c9dc7f0 <col:90> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x56109c9dc848 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56109c9dc810 <col:102> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
    |-BinaryOperator 0x56109c9dcb00 <line:824:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dc918 <col:3> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56109c9dcae8 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56109c9dcab8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56109c9dc9d8 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56109c9dc990 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56109c9dc978 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56109c9dc938 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56109c9dc9c0 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56109c9dc9a8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56109c9dc958 <col:38> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56109c9dca70 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56109c9dca28 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56109c9dc9f8 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56109c9dcaa0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56109c9dca88 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56109c9dca50 <col:66> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56109c9dce00 <line:825:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dcb20 <col:3> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56109c9dcde8 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56109c9dcdb8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56109c9dccd8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56109c9dcbf8 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56109c9dcbb0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56109c9dcb80 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56109c9dcb40 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56109c9dcbe0 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56109c9dcbc8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56109c9dcb60 <col:38> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56109c9dccb8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56109c9dcc70 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56109c9dcc58 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56109c9dcc18 <col:56> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56109c9dcca0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56109c9dcc88 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56109c9dcc38 <col:74> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56109c9dcd70 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56109c9dcd28 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56109c9dccf8 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56109c9dcda0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56109c9dcd88 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56109c9dcd50 <col:102> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x56109c9dd008 <line:826:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dce20 <col:3> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56109c9dcff0 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56109c9dcfc0 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56109c9dcee0 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56109c9dce98 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56109c9dce80 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56109c9dce40 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56109c9dcec8 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56109c9dceb0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56109c9dce60 <col:38> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56109c9dcf78 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56109c9dcf30 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56109c9dcf00 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56109c9dcfa8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56109c9dcf90 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56109c9dcf58 <col:66> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56109c9dd2f0 <line:827:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dd028 <col:3> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56109c9dd2d8 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56109c9dd2a8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56109c9dd1c8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56109c9dd0e8 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56109c9dd0a0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56109c9dd088 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56109c9dd048 <col:20> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56109c9dd0d0 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56109c9dd0b8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56109c9dd068 <col:38> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56109c9dd1a8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56109c9dd160 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56109c9dd148 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56109c9dd108 <col:56> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56109c9dd190 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56109c9dd178 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56109c9dd128 <col:74> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56109c9dd260 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56109c9dd218 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56109c9dd1e8 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56109c9dd290 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56109c9dd278 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56109c9dd240 <col:102> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x56109c9dd348 <line:828:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56109c9dd330 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56109c9dd310 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56109c9dd3a0 <line:829:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56109c9dd388 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56109c9dd368 <col:3> 'void ()' Function 0x56109c977fa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56109c9dd438 <line:830:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dd3c0 <col:3> '_Bool' lvalue Var 0x56109c9d20e8 'weak$$choice0' '_Bool'
    | `-CallExpr 0x56109c9dd418 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x56109c9dd400 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x56109c9dd3e0 <col:19> '_Bool (void)' Function 0x56109c977770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x56109c9dd4d0 <line:831:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dd458 <col:3> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
    | `-CallExpr 0x56109c9dd4b0 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x56109c9dd498 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x56109c9dd478 <col:19> '_Bool (void)' Function 0x56109c977770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x56109c9dd548 <line:832:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dd4f0 <col:3> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x56109c9dd530 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x56109c9dd510 <col:21> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x56109c9dd5c0 <line:833:3, col:15> 'int' '='
    | |-DeclRefExpr 0x56109c9dd568 <col:3> 'int' lvalue Var 0x56109c9d1888 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x56109c9dd5a8 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x56109c9dd588 <col:15> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
    |-BinaryOperator 0x56109c9dd9f8 <line:834:3, col:162> 'int' '='
    | |-DeclRefExpr 0x56109c9dd5e0 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
    | `-ConditionalOperator 0x56109c9dd9c8 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x56109c9dd7f0 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x56109c9dd710 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x56109c9dd638 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x56109c9dd620 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x56109c9dd600 <col:8> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x56109c9dd6f0 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x56109c9dd688 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x56109c9dd670 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x56109c9dd650 <col:27> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x56109c9dd6d8 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x56109c9dd6c0 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x56109c9dd6a0 <col:46> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x56109c9dd7d0 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x56109c9dd768 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x56109c9dd750 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x56109c9dd730 <col:65> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x56109c9dd7b8 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x56109c9dd7a0 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x56109c9dd780 <col:84> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56109c9dd9b0 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56109c9dd810 <col:101> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
    |   `-ParenExpr 0x56109c9dd990 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x56109c9dd960 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x56109c9dd8d0 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56109c9dd888 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56109c9dd870 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56109c9dd830 <col:106> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56109c9dd8b8 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56109c9dd8a0 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56109c9dd850 <col:124> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56109c9dd930 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56109c9dd8f0 <col:141> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x56109c9dd948 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56109c9dd910 <col:153> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
    |-BinaryOperator 0x56109c9ddf20 <line:835:3, col:208> 'int' '='
    | |-DeclRefExpr 0x56109c9dda18 <col:3> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x56109c9ddef0 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x56109c9ddec0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56109c9ddea8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56109c9dda38 <col:15> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x56109c9dded8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56109c9dda58 <col:31> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x56109c9dde88 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x56109c9dde58 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x56109c9ddc80 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x56109c9ddb88 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x56109c9ddab0 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x56109c9dda98 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x56109c9dda78 <col:45> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x56109c9ddb68 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x56109c9ddb00 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x56109c9ddae8 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x56109c9ddac8 <col:64> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x56109c9ddb50 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x56109c9ddb38 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x56109c9ddb18 <col:83> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x56109c9ddc60 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x56109c9ddbf8 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x56109c9ddbe0 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x56109c9ddbc0 <col:102> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x56109c9ddc48 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x56109c9ddc30 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x56109c9ddc10 <col:121> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56109c9dde40 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56109c9ddca0 <col:138> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
    |       `-ParenExpr 0x56109c9dde20 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x56109c9dddf0 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x56109c9ddd60 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x56109c9ddd18 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x56109c9ddd00 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x56109c9ddcc0 <col:151> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x56109c9ddd48 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x56109c9ddd30 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56109c9ddce0 <col:169> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x56109c9dddc0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56109c9ddd80 <col:186> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x56109c9dddd8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x56109c9ddda0 <col:198> 'int' lvalue Var 0x56109c9d1de0 'x$w_buff0' 'int'
    |-BinaryOperator 0x56109c9de430 <line:836:3, col:208> 'int' '='
    | |-DeclRefExpr 0x56109c9ddf40 <col:3> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x56109c9de400 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x56109c9de3d0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56109c9de3b8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56109c9ddf60 <col:15> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x56109c9de3e8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56109c9ddf80 <col:31> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
    |   `-ParenExpr 0x56109c9de398 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x56109c9de368 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x56109c9de190 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x56109c9de0b0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x56109c9ddfd8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x56109c9ddfc0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x56109c9ddfa0 <col:45> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x56109c9de090 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x56109c9de028 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x56109c9de010 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x56109c9ddff0 <col:64> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x56109c9de078 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x56109c9de060 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x56109c9de040 <col:83> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x56109c9de170 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x56109c9de108 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x56109c9de0f0 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x56109c9de0d0 <col:102> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x56109c9de158 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x56109c9de140 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x56109c9de120 <col:121> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56109c9de350 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56109c9de1b0 <col:138> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
    |       `-ParenExpr 0x56109c9de330 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x56109c9de300 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x56109c9de270 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x56109c9de228 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x56109c9de210 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x56109c9de1d0 <col:151> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x56109c9de258 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x56109c9de240 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56109c9de1f0 <col:169> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x56109c9de2d0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56109c9de290 <col:186> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x56109c9de2e8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x56109c9de2b0 <col:198> 'int' lvalue Var 0x56109c9d1ed8 'x$w_buff1' 'int'
    |-BinaryOperator 0x56109c9de9d8 <line:837:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x56109c9de450 <col:3> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56109c9de9c0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56109c9de990 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x56109c9de948 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56109c9de930 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56109c9de470 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56109c9de978 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56109c9de960 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56109c9de490 <col:36> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x56109c9de910 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x56109c9de8e0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x56109c9de6a0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56109c9de5c0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56109c9de4e8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56109c9de4d0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56109c9de4b0 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56109c9de5a0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56109c9de538 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56109c9de520 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56109c9de500 <col:74> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56109c9de588 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56109c9de570 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56109c9de550 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56109c9de680 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56109c9de618 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56109c9de600 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56109c9de5e0 <col:112> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56109c9de668 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56109c9de650 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56109c9de630 <col:131> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56109c9de8c8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56109c9de8b0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56109c9de6c0 <col:148> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x56109c9de890 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x56109c9de860 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x56109c9de780 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56109c9de738 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56109c9de720 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56109c9de6e0 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56109c9de768 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56109c9de750 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56109c9de700 <col:184> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56109c9de818 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56109c9de7d0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56109c9de7a0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56109c9de848 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x56109c9de830 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x56109c9de7f8 <col:212> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56109c9defb0 <line:838:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x56109c9de9f8 <col:3> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56109c9def98 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56109c9def68 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x56109c9def20 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56109c9def08 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56109c9dea18 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56109c9def50 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56109c9def38 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56109c9dea38 <col:36> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x56109c9deee8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x56109c9deeb8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x56109c9dec58 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56109c9deb68 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56109c9dea90 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56109c9dea78 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56109c9dea58 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56109c9deb48 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56109c9deae0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56109c9deac8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56109c9deaa8 <col:74> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56109c9deb30 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56109c9deb18 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56109c9deaf8 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56109c9dec38 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56109c9debd0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56109c9deba8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56109c9deb88 <col:112> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56109c9dec20 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56109c9dec08 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56109c9debe8 <col:131> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56109c9deea0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56109c9dee88 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56109c9dec78 <col:148> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x56109c9dee68 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x56109c9dee38 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x56109c9ded38 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56109c9decf0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56109c9decd8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56109c9dec98 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56109c9ded20 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56109c9ded08 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56109c9decb8 <col:184> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56109c9dee08 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56109c9ded88 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56109c9ded58 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56109c9dee20 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x56109c9dede0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x56109c9dedb0 <col:219> 'int' 0
    |-BinaryOperator 0x56109c9df558 <line:839:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x56109c9defd0 <col:3> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56109c9df540 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56109c9df510 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x56109c9df4c8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56109c9df4b0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56109c9deff0 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56109c9df4f8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56109c9df4e0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56109c9df010 <col:36> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x56109c9df490 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x56109c9df460 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x56109c9df220 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56109c9df140 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56109c9df068 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56109c9df050 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56109c9df030 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56109c9df120 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56109c9df0b8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56109c9df0a0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56109c9df080 <col:74> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56109c9df108 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56109c9df0f0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56109c9df0d0 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56109c9df200 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56109c9df198 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56109c9df180 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56109c9df160 <col:112> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56109c9df1e8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56109c9df1d0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56109c9df1b0 <col:131> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56109c9df448 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56109c9df430 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56109c9df240 <col:148> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x56109c9df410 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x56109c9df3e0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x56109c9df300 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56109c9df2b8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56109c9df2a0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56109c9df260 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56109c9df2e8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56109c9df2d0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56109c9df280 <col:184> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56109c9df398 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56109c9df350 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56109c9df320 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56109c9df3c8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x56109c9df3b0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x56109c9df378 <col:212> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56109c9dfb20 <line:840:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x56109c9df578 <col:3> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56109c9dfb08 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56109c9dfad8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x56109c9dfa90 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56109c9dfa78 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56109c9df598 <col:20> '_Bool' lvalue Var 0x56109c9d2160 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56109c9dfac0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56109c9dfaa8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56109c9df5b8 <col:36> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x56109c9dfa58 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x56109c9dfa28 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x56109c9df7c8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56109c9df6e8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56109c9df610 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56109c9df5f8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56109c9df5d8 <col:55> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56109c9df6c8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56109c9df660 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56109c9df648 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56109c9df628 <col:74> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56109c9df6b0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56109c9df698 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56109c9df678 <col:93> '_Bool' lvalue Var 0x56109c9d1f50 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56109c9df7a8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56109c9df740 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56109c9df728 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56109c9df708 <col:112> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56109c9df790 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56109c9df778 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56109c9df758 <col:131> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56109c9dfa10 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56109c9df9f8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56109c9df7e8 <col:148> '_Bool' lvalue Var 0x56109c9d1b00 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x56109c9df9d8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x56109c9df9a8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x56109c9df8a8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56109c9df860 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56109c9df848 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56109c9df808 <col:166> '_Bool' lvalue Var 0x56109c9d1e58 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56109c9df890 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56109c9df878 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56109c9df828 <col:184> '_Bool' lvalue Var 0x56109c9d1900 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56109c9df978 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56109c9df8f8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56109c9df8c8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56109c9df990 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x56109c9df950 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x56109c9df920 <col:219> 'int' 0
    |-BinaryOperator 0x56109c9dfe18 <line:841:3, col:95> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dfb40 <col:3> '_Bool' lvalue Var 0x56109c9d1670 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x56109c9dfe00 <col:21, col:95> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x56109c9dfde8 <col:21, col:95> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x56109c9dfdc8 <col:22, col:95> 'int'
    |       `-BinaryOperator 0x56109c9dfda8 <col:23, col:94> 'int' '&&'
    |         |-BinaryOperator 0x56109c9dfd10 <col:23, col:66> 'int' '&&'
    |         | |-BinaryOperator 0x56109c9dfc78 <col:23, col:38> 'int' '&&'
    |         | | |-BinaryOperator 0x56109c9dfbe0 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x56109c9dfba0 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x56109c9dfb60 <col:23> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
    |         | | | `-IntegerLiteral 0x56109c9dfb80 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x56109c9dfc58 <col:33, col:38> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x56109c9dfc40 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x56109c9dfc00 <col:33> 'int' lvalue Var 0x56109c9d2050 'y' 'int'
    |         | |   `-IntegerLiteral 0x56109c9dfc20 <col:38> 'int' 2
    |         | `-BinaryOperator 0x56109c9dfcf0 <col:43, col:66> 'int' '=='
    |         |   |-ImplicitCastExpr 0x56109c9dfcd8 <col:43> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x56109c9dfc98 <col:43> 'int' lvalue Var 0x56109c9d1440 '__unbuffered_p0_EAX' 'int'
    |         |   `-IntegerLiteral 0x56109c9dfcb8 <col:66> 'int' 0
    |         `-BinaryOperator 0x56109c9dfd88 <col:71, col:94> 'int' '=='
    |           |-ImplicitCastExpr 0x56109c9dfd70 <col:71> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56109c9dfd30 <col:71> 'int' lvalue Var 0x56109c9d1560 '__unbuffered_p1_EAX' 'int'
    |           `-IntegerLiteral 0x56109c9dfd50 <col:94> 'int' 1
    |-BinaryOperator 0x56109c9dff48 <line:842:3, col:37> 'int' '='
    | |-DeclRefExpr 0x56109c9dfe38 <col:3> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
    | `-ConditionalOperator 0x56109c9dff18 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x56109c9dfed0 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56109c9dfeb8 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56109c9dfe58 <col:7> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x56109c9dfee8 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56109c9dfe78 <col:25> 'int' lvalue Var 0x56109c9d1888 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x56109c9dff00 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x56109c9dfe98 <col:37> 'int' lvalue Var 0x56109c9d1770 'x' 'int'
    |-BinaryOperator 0x56109c9dffe0 <line:843:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x56109c9dff68 <col:3> '_Bool' lvalue Var 0x56109c9d1808 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x56109c9dffb8 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x56109c9dff88 <col:28> 'int' 0
    |-CallExpr 0x56109c9e0038 <line:844:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56109c9e0020 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56109c9e0000 <col:3> 'void ()' Function 0x56109c978060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56109c9e00b0 <line:845:3, col:36> 'void'
    | |-ImplicitCastExpr 0x56109c9e0098 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56109c9e0058 <col:3> 'void (int)' Function 0x56109c977d28 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x56109c9e00f0 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x56109c9e00d8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x56109c9e0078 <col:21> '_Bool' lvalue Var 0x56109c9d1670 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x56109c9e0128 <line:846:3, col:10>
      `-IntegerLiteral 0x56109c9e0108 <col:10> 'int' 0
