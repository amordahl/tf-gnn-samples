TranslationUnitDecl 0x563e3c374c98 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x563e3c375558 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x563e3c375230 '__int128'
|-TypedefDecl 0x563e3c3755c8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x563e3c375250 'unsigned __int128'
|-TypedefDecl 0x563e3c3758d0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x563e3c3756a0 'struct __NSConstantString_tag'
|   `-Record 0x563e3c375620 '__NSConstantString_tag'
|-TypedefDecl 0x563e3c375978 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x563e3c375930 'char *'
|   `-BuiltinType 0x563e3c374d30 'char'
|-TypedefDecl 0x563e3c3b4740 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x563e3c375c10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x563e3c375a50 'struct __va_list_tag'
|     `-Record 0x563e3c3759d0 '__va_list_tag'
|-FunctionDecl 0x563e3c3b4820 <./split_1/sqrt_Householder_interval_true-unreach-call.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x563e3c3b4968 <line:13:1, col:40> col:15 used __VERIFIER_nondet_double 'double ()' extern
|-FunctionDecl 0x563e3c3b4af0 <line:14:1, col:45> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x563e3c3b4a20 <col:31, col:35> col:35 expression 'int'
|-FunctionDecl 0x563e3c3b4c40 <line:15:1, col:88> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x563e3c3b4bb0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x563e3c3b4e90 <col:34, col:88>
|   |-IfStmt 0x563e3c3b4e68 <col:36, col:78>
|   | |-UnaryOperator 0x563e3c3b4d40 <col:40, col:46> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x563e3c3b4d28 <col:41, col:46> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x563e3c3b4d08 <col:41, col:46> 'int' lvalue
|   | |     `-DeclRefExpr 0x563e3c3b4ce8 <col:42> 'int' lvalue ParmVar 0x563e3c3b4bb0 'cond' 'int'
|   | `-CompoundStmt 0x563e3c3b4e50 <col:49, col:78>
|   |   `-LabelStmt 0x563e3c3b4e38 <col:51, col:75> 'ERROR'
|   |     `-CallExpr 0x563e3c3b4dc8 <col:58, col:75> 'void'
|   |       `-ImplicitCastExpr 0x563e3c3b4db0 <col:58> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x563e3c3b4d58 <col:58> 'void () __attribute__((noreturn))' Function 0x563e3c3b4820 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x563e3c3b4e80 <col:80>
|-VarDecl 0x563e3c3b4ec8 <line:17:1, col:15> col:8 used _EPS 'double' cinit
| `-FloatingLiteral 0x563e3c3b4f30 <col:15> 'double' 1.000000e-06
|-FunctionDecl 0x563e3c3b5038 <line:19:1, line:40:1> line:19:8 used SqrtR 'double (double)'
| |-ParmVarDecl 0x563e3c3b4f68 <col:14, col:21> col:21 used Input 'double'
| `-CompoundStmt 0x563e3c3da7b0 <line:20:1, line:40:1>
|   |-DeclStmt 0x563e3c3b5390 <line:21:3, col:38>
|   | |-VarDecl 0x563e3c3b50f8 <col:3, col:10> col:10 used xn 'double'
|   | |-VarDecl 0x563e3c3b5178 <col:3, col:14> col:14 used xnp1 'double'
|   | |-VarDecl 0x563e3c3b51f8 <col:3, col:20> col:20 used residu 'double'
|   | |-VarDecl 0x563e3c3b5278 <col:3, col:28> col:28 used lsup 'double'
|   | `-VarDecl 0x563e3c3b52f8 <col:3, col:34> col:34 used linf 'double'
|   |-DeclStmt 0x563e3c3b54c0 <line:22:3, col:14>
|   | |-VarDecl 0x563e3c3b53c0 <col:3, col:7> col:7 used i 'int'
|   | `-VarDecl 0x563e3c3b5440 <col:3, col:10> col:10 used cond 'int'
|   |-IfStmt 0x563e3c3b5668 <line:23:3, col:45> has_else
|   | |-BinaryOperator 0x563e3c3b5530 <col:7, col:16> 'int' '<='
|   | | |-ImplicitCastExpr 0x563e3c3b5518 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x563e3c3b54d8 <col:7> 'double' lvalue ParmVar 0x563e3c3b4f68 'Input' 'double'
|   | | `-FloatingLiteral 0x563e3c3b54f8 <col:16> 'double' 1.000000e+00
|   | |-BinaryOperator 0x563e3c3b5590 <col:21, col:26> 'double' '='
|   | | |-DeclRefExpr 0x563e3c3b5550 <col:21> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   | | `-FloatingLiteral 0x563e3c3b5570 <col:26> 'double' 1.000000e+00
|   | `-BinaryOperator 0x563e3c3b5648 <col:36, col:45> 'double' '='
|   |   |-DeclRefExpr 0x563e3c3b55b0 <col:36> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   `-BinaryOperator 0x563e3c3b5628 <col:41, col:45> 'double' '/'
|   |     |-FloatingLiteral 0x563e3c3b55d0 <col:41> 'double' 1.000000e+00
|   |     `-ImplicitCastExpr 0x563e3c3b5610 <col:45> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x563e3c3b55f0 <col:45> 'double' lvalue ParmVar 0x563e3c3b4f68 'Input' 'double'
|   |-BinaryOperator 0x563e3c3b56e8 <line:24:3, col:10> 'double' '='
|   | |-DeclRefExpr 0x563e3c3b5690 <col:3> 'double' lvalue Var 0x563e3c3b5178 'xnp1' 'double'
|   | `-ImplicitCastExpr 0x563e3c3b56d0 <col:10> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x563e3c3b56b0 <col:10> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |-BinaryOperator 0x563e3c3d98b8 <line:25:3, col:29> 'double' '='
|   | |-DeclRefExpr 0x563e3c3b5708 <col:3> 'double' lvalue Var 0x563e3c3b51f8 'residu' 'double'
|   | `-BinaryOperator 0x563e3c3d9898 <col:12, col:29> 'double' '*'
|   |   |-BinaryOperator 0x563e3c3d97c8 <col:12, col:16> 'double' '*'
|   |   | |-FloatingLiteral 0x563e3c3d9770 <col:12> 'double' 2.000000e+00
|   |   | `-ImplicitCastExpr 0x563e3c3d97b0 <col:16> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563e3c3d9790 <col:16> 'double' lvalue Var 0x563e3c3b4ec8 '_EPS' 'double'
|   |   `-ParenExpr 0x563e3c3d9878 <col:21, col:29> 'double'
|   |     `-BinaryOperator 0x563e3c3d9858 <col:22, col:25> 'double' '+'
|   |       |-ImplicitCastExpr 0x563e3c3d9828 <col:22> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e3c3d97e8 <col:22> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |       `-ImplicitCastExpr 0x563e3c3d9840 <col:25> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e3c3d9808 <col:25> 'double' lvalue Var 0x563e3c3b5178 'xnp1' 'double'
|   |-BinaryOperator 0x563e3c3d9a00 <line:26:3, col:25> 'double' '='
|   | |-DeclRefExpr 0x563e3c3d98d8 <col:3> 'double' lvalue Var 0x563e3c3b5278 'lsup' 'double'
|   | `-BinaryOperator 0x563e3c3d99e0 <col:10, col:25> 'double' '*'
|   |   |-ImplicitCastExpr 0x563e3c3d99c8 <col:10> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563e3c3d98f8 <col:10> 'double' lvalue Var 0x563e3c3b4ec8 '_EPS' 'double'
|   |   `-ParenExpr 0x563e3c3d99a8 <col:17, col:25> 'double'
|   |     `-BinaryOperator 0x563e3c3d9988 <col:18, col:21> 'double' '+'
|   |       |-ImplicitCastExpr 0x563e3c3d9958 <col:18> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x563e3c3d9918 <col:18> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |       `-ImplicitCastExpr 0x563e3c3d9970 <col:21> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x563e3c3d9938 <col:21> 'double' lvalue Var 0x563e3c3b5178 'xnp1' 'double'
|   |-BinaryOperator 0x563e3c3d9a90 <line:27:3, col:11> 'double' '='
|   | |-DeclRefExpr 0x563e3c3d9a20 <col:3> 'double' lvalue Var 0x563e3c3b52f8 'linf' 'double'
|   | `-UnaryOperator 0x563e3c3d9a78 <col:10, col:11> 'double' prefix '-'
|   |   `-ImplicitCastExpr 0x563e3c3d9a60 <col:11> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x563e3c3d9a40 <col:11> 'double' lvalue Var 0x563e3c3b5278 'lsup' 'double'
|   |-BinaryOperator 0x563e3c3d9c70 <line:28:3, col:45> 'int' '='
|   | |-DeclRefExpr 0x563e3c3d9ab0 <col:3> 'int' lvalue Var 0x563e3c3b5440 'cond' 'int'
|   | `-ParenExpr 0x563e3c3d9c50 <col:10, col:45> 'int'
|   |   `-BinaryOperator 0x563e3c3d9c30 <col:11, col:44> 'int' '||'
|   |     |-ParenExpr 0x563e3c3d9b60 <col:11, col:25> 'int'
|   |     | `-BinaryOperator 0x563e3c3d9b40 <col:12, col:21> 'int' '>'
|   |     |   |-ImplicitCastExpr 0x563e3c3d9b10 <col:12> 'double' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x563e3c3d9ad0 <col:12> 'double' lvalue Var 0x563e3c3b51f8 'residu' 'double'
|   |     |   `-ImplicitCastExpr 0x563e3c3d9b28 <col:21> 'double' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x563e3c3d9af0 <col:21> 'double' lvalue Var 0x563e3c3b5278 'lsup' 'double'
|   |     `-ParenExpr 0x563e3c3d9c10 <col:30, col:44> 'int'
|   |       `-BinaryOperator 0x563e3c3d9bf0 <col:31, col:40> 'int' '<'
|   |         |-ImplicitCastExpr 0x563e3c3d9bc0 <col:31> 'double' <LValueToRValue>
|   |         | `-DeclRefExpr 0x563e3c3d9b80 <col:31> 'double' lvalue Var 0x563e3c3b51f8 'residu' 'double'
|   |         `-ImplicitCastExpr 0x563e3c3d9bd8 <col:40> 'double' <LValueToRValue>
|   |           `-DeclRefExpr 0x563e3c3d9ba0 <col:40> 'double' lvalue Var 0x563e3c3b52f8 'linf' 'double'
|   |-BinaryOperator 0x563e3c3d9cd0 <line:29:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x563e3c3d9c90 <col:3> 'int' lvalue Var 0x563e3c3b53c0 'i' 'int'
|   | `-IntegerLiteral 0x563e3c3d9cb0 <col:7> 'int' 0
|   |-WhileStmt 0x563e3c3da6e8 <line:30:3, line:38:3>
|   | |-ImplicitCastExpr 0x563e3c3d9d10 <line:30:10> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x563e3c3d9cf0 <col:10> 'int' lvalue Var 0x563e3c3b5440 'cond' 'int'
|   | `-CompoundStmt 0x563e3c3da6a0 <col:16, line:38:3>
|   |   |-BinaryOperator 0x563e3c3da0e8 <line:31:5, col:63> 'double' '='
|   |   | |-DeclRefExpr 0x563e3c3d9d28 <col:5> 'double' lvalue Var 0x563e3c3b5178 'xnp1' 'double'
|   |   | `-BinaryOperator 0x563e3c3da0c8 <col:12, col:63> 'double' '/'
|   |   |   |-BinaryOperator 0x563e3c3da088 <col:12, col:59> 'double' '*'
|   |   |   | |-ImplicitCastExpr 0x563e3c3da070 <col:12> 'double' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563e3c3d9d48 <col:12> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   |   | `-ParenExpr 0x563e3c3da050 <col:17, col:59> 'double'
|   |   |   |   `-BinaryOperator 0x563e3c3da030 <col:18, col:58> 'double' '+'
|   |   |   |     |-FloatingLiteral 0x563e3c3d9d68 <col:18> 'double' 1.500000e+01
|   |   |   |     `-BinaryOperator 0x563e3c3da010 <col:24, col:58> 'double' '*'
|   |   |   |       |-BinaryOperator 0x563e3c3d9e50 <col:24, col:33> 'double' '*'
|   |   |   |       | |-BinaryOperator 0x563e3c3d9df8 <col:24, col:30> 'double' '*'
|   |   |   |       | | |-ImplicitCastExpr 0x563e3c3d9dc8 <col:24> 'double' <LValueToRValue>
|   |   |   |       | | | `-DeclRefExpr 0x563e3c3d9d88 <col:24> 'double' lvalue ParmVar 0x563e3c3b4f68 'Input' 'double'
|   |   |   |       | | `-ImplicitCastExpr 0x563e3c3d9de0 <col:30> 'double' <LValueToRValue>
|   |   |   |       | |   `-DeclRefExpr 0x563e3c3d9da8 <col:30> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   |   |       | `-ImplicitCastExpr 0x563e3c3d9e38 <col:33> 'double' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x563e3c3d9e18 <col:33> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   |   |       `-ParenExpr 0x563e3c3d9ff0 <col:36, col:58> 'double'
|   |   |   |         `-BinaryOperator 0x563e3c3d9fd0 <col:37, col:56> 'double' '+'
|   |   |   |           |-UnaryOperator 0x563e3c3d9e90 <col:37, col:38> 'double' prefix '-'
|   |   |   |           | `-FloatingLiteral 0x563e3c3d9e70 <col:38> 'double' 1.000000e+01
|   |   |   |           `-BinaryOperator 0x563e3c3d9fb0 <col:44, col:56> 'double' '*'
|   |   |   |             |-BinaryOperator 0x563e3c3d9f58 <col:44, col:53> 'double' '*'
|   |   |   |             | |-BinaryOperator 0x563e3c3d9f00 <col:44, col:47> 'double' '*'
|   |   |   |             | | |-FloatingLiteral 0x563e3c3d9ea8 <col:44> 'double' 3.000000e+00
|   |   |   |             | | `-ImplicitCastExpr 0x563e3c3d9ee8 <col:47> 'double' <LValueToRValue>
|   |   |   |             | |   `-DeclRefExpr 0x563e3c3d9ec8 <col:47> 'double' lvalue ParmVar 0x563e3c3b4f68 'Input' 'double'
|   |   |   |             | `-ImplicitCastExpr 0x563e3c3d9f40 <col:53> 'double' <LValueToRValue>
|   |   |   |             |   `-DeclRefExpr 0x563e3c3d9f20 <col:53> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   |   |             `-ImplicitCastExpr 0x563e3c3d9f98 <col:56> 'double' <LValueToRValue>
|   |   |   |               `-DeclRefExpr 0x563e3c3d9f78 <col:56> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   |   `-FloatingLiteral 0x563e3c3da0a8 <col:63> 'double' 8.000000e+00
|   |   |-BinaryOperator 0x563e3c3da218 <line:32:5, col:26> 'double' '='
|   |   | |-DeclRefExpr 0x563e3c3da108 <col:5> 'double' lvalue Var 0x563e3c3b51f8 'residu' 'double'
|   |   | `-BinaryOperator 0x563e3c3da1f8 <col:14, col:26> 'double' '*'
|   |   |   |-FloatingLiteral 0x563e3c3da128 <col:14> 'double' 2.000000e+00
|   |   |   `-ParenExpr 0x563e3c3da1d8 <col:18, col:26> 'double'
|   |   |     `-BinaryOperator 0x563e3c3da1b8 <col:19, col:24> 'double' '-'
|   |   |       |-ImplicitCastExpr 0x563e3c3da188 <col:19> 'double' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x563e3c3da148 <col:19> 'double' lvalue Var 0x563e3c3b5178 'xnp1' 'double'
|   |   |       `-ImplicitCastExpr 0x563e3c3da1a0 <col:24> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x563e3c3da168 <col:24> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   |-BinaryOperator 0x563e3c3da290 <line:33:5, col:10> 'double' '='
|   |   | |-DeclRefExpr 0x563e3c3da238 <col:5> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   | `-ImplicitCastExpr 0x563e3c3da278 <col:10> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563e3c3da258 <col:10> 'double' lvalue Var 0x563e3c3b5178 'xnp1' 'double'
|   |   |-BinaryOperator 0x563e3c3da3d8 <line:34:5, col:27> 'double' '='
|   |   | |-DeclRefExpr 0x563e3c3da2b0 <col:5> 'double' lvalue Var 0x563e3c3b5278 'lsup' 'double'
|   |   | `-BinaryOperator 0x563e3c3da3b8 <col:12, col:27> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x563e3c3da3a0 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x563e3c3da2d0 <col:12> 'double' lvalue Var 0x563e3c3b4ec8 '_EPS' 'double'
|   |   |   `-ParenExpr 0x563e3c3da380 <col:19, col:27> 'double'
|   |   |     `-BinaryOperator 0x563e3c3da360 <col:20, col:23> 'double' '+'
|   |   |       |-ImplicitCastExpr 0x563e3c3da330 <col:20> 'double' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x563e3c3da2f0 <col:20> 'double' lvalue Var 0x563e3c3b50f8 'xn' 'double'
|   |   |       `-ImplicitCastExpr 0x563e3c3da348 <col:23> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x563e3c3da310 <col:23> 'double' lvalue Var 0x563e3c3b5178 'xnp1' 'double'
|   |   |-BinaryOperator 0x563e3c3da468 <line:35:5, col:13> 'double' '='
|   |   | |-DeclRefExpr 0x563e3c3da3f8 <col:5> 'double' lvalue Var 0x563e3c3b52f8 'linf' 'double'
|   |   | `-UnaryOperator 0x563e3c3da450 <col:12, col:13> 'double' prefix '-'
|   |   |   `-ImplicitCastExpr 0x563e3c3da438 <col:13> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x563e3c3da418 <col:13> 'double' lvalue Var 0x563e3c3b5278 'lsup' 'double'
|   |   |-BinaryOperator 0x563e3c3da648 <line:36:5, col:47> 'int' '='
|   |   | |-DeclRefExpr 0x563e3c3da488 <col:5> 'int' lvalue Var 0x563e3c3b5440 'cond' 'int'
|   |   | `-ParenExpr 0x563e3c3da628 <col:12, col:47> 'int'
|   |   |   `-BinaryOperator 0x563e3c3da608 <col:13, col:46> 'int' '||'
|   |   |     |-ParenExpr 0x563e3c3da538 <col:13, col:27> 'int'
|   |   |     | `-BinaryOperator 0x563e3c3da518 <col:14, col:23> 'int' '>'
|   |   |     |   |-ImplicitCastExpr 0x563e3c3da4e8 <col:14> 'double' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x563e3c3da4a8 <col:14> 'double' lvalue Var 0x563e3c3b51f8 'residu' 'double'
|   |   |     |   `-ImplicitCastExpr 0x563e3c3da500 <col:23> 'double' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x563e3c3da4c8 <col:23> 'double' lvalue Var 0x563e3c3b5278 'lsup' 'double'
|   |   |     `-ParenExpr 0x563e3c3da5e8 <col:32, col:46> 'int'
|   |   |       `-BinaryOperator 0x563e3c3da5c8 <col:33, col:42> 'int' '<'
|   |   |         |-ImplicitCastExpr 0x563e3c3da598 <col:33> 'double' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x563e3c3da558 <col:33> 'double' lvalue Var 0x563e3c3b51f8 'residu' 'double'
|   |   |         `-ImplicitCastExpr 0x563e3c3da5b0 <col:42> 'double' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x563e3c3da578 <col:42> 'double' lvalue Var 0x563e3c3b52f8 'linf' 'double'
|   |   `-UnaryOperator 0x563e3c3da688 <line:37:5, col:6> 'int' postfix '++'
|   |     `-DeclRefExpr 0x563e3c3da668 <col:5> 'int' lvalue Var 0x563e3c3b53c0 'i' 'int'
|   `-ReturnStmt 0x563e3c3da7a0 <line:39:3, col:16>
|     `-BinaryOperator 0x563e3c3da780 <col:10, col:16> 'double' '/'
|       |-FloatingLiteral 0x563e3c3da708 <col:10> 'double' 1.000000e+00
|       `-ImplicitCastExpr 0x563e3c3da748 <col:16> 'double' <LValueToRValue>
|         `-DeclRefExpr 0x563e3c3da728 <col:16> 'double' lvalue Var 0x563e3c3b5178 'xnp1' 'double'
`-FunctionDecl 0x563e3c3da918 <line:42:1, line:53:1> line:42:5 main 'int ()'
  `-CompoundStmt 0x563e3c3db008 <line:43:1, line:53:1>
    |-DeclStmt 0x563e3c3daad0 <line:44:3, col:14>
    | |-VarDecl 0x563e3c3da9d0 <col:3, col:10> col:10 used d 'double'
    | `-VarDecl 0x563e3c3daa50 <col:3, col:13> col:13 used r 'double'
    |-BinaryOperator 0x563e3c3dab98 <line:46:3, col:32> 'double' '='
    | |-DeclRefExpr 0x563e3c3daae8 <col:3> 'double' lvalue Var 0x563e3c3da9d0 'd' 'double'
    | `-CallExpr 0x563e3c3dab78 <col:7, col:32> 'double'
    |   `-ImplicitCastExpr 0x563e3c3dab60 <col:7> 'double (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x563e3c3dab08 <col:7> 'double ()' Function 0x563e3c3b4968 '__VERIFIER_nondet_double' 'double ()'
    |-CallExpr 0x563e3c3dad38 <line:47:3, col:42> 'void'
    | |-ImplicitCastExpr 0x563e3c3dad20 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e3c3dabb8 <col:3> 'void (int)' Function 0x563e3c3b4af0 '__VERIFIER_assume' 'void (int)'
    | `-BinaryOperator 0x563e3c3dacc8 <col:21, col:38> 'int' '&&'
    |   |-BinaryOperator 0x563e3c3dac30 <col:21, col:26> 'int' '>='
    |   | |-ImplicitCastExpr 0x563e3c3dac18 <col:21> 'double' <LValueToRValue>
    |   | | `-DeclRefExpr 0x563e3c3dabd8 <col:21> 'double' lvalue Var 0x563e3c3da9d0 'd' 'double'
    |   | `-FloatingLiteral 0x563e3c3dabf8 <col:26> 'double' 1.000000e-01
    |   `-BinaryOperator 0x563e3c3daca8 <col:33, col:38> 'int' '<='
    |     |-ImplicitCastExpr 0x563e3c3dac90 <col:33> 'double' <LValueToRValue>
    |     | `-DeclRefExpr 0x563e3c3dac50 <col:33> 'double' lvalue Var 0x563e3c3da9d0 'd' 'double'
    |     `-FloatingLiteral 0x563e3c3dac70 <col:38> 'double' 2.000000e+01
    |-BinaryOperator 0x563e3c3dae48 <line:49:3, col:14> 'double' '='
    | |-DeclRefExpr 0x563e3c3dad60 <col:3> 'double' lvalue Var 0x563e3c3daa50 'r' 'double'
    | `-CallExpr 0x563e3c3dae08 <col:7, col:14> 'double'
    |   |-ImplicitCastExpr 0x563e3c3dadf0 <col:7> 'double (*)(double)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x563e3c3dad80 <col:7> 'double (double)' Function 0x563e3c3b5038 'SqrtR' 'double (double)'
    |   `-ImplicitCastExpr 0x563e3c3dae30 <col:13> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x563e3c3dada0 <col:13> 'double' lvalue Var 0x563e3c3da9d0 'd' 'double'
    |-CallExpr 0x563e3c3dafb0 <line:51:3, col:40> 'void'
    | |-ImplicitCastExpr 0x563e3c3daf98 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x563e3c3dae68 <col:3> 'void (int)' Function 0x563e3c3b4c40 '__VERIFIER_assert' 'void (int)'
    | `-BinaryOperator 0x563e3c3daf78 <col:21, col:38> 'int' '&&'
    |   |-BinaryOperator 0x563e3c3daee0 <col:21, col:26> 'int' '>='
    |   | |-ImplicitCastExpr 0x563e3c3daec8 <col:21> 'double' <LValueToRValue>
    |   | | `-DeclRefExpr 0x563e3c3dae88 <col:21> 'double' lvalue Var 0x563e3c3daa50 'r' 'double'
    |   | `-FloatingLiteral 0x563e3c3daea8 <col:26> 'double' 3.000000e-01
    |   `-BinaryOperator 0x563e3c3daf58 <col:33, col:38> 'int' '<='
    |     |-ImplicitCastExpr 0x563e3c3daf40 <col:33> 'double' <LValueToRValue>
    |     | `-DeclRefExpr 0x563e3c3daf00 <col:33> 'double' lvalue Var 0x563e3c3daa50 'r' 'double'
    |     `-FloatingLiteral 0x563e3c3daf20 <col:38> 'double' 5.000000e+00
    `-ReturnStmt 0x563e3c3daff8 <line:52:3, col:10>
      `-IntegerLiteral 0x563e3c3dafd8 <col:10> 'int' 0
