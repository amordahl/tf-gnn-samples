TranslationUnitDecl 0x559038687df8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5590386886b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x559038688390 '__int128'
|-TypedefDecl 0x559038688728 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5590386883b0 'unsigned __int128'
|-TypedefDecl 0x559038688a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x559038688800 'struct __NSConstantString_tag'
|   `-Record 0x559038688780 '__NSConstantString_tag'
|-TypedefDecl 0x559038688ad8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x559038688a90 'char *'
|   `-BuiltinType 0x559038687e90 'char'
|-TypedefDecl 0x5590386c7a50 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x559038688d70 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x559038688bb0 'struct __va_list_tag'
|     `-Record 0x559038688b30 '__va_list_tag'
|-FunctionDecl 0x5590386c7b08 <./split_1/pnr2_true-unreach-call.i:3:1, col:18> col:5 used ReadFromPort 'int ()'
|-FunctionDecl 0x5590386c7c70 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x5590386c7df0 <line:5:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x5590386c7d28 <col:31> col:34 'int'
|-FunctionDecl 0x5590386c7f40 <line:6:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x5590386c7eb0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x5590386c8180 <col:34, col:79>
|   `-IfStmt 0x5590386c8168 <col:36, col:77>
|     |-UnaryOperator 0x5590386c8040 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x5590386c8028 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x5590386c8008 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x5590386c7fe8 <col:41> 'int' lvalue ParmVar 0x5590386c7eb0 'cond' 'int'
|     `-CompoundStmt 0x5590386c8150 <col:48, col:77>
|       `-LabelStmt 0x5590386c8138 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x5590386c80c8 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x5590386c80b0 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x5590386c8058 <col:57> 'void () __attribute__((noreturn))' Function 0x5590386c7c70 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|-FunctionDecl 0x5590386c8268 <line:7:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-VarDecl 0x5590386c8320 <line:9:1, col:5> col:5 used SIZE 'int'
`-FunctionDecl 0x5590386c83b0 <line:11:1, line:54:1> line:11:5 main 'int ()'
  `-CompoundStmt 0x5590386eddb0 <line:12:1, line:54:1>
    |-BinaryOperator 0x5590386c84f8 <line:13:2, col:31> 'int' '='
    | |-DeclRefExpr 0x5590386c8450 <col:2> 'int' lvalue Var 0x5590386c8320 'SIZE' 'int'
    | `-CallExpr 0x5590386c84d8 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x5590386c84c0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x5590386c8470 <col:9> 'int (void)' Function 0x5590386c8268 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x5590386edd68 <line:14:2, line:52:2>
    | |-BinaryOperator 0x5590386c8570 <line:14:5, col:12> 'int' '>'
    | | |-ImplicitCastExpr 0x5590386c8558 <col:5> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x5590386c8518 <col:5> 'int' lvalue Var 0x5590386c8320 'SIZE' 'int'
    | | `-IntegerLiteral 0x5590386c8538 <col:12> 'int' 1
    | `-CompoundStmt 0x5590386edd10 <line:15:2, line:52:2>
    |   |-DeclStmt 0x5590386c8610 <line:16:3, col:8>
    |   | `-VarDecl 0x5590386c85a8 <col:3, col:7> col:7 used i 'int'
    |   |-DeclStmt 0x5590386c86a8 <line:17:3, col:12>
    |   | `-VarDecl 0x5590386c8640 <col:3, col:7> col:7 used value 'int'
    |   |-DeclStmt 0x5590386c87e0 <line:18:3, col:14>
    |   | `-VarDecl 0x5590386c8778 <col:3, col:13> col:7 used a 'int [SIZE]'
    |   |-DeclStmt 0x5590386c8898 <line:19:3, col:21>
    |   | `-VarDecl 0x5590386c8810 <col:3, col:20> col:7 used DEFAULTVAL 'int' cinit
    |   |   `-IntegerLiteral 0x5590386c8878 <col:20> 'int' 0
    |   |-DeclStmt 0x5590386c8950 <line:20:3, col:20>
    |   | `-VarDecl 0x5590386c88c8 <col:3, col:18> col:7 used FIXEDVAL 'int' cinit
    |   |   `-IntegerLiteral 0x5590386c8930 <col:18> 'int' 10
    |   |-IfStmt 0x5590386ecdf8 <line:22:3, col:33>
    |   | |-BinaryOperator 0x5590386c8a00 <col:6, col:18> 'int' '!='
    |   | | |-BinaryOperator 0x5590386c89c0 <col:6, col:13> 'int' '%'
    |   | | | |-ImplicitCastExpr 0x5590386c89a8 <col:6> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x5590386c8968 <col:6> 'int' lvalue Var 0x5590386c8320 'SIZE' 'int'
    |   | | | `-IntegerLiteral 0x5590386c8988 <col:13> 'int' 2
    |   | | `-IntegerLiteral 0x5590386c89e0 <col:18> 'int' 0
    |   | `-CompoundStmt 0x5590386ecde0 <col:21, col:33>
    |   |   `-ReturnStmt 0x5590386c8a40 <col:23, col:30>
    |   |     `-IntegerLiteral 0x5590386c8a20 <col:30> 'int' 1
    |   |-CallExpr 0x5590386ecf38 <line:24:3, col:34> 'void'
    |   | |-ImplicitCastExpr 0x5590386ecf20 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x5590386ece10 <col:3> 'void (int)' Function 0x5590386c7df0 '__VERIFIER_assume' 'void (int)'
    |   | `-BinaryOperator 0x5590386ecec8 <col:21, col:33> 'int' '=='
    |   |   |-BinaryOperator 0x5590386ece88 <col:21, col:28> 'int' '%'
    |   |   | |-ImplicitCastExpr 0x5590386ece70 <col:21> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x5590386ece30 <col:21> 'int' lvalue Var 0x5590386c8320 'SIZE' 'int'
    |   |   | `-IntegerLiteral 0x5590386ece50 <col:28> 'int' 2
    |   |   `-IntegerLiteral 0x5590386ecea8 <col:33> 'int' 0
    |   |-ForStmt 0x5590386eda00 <line:25:3, line:46:3>
    |   | |-BinaryOperator 0x5590386ecfa0 <line:25:8, col:12> 'int' '='
    |   | | |-DeclRefExpr 0x5590386ecf60 <col:8> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |   | | `-IntegerLiteral 0x5590386ecf80 <col:12> 'int' 1
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x5590386ed070 <col:16, col:26> 'int' '<='
    |   | | |-ImplicitCastExpr 0x5590386ed058 <col:16> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x5590386ecfc0 <col:16> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |   | | `-BinaryOperator 0x5590386ed038 <col:21, col:26> 'int' '/'
    |   | |   |-ImplicitCastExpr 0x5590386ed020 <col:21> 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x5590386ecfe0 <col:21> 'int' lvalue Var 0x5590386c8320 'SIZE' 'int'
    |   | |   `-IntegerLiteral 0x5590386ed000 <col:26> 'int' 2
    |   | |-UnaryOperator 0x5590386ed0b0 <col:30, col:31> 'int' postfix '++'
    |   | | `-DeclRefExpr 0x5590386ed090 <col:30> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |   | `-CompoundStmt 0x5590386ed9d0 <line:26:3, line:46:3>
    |   |   |-BinaryOperator 0x5590386ed178 <line:27:4, col:25> 'int' '='
    |   |   | |-DeclRefExpr 0x5590386ed0c8 <col:4> 'int' lvalue Var 0x5590386c8640 'value' 'int'
    |   |   | `-CallExpr 0x5590386ed158 <col:12, col:25> 'int'
    |   |   |   `-ImplicitCastExpr 0x5590386ed140 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |   |   |     `-DeclRefExpr 0x5590386ed0e8 <col:12> 'int ()' Function 0x5590386c7b08 'ReadFromPort' 'int ()'
    |   |   |-IfStmt 0x5590386ed558 <line:28:4, line:35:4> has_else
    |   |   | |-BinaryOperator 0x5590386ed208 <line:28:7, col:16> 'int' '!='
    |   |   | | |-ImplicitCastExpr 0x5590386ed1d8 <col:7> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x5590386ed198 <col:7> 'int' lvalue Var 0x5590386c8640 'value' 'int'
    |   |   | | `-ImplicitCastExpr 0x5590386ed1f0 <col:16> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x5590386ed1b8 <col:16> 'int' lvalue Var 0x5590386c8810 'DEFAULTVAL' 'int'
    |   |   | |-CompoundStmt 0x5590386ed3c0 <line:29:4, line:31:4>
    |   |   | | `-BinaryOperator 0x5590386ed3a0 <line:30:5, col:18> 'int' '='
    |   |   | |   |-ArraySubscriptExpr 0x5590386ed348 <col:5, col:14> 'int' lvalue
    |   |   | |   | |-ImplicitCastExpr 0x5590386ed330 <col:5> 'int *' <ArrayToPointerDecay>
    |   |   | |   | | `-DeclRefExpr 0x5590386ed228 <col:5> 'int [SIZE]' lvalue Var 0x5590386c8778 'a' 'int [SIZE]'
    |   |   | |   | `-BinaryOperator 0x5590386ed2e0 <col:7, col:13> 'int' '-'
    |   |   | |   |   |-BinaryOperator 0x5590386ed2a0 <col:7, col:9> 'int' '*'
    |   |   | |   |   | |-ImplicitCastExpr 0x5590386ed288 <col:7> 'int' <LValueToRValue>
    |   |   | |   |   | | `-DeclRefExpr 0x5590386ed248 <col:7> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |   |   | |   |   | `-IntegerLiteral 0x5590386ed268 <col:9> 'int' 2
    |   |   | |   |   `-IntegerLiteral 0x5590386ed2c0 <col:13> 'int' 2
    |   |   | |   `-ImplicitCastExpr 0x5590386ed388 <col:18> 'int' <LValueToRValue>
    |   |   | |     `-DeclRefExpr 0x5590386ed368 <col:18> 'int' lvalue Var 0x5590386c8640 'value' 'int'
    |   |   | `-CompoundStmt 0x5590386ed540 <line:33:4, line:35:4>
    |   |   |   `-BinaryOperator 0x5590386ed520 <line:34:5, col:18> 'int' '='
    |   |   |     |-ArraySubscriptExpr 0x5590386ed4c8 <col:5, col:14> 'int' lvalue
    |   |   |     | |-ImplicitCastExpr 0x5590386ed4b0 <col:5> 'int *' <ArrayToPointerDecay>
    |   |   |     | | `-DeclRefExpr 0x5590386ed3d8 <col:5> 'int [SIZE]' lvalue Var 0x5590386c8778 'a' 'int [SIZE]'
    |   |   |     | `-BinaryOperator 0x5590386ed490 <col:7, col:13> 'int' '-'
    |   |   |     |   |-BinaryOperator 0x5590386ed450 <col:7, col:9> 'int' '*'
    |   |   |     |   | |-ImplicitCastExpr 0x5590386ed438 <col:7> 'int' <LValueToRValue>
    |   |   |     |   | | `-DeclRefExpr 0x5590386ed3f8 <col:7> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |   |   |     |   | `-IntegerLiteral 0x5590386ed418 <col:9> 'int' 2
    |   |   |     |   `-IntegerLiteral 0x5590386ed470 <col:13> 'int' 2
    |   |   |     `-ImplicitCastExpr 0x5590386ed508 <col:18> 'int' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x5590386ed4e8 <col:18> 'int' lvalue Var 0x5590386c88c8 'FIXEDVAL' 'int'
    |   |   |-BinaryOperator 0x5590386ed5f8 <line:37:4, col:25> 'int' '='
    |   |   | |-DeclRefExpr 0x5590386ed580 <col:4> 'int' lvalue Var 0x5590386c8640 'value' 'int'
    |   |   | `-CallExpr 0x5590386ed5d8 <col:12, col:25> 'int'
    |   |   |   `-ImplicitCastExpr 0x5590386ed5c0 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |   |   |     `-DeclRefExpr 0x5590386ed5a0 <col:12> 'int ()' Function 0x5590386c7b08 'ReadFromPort' 'int ()'
    |   |   `-IfStmt 0x5590386ed9a8 <line:38:4, line:45:4> has_else
    |   |     |-BinaryOperator 0x5590386ed688 <line:38:7, col:16> 'int' '!='
    |   |     | |-ImplicitCastExpr 0x5590386ed658 <col:7> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x5590386ed618 <col:7> 'int' lvalue Var 0x5590386c8640 'value' 'int'
    |   |     | `-ImplicitCastExpr 0x5590386ed670 <col:16> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x5590386ed638 <col:16> 'int' lvalue Var 0x5590386c8810 'DEFAULTVAL' 'int'
    |   |     |-CompoundStmt 0x5590386ed810 <line:39:4, line:41:4>
    |   |     | `-BinaryOperator 0x5590386ed7f0 <line:40:5, col:18> 'int' '='
    |   |     |   |-ArraySubscriptExpr 0x5590386ed798 <col:5, col:14> 'int' lvalue
    |   |     |   | |-ImplicitCastExpr 0x5590386ed780 <col:5> 'int *' <ArrayToPointerDecay>
    |   |     |   | | `-DeclRefExpr 0x5590386ed6a8 <col:5> 'int [SIZE]' lvalue Var 0x5590386c8778 'a' 'int [SIZE]'
    |   |     |   | `-BinaryOperator 0x5590386ed760 <col:7, col:13> 'int' '-'
    |   |     |   |   |-BinaryOperator 0x5590386ed720 <col:7, col:9> 'int' '*'
    |   |     |   |   | |-ImplicitCastExpr 0x5590386ed708 <col:7> 'int' <LValueToRValue>
    |   |     |   |   | | `-DeclRefExpr 0x5590386ed6c8 <col:7> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |   |     |   |   | `-IntegerLiteral 0x5590386ed6e8 <col:9> 'int' 2
    |   |     |   |   `-IntegerLiteral 0x5590386ed740 <col:13> 'int' 1
    |   |     |   `-ImplicitCastExpr 0x5590386ed7d8 <col:18> 'int' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x5590386ed7b8 <col:18> 'int' lvalue Var 0x5590386c8640 'value' 'int'
    |   |     `-CompoundStmt 0x5590386ed990 <line:43:4, line:45:4>
    |   |       `-BinaryOperator 0x5590386ed970 <line:44:5, col:18> 'int' '='
    |   |         |-ArraySubscriptExpr 0x5590386ed918 <col:5, col:14> 'int' lvalue
    |   |         | |-ImplicitCastExpr 0x5590386ed900 <col:5> 'int *' <ArrayToPointerDecay>
    |   |         | | `-DeclRefExpr 0x5590386ed828 <col:5> 'int [SIZE]' lvalue Var 0x5590386c8778 'a' 'int [SIZE]'
    |   |         | `-BinaryOperator 0x5590386ed8e0 <col:7, col:13> 'int' '-'
    |   |         |   |-BinaryOperator 0x5590386ed8a0 <col:7, col:9> 'int' '*'
    |   |         |   | |-ImplicitCastExpr 0x5590386ed888 <col:7> 'int' <LValueToRValue>
    |   |         |   | | `-DeclRefExpr 0x5590386ed848 <col:7> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |   |         |   | `-IntegerLiteral 0x5590386ed868 <col:9> 'int' 2
    |   |         |   `-IntegerLiteral 0x5590386ed8c0 <col:13> 'int' 1
    |   |         `-ImplicitCastExpr 0x5590386ed958 <col:18> 'int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x5590386ed938 <col:18> 'int' lvalue Var 0x5590386c88c8 'FIXEDVAL' 'int'
    |   `-ForStmt 0x5590386edcd8 <line:48:3, line:51:3>
    |     |-BinaryOperator 0x5590386eda78 <line:48:9, col:13> 'int' '='
    |     | |-DeclRefExpr 0x5590386eda38 <col:9> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |     | `-IntegerLiteral 0x5590386eda58 <col:13> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x5590386edb08 <col:16, col:20> 'int' '<'
    |     | |-ImplicitCastExpr 0x5590386edad8 <col:16> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x5590386eda98 <col:16> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |     | `-ImplicitCastExpr 0x5590386edaf0 <col:20> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x5590386edab8 <col:20> 'int' lvalue Var 0x5590386c8320 'SIZE' 'int'
    |     |-UnaryOperator 0x5590386edb48 <col:26, col:27> 'int' postfix '++'
    |     | `-DeclRefExpr 0x5590386edb28 <col:26> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |     `-CompoundStmt 0x5590386edcc0 <line:49:3, line:51:3>
    |       `-CallExpr 0x5590386edc98 <line:50:4, col:38> 'void'
    |         |-ImplicitCastExpr 0x5590386edc80 <col:4> 'void (*)(int)' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x5590386edb60 <col:4> 'void (int)' Function 0x5590386c7f40 '__VERIFIER_assert' 'void (int)'
    |         `-BinaryOperator 0x5590386edc60 <col:22, col:28> 'int' '!='
    |           |-ImplicitCastExpr 0x5590386edc30 <col:22, col:25> 'int' <LValueToRValue>
    |           | `-ArraySubscriptExpr 0x5590386edbf0 <col:22, col:25> 'int' lvalue
    |           |   |-ImplicitCastExpr 0x5590386edbc0 <col:22> 'int *' <ArrayToPointerDecay>
    |           |   | `-DeclRefExpr 0x5590386edb80 <col:22> 'int [SIZE]' lvalue Var 0x5590386c8778 'a' 'int [SIZE]'
    |           |   `-ImplicitCastExpr 0x5590386edbd8 <col:24> 'int' <LValueToRValue>
    |           |     `-DeclRefExpr 0x5590386edba0 <col:24> 'int' lvalue Var 0x5590386c85a8 'i' 'int'
    |           `-ImplicitCastExpr 0x5590386edc48 <col:28> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x5590386edc10 <col:28> 'int' lvalue Var 0x5590386c8810 'DEFAULTVAL' 'int'
    `-ReturnStmt 0x5590386edda0 <line:53:2, col:9>
      `-IntegerLiteral 0x5590386edd80 <col:9> 'int' 1
