TranslationUnitDecl 0x55946e884388 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55946e884c48 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55946e884920 '__int128'
|-TypedefDecl 0x55946e884cb8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55946e884940 'unsigned __int128'
|-TypedefDecl 0x55946e884fc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55946e884d90 'struct __NSConstantString_tag'
|   `-Record 0x55946e884d10 '__NSConstantString_tag'
|-TypedefDecl 0x55946e885068 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55946e885020 'char *'
|   `-BuiltinType 0x55946e884420 'char'
|-TypedefDecl 0x55946e8c3b60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55946e885300 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55946e885140 'struct __va_list_tag'
|     `-Record 0x55946e8850c0 '__va_list_tag'
|-FunctionDecl 0x55946e8c3c40 <./split_0/standard_partition_original_true-unreach-call_ground.i:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55946e8c3e10 <line:2:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55946e8c3d40 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x55946e8c4050 <col:34, col:79>
|   `-IfStmt 0x55946e8c4038 <col:36, col:77>
|     |-UnaryOperator 0x55946e8c3f10 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x55946e8c3ef8 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x55946e8c3ed8 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x55946e8c3eb8 <col:41> 'int' lvalue ParmVar 0x55946e8c3d40 'cond' 'int'
|     `-CompoundStmt 0x55946e8c4020 <col:48, col:77>
|       `-LabelStmt 0x55946e8c4008 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x55946e8c3f98 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x55946e8c3f80 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x55946e8c3f28 <col:57> 'void () __attribute__((noreturn))' Function 0x55946e8c3c40 '__VERIFIER_error' 'void () __attribute__((noreturn))'
`-FunctionDecl 0x55946e8c40c8 <line:3:1, line:29:1> line:3:5 main 'int ()'
  `-CompoundStmt 0x55946e8e97a0 <col:13, line:29:1>
    |-DeclStmt 0x55946e8c4270 <line:4:3, col:17>
    | `-VarDecl 0x55946e8c4208 <col:3, col:16> col:7 used aa 'int [100000]'
    |-DeclStmt 0x55946e8c4328 <line:5:3, col:12>
    | `-VarDecl 0x55946e8c42a0 <col:3, col:11> col:7 used a 'int' cinit
    |   `-IntegerLiteral 0x55946e8c4308 <col:11> 'int' 0
    |-DeclStmt 0x55946e8c43e0 <line:6:3, col:12>
    | `-VarDecl 0x55946e8c4358 <col:3, col:11> col:7 used b 'int' cinit
    |   `-IntegerLiteral 0x55946e8c43c0 <col:11> 'int' 0
    |-DeclStmt 0x55946e8c4498 <line:7:3, col:12>
    | `-VarDecl 0x55946e8c4410 <col:3, col:11> col:7 used c 'int' cinit
    |   `-IntegerLiteral 0x55946e8c4478 <col:11> 'int' 0
    |-DeclStmt 0x55946e8c4578 <line:8:3, col:17>
    | `-VarDecl 0x55946e8c4510 <col:3, col:16> col:7 used bb 'int [100000]'
    |-DeclStmt 0x55946e8c4658 <line:9:3, col:17>
    | `-VarDecl 0x55946e8c45f0 <col:3, col:16> col:7 used cc 'int [100000]'
    |-WhileStmt 0x55946e8e9100 <line:10:3, line:20:3>
    | |-BinaryOperator 0x55946e8c46c8 <line:10:10, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x55946e8c46b0 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55946e8c4670 <col:10> 'int' lvalue Var 0x55946e8c42a0 'a' 'int'
    | | `-IntegerLiteral 0x55946e8c4690 <col:14> 'int' 100000
    | `-CompoundStmt 0x55946e8e90e0 <col:23, line:20:3>
    |   |-IfStmt 0x55946e8e9000 <line:11:5, line:18:5> has_else
    |   | |-BinaryOperator 0x55946e8c47e8 <line:11:9, col:20> 'int' '>='
    |   | | |-ImplicitCastExpr 0x55946e8c47d0 <col:9, col:15> 'int' <LValueToRValue>
    |   | | | `-ArraySubscriptExpr 0x55946e8c4790 <col:9, col:15> 'int' lvalue
    |   | | |   |-ImplicitCastExpr 0x55946e8c4760 <col:9> 'int *' <ArrayToPointerDecay>
    |   | | |   | `-DeclRefExpr 0x55946e8c46e8 <col:9> 'int [100000]' lvalue Var 0x55946e8c4208 'aa' 'int [100000]'
    |   | | |   `-ImplicitCastExpr 0x55946e8c4778 <col:13> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x55946e8c4708 <col:13> 'int' lvalue Var 0x55946e8c42a0 'a' 'int'
    |   | | `-IntegerLiteral 0x55946e8c47b0 <col:20> 'int' 0
    |   | |-CompoundStmt 0x55946e8c4a18 <col:24, line:14:5>
    |   | | |-BinaryOperator 0x55946e8c4940 <line:12:7, col:23> 'int' '='
    |   | | | |-ArraySubscriptExpr 0x55946e8c4878 <col:7, col:13> 'int' lvalue
    |   | | | | |-ImplicitCastExpr 0x55946e8c4848 <col:7> 'int *' <ArrayToPointerDecay>
    |   | | | | | `-DeclRefExpr 0x55946e8c4808 <col:7> 'int [100000]' lvalue Var 0x55946e8c4510 'bb' 'int [100000]'
    |   | | | | `-ImplicitCastExpr 0x55946e8c4860 <col:11> 'int' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x55946e8c4828 <col:11> 'int' lvalue Var 0x55946e8c4358 'b' 'int'
    |   | | | `-ImplicitCastExpr 0x55946e8c4928 <col:17, col:23> 'int' <LValueToRValue>
    |   | | |   `-ArraySubscriptExpr 0x55946e8c4908 <col:17, col:23> 'int' lvalue
    |   | | |     |-ImplicitCastExpr 0x55946e8c48d8 <col:17> 'int *' <ArrayToPointerDecay>
    |   | | |     | `-DeclRefExpr 0x55946e8c4898 <col:17> 'int [100000]' lvalue Var 0x55946e8c4208 'aa' 'int [100000]'
    |   | | |     `-ImplicitCastExpr 0x55946e8c48f0 <col:21> 'int' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x55946e8c48b8 <col:21> 'int' lvalue Var 0x55946e8c42a0 'a' 'int'
    |   | | `-BinaryOperator 0x55946e8c49f8 <line:13:7, col:15> 'int' '='
    |   | |   |-DeclRefExpr 0x55946e8c4960 <col:7> 'int' lvalue Var 0x55946e8c4358 'b' 'int'
    |   | |   `-BinaryOperator 0x55946e8c49d8 <col:11, col:15> 'int' '+'
    |   | |     |-ImplicitCastExpr 0x55946e8c49c0 <col:11> 'int' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x55946e8c4980 <col:11> 'int' lvalue Var 0x55946e8c4358 'b' 'int'
    |   | |     `-IntegerLiteral 0x55946e8c49a0 <col:15> 'int' 1
    |   | `-CompoundStmt 0x55946e8e8fe0 <line:15:10, line:18:5>
    |   |   |-BinaryOperator 0x55946e8e8f08 <line:16:7, col:23> 'int' '='
    |   |   | |-ArraySubscriptExpr 0x55946e8c4aa8 <col:7, col:13> 'int' lvalue
    |   |   | | |-ImplicitCastExpr 0x55946e8c4a78 <col:7> 'int *' <ArrayToPointerDecay>
    |   |   | | | `-DeclRefExpr 0x55946e8c4a38 <col:7> 'int [100000]' lvalue Var 0x55946e8c45f0 'cc' 'int [100000]'
    |   |   | | `-ImplicitCastExpr 0x55946e8c4a90 <col:11> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x55946e8c4a58 <col:11> 'int' lvalue Var 0x55946e8c4410 'c' 'int'
    |   |   | `-ImplicitCastExpr 0x55946e8e8ef0 <col:17, col:23> 'int' <LValueToRValue>
    |   |   |   `-ArraySubscriptExpr 0x55946e8c4b38 <col:17, col:23> 'int' lvalue
    |   |   |     |-ImplicitCastExpr 0x55946e8c4b08 <col:17> 'int *' <ArrayToPointerDecay>
    |   |   |     | `-DeclRefExpr 0x55946e8c4ac8 <col:17> 'int [100000]' lvalue Var 0x55946e8c4208 'aa' 'int [100000]'
    |   |   |     `-ImplicitCastExpr 0x55946e8c4b20 <col:21> 'int' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x55946e8c4ae8 <col:21> 'int' lvalue Var 0x55946e8c42a0 'a' 'int'
    |   |   `-BinaryOperator 0x55946e8e8fc0 <line:17:7, col:15> 'int' '='
    |   |     |-DeclRefExpr 0x55946e8e8f28 <col:7> 'int' lvalue Var 0x55946e8c4410 'c' 'int'
    |   |     `-BinaryOperator 0x55946e8e8fa0 <col:11, col:15> 'int' '+'
    |   |       |-ImplicitCastExpr 0x55946e8e8f88 <col:11> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x55946e8e8f48 <col:11> 'int' lvalue Var 0x55946e8c4410 'c' 'int'
    |   |       `-IntegerLiteral 0x55946e8e8f68 <col:15> 'int' 1
    |   `-BinaryOperator 0x55946e8e90c0 <line:19:5, col:13> 'int' '='
    |     |-DeclRefExpr 0x55946e8e9028 <col:5> 'int' lvalue Var 0x55946e8c42a0 'a' 'int'
    |     `-BinaryOperator 0x55946e8e90a0 <col:9, col:13> 'int' '+'
    |       |-ImplicitCastExpr 0x55946e8e9088 <col:9> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55946e8e9048 <col:9> 'int' lvalue Var 0x55946e8c42a0 'a' 'int'
    |       `-IntegerLiteral 0x55946e8e9068 <col:13> 'int' 1
    |-DeclStmt 0x55946e8e91a0 <line:21:3, col:8>
    | `-VarDecl 0x55946e8e9138 <col:3, col:7> col:7 used x 'int'
    |-ForStmt 0x55946e8e9478 <line:22:3, line:24:3>
    | |-BinaryOperator 0x55946e8e91f8 <line:22:9, col:13> 'int' '='
    | | |-DeclRefExpr 0x55946e8e91b8 <col:9> 'int' lvalue Var 0x55946e8e9138 'x' 'int'
    | | `-IntegerLiteral 0x55946e8e91d8 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55946e8e9288 <col:17, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x55946e8e9258 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55946e8e9218 <col:17> 'int' lvalue Var 0x55946e8e9138 'x' 'int'
    | | `-ImplicitCastExpr 0x55946e8e9270 <col:21> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55946e8e9238 <col:21> 'int' lvalue Var 0x55946e8c4358 'b' 'int'
    | |-UnaryOperator 0x55946e8e92c8 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x55946e8e92a8 <col:25> 'int' lvalue Var 0x55946e8e9138 'x' 'int'
    | `-CompoundStmt 0x55946e8e9460 <col:31, line:24:3>
    |   `-CallExpr 0x55946e8e9438 <line:23:5, col:37> 'void'
    |     |-ImplicitCastExpr 0x55946e8e9420 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x55946e8e92e0 <col:5> 'void (int)' Function 0x55946e8c3e10 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x55946e8e93c8 <col:24, col:35> 'int' '>='
    |       |-ImplicitCastExpr 0x55946e8e93b0 <col:24, col:30> 'int' <LValueToRValue>
    |       | `-ArraySubscriptExpr 0x55946e8e9370 <col:24, col:30> 'int' lvalue
    |       |   |-ImplicitCastExpr 0x55946e8e9340 <col:24> 'int *' <ArrayToPointerDecay>
    |       |   | `-DeclRefExpr 0x55946e8e9300 <col:24> 'int [100000]' lvalue Var 0x55946e8c4510 'bb' 'int [100000]'
    |       |   `-ImplicitCastExpr 0x55946e8e9358 <col:28> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55946e8e9320 <col:28> 'int' lvalue Var 0x55946e8e9138 'x' 'int'
    |       `-IntegerLiteral 0x55946e8e9390 <col:35> 'int' 0
    |-ForStmt 0x55946e8e9738 <line:25:3, line:27:3>
    | |-BinaryOperator 0x55946e8e94f0 <line:25:9, col:13> 'int' '='
    | | |-DeclRefExpr 0x55946e8e94b0 <col:9> 'int' lvalue Var 0x55946e8e9138 'x' 'int'
    | | `-IntegerLiteral 0x55946e8e94d0 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55946e8e9580 <col:17, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x55946e8e9550 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55946e8e9510 <col:17> 'int' lvalue Var 0x55946e8e9138 'x' 'int'
    | | `-ImplicitCastExpr 0x55946e8e9568 <col:21> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55946e8e9530 <col:21> 'int' lvalue Var 0x55946e8c4410 'c' 'int'
    | |-UnaryOperator 0x55946e8e95c0 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x55946e8e95a0 <col:25> 'int' lvalue Var 0x55946e8e9138 'x' 'int'
    | `-CompoundStmt 0x55946e8e9720 <col:31, line:27:3>
    |   `-CallExpr 0x55946e8e96f8 <line:26:5, col:36> 'void'
    |     |-ImplicitCastExpr 0x55946e8e96e0 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x55946e8e95d8 <col:5> 'void (int)' Function 0x55946e8c3e10 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x55946e8e96c0 <col:24, col:34> 'int' '<'
    |       |-ImplicitCastExpr 0x55946e8e96a8 <col:24, col:30> 'int' <LValueToRValue>
    |       | `-ArraySubscriptExpr 0x55946e8e9668 <col:24, col:30> 'int' lvalue
    |       |   |-ImplicitCastExpr 0x55946e8e9638 <col:24> 'int *' <ArrayToPointerDecay>
    |       |   | `-DeclRefExpr 0x55946e8e95f8 <col:24> 'int [100000]' lvalue Var 0x55946e8c45f0 'cc' 'int [100000]'
    |       |   `-ImplicitCastExpr 0x55946e8e9650 <col:28> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55946e8e9618 <col:28> 'int' lvalue Var 0x55946e8e9138 'x' 'int'
    |       `-IntegerLiteral 0x55946e8e9688 <col:34> 'int' 0
    `-ReturnStmt 0x55946e8e9790 <line:28:3, col:10>
      `-IntegerLiteral 0x55946e8e9770 <col:10> 'int' 0
