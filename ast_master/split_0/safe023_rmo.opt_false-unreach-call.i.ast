TranslationUnitDecl 0x55833f57fe18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55833f5806d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55833f5803b0 '__int128'
|-TypedefDecl 0x55833f580748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55833f5803d0 'unsigned __int128'
|-TypedefDecl 0x55833f580a50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55833f580820 'struct __NSConstantString_tag'
|   `-Record 0x55833f5807a0 '__NSConstantString_tag'
|-TypedefDecl 0x55833f580af8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55833f580ab0 'char *'
|   `-BuiltinType 0x55833f57feb0 'char'
|-TypedefDecl 0x55833f5bf650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55833f580d90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55833f580bd0 'struct __va_list_tag'
|     `-Record 0x55833f580b50 '__va_list_tag'
|-FunctionDecl 0x55833f5bf770 <./split_0/safe023_rmo.opt_false-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x55833f5bf940 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55833f5bf870 <col:31> col:34 'int'
|-FunctionDecl 0x55833f5bfab8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x55833f5bfbe0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55833f5bfd28 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55833f5bfc98 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x55833f5bff58 <col:40, col:99>
|   |-IfStmt 0x55833f5bff28 <col:42, col:88>
|   | |-UnaryOperator 0x55833f5bfe08 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x55833f5bfdf0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55833f5bfdd0 <col:47> 'int' lvalue ParmVar 0x55833f5bfc98 'expression' 'int'
|   | `-CompoundStmt 0x55833f5bff10 <col:59, col:88>
|   |   `-LabelStmt 0x55833f5bfef8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x55833f5bfe88 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x55833f5bfe70 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x55833f5bfe20 <col:68> 'void () __attribute__((noreturn))' Function 0x55833f5bfbe0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x55833f5bff40 <col:89>
|   `-ReturnStmt 0x55833f5bff48 <col:91>
|-FunctionDecl 0x55833f5bffa0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x55833f5c0060 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x55833f5c03e0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55833f5c0118 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x55833f5c0198 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x55833f5c0218 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55833f5c0298 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55833f5c04a0 <line:11:22>
|-FunctionDecl 0x55833f5e6520 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55833f5c0510 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x55833f5c0590 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x55833f5e6350 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55833f5e63d0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55833f5e65e0 <line:14:22>
|-FunctionDecl 0x55833f5e6890 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55833f5e6650 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x55833f5e66d0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x55833f5e6750 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x55833f5e6948 <line:16:22>
|-TypedefDecl 0x55833f5e69b8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x55833f57ff70 'unsigned char'
|-TypedefDecl 0x55833f5e6a28 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x55833f57ff90 'unsigned short'
|-TypedefDecl 0x55833f5e6a98 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-TypedefDecl 0x55833f5e6b08 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e6b78 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x55833f57fed0 'signed char'
|-TypedefDecl 0x55833f5e6be8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x55833f57ff70 'unsigned char'
|-TypedefDecl 0x55833f5e6c58 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x55833f57fef0 'short'
|-TypedefDecl 0x55833f5e6cc8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x55833f57ff90 'unsigned short'
|-TypedefDecl 0x55833f5e6d38 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x55833f57ff10 'int'
|-TypedefDecl 0x55833f5e6da8 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-TypedefDecl 0x55833f5e6e18 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e6e88 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e6ef8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e6f68 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e6fd8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e7048 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-TypedefDecl 0x55833f5e70b8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-TypedefDecl 0x55833f5e7128 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e7198 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e7208 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-TypedefDecl 0x55833f5e7278 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e72e8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e7378 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e73e8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x55833f57ff10 'int'
|-RecordDecl 0x55833f5e7440 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x55833f5e7588 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x55833f5e7640 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x55833f5e75e0 'struct __fsid_t' sugar
|   `-RecordType 0x55833f5e74c0 '__fsid_t'
|     `-Record 0x55833f5e7440 ''
|-TypedefDecl 0x55833f5e76c8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e7738 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e77a8 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e7818 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-TypedefDecl 0x55833f5e7888 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e78f8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-TypedefDecl 0x55833f5e7968 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e79d8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x55833f57ff10 'int'
|-TypedefDecl 0x55833f5e7a48 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x55833f57ff10 'int'
|-TypedefDecl 0x55833f5e7ab8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x55833f57ff10 'int'
|-TypedefDecl 0x55833f5e7b28 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x55833f580630 'void *'
|   `-BuiltinType 0x55833f57fe70 'void'
|-TypedefDecl 0x55833f5e7b98 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e7c08 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e7c78 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e7ce8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e7d58 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e7dc8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e7e38 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e7ea8 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e7f18 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e7f88 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e7ff8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e8088 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x55833f5e8050 '__off64_t' sugar
|   |-Typedef 0x55833f5e7378 '__off64_t'
|   `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e8180 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x55833f5e8140 '__quad_t *'
|   `-TypedefType 0x55833f5e80e0 '__quad_t' sugar
|     |-Typedef 0x55833f5e6ef8 '__quad_t'
|     `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e81f0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x55833f580ab0 'char *'
|   `-BuiltinType 0x55833f57feb0 'char'
|-TypedefDecl 0x55833f5e8260 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5e82d0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-FunctionDecl 0x55833f5e9458 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x55833f5e9380 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x55833f5e9768 <line:72:1, line:74:1>
|   `-ReturnStmt 0x55833f5e9758 <line:73:3, col:34>
|     `-CallExpr 0x55833f5e9718 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x55833f5e9700 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55833f5e9690 <col:10> '<builtin fn type>' Function 0x55833f5e9500 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x55833f5e9740 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55833f5e96b0 <col:29> 'unsigned int' lvalue ParmVar 0x55833f5e9380 '__bsx' 'unsigned int'
|-FunctionDecl 0x55833f5e9500 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x55833f5e95a0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x55833f5e9610 <col:10> Implicit
| `-ConstAttr 0x55833f5e9668 <col:10> Implicit
|-FunctionDecl 0x55833f5e98c0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x55833f5e97b8 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x55833f5e9bd8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x55833f5e9bc8 <line:78:3, col:34>
|     `-CallExpr 0x55833f5e9b88 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x55833f5e9b70 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55833f5e9af8 <col:10> '<builtin fn type>' Function 0x55833f5e9968 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x55833f5e9bb0 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55833f5e9b18 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x55833f5e97b8 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x55833f5e9968 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x55833f5e9a08 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x55833f5e9a78 <col:10> Implicit
| `-ConstAttr 0x55833f5e9ad0 <col:10> Implicit
|-TypedefDecl 0x55833f5e9c08 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-TypedefDecl 0x55833f5e9c98 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x55833f5e9c60 '__time_t' sugar
|   |-Typedef 0x55833f5e7888 '__time_t'
|   `-BuiltinType 0x55833f57ff30 'long'
|-RecordDecl 0x55833f5e9cf0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x55833f5e9da8 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x55833f5e9e38 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x55833f5e9ec8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x55833f5e9e90 '__pid_t' sugar
|   |-Typedef 0x55833f5e73e8 '__pid_t'
|   `-BuiltinType 0x55833f57ff10 'int'
|-RecordDecl 0x55833f5e9f20 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x55833f5e9fe0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x55833f5ea030 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x55833f5ea0f0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x55833f5ea158 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-RecordDecl 0x55833f5ea1b0 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x55833f5eb480 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x55833f5eb530 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x55833f5eb4d0 'struct cpu_set_t' sugar
|   `-RecordType 0x55833f5ea230 'cpu_set_t'
|     `-Record 0x55833f5ea1b0 ''
|-FunctionDecl 0x55833f5eb808 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x55833f5eb5d8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55833f5eb6e0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x55833f5eb8b8 <line:108:19>
|-FunctionDecl 0x55833f5eba90 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x55833f5eb920 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x55833f5ebb38 <col:69>
|-FunctionDecl 0x55833f5ebcb0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x55833f5ebba0 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x55833f5ebd58 <col:64>
|-FunctionDecl 0x55833f5ec018 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x55833f5ebdc0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55833f5ebef8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55833f5ec0c8 <line:114:22>
|-FunctionDecl 0x55833f5ec3b0 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x55833f5ec130 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55833f5ec228 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x55833f5ec460 <col:88>
|-FunctionDecl 0x55833f5ec718 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55833f5ec4c8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55833f5ec548 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x55833f5ec5d8 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55833f5ec7d0 <col:62>
|-FunctionDecl 0x55833f5ec948 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x55833f5ec838 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x55833f5ec9f0 <col:63>
|-FunctionDecl 0x55833f5ecb18 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x55833f5ecbb8 <col:47>
|-FunctionDecl 0x55833f5eccc0 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x55833f5ecc28 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55833f5ecd68 <col:69>
|-FunctionDecl 0x55833f5ece70 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x55833f5ecdd8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55833f5ecf18 <col:69>
|-FunctionDecl 0x55833f5ed1d8 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55833f5ecf80 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55833f5ed0b8 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x55833f5ed288 <col:88>
|-TypedefDecl 0x55833f5ed318 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x55833f5ed2e0 '__clock_t' sugar
|   |-Typedef 0x55833f5e76c8 '__clock_t'
|   `-BuiltinType 0x55833f57ff30 'long'
|-TypedefDecl 0x55833f5ed3c0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x55833f5ed370 '__clockid_t' sugar
|   |-Typedef 0x55833f5e7ab8 '__clockid_t'
|   `-BuiltinType 0x55833f57ff10 'int'
|-TypedefDecl 0x55833f5ed458 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x55833f5ed420 '__timer_t' sugar
|   |-Typedef 0x55833f5e7b28 '__timer_t'
|   `-PointerType 0x55833f580630 'void *'
|     `-BuiltinType 0x55833f57fe70 'void'
|-RecordDecl 0x55833f5ed4b0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x55833f5ed570 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x55833f5ed5d8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x55833f5ed640 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x55833f5ed6a8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x55833f5ed710 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x55833f5ed778 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x55833f5ed7e0 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x55833f5ed848 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x55833f5ed8b0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x55833f5ed918 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x55833f5ed980 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x55833f5ed9d0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x55833f5eda98 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x55833f5edb08 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x55833f5edbb0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x55833f5edd80 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x55833f5ede20 <col:45>
|-FunctionDecl 0x55833f5ee000 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x55833f5edef0 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x55833f5ee0a8 <col:54>
|-FunctionDecl 0x55833f5ee2a8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x55833f5ee110 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x55833f5ee188 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x55833f5ee358 <line:158:22>
| `-ConstAttr 0x55833f5eeff0 <col:63>
|-FunctionDecl 0x55833f5ef1f0 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55833f5ef0e8 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55833f5ef298 <col:56>
|-FunctionDecl 0x55833f5ef640 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x55833f5ef308 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x55833f5ef380 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55833f5ef400 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x55833f5ef4f8 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x55833f5ef700 <col:54>
|-RecordDecl 0x55833f5ef758 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x55833f5ef808 parent 0x55833f57fe18 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x55833f5efa68 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x55833f5efb08 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x55833f5efb70 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x55833f5efbd8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x55833f5efcc8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x55833f5efde8 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x55833f5efd90 'struct __locale_struct *'
|   `-ElaboratedType 0x55833f5efd20 'struct __locale_struct' sugar
|     `-RecordType 0x55833f5ef7e0 'struct __locale_struct'
|       `-Record 0x55833f5ef758 '__locale_struct'
|-TypedefDecl 0x55833f5efe98 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x55833f5efe60 '__locale_t' sugar
|   |-Typedef 0x55833f5efde8 '__locale_t'
|   `-PointerType 0x55833f5efd90 'struct __locale_struct *'
|     `-ElaboratedType 0x55833f5efd20 'struct __locale_struct' sugar
|       `-RecordType 0x55833f5ef7e0 'struct __locale_struct'
|         `-Record 0x55833f5ef758 '__locale_struct'
|-FunctionDecl 0x55833f5f12a0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x55833f5eff08 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x55833f5eff80 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55833f5f1028 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x55833f5f10b8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55833f5f1130 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x55833f5f1368 <col:40>
|-FunctionDecl 0x55833f5f1558 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55833f5f1430 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x55833f5f1600 <col:66>
|-FunctionDecl 0x55833f5f1710 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55833f5f1668 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x55833f5f17b8 <col:69>
|-FunctionDecl 0x55833f5f19e8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55833f5f1820 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55833f5f18b0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55833f5f1a98 <col:52>
|-FunctionDecl 0x55833f5f1c40 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55833f5f1b00 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55833f5f1b90 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55833f5f1cf0 <col:55>
|-FunctionDecl 0x55833f5f1e88 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x55833f5f1d70 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x55833f5f1f30 <col:62>
|-FunctionDecl 0x55833f5f2168 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x55833f5f1f98 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x55833f5f2210 <col:60>
|-FunctionDecl 0x55833f5f2438 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55833f5f2290 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55833f5f2310 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x55833f5f24e8 <col:44>
|-FunctionDecl 0x55833f5f26f8 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55833f5f2550 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55833f5f25d0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x55833f5f27a8 <col:49>
|-VarDecl 0x55833f5f28a8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x55833f5f2928 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x55833f5f29a8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x55833f5f2a70 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x55833f5f2ba0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x55833f5f2c40 <col:42>
|-VarDecl 0x55833f5f2cb0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x55833f5f2d30 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x55833f5f2eb8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x55833f5f2da8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x55833f5f2f60 <col:57>
|-FunctionDecl 0x55833f5f30d0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55833f5f2fe0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55833f5f3178 <col:56>
|-FunctionDecl 0x55833f5f3288 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55833f5f31f8 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x55833f5f3330 <col:59>
|-FunctionDecl 0x55833f5f3438 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x55833f5f33a0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x55833f5f34e0 <col:48>
| `-ConstAttr 0x55833f5f3538 <col:89>
|-FunctionDecl 0x55833f5f3798 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55833f5f35e8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x55833f5f3678 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x55833f5f39f8 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55833f5f3888 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55833f5f3918 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x55833f5f3aa8 <col:88>
|-FunctionDecl 0x55833f5f3c40 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55833f5f3b10 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55833f5f3ba0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x55833f5f3cf0 <col:88>
|-FunctionDecl 0x55833f5f3f08 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x55833f5f3d58 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55833f5f3de8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x55833f5f3fb8 <line:209:22>
|-FunctionDecl 0x55833f5f4358 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55833f5f4020 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55833f5f40e0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x55833f5f4170 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x55833f5f4200 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x55833f5f4658 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x55833f5f4458 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x55833f5f4530 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x55833f5f4708 <col:85>
|-FunctionDecl 0x55833f5f4af8 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x55833f5f4770 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55833f5f48a8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x55833f5f49b0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x55833f5f4bb0 <col:52>
|-FunctionDecl 0x55833f5f4d28 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x55833f5f4c18 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55833f5f4dd0 <col:61>
|-FunctionDecl 0x55833f5f5248 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x55833f5f4e38 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55833f5f4eb8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x55833f5f4fe8 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x55833f5f50f0 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x55833f5f5308 <col:62>
|-FunctionDecl 0x55833f5f5528 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x55833f5f5370 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55833f5f5400 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x55833f5f55d8 <line:222:22>
|-FunctionDecl 0x55833f5f56d8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x55833f5f5640 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55833f5f5780 <col:65>
|-TypedefDecl 0x55833f5f57f0 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x55833f57ffd0 'unsigned long'
|-RecordDecl 0x55833f5f5848 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x55833f5f5990 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55833f5f59f8 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55833f5f5aa8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x55833f5f5a50 'union pthread_attr_t' sugar
|   `-RecordType 0x55833f5f58d0 'union pthread_attr_t'
|     `-Record 0x55833f5f5848 'pthread_attr_t'
|-RecordDecl 0x55833f5f5b00 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x55833f5f5c78 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x55833f5f5cf0 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x55833f5f5da0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x55833f5f5d40 'struct __pthread_internal_list' sugar
|   `-RecordType 0x55833f5f5b80 'struct __pthread_internal_list'
|     `-Record 0x55833f5f5b00 '__pthread_internal_list'
|-RecordDecl 0x55833f5f5e10 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x55833f5f5eb8 parent 0x55833f57fe18 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x55833f5f5f90 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55833f5f5ff8 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x55833f5f6060 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x55833f5fa110 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x55833f5fa178 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x55833f5fa1e0 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x55833f5fa268 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x55833f5fa320 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x55833f5fa410 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x55833f5fa478 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55833f5fa600 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x55833f5fa5a0 'union pthread_mutex_t' sugar
|   `-RecordType 0x55833f5f5e90 'pthread_mutex_t'
|     `-Record 0x55833f5f5e10 ''
|-RecordDecl 0x55833f5fa670 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x55833f5fa7b0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55833f5fa818 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55833f5fa8d0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x55833f5fa870 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x55833f5fa6f0 'pthread_mutexattr_t'
|     `-Record 0x55833f5fa670 ''
|-RecordDecl 0x55833f5fa940 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x55833f5fa9e8 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x55833f5faab0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55833f5fab18 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x55833f5fab80 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x55833f5fabe8 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x55833f5fac50 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x55833f5facb8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x55833f5fad20 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x55833f5fad88 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x55833f5fae40 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at ./split_0/safe023_rmo.opt_false-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at ./split_0/safe023_rmo.opt_false-unreach-call.i:259:3)'
| |-FieldDecl 0x55833f5faf30 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x55833f5faf98 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x55833f5fc130 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x55833f5fb070 'union pthread_cond_t' sugar
|   `-RecordType 0x55833f5fa9c0 'pthread_cond_t'
|     `-Record 0x55833f5fa940 ''
|-RecordDecl 0x55833f5fc1a0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x55833f5fc2a0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55833f5fc308 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55833f5fc3c0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x55833f5fc360 'union pthread_condattr_t' sugar
|   `-RecordType 0x55833f5fc220 'pthread_condattr_t'
|     `-Record 0x55833f5fc1a0 ''
|-TypedefDecl 0x55833f5fc448 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x55833f57ffb0 'unsigned int'
|-TypedefDecl 0x55833f5fc4b8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x55833f57ff10 'int'
|-RecordDecl 0x55833f5fc510 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x55833f5fc5b8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x55833f5fc680 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55833f5fc6e8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x55833f5fc750 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x55833f5fc7b8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x55833f5fc820 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x55833f5fc888 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x55833f5fc8f0 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x55833f5fc958 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x55833f5fc9c0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x55833f5fca28 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x55833f5fca90 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x55833f5fcb40 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at ./split_0/safe023_rmo.opt_false-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at ./split_0/safe023_rmo.opt_false-unreach-call.i:282:3)'
| |-FieldDecl 0x55833f5fcbe8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55833f5fcc50 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55833f5fcda0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x55833f5fcd40 'union pthread_rwlock_t' sugar
|   `-RecordType 0x55833f5fc590 'pthread_rwlock_t'
|     `-Record 0x55833f5fc510 ''
|-RecordDecl 0x55833f5fce10 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x55833f5fcf50 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x55833f5fcfb8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55833f5fd070 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x55833f5fd010 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x55833f5fce90 'pthread_rwlockattr_t'
|     `-Record 0x55833f5fce10 ''
|-TypedefDecl 0x55833f5fe140 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x55833f57ff14 'volatile int' volatile
|   `-BuiltinType 0x55833f57ff10 'int'
|-RecordDecl 0x55833f5fe198 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x55833f5fe2e0 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x55833f5fe348 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55833f5fe400 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x55833f5fe3a0 'union pthread_barrier_t' sugar
|   `-RecordType 0x55833f5fe220 'pthread_barrier_t'
|     `-Record 0x55833f5fe198 ''
|-RecordDecl 0x55833f5fe470 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x55833f5fe570 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55833f5fe5d8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55833f5fe690 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x55833f5fe630 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x55833f5fe4f0 'pthread_barrierattr_t'
|     `-Record 0x55833f5fe470 ''
|-TypedefDecl 0x55833f5fe7a8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x55833f5fe740 'long [8]' 8 
|   `-BuiltinType 0x55833f57ff30 'long'
|-EnumDecl 0x55833f5fe800 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x55833f5fe8c8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x55833f5fe918 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x55833f5fe968 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x55833f5fea38 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x55833f5fea88 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x55833f5fead8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x55833f5feb28 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x55833f5febb0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x55833f5feb98 <col:26> 'int'
| |   `-DeclRefExpr 0x55833f5feb78 <col:26> 'int' EnumConstant 0x55833f5fea38 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x55833f5fec38 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x55833f5fec20 <col:29> 'int'
| |   `-DeclRefExpr 0x55833f5fec00 <col:29> 'int' EnumConstant 0x55833f5fea88 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x55833f5fecc0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x55833f5feca8 <col:30> 'int'
| |   `-DeclRefExpr 0x55833f5fec88 <col:30> 'int' EnumConstant 0x55833f5fead8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x55833f5fed48 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x55833f5fed30 <col:27> 'int'
|     `-DeclRefExpr 0x55833f5fed10 <col:27> 'int' EnumConstant 0x55833f5febb0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x55833f5fed98 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x55833f5fee68 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x55833f5feef0 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x55833f5feed8 <col:30> 'int'
| |   `-DeclRefExpr 0x55833f5feeb8 <col:30> 'int' EnumConstant 0x55833f5fee68 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x55833f5fef40 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x55833f5fefc8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x55833f5fefb0 <col:29> 'int'
|     `-DeclRefExpr 0x55833f5fef90 <col:29> 'int' EnumConstant 0x55833f5fef40 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x55833f5ff018 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x55833f5ff0e8 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x55833f5ff150 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x55833f5ff1a0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x55833f5ff1f0 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x55833f5ff2b8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x55833f5ff308 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x55833f5ff358 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x55833f5ff3e0 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x55833f5ff3c8 <col:31> 'int'
|     `-DeclRefExpr 0x55833f5ff3a8 <col:31> 'int' EnumConstant 0x55833f5ff2b8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x55833f5ff430 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x55833f5ff4f8 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x55833f5ff548 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x55833f5ff598 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x55833f5ff668 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x55833f5ff6b8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x55833f5ff708 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x55833f5ff7d8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x55833f5ff828 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x55833f5ff878 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x55833f5ffab8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x55833f5ffb20 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x55833f5ffb88 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x55833f5ffca8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x55833f5ffcf8 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x55833f5ffdc8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x55833f5ffe18 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x55833f5ffe68 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x55833f5fff38 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x55833f5fff88 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x55833f6005b8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x55833f600080 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x55833f6001a0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f6003a0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x55833f600420 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x55833f600678 <col:47>
| |-NonNullAttr 0x55833f6006d0 <col:77, col:94> 1 3
| `-CallbackAttr 0x55833f600708 <line:386:12> Implicit 2 3
|-FunctionDecl 0x55833f600830 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x55833f600760 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x55833f600a88 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x55833f6008e8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x55833f600968 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x55833f600c58 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x55833f600b48 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x55833f600d00 <col:60>
|-FunctionDecl 0x55833f600e50 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x55833f600ef0 <col:54>
| `-ConstAttr 0x55833f600f48 <col:95>
|-FunctionDecl 0x55833f602990 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x55833f600f80 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55833f600ff8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x55833f602a40 <line:395:19>
| `-ConstAttr 0x55833f602a98 <col:60>
|-FunctionDecl 0x55833f602c68 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55833f602b30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55833f602d10 <col:71>
| `-NonNullAttr 0x55833f602d68 <col:112, col:126> 1
|-FunctionDecl 0x55833f602e70 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55833f602db8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55833f602f18 <line:398:22>
| `-NonNullAttr 0x55833f602f70 <col:63, col:77> 1
|-FunctionDecl 0x55833f603198 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x55833f602fb8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55833f603038 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x55833f603248 <line:401:22>
| `-NonNullAttr 0x55833f6032a0 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f6034a8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55833f6032e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55833f603368 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x55833f603558 <line:404:22>
| `-NonNullAttr 0x55833f6035b0 <col:63, col:77> 1
|-FunctionDecl 0x55833f603808 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x55833f6035f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55833f6036a0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x55833f6038b8 <line:407:22>
| `-NonNullAttr 0x55833f603910 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f604b68 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55833f6049b0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55833f604a28 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55833f604c18 <line:410:22>
| `-NonNullAttr 0x55833f604c70 <col:63, col:77> 1
|-FunctionDecl 0x55833f604ea8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55833f604cb8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f604d48 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55833f604f58 <line:413:22>
| `-NonNullAttr 0x55833f604fb0 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f6051e8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55833f604ff8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f605088 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x55833f605298 <col:37>
| `-NonNullAttr 0x55833f6052f0 <col:78, col:95> 1 2
|-FunctionDecl 0x55833f6054d8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f605338 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f6053b8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x55833f605588 <line:419:22>
| `-NonNullAttr 0x55833f6055e0 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f605768 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55833f605628 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55833f6056a8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x55833f605818 <line:421:22>
| `-NonNullAttr 0x55833f605870 <col:63, col:77> 1
|-FunctionDecl 0x55833f605a38 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f6058b8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f605938 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x55833f605ae8 <line:424:22>
| `-NonNullAttr 0x55833f605b40 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f605cc8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55833f605b88 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55833f605c08 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x55833f605d78 <line:427:22>
| `-NonNullAttr 0x55833f605dd0 <col:63, col:77> 1
|-FunctionDecl 0x55833f605f78 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f605e18 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f605e98 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x55833f606028 <line:430:22>
| `-NonNullAttr 0x55833f606080 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f606208 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55833f6060c8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55833f606148 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x55833f6062b8 <line:432:22>
| `-NonNullAttr 0x55833f606310 <col:63, col:77> 1
|-FunctionDecl 0x55833f606538 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x55833f606358 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f6063d8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x55833f6065e8 <line:435:22>
| |-NonNullAttr 0x55833f606640 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x55833f606678 <col:100> "" ""
|-FunctionDecl 0x55833f606888 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x55833f6066c8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55833f606748 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x55833f606938 <line:438:22>
| |-NonNullAttr 0x55833f606990 <col:63, col:77> 1
| `-DeprecatedAttr 0x55833f6069d8 <col:97> "" ""
|-FunctionDecl 0x55833f606bc8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55833f606a28 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f606aa0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55833f606c78 <line:441:22>
| `-NonNullAttr 0x55833f606cd0 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f606e50 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55833f606d18 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55833f606d90 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55833f606f00 <line:444:22>
| `-NonNullAttr 0x55833f606f58 <col:63, col:77> 1
|-FunctionDecl 0x55833f607248 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55833f606fa8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55833f607028 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x55833f6070a0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55833f607300 <line:448:22>
| `-NonNullAttr 0x55833f607358 <col:63, col:83> 1 2 3
|-FunctionDecl 0x55833f607608 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x55833f6073b0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55833f607430 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x55833f6074a8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55833f6076c0 <col:43>
| `-NonNullAttr 0x55833f607718 <col:84, col:98> 1
|-FunctionDecl 0x55833f607a20 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55833f607768 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55833f6077e8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x55833f607878 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x55833f607ad8 <line:453:22>
| `-NonNullAttr 0x55833f607b30 <col:63, col:77> 3
|-FunctionDecl 0x55833f607e08 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55833f607b78 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55833f607bf8 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x55833f607c88 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55833f607ec0 <line:457:22>
| `-NonNullAttr 0x55833f607f18 <col:63, col:80> 2 3
|-FunctionDecl 0x55833f608108 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x55833f607f68 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55833f607fe8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x55833f6081b8 <line:459:22>
|-FunctionDecl 0x55833f608588 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x55833f608280 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x55833f608420 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x55833f608638 <col:52, col:69> 1 2
|-FunctionDecl 0x55833f6087e0 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x55833f6086c0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x55833f608740 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x55833f6089f0 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x55833f6088a8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x55833f608928 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x55833f608b48 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x55833f608ab0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x55833f608c88 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x55833f608d28 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x55833f608dd8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x55833f608ec8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x55833f608f30 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x55833f609100 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./split_0/safe023_rmo.opt_false-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x55833f6091f8 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x55833f6092b0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x55833f609250 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x55833f608db0 '__pthread_unwind_buf_t'
| |   `-Record 0x55833f608d28 ''
| `-AlignedAttr 0x55833f609308 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x55833f609380 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x55833f6094e0 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x55833f609548 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x55833f6095b0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x55833f609618 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x55833f609820 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55833f609710 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55833f609a00 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55833f6098d8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55833f609bc0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55833f609ab8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x55833f609c68 <line:488:22>
|-RecordDecl 0x55833f609cc0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x55833f609fd8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x55833f609e38 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x55833f609eb8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x55833f60a088 <col:86>
| `-ReturnsTwiceAttr 0x55833f60a0e0 <col:12> Implicit
|-FunctionDecl 0x55833f60a408 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55833f60a1b0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x55833f60a2c0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x55833f60a4b8 <line:494:22>
| `-NonNullAttr 0x55833f60a510 <col:63, col:77> 1
|-FunctionDecl 0x55833f60a688 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55833f60a558 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55833f60a730 <line:496:22>
| `-NonNullAttr 0x55833f60a788 <col:63, col:77> 1
|-FunctionDecl 0x55833f60a890 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55833f60a7d8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55833f60a938 <line:498:22>
| `-NonNullAttr 0x55833f60a990 <col:52, col:66> 1
|-FunctionDecl 0x55833f60bad8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55833f60ba20 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55833f60bb80 <line:500:22>
| `-NonNullAttr 0x55833f60bbd8 <col:52, col:66> 1
|-FunctionDecl 0x55833f60be18 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55833f60bc28 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55833f60bcb8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55833f60bec8 <col:36>
| `-NonNullAttr 0x55833f60bf20 <col:66, col:83> 1 2
|-FunctionDecl 0x55833f60c020 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55833f60bf68 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55833f60c0c8 <line:505:22>
| `-NonNullAttr 0x55833f60c120 <col:52, col:66> 1
|-FunctionDecl 0x55833f60c3b8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f60c1d0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55833f60c250 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55833f60c468 <line:509:22>
| `-NonNullAttr 0x55833f60c4c0 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f60c788 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x55833f60c508 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55833f60c588 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x55833f60c608 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x55833f60c840 <line:513:22>
| `-NonNullAttr 0x55833f60c898 <col:63, col:80> 1 3
|-FunctionDecl 0x55833f60ca30 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55833f60c8e8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55833f60cad8 <line:515:22>
| `-NonNullAttr 0x55833f60cb30 <col:63, col:77> 1
|-FunctionDecl 0x55833f60cd18 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55833f60cbe0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55833f60cdc0 <line:517:22>
| `-NonNullAttr 0x55833f60ce18 <col:63, col:77> 1
|-FunctionDecl 0x55833f60cf20 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55833f60ce68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55833f60cfc8 <line:519:22>
| `-NonNullAttr 0x55833f60d020 <col:63, col:77> 1
|-FunctionDecl 0x55833f60d248 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f60d068 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55833f60d0e8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x55833f60d2f8 <line:523:22>
| `-NonNullAttr 0x55833f60d350 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f60d558 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55833f60d398 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55833f60d418 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x55833f60d608 <line:526:22>
| `-NonNullAttr 0x55833f60d660 <col:63, col:77> 1
|-FunctionDecl 0x55833f60d808 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f60d6a8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55833f60d728 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x55833f60d8b8 <line:529:22>
| `-NonNullAttr 0x55833f60d910 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f60db00 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55833f60d958 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55833f60da40 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x55833f60dbb0 <line:531:22>
| `-NonNullAttr 0x55833f60dc08 <col:63, col:77> 1
|-FunctionDecl 0x55833f60ddb8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f60dc58 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55833f60dcd8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x55833f60de68 <line:535:22>
| `-NonNullAttr 0x55833f60dec0 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f60e048 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55833f60df08 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55833f60df88 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x55833f60e0f8 <line:538:22>
| `-NonNullAttr 0x55833f60e150 <col:63, col:77> 1
|-FunctionDecl 0x55833f60e2f8 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f60e198 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55833f60e218 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55833f60e3a8 <line:542:22>
| `-NonNullAttr 0x55833f60e400 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f60e588 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55833f60e448 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55833f60e4c8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x55833f60e638 <line:545:22>
| `-NonNullAttr 0x55833f60e690 <col:63, col:77> 1
|-FunctionDecl 0x55833f60e878 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x55833f60e6d8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x55833f60e758 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x55833f60e928 <line:548:22>
| `-NonNullAttr 0x55833f60e980 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f60fb38 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55833f60e9c8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55833f60fa78 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x55833f60fbe8 <line:551:22>
| `-NonNullAttr 0x55833f60fc40 <col:63, col:77> 1
|-FunctionDecl 0x55833f60ff78 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x55833f60fd20 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55833f60fe30 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x55833f610028 <col:29>
| `-NonNullAttr 0x55833f610080 <col:70, col:84> 1
|-FunctionDecl 0x55833f6101f8 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55833f6100c8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55833f6102a0 <line:556:22>
| `-NonNullAttr 0x55833f6102f8 <col:63, col:77> 1
|-FunctionDecl 0x55833f610400 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55833f610348 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55833f6104a8 <line:558:22>
| `-NonNullAttr 0x55833f610500 <col:52, col:66> 1
|-FunctionDecl 0x55833f610600 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55833f610548 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55833f6106a8 <line:560:19>
| `-NonNullAttr 0x55833f610700 <col:49, col:63> 1
|-FunctionDecl 0x55833f610938 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55833f610748 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55833f6107d8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55833f6109e8 <col:39>
| `-NonNullAttr 0x55833f610a70 <col:69, col:86> 1 2
|-FunctionDecl 0x55833f610b70 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55833f610ab8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55833f610c18 <line:565:22>
| `-NonNullAttr 0x55833f610c70 <col:52, col:66> 1
|-FunctionDecl 0x55833f610d70 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55833f610cb8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55833f610e18 <line:567:22>
| `-NonNullAttr 0x55833f610e70 <col:52, col:66> 1
|-FunctionDecl 0x55833f611028 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55833f610eb8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55833f610f48 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55833f6110d8 <col:39>
| `-NonNullAttr 0x55833f611130 <col:69, col:86> 1 2
|-FunctionDecl 0x55833f611230 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55833f611178 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55833f6112d8 <line:572:22>
| `-NonNullAttr 0x55833f611330 <col:52, col:66> 1
|-FunctionDecl 0x55833f611518 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55833f6113e0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55833f6115c0 <line:574:22>
| `-NonNullAttr 0x55833f611618 <col:63, col:77> 1
|-FunctionDecl 0x55833f611720 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55833f611668 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55833f6117c8 <line:576:22>
| `-NonNullAttr 0x55833f611820 <col:63, col:77> 1
|-FunctionDecl 0x55833f611a80 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f611868 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55833f6118e8 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x55833f611b30 <line:580:22>
| `-NonNullAttr 0x55833f611b88 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f611d98 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55833f611bd8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55833f611c58 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x55833f611e48 <line:583:22>
| `-NonNullAttr 0x55833f611ea0 <col:63, col:77> 1
|-FunctionDecl 0x55833f612048 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f611ee8 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55833f611f68 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x55833f6120f8 <line:587:22>
| `-NonNullAttr 0x55833f612150 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f6122d8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55833f612198 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55833f612218 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x55833f612388 <col:36>
| `-NonNullAttr 0x55833f6123e0 <col:77, col:91> 1
|-FunctionDecl 0x55833f612718 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x55833f6124c0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55833f6125d0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x55833f6127c8 <line:592:22>
| `-NonNullAttr 0x55833f612820 <col:63, col:77> 1
|-FunctionDecl 0x55833f612998 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55833f612868 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55833f612a40 <line:594:22>
| `-NonNullAttr 0x55833f612ac0 <col:63, col:77> 1
|-FunctionDecl 0x55833f612bc0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55833f612b08 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55833f612c68 <line:596:22>
| `-NonNullAttr 0x55833f612cc0 <col:52, col:66> 1
|-FunctionDecl 0x55833f612dc0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55833f612d08 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55833f612e68 <line:598:22>
| `-NonNullAttr 0x55833f612ec0 <col:52, col:66> 1
|-FunctionDecl 0x55833f6130e8 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x55833f612f08 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55833f612f80 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x55833f613198 <line:601:22, col:39> 1 2
|-FunctionDecl 0x55833f6134c8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55833f613218 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55833f613290 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55833f613320 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x55833f613580 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x55833f613798 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55833f613660 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55833f613840 <line:607:22>
| `-NonNullAttr 0x55833f613898 <col:63, col:77> 1
|-FunctionDecl 0x55833f6139a0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55833f6138e8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55833f613a48 <line:609:22>
| `-NonNullAttr 0x55833f613ad0 <col:63, col:77> 1
|-FunctionDecl 0x55833f613cf8 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f613b18 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55833f613b98 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x55833f613da8 <line:613:22>
| `-NonNullAttr 0x55833f613e00 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f614008 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x55833f613e48 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55833f613ec8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x55833f6140b8 <col:37>
| `-NonNullAttr 0x55833f614110 <col:78, col:92> 1
|-FunctionDecl 0x55833f614328 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x55833f614158 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55833f614200 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x55833f6143d8 <line:619:22>
| `-NonNullAttr 0x55833f614430 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f6145f8 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x55833f614478 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55833f6144f0 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x55833f6146a8 <line:622:22>
| `-NonNullAttr 0x55833f614700 <col:63, col:77> 1
|-FunctionDecl 0x55833f6149a8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x55833f6147e0 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x55833f614860 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x55833f614a58 <line:624:22>
| `-NonNullAttr 0x55833f614ae0 <col:63, col:77> 1
|-FunctionDecl 0x55833f614c58 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55833f614b28 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55833f614d00 <line:626:22>
| `-NonNullAttr 0x55833f614d58 <col:63, col:77> 1
|-FunctionDecl 0x55833f614e60 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55833f614da8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55833f614f08 <line:628:22>
| `-NonNullAttr 0x55833f614f60 <col:52, col:66> 1
|-FunctionDecl 0x55833f615060 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55833f614fa8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55833f615108 <line:630:22>
| `-NonNullAttr 0x55833f615160 <col:52, col:66> 1
|-FunctionDecl 0x55833f615260 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55833f6151a8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55833f615308 <line:632:22>
| `-NonNullAttr 0x55833f615360 <col:52, col:66> 1
|-FunctionDecl 0x55833f615738 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x55833f615440 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x55833f615550 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55833f6155d0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x55833f6157f0 <line:636:22>
| `-NonNullAttr 0x55833f615848 <col:63, col:77> 1
|-FunctionDecl 0x55833f6159c8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55833f615898 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55833f615a70 <line:638:22>
| `-NonNullAttr 0x55833f616b00 <col:63, col:77> 1
|-FunctionDecl 0x55833f616c00 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55833f616b48 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55833f616ca8 <line:640:22>
| `-NonNullAttr 0x55833f616d00 <col:52, col:66> 1
|-FunctionDecl 0x55833f616ee8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55833f616db0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55833f616f90 <line:642:22>
| `-NonNullAttr 0x55833f616fe8 <col:63, col:77> 1
|-FunctionDecl 0x55833f6170f0 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55833f617038 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55833f617198 <line:644:22>
| `-NonNullAttr 0x55833f6171f0 <col:63, col:77> 1
|-FunctionDecl 0x55833f617418 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55833f617238 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55833f6172b8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x55833f6174c8 <line:648:22>
| `-NonNullAttr 0x55833f617520 <col:63, col:80> 1 2
|-FunctionDecl 0x55833f617728 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x55833f617568 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x55833f6175e8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x55833f6177d8 <line:651:22>
| `-NonNullAttr 0x55833f617830 <col:63, col:77> 1
|-FunctionDecl 0x55833f617b98 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x55833f617910 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x55833f617a30 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x55833f617c48 <line:654:22>
| `-NonNullAttr 0x55833f617ca0 <col:63, col:77> 1
|-FunctionDecl 0x55833f617df8 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x55833f617ce8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55833f617ea0 <col:69>
|-FunctionDecl 0x55833f618018 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x55833f617f08 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55833f6180c0 <col:72>
|-FunctionDecl 0x55833f6182f8 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x55833f618128 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x55833f6181d8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x55833f6183a8 <col:44>
|-FunctionDecl 0x55833f6185c8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x55833f618410 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55833f618488 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x55833f618678 <line:661:22>
| `-NonNullAttr 0x55833f6186d0 <col:63, col:77> 2
|-FunctionDecl 0x55833f618b30 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x55833f6187b0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x55833f6188c0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x55833f6189d0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x55833f618be8 <col:47>
|-FunctionDecl 0x55833f618cf0 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x55833f618c58 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55833f618e48 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x55833f618db0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55833f618fa0 <line:668:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x55833f618f08 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55833f619068 <line:669:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x55833f619128 <line:670:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x55833f6191e8 <line:671:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x55833f6192a0 <line:672:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x55833f619320 prev 0x55833f6192a0 <line:673:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x55833f619388 <col:24> 'int' 0
|-VarDecl 0x55833f6193c0 <line:674:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x55833f619440 prev 0x55833f6193c0 <line:675:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x55833f6194a8 <col:27> 'int' 0
|-VarDecl 0x55833f6194e0 <line:676:1, col:5> col:5 used __unbuffered_p2_EAX 'int'
|-VarDecl 0x55833f619560 prev 0x55833f6194e0 <line:677:1, col:27> col:5 used __unbuffered_p2_EAX 'int' cinit
| `-IntegerLiteral 0x55833f6195c8 <col:27> 'int' 0
|-VarDecl 0x55833f619600 <line:678:1, col:5> col:5 used __unbuffered_p2_EBX 'int'
|-VarDecl 0x55833f619680 prev 0x55833f619600 <line:679:1, col:27> col:5 used __unbuffered_p2_EBX 'int' cinit
| `-IntegerLiteral 0x55833f6196e8 <col:27> 'int' 0
|-VarDecl 0x55833f619718 <line:680:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x55833f619790 <line:681:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x55833f619810 <line:682:1, col:5> col:5 used x 'int'
|-VarDecl 0x55833f619890 prev 0x55833f619810 <line:683:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x55833f6198f8 <col:9> 'int' 0
|-VarDecl 0x55833f619930 <line:684:1, col:5> col:5 used y 'int'
|-VarDecl 0x55833f6199b0 prev 0x55833f619930 <line:685:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x55833f619a18 <col:9> 'int' 0
|-VarDecl 0x55833f619a48 <line:686:1, col:7> col:7 used y$flush_delayed '_Bool'
|-VarDecl 0x55833f619b00 <line:687:1, col:5> col:5 used y$mem_tmp 'int'
|-VarDecl 0x55833f619b78 <line:688:1, col:7> col:7 used y$r_buff0_thd0 '_Bool'
|-VarDecl 0x55833f619bf0 <line:689:1, col:7> col:7 used y$r_buff0_thd1 '_Bool'
|-VarDecl 0x55833f619c68 <line:690:1, col:7> col:7 used y$r_buff0_thd2 '_Bool'
|-VarDecl 0x55833f619ce0 <line:691:1, col:7> col:7 used y$r_buff0_thd3 '_Bool'
|-VarDecl 0x55833f619d58 <line:692:1, col:7> col:7 used y$r_buff1_thd0 '_Bool'
|-VarDecl 0x55833f619dd0 <line:693:1, col:7> col:7 used y$r_buff1_thd1 '_Bool'
|-VarDecl 0x55833f619e48 <line:694:1, col:7> col:7 used y$r_buff1_thd2 '_Bool'
|-VarDecl 0x55833f619ec0 <line:695:1, col:7> col:7 used y$r_buff1_thd3 '_Bool'
|-VarDecl 0x55833f619f38 <line:696:1, col:7> col:7 y$read_delayed '_Bool'
|-VarDecl 0x55833f619fb8 <line:697:1, col:6> col:6 y$read_delayed_var 'int *'
|-VarDecl 0x55833f61a038 <line:698:1, col:5> col:5 used y$w_buff0 'int'
|-VarDecl 0x55833f61a0b0 <line:699:1, col:7> col:7 used y$w_buff0_used '_Bool'
|-VarDecl 0x55833f61a130 <line:700:1, col:5> col:5 used y$w_buff1 'int'
|-VarDecl 0x55833f61a1a8 <line:701:1, col:7> col:7 used y$w_buff1_used '_Bool'
|-VarDecl 0x55833f61a220 <line:702:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x55833f61a298 <line:703:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x55833f61a3b0 prev 0x55833f618cf0 <line:704:1, line:743:1> line:704:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x55833f61a318 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55833f61ed88 <line:705:1, line:743:1>
|   |-CallExpr 0x55833f61a4c8 <line:706:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f61a4b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61a458 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f61a528 <line:707:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55833f61a4e8 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-IntegerLiteral 0x55833f61a508 <col:7> 'int' 1
|   |-CallExpr 0x55833f61a580 <line:708:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f61a568 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61a548 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f61a5d8 <line:709:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f61a5c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61a5a0 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f61a8c0 <line:710:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55833f61a5f8 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-ConditionalOperator 0x55833f61a890 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55833f61a6b8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55833f61a670 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55833f61a658 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55833f61a618 <col:7> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55833f61a6a0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55833f61a688 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55833f61a638 <col:25> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f61a878 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f61a6d8 <col:42> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x55833f61a858 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55833f61a828 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55833f61a798 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55833f61a750 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55833f61a738 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55833f61a6f8 <col:55> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55833f61a780 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55833f61a768 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55833f61a718 <col:73> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f61a7f8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f61a7b8 <col:90> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55833f61a810 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61a7d8 <col:102> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f61aac8 <line:711:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61a8e0 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61aab0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61aa80 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55833f61a9a0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55833f61a958 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55833f61a940 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55833f61a900 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55833f61a988 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55833f61a970 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55833f61a920 <col:38> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61aa38 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61a9f0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61a9c0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61aa68 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61aa50 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61aa18 <col:66> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55833f61add8 <line:712:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61ab10 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61adc0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61ad90 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55833f61acb0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55833f61abd0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55833f61ab88 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55833f61ab70 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55833f61ab30 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55833f61abb8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55833f61aba0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55833f61ab50 <col:38> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55833f61ac90 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55833f61ac48 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55833f61ac30 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55833f61abf0 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55833f61ac78 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55833f61ac60 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55833f61ac10 <col:74> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61ad48 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61ad00 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61acd0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61ad78 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61ad60 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61ad28 <col:102> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55833f61afe0 <line:713:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61adf8 <col:3> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61afc8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61af98 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55833f61aeb8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55833f61ae70 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55833f61ae58 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55833f61ae18 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55833f61aea0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55833f61ae88 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55833f61ae38 <col:38> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61af50 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61af08 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61aed8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61af80 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61af68 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61af30 <col:66> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55833f61b2c8 <line:714:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61b000 <col:3> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61b2b0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61b280 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55833f61b1a0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55833f61b0c0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55833f61b078 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55833f61b060 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55833f61b020 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55833f61b0a8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55833f61b090 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55833f61b040 <col:38> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55833f61b180 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55833f61b138 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55833f61b120 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55833f61b0e0 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55833f61b168 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55833f61b150 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55833f61b100 <col:74> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61b238 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61b1f0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61b1c0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61b268 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61b250 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61b218 <col:102> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x55833f61b320 <line:715:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f61b308 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61b2e8 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f61b378 <line:716:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f61b360 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61b340 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f61b448 <line:717:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61b398 <col:3> '_Bool' lvalue Var 0x55833f61a220 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x55833f61b428 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55833f61b410 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55833f61b3b8 <col:19> '_Bool (void)' Function 0x55833f5bf770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55833f61b4e0 <line:718:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61b468 <col:3> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x55833f61b4c0 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55833f61b4a8 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55833f61b488 <col:19> '_Bool (void)' Function 0x55833f5bf770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55833f61b558 <line:719:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61b500 <col:3> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61b540 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61b520 <col:21> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55833f61b5d0 <line:720:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55833f61b578 <col:3> 'int' lvalue Var 0x55833f619b00 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55833f61b5b8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61b598 <col:15> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f61ba08 <line:721:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55833f61b5f0 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-ConditionalOperator 0x55833f61b9d8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55833f61b800 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55833f61b720 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55833f61b648 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55833f61b630 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55833f61b610 <col:8> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55833f61b700 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55833f61b698 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55833f61b680 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55833f61b660 <col:27> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x55833f61b6e8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55833f61b6d0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55833f61b6b0 <col:46> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55833f61b7e0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55833f61b778 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55833f61b760 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55833f61b740 <col:65> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x55833f61b7c8 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55833f61b7b0 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55833f61b790 <col:84> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f61b9c0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f61b820 <col:101> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |   `-ParenExpr 0x55833f61b9a0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55833f61b970 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55833f61b8e0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55833f61b898 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55833f61b880 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55833f61b840 <col:106> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55833f61b8c8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55833f61b8b0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55833f61b860 <col:124> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f61b940 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f61b900 <col:141> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55833f61b958 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61b920 <col:153> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |-BinaryOperator 0x55833f61bf28 <line:722:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55833f61ba28 <col:3> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x55833f61bef8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55833f61bec8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55833f61beb0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55833f61ba48 <col:15> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f61bee0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f61ba68 <col:31> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x55833f61be90 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55833f61be60 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55833f61bc88 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55833f61bba8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55833f61bac0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55833f61baa8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55833f61ba88 <col:45> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55833f61bb88 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55833f61bb20 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55833f61baf8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55833f61bad8 <col:64> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x55833f61bb70 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55833f61bb58 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55833f61bb38 <col:83> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55833f61bc68 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55833f61bc00 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55833f61bbe8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55833f61bbc8 <col:102> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x55833f61bc50 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55833f61bc38 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55833f61bc18 <col:121> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f61be48 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f61bca8 <col:138> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x55833f61be28 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55833f61bdf8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55833f61bd68 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55833f61bd20 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55833f61bd08 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55833f61bcc8 <col:151> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55833f61bd50 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55833f61bd38 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55833f61bce8 <col:169> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x55833f61bdc8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55833f61bd88 <col:186> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55833f61bde0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55833f61bda8 <col:198> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |-BinaryOperator 0x55833f61c438 <line:723:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55833f61bf48 <col:3> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x55833f61c408 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55833f61c3d8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55833f61c3c0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55833f61bf68 <col:15> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f61c3f0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f61bf88 <col:31> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x55833f61c3a0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55833f61c370 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55833f61c198 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55833f61c0b8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55833f61bfe0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55833f61bfc8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55833f61bfa8 <col:45> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55833f61c098 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55833f61c030 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55833f61c018 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55833f61bff8 <col:64> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x55833f61c080 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55833f61c068 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55833f61c048 <col:83> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55833f61c178 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55833f61c110 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55833f61c0f8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55833f61c0d8 <col:102> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x55833f61c160 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55833f61c148 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55833f61c128 <col:121> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f61c358 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f61c1b8 <col:138> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x55833f61c338 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55833f61c308 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55833f61c278 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55833f61c230 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55833f61c218 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55833f61c1d8 <col:151> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55833f61c260 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55833f61c248 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55833f61c1f8 <col:169> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x55833f61c2d8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55833f61c298 <col:186> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55833f61c2f0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55833f61c2b8 <col:198> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |-BinaryOperator 0x55833f61c9e0 <line:724:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61c458 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61c9c8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61c998 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55833f61c950 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f61c938 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f61c478 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61c980 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f61c968 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f61c498 <col:36> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55833f61c918 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55833f61c8e8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55833f61c6a8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55833f61c5c8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55833f61c4f0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55833f61c4d8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55833f61c4b8 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55833f61c5a8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55833f61c540 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55833f61c528 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55833f61c508 <col:74> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55833f61c590 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55833f61c578 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55833f61c558 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55833f61c688 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55833f61c620 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55833f61c608 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55833f61c5e8 <col:112> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55833f61c670 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55833f61c658 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55833f61c638 <col:131> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55833f61c8d0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55833f61c8b8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55833f61c6c8 <col:148> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55833f61c898 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55833f61c868 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55833f61c788 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55833f61c740 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55833f61c728 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55833f61c6e8 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55833f61c770 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55833f61c758 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55833f61c708 <col:184> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55833f61c820 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55833f61c7d8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55833f61c7a8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55833f61c850 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55833f61c838 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55833f61c800 <col:212> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55833f61cfb8 <line:725:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61ca00 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61cfa0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61cf70 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55833f61cf28 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f61cf10 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f61ca20 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61cf58 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f61cf40 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f61ca40 <col:36> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55833f61cef0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55833f61cec0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55833f61cc60 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55833f61cb80 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55833f61ca98 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55833f61ca80 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55833f61ca60 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55833f61cb60 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55833f61cae8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55833f61cad0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55833f61cab0 <col:74> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55833f61cb48 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55833f61cb30 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55833f61cb00 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55833f61cc40 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55833f61cbd8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55833f61cbc0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55833f61cba0 <col:112> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55833f61cc28 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55833f61cc10 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55833f61cbf0 <col:131> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55833f61cea8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55833f61ce90 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55833f61cc80 <col:148> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55833f61ce70 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55833f61ce40 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55833f61cd40 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55833f61ccf8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55833f61cce0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55833f61cca0 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55833f61cd28 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55833f61cd10 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55833f61ccc0 <col:184> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55833f61ce10 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55833f61cd90 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55833f61cd60 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55833f61ce28 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55833f61cde8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55833f61cdb8 <col:219> 'int' 0
|   |-BinaryOperator 0x55833f61d560 <line:726:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61cfd8 <col:3> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61d548 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61d518 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55833f61d4d0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f61d4b8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f61cff8 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61d500 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f61d4e8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f61d018 <col:36> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x55833f61d498 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55833f61d468 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55833f61d228 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55833f61d148 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55833f61d070 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55833f61d058 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55833f61d038 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55833f61d128 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55833f61d0c0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55833f61d0a8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55833f61d088 <col:74> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55833f61d110 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55833f61d0f8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55833f61d0d8 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55833f61d208 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55833f61d1a0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55833f61d188 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55833f61d168 <col:112> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55833f61d1f0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55833f61d1d8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55833f61d1b8 <col:131> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55833f61d450 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55833f61d438 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55833f61d248 <col:148> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x55833f61d418 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55833f61d3e8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55833f61d308 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55833f61d2c0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55833f61d2a8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55833f61d268 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55833f61d2f0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55833f61d2d8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55833f61d288 <col:184> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55833f61d3a0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55833f61d358 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55833f61d328 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55833f61d3d0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55833f61d3b8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55833f61d380 <col:212> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55833f61db40 <line:727:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61d580 <col:3> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61db10 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61dae0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55833f61da98 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f61da80 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f61d5a0 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61dac8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f61dab0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f61d5c0 <col:36> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x55833f61da60 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55833f61da30 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55833f61d7d0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55833f61d6f0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55833f61d618 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55833f61d600 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55833f61d5e0 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55833f61d6d0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55833f61d668 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55833f61d650 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55833f61d630 <col:74> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55833f61d6b8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55833f61d6a0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55833f61d680 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55833f61d7b0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55833f61d748 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55833f61d730 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55833f61d710 <col:112> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55833f61d798 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55833f61d780 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55833f61d760 <col:131> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55833f61da18 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55833f61da00 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55833f61d7f0 <col:148> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x55833f61d9e0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55833f61d9b0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55833f61d8b0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55833f61d868 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55833f61d850 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55833f61d810 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55833f61d898 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55833f61d880 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55833f61d830 <col:184> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55833f61d980 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55833f61d900 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55833f61d8d0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55833f61d998 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55833f61d958 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55833f61d928 <col:219> 'int' 0
|   |-BinaryOperator 0x55833f61dbb8 <line:728:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55833f61db60 <col:3> 'int' lvalue Var 0x55833f619440 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x55833f61dba0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61db80 <col:25> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f61dce8 <line:729:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55833f61dbd8 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-ConditionalOperator 0x55833f61dcb8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55833f61dc70 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55833f61dc58 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55833f61dbf8 <col:7> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f61dc88 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f61dc18 <col:25> 'int' lvalue Var 0x55833f619b00 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55833f61dca0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55833f61dc38 <col:37> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f61dd80 <line:730:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61dd08 <col:3> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55833f61dd58 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55833f61dd28 <col:28> 'int' 0
|   |-CallExpr 0x55833f61ddd8 <line:731:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f61ddc0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61dda0 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f61de30 <line:732:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f61de18 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61ddf8 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f61e118 <line:733:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55833f61de50 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-ConditionalOperator 0x55833f61e0e8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55833f61df10 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55833f61dec8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55833f61deb0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55833f61de70 <col:7> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55833f61def8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55833f61dee0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55833f61de90 <col:25> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f61e0d0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f61df30 <col:42> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x55833f61e0b0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55833f61e080 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55833f61dff0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55833f61dfa8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55833f61df90 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55833f61df50 <col:55> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55833f61dfd8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55833f61dfc0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55833f61df70 <col:73> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f61e050 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f61e010 <col:90> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55833f61e068 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61e030 <col:102> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f61e320 <line:734:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61e138 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61e308 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61e2d8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55833f61e1f8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55833f61e1b0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55833f61e198 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55833f61e158 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55833f61e1e0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55833f61e1c8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55833f61e178 <col:38> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61e290 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61e248 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61e218 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61e2c0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61e2a8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61e270 <col:66> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55833f61e608 <line:735:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61e340 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61e5f0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61e5c0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55833f61e4e0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55833f61e400 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55833f61e3b8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55833f61e3a0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55833f61e360 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55833f61e3e8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55833f61e3d0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55833f61e380 <col:38> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55833f61e4c0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55833f61e478 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55833f61e460 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55833f61e420 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55833f61e4a8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55833f61e490 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55833f61e440 <col:74> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61e578 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61e530 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61e500 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61e5a8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61e590 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61e558 <col:102> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55833f61e810 <line:736:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61e628 <col:3> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61e7f8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61e7c8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55833f61e6e8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55833f61e6a0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55833f61e688 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55833f61e648 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55833f61e6d0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55833f61e6b8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55833f61e668 <col:38> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61e780 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61e738 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61e708 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61e7b0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61e798 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61e760 <col:66> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55833f61eaf8 <line:737:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61e830 <col:3> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61eae0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61eab0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55833f61e9d0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55833f61e8f0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55833f61e8a8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55833f61e890 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55833f61e850 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55833f61e8d8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55833f61e8c0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55833f61e870 <col:38> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55833f61e9b0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55833f61e968 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55833f61e950 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55833f61e910 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55833f61e998 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55833f61e980 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55833f61e930 <col:74> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61ea68 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61ea20 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61e9f0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61ea98 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61ea80 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61ea48 <col:102> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x55833f61eb68 <line:738:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f61eb50 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61eb18 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f61ebc0 <line:739:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f61eba8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61eb88 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f61ec78 <line:740:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55833f61ebe0 <col:3> 'int' lvalue Var 0x55833f619320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55833f61ec58 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55833f61ec40 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f61ec00 <col:22> 'int' lvalue Var 0x55833f619320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55833f61ec20 <col:41> 'int' 1
|   |-CallExpr 0x55833f61ecd0 <line:741:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f61ecb8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61ec98 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55833f61ed78 <line:742:3, col:36>
|     `-CallExpr 0x55833f61ed58 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55833f61ed40 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55833f61ecf0 <col:10> 'void *(void)' Function 0x55833f5bfab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55833f61ef70 prev 0x55833f618e48 <line:744:1, line:772:1> line:744:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x55833f61eed8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55833f620728 <line:745:1, line:772:1>
|   |-CallExpr 0x55833f61f050 <line:746:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f61f038 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61f018 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f61f0c8 <line:747:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55833f61f070 <col:3> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x55833f61f0b0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61f090 <col:15> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |-BinaryOperator 0x55833f61f128 <line:748:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55833f61f0e8 <col:3> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   | `-IntegerLiteral 0x55833f61f108 <col:15> 'int' 2
|   |-BinaryOperator 0x55833f61f1a0 <line:749:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61f148 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61f188 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61f168 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55833f61f238 <line:750:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61f1c0 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x55833f61f210 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55833f61f1e0 <col:27> 'int' 1
|   |-CallExpr 0x55833f61f3b8 <line:751:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x55833f61f3a0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55833f61f258 <col:3> 'void (int)' Function 0x55833f5bfd28 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x55833f61f358 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x55833f61f338 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x55833f61f318 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x55833f61f2d0 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x55833f61f2b8 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55833f61f278 <col:23> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x55833f61f300 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x55833f61f2e8 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x55833f61f298 <col:41> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55833f61f438 <line:752:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61f3e0 <col:3> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61f420 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61f400 <col:20> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x55833f61f4b0 <line:753:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61f458 <col:3> '_Bool' lvalue Var 0x55833f619dd0 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61f498 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61f478 <col:20> '_Bool' lvalue Var 0x55833f619bf0 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55833f61f528 <line:754:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61f4d0 <col:3> '_Bool' lvalue Var 0x55833f619e48 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61f510 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61f4f0 <col:20> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55833f61f5a0 <line:755:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61f548 <col:3> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61f588 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f61f568 <col:20> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55833f61f638 <line:756:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61f5c0 <col:3> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x55833f61f610 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55833f61f5e0 <col:27> 'int' 1
|   |-CallExpr 0x55833f61f690 <line:757:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f61f678 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61f658 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f61f6e8 <line:758:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f61f6d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61f6b0 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f61f748 <line:759:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55833f61f708 <col:3> 'int' lvalue Var 0x55833f619890 'x' 'int'
|   | `-IntegerLiteral 0x55833f61f728 <col:7> 'int' 1
|   |-CallExpr 0x55833f61f7a0 <line:760:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f61f788 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61f768 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f61f7f8 <line:761:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f61f7e0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f61f7c0 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f61fae0 <line:762:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55833f61f818 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-ConditionalOperator 0x55833f61fab0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55833f61f8d8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55833f61f890 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55833f61f878 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55833f61f838 <col:7> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55833f61f8c0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55833f61f8a8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55833f61f858 <col:25> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f61fa98 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f61f8f8 <col:42> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x55833f61fa78 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55833f61fa48 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55833f61f9b8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55833f61f970 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55833f61f958 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55833f61f918 <col:55> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55833f61f9a0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55833f61f988 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55833f61f938 <col:73> '_Bool' lvalue Var 0x55833f619e48 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f61fa18 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f61f9d8 <col:90> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55833f61fa30 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61f9f8 <col:102> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f61fd08 <line:763:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61fb00 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61fcf0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61fcc0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55833f61fbe0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55833f61fb98 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55833f61fb80 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55833f61fb20 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55833f61fbc8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55833f61fbb0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55833f61fb60 <col:38> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61fc78 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61fc30 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61fc00 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61fca8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61fc90 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61fc58 <col:66> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55833f61fff0 <line:764:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55833f61fd28 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f61ffd8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f61ffa8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55833f61fec8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55833f61fde8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55833f61fda0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55833f61fd88 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55833f61fd48 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55833f61fdd0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55833f61fdb8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55833f61fd68 <col:38> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55833f61fea8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55833f61fe60 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55833f61fe48 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55833f61fe08 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55833f61fe90 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55833f61fe78 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55833f61fe28 <col:74> '_Bool' lvalue Var 0x55833f619e48 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f61ff60 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f61ff18 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f61fee8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f61ff90 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f61ff78 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f61ff40 <col:102> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55833f6201f8 <line:765:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55833f620010 <col:3> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55833f6201e0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f6201b0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55833f6200d0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55833f620088 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55833f620070 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55833f620030 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55833f6200b8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55833f6200a0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55833f620050 <col:38> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f620168 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f620120 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f6200f0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f620198 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f620180 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f620148 <col:66> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55833f6204e0 <line:766:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55833f620218 <col:3> '_Bool' lvalue Var 0x55833f619e48 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55833f6204c8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f620498 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55833f6203b8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55833f6202d8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55833f620290 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55833f620278 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55833f620238 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55833f6202c0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55833f6202a8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55833f620258 <col:38> '_Bool' lvalue Var 0x55833f619c68 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55833f620398 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55833f620350 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55833f620338 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55833f6202f8 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55833f620380 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55833f620368 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55833f620318 <col:74> '_Bool' lvalue Var 0x55833f619e48 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f620450 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f620408 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f6203d8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f620480 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f620468 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f620430 <col:102> '_Bool' lvalue Var 0x55833f619e48 'y$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x55833f620538 <line:767:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f620520 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f620500 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f620590 <line:768:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f620578 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f620558 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f620648 <line:769:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55833f6205b0 <col:3> 'int' lvalue Var 0x55833f619320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55833f620628 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55833f620610 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f6205d0 <col:22> 'int' lvalue Var 0x55833f619320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55833f6205f0 <col:41> 'int' 1
|   |-CallExpr 0x55833f6206a0 <line:770:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f620688 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f620668 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55833f620718 <line:771:3, col:36>
|     `-CallExpr 0x55833f6206f8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55833f6206e0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55833f6206c0 <col:10> 'void *(void)' Function 0x55833f5bfab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55833f6208b8 prev 0x55833f618fa0 <line:773:1, line:805:1> line:773:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x55833f620820 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55833f624468 <line:774:1, line:805:1>
|   |-CallExpr 0x55833f620998 <line:775:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f620980 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f620960 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f620a10 <line:776:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55833f6209b8 <col:3> 'int' lvalue Var 0x55833f619560 '__unbuffered_p2_EAX' 'int'
|   | `-ImplicitCastExpr 0x55833f6209f8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f6209d8 <col:25> 'int' lvalue Var 0x55833f619890 'x' 'int'
|   |-CallExpr 0x55833f620a68 <line:777:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f620a50 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f620a30 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f620ac0 <line:778:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f620aa8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f620a88 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f620b70 <line:779:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55833f620ae0 <col:3> '_Bool' lvalue Var 0x55833f61a220 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x55833f620b38 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55833f620b20 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55833f620b00 <col:19> '_Bool (void)' Function 0x55833f5bf770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55833f620c08 <line:780:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55833f620b90 <col:3> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x55833f620be8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55833f620bd0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55833f620bb0 <col:19> '_Bool (void)' Function 0x55833f5bf770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55833f620c80 <line:781:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55833f620c28 <col:3> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55833f620c68 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f620c48 <col:21> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55833f620cf8 <line:782:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55833f620ca0 <col:3> 'int' lvalue Var 0x55833f619b00 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55833f620ce0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f620cc0 <col:15> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f621130 <line:783:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55833f620d18 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-ConditionalOperator 0x55833f621100 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55833f620f28 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55833f620e48 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55833f620d70 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55833f620d58 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55833f620d38 <col:8> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55833f620e28 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55833f620dc0 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55833f620da8 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55833f620d88 <col:27> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |   | |   `-UnaryOperator 0x55833f620e10 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55833f620df8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55833f620dd8 <col:46> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55833f620f08 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55833f620ea0 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55833f620e88 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55833f620e68 <col:65> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |   |   `-UnaryOperator 0x55833f620ef0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55833f620ed8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55833f620eb8 <col:84> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f6210e8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f620f48 <col:101> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |   `-ParenExpr 0x55833f6210c8 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55833f621098 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55833f621008 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55833f620fc0 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55833f620fa8 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55833f620f68 <col:106> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55833f620ff0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55833f620fd8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55833f620f88 <col:124> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f621068 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f621028 <col:141> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55833f621080 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f621048 <col:153> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |-BinaryOperator 0x55833f621640 <line:784:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55833f621150 <col:3> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x55833f621610 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55833f6215e0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55833f6215c8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55833f621170 <col:15> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f6215f8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f621190 <col:31> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x55833f6215a8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55833f621578 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55833f6213a0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55833f6212c0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55833f6211e8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55833f6211d0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55833f6211b0 <col:45> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55833f6212a0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55833f621238 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55833f621220 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55833f621200 <col:64> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x55833f621288 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55833f621270 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55833f621250 <col:83> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55833f621380 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55833f621318 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55833f621300 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55833f6212e0 <col:102> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x55833f621368 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55833f621350 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55833f621330 <col:121> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f621560 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f6213c0 <col:138> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x55833f621540 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55833f621510 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55833f621480 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55833f621438 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55833f621420 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55833f6213e0 <col:151> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55833f621468 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55833f621450 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55833f621400 <col:169> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x55833f6214e0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55833f6214a0 <col:186> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55833f6214f8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55833f6214c0 <col:198> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |-BinaryOperator 0x55833f621b50 <line:785:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55833f621660 <col:3> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x55833f621b20 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55833f621af0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55833f621ad8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55833f621680 <col:15> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f621b08 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f6216a0 <col:31> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x55833f621ab8 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55833f621a88 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55833f6218b0 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55833f6217d0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55833f6216f8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55833f6216e0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55833f6216c0 <col:45> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55833f6217b0 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55833f621748 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55833f621730 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55833f621710 <col:64> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |       | |   `-UnaryOperator 0x55833f621798 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55833f621780 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55833f621760 <col:83> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55833f621890 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55833f621828 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55833f621810 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55833f6217f0 <col:102> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |       |   `-UnaryOperator 0x55833f621878 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55833f621860 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55833f621840 <col:121> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f621a70 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f6218d0 <col:138> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x55833f621a50 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55833f621a20 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55833f621990 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55833f621948 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55833f621930 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55833f6218f0 <col:151> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55833f621978 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55833f621960 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55833f621910 <col:169> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |           |-ImplicitCastExpr 0x55833f6219f0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55833f6219b0 <col:186> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55833f621a08 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55833f6219d0 <col:198> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |-BinaryOperator 0x55833f622108 <line:786:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55833f621b80 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f6220f0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f6220c0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55833f622078 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f622060 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f621ba0 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f6220a8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f622090 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f621bc0 <col:36> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55833f622040 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55833f622010 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55833f621dd0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55833f621cf0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55833f621c18 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55833f621c00 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55833f621be0 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55833f621cd0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55833f621c68 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55833f621c50 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55833f621c30 <col:74> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x55833f621cb8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55833f621ca0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55833f621c80 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55833f621db0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55833f621d48 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55833f621d30 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55833f621d10 <col:112> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x55833f621d98 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55833f621d80 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55833f621d60 <col:131> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x55833f621ff8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55833f621fe0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55833f621df0 <col:148> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55833f621fc0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55833f621f90 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55833f621eb0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55833f621e68 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55833f621e50 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55833f621e10 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55833f621e98 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55833f621e80 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55833f621e30 <col:184> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x55833f621f48 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55833f621f00 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55833f621ed0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55833f621f78 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55833f621f60 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55833f621f28 <col:212> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55833f6226d0 <line:787:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55833f622128 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f6226b8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f622688 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55833f622640 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f622628 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f622148 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f622670 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f622658 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f622168 <col:36> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55833f622608 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55833f6225d8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55833f622378 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55833f622298 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55833f6221c0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55833f6221a8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55833f622188 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55833f622278 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55833f622210 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55833f6221f8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55833f6221d8 <col:74> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x55833f622260 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55833f622248 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55833f622228 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55833f622358 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55833f6222f0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55833f6222d8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55833f6222b8 <col:112> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x55833f622340 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55833f622328 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55833f622308 <col:131> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x55833f6225c0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55833f6225a8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55833f622398 <col:148> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55833f622588 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55833f622558 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55833f622458 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55833f622410 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55833f6223f8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55833f6223b8 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55833f622440 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55833f622428 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55833f6223d8 <col:184> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x55833f622528 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55833f6224a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55833f622478 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55833f622540 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55833f622500 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55833f6224d0 <col:219> 'int' 0
|   |-BinaryOperator 0x55833f622c88 <line:788:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55833f6226f0 <col:3> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55833f622c70 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f622c40 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55833f622bf8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f622be0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f622710 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f622c28 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f622c10 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f622730 <col:36> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |     `-ParenExpr 0x55833f622bc0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55833f622b90 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55833f622940 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55833f622860 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55833f622788 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55833f622770 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55833f622750 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55833f622840 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55833f6227d8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55833f6227c0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55833f6227a0 <col:74> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x55833f622828 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55833f622810 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55833f6227f0 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55833f622920 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55833f6228b8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55833f6228a0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55833f622880 <col:112> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x55833f622908 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55833f6228f0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55833f6228d0 <col:131> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x55833f622b68 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55833f622b50 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55833f622960 <col:148> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         `-ParenExpr 0x55833f622b30 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55833f622b00 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55833f622a20 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55833f6229d8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55833f6229c0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55833f622980 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55833f622a08 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55833f6229f0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55833f6229a0 <col:184> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x55833f622ab8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55833f622a70 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55833f622a40 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55833f622ae8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55833f622ad0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55833f622a98 <col:212> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55833f623250 <line:789:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55833f622ca8 <col:3> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55833f623238 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f623208 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55833f6231c0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f6231a8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f622cc8 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f6231f0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55833f6231d8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55833f622ce8 <col:36> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |     `-ParenExpr 0x55833f623188 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55833f623158 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55833f622ef8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55833f622e18 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55833f622d40 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55833f622d28 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55833f622d08 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55833f622df8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55833f622d90 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55833f622d78 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55833f622d58 <col:74> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         | |   `-UnaryOperator 0x55833f622de0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55833f622dc8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55833f622da8 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55833f622ed8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55833f622e70 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55833f622e58 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55833f622e38 <col:112> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |         |   `-UnaryOperator 0x55833f622ec0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55833f622ea8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55833f622e88 <col:131> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |         |-ImplicitCastExpr 0x55833f623140 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55833f623128 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55833f622f18 <col:148> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |         `-ParenExpr 0x55833f623108 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55833f6230d8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55833f622fd8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55833f622f90 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55833f622f78 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55833f622f38 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55833f622fc0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55833f622fa8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55833f622f58 <col:184> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |             |-ImplicitCastExpr 0x55833f6230a8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55833f623028 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55833f622ff8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55833f6230c0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55833f623080 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55833f623050 <col:219> 'int' 0
|   |-BinaryOperator 0x55833f6232c8 <line:790:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55833f623270 <col:3> 'int' lvalue Var 0x55833f619680 '__unbuffered_p2_EBX' 'int'
|   | `-ImplicitCastExpr 0x55833f6232b0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55833f623290 <col:25> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f6233f8 <line:791:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55833f6232e8 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-ConditionalOperator 0x55833f6233c8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55833f623380 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55833f623368 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55833f623308 <col:7> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f623398 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f623328 <col:25> 'int' lvalue Var 0x55833f619b00 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55833f6233b0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55833f623348 <col:37> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f623490 <line:792:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55833f623418 <col:3> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55833f623468 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55833f623438 <col:28> 'int' 0
|   |-CallExpr 0x55833f6234e8 <line:793:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f6234d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f6234b0 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f623540 <line:794:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f623528 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f623508 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f623828 <line:795:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55833f623560 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   | `-ConditionalOperator 0x55833f6237f8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55833f623620 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55833f6235d8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55833f6235c0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55833f623580 <col:7> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55833f623608 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55833f6235f0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55833f6235a0 <col:25> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x55833f6237e0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f623640 <col:42> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x55833f6237c0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55833f623790 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55833f623700 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55833f6236b8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55833f6236a0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55833f623660 <col:55> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55833f6236e8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55833f6236d0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55833f623680 <col:73> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x55833f623760 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55833f623720 <col:90> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55833f623778 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f623740 <col:102> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
|   |-BinaryOperator 0x55833f623a30 <line:796:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55833f623848 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f623a18 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f6239e8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55833f623908 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55833f6238c0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55833f6238a8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55833f623868 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55833f6238f0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55833f6238d8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55833f623888 <col:38> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f6239a0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f623958 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f623928 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f6239d0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f6239b8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f623980 <col:66> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55833f623d30 <line:797:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55833f623a50 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55833f623d18 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f623ce8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55833f623c08 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55833f623b10 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55833f623ac8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55833f623ab0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55833f623a70 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55833f623af8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55833f623ae0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55833f623a90 <col:38> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x55833f623be8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55833f623ba0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55833f623b70 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55833f623b30 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55833f623bd0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55833f623bb8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55833f623b50 <col:74> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f623ca0 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f623c58 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f623c28 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f623cd0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f623cb8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f623c80 <col:102> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55833f623f38 <line:798:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55833f623d50 <col:3> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55833f623f20 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f623ef0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55833f623e10 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55833f623dc8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55833f623db0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55833f623d70 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55833f623df8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55833f623de0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55833f623d90 <col:38> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f623ea8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f623e60 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f623e30 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f623ed8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f623ec0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f623e88 <col:66> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x55833f624220 <line:799:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55833f623f58 <col:3> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x55833f624208 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55833f6241d8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55833f6240f8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55833f624018 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55833f623fd0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55833f623fb8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55833f623f78 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55833f624000 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55833f623fe8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55833f623f98 <col:38> '_Bool' lvalue Var 0x55833f619ce0 'y$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x55833f6240d8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55833f624090 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55833f624078 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55833f624038 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55833f6240c0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55833f6240a8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55833f624058 <col:74> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x55833f624190 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55833f624148 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55833f624118 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55833f6241c0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55833f6241a8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55833f624170 <col:102> '_Bool' lvalue Var 0x55833f619ec0 'y$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x55833f624278 <line:800:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f624260 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f624240 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55833f6242d0 <line:801:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55833f6242b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f624298 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55833f624388 <line:802:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55833f6242f0 <col:3> 'int' lvalue Var 0x55833f619320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55833f624368 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55833f624350 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55833f624310 <col:22> 'int' lvalue Var 0x55833f619320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55833f624330 <col:41> 'int' 1
|   |-CallExpr 0x55833f6243e0 <line:803:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55833f6243c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55833f6243a8 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55833f624458 <line:804:3, col:36>
|     `-CallExpr 0x55833f624438 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55833f624420 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55833f624400 <col:10> 'void *(void)' Function 0x55833f5bfab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55833f624588 prev 0x55833f619068 <line:806:1, line:808:1> line:806:6 fence 'void ()'
| `-CompoundStmt 0x55833f624628 <line:807:1, line:808:1>
|-FunctionDecl 0x55833f624658 prev 0x55833f619128 <line:809:1, line:811:1> line:809:6 isync 'void ()'
| `-CompoundStmt 0x55833f6246f8 <line:810:1, line:811:1>
|-FunctionDecl 0x55833f624728 prev 0x55833f6191e8 <line:812:1, line:814:1> line:812:6 lwfence 'void ()'
| `-CompoundStmt 0x55833f6247c8 <line:813:1, line:814:1>
`-FunctionDecl 0x55833f624838 <line:815:1, line:852:1> line:815:5 main 'int ()'
  `-CompoundStmt 0x55833f628eb0 <line:816:1, line:852:1>
    |-DeclStmt 0x55833f624950 <line:817:3, col:18>
    | `-VarDecl 0x55833f6248e8 <col:3, col:13> col:13 used t2338 'pthread_t':'unsigned long'
    |-CallExpr 0x55833f624b58 <line:818:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55833f624b40 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55833f624968 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55833f6005b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55833f6249a8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55833f624988 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55833f6248e8 't2338' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55833f624bb0 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55833f624a20 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55833f6249f8 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55833f6249c0 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55833f624bc8 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55833f624a40 <col:39> 'void *(void *)' Function 0x55833f61a3b0 'P0' 'void *(void *)'
    | `-ParenExpr 0x55833f624ac0 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55833f624a98 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55833f624a60 <col:52> 'int' 0
    |-DeclStmt 0x55833f624c58 <line:819:3, col:18>
    | `-VarDecl 0x55833f624bf0 <col:3, col:13> col:13 used t2339 'pthread_t':'unsigned long'
    |-CallExpr 0x55833f624e00 <line:820:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55833f624de8 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55833f624c70 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55833f6005b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55833f624cb0 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55833f624c90 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55833f624bf0 't2339' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55833f624e40 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55833f624d28 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55833f624d00 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55833f624cc8 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55833f624e58 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55833f624d48 <col:39> 'void *(void *)' Function 0x55833f61ef70 'P1' 'void *(void *)'
    | `-ParenExpr 0x55833f624dc8 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55833f624da0 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55833f624d68 <col:52> 'int' 0
    |-DeclStmt 0x55833f624ee8 <line:821:3, col:18>
    | `-VarDecl 0x55833f624e80 <col:3, col:13> col:13 used t2340 'pthread_t':'unsigned long'
    |-CallExpr 0x55833f625090 <line:822:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55833f625078 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55833f624f00 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55833f6005b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55833f624f40 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55833f624f20 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55833f624e80 't2340' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55833f6250d0 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55833f624fb8 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55833f624f90 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55833f624f58 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55833f6250e8 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55833f624fd8 <col:39> 'void *(void *)' Function 0x55833f6208b8 'P2' 'void *(void *)'
    | `-ParenExpr 0x55833f625058 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55833f625030 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55833f624ff8 <col:52> 'int' 0
    |-CallExpr 0x55833f625138 <line:823:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55833f625120 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55833f625100 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55833f625208 <line:824:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x55833f625158 <col:3> '_Bool' lvalue Var 0x55833f619718 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x55833f6251f0 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x55833f6251d0 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x55833f6251b8 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x55833f625178 <col:21> 'int' lvalue Var 0x55833f619320 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x55833f625198 <col:41> 'int' 3
    |-CallExpr 0x55833f625260 <line:825:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55833f625248 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55833f625228 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55833f6252d8 <line:826:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55833f6252c0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55833f625280 <col:3> 'void (int)' Function 0x55833f5bf940 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x55833f625318 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55833f625300 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55833f6252a0 <col:21> '_Bool' lvalue Var 0x55833f619718 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x55833f625368 <line:827:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55833f625350 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55833f625330 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55833f625650 <line:828:3, col:103> 'int' '='
    | |-DeclRefExpr 0x55833f625388 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
    | `-ConditionalOperator 0x55833f625620 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x55833f625448 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x55833f625400 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x55833f6253e8 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55833f6253a8 <col:7> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x55833f625430 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x55833f625418 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55833f6253c8 <col:25> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55833f625608 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55833f625468 <col:42> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
    |   `-ParenExpr 0x55833f6255e8 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x55833f6255b8 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x55833f625528 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55833f6254e0 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55833f6254c8 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55833f625488 <col:55> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55833f625510 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55833f6254f8 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55833f6254a8 <col:73> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55833f625588 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55833f625548 <col:90> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x55833f6255a0 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55833f625568 <col:102> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
    |-BinaryOperator 0x55833f625858 <line:829:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55833f625670 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55833f625840 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55833f625810 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55833f625730 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55833f6256e8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55833f6256d0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55833f625690 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55833f625718 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55833f625700 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55833f6256b0 <col:38> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55833f6257c8 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55833f625780 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55833f625750 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55833f6257f8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55833f6257e0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55833f6257a8 <col:66> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55833f625b40 <line:830:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55833f625878 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55833f625b28 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55833f625af8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55833f625a18 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55833f625938 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55833f6258f0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55833f6258d8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55833f625898 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55833f625920 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55833f625908 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55833f6258b8 <col:38> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55833f6259f8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55833f6259b0 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55833f625998 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55833f625958 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55833f6259e0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55833f6259c8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55833f625978 <col:74> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55833f625ab0 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55833f625a68 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55833f625a38 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55833f625ae0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55833f625ac8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55833f625a90 <col:102> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |-BinaryOperator 0x55833f625d68 <line:831:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55833f625b60 <col:3> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55833f625d50 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55833f625d20 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55833f625c40 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55833f625bf8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55833f625be0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55833f625b80 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55833f625c28 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55833f625c10 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55833f625bc0 <col:38> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55833f625cd8 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55833f625c90 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55833f625c60 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55833f625d08 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55833f625cf0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55833f625cb8 <col:66> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55833f626050 <line:832:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55833f625d88 <col:3> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55833f626038 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55833f626008 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55833f625f28 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55833f625e48 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55833f625e00 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55833f625de8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55833f625da8 <col:20> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55833f625e30 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55833f625e18 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55833f625dc8 <col:38> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55833f625f08 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55833f625ec0 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55833f625ea8 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55833f625e68 <col:56> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55833f625ef0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55833f625ed8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55833f625e88 <col:74> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55833f625fc0 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55833f625f78 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55833f625f48 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55833f625ff0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55833f625fd8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55833f625fa0 <col:102> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |-CallExpr 0x55833f6260a8 <line:833:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55833f626090 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55833f626070 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55833f626100 <line:834:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55833f6260e8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55833f6260c8 <col:3> 'void ()' Function 0x55833f5bffa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55833f626198 <line:835:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x55833f626120 <col:3> '_Bool' lvalue Var 0x55833f61a220 'weak$$choice0' '_Bool'
    | `-CallExpr 0x55833f626178 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x55833f626160 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55833f626140 <col:19> '_Bool (void)' Function 0x55833f5bf770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x55833f626230 <line:836:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x55833f6261b8 <col:3> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
    | `-CallExpr 0x55833f626210 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x55833f6261f8 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55833f6261d8 <col:19> '_Bool (void)' Function 0x55833f5bf770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x55833f6262a8 <line:837:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x55833f626250 <col:3> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x55833f626290 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x55833f626270 <col:21> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x55833f626320 <line:838:3, col:15> 'int' '='
    | |-DeclRefExpr 0x55833f6262c8 <col:3> 'int' lvalue Var 0x55833f619b00 'y$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x55833f626308 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55833f6262e8 <col:15> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
    |-BinaryOperator 0x55833f626758 <line:839:3, col:162> 'int' '='
    | |-DeclRefExpr 0x55833f626340 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
    | `-ConditionalOperator 0x55833f626728 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x55833f626550 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x55833f626470 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x55833f626398 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x55833f626380 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x55833f626360 <col:8> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x55833f626450 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x55833f6263e8 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x55833f6263d0 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x55833f6263b0 <col:27> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x55833f626438 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x55833f626420 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x55833f626400 <col:46> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x55833f626530 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x55833f6264c8 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x55833f6264b0 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x55833f626490 <col:65> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x55833f626518 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x55833f626500 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55833f6264e0 <col:84> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55833f626710 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55833f626570 <col:101> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
    |   `-ParenExpr 0x55833f6266f0 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x55833f6266c0 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x55833f626630 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55833f6265e8 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55833f6265d0 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55833f626590 <col:106> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55833f626618 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55833f626600 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55833f6265b0 <col:124> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55833f626690 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55833f626650 <col:141> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x55833f6266a8 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55833f626670 <col:153> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
    |-BinaryOperator 0x55833f626c98 <line:840:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55833f626778 <col:3> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
    | `-ConditionalOperator 0x55833f626c68 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55833f626c38 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55833f626c20 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55833f626798 <col:15> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55833f626c50 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55833f6267b8 <col:31> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
    |   `-ParenExpr 0x55833f626c00 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55833f626bd0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55833f6269c8 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55833f6268e8 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55833f626810 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55833f6267f8 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55833f6267d8 <col:45> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55833f6268c8 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55833f626860 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55833f626848 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55833f626828 <col:64> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55833f6268b0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55833f626898 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55833f626878 <col:83> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55833f6269a8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55833f626940 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55833f626928 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55833f626908 <col:102> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55833f626990 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55833f626978 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55833f626958 <col:121> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55833f626b88 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55833f6269e8 <col:138> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
    |       `-ParenExpr 0x55833f626b68 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55833f626b38 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55833f626aa8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55833f626a60 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55833f626a48 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55833f626a08 <col:151> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55833f626a90 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55833f626a78 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55833f626a28 <col:169> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55833f626b08 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55833f626ac8 <col:186> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x55833f626b20 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55833f626ae8 <col:198> 'int' lvalue Var 0x55833f61a038 'y$w_buff0' 'int'
    |-BinaryOperator 0x55833f6271a8 <line:841:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55833f626cb8 <col:3> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
    | `-ConditionalOperator 0x55833f627178 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55833f627148 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55833f627130 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55833f626cd8 <col:15> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55833f627160 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55833f626cf8 <col:31> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
    |   `-ParenExpr 0x55833f627110 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55833f6270e0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55833f626f08 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55833f626e28 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55833f626d50 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55833f626d38 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55833f626d18 <col:45> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55833f626e08 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55833f626da0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55833f626d88 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55833f626d68 <col:64> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55833f626df0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55833f626dd8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55833f626db8 <col:83> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55833f626ee8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55833f626e80 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55833f626e68 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55833f626e48 <col:102> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55833f626ed0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55833f626eb8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55833f626e98 <col:121> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55833f6270c8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55833f626f28 <col:138> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
    |       `-ParenExpr 0x55833f6270a8 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55833f627078 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55833f626fe8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55833f626fa0 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55833f626f88 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55833f626f48 <col:151> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55833f626fd0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55833f626fb8 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55833f626f68 <col:169> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55833f627048 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55833f627008 <col:186> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x55833f627060 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55833f627028 <col:198> 'int' lvalue Var 0x55833f61a130 'y$w_buff1' 'int'
    |-BinaryOperator 0x55833f627750 <line:842:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55833f6271c8 <col:3> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55833f627738 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55833f627708 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55833f6276c0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55833f6276a8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55833f6271e8 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55833f6276f0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55833f6276d8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55833f627208 <col:36> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x55833f627688 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55833f627658 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55833f627418 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55833f627338 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55833f627260 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55833f627248 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55833f627228 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55833f627318 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55833f6272b0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55833f627298 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55833f627278 <col:74> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55833f627300 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55833f6272e8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55833f6272c8 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55833f6273f8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55833f627390 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55833f627378 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55833f627358 <col:112> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55833f6273e0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55833f6273c8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55833f6273a8 <col:131> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55833f627640 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55833f627628 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55833f627438 <col:148> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x55833f627608 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55833f6275d8 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55833f6274f8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55833f6274b0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55833f627498 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55833f627458 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55833f6274e0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55833f6274c8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55833f627478 <col:184> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55833f627590 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55833f627548 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55833f627518 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55833f6275c0 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55833f6275a8 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55833f627570 <col:212> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55833f627d28 <line:843:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55833f627770 <col:3> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55833f627d10 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55833f627ce0 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55833f627c98 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55833f627c80 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55833f627790 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55833f627cc8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55833f627cb0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55833f6277b0 <col:36> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x55833f627c60 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55833f627c30 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55833f6279c0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55833f6278e0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55833f627808 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55833f6277f0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55833f6277d0 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55833f6278c0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55833f627858 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55833f627840 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55833f627820 <col:74> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55833f6278a8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55833f627890 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55833f627870 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55833f6279a0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55833f627938 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55833f627920 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55833f627900 <col:112> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55833f627988 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55833f627970 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55833f627950 <col:131> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55833f627c18 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55833f627c00 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55833f6279e0 <col:148> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x55833f627be0 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55833f627ba0 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55833f627aa0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55833f627a58 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55833f627a40 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55833f627a00 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55833f627a88 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55833f627a70 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55833f627a20 <col:184> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55833f627b70 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55833f627af0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55833f627ac0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55833f627b88 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55833f627b48 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55833f627b18 <col:219> 'int' 0
    |-BinaryOperator 0x55833f6282d0 <line:844:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55833f627d48 <col:3> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55833f6282b8 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55833f628288 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55833f628240 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55833f628228 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55833f627d68 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55833f628270 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55833f628258 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55833f627d88 <col:36> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x55833f628208 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55833f6281d8 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55833f627f98 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55833f627eb8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55833f627de0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55833f627dc8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55833f627da8 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55833f627e98 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55833f627e30 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55833f627e18 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55833f627df8 <col:74> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55833f627e80 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55833f627e68 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55833f627e48 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55833f627f78 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55833f627f10 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55833f627ef8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55833f627ed8 <col:112> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55833f627f60 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55833f627f48 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55833f627f28 <col:131> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55833f6281c0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55833f6281a8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55833f627fb8 <col:148> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x55833f628188 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55833f628158 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55833f628078 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55833f628030 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55833f628018 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55833f627fd8 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55833f628060 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55833f628048 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55833f627ff8 <col:184> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55833f628110 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55833f6280c8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55833f628098 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55833f628140 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55833f628128 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55833f6280f0 <col:212> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55833f628898 <line:845:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55833f6282f0 <col:3> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55833f628880 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55833f628850 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55833f628808 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55833f6287f0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55833f628310 <col:20> '_Bool' lvalue Var 0x55833f61a298 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55833f628838 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55833f628820 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55833f628330 <col:36> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x55833f6287d0 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55833f6287a0 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55833f628540 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55833f628460 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55833f628388 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55833f628370 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55833f628350 <col:55> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55833f628440 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55833f6283d8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55833f6283c0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55833f6283a0 <col:74> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55833f628428 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55833f628410 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55833f6283f0 <col:93> '_Bool' lvalue Var 0x55833f61a1a8 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55833f628520 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55833f6284b8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55833f6284a0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55833f628480 <col:112> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55833f628508 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55833f6284f0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55833f6284d0 <col:131> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55833f628788 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55833f628770 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55833f628560 <col:148> '_Bool' lvalue Var 0x55833f619d58 'y$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x55833f628750 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55833f628720 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55833f628620 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55833f6285d8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55833f6285c0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55833f628580 <col:166> '_Bool' lvalue Var 0x55833f61a0b0 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55833f628608 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55833f6285f0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55833f6285a0 <col:184> '_Bool' lvalue Var 0x55833f619b78 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55833f6286f0 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55833f628670 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55833f628640 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55833f628708 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55833f6286c8 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55833f628698 <col:219> 'int' 0
    |-BinaryOperator 0x55833f628b68 <line:846:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x55833f6288b8 <col:3> '_Bool' lvalue Var 0x55833f619790 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x55833f628b50 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x55833f628b38 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x55833f628b18 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x55833f628af8 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x55833f628a60 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x55833f6289c8 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x55833f628930 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x55833f628918 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x55833f6288d8 <col:23> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
    |         | | | `-IntegerLiteral 0x55833f6288f8 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x55833f6289a8 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x55833f628990 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x55833f628950 <col:33> 'int' lvalue Var 0x55833f619440 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x55833f628970 <col:56> 'int' 1
    |         | `-BinaryOperator 0x55833f628a40 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x55833f628a28 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x55833f6289e8 <col:61> 'int' lvalue Var 0x55833f619560 '__unbuffered_p2_EAX' 'int'
    |         |   `-IntegerLiteral 0x55833f628a08 <col:84> 'int' 1
    |         `-BinaryOperator 0x55833f628ad8 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x55833f628ac0 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55833f628a80 <col:89> 'int' lvalue Var 0x55833f619680 '__unbuffered_p2_EBX' 'int'
    |           `-IntegerLiteral 0x55833f628aa0 <col:112> 'int' 0
    |-BinaryOperator 0x55833f628cc0 <line:847:3, col:37> 'int' '='
    | |-DeclRefExpr 0x55833f628b88 <col:3> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
    | `-ConditionalOperator 0x55833f628c90 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x55833f628c48 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55833f628c30 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55833f628ba8 <col:7> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x55833f628c60 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55833f628bf0 <col:25> 'int' lvalue Var 0x55833f619b00 'y$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x55833f628c78 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x55833f628c10 <col:37> 'int' lvalue Var 0x55833f6199b0 'y' 'int'
    |-BinaryOperator 0x55833f628d58 <line:848:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x55833f628ce0 <col:3> '_Bool' lvalue Var 0x55833f619a48 'y$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x55833f628d30 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x55833f628d00 <col:28> 'int' 0
    |-CallExpr 0x55833f628db0 <line:849:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55833f628d98 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55833f628d78 <col:3> 'void ()' Function 0x55833f5c0060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55833f628e28 <line:850:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55833f628e10 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55833f628dd0 <col:3> 'void (int)' Function 0x55833f5bfd28 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x55833f628e68 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55833f628e50 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55833f628df0 <col:21> '_Bool' lvalue Var 0x55833f619790 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x55833f628ea0 <line:851:3, col:10>
      `-IntegerLiteral 0x55833f628e80 <col:10> 'int' 0
