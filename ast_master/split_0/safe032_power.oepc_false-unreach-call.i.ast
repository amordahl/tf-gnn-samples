TranslationUnitDecl 0x556516d5be18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x556516d5c6d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x556516d5c3b0 '__int128'
|-TypedefDecl 0x556516d5c748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x556516d5c3d0 'unsigned __int128'
|-TypedefDecl 0x556516d5ca50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x556516d5c820 'struct __NSConstantString_tag'
|   `-Record 0x556516d5c7a0 '__NSConstantString_tag'
|-TypedefDecl 0x556516d5caf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x556516d5cab0 'char *'
|   `-BuiltinType 0x556516d5beb0 'char'
|-TypedefDecl 0x556516d9b650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x556516d5cd90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x556516d5cbd0 'struct __va_list_tag'
|     `-Record 0x556516d5cb50 '__va_list_tag'
|-FunctionDecl 0x556516d9b770 <./split_0/safe032_power.oepc_false-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x556516d9b940 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x556516d9b870 <col:31> col:34 'int'
|-FunctionDecl 0x556516d9bab8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x556516d9bbe0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x556516d9bd28 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x556516d9bc98 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x556516d9bf58 <col:40, col:99>
|   |-IfStmt 0x556516d9bf28 <col:42, col:88>
|   | |-UnaryOperator 0x556516d9be08 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x556516d9bdf0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x556516d9bdd0 <col:47> 'int' lvalue ParmVar 0x556516d9bc98 'expression' 'int'
|   | `-CompoundStmt 0x556516d9bf10 <col:59, col:88>
|   |   `-LabelStmt 0x556516d9bef8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x556516d9be88 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x556516d9be70 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x556516d9be20 <col:68> 'void () __attribute__((noreturn))' Function 0x556516d9bbe0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x556516d9bf40 <col:89>
|   `-ReturnStmt 0x556516d9bf48 <col:91>
|-FunctionDecl 0x556516d9bfa0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x556516d9c060 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x556516d9c3e0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556516d9c118 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x556516d9c198 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x556516d9c218 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x556516d9c298 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x556516d9c4a0 <line:11:22>
|-FunctionDecl 0x556516dc2520 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556516d9c510 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x556516d9c590 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x556516dc2350 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x556516dc23d0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x556516dc25e0 <line:14:22>
|-FunctionDecl 0x556516dc2890 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556516dc2650 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x556516dc26d0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x556516dc2750 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x556516dc2948 <line:16:22>
|-TypedefDecl 0x556516dc29b8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x556516d5bf70 'unsigned char'
|-TypedefDecl 0x556516dc2a28 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x556516d5bf90 'unsigned short'
|-TypedefDecl 0x556516dc2a98 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-TypedefDecl 0x556516dc2b08 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc2b78 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x556516d5bed0 'signed char'
|-TypedefDecl 0x556516dc2be8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x556516d5bf70 'unsigned char'
|-TypedefDecl 0x556516dc2c58 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x556516d5bef0 'short'
|-TypedefDecl 0x556516dc2cc8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x556516d5bf90 'unsigned short'
|-TypedefDecl 0x556516dc2d38 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x556516d5bf10 'int'
|-TypedefDecl 0x556516dc2da8 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-TypedefDecl 0x556516dc2e18 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc2e88 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc2ef8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc2f68 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc2fd8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc3048 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-TypedefDecl 0x556516dc30b8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-TypedefDecl 0x556516dc3128 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc3198 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc3208 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-TypedefDecl 0x556516dc3278 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc32e8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc3378 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc33e8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x556516d5bf10 'int'
|-RecordDecl 0x556516dc3440 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x556516dc3588 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x556516dc3640 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x556516dc35e0 'struct __fsid_t' sugar
|   `-RecordType 0x556516dc34c0 '__fsid_t'
|     `-Record 0x556516dc3440 ''
|-TypedefDecl 0x556516dc36c8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc3738 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc37a8 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc3818 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-TypedefDecl 0x556516dc3888 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc38f8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-TypedefDecl 0x556516dc3968 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc39d8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x556516d5bf10 'int'
|-TypedefDecl 0x556516dc3a48 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x556516d5bf10 'int'
|-TypedefDecl 0x556516dc3ab8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x556516d5bf10 'int'
|-TypedefDecl 0x556516dc3b28 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x556516d5c630 'void *'
|   `-BuiltinType 0x556516d5be70 'void'
|-TypedefDecl 0x556516dc3b98 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc3c08 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc3c78 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc3ce8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc3d58 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc3dc8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc3e38 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc3ea8 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc3f18 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc3f88 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc3ff8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc4088 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x556516dc4050 '__off64_t' sugar
|   |-Typedef 0x556516dc3378 '__off64_t'
|   `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc4180 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x556516dc4140 '__quad_t *'
|   `-TypedefType 0x556516dc40e0 '__quad_t' sugar
|     |-Typedef 0x556516dc2ef8 '__quad_t'
|     `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc41f0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x556516d5cab0 'char *'
|   `-BuiltinType 0x556516d5beb0 'char'
|-TypedefDecl 0x556516dc4260 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc42d0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-FunctionDecl 0x556516dc5458 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x556516dc5380 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x556516dc5768 <line:72:1, line:74:1>
|   `-ReturnStmt 0x556516dc5758 <line:73:3, col:34>
|     `-CallExpr 0x556516dc5718 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x556516dc5700 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x556516dc5690 <col:10> '<builtin fn type>' Function 0x556516dc5500 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x556516dc5740 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556516dc56b0 <col:29> 'unsigned int' lvalue ParmVar 0x556516dc5380 '__bsx' 'unsigned int'
|-FunctionDecl 0x556516dc5500 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x556516dc55a0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x556516dc5610 <col:10> Implicit
| `-ConstAttr 0x556516dc5668 <col:10> Implicit
|-FunctionDecl 0x556516dc58c0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x556516dc57b8 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x556516dc5bd8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x556516dc5bc8 <line:78:3, col:34>
|     `-CallExpr 0x556516dc5b88 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x556516dc5b70 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x556516dc5af8 <col:10> '<builtin fn type>' Function 0x556516dc5968 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x556516dc5bb0 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x556516dc5b18 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x556516dc57b8 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x556516dc5968 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x556516dc5a08 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x556516dc5a78 <col:10> Implicit
| `-ConstAttr 0x556516dc5ad0 <col:10> Implicit
|-TypedefDecl 0x556516dc5c08 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-TypedefDecl 0x556516dc5c98 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x556516dc5c60 '__time_t' sugar
|   |-Typedef 0x556516dc3888 '__time_t'
|   `-BuiltinType 0x556516d5bf30 'long'
|-RecordDecl 0x556516dc5cf0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x556516dc5da8 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x556516dc5e38 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x556516dc5ec8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x556516dc5e90 '__pid_t' sugar
|   |-Typedef 0x556516dc33e8 '__pid_t'
|   `-BuiltinType 0x556516d5bf10 'int'
|-RecordDecl 0x556516dc5f20 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x556516dc5fe0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x556516dc6030 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x556516dc60f0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x556516dc6158 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-RecordDecl 0x556516dc61b0 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x556516dc7480 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x556516dc7530 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x556516dc74d0 'struct cpu_set_t' sugar
|   `-RecordType 0x556516dc6230 'cpu_set_t'
|     `-Record 0x556516dc61b0 ''
|-FunctionDecl 0x556516dc7808 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x556516dc75d8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x556516dc76e0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x556516dc78b8 <line:108:19>
|-FunctionDecl 0x556516dc7a90 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x556516dc7920 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x556516dc7b38 <col:69>
|-FunctionDecl 0x556516dc7cb0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x556516dc7ba0 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x556516dc7d58 <col:64>
|-FunctionDecl 0x556516dc8018 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x556516dc7dc0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x556516dc7ef8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x556516dc80c8 <line:114:22>
|-FunctionDecl 0x556516dc83b0 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x556516dc8130 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x556516dc8228 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x556516dc8460 <col:88>
|-FunctionDecl 0x556516dc8718 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x556516dc84c8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x556516dc8548 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x556516dc85d8 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x556516dc87d0 <col:62>
|-FunctionDecl 0x556516dc8948 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x556516dc8838 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x556516dc89f0 <col:63>
|-FunctionDecl 0x556516dc8b18 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x556516dc8bb8 <col:47>
|-FunctionDecl 0x556516dc8cc0 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x556516dc8c28 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x556516dc8d68 <col:69>
|-FunctionDecl 0x556516dc8e70 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x556516dc8dd8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x556516dc8f18 <col:69>
|-FunctionDecl 0x556516dc91d8 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x556516dc8f80 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x556516dc90b8 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x556516dc9288 <col:88>
|-TypedefDecl 0x556516dc9318 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x556516dc92e0 '__clock_t' sugar
|   |-Typedef 0x556516dc36c8 '__clock_t'
|   `-BuiltinType 0x556516d5bf30 'long'
|-TypedefDecl 0x556516dc93c0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x556516dc9370 '__clockid_t' sugar
|   |-Typedef 0x556516dc3ab8 '__clockid_t'
|   `-BuiltinType 0x556516d5bf10 'int'
|-TypedefDecl 0x556516dc9458 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x556516dc9420 '__timer_t' sugar
|   |-Typedef 0x556516dc3b28 '__timer_t'
|   `-PointerType 0x556516d5c630 'void *'
|     `-BuiltinType 0x556516d5be70 'void'
|-RecordDecl 0x556516dc94b0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x556516dc9570 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x556516dc95d8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x556516dc9640 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x556516dc96a8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x556516dc9710 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x556516dc9778 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x556516dc97e0 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x556516dc9848 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x556516dc98b0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x556516dc9918 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x556516dc9980 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x556516dc99d0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x556516dc9a98 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x556516dc9b08 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x556516dc9bb0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x556516dc9d80 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x556516dc9e20 <col:45>
|-FunctionDecl 0x556516dca000 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x556516dc9ef0 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x556516dca0a8 <col:54>
|-FunctionDecl 0x556516dca2a8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x556516dca110 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x556516dca188 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x556516dca358 <line:158:22>
| `-ConstAttr 0x556516dcaff0 <col:63>
|-FunctionDecl 0x556516dcb1f0 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x556516dcb0e8 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x556516dcb298 <col:56>
|-FunctionDecl 0x556516dcb640 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x556516dcb308 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x556516dcb380 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x556516dcb400 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x556516dcb4f8 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x556516dcb700 <col:54>
|-RecordDecl 0x556516dcb758 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x556516dcb808 parent 0x556516d5be18 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x556516dcba68 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x556516dcbb08 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x556516dcbb70 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x556516dcbbd8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x556516dcbcc8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x556516dcbde8 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x556516dcbd90 'struct __locale_struct *'
|   `-ElaboratedType 0x556516dcbd20 'struct __locale_struct' sugar
|     `-RecordType 0x556516dcb7e0 'struct __locale_struct'
|       `-Record 0x556516dcb758 '__locale_struct'
|-TypedefDecl 0x556516dcbe98 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x556516dcbe60 '__locale_t' sugar
|   |-Typedef 0x556516dcbde8 '__locale_t'
|   `-PointerType 0x556516dcbd90 'struct __locale_struct *'
|     `-ElaboratedType 0x556516dcbd20 'struct __locale_struct' sugar
|       `-RecordType 0x556516dcb7e0 'struct __locale_struct'
|         `-Record 0x556516dcb758 '__locale_struct'
|-FunctionDecl 0x556516dcd2a0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x556516dcbf08 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x556516dcbf80 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x556516dcd028 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x556516dcd0b8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x556516dcd130 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x556516dcd368 <col:40>
|-FunctionDecl 0x556516dcd558 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x556516dcd430 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x556516dcd600 <col:66>
|-FunctionDecl 0x556516dcd710 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x556516dcd668 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x556516dcd7b8 <col:69>
|-FunctionDecl 0x556516dcd9e8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x556516dcd820 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x556516dcd8b0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x556516dcda98 <col:52>
|-FunctionDecl 0x556516dcdc40 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x556516dcdb00 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x556516dcdb90 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x556516dcdcf0 <col:55>
|-FunctionDecl 0x556516dcde88 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x556516dcdd70 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x556516dcdf30 <col:62>
|-FunctionDecl 0x556516dce168 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x556516dcdf98 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x556516dce210 <col:60>
|-FunctionDecl 0x556516dce438 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x556516dce290 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x556516dce310 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x556516dce4e8 <col:44>
|-FunctionDecl 0x556516dce6f8 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x556516dce550 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x556516dce5d0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x556516dce7a8 <col:49>
|-VarDecl 0x556516dce8a8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x556516dce928 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x556516dce9a8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x556516dcea70 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x556516dceba0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x556516dcec40 <col:42>
|-VarDecl 0x556516dcecb0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x556516dced30 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x556516dceeb8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x556516dceda8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x556516dcef60 <col:57>
|-FunctionDecl 0x556516dcf0d0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x556516dcefe0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x556516dcf178 <col:56>
|-FunctionDecl 0x556516dcf288 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x556516dcf1f8 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x556516dcf330 <col:59>
|-FunctionDecl 0x556516dcf438 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x556516dcf3a0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x556516dcf4e0 <col:48>
| `-ConstAttr 0x556516dcf538 <col:89>
|-FunctionDecl 0x556516dcf798 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x556516dcf5e8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x556516dcf678 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x556516dcf9f8 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x556516dcf888 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556516dcf918 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x556516dcfaa8 <col:88>
|-FunctionDecl 0x556516dcfc40 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x556516dcfb10 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556516dcfba0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x556516dcfcf0 <col:88>
|-FunctionDecl 0x556516dcff08 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x556516dcfd58 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556516dcfde8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x556516dcffb8 <line:209:22>
|-FunctionDecl 0x556516dd0358 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x556516dd0020 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556516dd00e0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x556516dd0170 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x556516dd0200 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x556516dd0658 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x556516dd0458 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x556516dd0530 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x556516dd0708 <col:85>
|-FunctionDecl 0x556516dd0af8 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x556516dd0770 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x556516dd08a8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x556516dd09b0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x556516dd0bb0 <col:52>
|-FunctionDecl 0x556516dd0d28 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x556516dd0c18 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x556516dd0dd0 <col:61>
|-FunctionDecl 0x556516dd1248 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x556516dd0e38 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x556516dd0eb8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x556516dd0fe8 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x556516dd10f0 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x556516dd1308 <col:62>
|-FunctionDecl 0x556516dd1528 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x556516dd1370 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x556516dd1400 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x556516dd15d8 <line:222:22>
|-FunctionDecl 0x556516dd16d8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x556516dd1640 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x556516dd1780 <col:65>
|-TypedefDecl 0x556516dd17f0 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x556516d5bfd0 'unsigned long'
|-RecordDecl 0x556516dd1848 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x556516dd1990 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x556516dd19f8 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556516dd1aa8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x556516dd1a50 'union pthread_attr_t' sugar
|   `-RecordType 0x556516dd18d0 'union pthread_attr_t'
|     `-Record 0x556516dd1848 'pthread_attr_t'
|-RecordDecl 0x556516dd1b00 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x556516dd1c78 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x556516dd1cf0 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x556516dd1da0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x556516dd1d40 'struct __pthread_internal_list' sugar
|   `-RecordType 0x556516dd1b80 'struct __pthread_internal_list'
|     `-Record 0x556516dd1b00 '__pthread_internal_list'
|-RecordDecl 0x556516dd1e10 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x556516dd1eb8 parent 0x556516d5be18 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x556516dd1f90 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x556516dd1ff8 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x556516dd2060 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x556516dd6110 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x556516dd6178 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x556516dd61e0 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x556516dd6268 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x556516dd6320 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x556516dd6410 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x556516dd6478 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556516dd6600 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x556516dd65a0 'union pthread_mutex_t' sugar
|   `-RecordType 0x556516dd1e90 'pthread_mutex_t'
|     `-Record 0x556516dd1e10 ''
|-RecordDecl 0x556516dd6670 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x556516dd67b0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x556516dd6818 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x556516dd68d0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x556516dd6870 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x556516dd66f0 'pthread_mutexattr_t'
|     `-Record 0x556516dd6670 ''
|-RecordDecl 0x556516dd6940 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x556516dd69e8 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x556516dd6ab0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x556516dd6b18 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x556516dd6b80 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x556516dd6be8 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x556516dd6c50 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x556516dd6cb8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x556516dd6d20 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x556516dd6d88 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x556516dd6e40 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at ./split_0/safe032_power.oepc_false-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at ./split_0/safe032_power.oepc_false-unreach-call.i:259:3)'
| |-FieldDecl 0x556516dd6f30 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x556516dd6f98 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x556516dd8130 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x556516dd7070 'union pthread_cond_t' sugar
|   `-RecordType 0x556516dd69c0 'pthread_cond_t'
|     `-Record 0x556516dd6940 ''
|-RecordDecl 0x556516dd81a0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x556516dd82a0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x556516dd8308 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x556516dd83c0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x556516dd8360 'union pthread_condattr_t' sugar
|   `-RecordType 0x556516dd8220 'pthread_condattr_t'
|     `-Record 0x556516dd81a0 ''
|-TypedefDecl 0x556516dd8448 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x556516d5bfb0 'unsigned int'
|-TypedefDecl 0x556516dd84b8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x556516d5bf10 'int'
|-RecordDecl 0x556516dd8510 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x556516dd85b8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x556516dd8680 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x556516dd86e8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x556516dd8750 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x556516dd87b8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x556516dd8820 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x556516dd8888 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x556516dd88f0 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x556516dd8958 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x556516dd89c0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x556516dd8a28 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x556516dd8a90 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x556516dd8b40 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at ./split_0/safe032_power.oepc_false-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at ./split_0/safe032_power.oepc_false-unreach-call.i:282:3)'
| |-FieldDecl 0x556516dd8be8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x556516dd8c50 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556516dd8da0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x556516dd8d40 'union pthread_rwlock_t' sugar
|   `-RecordType 0x556516dd8590 'pthread_rwlock_t'
|     `-Record 0x556516dd8510 ''
|-RecordDecl 0x556516dd8e10 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x556516dd8f50 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x556516dd8fb8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556516dd9070 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x556516dd9010 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x556516dd8e90 'pthread_rwlockattr_t'
|     `-Record 0x556516dd8e10 ''
|-TypedefDecl 0x556516dda140 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x556516d5bf14 'volatile int' volatile
|   `-BuiltinType 0x556516d5bf10 'int'
|-RecordDecl 0x556516dda198 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x556516dda2e0 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x556516dda348 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x556516dda400 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x556516dda3a0 'union pthread_barrier_t' sugar
|   `-RecordType 0x556516dda220 'pthread_barrier_t'
|     `-Record 0x556516dda198 ''
|-RecordDecl 0x556516dda470 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x556516dda570 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x556516dda5d8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x556516dda690 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x556516dda630 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x556516dda4f0 'pthread_barrierattr_t'
|     `-Record 0x556516dda470 ''
|-TypedefDecl 0x556516dda7a8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x556516dda740 'long [8]' 8 
|   `-BuiltinType 0x556516d5bf30 'long'
|-EnumDecl 0x556516dda800 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x556516dda8c8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x556516dda918 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x556516dda968 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x556516ddaa38 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x556516ddaa88 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x556516ddaad8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x556516ddab28 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x556516ddabb0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x556516ddab98 <col:26> 'int'
| |   `-DeclRefExpr 0x556516ddab78 <col:26> 'int' EnumConstant 0x556516ddaa38 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x556516ddac38 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x556516ddac20 <col:29> 'int'
| |   `-DeclRefExpr 0x556516ddac00 <col:29> 'int' EnumConstant 0x556516ddaa88 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x556516ddacc0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x556516ddaca8 <col:30> 'int'
| |   `-DeclRefExpr 0x556516ddac88 <col:30> 'int' EnumConstant 0x556516ddaad8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x556516ddad48 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x556516ddad30 <col:27> 'int'
|     `-DeclRefExpr 0x556516ddad10 <col:27> 'int' EnumConstant 0x556516ddabb0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x556516ddad98 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x556516ddae68 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x556516ddaef0 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x556516ddaed8 <col:30> 'int'
| |   `-DeclRefExpr 0x556516ddaeb8 <col:30> 'int' EnumConstant 0x556516ddae68 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x556516ddaf40 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x556516ddafc8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x556516ddafb0 <col:29> 'int'
|     `-DeclRefExpr 0x556516ddaf90 <col:29> 'int' EnumConstant 0x556516ddaf40 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x556516ddb018 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x556516ddb0e8 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x556516ddb150 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x556516ddb1a0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x556516ddb1f0 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x556516ddb2b8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x556516ddb308 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x556516ddb358 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x556516ddb3e0 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x556516ddb3c8 <col:31> 'int'
|     `-DeclRefExpr 0x556516ddb3a8 <col:31> 'int' EnumConstant 0x556516ddb2b8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x556516ddb430 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x556516ddb4f8 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x556516ddb548 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x556516ddb598 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x556516ddb668 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x556516ddb6b8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x556516ddb708 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x556516ddb7d8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x556516ddb828 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x556516ddb878 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x556516ddbab8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x556516ddbb20 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x556516ddbb88 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x556516ddbca8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x556516ddbcf8 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x556516ddbdc8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x556516ddbe18 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x556516ddbe68 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x556516ddbf38 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x556516ddbf88 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x556516ddc5b8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x556516ddc080 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x556516ddc1a0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516ddc3a0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x556516ddc420 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x556516ddc678 <col:47>
| |-NonNullAttr 0x556516ddc6d0 <col:77, col:94> 1 3
| `-CallbackAttr 0x556516ddc708 <line:386:12> Implicit 2 3
|-FunctionDecl 0x556516ddc830 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x556516ddc760 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x556516ddca88 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x556516ddc8e8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x556516ddc968 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x556516ddcc58 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x556516ddcb48 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x556516ddcd00 <col:60>
|-FunctionDecl 0x556516ddce50 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x556516ddcef0 <col:54>
| `-ConstAttr 0x556516ddcf48 <col:95>
|-FunctionDecl 0x556516dde990 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x556516ddcf80 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556516ddcff8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x556516ddea40 <line:395:19>
| `-ConstAttr 0x556516ddea98 <col:60>
|-FunctionDecl 0x556516ddec68 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x556516ddeb30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x556516dded10 <col:71>
| `-NonNullAttr 0x556516dded68 <col:112, col:126> 1
|-FunctionDecl 0x556516ddee70 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x556516ddedb8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x556516ddef18 <line:398:22>
| `-NonNullAttr 0x556516ddef70 <col:63, col:77> 1
|-FunctionDecl 0x556516ddf198 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x556516ddefb8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x556516ddf038 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x556516ddf248 <line:401:22>
| `-NonNullAttr 0x556516ddf2a0 <col:63, col:80> 1 2
|-FunctionDecl 0x556516ddf4a8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x556516ddf2e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556516ddf368 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x556516ddf558 <line:404:22>
| `-NonNullAttr 0x556516ddf5b0 <col:63, col:77> 1
|-FunctionDecl 0x556516ddf808 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x556516ddf5f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x556516ddf6a0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x556516ddf8b8 <line:407:22>
| `-NonNullAttr 0x556516ddf910 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de0b68 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x556516de09b0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556516de0a28 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x556516de0c18 <line:410:22>
| `-NonNullAttr 0x556516de0c70 <col:63, col:77> 1
|-FunctionDecl 0x556516de0ea8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x556516de0cb8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516de0d48 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x556516de0f58 <line:413:22>
| `-NonNullAttr 0x556516de0fb0 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de11e8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x556516de0ff8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516de1088 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x556516de1298 <col:37>
| `-NonNullAttr 0x556516de12f0 <col:78, col:95> 1 2
|-FunctionDecl 0x556516de14d8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516de1338 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516de13b8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x556516de1588 <line:419:22>
| `-NonNullAttr 0x556516de15e0 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de1768 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x556516de1628 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556516de16a8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x556516de1818 <line:421:22>
| `-NonNullAttr 0x556516de1870 <col:63, col:77> 1
|-FunctionDecl 0x556516de1a38 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516de18b8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516de1938 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x556516de1ae8 <line:424:22>
| `-NonNullAttr 0x556516de1b40 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de1cc8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x556516de1b88 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556516de1c08 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x556516de1d78 <line:427:22>
| `-NonNullAttr 0x556516de1dd0 <col:63, col:77> 1
|-FunctionDecl 0x556516de1f78 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516de1e18 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516de1e98 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x556516de2028 <line:430:22>
| `-NonNullAttr 0x556516de2080 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de2208 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x556516de20c8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556516de2148 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x556516de22b8 <line:432:22>
| `-NonNullAttr 0x556516de2310 <col:63, col:77> 1
|-FunctionDecl 0x556516de2538 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x556516de2358 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516de23d8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x556516de25e8 <line:435:22>
| |-NonNullAttr 0x556516de2640 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x556516de2678 <col:100> "" ""
|-FunctionDecl 0x556516de2888 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x556516de26c8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556516de2748 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x556516de2938 <line:438:22>
| |-NonNullAttr 0x556516de2990 <col:63, col:77> 1
| `-DeprecatedAttr 0x556516de29d8 <col:97> "" ""
|-FunctionDecl 0x556516de2bc8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x556516de2a28 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516de2aa0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x556516de2c78 <line:441:22>
| `-NonNullAttr 0x556516de2cd0 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de2e50 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x556516de2d18 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556516de2d90 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x556516de2f00 <line:444:22>
| `-NonNullAttr 0x556516de2f58 <col:63, col:77> 1
|-FunctionDecl 0x556516de3248 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x556516de2fa8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x556516de3028 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x556516de30a0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x556516de3300 <line:448:22>
| `-NonNullAttr 0x556516de3358 <col:63, col:83> 1 2 3
|-FunctionDecl 0x556516de3608 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x556516de33b0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x556516de3430 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x556516de34a8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x556516de36c0 <col:43>
| `-NonNullAttr 0x556516de3718 <col:84, col:98> 1
|-FunctionDecl 0x556516de3a20 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x556516de3768 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556516de37e8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x556516de3878 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x556516de3ad8 <line:453:22>
| `-NonNullAttr 0x556516de3b30 <col:63, col:77> 3
|-FunctionDecl 0x556516de3e08 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x556516de3b78 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556516de3bf8 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x556516de3c88 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x556516de3ec0 <line:457:22>
| `-NonNullAttr 0x556516de3f18 <col:63, col:80> 2 3
|-FunctionDecl 0x556516de4108 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x556516de3f68 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556516de3fe8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x556516de41b8 <line:459:22>
|-FunctionDecl 0x556516de4588 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x556516de4280 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x556516de4420 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x556516de4638 <col:52, col:69> 1 2
|-FunctionDecl 0x556516de47e0 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x556516de46c0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x556516de4740 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x556516de49f0 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x556516de48a8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x556516de4928 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x556516de4b48 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x556516de4ab0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x556516de4c88 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x556516de4d28 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x556516de4dd8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x556516de4ec8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x556516de4f30 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x556516de5100 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./split_0/safe032_power.oepc_false-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x556516de51f8 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x556516de52b0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x556516de5250 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x556516de4db0 '__pthread_unwind_buf_t'
| |   `-Record 0x556516de4d28 ''
| `-AlignedAttr 0x556516de5308 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x556516de5380 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x556516de54e0 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x556516de5548 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x556516de55b0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x556516de5618 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x556516de5820 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x556516de5710 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x556516de5a00 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x556516de58d8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x556516de5bc0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x556516de5ab8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x556516de5c68 <line:488:22>
|-RecordDecl 0x556516de5cc0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x556516de5fd8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x556516de5e38 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x556516de5eb8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x556516de6088 <col:86>
| `-ReturnsTwiceAttr 0x556516de60e0 <col:12> Implicit
|-FunctionDecl 0x556516de6408 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x556516de61b0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x556516de62c0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x556516de64b8 <line:494:22>
| `-NonNullAttr 0x556516de6510 <col:63, col:77> 1
|-FunctionDecl 0x556516de6688 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556516de6558 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556516de6730 <line:496:22>
| `-NonNullAttr 0x556516de6788 <col:63, col:77> 1
|-FunctionDecl 0x556516de6890 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556516de67d8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556516de6938 <line:498:22>
| `-NonNullAttr 0x556516de6990 <col:52, col:66> 1
|-FunctionDecl 0x556516de7ad8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556516de7a20 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556516de7b80 <line:500:22>
| `-NonNullAttr 0x556516de7bd8 <col:52, col:66> 1
|-FunctionDecl 0x556516de7e18 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x556516de7c28 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x556516de7cb8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x556516de7ec8 <col:36>
| `-NonNullAttr 0x556516de7f20 <col:66, col:83> 1 2
|-FunctionDecl 0x556516de8020 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556516de7f68 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556516de80c8 <line:505:22>
| `-NonNullAttr 0x556516de8120 <col:52, col:66> 1
|-FunctionDecl 0x556516de83b8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516de81d0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x556516de8250 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x556516de8468 <line:509:22>
| `-NonNullAttr 0x556516de84c0 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de8788 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x556516de8508 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x556516de8588 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x556516de8608 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x556516de8840 <line:513:22>
| `-NonNullAttr 0x556516de8898 <col:63, col:80> 1 3
|-FunctionDecl 0x556516de8a30 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x556516de88e8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x556516de8ad8 <line:515:22>
| `-NonNullAttr 0x556516de8b30 <col:63, col:77> 1
|-FunctionDecl 0x556516de8d18 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x556516de8be0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x556516de8dc0 <line:517:22>
| `-NonNullAttr 0x556516de8e18 <col:63, col:77> 1
|-FunctionDecl 0x556516de8f20 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x556516de8e68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x556516de8fc8 <line:519:22>
| `-NonNullAttr 0x556516de9020 <col:63, col:77> 1
|-FunctionDecl 0x556516de9248 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516de9068 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x556516de90e8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x556516de92f8 <line:523:22>
| `-NonNullAttr 0x556516de9350 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de9558 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556516de9398 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556516de9418 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x556516de9608 <line:526:22>
| `-NonNullAttr 0x556516de9660 <col:63, col:77> 1
|-FunctionDecl 0x556516de9808 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516de96a8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x556516de9728 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x556516de98b8 <line:529:22>
| `-NonNullAttr 0x556516de9910 <col:63, col:80> 1 2
|-FunctionDecl 0x556516de9b00 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556516de9958 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556516de9a40 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x556516de9bb0 <line:531:22>
| `-NonNullAttr 0x556516de9c08 <col:63, col:77> 1
|-FunctionDecl 0x556516de9db8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516de9c58 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x556516de9cd8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x556516de9e68 <line:535:22>
| `-NonNullAttr 0x556516de9ec0 <col:63, col:80> 1 2
|-FunctionDecl 0x556516dea048 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556516de9f08 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556516de9f88 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x556516dea0f8 <line:538:22>
| `-NonNullAttr 0x556516dea150 <col:63, col:77> 1
|-FunctionDecl 0x556516dea2f8 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516dea198 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x556516dea218 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x556516dea3a8 <line:542:22>
| `-NonNullAttr 0x556516dea400 <col:63, col:80> 1 2
|-FunctionDecl 0x556516dea588 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556516dea448 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556516dea4c8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x556516dea638 <line:545:22>
| `-NonNullAttr 0x556516dea690 <col:63, col:77> 1
|-FunctionDecl 0x556516dea878 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x556516dea6d8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x556516dea758 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x556516dea928 <line:548:22>
| `-NonNullAttr 0x556516dea980 <col:63, col:80> 1 2
|-FunctionDecl 0x556516debb38 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x556516dea9c8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x556516deba78 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x556516debbe8 <line:551:22>
| `-NonNullAttr 0x556516debc40 <col:63, col:77> 1
|-FunctionDecl 0x556516debf78 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x556516debd20 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x556516debe30 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x556516dec028 <col:29>
| `-NonNullAttr 0x556516dec080 <col:70, col:84> 1
|-FunctionDecl 0x556516dec1f8 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556516dec0c8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556516dec2a0 <line:556:22>
| `-NonNullAttr 0x556516dec2f8 <col:63, col:77> 1
|-FunctionDecl 0x556516dec400 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556516dec348 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556516dec4a8 <line:558:22>
| `-NonNullAttr 0x556516dec500 <col:52, col:66> 1
|-FunctionDecl 0x556516dec600 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556516dec548 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556516dec6a8 <line:560:19>
| `-NonNullAttr 0x556516dec700 <col:49, col:63> 1
|-FunctionDecl 0x556516dec938 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x556516dec748 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x556516dec7d8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x556516dec9e8 <col:39>
| `-NonNullAttr 0x556516deca70 <col:69, col:86> 1 2
|-FunctionDecl 0x556516decb70 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556516decab8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556516decc18 <line:565:22>
| `-NonNullAttr 0x556516decc70 <col:52, col:66> 1
|-FunctionDecl 0x556516decd70 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556516deccb8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556516dece18 <line:567:22>
| `-NonNullAttr 0x556516dece70 <col:52, col:66> 1
|-FunctionDecl 0x556516ded028 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x556516deceb8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x556516decf48 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x556516ded0d8 <col:39>
| `-NonNullAttr 0x556516ded130 <col:69, col:86> 1 2
|-FunctionDecl 0x556516ded230 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x556516ded178 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x556516ded2d8 <line:572:22>
| `-NonNullAttr 0x556516ded330 <col:52, col:66> 1
|-FunctionDecl 0x556516ded518 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x556516ded3e0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x556516ded5c0 <line:574:22>
| `-NonNullAttr 0x556516ded618 <col:63, col:77> 1
|-FunctionDecl 0x556516ded720 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x556516ded668 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x556516ded7c8 <line:576:22>
| `-NonNullAttr 0x556516ded820 <col:63, col:77> 1
|-FunctionDecl 0x556516deda80 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516ded868 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x556516ded8e8 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x556516dedb30 <line:580:22>
| `-NonNullAttr 0x556516dedb88 <col:63, col:80> 1 2
|-FunctionDecl 0x556516dedd98 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x556516dedbd8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x556516dedc58 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x556516dede48 <line:583:22>
| `-NonNullAttr 0x556516dedea0 <col:63, col:77> 1
|-FunctionDecl 0x556516dee048 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516dedee8 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x556516dedf68 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x556516dee0f8 <line:587:22>
| `-NonNullAttr 0x556516dee150 <col:63, col:80> 1 2
|-FunctionDecl 0x556516dee2d8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x556516dee198 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x556516dee218 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x556516dee388 <col:36>
| `-NonNullAttr 0x556516dee3e0 <col:77, col:91> 1
|-FunctionDecl 0x556516dee718 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x556516dee4c0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x556516dee5d0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x556516dee7c8 <line:592:22>
| `-NonNullAttr 0x556516dee820 <col:63, col:77> 1
|-FunctionDecl 0x556516dee998 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x556516dee868 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x556516deea40 <line:594:22>
| `-NonNullAttr 0x556516deeac0 <col:63, col:77> 1
|-FunctionDecl 0x556516deebc0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x556516deeb08 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x556516deec68 <line:596:22>
| `-NonNullAttr 0x556516deecc0 <col:52, col:66> 1
|-FunctionDecl 0x556516deedc0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x556516deed08 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x556516deee68 <line:598:22>
| `-NonNullAttr 0x556516deeec0 <col:52, col:66> 1
|-FunctionDecl 0x556516def0e8 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x556516deef08 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x556516deef80 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x556516def198 <line:601:22, col:39> 1 2
|-FunctionDecl 0x556516def4c8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x556516def218 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x556516def290 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x556516def320 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x556516def580 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x556516def798 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x556516def660 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x556516def840 <line:607:22>
| `-NonNullAttr 0x556516def898 <col:63, col:77> 1
|-FunctionDecl 0x556516def9a0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x556516def8e8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x556516defa48 <line:609:22>
| `-NonNullAttr 0x556516defad0 <col:63, col:77> 1
|-FunctionDecl 0x556516defcf8 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516defb18 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x556516defb98 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x556516defda8 <line:613:22>
| `-NonNullAttr 0x556516defe00 <col:63, col:80> 1 2
|-FunctionDecl 0x556516df0008 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x556516defe48 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x556516defec8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x556516df00b8 <col:37>
| `-NonNullAttr 0x556516df0110 <col:78, col:92> 1
|-FunctionDecl 0x556516df0328 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x556516df0158 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x556516df0200 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x556516df03d8 <line:619:22>
| `-NonNullAttr 0x556516df0430 <col:63, col:80> 1 2
|-FunctionDecl 0x556516df05f8 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x556516df0478 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x556516df04f0 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x556516df06a8 <line:622:22>
| `-NonNullAttr 0x556516df0700 <col:63, col:77> 1
|-FunctionDecl 0x556516df09a8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x556516df07e0 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x556516df0860 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x556516df0a58 <line:624:22>
| `-NonNullAttr 0x556516df0ae0 <col:63, col:77> 1
|-FunctionDecl 0x556516df0c58 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x556516df0b28 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x556516df0d00 <line:626:22>
| `-NonNullAttr 0x556516df0d58 <col:63, col:77> 1
|-FunctionDecl 0x556516df0e60 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x556516df0da8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x556516df0f08 <line:628:22>
| `-NonNullAttr 0x556516df0f60 <col:52, col:66> 1
|-FunctionDecl 0x556516df1060 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x556516df0fa8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x556516df1108 <line:630:22>
| `-NonNullAttr 0x556516df1160 <col:52, col:66> 1
|-FunctionDecl 0x556516df1260 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x556516df11a8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x556516df1308 <line:632:22>
| `-NonNullAttr 0x556516df1360 <col:52, col:66> 1
|-FunctionDecl 0x556516df1738 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x556516df1440 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x556516df1550 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x556516df15d0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x556516df17f0 <line:636:22>
| `-NonNullAttr 0x556516df1848 <col:63, col:77> 1
|-FunctionDecl 0x556516df19c8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x556516df1898 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x556516df1a70 <line:638:22>
| `-NonNullAttr 0x556516df2b00 <col:63, col:77> 1
|-FunctionDecl 0x556516df2c00 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x556516df2b48 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x556516df2ca8 <line:640:22>
| `-NonNullAttr 0x556516df2d00 <col:52, col:66> 1
|-FunctionDecl 0x556516df2ee8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x556516df2db0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x556516df2f90 <line:642:22>
| `-NonNullAttr 0x556516df2fe8 <col:63, col:77> 1
|-FunctionDecl 0x556516df30f0 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x556516df3038 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x556516df3198 <line:644:22>
| `-NonNullAttr 0x556516df31f0 <col:63, col:77> 1
|-FunctionDecl 0x556516df3418 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x556516df3238 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x556516df32b8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x556516df34c8 <line:648:22>
| `-NonNullAttr 0x556516df3520 <col:63, col:80> 1 2
|-FunctionDecl 0x556516df3728 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x556516df3568 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x556516df35e8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x556516df37d8 <line:651:22>
| `-NonNullAttr 0x556516df3830 <col:63, col:77> 1
|-FunctionDecl 0x556516df3b98 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x556516df3910 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x556516df3a30 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x556516df3c48 <line:654:22>
| `-NonNullAttr 0x556516df3ca0 <col:63, col:77> 1
|-FunctionDecl 0x556516df3df8 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x556516df3ce8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x556516df3ea0 <col:69>
|-FunctionDecl 0x556516df4018 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x556516df3f08 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x556516df40c0 <col:72>
|-FunctionDecl 0x556516df42f8 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x556516df4128 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x556516df41d8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x556516df43a8 <col:44>
|-FunctionDecl 0x556516df45c8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x556516df4410 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x556516df4488 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x556516df4678 <line:661:22>
| `-NonNullAttr 0x556516df46d0 <col:63, col:77> 2
|-FunctionDecl 0x556516df4b30 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x556516df47b0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x556516df48c0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x556516df49d0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x556516df4be8 <col:47>
|-FunctionDecl 0x556516df4cf0 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x556516df4c58 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x556516df4e48 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x556516df4db0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x556516df4fa0 <line:668:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x556516df4f08 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x556516df5068 <line:669:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x556516df5128 <line:670:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x556516df51e8 <line:671:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x556516df52a0 <line:672:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x556516df5320 prev 0x556516df52a0 <line:673:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x556516df5388 <col:24> 'int' 0
|-VarDecl 0x556516df53c0 <line:674:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x556516df5440 prev 0x556516df53c0 <line:675:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x556516df54a8 <col:27> 'int' 0
|-VarDecl 0x556516df54e0 <line:676:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x556516df5560 prev 0x556516df54e0 <line:677:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x556516df55c8 <col:27> 'int' 0
|-VarDecl 0x556516df55f8 <line:678:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x556516df5670 <line:679:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x556516df56f0 <line:680:1, col:5> col:5 used x 'int'
|-VarDecl 0x556516df5770 prev 0x556516df56f0 <line:681:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x556516df57d8 <col:9> 'int' 0
|-VarDecl 0x556516df5808 <line:682:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x556516df5888 <line:683:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x556516df5900 <line:684:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x556516df5978 <line:685:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x556516df59f0 <line:686:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x556516df5a68 <line:687:1, col:7> col:7 used x$r_buff0_thd3 '_Bool'
|-VarDecl 0x556516df5b00 <line:688:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x556516df5b78 <line:689:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x556516df5bf0 <line:690:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x556516df5c68 <line:691:1, col:7> col:7 used x$r_buff1_thd3 '_Bool'
|-VarDecl 0x556516df5ce0 <line:692:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x556516df5d60 <line:693:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x556516df5de0 <line:694:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x556516df5e58 <line:695:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x556516df5ed8 <line:696:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x556516df5f50 <line:697:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x556516df5fd0 <line:698:1, col:5> col:5 used y 'int'
|-VarDecl 0x556516df6050 prev 0x556516df5fd0 <line:699:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x556516df60b8 <col:9> 'int' 0
|-VarDecl 0x556516df60e8 <line:700:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x556516df6160 <line:701:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x556516df6278 prev 0x556516df4cf0 <line:702:1, line:731:1> line:702:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x556516df61e0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x556516df9298 <line:703:1, line:731:1>
|   |-CallExpr 0x556516df6388 <line:704:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516df6370 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df6320 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516df63e8 <line:705:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x556516df63a8 <col:3> 'int' lvalue Var 0x556516df6050 'y' 'int'
|   | `-IntegerLiteral 0x556516df63c8 <col:7> 'int' 2
|   |-CallExpr 0x556516df6440 <line:706:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516df6428 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df6408 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516df6498 <line:707:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516df6480 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df6460 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x556516df64f0 <line:708:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516df64d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df64b8 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516df6548 <line:709:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516df6530 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df6510 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516df6618 <line:710:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x556516df6568 <col:3> '_Bool' lvalue Var 0x556516df60e8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x556516df65f8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x556516df65e0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x556516df6588 <col:19> '_Bool (void)' Function 0x556516d9b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x556516df66b0 <line:711:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x556516df6638 <col:3> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x556516df6690 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x556516df6678 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x556516df6658 <col:19> '_Bool (void)' Function 0x556516d9b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x556516df6728 <line:712:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x556516df66d0 <col:3> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x556516df6710 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516df66f0 <col:21> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x556516df67a0 <line:713:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x556516df6748 <col:3> 'int' lvalue Var 0x556516df5888 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x556516df6788 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516df6768 <col:15> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516df6bf8 <line:714:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x556516df67c0 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   | `-ConditionalOperator 0x556516df6bc8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x556516df69d0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x556516df68f0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x556516df6818 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x556516df6800 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x556516df67e0 <col:8> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x556516df68d0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x556516df6868 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x556516df6850 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x556516df6830 <col:27> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x556516df68b8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x556516df68a0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x556516df6880 <col:46> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x556516df69b0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x556516df6948 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x556516df6930 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x556516df6910 <col:65> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x556516df6998 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x556516df6980 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x556516df6960 <col:84> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x556516df6bb0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516df69f0 <col:101> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |   `-ParenExpr 0x556516df6b90 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x556516df6b60 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x556516df6ab0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556516df6a68 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556516df6a50 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556516df6a10 <col:106> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556516df6a98 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556516df6a80 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556516df6a30 <col:124> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x556516df6b30 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516df6ad0 <col:141> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x556516df6b48 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516df6b10 <col:153> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x556516df7108 <line:715:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x556516df6c18 <col:3> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x556516df70d8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x556516df70a8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556516df7090 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556516df6c38 <col:15> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x556516df70c0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516df6c58 <col:31> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x556516df7070 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x556516df7040 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x556516df6e68 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x556516df6d88 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x556516df6cb0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x556516df6c98 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x556516df6c78 <col:45> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x556516df6d68 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x556516df6d00 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x556516df6ce8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x556516df6cc8 <col:64> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x556516df6d50 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x556516df6d38 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x556516df6d18 <col:83> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x556516df6e48 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x556516df6de0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x556516df6dc8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x556516df6da8 <col:102> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x556516df6e30 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x556516df6e18 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x556516df6df8 <col:121> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x556516df7028 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516df6e88 <col:138> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x556516df7008 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x556516df6fd8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x556516df6f48 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x556516df6f00 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x556516df6ee8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x556516df6ea8 <col:151> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x556516df6f30 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x556516df6f18 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x556516df6ec8 <col:169> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x556516df6fa8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x556516df6f68 <col:186> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x556516df6fc0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x556516df6f88 <col:198> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x556516df7618 <line:716:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x556516df7128 <col:3> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x556516df75e8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x556516df75b8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556516df75a0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556516df7148 <col:15> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x556516df75d0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516df7168 <col:31> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x556516df7580 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x556516df7550 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x556516df7378 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x556516df7298 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x556516df71c0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x556516df71a8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x556516df7188 <col:45> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x556516df7278 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x556516df7210 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x556516df71f8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x556516df71d8 <col:64> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x556516df7260 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x556516df7248 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x556516df7228 <col:83> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x556516df7358 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x556516df72f0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x556516df72d8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x556516df72b8 <col:102> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x556516df7340 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x556516df7328 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x556516df7308 <col:121> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x556516df7538 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516df7398 <col:138> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x556516df7518 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x556516df74e8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x556516df7458 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x556516df7410 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x556516df73f8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x556516df73b8 <col:151> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x556516df7440 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x556516df7428 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x556516df73d8 <col:169> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x556516df74b8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x556516df7478 <col:186> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x556516df74d0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x556516df7498 <col:198> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x556516df7be8 <line:717:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x556516df7638 <col:3> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516df7bd0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516df7ba0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x556516df7b58 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516df7b40 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516df7658 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516df7b88 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516df7b70 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516df7678 <col:36> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x556516df7b20 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x556516df7ac8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x556516df7888 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556516df77a8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556516df76d0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556516df76b8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556516df7698 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556516df7788 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556516df7720 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556516df7708 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556516df76e8 <col:74> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x556516df7770 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556516df7758 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556516df7738 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556516df7868 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556516df7800 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556516df77e8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556516df77c8 <col:112> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x556516df7850 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556516df7838 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556516df7818 <col:131> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x556516df7ab0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556516df7a98 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556516df78a8 <col:148> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x556516df7a78 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x556516df7a48 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x556516df7968 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556516df7920 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556516df7908 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556516df78c8 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556516df7950 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556516df7938 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556516df78e8 <col:184> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x556516df7a00 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556516df79b8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556516df7988 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556516df7a30 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x556516df7a18 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x556516df79e0 <col:212> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556516df81b0 <line:718:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x556516df7c08 <col:3> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516df8198 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516df8168 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x556516df8120 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516df8108 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516df7c28 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516df8150 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516df8138 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516df7c48 <col:36> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x556516df80e8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x556516df80b8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x556516df7e58 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556516df7d78 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556516df7ca0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556516df7c88 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556516df7c68 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556516df7d58 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556516df7cf0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556516df7cd8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556516df7cb8 <col:74> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x556516df7d40 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556516df7d28 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556516df7d08 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556516df7e38 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556516df7dd0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556516df7db8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556516df7d98 <col:112> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x556516df7e20 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556516df7e08 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556516df7de8 <col:131> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x556516df80a0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556516df8088 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556516df7e78 <col:148> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x556516df8068 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x556516df8038 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x556516df7f38 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556516df7ef0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556516df7ed8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556516df7e98 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556516df7f20 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556516df7f08 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556516df7eb8 <col:184> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x556516df8008 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556516df7f88 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556516df7f58 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556516df8020 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x556516df7fe0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x556516df7fb0 <col:219> 'int' 0
|   |-BinaryOperator 0x556516df8758 <line:719:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x556516df81d0 <col:3> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x556516df8740 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516df8710 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x556516df86c8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516df86b0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516df81f0 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516df86f8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516df86e0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516df8210 <col:36> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x556516df8690 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x556516df8660 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x556516df8420 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556516df8340 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556516df8268 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556516df8250 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556516df8230 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556516df8320 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556516df82b8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556516df82a0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556516df8280 <col:74> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x556516df8308 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556516df82f0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556516df82d0 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556516df8400 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556516df8398 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556516df8380 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556516df8360 <col:112> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x556516df83e8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556516df83d0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556516df83b0 <col:131> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x556516df8648 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556516df8630 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556516df8440 <col:148> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x556516df8610 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x556516df85e0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x556516df8500 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556516df84b8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556516df84a0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556516df8460 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556516df84e8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556516df84d0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556516df8480 <col:184> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x556516df8598 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556516df8550 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556516df8520 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556516df85c8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x556516df85b0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x556516df8578 <col:212> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x556516df8d30 <line:720:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x556516df8778 <col:3> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x556516df8d18 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516df8ce8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x556516df8ca0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516df8c88 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516df8798 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516df8cd0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516df8cb8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516df87b8 <col:36> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x556516df8c68 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x556516df8c38 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x556516df89c8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556516df88e8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556516df8810 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556516df87f8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556516df87d8 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556516df88c8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556516df8860 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556516df8848 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556516df8828 <col:74> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x556516df88b0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556516df8898 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556516df8878 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556516df89a8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556516df8940 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556516df8928 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556516df8908 <col:112> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x556516df8990 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556516df8978 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556516df8958 <col:131> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x556516df8c20 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556516df8c08 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556516df89e8 <col:148> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x556516df8be8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x556516df8bb8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x556516df8aa8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556516df8a60 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556516df8a48 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556516df8a08 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556516df8a90 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556516df8a78 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556516df8a28 <col:184> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x556516df8b88 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556516df8af8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556516df8ac8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556516df8ba0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x556516df8b60 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x556516df8b30 <col:219> 'int' 0
|   |-BinaryOperator 0x556516df8da8 <line:721:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x556516df8d50 <col:3> 'int' lvalue Var 0x556516df5440 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x556516df8d90 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516df8d70 <col:25> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516df8ed8 <line:722:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x556516df8dc8 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   | `-ConditionalOperator 0x556516df8ea8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x556516df8e60 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556516df8e48 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556516df8de8 <col:7> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x556516df8e78 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516df8e08 <col:25> 'int' lvalue Var 0x556516df5888 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x556516df8e90 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x556516df8e28 <col:37> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516df8f70 <line:723:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x556516df8ef8 <col:3> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x556516df8f48 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x556516df8f18 <col:28> 'int' 0
|   |-CallExpr 0x556516df8fc8 <line:724:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516df8fb0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df8f90 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516df9020 <line:725:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516df9008 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df8fe8 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-CallExpr 0x556516df9078 <line:726:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516df9060 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df9040 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516df90d0 <line:727:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516df90b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df9098 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516df9188 <line:728:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x556516df90f0 <col:3> 'int' lvalue Var 0x556516df5320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x556516df9168 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x556516df9150 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516df9110 <col:22> 'int' lvalue Var 0x556516df5320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x556516df9130 <col:41> 'int' 1
|   |-CallExpr 0x556516df91e0 <line:729:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516df91c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df91a8 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x556516df9288 <line:730:3, col:36>
|     `-CallExpr 0x556516df9268 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x556516df9250 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556516df9200 <col:10> 'void *(void)' Function 0x556516d9bab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x556516df9430 prev 0x556516df4e48 <line:732:1, line:771:1> line:732:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x556516df9398 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x556516dfdd70 <line:733:1, line:771:1>
|   |-CallExpr 0x556516df9510 <line:734:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516df94f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df94d8 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516df9570 <line:735:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x556516df9530 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   | `-IntegerLiteral 0x556516df9550 <col:7> 'int' 1
|   |-CallExpr 0x556516df95c8 <line:736:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516df95b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df9590 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516df9620 <line:737:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516df9608 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516df95e8 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516df9908 <line:738:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x556516df9640 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   | `-ConditionalOperator 0x556516df98d8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x556516df9700 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x556516df96b8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x556516df96a0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x556516df9660 <col:7> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x556516df96e8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x556516df96d0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x556516df9680 <col:25> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x556516df98c0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516df9720 <col:42> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x556516df98a0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x556516df9870 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x556516df97e0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556516df9798 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556516df9780 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556516df9740 <col:55> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556516df97c8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556516df97b0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556516df9760 <col:73> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x556516df9840 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516df9800 <col:90> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x556516df9858 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516df9820 <col:102> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516df9b10 <line:739:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556516df9928 <col:3> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516df9af8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516df9ac8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556516df99e8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556516df99a0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556516df9988 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556516df9948 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556516df99d0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556516df99b8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556516df9968 <col:38> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516df9a80 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516df9a38 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516df9a08 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556516df9ab0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516df9a98 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516df9a60 <col:66> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556516df9e08 <line:740:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556516df9b40 <col:3> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516df9df0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516df9dc0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556516df9ce0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556516df9c00 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556516df9bb8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556516df9ba0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556516df9b60 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556516df9be8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556516df9bd0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556516df9b80 <col:38> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x556516df9cc0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556516df9c78 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556516df9c60 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556516df9c20 <col:56> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556516df9ca8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556516df9c90 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556516df9c40 <col:74> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516df9d78 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516df9d30 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516df9d00 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556516df9da8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516df9d90 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516df9d58 <col:102> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x556516dfa010 <line:741:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556516df9e28 <col:3> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556516df9ff8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516df9fc8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556516df9ee8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556516df9ea0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556516df9e88 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556516df9e48 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556516df9ed0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556516df9eb8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556516df9e68 <col:38> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516df9f80 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516df9f38 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516df9f08 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556516df9fb0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516df9f98 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516df9f60 <col:66> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x556516dfa2f8 <line:742:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfa030 <col:3> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfa2e0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfa2b0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556516dfa1d0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556516dfa0f0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556516dfa0a8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556516dfa090 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556516dfa050 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556516dfa0d8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556516dfa0c0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556516dfa070 <col:38> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x556516dfa1b0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556516dfa168 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556516dfa150 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556516dfa110 <col:56> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556516dfa198 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556516dfa180 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556516dfa130 <col:74> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfa268 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dfa220 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dfa1f0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dfa298 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dfa280 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfa248 <col:102> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x556516dfa350 <line:743:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516dfa338 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfa318 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516dfa3a8 <line:744:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516dfa390 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfa370 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516dfa440 <line:745:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfa3c8 <col:3> '_Bool' lvalue Var 0x556516df60e8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x556516dfa420 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x556516dfa408 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x556516dfa3e8 <col:19> '_Bool (void)' Function 0x556516d9b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x556516dfa4d8 <line:746:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfa460 <col:3> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x556516dfa4b8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x556516dfa4a0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x556516dfa480 <col:19> '_Bool (void)' Function 0x556516d9b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x556516dfa550 <line:747:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfa4f8 <col:3> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfa538 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfa518 <col:21> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x556516dfa5c8 <line:748:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x556516dfa570 <col:3> 'int' lvalue Var 0x556516df5888 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x556516dfa5b0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfa590 <col:15> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516dfaa00 <line:749:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x556516dfa5e8 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   | `-ConditionalOperator 0x556516dfa9d0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x556516dfa7f8 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x556516dfa718 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x556516dfa640 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x556516dfa628 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x556516dfa608 <col:8> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x556516dfa6f8 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x556516dfa690 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x556516dfa678 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x556516dfa658 <col:27> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x556516dfa6e0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x556516dfa6c8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x556516dfa6a8 <col:46> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x556516dfa7d8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x556516dfa770 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x556516dfa758 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x556516dfa738 <col:65> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x556516dfa7c0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x556516dfa7a8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x556516dfa788 <col:84> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x556516dfa9b8 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516dfa818 <col:101> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |   `-ParenExpr 0x556516dfa998 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x556516dfa968 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x556516dfa8d8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556516dfa890 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556516dfa878 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556516dfa838 <col:106> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556516dfa8c0 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556516dfa8a8 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556516dfa858 <col:124> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x556516dfa938 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516dfa8f8 <col:141> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x556516dfa950 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfa918 <col:153> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x556516dfaf20 <line:750:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x556516dfaa20 <col:3> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x556516dfaef0 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x556516dfaec0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556516dfaea8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556516dfaa40 <col:15> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x556516dfaed8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516dfaa60 <col:31> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x556516dfae88 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x556516dfae58 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x556516dfac80 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x556516dfaba0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x556516dfaab8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x556516dfaaa0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x556516dfaa80 <col:45> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x556516dfab80 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x556516dfab08 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x556516dfaaf0 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x556516dfaad0 <col:64> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x556516dfab68 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x556516dfab50 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x556516dfab20 <col:83> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x556516dfac60 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x556516dfabf8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x556516dfabe0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x556516dfabc0 <col:102> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x556516dfac48 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x556516dfac30 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x556516dfac10 <col:121> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x556516dfae40 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516dfaca0 <col:138> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x556516dfae20 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x556516dfadf0 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x556516dfad60 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x556516dfad18 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x556516dfad00 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x556516dfacc0 <col:151> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x556516dfad48 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x556516dfad30 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x556516dface0 <col:169> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x556516dfadc0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x556516dfad80 <col:186> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x556516dfadd8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x556516dfada0 <col:198> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x556516dfb430 <line:751:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x556516dfaf40 <col:3> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x556516dfb400 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x556516dfb3d0 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556516dfb3b8 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556516dfaf60 <col:15> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x556516dfb3e8 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516dfaf80 <col:31> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x556516dfb398 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x556516dfb368 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x556516dfb190 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x556516dfb0b0 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x556516dfafd8 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x556516dfafc0 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x556516dfafa0 <col:45> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x556516dfb090 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x556516dfb028 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x556516dfb010 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x556516dfaff0 <col:64> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x556516dfb078 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x556516dfb060 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x556516dfb040 <col:83> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x556516dfb170 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x556516dfb108 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x556516dfb0f0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x556516dfb0d0 <col:102> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x556516dfb158 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x556516dfb140 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x556516dfb120 <col:121> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x556516dfb350 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516dfb1b0 <col:138> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x556516dfb330 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x556516dfb300 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x556516dfb270 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x556516dfb228 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x556516dfb210 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x556516dfb1d0 <col:151> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x556516dfb258 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x556516dfb240 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x556516dfb1f0 <col:169> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x556516dfb2d0 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x556516dfb290 <col:186> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x556516dfb2e8 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x556516dfb2b0 <col:198> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x556516dfb9d8 <line:752:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfb450 <col:3> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfb9c0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfb990 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x556516dfb948 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516dfb930 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516dfb470 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfb978 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516dfb960 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516dfb490 <col:36> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x556516dfb910 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x556516dfb8e0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x556516dfb6a0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556516dfb5c0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556516dfb4e8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556516dfb4d0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556516dfb4b0 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556516dfb5a0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556516dfb538 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556516dfb520 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556516dfb500 <col:74> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x556516dfb588 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556516dfb570 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556516dfb550 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556516dfb680 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556516dfb618 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556516dfb600 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556516dfb5e0 <col:112> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x556516dfb668 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556516dfb650 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556516dfb630 <col:131> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x556516dfb8c8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556516dfb8b0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556516dfb6c0 <col:148> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x556516dfb890 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x556516dfb860 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x556516dfb780 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556516dfb738 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556516dfb720 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556516dfb6e0 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556516dfb768 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556516dfb750 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556516dfb700 <col:184> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x556516dfb818 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556516dfb7d0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556516dfb7a0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556516dfb848 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x556516dfb830 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x556516dfb7f8 <col:212> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556516dfbfb8 <line:753:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfb9f8 <col:3> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfbfa0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfbf70 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x556516dfbf28 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516dfbf10 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516dfba18 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfbf58 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516dfbf40 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516dfba38 <col:36> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x556516dfbef0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x556516dfbec0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x556516dfbc60 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556516dfbb80 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556516dfba90 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556516dfba78 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556516dfba58 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556516dfbb60 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556516dfbae0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556516dfbac8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556516dfbaa8 <col:74> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x556516dfbb30 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556516dfbb18 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556516dfbaf8 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556516dfbc40 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556516dfbbd8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556516dfbbc0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556516dfbba0 <col:112> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x556516dfbc28 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556516dfbc10 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556516dfbbf0 <col:131> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x556516dfbea8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556516dfbe90 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556516dfbc80 <col:148> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x556516dfbe70 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x556516dfbe40 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x556516dfbd40 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556516dfbcf8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556516dfbce0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556516dfbca0 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556516dfbd28 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556516dfbd10 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556516dfbcc0 <col:184> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x556516dfbe10 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556516dfbd90 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556516dfbd60 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556516dfbe28 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x556516dfbde8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x556516dfbdb8 <col:219> 'int' 0
|   |-BinaryOperator 0x556516dfc560 <line:754:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfbfd8 <col:3> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfc548 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfc518 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x556516dfc4d0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516dfc4b8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516dfbff8 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfc500 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516dfc4e8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516dfc018 <col:36> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x556516dfc498 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x556516dfc468 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x556516dfc228 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556516dfc148 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556516dfc070 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556516dfc058 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556516dfc038 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556516dfc128 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556516dfc0c0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556516dfc0a8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556516dfc088 <col:74> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x556516dfc110 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556516dfc0f8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556516dfc0d8 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556516dfc208 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556516dfc1a0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556516dfc188 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556516dfc168 <col:112> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x556516dfc1f0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556516dfc1d8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556516dfc1b8 <col:131> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x556516dfc450 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556516dfc438 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556516dfc248 <col:148> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x556516dfc418 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x556516dfc3e8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x556516dfc308 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556516dfc2c0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556516dfc2a8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556516dfc268 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556516dfc2f0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556516dfc2d8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556516dfc288 <col:184> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x556516dfc3a0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556516dfc358 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556516dfc328 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556516dfc3d0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x556516dfc3b8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x556516dfc380 <col:212> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x556516dfcb28 <line:755:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfc580 <col:3> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfcb10 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfcae0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x556516dfca98 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516dfca80 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516dfc5a0 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfcac8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x556516dfcab0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x556516dfc5c0 <col:36> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x556516dfca60 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x556516dfca30 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x556516dfc7d0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x556516dfc6f0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x556516dfc618 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x556516dfc600 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x556516dfc5e0 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x556516dfc6d0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x556516dfc668 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x556516dfc650 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x556516dfc630 <col:74> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x556516dfc6b8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x556516dfc6a0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x556516dfc680 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x556516dfc7b0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x556516dfc748 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x556516dfc730 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x556516dfc710 <col:112> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x556516dfc798 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x556516dfc780 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x556516dfc760 <col:131> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x556516dfca18 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x556516dfca00 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x556516dfc7f0 <col:148> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x556516dfc9e0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x556516dfc9b0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x556516dfc8b0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x556516dfc868 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x556516dfc850 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x556516dfc810 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x556516dfc898 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x556516dfc880 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x556516dfc830 <col:184> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x556516dfc980 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x556516dfc900 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x556516dfc8d0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x556516dfc998 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x556516dfc958 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x556516dfc928 <col:219> 'int' 0
|   |-BinaryOperator 0x556516dfcbc8 <line:756:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x556516dfcb70 <col:3> 'int' lvalue Var 0x556516df5560 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x556516dfcbb0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfcb90 <col:25> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516dfccf8 <line:757:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x556516dfcbe8 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   | `-ConditionalOperator 0x556516dfccc8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x556516dfcc80 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x556516dfcc68 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x556516dfcc08 <col:7> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x556516dfcc98 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516dfcc28 <col:25> 'int' lvalue Var 0x556516df5888 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x556516dfccb0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x556516dfcc48 <col:37> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516dfcd90 <line:758:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfcd18 <col:3> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x556516dfcd68 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x556516dfcd38 <col:28> 'int' 0
|   |-CallExpr 0x556516dfcde8 <line:759:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516dfcdd0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfcdb0 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516dfce40 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516dfce28 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfce08 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516dfd128 <line:761:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x556516dfce60 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   | `-ConditionalOperator 0x556516dfd0f8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x556516dfcf20 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x556516dfced8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x556516dfcec0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x556516dfce80 <col:7> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x556516dfcf08 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x556516dfcef0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x556516dfcea0 <col:25> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x556516dfd0e0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516dfcf40 <col:42> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x556516dfd0c0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x556516dfd090 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x556516dfd000 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556516dfcfb8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556516dfcfa0 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556516dfcf60 <col:55> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556516dfcfe8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556516dfcfd0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556516dfcf80 <col:73> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x556516dfd060 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516dfd020 <col:90> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x556516dfd078 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfd040 <col:102> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516dfd330 <line:762:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfd148 <col:3> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfd318 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfd2e8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556516dfd208 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556516dfd1c0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556516dfd1a8 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556516dfd168 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556516dfd1f0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556516dfd1d8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556516dfd188 <col:38> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfd2a0 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dfd258 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dfd228 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dfd2d0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dfd2b8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfd280 <col:66> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556516dfd618 <line:763:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfd350 <col:3> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfd600 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfd5d0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556516dfd4f0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556516dfd410 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556516dfd3c8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556516dfd3b0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556516dfd370 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556516dfd3f8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556516dfd3e0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556516dfd390 <col:38> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x556516dfd4d0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556516dfd488 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556516dfd470 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556516dfd430 <col:56> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556516dfd4b8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556516dfd4a0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556516dfd450 <col:74> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfd588 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dfd540 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dfd510 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dfd5b8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dfd5a0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfd568 <col:102> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x556516dfd820 <line:764:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfd638 <col:3> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfd808 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfd7d8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556516dfd6f8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556516dfd6b0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556516dfd698 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556516dfd658 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556516dfd6e0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556516dfd6c8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556516dfd678 <col:38> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfd790 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dfd748 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dfd718 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dfd7c0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dfd7a8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfd770 <col:66> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x556516dfdb08 <line:765:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfd840 <col:3> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfdaf0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfdac0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556516dfd9e0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556516dfd900 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556516dfd8b8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556516dfd8a0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556516dfd860 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556516dfd8e8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556516dfd8d0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556516dfd880 <col:38> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x556516dfd9c0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556516dfd978 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556516dfd960 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556516dfd920 <col:56> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556516dfd9a8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556516dfd990 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556516dfd940 <col:74> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfda78 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dfda30 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dfda00 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dfdaa8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dfda90 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfda58 <col:102> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x556516dfdb80 <line:766:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516dfdb48 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfdb28 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516dfdbd8 <line:767:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516dfdbc0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfdba0 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516dfdc90 <line:768:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x556516dfdbf8 <col:3> 'int' lvalue Var 0x556516df5320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x556516dfdc70 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x556516dfdc58 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516dfdc18 <col:22> 'int' lvalue Var 0x556516df5320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x556516dfdc38 <col:41> 'int' 1
|   |-CallExpr 0x556516dfdce8 <line:769:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516dfdcd0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfdcb0 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x556516dfdd60 <line:770:3, col:36>
|     `-CallExpr 0x556516dfdd40 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x556516dfdd28 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556516dfdd08 <col:10> 'void *(void)' Function 0x556516d9bab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x556516dfdf58 prev 0x556516df4fa0 <line:772:1, line:800:1> line:772:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x556516dfdec0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x556516dff708 <line:773:1, line:800:1>
|   |-CallExpr 0x556516dfe038 <line:774:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516dfe020 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfe000 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516dfe0b0 <line:775:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x556516dfe058 <col:3> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x556516dfe098 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfe078 <col:15> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x556516dfe110 <line:776:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x556516dfe0d0 <col:3> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x556516dfe0f0 <col:15> 'int' 2
|   |-BinaryOperator 0x556516dfe188 <line:777:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfe130 <col:3> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfe170 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfe150 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556516dfe220 <line:778:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfe1a8 <col:3> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x556516dfe1f8 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x556516dfe1c8 <col:27> 'int' 1
|   |-CallExpr 0x556516dfe3a8 <line:779:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x556516dfe390 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556516dfe240 <col:3> 'void (int)' Function 0x556516d9bd28 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x556516dfe340 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x556516dfe320 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x556516dfe300 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x556516dfe2b8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x556516dfe2a0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x556516dfe260 <col:23> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x556516dfe2e8 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x556516dfe2d0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x556516dfe280 <col:41> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556516dfe428 <line:780:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfe3d0 <col:3> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfe410 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfe3f0 <col:20> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x556516dfe4a0 <line:781:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfe448 <col:3> '_Bool' lvalue Var 0x556516df5b78 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfe488 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfe468 <col:20> '_Bool' lvalue Var 0x556516df5978 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x556516dfe518 <line:782:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfe4c0 <col:3> '_Bool' lvalue Var 0x556516df5bf0 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfe500 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfe4e0 <col:20> '_Bool' lvalue Var 0x556516df59f0 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x556516dfe590 <line:783:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfe538 <col:3> '_Bool' lvalue Var 0x556516df5c68 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfe578 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x556516dfe558 <col:20> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x556516dfe628 <line:784:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfe5b0 <col:3> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   | `-CStyleCastExpr 0x556516dfe600 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x556516dfe5d0 <col:27> 'int' 1
|   |-CallExpr 0x556516dfe680 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516dfe668 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfe648 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516dfe6d8 <line:786:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516dfe6c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfe6a0 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516dfe738 <line:787:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x556516dfe6f8 <col:3> 'int' lvalue Var 0x556516df6050 'y' 'int'
|   | `-IntegerLiteral 0x556516dfe718 <col:7> 'int' 1
|   |-CallExpr 0x556516dfe790 <line:788:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516dfe778 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfe758 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516dfe7e8 <line:789:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516dfe7d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dfe7b0 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516dfead0 <line:790:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x556516dfe808 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   | `-ConditionalOperator 0x556516dfeaa0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x556516dfe8c8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x556516dfe880 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x556516dfe868 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x556516dfe828 <col:7> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x556516dfe8b0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x556516dfe898 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x556516dfe848 <col:25> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x556516dfea88 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516dfe8e8 <col:42> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x556516dfea68 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x556516dfea38 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x556516dfe9a8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x556516dfe960 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x556516dfe948 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x556516dfe908 <col:55> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x556516dfe990 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x556516dfe978 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x556516dfe928 <col:73> '_Bool' lvalue Var 0x556516df5c68 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x556516dfea08 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x556516dfe9c8 <col:90> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x556516dfea20 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfe9e8 <col:102> 'int' lvalue Var 0x556516df5770 'x' 'int'
|   |-BinaryOperator 0x556516dfece8 <line:791:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfeaf0 <col:3> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfecd0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfeca0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556516dfebc0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556516dfeb68 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556516dfeb50 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556516dfeb10 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556516dfeba8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556516dfeb90 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556516dfeb30 <col:38> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfec58 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dfec10 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dfebe0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dfec88 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dfec70 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfec38 <col:66> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x556516dfefd0 <line:792:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfed08 <col:3> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x556516dfefb8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dfef88 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556516dfeea8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556516dfedc8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556516dfed80 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556516dfed68 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556516dfed28 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556516dfedb0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556516dfed98 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556516dfed48 <col:38> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x556516dfee88 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556516dfee40 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556516dfee28 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556516dfede8 <col:56> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556516dfee70 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556516dfee58 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556516dfee08 <col:74> '_Bool' lvalue Var 0x556516df5c68 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dfef40 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dfeef8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dfeec8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dfef70 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dfef58 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dfef20 <col:102> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x556516dff1d8 <line:793:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x556516dfeff0 <col:3> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556516dff1c0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dff190 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x556516dff0b0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x556516dff068 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x556516dff050 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x556516dff010 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x556516dff098 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x556516dff080 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x556516dff030 <col:38> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dff148 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dff100 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dff0d0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dff178 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dff160 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dff128 <col:66> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x556516dff4c0 <line:794:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x556516dff1f8 <col:3> '_Bool' lvalue Var 0x556516df5c68 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x556516dff4a8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x556516dff478 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x556516dff398 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x556516dff2b8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x556516dff270 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x556516dff258 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x556516dff218 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x556516dff2a0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x556516dff288 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x556516dff238 <col:38> '_Bool' lvalue Var 0x556516df5a68 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x556516dff378 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x556516dff330 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x556516dff318 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x556516dff2d8 <col:56> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x556516dff360 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x556516dff348 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x556516dff2f8 <col:74> '_Bool' lvalue Var 0x556516df5c68 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x556516dff430 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x556516dff3e8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x556516dff3b8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x556516dff460 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x556516dff448 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x556516dff410 <col:102> '_Bool' lvalue Var 0x556516df5c68 'x$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x556516dff518 <line:795:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516dff500 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dff4e0 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x556516dff570 <line:796:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x556516dff558 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dff538 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x556516dff628 <line:797:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x556516dff590 <col:3> 'int' lvalue Var 0x556516df5320 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x556516dff608 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x556516dff5f0 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556516dff5b0 <col:22> 'int' lvalue Var 0x556516df5320 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x556516dff5d0 <col:41> 'int' 1
|   |-CallExpr 0x556516dff680 <line:798:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x556516dff668 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556516dff648 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x556516dff6f8 <line:799:3, col:36>
|     `-CallExpr 0x556516dff6d8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x556516dff6c0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x556516dff6a0 <col:10> 'void *(void)' Function 0x556516d9bab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x556516dff808 prev 0x556516df5068 <line:801:1, line:803:1> line:801:6 fence 'void ()'
| `-CompoundStmt 0x556516dff8a8 <line:802:1, line:803:1>
|-FunctionDecl 0x556516dff8d8 prev 0x556516df5128 <line:804:1, line:806:1> line:804:6 isync 'void ()'
| `-CompoundStmt 0x556516dff978 <line:805:1, line:806:1>
|-FunctionDecl 0x556516dff9a8 prev 0x556516df51e8 <line:807:1, line:809:1> line:807:6 lwfence 'void ()'
| `-CompoundStmt 0x556516dffa48 <line:808:1, line:809:1>
`-FunctionDecl 0x556516dffab8 <line:810:1, line:847:1> line:810:5 main 'int ()'
  `-CompoundStmt 0x556516e04138 <line:811:1, line:847:1>
    |-DeclStmt 0x556516dffc08 <line:812:3, col:18>
    | `-VarDecl 0x556516dffba0 <col:3, col:13> col:13 used t2539 'pthread_t':'unsigned long'
    |-CallExpr 0x556516dffe18 <line:813:3, col:54> 'int'
    | |-ImplicitCastExpr 0x556516dffe00 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556516dffc20 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x556516ddc5b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x556516dffc60 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x556516dffc40 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x556516dffba0 't2539' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x556516dffe58 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x556516dffcd8 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x556516dffcb0 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x556516dffc78 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x556516dffe70 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556516dffcf8 <col:39> 'void *(void *)' Function 0x556516df6278 'P0' 'void *(void *)'
    | `-ParenExpr 0x556516dffd78 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x556516dffd50 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x556516dffd18 <col:52> 'int' 0
    |-DeclStmt 0x556516dfff00 <line:814:3, col:18>
    | `-VarDecl 0x556516dffe98 <col:3, col:13> col:13 used t2540 'pthread_t':'unsigned long'
    |-CallExpr 0x556516e000a8 <line:815:3, col:54> 'int'
    | |-ImplicitCastExpr 0x556516e00090 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556516dfff18 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x556516ddc5b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x556516dfff58 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x556516dfff38 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x556516dffe98 't2540' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x556516e000e8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x556516dfffd0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x556516dfffa8 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x556516dfff70 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x556516e00100 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556516dffff0 <col:39> 'void *(void *)' Function 0x556516df9430 'P1' 'void *(void *)'
    | `-ParenExpr 0x556516e00070 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x556516e00048 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x556516e00010 <col:52> 'int' 0
    |-DeclStmt 0x556516e00190 <line:816:3, col:18>
    | `-VarDecl 0x556516e00128 <col:3, col:13> col:13 used t2541 'pthread_t':'unsigned long'
    |-CallExpr 0x556516e00338 <line:817:3, col:54> 'int'
    | |-ImplicitCastExpr 0x556516e00320 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556516e001a8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x556516ddc5b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x556516e001e8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x556516e001c8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x556516e00128 't2541' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x556516e00378 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x556516e00260 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x556516e00238 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x556516e00200 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x556516e00390 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556516e00280 <col:39> 'void *(void *)' Function 0x556516dfdf58 'P2' 'void *(void *)'
    | `-ParenExpr 0x556516e00300 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x556516e002d8 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x556516e002a0 <col:52> 'int' 0
    |-CallExpr 0x556516e003e0 <line:818:3, col:27> 'void'
    | `-ImplicitCastExpr 0x556516e003c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556516e003a8 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x556516e004b0 <line:819:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x556516e00400 <col:3> '_Bool' lvalue Var 0x556516df55f8 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x556516e00498 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x556516e00478 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x556516e00460 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x556516e00420 <col:21> 'int' lvalue Var 0x556516df5320 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x556516e00440 <col:41> 'int' 3
    |-CallExpr 0x556516e00508 <line:820:3, col:25> 'void'
    | `-ImplicitCastExpr 0x556516e004f0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556516e004d0 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x556516e00580 <line:821:3, col:36> 'void'
    | |-ImplicitCastExpr 0x556516e00568 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556516e00528 <col:3> 'void (int)' Function 0x556516d9b940 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x556516e005c0 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x556516e005a8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x556516e00548 <col:21> '_Bool' lvalue Var 0x556516df55f8 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x556516e00610 <line:822:3, col:27> 'void'
    | `-ImplicitCastExpr 0x556516e005f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556516e005d8 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x556516e008f8 <line:823:3, col:103> 'int' '='
    | |-DeclRefExpr 0x556516e00630 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
    | `-ConditionalOperator 0x556516e008c8 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x556516e006f0 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x556516e006a8 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x556516e00690 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x556516e00650 <col:7> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x556516e006d8 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x556516e006c0 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x556516e00670 <col:25> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x556516e008b0 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556516e00710 <col:42> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x556516e00890 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x556516e00860 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x556516e007d0 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x556516e00788 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x556516e00770 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x556516e00730 <col:55> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x556516e007b8 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x556516e007a0 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x556516e00750 <col:73> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x556516e00830 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x556516e007f0 <col:90> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x556516e00848 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x556516e00810 <col:102> 'int' lvalue Var 0x556516df5770 'x' 'int'
    |-BinaryOperator 0x556516e00b00 <line:824:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x556516e00918 <col:3> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x556516e00ae8 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556516e00ab8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x556516e009d8 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x556516e00990 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x556516e00978 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x556516e00938 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x556516e009c0 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x556516e009a8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x556516e00958 <col:38> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x556516e00a70 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x556516e00a28 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x556516e009f8 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x556516e00aa0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x556516e00a88 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x556516e00a50 <col:66> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x556516e00e00 <line:825:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x556516e00b20 <col:3> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x556516e00de8 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556516e00db8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x556516e00cd8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x556516e00bf8 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x556516e00bb0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x556516e00b80 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x556516e00b40 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x556516e00be0 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x556516e00bc8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x556516e00b60 <col:38> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x556516e00cb8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x556516e00c70 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x556516e00c58 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x556516e00c18 <col:56> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x556516e00ca0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x556516e00c88 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x556516e00c38 <col:74> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x556516e00d70 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x556516e00d28 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x556516e00cf8 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x556516e00da0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x556516e00d88 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x556516e00d50 <col:102> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x556516e01008 <line:826:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x556516e00e20 <col:3> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x556516e00ff0 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556516e00fc0 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x556516e00ee0 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x556516e00e98 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x556516e00e80 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x556516e00e40 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x556516e00ec8 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x556516e00eb0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x556516e00e60 <col:38> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x556516e00f78 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x556516e00f30 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x556516e00f00 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x556516e00fa8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x556516e00f90 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x556516e00f58 <col:66> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x556516e012f0 <line:827:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x556516e01028 <col:3> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x556516e012d8 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556516e012a8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x556516e011c8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x556516e010e8 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x556516e010a0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x556516e01088 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x556516e01048 <col:20> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x556516e010d0 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x556516e010b8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x556516e01068 <col:38> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x556516e011a8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x556516e01160 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x556516e01148 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x556516e01108 <col:56> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x556516e01190 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x556516e01178 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x556516e01128 <col:74> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x556516e01260 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x556516e01218 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x556516e011e8 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x556516e01290 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x556516e01278 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x556516e01240 <col:102> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x556516e01348 <line:828:3, col:25> 'void'
    | `-ImplicitCastExpr 0x556516e01330 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556516e01310 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x556516e013a0 <line:829:3, col:27> 'void'
    | `-ImplicitCastExpr 0x556516e01388 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556516e01368 <col:3> 'void ()' Function 0x556516d9bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x556516e01438 <line:830:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x556516e013c0 <col:3> '_Bool' lvalue Var 0x556516df60e8 'weak$$choice0' '_Bool'
    | `-CallExpr 0x556516e01418 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x556516e01400 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x556516e013e0 <col:19> '_Bool (void)' Function 0x556516d9b770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x556516e014d0 <line:831:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x556516e01458 <col:3> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
    | `-CallExpr 0x556516e014b0 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x556516e01498 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x556516e01478 <col:19> '_Bool (void)' Function 0x556516d9b770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x556516e01548 <line:832:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x556516e014f0 <col:3> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x556516e01530 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x556516e01510 <col:21> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x556516e015c0 <line:833:3, col:15> 'int' '='
    | |-DeclRefExpr 0x556516e01568 <col:3> 'int' lvalue Var 0x556516df5888 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x556516e015a8 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x556516e01588 <col:15> 'int' lvalue Var 0x556516df5770 'x' 'int'
    |-BinaryOperator 0x556516e019f8 <line:834:3, col:162> 'int' '='
    | |-DeclRefExpr 0x556516e015e0 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
    | `-ConditionalOperator 0x556516e019c8 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x556516e017f0 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x556516e01710 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x556516e01638 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x556516e01620 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x556516e01600 <col:8> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x556516e016f0 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x556516e01688 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x556516e01670 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x556516e01650 <col:27> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x556516e016d8 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x556516e016c0 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x556516e016a0 <col:46> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x556516e017d0 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x556516e01768 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x556516e01750 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x556516e01730 <col:65> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x556516e017b8 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x556516e017a0 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x556516e01780 <col:84> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x556516e019b0 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556516e01810 <col:101> 'int' lvalue Var 0x556516df5770 'x' 'int'
    |   `-ParenExpr 0x556516e01990 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x556516e01960 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x556516e018d0 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x556516e01888 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x556516e01870 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x556516e01830 <col:106> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x556516e018b8 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x556516e018a0 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x556516e01850 <col:124> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x556516e01930 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x556516e018f0 <col:141> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x556516e01948 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x556516e01910 <col:153> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
    |-BinaryOperator 0x556516e01f20 <line:835:3, col:208> 'int' '='
    | |-DeclRefExpr 0x556516e01a18 <col:3> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x556516e01ef0 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x556516e01ec0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x556516e01ea8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x556516e01a38 <col:15> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x556516e01ed8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556516e01a58 <col:31> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x556516e01e88 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x556516e01e58 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x556516e01c80 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x556516e01b88 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x556516e01ab0 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x556516e01a98 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x556516e01a78 <col:45> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x556516e01b68 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x556516e01b00 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x556516e01ae8 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x556516e01ac8 <col:64> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x556516e01b50 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x556516e01b38 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x556516e01b18 <col:83> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x556516e01c60 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x556516e01bf8 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x556516e01be0 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x556516e01bc0 <col:102> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x556516e01c48 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x556516e01c30 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x556516e01c10 <col:121> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x556516e01e40 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x556516e01ca0 <col:138> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
    |       `-ParenExpr 0x556516e01e20 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x556516e01df0 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x556516e01d60 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x556516e01d18 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x556516e01d00 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x556516e01cc0 <col:151> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x556516e01d48 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x556516e01d30 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x556516e01ce0 <col:169> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x556516e01dc0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x556516e01d80 <col:186> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x556516e01dd8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x556516e01da0 <col:198> 'int' lvalue Var 0x556516df5de0 'x$w_buff0' 'int'
    |-BinaryOperator 0x556516e02430 <line:836:3, col:208> 'int' '='
    | |-DeclRefExpr 0x556516e01f40 <col:3> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x556516e02400 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x556516e023d0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x556516e023b8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x556516e01f60 <col:15> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x556516e023e8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556516e01f80 <col:31> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
    |   `-ParenExpr 0x556516e02398 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x556516e02368 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x556516e02190 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x556516e020b0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x556516e01fd8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x556516e01fc0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x556516e01fa0 <col:45> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x556516e02090 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x556516e02028 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x556516e02010 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x556516e01ff0 <col:64> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x556516e02078 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x556516e02060 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x556516e02040 <col:83> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x556516e02170 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x556516e02108 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x556516e020f0 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x556516e020d0 <col:102> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x556516e02158 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x556516e02140 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x556516e02120 <col:121> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x556516e02350 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x556516e021b0 <col:138> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
    |       `-ParenExpr 0x556516e02330 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x556516e02300 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x556516e02270 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x556516e02228 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x556516e02210 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x556516e021d0 <col:151> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x556516e02258 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x556516e02240 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x556516e021f0 <col:169> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x556516e022d0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x556516e02290 <col:186> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x556516e022e8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x556516e022b0 <col:198> 'int' lvalue Var 0x556516df5ed8 'x$w_buff1' 'int'
    |-BinaryOperator 0x556516e029d8 <line:837:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x556516e02450 <col:3> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x556516e029c0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556516e02990 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x556516e02948 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556516e02930 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556516e02470 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x556516e02978 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556516e02960 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556516e02490 <col:36> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x556516e02910 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x556516e028e0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x556516e026a0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x556516e025c0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x556516e024e8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x556516e024d0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x556516e024b0 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x556516e025a0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x556516e02538 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x556516e02520 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x556516e02500 <col:74> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x556516e02588 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x556516e02570 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x556516e02550 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x556516e02680 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x556516e02618 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x556516e02600 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x556516e025e0 <col:112> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x556516e02668 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x556516e02650 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x556516e02630 <col:131> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x556516e028c8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x556516e028b0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x556516e026c0 <col:148> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x556516e02890 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x556516e02860 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x556516e02780 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x556516e02738 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x556516e02720 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x556516e026e0 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x556516e02768 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x556516e02750 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x556516e02700 <col:184> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x556516e02818 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x556516e027d0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x556516e027a0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x556516e02848 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x556516e02830 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x556516e027f8 <col:212> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x556516e02fb0 <line:838:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x556516e029f8 <col:3> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x556516e02f98 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556516e02f68 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x556516e02f20 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556516e02f08 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556516e02a18 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x556516e02f50 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556516e02f38 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556516e02a38 <col:36> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x556516e02ee8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x556516e02eb8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x556516e02c58 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x556516e02b68 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x556516e02a90 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x556516e02a78 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x556516e02a58 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x556516e02b48 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x556516e02ae0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x556516e02ac8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x556516e02aa8 <col:74> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x556516e02b30 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x556516e02b18 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x556516e02af8 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x556516e02c38 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x556516e02bd0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x556516e02ba8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x556516e02b88 <col:112> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x556516e02c20 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x556516e02c08 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x556516e02be8 <col:131> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x556516e02ea0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x556516e02e88 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x556516e02c78 <col:148> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x556516e02e68 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x556516e02e38 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x556516e02d38 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x556516e02cf0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x556516e02cd8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x556516e02c98 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x556516e02d20 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x556516e02d08 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x556516e02cb8 <col:184> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x556516e02e08 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x556516e02d88 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x556516e02d58 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x556516e02e20 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x556516e02de0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x556516e02db0 <col:219> 'int' 0
    |-BinaryOperator 0x556516e03558 <line:839:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x556516e02fd0 <col:3> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x556516e03540 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556516e03510 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x556516e034c8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556516e034b0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556516e02ff0 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x556516e034f8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556516e034e0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556516e03010 <col:36> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x556516e03490 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x556516e03460 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x556516e03220 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x556516e03140 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x556516e03068 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x556516e03050 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x556516e03030 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x556516e03120 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x556516e030b8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x556516e030a0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x556516e03080 <col:74> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x556516e03108 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x556516e030f0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x556516e030d0 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x556516e03200 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x556516e03198 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x556516e03180 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x556516e03160 <col:112> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x556516e031e8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x556516e031d0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x556516e031b0 <col:131> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x556516e03448 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x556516e03430 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x556516e03240 <col:148> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x556516e03410 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x556516e033e0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x556516e03300 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x556516e032b8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x556516e032a0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x556516e03260 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x556516e032e8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x556516e032d0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x556516e03280 <col:184> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x556516e03398 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x556516e03350 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x556516e03320 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x556516e033c8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x556516e033b0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x556516e03378 <col:212> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x556516e03b20 <line:840:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x556516e03578 <col:3> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x556516e03b08 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x556516e03ad8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x556516e03a90 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556516e03a78 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556516e03598 <col:20> '_Bool' lvalue Var 0x556516df6160 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x556516e03ac0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x556516e03aa8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x556516e035b8 <col:36> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x556516e03a58 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x556516e03a28 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x556516e037c8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x556516e036e8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x556516e03610 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x556516e035f8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x556516e035d8 <col:55> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x556516e036c8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x556516e03660 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x556516e03648 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x556516e03628 <col:74> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x556516e036b0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x556516e03698 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x556516e03678 <col:93> '_Bool' lvalue Var 0x556516df5f50 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x556516e037a8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x556516e03740 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x556516e03728 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x556516e03708 <col:112> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x556516e03790 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x556516e03778 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x556516e03758 <col:131> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x556516e03a10 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x556516e039f8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x556516e037e8 <col:148> '_Bool' lvalue Var 0x556516df5b00 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x556516e039d8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x556516e039a8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x556516e038a8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x556516e03860 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x556516e03848 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x556516e03808 <col:166> '_Bool' lvalue Var 0x556516df5e58 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x556516e03890 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x556516e03878 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x556516e03828 <col:184> '_Bool' lvalue Var 0x556516df5900 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x556516e03978 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x556516e038f8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x556516e038c8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x556516e03990 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x556516e03950 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x556516e03920 <col:219> 'int' 0
    |-BinaryOperator 0x556516e03e18 <line:841:3, col:95> '_Bool' '='
    | |-DeclRefExpr 0x556516e03b40 <col:3> '_Bool' lvalue Var 0x556516df5670 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x556516e03e00 <col:21, col:95> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x556516e03de8 <col:21, col:95> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x556516e03dc8 <col:22, col:95> 'int'
    |       `-BinaryOperator 0x556516e03da8 <col:23, col:94> 'int' '&&'
    |         |-BinaryOperator 0x556516e03d10 <col:23, col:66> 'int' '&&'
    |         | |-BinaryOperator 0x556516e03c78 <col:23, col:38> 'int' '&&'
    |         | | |-BinaryOperator 0x556516e03be0 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x556516e03ba0 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x556516e03b60 <col:23> 'int' lvalue Var 0x556516df5770 'x' 'int'
    |         | | | `-IntegerLiteral 0x556516e03b80 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x556516e03c58 <col:33, col:38> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x556516e03c40 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x556516e03c00 <col:33> 'int' lvalue Var 0x556516df6050 'y' 'int'
    |         | |   `-IntegerLiteral 0x556516e03c20 <col:38> 'int' 2
    |         | `-BinaryOperator 0x556516e03cf0 <col:43, col:66> 'int' '=='
    |         |   |-ImplicitCastExpr 0x556516e03cd8 <col:43> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x556516e03c98 <col:43> 'int' lvalue Var 0x556516df5440 '__unbuffered_p0_EAX' 'int'
    |         |   `-IntegerLiteral 0x556516e03cb8 <col:66> 'int' 0
    |         `-BinaryOperator 0x556516e03d88 <col:71, col:94> 'int' '=='
    |           |-ImplicitCastExpr 0x556516e03d70 <col:71> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x556516e03d30 <col:71> 'int' lvalue Var 0x556516df5560 '__unbuffered_p1_EAX' 'int'
    |           `-IntegerLiteral 0x556516e03d50 <col:94> 'int' 1
    |-BinaryOperator 0x556516e03f48 <line:842:3, col:37> 'int' '='
    | |-DeclRefExpr 0x556516e03e38 <col:3> 'int' lvalue Var 0x556516df5770 'x' 'int'
    | `-ConditionalOperator 0x556516e03f18 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x556516e03ed0 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x556516e03eb8 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x556516e03e58 <col:7> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x556516e03ee8 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x556516e03e78 <col:25> 'int' lvalue Var 0x556516df5888 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x556516e03f00 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x556516e03e98 <col:37> 'int' lvalue Var 0x556516df5770 'x' 'int'
    |-BinaryOperator 0x556516e03fe0 <line:843:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x556516e03f68 <col:3> '_Bool' lvalue Var 0x556516df5808 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x556516e03fb8 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x556516e03f88 <col:28> 'int' 0
    |-CallExpr 0x556516e04038 <line:844:3, col:25> 'void'
    | `-ImplicitCastExpr 0x556516e04020 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x556516e04000 <col:3> 'void ()' Function 0x556516d9c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x556516e040b0 <line:845:3, col:36> 'void'
    | |-ImplicitCastExpr 0x556516e04098 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x556516e04058 <col:3> 'void (int)' Function 0x556516d9bd28 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x556516e040f0 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x556516e040d8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x556516e04078 <col:21> '_Bool' lvalue Var 0x556516df5670 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x556516e04128 <line:846:3, col:10>
      `-IntegerLiteral 0x556516e04108 <col:10> 'int' 0
