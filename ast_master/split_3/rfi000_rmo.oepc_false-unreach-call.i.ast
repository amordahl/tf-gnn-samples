TranslationUnitDecl 0x555e27629e18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x555e2762a6d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x555e2762a3b0 '__int128'
|-TypedefDecl 0x555e2762a748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x555e2762a3d0 'unsigned __int128'
|-TypedefDecl 0x555e2762aa50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x555e2762a820 'struct __NSConstantString_tag'
|   `-Record 0x555e2762a7a0 '__NSConstantString_tag'
|-TypedefDecl 0x555e2762aaf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x555e2762aab0 'char *'
|   `-BuiltinType 0x555e27629eb0 'char'
|-TypedefDecl 0x555e27669650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x555e2762ad90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x555e2762abd0 'struct __va_list_tag'
|     `-Record 0x555e2762ab50 '__va_list_tag'
|-FunctionDecl 0x555e27669790 <./split_3/rfi000_rmo.oepc_false-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x555e276696c0 <col:31> col:34 'int'
|-FunctionDecl 0x555e27669958 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x555e27669a80 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x555e27669bc8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x555e27669b38 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x555e27669df8 <col:40, col:99>
|   |-IfStmt 0x555e27669dc8 <col:42, col:88>
|   | |-UnaryOperator 0x555e27669ca8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x555e27669c90 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x555e27669c70 <col:47> 'int' lvalue ParmVar 0x555e27669b38 'expression' 'int'
|   | `-CompoundStmt 0x555e27669db0 <col:59, col:88>
|   |   `-LabelStmt 0x555e27669d98 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x555e27669d28 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x555e27669d10 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x555e27669cc0 <col:68> 'void () __attribute__((noreturn))' Function 0x555e27669a80 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x555e27669de0 <col:89>
|   `-ReturnStmt 0x555e27669de8 <col:91>
|-FunctionDecl 0x555e27669e40 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x555e27669f00 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x555e2766a280 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x555e27669fb8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x555e2766a038 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x555e2766a0b8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x555e2766a138 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x555e2766a340 <line:10:22>
|-FunctionDecl 0x555e27690390 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x555e2766a3b0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x555e2766a430 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x555e2766a4b0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x555e2766a530 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x555e27690450 <line:13:22>
|-FunctionDecl 0x555e27690700 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x555e276904c0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x555e27690540 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x555e276905c0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x555e276907b8 <line:15:22>
|-TypedefDecl 0x555e27690828 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x555e27629f70 'unsigned char'
|-TypedefDecl 0x555e27690898 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x555e27629f90 'unsigned short'
|-TypedefDecl 0x555e27690908 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-TypedefDecl 0x555e27690978 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e276909e8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x555e27629ed0 'signed char'
|-TypedefDecl 0x555e27690a58 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x555e27629f70 'unsigned char'
|-TypedefDecl 0x555e27690ac8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x555e27629ef0 'short'
|-TypedefDecl 0x555e27690b38 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x555e27629f90 'unsigned short'
|-TypedefDecl 0x555e27690ba8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x555e27629f10 'int'
|-TypedefDecl 0x555e27690c18 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-TypedefDecl 0x555e27690c88 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27690cf8 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27690d68 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27690dd8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27690e48 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27690eb8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-TypedefDecl 0x555e27690f28 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-TypedefDecl 0x555e27690f98 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691008 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691078 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-TypedefDecl 0x555e276910e8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691158 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e276911c8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691238 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x555e27629f10 'int'
|-RecordDecl 0x555e27691290 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x555e27691408 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x555e276914c0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x555e27691460 'struct __fsid_t' sugar
|   `-RecordType 0x555e27691310 '__fsid_t'
|     `-Record 0x555e27691290 ''
|-TypedefDecl 0x555e27691548 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e276915b8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691628 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691698 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-TypedefDecl 0x555e27691708 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691778 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-TypedefDecl 0x555e276917e8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691858 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x555e27629f10 'int'
|-TypedefDecl 0x555e276918c8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x555e27629f10 'int'
|-TypedefDecl 0x555e27691938 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x555e27629f10 'int'
|-TypedefDecl 0x555e276919a8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x555e2762a630 'void *'
|   `-BuiltinType 0x555e27629e70 'void'
|-TypedefDecl 0x555e27691a18 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691a88 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691af8 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691b68 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691bd8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691c48 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691cb8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691d28 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691d98 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691e08 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27691e78 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27691f08 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x555e27691ed0 '__off64_t' sugar
|   |-Typedef 0x555e276911c8 '__off64_t'
|   `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27692000 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x555e27691fc0 '__quad_t *'
|   `-TypedefType 0x555e27691f60 '__quad_t' sugar
|     |-Typedef 0x555e27690d68 '__quad_t'
|     `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27692070 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x555e2762aab0 'char *'
|   `-BuiltinType 0x555e27629eb0 'char'
|-TypedefDecl 0x555e276920e0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27692150 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-FunctionDecl 0x555e27692298 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x555e276921c0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x555e276935e8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x555e276935d8 <line:72:3, col:34>
|     `-CallExpr 0x555e27693598 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x555e27693580 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x555e27693510 <col:10> '<builtin fn type>' Function 0x555e27693380 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x555e276935c0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x555e27693530 <col:29> 'unsigned int' lvalue ParmVar 0x555e276921c0 '__bsx' 'unsigned int'
|-FunctionDecl 0x555e27693380 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x555e27693420 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x555e27693490 <col:10> Implicit
| `-ConstAttr 0x555e276934e8 <col:10> Implicit
|-FunctionDecl 0x555e27693740 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x555e27693638 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x555e27693a58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x555e27693a48 <line:77:3, col:34>
|     `-CallExpr 0x555e27693a08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x555e276939f0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x555e27693978 <col:10> '<builtin fn type>' Function 0x555e276937e8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x555e27693a30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x555e27693998 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x555e27693638 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x555e276937e8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x555e27693888 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x555e276938f8 <col:10> Implicit
| `-ConstAttr 0x555e27693950 <col:10> Implicit
|-TypedefDecl 0x555e27693a88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-TypedefDecl 0x555e27693b18 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x555e27693ae0 '__time_t' sugar
|   |-Typedef 0x555e27691708 '__time_t'
|   `-BuiltinType 0x555e27629f30 'long'
|-RecordDecl 0x555e27693b70 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x555e27693c28 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x555e27693cb8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x555e27693d48 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x555e27693d10 '__pid_t' sugar
|   |-Typedef 0x555e27691238 '__pid_t'
|   `-BuiltinType 0x555e27629f10 'int'
|-RecordDecl 0x555e27693da0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x555e27693e60 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x555e27693eb0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x555e27693f70 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x555e27693fd8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-RecordDecl 0x555e27694030 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x555e276942c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x555e276953a0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x555e27694310 'struct cpu_set_t' sugar
|   `-RecordType 0x555e276940b0 'cpu_set_t'
|     `-Record 0x555e27694030 ''
|-FunctionDecl 0x555e27695678 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x555e27695448 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x555e27695550 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x555e27695728 <line:107:19>
|-FunctionDecl 0x555e27695900 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x555e27695790 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x555e276959a8 <col:69>
|-FunctionDecl 0x555e27695b20 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x555e27695a10 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x555e27695bc8 <col:64>
|-FunctionDecl 0x555e27695e88 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x555e27695c30 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x555e27695d68 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x555e27695f38 <line:113:22>
|-FunctionDecl 0x555e276961b8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x555e27695fa0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x555e27696098 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x555e27696268 <col:88>
|-FunctionDecl 0x555e27696588 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x555e276962d0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x555e276963b0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x555e27696440 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x555e27696640 <col:62>
|-FunctionDecl 0x555e276967b8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x555e276966a8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x555e27696860 <col:63>
|-FunctionDecl 0x555e27696988 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x555e27696a28 <col:47>
|-FunctionDecl 0x555e27696b30 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x555e27696a98 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x555e27696bd8 <col:69>
|-FunctionDecl 0x555e27696ce0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x555e27696c48 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x555e27696d88 <col:69>
|-FunctionDecl 0x555e27697048 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x555e27696df0 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x555e27696f28 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x555e276970f8 <col:88>
|-TypedefDecl 0x555e27697188 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x555e27697150 '__clock_t' sugar
|   |-Typedef 0x555e27691548 '__clock_t'
|   `-BuiltinType 0x555e27629f30 'long'
|-TypedefDecl 0x555e27697218 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x555e276971e0 '__clockid_t' sugar
|   |-Typedef 0x555e27691938 '__clockid_t'
|   `-BuiltinType 0x555e27629f10 'int'
|-TypedefDecl 0x555e276972a8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x555e27697270 '__timer_t' sugar
|   |-Typedef 0x555e276919a8 '__timer_t'
|   `-PointerType 0x555e2762a630 'void *'
|     `-BuiltinType 0x555e27629e70 'void'
|-RecordDecl 0x555e27697300 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x555e276973d8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x555e27697440 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x555e276974a8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x555e27697510 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x555e27697578 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x555e276975e0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x555e27697648 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x555e276976b0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x555e27697718 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x555e27697780 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x555e276977e8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x555e27697838 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x555e27697908 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x555e27697978 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x555e27697a20 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x555e27697bf0 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x555e27697c90 <col:45>
|-FunctionDecl 0x555e27697e70 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x555e27697d60 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x555e27697f18 <col:54>
|-FunctionDecl 0x555e27698118 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x555e27697f80 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x555e27697ff8 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x555e276981c8 <line:157:22>
| `-ConstAttr 0x555e27698220 <col:63>
|-FunctionDecl 0x555e27699050 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x555e27698318 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x555e276990f8 <col:56>
|-FunctionDecl 0x555e276994a0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x555e27699168 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x555e276991e0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x555e27699260 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x555e27699358 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x555e27699560 <col:54>
|-RecordDecl 0x555e276995b8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x555e27699668 parent 0x555e27629e18 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x555e276998c8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x555e27699968 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x555e276999d0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x555e27699a38 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x555e27699b28 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x555e27699c48 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x555e27699bf0 'struct __locale_struct *'
|   `-ElaboratedType 0x555e27699b80 'struct __locale_struct' sugar
|     `-RecordType 0x555e27699640 'struct __locale_struct'
|       `-Record 0x555e276995b8 '__locale_struct'
|-TypedefDecl 0x555e27699cf8 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x555e27699cc0 '__locale_t' sugar
|   |-Typedef 0x555e27699c48 '__locale_t'
|   `-PointerType 0x555e27699bf0 'struct __locale_struct *'
|     `-ElaboratedType 0x555e27699b80 'struct __locale_struct' sugar
|       `-RecordType 0x555e27699640 'struct __locale_struct'
|         `-Record 0x555e276995b8 '__locale_struct'
|-FunctionDecl 0x555e2769b110 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x555e27699d68 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x555e27699de0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x555e27699e60 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x555e27699ef0 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x555e27699f68 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x555e2769b1d8 <col:40>
|-FunctionDecl 0x555e2769b3c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x555e2769b2a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x555e2769b470 <col:66>
|-FunctionDecl 0x555e2769b580 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x555e2769b4d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x555e2769b628 <col:69>
|-FunctionDecl 0x555e2769b858 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x555e2769b690 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x555e2769b720 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x555e2769b908 <col:52>
|-FunctionDecl 0x555e2769bab0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x555e2769b970 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x555e2769ba00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x555e2769bb60 <col:55>
|-FunctionDecl 0x555e2769bcf8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x555e2769bbe0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x555e2769bda0 <col:62>
|-FunctionDecl 0x555e2769bf18 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x555e2769be08 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x555e2769bfc0 <col:60>
|-FunctionDecl 0x555e2769c2b8 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x555e2769c118 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x555e2769c198 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x555e2769c368 <col:44>
|-FunctionDecl 0x555e2769c578 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x555e2769c3d0 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x555e2769c450 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x555e2769c628 <col:49>
|-VarDecl 0x555e2769c728 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x555e2769c7a8 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x555e2769c828 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x555e2769c8f0 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x555e2769ca20 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x555e2769cac0 <col:42>
|-VarDecl 0x555e2769cb30 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x555e2769cbb0 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x555e2769cd38 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x555e2769cc28 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x555e2769cde0 <col:57>
|-FunctionDecl 0x555e2769cef0 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x555e2769ce60 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x555e2769cf98 <col:56>
|-FunctionDecl 0x555e2769d0d0 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x555e2769d018 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x555e2769d178 <col:59>
|-FunctionDecl 0x555e2769d280 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x555e2769d1e8 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x555e2769d328 <col:48>
| `-ConstAttr 0x555e2769d380 <col:89>
|-FunctionDecl 0x555e2769d5e8 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x555e2769d438 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x555e2769d4c8 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x555e2769d848 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x555e2769d6d8 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x555e2769d768 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x555e2769d8f8 <col:88>
|-FunctionDecl 0x555e2769da90 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x555e2769d960 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x555e2769d9f0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x555e2769db40 <col:88>
|-FunctionDecl 0x555e2769dd58 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x555e2769dba8 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x555e2769dc38 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x555e2769de08 <line:208:22>
|-FunctionDecl 0x555e2769e178 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x555e2769de70 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x555e2769def0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x555e2769df80 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x555e2769e010 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x555e2769e478 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x555e2769e278 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x555e2769e350 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x555e2769e528 <col:85>
|-FunctionDecl 0x555e2769e918 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x555e2769e590 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x555e2769e6c8 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x555e2769e7d0 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x555e2769e9d0 <col:52>
|-FunctionDecl 0x555e2769eb48 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x555e2769ea38 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x555e2769ebf0 <col:61>
|-FunctionDecl 0x555e2769f0f0 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x555e2769ec58 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x555e2769ecd8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x555e2769ee08 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x555e2769eef8 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x555e2769f1b0 <col:62>
|-FunctionDecl 0x555e2769f3c8 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x555e2769f218 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x555e2769f2a8 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x555e2769f478 <line:221:22>
|-FunctionDecl 0x555e2769f578 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x555e2769f4e0 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x555e2769f620 <col:65>
|-TypedefDecl 0x555e2769f690 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x555e27629fd0 'unsigned long'
|-RecordDecl 0x555e2769f6e8 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x555e2769f830 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x555e2769f898 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x555e2769f948 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x555e2769f8f0 'union pthread_attr_t' sugar
|   `-RecordType 0x555e2769f770 'union pthread_attr_t'
|     `-Record 0x555e2769f6e8 'pthread_attr_t'
|-RecordDecl 0x555e2769f9a0 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x555e2769fb18 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x555e2769fb90 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x555e2769fc40 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x555e2769fbe0 'struct __pthread_internal_list' sugar
|   `-RecordType 0x555e2769fa20 'struct __pthread_internal_list'
|     `-Record 0x555e2769f9a0 '__pthread_internal_list'
|-RecordDecl 0x555e2769fcb0 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x555e2769fd58 parent 0x555e27629e18 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x555e2769fe30 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x555e2769fe98 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x555e2769ff00 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x555e2769ff68 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x555e2769ffd0 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x555e276a0038 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x555e276a4110 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x555e276a41c0 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x555e276a42b0 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x555e276a4318 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x555e276a44a0 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x555e276a4440 'union pthread_mutex_t' sugar
|   `-RecordType 0x555e2769fd30 'pthread_mutex_t'
|     `-Record 0x555e2769fcb0 ''
|-RecordDecl 0x555e276a4510 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x555e276a4650 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x555e276a46b8 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x555e276a4770 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x555e276a4710 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x555e276a4590 'pthread_mutexattr_t'
|     `-Record 0x555e276a4510 ''
|-RecordDecl 0x555e276a47e0 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x555e276a4888 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x555e276a4950 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x555e276a49b8 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x555e276a4a20 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x555e276a4a88 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x555e276a4af0 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x555e276a4b58 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x555e276a4bc0 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x555e276a4c28 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x555e276a4ce0 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at ./split_3/rfi000_rmo.oepc_false-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at ./split_3/rfi000_rmo.oepc_false-unreach-call.i:258:3)'
| |-FieldDecl 0x555e276a4dd0 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x555e276a4e38 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x555e276a4f70 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x555e276a4f10 'union pthread_cond_t' sugar
|   `-RecordType 0x555e276a4860 'pthread_cond_t'
|     `-Record 0x555e276a47e0 ''
|-RecordDecl 0x555e276a4fe0 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x555e276a6130 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x555e276a6198 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x555e276a6250 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x555e276a61f0 'union pthread_condattr_t' sugar
|   `-RecordType 0x555e276a5060 'pthread_condattr_t'
|     `-Record 0x555e276a4fe0 ''
|-TypedefDecl 0x555e276a62d8 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x555e27629fb0 'unsigned int'
|-TypedefDecl 0x555e276a6348 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x555e27629f10 'int'
|-RecordDecl 0x555e276a63a0 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x555e276a6448 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x555e276a6510 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x555e276a6578 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x555e276a65e0 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x555e276a6648 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x555e276a66b0 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x555e276a6718 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x555e276a6780 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x555e276a67e8 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x555e276a6850 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x555e276a68b8 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x555e276a6920 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x555e276a69d0 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at ./split_3/rfi000_rmo.oepc_false-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at ./split_3/rfi000_rmo.oepc_false-unreach-call.i:281:3)'
| |-FieldDecl 0x555e276a6a78 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x555e276a6ae0 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x555e276a6c30 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x555e276a6bd0 'union pthread_rwlock_t' sugar
|   `-RecordType 0x555e276a6420 'pthread_rwlock_t'
|     `-Record 0x555e276a63a0 ''
|-RecordDecl 0x555e276a6ca0 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x555e276a6de0 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x555e276a6e48 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x555e276a6f00 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x555e276a6ea0 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x555e276a6d20 'pthread_rwlockattr_t'
|     `-Record 0x555e276a6ca0 ''
|-TypedefDecl 0x555e276a6f88 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x555e27629f14 'volatile int' volatile
|   `-BuiltinType 0x555e27629f10 'int'
|-RecordDecl 0x555e276a6fe0 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x555e276a8140 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x555e276a81a8 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x555e276a8260 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x555e276a8200 'union pthread_barrier_t' sugar
|   `-RecordType 0x555e276a7060 'pthread_barrier_t'
|     `-Record 0x555e276a6fe0 ''
|-RecordDecl 0x555e276a82d0 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x555e276a83d0 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x555e276a8438 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x555e276a84f0 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x555e276a8490 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x555e276a8350 'pthread_barrierattr_t'
|     `-Record 0x555e276a82d0 ''
|-TypedefDecl 0x555e276a8608 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x555e276a85a0 'long [8]' 8 
|   `-BuiltinType 0x555e27629f30 'long'
|-EnumDecl 0x555e276a8660 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x555e276a8728 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x555e276a8778 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x555e276a87c8 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x555e276a8898 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x555e276a88e8 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x555e276a8938 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x555e276a8988 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x555e276a8a10 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x555e276a89f8 <col:26> 'int'
| |   `-DeclRefExpr 0x555e276a89d8 <col:26> 'int' EnumConstant 0x555e276a8898 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x555e276a8a98 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x555e276a8a80 <col:29> 'int'
| |   `-DeclRefExpr 0x555e276a8a60 <col:29> 'int' EnumConstant 0x555e276a88e8 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x555e276a8b20 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x555e276a8b08 <col:30> 'int'
| |   `-DeclRefExpr 0x555e276a8ae8 <col:30> 'int' EnumConstant 0x555e276a8938 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x555e276a8ba8 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x555e276a8b90 <col:27> 'int'
|     `-DeclRefExpr 0x555e276a8b70 <col:27> 'int' EnumConstant 0x555e276a8a10 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x555e276a8bf8 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x555e276a8cc8 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x555e276a8d50 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x555e276a8d38 <col:30> 'int'
| |   `-DeclRefExpr 0x555e276a8d18 <col:30> 'int' EnumConstant 0x555e276a8cc8 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x555e276a8da0 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x555e276a8e28 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x555e276a8e10 <col:29> 'int'
|     `-DeclRefExpr 0x555e276a8df0 <col:29> 'int' EnumConstant 0x555e276a8da0 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x555e276a8e78 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x555e276a8f48 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x555e276a8f98 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x555e276a8fe8 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x555e276a9038 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x555e276a9150 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x555e276a91a0 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x555e276a91f0 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x555e276a9278 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x555e276a9260 <col:31> 'int'
|     `-DeclRefExpr 0x555e276a9240 <col:31> 'int' EnumConstant 0x555e276a9150 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x555e276a92c8 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x555e276a9398 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x555e276a93e8 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x555e276a9438 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x555e276a9508 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x555e276a9558 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x555e276a95a8 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x555e276a9678 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x555e276a96c8 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x555e276a9718 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x555e276a9958 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x555e276a99c0 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x555e276a9a28 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x555e276a9b48 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x555e276a9b98 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x555e276a9c68 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x555e276a9cb8 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x555e276a9d08 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x555e276a9dd8 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x555e276a9e28 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x555e276aa488 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x555e276a9f20 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x555e276aa030 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276aa270 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x555e276aa2f0 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x555e276aa548 <col:47>
| |-NonNullAttr 0x555e276aa5a0 <col:77, col:94> 1 3
| `-CallbackAttr 0x555e276aa5d8 <line:385:12> Implicit 2 3
|-FunctionDecl 0x555e276aa700 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x555e276aa630 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x555e276aa958 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x555e276aa7b8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x555e276aa838 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x555e276aab28 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x555e276aaa18 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x555e276aabd0 <col:60>
|-FunctionDecl 0x555e276aad20 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x555e276aadc0 <col:54>
| `-ConstAttr 0x555e276aae18 <col:95>
|-FunctionDecl 0x555e276aafe8 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x555e276aae50 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x555e276aaec8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x555e276ab098 <line:394:19>
| `-ConstAttr 0x555e276ab0f0 <col:60>
|-FunctionDecl 0x555e276acb08 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x555e276ac9d0 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x555e276acbb0 <col:71>
| `-NonNullAttr 0x555e276acc08 <col:112, col:126> 1
|-FunctionDecl 0x555e276acd10 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x555e276acc58 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x555e276acdb8 <line:397:22>
| `-NonNullAttr 0x555e276ace10 <col:63, col:77> 1
|-FunctionDecl 0x555e276ad038 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x555e276ace58 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x555e276aced8 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x555e276ad0e8 <line:400:22>
| `-NonNullAttr 0x555e276ad140 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276ad348 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x555e276ad188 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x555e276ad208 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x555e276ad3f8 <line:403:22>
| `-NonNullAttr 0x555e276ad450 <col:63, col:77> 1
|-FunctionDecl 0x555e276ad6a8 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x555e276ad498 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x555e276ad540 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x555e276ad758 <line:406:22>
| `-NonNullAttr 0x555e276ad7b0 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276ae9e8 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x555e276ad7f8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x555e276ad870 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x555e276aea98 <line:409:22>
| `-NonNullAttr 0x555e276aeaf0 <col:63, col:77> 1
|-FunctionDecl 0x555e276aed28 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x555e276aeb38 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276aebc8 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x555e276aedd8 <line:412:22>
| `-NonNullAttr 0x555e276aee30 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276af068 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x555e276aee78 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276aef08 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x555e276af118 <col:37>
| `-NonNullAttr 0x555e276af170 <col:78, col:95> 1 2
|-FunctionDecl 0x555e276af358 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276af1b8 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276af238 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x555e276af408 <line:418:22>
| `-NonNullAttr 0x555e276af460 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276af5e8 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x555e276af4a8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x555e276af528 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x555e276af698 <line:420:22>
| `-NonNullAttr 0x555e276af6f0 <col:63, col:77> 1
|-FunctionDecl 0x555e276af898 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276af738 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276af7b8 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x555e276af948 <line:423:22>
| `-NonNullAttr 0x555e276af9c0 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276afb48 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x555e276afa08 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x555e276afa88 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x555e276afbf8 <line:426:22>
| `-NonNullAttr 0x555e276afc50 <col:63, col:77> 1
|-FunctionDecl 0x555e276afdf8 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276afc98 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276afd18 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x555e276afea8 <line:429:22>
| `-NonNullAttr 0x555e276aff00 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276b0088 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x555e276aff48 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x555e276affc8 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x555e276b0138 <line:431:22>
| `-NonNullAttr 0x555e276b0190 <col:63, col:77> 1
|-FunctionDecl 0x555e276b03b8 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x555e276b01d8 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276b0258 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x555e276b0468 <line:434:22>
| |-NonNullAttr 0x555e276b04c0 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x555e276b04f8 <col:100> "" ""
|-FunctionDecl 0x555e276b0708 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x555e276b0548 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x555e276b05c8 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x555e276b07b8 <line:437:22>
| |-NonNullAttr 0x555e276b0810 <col:63, col:77> 1
| `-DeprecatedAttr 0x555e276b0848 <col:97> "" ""
|-FunctionDecl 0x555e276b0a48 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x555e276b0898 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276b0910 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x555e276b0af8 <line:440:22>
| `-NonNullAttr 0x555e276b0b50 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276b0cd0 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x555e276b0b98 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x555e276b0c10 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x555e276b0d80 <line:443:22>
| `-NonNullAttr 0x555e276b0dd8 <col:63, col:77> 1
|-FunctionDecl 0x555e276b10c8 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x555e276b0e28 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x555e276b0ea8 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x555e276b0f20 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x555e276b1180 <line:447:22>
| `-NonNullAttr 0x555e276b11d8 <col:63, col:83> 1 2 3
|-FunctionDecl 0x555e276b1488 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x555e276b1230 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x555e276b12b0 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x555e276b1328 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x555e276b1540 <col:43>
| `-NonNullAttr 0x555e276b1598 <col:84, col:98> 1
|-FunctionDecl 0x555e276b1858 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x555e276b15e8 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x555e276b1668 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x555e276b16f8 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x555e276b1910 <line:452:22>
| `-NonNullAttr 0x555e276b1968 <col:63, col:77> 3
|-FunctionDecl 0x555e276b1c78 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x555e276b19e0 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x555e276b1a60 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x555e276b1af0 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x555e276b1d30 <line:456:22>
| `-NonNullAttr 0x555e276b1d88 <col:63, col:80> 2 3
|-FunctionDecl 0x555e276b1f78 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x555e276b1dd8 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x555e276b1e58 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x555e276b2028 <line:458:22>
|-FunctionDecl 0x555e276b23f8 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x555e276b20f0 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x555e276b2290 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x555e276b24a8 <col:52, col:69> 1 2
|-FunctionDecl 0x555e276b2650 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x555e276b2530 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x555e276b25b0 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x555e276b2838 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x555e276b2718 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x555e276b2798 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x555e276b29f0 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x555e276b28f8 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x555e276b2b30 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x555e276b2bd0 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x555e276b2c78 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x555e276b2d68 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x555e276b2dd0 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x555e276b2fa0 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./split_3/rfi000_rmo.oepc_false-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x555e276b3098 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x555e276b3150 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x555e276b30f0 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x555e276b2c50 '__pthread_unwind_buf_t'
| |   `-Record 0x555e276b2bd0 ''
| `-AlignedAttr 0x555e276b31a8 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x555e276b3220 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x555e276b3380 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x555e276b33e8 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x555e276b3450 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x555e276b34b8 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x555e276b36c0 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x555e276b35b0 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x555e276b3808 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x555e276b3778 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x555e276b3a00 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x555e276b38c0 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x555e276b3aa8 <line:487:22>
|-RecordDecl 0x555e276b3b00 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x555e276b3e18 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x555e276b3c78 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x555e276b3cf8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x555e276b3ec8 <col:86>
| `-ReturnsTwiceAttr 0x555e276b3f20 <col:12> Implicit
|-FunctionDecl 0x555e276b4248 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x555e276b3ff0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x555e276b4100 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x555e276b42f8 <line:493:22>
| `-NonNullAttr 0x555e276b4350 <col:63, col:77> 1
|-FunctionDecl 0x555e276b44c8 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x555e276b4398 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x555e276b4570 <line:495:22>
| `-NonNullAttr 0x555e276b45c8 <col:63, col:77> 1
|-FunctionDecl 0x555e276b46d0 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x555e276b4618 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x555e276b4778 <line:497:22>
| `-NonNullAttr 0x555e276b47d0 <col:52, col:66> 1
|-FunctionDecl 0x555e276b48d0 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x555e276b4818 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x555e276b4978 <line:499:22>
| `-NonNullAttr 0x555e276b49d0 <col:52, col:66> 1
|-FunctionDecl 0x555e276b5c28 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x555e276b5a38 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x555e276b5ac8 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x555e276b5cd8 <col:36>
| `-NonNullAttr 0x555e276b5d30 <col:66, col:83> 1 2
|-FunctionDecl 0x555e276b5e30 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x555e276b5d78 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x555e276b5ed8 <line:504:22>
| `-NonNullAttr 0x555e276b5f30 <col:52, col:66> 1
|-FunctionDecl 0x555e276b61c8 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276b5fe0 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x555e276b6060 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x555e276b6278 <line:508:22>
| `-NonNullAttr 0x555e276b62d0 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276b6598 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x555e276b6318 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x555e276b6398 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x555e276b6418 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x555e276b6650 <line:512:22>
| `-NonNullAttr 0x555e276b66a8 <col:63, col:80> 1 3
|-FunctionDecl 0x555e276b67b0 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x555e276b66f8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x555e276b6858 <line:514:22>
| `-NonNullAttr 0x555e276b68b0 <col:63, col:77> 1
|-FunctionDecl 0x555e276b6ad8 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x555e276b6960 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x555e276b6b80 <line:516:22>
| `-NonNullAttr 0x555e276b6bd8 <col:63, col:77> 1
|-FunctionDecl 0x555e276b6ce0 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x555e276b6c28 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x555e276b6d88 <line:518:22>
| `-NonNullAttr 0x555e276b6de0 <col:63, col:77> 1
|-FunctionDecl 0x555e276b7008 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276b6e28 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x555e276b6ea8 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x555e276b70b8 <line:522:22>
| `-NonNullAttr 0x555e276b7110 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276b7318 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x555e276b7158 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x555e276b71d8 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x555e276b73c8 <line:525:22>
| `-NonNullAttr 0x555e276b7420 <col:63, col:77> 1
|-FunctionDecl 0x555e276b75c8 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276b7468 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x555e276b74e8 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x555e276b7678 <line:528:22>
| `-NonNullAttr 0x555e276b76d0 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276b7858 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x555e276b7718 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x555e276b7798 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x555e276b7908 <line:530:22>
| `-NonNullAttr 0x555e276b7960 <col:63, col:77> 1
|-FunctionDecl 0x555e276b7b20 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276b79a8 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x555e276b7a40 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x555e276b7bd0 <line:534:22>
| `-NonNullAttr 0x555e276b7c28 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276b7db8 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x555e276b7c78 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x555e276b7cf8 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x555e276b7e68 <line:537:22>
| `-NonNullAttr 0x555e276b7ec0 <col:63, col:77> 1
|-FunctionDecl 0x555e276b8068 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276b7f08 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x555e276b7f88 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x555e276b8118 <line:541:22>
| `-NonNullAttr 0x555e276b8170 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276b82f8 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x555e276b81b8 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x555e276b8238 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x555e276b83a8 <line:544:22>
| `-NonNullAttr 0x555e276b8400 <col:63, col:77> 1
|-FunctionDecl 0x555e276b85e8 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x555e276b8448 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x555e276b84c8 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x555e276b8698 <line:547:22>
| `-NonNullAttr 0x555e276b86f0 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276b8878 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x555e276b8738 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x555e276b87b8 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x555e276b8928 <line:550:22>
| `-NonNullAttr 0x555e276b8980 <col:63, col:77> 1
|-FunctionDecl 0x555e276b9cf8 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x555e276b9aa0 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x555e276b9bb0 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x555e276b9da8 <col:29>
| `-NonNullAttr 0x555e276b9e00 <col:70, col:84> 1
|-FunctionDecl 0x555e276b9f78 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x555e276b9e48 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x555e276ba020 <line:555:22>
| `-NonNullAttr 0x555e276ba078 <col:63, col:77> 1
|-FunctionDecl 0x555e276ba180 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x555e276ba0c8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x555e276ba228 <line:557:22>
| `-NonNullAttr 0x555e276ba280 <col:52, col:66> 1
|-FunctionDecl 0x555e276ba380 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x555e276ba2c8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x555e276ba428 <line:559:19>
| `-NonNullAttr 0x555e276ba480 <col:49, col:63> 1
|-FunctionDecl 0x555e276ba6b8 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x555e276ba4c8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x555e276ba558 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x555e276ba768 <col:39>
| `-NonNullAttr 0x555e276ba7c0 <col:69, col:86> 1 2
|-FunctionDecl 0x555e276ba8c0 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x555e276ba808 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x555e276ba968 <line:564:22>
| `-NonNullAttr 0x555e276ba9c0 <col:52, col:66> 1
|-FunctionDecl 0x555e276bab28 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x555e276baa70 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x555e276babd0 <line:566:22>
| `-NonNullAttr 0x555e276bac28 <col:52, col:66> 1
|-FunctionDecl 0x555e276bade8 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x555e276bac78 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x555e276bad08 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x555e276bae98 <col:39>
| `-NonNullAttr 0x555e276baef0 <col:69, col:86> 1 2
|-FunctionDecl 0x555e276baff0 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x555e276baf38 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x555e276bb098 <line:571:22>
| `-NonNullAttr 0x555e276bb0f0 <col:52, col:66> 1
|-FunctionDecl 0x555e276bb2d8 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x555e276bb1a0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x555e276bb380 <line:573:22>
| `-NonNullAttr 0x555e276bb3d8 <col:63, col:77> 1
|-FunctionDecl 0x555e276bb4e0 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x555e276bb428 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x555e276bb588 <line:575:22>
| `-NonNullAttr 0x555e276bb5e0 <col:63, col:77> 1
|-FunctionDecl 0x555e276bb808 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276bb628 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x555e276bb6a8 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x555e276bb8b8 <line:579:22>
| `-NonNullAttr 0x555e276bb910 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276bbb38 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x555e276bb958 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x555e276bb9d8 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x555e276bbbe8 <line:582:22>
| `-NonNullAttr 0x555e276bbc40 <col:63, col:77> 1
|-FunctionDecl 0x555e276bbde8 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276bbc88 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x555e276bbd08 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x555e276bbe98 <line:586:22>
| `-NonNullAttr 0x555e276bbef0 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276bc078 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x555e276bbf38 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x555e276bbfb8 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x555e276bc128 <col:36>
| `-NonNullAttr 0x555e276bc180 <col:77, col:91> 1
|-FunctionDecl 0x555e276bc4b8 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x555e276bc260 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x555e276bc370 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x555e276bc568 <line:591:22>
| `-NonNullAttr 0x555e276bc5c0 <col:63, col:77> 1
|-FunctionDecl 0x555e276bc738 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x555e276bc608 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x555e276bc7e0 <line:593:22>
| `-NonNullAttr 0x555e276bc838 <col:63, col:77> 1
|-FunctionDecl 0x555e276bc940 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x555e276bc888 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x555e276bc9e8 <line:595:22>
| `-NonNullAttr 0x555e276bca40 <col:52, col:66> 1
|-FunctionDecl 0x555e276bcb58 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x555e276bcaa0 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x555e276bcc00 <line:597:22>
| `-NonNullAttr 0x555e276bcc58 <col:52, col:66> 1
|-FunctionDecl 0x555e276bce88 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x555e276bcca8 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x555e276bcd20 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x555e276bcf38 <line:600:22, col:39> 1 2
|-FunctionDecl 0x555e276bd268 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x555e276bcfb8 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x555e276bd030 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x555e276bd0c0 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x555e276bd320 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x555e276bd538 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x555e276bd400 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x555e276bd5e0 <line:606:22>
| `-NonNullAttr 0x555e276bd638 <col:63, col:77> 1
|-FunctionDecl 0x555e276bd740 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x555e276bd688 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x555e276bd7e8 <line:608:22>
| `-NonNullAttr 0x555e276bd840 <col:63, col:77> 1
|-FunctionDecl 0x555e276bdaa0 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276bd888 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x555e276bd908 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x555e276bdb50 <line:612:22>
| `-NonNullAttr 0x555e276bdba8 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276bddb8 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x555e276bdbf8 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x555e276bdc78 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x555e276bde68 <col:37>
| `-NonNullAttr 0x555e276bdec0 <col:78, col:92> 1
|-FunctionDecl 0x555e276be0d8 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x555e276bdf08 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x555e276bdfb0 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x555e276be188 <line:618:22>
| `-NonNullAttr 0x555e276be1e0 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276be3a8 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x555e276be228 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x555e276be2a0 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x555e276be458 <line:621:22>
| `-NonNullAttr 0x555e276be4b0 <col:63, col:77> 1
|-FunctionDecl 0x555e276be758 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x555e276be590 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x555e276be610 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x555e276be808 <line:623:22>
| `-NonNullAttr 0x555e276be860 <col:63, col:77> 1
|-FunctionDecl 0x555e276be9d8 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x555e276be8a8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x555e276beab0 <line:625:22>
| `-NonNullAttr 0x555e276beb08 <col:63, col:77> 1
|-FunctionDecl 0x555e276bec10 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x555e276beb58 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x555e276becb8 <line:627:22>
| `-NonNullAttr 0x555e276bed10 <col:52, col:66> 1
|-FunctionDecl 0x555e276bee10 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x555e276bed58 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x555e276beeb8 <line:629:22>
| `-NonNullAttr 0x555e276bef10 <col:52, col:66> 1
|-FunctionDecl 0x555e276bf010 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x555e276bef58 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x555e276bf0b8 <line:631:22>
| `-NonNullAttr 0x555e276bf110 <col:52, col:66> 1
|-FunctionDecl 0x555e276bf4e8 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x555e276bf1f0 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x555e276bf300 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x555e276bf380 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x555e276bf5a0 <line:635:22>
| `-NonNullAttr 0x555e276bf5f8 <col:63, col:77> 1
|-FunctionDecl 0x555e276bf778 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x555e276bf648 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x555e276bf820 <line:637:22>
| `-NonNullAttr 0x555e276bf878 <col:63, col:77> 1
|-FunctionDecl 0x555e276bf980 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x555e276bf8c8 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x555e276bfa28 <line:639:22>
| `-NonNullAttr 0x555e276bfa80 <col:52, col:66> 1
|-FunctionDecl 0x555e276c0c88 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x555e276c0b50 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x555e276c0d30 <line:641:22>
| `-NonNullAttr 0x555e276c0d88 <col:63, col:77> 1
|-FunctionDecl 0x555e276c0e90 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x555e276c0dd8 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x555e276c0f38 <line:643:22>
| `-NonNullAttr 0x555e276c0f90 <col:63, col:77> 1
|-FunctionDecl 0x555e276c11b8 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x555e276c0fd8 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x555e276c1058 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x555e276c1268 <line:647:22>
| `-NonNullAttr 0x555e276c12c0 <col:63, col:80> 1 2
|-FunctionDecl 0x555e276c14c8 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x555e276c1308 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x555e276c1388 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x555e276c1578 <line:650:22>
| `-NonNullAttr 0x555e276c15d0 <col:63, col:77> 1
|-FunctionDecl 0x555e276c1918 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x555e276c16b0 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x555e276c17d0 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x555e276c19c8 <line:653:22>
| `-NonNullAttr 0x555e276c1a20 <col:63, col:77> 1
|-FunctionDecl 0x555e276c1b88 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x555e276c1a68 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x555e276c1c30 <col:69>
|-FunctionDecl 0x555e276c1da8 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x555e276c1c98 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x555e276c1e50 <col:72>
|-FunctionDecl 0x555e276c2088 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x555e276c1eb8 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x555e276c1f68 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x555e276c2138 <col:44>
|-FunctionDecl 0x555e276c2358 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x555e276c21a0 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x555e276c2218 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x555e276c2408 <line:660:22>
| `-NonNullAttr 0x555e276c2460 <col:63, col:77> 2
|-FunctionDecl 0x555e276c28a8 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x555e276c2540 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x555e276c2650 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x555e276c2760 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x555e276c2960 <col:47>
|-FunctionDecl 0x555e276c2af0 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x555e276c29d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x555e276c2c48 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x555e276c2bb0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x555e276c2d10 <line:667:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x555e276c2dd0 <line:668:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x555e276c2e90 <line:669:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x555e276c2f48 <line:670:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x555e276c2fc8 prev 0x555e276c2f48 <line:671:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x555e276c3030 <col:24> 'int' 0
|-VarDecl 0x555e276c3068 <line:672:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x555e276c30e8 prev 0x555e276c3068 <line:673:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x555e276c3150 <col:27> 'int' 0
|-VarDecl 0x555e276c3188 <line:674:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x555e276c3208 prev 0x555e276c3188 <line:675:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x555e276c3270 <col:27> 'int' 0
|-VarDecl 0x555e276c32a0 <line:676:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x555e276c3318 <line:677:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x555e276c3398 <line:678:1, col:5> col:5 used x 'int'
|-VarDecl 0x555e276c3418 prev 0x555e276c3398 <line:679:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x555e276c3480 <col:9> 'int' 0
|-VarDecl 0x555e276c34b8 <line:680:1, col:5> col:5 used y 'int'
|-VarDecl 0x555e276c3538 prev 0x555e276c34b8 <line:681:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x555e276c35a0 <col:9> 'int' 0
|-VarDecl 0x555e276c35d0 <line:682:1, col:7> col:7 used y$flush_delayed '_Bool'
|-VarDecl 0x555e276c3650 <line:683:1, col:5> col:5 used y$mem_tmp 'int'
|-VarDecl 0x555e276c36c8 <line:684:1, col:7> col:7 used y$r_buff0_thd0 '_Bool'
|-VarDecl 0x555e276c3740 <line:685:1, col:7> col:7 used y$r_buff0_thd1 '_Bool'
|-VarDecl 0x555e276c37b8 <line:686:1, col:7> col:7 used y$r_buff0_thd2 '_Bool'
|-VarDecl 0x555e276c3830 <line:687:1, col:7> col:7 used y$r_buff1_thd0 '_Bool'
|-VarDecl 0x555e276c38a8 <line:688:1, col:7> col:7 used y$r_buff1_thd1 '_Bool'
|-VarDecl 0x555e276c3920 <line:689:1, col:7> col:7 used y$r_buff1_thd2 '_Bool'
|-VarDecl 0x555e276c3998 <line:690:1, col:7> col:7 y$read_delayed '_Bool'
|-VarDecl 0x555e276c3a18 <line:691:1, col:6> col:6 y$read_delayed_var 'int *'
|-VarDecl 0x555e276c3b00 <line:692:1, col:5> col:5 used y$w_buff0 'int'
|-VarDecl 0x555e276c3b78 <line:693:1, col:7> col:7 used y$w_buff0_used '_Bool'
|-VarDecl 0x555e276c3bf8 <line:694:1, col:5> col:5 used y$w_buff1 'int'
|-VarDecl 0x555e276c3c70 <line:695:1, col:7> col:7 used y$w_buff1_used '_Bool'
|-VarDecl 0x555e276c3ce8 <line:696:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x555e276c3d60 <line:697:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x555e276c3e78 prev 0x555e276c2af0 <line:698:1, line:725:1> line:698:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x555e276c3de0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x555e276c5618 <line:699:1, line:725:1>
|   |-CallExpr 0x555e276c3f88 <line:700:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276c3f70 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c3f20 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276c4000 <line:701:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x555e276c3fa8 <col:3> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x555e276c3fe8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c3fc8 <col:15> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |-BinaryOperator 0x555e276c4060 <line:702:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x555e276c4020 <col:3> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   | `-IntegerLiteral 0x555e276c4040 <col:15> 'int' 2
|   |-BinaryOperator 0x555e276c40d8 <line:703:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c4080 <col:3> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c40c0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c40a0 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x555e276c4170 <line:704:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c40f8 <col:3> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x555e276c4148 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x555e276c4118 <col:27> 'int' 1
|   |-CallExpr 0x555e276c42f8 <line:705:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x555e276c42e0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555e276c4190 <col:3> 'void (int)' Function 0x555e27669bc8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x555e276c4290 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x555e276c4270 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x555e276c4250 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x555e276c4208 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x555e276c41f0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x555e276c41b0 <col:23> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x555e276c4238 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x555e276c4220 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x555e276c41d0 <col:41> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x555e276c4378 <line:706:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c4320 <col:3> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c4360 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c4340 <col:20> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x555e276c43f0 <line:707:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c4398 <col:3> '_Bool' lvalue Var 0x555e276c38a8 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c43d8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c43b8 <col:20> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x555e276c4468 <line:708:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c4410 <col:3> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c4450 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c4430 <col:20> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x555e276c4500 <line:709:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c4488 <col:3> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   | `-CStyleCastExpr 0x555e276c44d8 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x555e276c44a8 <col:27> 'int' 1
|   |-CallExpr 0x555e276c4558 <line:710:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276c4540 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c4520 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x555e276c45b0 <line:711:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276c4598 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c4578 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276c4610 <line:712:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x555e276c45d0 <col:3> 'int' lvalue Var 0x555e276c3418 'x' 'int'
|   | `-IntegerLiteral 0x555e276c45f0 <col:7> 'int' 1
|   |-CallExpr 0x555e276c4668 <line:713:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276c4650 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c4630 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x555e276c46c0 <line:714:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276c46a8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c4688 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276c49a8 <line:715:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x555e276c46e0 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   | `-ConditionalOperator 0x555e276c4978 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x555e276c47a0 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x555e276c4758 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x555e276c4740 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x555e276c4700 <col:7> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x555e276c4788 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x555e276c4770 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x555e276c4720 <col:25> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276c4960 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c47c0 <col:42> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x555e276c4940 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x555e276c4910 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x555e276c4880 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x555e276c4838 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x555e276c4820 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x555e276c47e0 <col:55> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x555e276c4868 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x555e276c4850 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x555e276c4800 <col:73> '_Bool' lvalue Var 0x555e276c38a8 'y$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x555e276c48e0 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e276c48a0 <col:90> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x555e276c48f8 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276c48c0 <col:102> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |-BinaryOperator 0x555e276c4bc0 <line:716:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c49c8 <col:3> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c4ba8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c4b78 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x555e276c4a88 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x555e276c4a40 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x555e276c4a28 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x555e276c49e8 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x555e276c4a70 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x555e276c4a58 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e276c4a08 <col:38> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c4b30 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x555e276c4ad8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x555e276c4aa8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x555e276c4b60 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555e276c4b48 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276c4b10 <col:66> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x555e276c4ea8 <line:717:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c4be0 <col:3> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c4e90 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c4e60 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x555e276c4d80 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x555e276c4ca0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x555e276c4c58 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x555e276c4c40 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x555e276c4c00 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x555e276c4c88 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x555e276c4c70 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x555e276c4c20 <col:38> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x555e276c4d60 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x555e276c4d18 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x555e276c4d00 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x555e276c4cc0 <col:56> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x555e276c4d48 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x555e276c4d30 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x555e276c4ce0 <col:74> '_Bool' lvalue Var 0x555e276c38a8 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c4e18 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x555e276c4dd0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x555e276c4da0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x555e276c4e48 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555e276c4e30 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276c4df8 <col:102> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x555e276c50b0 <line:718:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c4ec8 <col:3> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c5098 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c5068 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x555e276c4f88 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x555e276c4f40 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x555e276c4f28 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x555e276c4ee8 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x555e276c4f70 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x555e276c4f58 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e276c4f08 <col:38> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c5020 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x555e276c4fd8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x555e276c4fa8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x555e276c5050 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555e276c5038 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276c5000 <col:66> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x555e276c5398 <line:719:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c50d0 <col:3> '_Bool' lvalue Var 0x555e276c38a8 'y$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c5380 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c5350 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x555e276c5270 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x555e276c5190 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x555e276c5148 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x555e276c5130 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x555e276c50f0 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x555e276c5178 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x555e276c5160 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x555e276c5110 <col:38> '_Bool' lvalue Var 0x555e276c3740 'y$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x555e276c5250 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x555e276c5208 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x555e276c51f0 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x555e276c51b0 <col:56> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x555e276c5238 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x555e276c5220 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x555e276c51d0 <col:74> '_Bool' lvalue Var 0x555e276c38a8 'y$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c5308 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x555e276c52c0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x555e276c5290 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x555e276c5338 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555e276c5320 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276c52e8 <col:102> '_Bool' lvalue Var 0x555e276c38a8 'y$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x555e276c53f0 <line:720:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276c53d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c53b8 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x555e276c5448 <line:721:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276c5430 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c5410 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276c5500 <line:722:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x555e276c5468 <col:3> 'int' lvalue Var 0x555e276c2fc8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x555e276c54e0 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x555e276c54c8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c5488 <col:22> 'int' lvalue Var 0x555e276c2fc8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x555e276c54a8 <col:41> 'int' 1
|   |-CallExpr 0x555e276c5558 <line:723:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276c5540 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c5520 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x555e276c5608 <line:724:3, col:36>
|     `-CallExpr 0x555e276c55e8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x555e276c55d0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x555e276c5578 <col:10> 'void *(void)' Function 0x555e27669958 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x555e276c57a0 prev 0x555e276c2c48 <line:726:1, line:777:1> line:726:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x555e276c5708 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x555e276cbf58 <line:727:1, line:777:1>
|   |-CallExpr 0x555e276c5880 <line:728:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276c5868 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c5848 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276c58e0 <line:729:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x555e276c58a0 <col:3> 'int' lvalue Var 0x555e276c3418 'x' 'int'
|   | `-IntegerLiteral 0x555e276c58c0 <col:7> 'int' 2
|   |-CallExpr 0x555e276c5938 <line:730:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276c5920 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c5900 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x555e276c5990 <line:731:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276c5978 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c5958 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276c59f0 <line:732:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x555e276c59b0 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   | `-IntegerLiteral 0x555e276c59d0 <col:7> 'int' 1
|   |-CallExpr 0x555e276c5a48 <line:733:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276c5a30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c5a10 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x555e276c5aa0 <line:734:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276c5a88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c5a68 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276c5b70 <line:735:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c5ac0 <col:3> '_Bool' lvalue Var 0x555e276c3ce8 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c5b58 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x555e276c5b38 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x555e276c5b20 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x555e276c5ae0 <col:19> 'void *(void)' Function 0x555e27669958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x555e276c5c20 <line:736:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c5b90 <col:3> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c5c08 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x555e276c5be8 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x555e276c5bd0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x555e276c5bb0 <col:19> 'void *(void)' Function 0x555e27669958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x555e276c5c98 <line:737:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c5c40 <col:3> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c5c80 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c5c60 <col:21> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x555e276c5d10 <line:738:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x555e276c5cb8 <col:3> 'int' lvalue Var 0x555e276c3650 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x555e276c5cf8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c5cd8 <col:15> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |-BinaryOperator 0x555e276c6148 <line:739:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x555e276c5d30 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   | `-ConditionalOperator 0x555e276c6118 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x555e276c5f40 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x555e276c5e60 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x555e276c5d88 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x555e276c5d70 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x555e276c5d50 <col:8> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x555e276c5e40 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x555e276c5dd8 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x555e276c5dc0 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x555e276c5da0 <col:27> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x555e276c5e28 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x555e276c5e10 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x555e276c5df0 <col:46> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x555e276c5f20 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x555e276c5eb8 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x555e276c5ea0 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x555e276c5e80 <col:65> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x555e276c5f08 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x555e276c5ef0 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x555e276c5ed0 <col:84> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276c6100 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c5f60 <col:101> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |   `-ParenExpr 0x555e276c60e0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x555e276c60b0 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x555e276c6020 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x555e276c5fd8 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x555e276c5fc0 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x555e276c5f80 <col:106> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x555e276c6008 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x555e276c5ff0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x555e276c5fa0 <col:124> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x555e276c6080 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e276c6040 <col:141> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x555e276c6098 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276c6060 <col:153> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |-BinaryOperator 0x555e276c6658 <line:740:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x555e276c6168 <col:3> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x555e276c6628 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x555e276c65f8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x555e276c65e0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x555e276c6188 <col:15> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276c6610 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c61a8 <col:31> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x555e276c65c0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x555e276c6590 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x555e276c63b8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x555e276c62d8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x555e276c6200 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x555e276c61e8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x555e276c61c8 <col:45> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x555e276c62b8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x555e276c6250 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x555e276c6238 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x555e276c6218 <col:64> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x555e276c62a0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x555e276c6288 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x555e276c6268 <col:83> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x555e276c6398 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x555e276c6330 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x555e276c6318 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x555e276c62f8 <col:102> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x555e276c6380 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x555e276c6368 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x555e276c6348 <col:121> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x555e276c6578 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e276c63d8 <col:138> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x555e276c6558 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x555e276c6528 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x555e276c6498 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x555e276c6450 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x555e276c6438 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x555e276c63f8 <col:151> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x555e276c6480 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x555e276c6468 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x555e276c6418 <col:169> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x555e276c64f8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x555e276c64b8 <col:186> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x555e276c6510 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x555e276c64d8 <col:198> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |-BinaryOperator 0x555e276c6b78 <line:741:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x555e276c6678 <col:3> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x555e276c6b48 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x555e276c6b08 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x555e276c6af0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x555e276c6698 <col:15> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276c6b30 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c66b8 <col:31> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x555e276c6ad0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x555e276c6aa0 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x555e276c68c8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x555e276c67e8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x555e276c6710 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x555e276c66f8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x555e276c66d8 <col:45> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x555e276c67c8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x555e276c6760 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x555e276c6748 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x555e276c6728 <col:64> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x555e276c67b0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x555e276c6798 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x555e276c6778 <col:83> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x555e276c68a8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x555e276c6840 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x555e276c6828 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x555e276c6808 <col:102> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x555e276c6890 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x555e276c6878 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x555e276c6858 <col:121> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x555e276c6a88 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e276c68e8 <col:138> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x555e276c6a68 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x555e276c6a38 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x555e276c69a8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x555e276c6960 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x555e276c6948 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x555e276c6908 <col:151> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x555e276c6990 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x555e276c6978 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x555e276c6928 <col:169> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x555e276c6a08 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x555e276c69c8 <col:186> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x555e276c6a20 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x555e276c69e8 <col:198> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |-BinaryOperator 0x555e276c7120 <line:742:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c6b98 <col:3> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c7108 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c70d8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x555e276c7090 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c7078 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c6bb8 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c70c0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c70a8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c6bd8 <col:36> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x555e276c7058 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x555e276c7028 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x555e276c6de8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x555e276c6d08 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x555e276c6c30 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x555e276c6c18 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x555e276c6bf8 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x555e276c6ce8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x555e276c6c80 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x555e276c6c68 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x555e276c6c48 <col:74> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x555e276c6cd0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x555e276c6cb8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x555e276c6c98 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x555e276c6dc8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x555e276c6d60 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x555e276c6d48 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x555e276c6d28 <col:112> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x555e276c6db0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x555e276c6d98 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x555e276c6d78 <col:131> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x555e276c7010 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555e276c6ff8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555e276c6e08 <col:148> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x555e276c6fd8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x555e276c6fa8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x555e276c6ec8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x555e276c6e80 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x555e276c6e68 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x555e276c6e28 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x555e276c6eb0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x555e276c6e98 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x555e276c6e48 <col:184> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x555e276c6f60 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x555e276c6f18 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x555e276c6ee8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x555e276c6f90 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x555e276c6f78 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x555e276c6f40 <col:212> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x555e276c76e8 <line:743:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c7140 <col:3> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c76d0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c76a0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x555e276c7658 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c7640 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c7160 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c7688 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c7670 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c7180 <col:36> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x555e276c7620 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x555e276c75f0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x555e276c7390 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x555e276c72b0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x555e276c71d8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x555e276c71c0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x555e276c71a0 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x555e276c7290 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x555e276c7228 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x555e276c7210 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x555e276c71f0 <col:74> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x555e276c7278 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x555e276c7260 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x555e276c7240 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x555e276c7370 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x555e276c7308 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x555e276c72f0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x555e276c72d0 <col:112> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x555e276c7358 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x555e276c7340 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x555e276c7320 <col:131> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x555e276c75d8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555e276c75c0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555e276c73b0 <col:148> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x555e276c75a0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x555e276c7570 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x555e276c7470 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x555e276c7428 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x555e276c7410 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x555e276c73d0 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x555e276c7458 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x555e276c7440 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x555e276c73f0 <col:184> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x555e276c7540 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x555e276c74c0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x555e276c7490 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x555e276c7558 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x555e276c7518 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x555e276c74e8 <col:219> 'int' 0
|   |-BinaryOperator 0x555e276c7cb8 <line:744:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c7708 <col:3> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c7ca0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c7c70 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x555e276c7c28 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c7c10 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c7728 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c7c58 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c7c40 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c7748 <col:36> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x555e276c7bf0 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x555e276c7bc0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x555e276c7958 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x555e276c7878 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x555e276c77a0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x555e276c7788 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x555e276c7768 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x555e276c7858 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x555e276c77f0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x555e276c77d8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x555e276c77b8 <col:74> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x555e276c7840 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x555e276c7828 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x555e276c7808 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x555e276c7938 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x555e276c78d0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x555e276c78b8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x555e276c7898 <col:112> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x555e276c7920 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x555e276c7908 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x555e276c78e8 <col:131> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x555e276c7ba8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555e276c7b90 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555e276c7978 <col:148> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x555e276c7b70 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x555e276c7b40 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x555e276c7a38 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x555e276c79f0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x555e276c79d8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x555e276c7998 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x555e276c7a20 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x555e276c7a08 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x555e276c79b8 <col:184> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x555e276c7ad0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x555e276c7a88 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x555e276c7a58 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x555e276c7b00 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x555e276c7ae8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x555e276c7ab0 <col:212> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x555e276c8280 <line:745:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c7cd8 <col:3> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c8268 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c8238 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x555e276c81f0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c81d8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c7cf8 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c8220 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c8208 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c7d18 <col:36> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x555e276c81b8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x555e276c8188 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x555e276c7f28 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x555e276c7e48 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x555e276c7d70 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x555e276c7d58 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x555e276c7d38 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x555e276c7e28 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x555e276c7dc0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x555e276c7da8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x555e276c7d88 <col:74> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x555e276c7e10 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x555e276c7df8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x555e276c7dd8 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x555e276c7f08 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x555e276c7ea0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x555e276c7e88 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x555e276c7e68 <col:112> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x555e276c7ef0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x555e276c7ed8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x555e276c7eb8 <col:131> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x555e276c8170 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555e276c8158 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555e276c7f48 <col:148> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x555e276c8138 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x555e276c8108 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x555e276c8008 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x555e276c7fc0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x555e276c7fa8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x555e276c7f68 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x555e276c7ff0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x555e276c7fd8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x555e276c7f88 <col:184> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x555e276c80d8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x555e276c8058 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x555e276c8028 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x555e276c80f0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x555e276c80b0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x555e276c8080 <col:219> 'int' 0
|   |-BinaryOperator 0x555e276c82f8 <line:746:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x555e276c82a0 <col:3> 'int' lvalue Var 0x555e276c30e8 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x555e276c82e0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c82c0 <col:25> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |-BinaryOperator 0x555e276c8428 <line:747:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x555e276c8318 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   | `-ConditionalOperator 0x555e276c83f8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x555e276c83b0 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x555e276c8398 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x555e276c8338 <col:7> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276c83c8 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c8358 <col:25> 'int' lvalue Var 0x555e276c3650 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x555e276c83e0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x555e276c8378 <col:37> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |-BinaryOperator 0x555e276c84c0 <line:748:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c8448 <col:3> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x555e276c8498 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x555e276c8468 <col:28> 'int' 0
|   |-CallExpr 0x555e276c8518 <line:749:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276c8500 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c84e0 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x555e276c8570 <line:750:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276c8558 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276c8538 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276c8620 <line:751:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c8590 <col:3> '_Bool' lvalue Var 0x555e276c3ce8 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c8608 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x555e276c85e8 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x555e276c85d0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x555e276c85b0 <col:19> 'void *(void)' Function 0x555e27669958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x555e276c86d0 <line:752:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c8640 <col:3> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c86b8 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x555e276c8698 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x555e276c8680 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x555e276c8660 <col:19> 'void *(void)' Function 0x555e27669958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x555e276c8748 <line:753:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c86f0 <col:3> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c8730 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c8710 <col:21> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x555e276c87c0 <line:754:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x555e276c8768 <col:3> 'int' lvalue Var 0x555e276c3650 'y$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x555e276c87a8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276c8788 <col:15> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |-BinaryOperator 0x555e276c8c18 <line:755:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x555e276c87e0 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   | `-ConditionalOperator 0x555e276c8be8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x555e276c89f0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x555e276c8910 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x555e276c8838 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x555e276c8820 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x555e276c8800 <col:8> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x555e276c88f0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x555e276c8888 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x555e276c8870 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x555e276c8850 <col:27> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x555e276c88d8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x555e276c88c0 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x555e276c88a0 <col:46> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x555e276c89d0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x555e276c8968 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x555e276c8950 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x555e276c8930 <col:65> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x555e276c89b8 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x555e276c89a0 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x555e276c8980 <col:84> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276c8bd0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c8a10 <col:101> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |   `-ParenExpr 0x555e276c8bb0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x555e276c8b80 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x555e276c8ad0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x555e276c8a88 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x555e276c8a70 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x555e276c8a30 <col:106> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x555e276c8ab8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x555e276c8aa0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x555e276c8a50 <col:124> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x555e276c8b50 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e276c8af0 <col:141> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x555e276c8b68 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276c8b10 <col:153> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |-BinaryOperator 0x555e276c9128 <line:756:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x555e276c8c38 <col:3> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   | `-ConditionalOperator 0x555e276c90f8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x555e276c90c8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x555e276c90b0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x555e276c8c58 <col:15> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276c90e0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c8c78 <col:31> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x555e276c9090 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x555e276c9060 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x555e276c8e88 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x555e276c8da8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x555e276c8cd0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x555e276c8cb8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x555e276c8c98 <col:45> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x555e276c8d88 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x555e276c8d20 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x555e276c8d08 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x555e276c8ce8 <col:64> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x555e276c8d70 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x555e276c8d58 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x555e276c8d38 <col:83> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x555e276c8e68 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x555e276c8e00 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x555e276c8de8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x555e276c8dc8 <col:102> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x555e276c8e50 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x555e276c8e38 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x555e276c8e18 <col:121> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x555e276c9048 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e276c8ea8 <col:138> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |       `-ParenExpr 0x555e276c9028 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x555e276c8ff8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x555e276c8f68 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x555e276c8f20 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x555e276c8f08 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x555e276c8ec8 <col:151> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x555e276c8f50 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x555e276c8f38 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x555e276c8ee8 <col:169> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x555e276c8fc8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x555e276c8f88 <col:186> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x555e276c8fe0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x555e276c8fa8 <col:198> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |-BinaryOperator 0x555e276c9638 <line:757:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x555e276c9148 <col:3> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   | `-ConditionalOperator 0x555e276c9608 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x555e276c95d8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x555e276c95c0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x555e276c9168 <col:15> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276c95f0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276c9188 <col:31> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |   `-ParenExpr 0x555e276c95a0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x555e276c9570 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x555e276c9398 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x555e276c92b8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x555e276c91e0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x555e276c91c8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x555e276c91a8 <col:45> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x555e276c9298 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x555e276c9230 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x555e276c9218 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x555e276c91f8 <col:64> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x555e276c9280 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x555e276c9268 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x555e276c9248 <col:83> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x555e276c9378 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x555e276c9310 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x555e276c92f8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x555e276c92d8 <col:102> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x555e276c9360 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x555e276c9348 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x555e276c9328 <col:121> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x555e276c9558 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e276c93b8 <col:138> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |       `-ParenExpr 0x555e276c9538 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x555e276c9508 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x555e276c9478 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x555e276c9430 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x555e276c9418 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x555e276c93d8 <col:151> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x555e276c9460 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x555e276c9448 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x555e276c93f8 <col:169> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x555e276c94d8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x555e276c9498 <col:186> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x555e276c94f0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x555e276c94b8 <col:198> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |-BinaryOperator 0x555e276c9bf0 <line:758:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c9658 <col:3> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276c9bd8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276c9ba8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x555e276c9b60 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c9b38 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c9678 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276c9b90 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276c9b78 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c9698 <col:36> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x555e276c9b18 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x555e276c9ae8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x555e276c98a8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x555e276c97c8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x555e276c96f0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x555e276c96d8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x555e276c96b8 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x555e276c97a8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x555e276c9740 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x555e276c9728 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x555e276c9708 <col:74> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x555e276c9790 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x555e276c9778 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x555e276c9758 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x555e276c9888 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x555e276c9820 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x555e276c9808 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x555e276c97e8 <col:112> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x555e276c9870 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x555e276c9858 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x555e276c9838 <col:131> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x555e276c9ad0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555e276c9ab8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555e276c98c8 <col:148> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x555e276c9a98 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x555e276c9a68 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x555e276c9988 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x555e276c9940 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x555e276c9928 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x555e276c98e8 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x555e276c9970 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x555e276c9958 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x555e276c9908 <col:184> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x555e276c9a20 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x555e276c99d8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x555e276c99a8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x555e276c9a50 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x555e276c9a38 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x555e276c9a00 <col:212> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x555e276ca1b8 <line:759:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x555e276c9c10 <col:3> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276ca1a0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276ca170 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x555e276ca128 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276ca110 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c9c30 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276ca158 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276ca140 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276c9c50 <col:36> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x555e276ca0f0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x555e276ca0c0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x555e276c9e60 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x555e276c9d80 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x555e276c9ca8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x555e276c9c90 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x555e276c9c70 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x555e276c9d60 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x555e276c9cf8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x555e276c9ce0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x555e276c9cc0 <col:74> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x555e276c9d48 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x555e276c9d30 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x555e276c9d10 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x555e276c9e40 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x555e276c9dd8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x555e276c9dc0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x555e276c9da0 <col:112> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x555e276c9e28 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x555e276c9e10 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x555e276c9df0 <col:131> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x555e276ca0a8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555e276ca090 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555e276c9e80 <col:148> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x555e276ca070 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x555e276ca040 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x555e276c9f40 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x555e276c9ef8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x555e276c9ee0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x555e276c9ea0 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x555e276c9f28 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x555e276c9f10 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x555e276c9ec0 <col:184> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x555e276ca010 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x555e276c9f90 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x555e276c9f60 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x555e276ca028 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x555e276c9fe8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x555e276c9fb8 <col:219> 'int' 0
|   |-BinaryOperator 0x555e276ca760 <line:760:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x555e276ca1d8 <col:3> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276ca748 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276ca718 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x555e276ca6d0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276ca6b8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276ca1f8 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276ca700 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276ca6e8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276ca218 <col:36> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x555e276ca698 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x555e276ca668 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x555e276ca428 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x555e276ca348 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x555e276ca270 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x555e276ca258 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x555e276ca238 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x555e276ca328 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x555e276ca2c0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x555e276ca2a8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x555e276ca288 <col:74> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x555e276ca310 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x555e276ca2f8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x555e276ca2d8 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x555e276ca408 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x555e276ca3a0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x555e276ca388 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x555e276ca368 <col:112> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x555e276ca3f0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x555e276ca3d8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x555e276ca3b8 <col:131> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x555e276ca650 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555e276ca638 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555e276ca448 <col:148> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x555e276ca618 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x555e276ca5e8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x555e276ca508 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x555e276ca4c0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x555e276ca4a8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x555e276ca468 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x555e276ca4f0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x555e276ca4d8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x555e276ca488 <col:184> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x555e276ca5a0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x555e276ca558 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x555e276ca528 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x555e276ca5d0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x555e276ca5b8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x555e276ca580 <col:212> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x555e276cad40 <line:761:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x555e276ca780 <col:3> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276cad28 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276cacf8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x555e276cacb0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276cac98 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276ca7a0 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276cace0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x555e276cacc8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x555e276ca7c0 <col:36> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x555e276cac78 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x555e276cac48 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x555e276ca9d0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x555e276ca8f0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x555e276ca818 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x555e276ca800 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x555e276ca7e0 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x555e276ca8d0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x555e276ca868 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x555e276ca850 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x555e276ca830 <col:74> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x555e276ca8b8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x555e276ca8a0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x555e276ca880 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x555e276ca9b0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x555e276ca948 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x555e276ca930 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x555e276ca910 <col:112> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x555e276ca998 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x555e276ca980 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x555e276ca960 <col:131> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x555e276cac30 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x555e276cac18 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x555e276ca9f0 <col:148> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x555e276cabf8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x555e276cabc8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x555e276caab0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x555e276caa68 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x555e276caa50 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x555e276caa10 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x555e276caa98 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x555e276caa80 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x555e276caa30 <col:184> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x555e276cab98 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x555e276cab00 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x555e276caad0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x555e276cabb0 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x555e276cab70 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x555e276cab28 <col:219> 'int' 0
|   |-BinaryOperator 0x555e276cadb8 <line:762:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x555e276cad60 <col:3> 'int' lvalue Var 0x555e276c3208 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x555e276cada0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e276cad80 <col:25> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |-BinaryOperator 0x555e276caee8 <line:763:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x555e276cadd8 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   | `-ConditionalOperator 0x555e276caeb8 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x555e276cae70 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x555e276cae58 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x555e276cadf8 <col:7> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276cae88 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276cae18 <col:25> 'int' lvalue Var 0x555e276c3650 'y$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x555e276caea0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x555e276cae38 <col:37> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |-BinaryOperator 0x555e276caf80 <line:764:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x555e276caf08 <col:3> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x555e276caf58 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x555e276caf28 <col:28> 'int' 0
|   |-CallExpr 0x555e276cafd8 <line:765:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276cafc0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276cafa0 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x555e276cb030 <line:766:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276cb018 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276caff8 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276cb318 <line:767:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x555e276cb050 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   | `-ConditionalOperator 0x555e276cb2e8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x555e276cb110 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x555e276cb0c8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x555e276cb0b0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x555e276cb070 <col:7> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x555e276cb0f8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x555e276cb0e0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x555e276cb090 <col:25> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x555e276cb2d0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276cb130 <col:42> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
|   |   `-ParenExpr 0x555e276cb2b0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x555e276cb280 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x555e276cb1f0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x555e276cb1a8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x555e276cb190 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x555e276cb150 <col:55> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x555e276cb1d8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x555e276cb1c0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x555e276cb170 <col:73> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x555e276cb250 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555e276cb210 <col:90> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x555e276cb268 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276cb230 <col:102> 'int' lvalue Var 0x555e276c3538 'y' 'int'
|   |-BinaryOperator 0x555e276cb520 <line:768:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x555e276cb338 <col:3> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276cb508 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276cb4d8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x555e276cb3f8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x555e276cb3b0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x555e276cb398 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x555e276cb358 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x555e276cb3e0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x555e276cb3c8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e276cb378 <col:38> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276cb490 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x555e276cb448 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x555e276cb418 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x555e276cb4c0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555e276cb4a8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276cb470 <col:66> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x555e276cb808 <line:769:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x555e276cb540 <col:3> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x555e276cb7f0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276cb7c0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x555e276cb6e0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x555e276cb600 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x555e276cb5b8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x555e276cb5a0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x555e276cb560 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x555e276cb5e8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x555e276cb5d0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x555e276cb580 <col:38> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x555e276cb6c0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x555e276cb678 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x555e276cb660 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x555e276cb620 <col:56> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x555e276cb6a8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x555e276cb690 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x555e276cb640 <col:74> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276cb778 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x555e276cb730 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x555e276cb700 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x555e276cb7a8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555e276cb790 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276cb758 <col:102> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x555e276cba10 <line:770:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x555e276cb828 <col:3> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276cb9f8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276cb9c8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x555e276cb8e8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x555e276cb8a0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x555e276cb888 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x555e276cb848 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x555e276cb8d0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x555e276cb8b8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x555e276cb868 <col:38> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276cb980 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x555e276cb938 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x555e276cb908 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x555e276cb9b0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555e276cb998 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276cb960 <col:66> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x555e276cbd10 <line:771:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x555e276cba30 <col:3> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x555e276cbcf8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x555e276cbcc8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x555e276cbbe8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x555e276cbaf0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x555e276cbaa8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x555e276cba90 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x555e276cba50 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x555e276cbad8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x555e276cbac0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x555e276cba70 <col:38> '_Bool' lvalue Var 0x555e276c37b8 'y$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x555e276cbbc8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x555e276cbb80 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x555e276cbb50 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x555e276cbb10 <col:56> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x555e276cbbb0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x555e276cbb98 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x555e276cbb30 <col:74> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x555e276cbc80 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x555e276cbc38 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x555e276cbc08 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x555e276cbcb0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x555e276cbc98 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x555e276cbc60 <col:102> '_Bool' lvalue Var 0x555e276c3920 'y$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x555e276cbd68 <line:772:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276cbd50 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276cbd30 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x555e276cbdc0 <line:773:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x555e276cbda8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276cbd88 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x555e276cbe78 <line:774:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x555e276cbde0 <col:3> 'int' lvalue Var 0x555e276c2fc8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x555e276cbe58 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x555e276cbe40 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555e276cbe00 <col:22> 'int' lvalue Var 0x555e276c2fc8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x555e276cbe20 <col:41> 'int' 1
|   |-CallExpr 0x555e276cbed0 <line:775:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x555e276cbeb8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x555e276cbe98 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x555e276cbf48 <line:776:3, col:36>
|     `-CallExpr 0x555e276cbf28 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x555e276cbf10 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x555e276cbef0 <col:10> 'void *(void)' Function 0x555e27669958 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x555e276cc110 prev 0x555e276c2d10 <line:778:1, line:780:1> line:778:6 fence 'void ()'
| `-CompoundStmt 0x555e276cc1b0 <line:779:1, line:780:1>
|-FunctionDecl 0x555e276cc1e0 prev 0x555e276c2dd0 <line:781:1, line:783:1> line:781:6 isync 'void ()'
| `-CompoundStmt 0x555e276cc280 <line:782:1, line:783:1>
|-FunctionDecl 0x555e276cc2b0 prev 0x555e276c2e90 <line:784:1, line:786:1> line:784:6 lwfence 'void ()'
| `-CompoundStmt 0x555e276cc350 <line:785:1, line:786:1>
`-FunctionDecl 0x555e276cc3b8 <line:787:1, line:822:1> line:787:5 main 'int ()'
  `-CompoundStmt 0x555e276d0790 <line:788:1, line:822:1>
    |-DeclStmt 0x555e276cc4d0 <line:789:3, col:18>
    | `-VarDecl 0x555e276cc468 <col:3, col:13> col:13 used t1595 'pthread_t':'unsigned long'
    |-CallExpr 0x555e276cc6d8 <line:790:3, col:54> 'int'
    | |-ImplicitCastExpr 0x555e276cc6c0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x555e276cc4e8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x555e276aa488 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x555e276cc528 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x555e276cc508 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x555e276cc468 't1595' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x555e276cc718 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x555e276cc5a0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x555e276cc578 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x555e276cc540 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x555e276cc730 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x555e276cc5c0 <col:39> 'void *(void *)' Function 0x555e276c3e78 'P0' 'void *(void *)'
    | `-ParenExpr 0x555e276cc640 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x555e276cc618 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x555e276cc5e0 <col:52> 'int' 0
    |-DeclStmt 0x555e276cc7c0 <line:791:3, col:18>
    | `-VarDecl 0x555e276cc758 <col:3, col:13> col:13 used t1596 'pthread_t':'unsigned long'
    |-CallExpr 0x555e276cc968 <line:792:3, col:54> 'int'
    | |-ImplicitCastExpr 0x555e276cc950 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x555e276cc7d8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x555e276aa488 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x555e276cc818 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x555e276cc7f8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x555e276cc758 't1596' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x555e276cc9a8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x555e276cc890 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x555e276cc868 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x555e276cc830 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x555e276cc9c0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x555e276cc8b0 <col:39> 'void *(void *)' Function 0x555e276c57a0 'P1' 'void *(void *)'
    | `-ParenExpr 0x555e276cc930 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x555e276cc908 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x555e276cc8d0 <col:52> 'int' 0
    |-CallExpr 0x555e276cca10 <line:793:3, col:27> 'void'
    | `-ImplicitCastExpr 0x555e276cc9f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x555e276cc9d8 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x555e276ccae0 <line:794:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x555e276cca30 <col:3> '_Bool' lvalue Var 0x555e276c32a0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x555e276ccac8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x555e276ccaa8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x555e276cca90 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x555e276cca50 <col:21> 'int' lvalue Var 0x555e276c2fc8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x555e276cca70 <col:41> 'int' 2
    |-CallExpr 0x555e276ccb38 <line:795:3, col:25> 'void'
    | `-ImplicitCastExpr 0x555e276ccb20 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x555e276ccb00 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x555e276ccbc8 <line:796:3, col:36> 'void'
    | |-ImplicitCastExpr 0x555e276ccbb0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x555e276ccb58 <col:3> 'void (int)' Function 0x555e27669790 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x555e276ccc08 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x555e276ccbf0 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x555e276ccb90 <col:21> '_Bool' lvalue Var 0x555e276c32a0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x555e276ccc58 <line:797:3, col:27> 'void'
    | `-ImplicitCastExpr 0x555e276ccc40 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x555e276ccc20 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x555e276ccf40 <line:798:3, col:103> 'int' '='
    | |-DeclRefExpr 0x555e276ccc78 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
    | `-ConditionalOperator 0x555e276ccf10 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x555e276ccd38 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x555e276cccf0 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x555e276cccd8 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x555e276ccc98 <col:7> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x555e276ccd20 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x555e276ccd08 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x555e276cccb8 <col:25> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x555e276ccef8 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e276ccd58 <col:42> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
    |   `-ParenExpr 0x555e276cced8 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x555e276ccea8 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x555e276cce18 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x555e276ccdd0 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x555e276ccdb8 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x555e276ccd78 <col:55> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x555e276cce00 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x555e276ccde8 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x555e276ccd98 <col:73> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x555e276cce78 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x555e276cce38 <col:90> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x555e276cce90 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x555e276cce58 <col:102> 'int' lvalue Var 0x555e276c3538 'y' 'int'
    |-BinaryOperator 0x555e276cd148 <line:799:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x555e276ccf60 <col:3> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x555e276cd130 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x555e276cd100 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x555e276cd020 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x555e276ccfd8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x555e276ccfc0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x555e276ccf80 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x555e276cd008 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x555e276ccff0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x555e276ccfa0 <col:38> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x555e276cd0b8 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x555e276cd070 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x555e276cd040 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x555e276cd0e8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x555e276cd0d0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x555e276cd098 <col:66> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x555e276cd430 <line:800:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x555e276cd168 <col:3> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x555e276cd418 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x555e276cd3e8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x555e276cd308 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x555e276cd228 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x555e276cd1e0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x555e276cd1c8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x555e276cd188 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x555e276cd210 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x555e276cd1f8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x555e276cd1a8 <col:38> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x555e276cd2e8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x555e276cd2a0 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x555e276cd288 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x555e276cd248 <col:56> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x555e276cd2d0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x555e276cd2b8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x555e276cd268 <col:74> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x555e276cd3a0 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x555e276cd358 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x555e276cd328 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x555e276cd3d0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x555e276cd3b8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x555e276cd380 <col:102> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |-BinaryOperator 0x555e276cd638 <line:801:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x555e276cd450 <col:3> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x555e276cd620 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x555e276cd5f0 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x555e276cd510 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x555e276cd4c8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x555e276cd4b0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x555e276cd470 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x555e276cd4f8 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x555e276cd4e0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x555e276cd490 <col:38> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x555e276cd5a8 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x555e276cd560 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x555e276cd530 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x555e276cd5d8 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x555e276cd5c0 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x555e276cd588 <col:66> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x555e276cd920 <line:802:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x555e276cd658 <col:3> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x555e276cd908 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x555e276cd8d8 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x555e276cd7f8 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x555e276cd718 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x555e276cd6d0 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x555e276cd6b8 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x555e276cd678 <col:20> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x555e276cd700 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x555e276cd6e8 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x555e276cd698 <col:38> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x555e276cd7d8 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x555e276cd790 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x555e276cd778 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x555e276cd738 <col:56> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x555e276cd7c0 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x555e276cd7a8 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x555e276cd758 <col:74> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x555e276cd890 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x555e276cd848 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x555e276cd818 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x555e276cd8c0 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x555e276cd8a8 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x555e276cd870 <col:102> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |-CallExpr 0x555e276cd978 <line:803:3, col:25> 'void'
    | `-ImplicitCastExpr 0x555e276cd960 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x555e276cd940 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x555e276cd9d0 <line:804:3, col:27> 'void'
    | `-ImplicitCastExpr 0x555e276cd9b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x555e276cd998 <col:3> 'void ()' Function 0x555e27669e40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x555e276cda80 <line:805:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x555e276cd9f0 <col:3> '_Bool' lvalue Var 0x555e276c3ce8 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x555e276cda68 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x555e276cda48 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x555e276cda30 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x555e276cda10 <col:19> 'void *(void)' Function 0x555e27669958 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x555e276cdb30 <line:806:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x555e276cdaa0 <col:3> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x555e276cdb18 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x555e276cdaf8 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x555e276cdae0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x555e276cdac0 <col:19> 'void *(void)' Function 0x555e27669958 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x555e276cdbb8 <line:807:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x555e276cdb50 <col:3> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x555e276cdba0 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x555e276cdb70 <col:21> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x555e276cdc30 <line:808:3, col:15> 'int' '='
    | |-DeclRefExpr 0x555e276cdbd8 <col:3> 'int' lvalue Var 0x555e276c3650 'y$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x555e276cdc18 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x555e276cdbf8 <col:15> 'int' lvalue Var 0x555e276c3538 'y' 'int'
    |-BinaryOperator 0x555e276ce068 <line:809:3, col:162> 'int' '='
    | |-DeclRefExpr 0x555e276cdc50 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
    | `-ConditionalOperator 0x555e276ce038 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x555e276cde60 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x555e276cdd80 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x555e276cdca8 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x555e276cdc90 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x555e276cdc70 <col:8> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x555e276cdd60 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x555e276cdcf8 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x555e276cdce0 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x555e276cdcc0 <col:27> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x555e276cdd48 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x555e276cdd30 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x555e276cdd10 <col:46> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x555e276cde40 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x555e276cddd8 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x555e276cddc0 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x555e276cdda0 <col:65> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x555e276cde28 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x555e276cde10 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x555e276cddf0 <col:84> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x555e276ce020 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e276cde80 <col:101> 'int' lvalue Var 0x555e276c3538 'y' 'int'
    |   `-ParenExpr 0x555e276ce000 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x555e276cdfd0 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x555e276cdf40 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x555e276cdef8 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x555e276cdee0 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x555e276cdea0 <col:106> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x555e276cdf28 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x555e276cdf10 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x555e276cdec0 <col:124> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x555e276cdfa0 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x555e276cdf60 <col:141> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x555e276cdfb8 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x555e276cdf80 <col:153> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
    |-BinaryOperator 0x555e276ce578 <line:810:3, col:208> 'int' '='
    | |-DeclRefExpr 0x555e276ce088 <col:3> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
    | `-ConditionalOperator 0x555e276ce548 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x555e276ce518 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x555e276ce500 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x555e276ce0a8 <col:15> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x555e276ce530 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e276ce0c8 <col:31> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
    |   `-ParenExpr 0x555e276ce4e0 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x555e276ce4b0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x555e276ce2d8 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x555e276ce1f8 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x555e276ce120 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x555e276ce108 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x555e276ce0e8 <col:45> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x555e276ce1d8 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x555e276ce170 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x555e276ce158 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x555e276ce138 <col:64> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x555e276ce1c0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x555e276ce1a8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x555e276ce188 <col:83> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x555e276ce2b8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x555e276ce250 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x555e276ce238 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x555e276ce218 <col:102> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x555e276ce2a0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x555e276ce288 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x555e276ce268 <col:121> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x555e276ce498 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x555e276ce2f8 <col:138> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
    |       `-ParenExpr 0x555e276ce478 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x555e276ce448 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x555e276ce3b8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x555e276ce370 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x555e276ce358 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x555e276ce318 <col:151> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x555e276ce3a0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x555e276ce388 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x555e276ce338 <col:169> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x555e276ce418 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x555e276ce3d8 <col:186> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x555e276ce430 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x555e276ce3f8 <col:198> 'int' lvalue Var 0x555e276c3b00 'y$w_buff0' 'int'
    |-BinaryOperator 0x555e276cea88 <line:811:3, col:208> 'int' '='
    | |-DeclRefExpr 0x555e276ce598 <col:3> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
    | `-ConditionalOperator 0x555e276cea58 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x555e276cea28 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x555e276cea10 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x555e276ce5b8 <col:15> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x555e276cea40 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e276ce5d8 <col:31> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
    |   `-ParenExpr 0x555e276ce9f0 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x555e276ce9c0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x555e276ce7e8 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x555e276ce708 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x555e276ce630 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x555e276ce618 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x555e276ce5f8 <col:45> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x555e276ce6e8 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x555e276ce680 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x555e276ce668 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x555e276ce648 <col:64> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x555e276ce6d0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x555e276ce6b8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x555e276ce698 <col:83> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x555e276ce7c8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x555e276ce760 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x555e276ce748 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x555e276ce728 <col:102> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x555e276ce7b0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x555e276ce798 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x555e276ce778 <col:121> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x555e276ce9a8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x555e276ce808 <col:138> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
    |       `-ParenExpr 0x555e276ce988 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x555e276ce958 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x555e276ce8c8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x555e276ce880 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x555e276ce868 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x555e276ce828 <col:151> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x555e276ce8b0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x555e276ce898 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x555e276ce848 <col:169> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x555e276ce928 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x555e276ce8e8 <col:186> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x555e276ce940 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x555e276ce908 <col:198> 'int' lvalue Var 0x555e276c3bf8 'y$w_buff1' 'int'
    |-BinaryOperator 0x555e276cf050 <line:812:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x555e276ceaa8 <col:3> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x555e276cf038 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x555e276cf008 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x555e276cefc0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e276cefa8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x555e276ceac8 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x555e276ceff0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e276cefd8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x555e276ceae8 <col:36> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x555e276cef88 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x555e276cef58 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x555e276ced18 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x555e276cec38 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x555e276ceb40 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x555e276ceb28 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x555e276ceb08 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x555e276cec18 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x555e276cebb0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x555e276ceb78 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x555e276ceb58 <col:74> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x555e276cec00 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x555e276cebe8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x555e276cebc8 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x555e276cecf8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x555e276cec90 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x555e276cec78 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x555e276cec58 <col:112> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x555e276cece0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x555e276cecc8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x555e276ceca8 <col:131> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x555e276cef40 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x555e276cef28 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x555e276ced38 <col:148> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x555e276cef08 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x555e276ceed8 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x555e276cedf8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x555e276cedb0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x555e276ced98 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x555e276ced58 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x555e276cede0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x555e276cedc8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x555e276ced78 <col:184> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x555e276cee90 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x555e276cee48 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x555e276cee18 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x555e276ceec0 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x555e276ceea8 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x555e276cee70 <col:212> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |-BinaryOperator 0x555e276cf618 <line:813:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x555e276cf070 <col:3> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x555e276cf600 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x555e276cf5d0 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x555e276cf588 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e276cf570 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x555e276cf090 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x555e276cf5b8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e276cf5a0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x555e276cf0b0 <col:36> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x555e276cf550 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x555e276cf520 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x555e276cf2c0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x555e276cf1e0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x555e276cf108 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x555e276cf0f0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x555e276cf0d0 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x555e276cf1c0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x555e276cf158 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x555e276cf140 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x555e276cf120 <col:74> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x555e276cf1a8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x555e276cf190 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x555e276cf170 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x555e276cf2a0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x555e276cf238 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x555e276cf220 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x555e276cf200 <col:112> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x555e276cf288 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x555e276cf270 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x555e276cf250 <col:131> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x555e276cf508 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x555e276cf4f0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x555e276cf2e0 <col:148> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x555e276cf4d0 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x555e276cf4a0 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x555e276cf3a0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x555e276cf358 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x555e276cf340 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x555e276cf300 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x555e276cf388 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x555e276cf370 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x555e276cf320 <col:184> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x555e276cf470 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x555e276cf3f0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x555e276cf3c0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x555e276cf488 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x555e276cf448 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x555e276cf418 <col:219> 'int' 0
    |-BinaryOperator 0x555e276cfbd8 <line:814:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x555e276cf638 <col:3> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x555e276cfbc0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x555e276cfb78 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x555e276cfb30 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e276cfb18 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x555e276cf658 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x555e276cfb60 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e276cfb48 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x555e276cf678 <col:36> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x555e276cfaf8 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x555e276cfac8 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x555e276cf888 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x555e276cf7a8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x555e276cf6d0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x555e276cf6b8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x555e276cf698 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x555e276cf788 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x555e276cf720 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x555e276cf708 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x555e276cf6e8 <col:74> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x555e276cf770 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x555e276cf758 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x555e276cf738 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x555e276cf868 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x555e276cf800 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x555e276cf7e8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x555e276cf7c8 <col:112> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x555e276cf850 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x555e276cf838 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x555e276cf818 <col:131> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x555e276cfab0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x555e276cfa98 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x555e276cf8a8 <col:148> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x555e276cfa78 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x555e276cfa48 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x555e276cf968 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x555e276cf920 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x555e276cf908 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x555e276cf8c8 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x555e276cf950 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x555e276cf938 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x555e276cf8e8 <col:184> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x555e276cfa00 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x555e276cf9b8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x555e276cf988 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x555e276cfa30 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x555e276cfa18 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x555e276cf9e0 <col:212> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x555e276d01a0 <line:815:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x555e276cfbf8 <col:3> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x555e276d0188 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x555e276d0158 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x555e276d0110 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e276d00f8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x555e276cfc18 <col:20> '_Bool' lvalue Var 0x555e276c3d60 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x555e276d0140 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x555e276d0128 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x555e276cfc38 <col:36> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x555e276d00d8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x555e276d00a8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x555e276cfe48 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x555e276cfd68 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x555e276cfc90 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x555e276cfc78 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x555e276cfc58 <col:55> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x555e276cfd48 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x555e276cfce0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x555e276cfcc8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x555e276cfca8 <col:74> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x555e276cfd30 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x555e276cfd18 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x555e276cfcf8 <col:93> '_Bool' lvalue Var 0x555e276c3c70 'y$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x555e276cfe28 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x555e276cfdc0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x555e276cfda8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x555e276cfd88 <col:112> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x555e276cfe10 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x555e276cfdf8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x555e276cfdd8 <col:131> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x555e276d0090 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x555e276d0078 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x555e276cfe68 <col:148> '_Bool' lvalue Var 0x555e276c3830 'y$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x555e276d0058 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x555e276d0028 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x555e276cff28 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x555e276cfee0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x555e276cfec8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x555e276cfe88 <col:166> '_Bool' lvalue Var 0x555e276c3b78 'y$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x555e276cff10 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x555e276cfef8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x555e276cfea8 <col:184> '_Bool' lvalue Var 0x555e276c36c8 'y$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x555e276cfff8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x555e276cff78 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x555e276cff48 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x555e276d0010 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x555e276cffd0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x555e276cffa0 <col:219> 'int' 0
    |-BinaryOperator 0x555e276d0470 <line:816:3, col:95> '_Bool' '='
    | |-DeclRefExpr 0x555e276d01c0 <col:3> '_Bool' lvalue Var 0x555e276c3318 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x555e276d0458 <col:21, col:95> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x555e276d0440 <col:21, col:95> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x555e276d0420 <col:22, col:95> 'int'
    |       `-BinaryOperator 0x555e276d0400 <col:23, col:94> 'int' '&&'
    |         |-BinaryOperator 0x555e276d0368 <col:23, col:66> 'int' '&&'
    |         | |-BinaryOperator 0x555e276d02d0 <col:23, col:38> 'int' '&&'
    |         | | |-BinaryOperator 0x555e276d0238 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x555e276d0220 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x555e276d01e0 <col:23> 'int' lvalue Var 0x555e276c3418 'x' 'int'
    |         | | | `-IntegerLiteral 0x555e276d0200 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x555e276d02b0 <col:33, col:38> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x555e276d0298 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x555e276d0258 <col:33> 'int' lvalue Var 0x555e276c3538 'y' 'int'
    |         | |   `-IntegerLiteral 0x555e276d0278 <col:38> 'int' 2
    |         | `-BinaryOperator 0x555e276d0348 <col:43, col:66> 'int' '=='
    |         |   |-ImplicitCastExpr 0x555e276d0330 <col:43> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x555e276d02f0 <col:43> 'int' lvalue Var 0x555e276c30e8 '__unbuffered_p1_EAX' 'int'
    |         |   `-IntegerLiteral 0x555e276d0310 <col:66> 'int' 1
    |         `-BinaryOperator 0x555e276d03e0 <col:71, col:94> 'int' '=='
    |           |-ImplicitCastExpr 0x555e276d03c8 <col:71> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x555e276d0388 <col:71> 'int' lvalue Var 0x555e276c3208 '__unbuffered_p1_EBX' 'int'
    |           `-IntegerLiteral 0x555e276d03a8 <col:94> 'int' 1
    |-BinaryOperator 0x555e276d05a0 <line:817:3, col:37> 'int' '='
    | |-DeclRefExpr 0x555e276d0490 <col:3> 'int' lvalue Var 0x555e276c3538 'y' 'int'
    | `-ConditionalOperator 0x555e276d0570 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x555e276d0528 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x555e276d0510 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x555e276d04b0 <col:7> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x555e276d0540 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x555e276d04d0 <col:25> 'int' lvalue Var 0x555e276c3650 'y$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x555e276d0558 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x555e276d04f0 <col:37> 'int' lvalue Var 0x555e276c3538 'y' 'int'
    |-BinaryOperator 0x555e276d0638 <line:818:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x555e276d05c0 <col:3> '_Bool' lvalue Var 0x555e276c35d0 'y$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x555e276d0610 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x555e276d05e0 <col:28> 'int' 0
    |-CallExpr 0x555e276d0690 <line:819:3, col:25> 'void'
    | `-ImplicitCastExpr 0x555e276d0678 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x555e276d0658 <col:3> 'void ()' Function 0x555e27669f00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x555e276d0708 <line:820:3, col:36> 'void'
    | |-ImplicitCastExpr 0x555e276d06f0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x555e276d06b0 <col:3> 'void (int)' Function 0x555e27669bc8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x555e276d0748 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x555e276d0730 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x555e276d06d0 <col:21> '_Bool' lvalue Var 0x555e276c3318 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x555e276d0780 <line:821:3, col:10>
      `-IntegerLiteral 0x555e276d0760 <col:10> 'int' 0
