TranslationUnitDecl 0x55cdabb96a48 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55cdabb97308 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55cdabb96fe0 '__int128'
|-TypedefDecl 0x55cdabb97378 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55cdabb97000 'unsigned __int128'
|-TypedefDecl 0x55cdabb97680 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55cdabb97450 'struct __NSConstantString_tag'
|   `-Record 0x55cdabb973d0 '__NSConstantString_tag'
|-TypedefDecl 0x55cdabb97728 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55cdabb976e0 'char *'
|   `-BuiltinType 0x55cdabb96ae0 'char'
|-TypedefDecl 0x55cdabbd6290 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55cdabb979c0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55cdabb97800 'struct __va_list_tag'
|     `-Record 0x55cdabb97780 '__va_list_tag'
|-FunctionDecl 0x55cdabbd6370 <./split_6/nested_true-unreach-call.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-VarDecl 0x55cdabbd6470 <line:7:1, col:5> col:5 used last 'int'
|-FunctionDecl 0x55cdabbd65c0 <line:8:1, line:13:1> line:8:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55cdabbd64f0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x55cdabbd6810 <col:34, line:13:1>
|   |-IfStmt 0x55cdabbd67e8 <line:9:3, line:11:3>
|   | |-UnaryOperator 0x55cdabbd66c0 <line:9:7, col:13> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x55cdabbd66a8 <col:8, col:13> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55cdabbd6688 <col:8, col:13> 'int' lvalue
|   | |     `-DeclRefExpr 0x55cdabbd6668 <col:9> 'int' lvalue ParmVar 0x55cdabbd64f0 'cond' 'int'
|   | `-CompoundStmt 0x55cdabbd67d0 <col:16, line:11:3>
|   |   `-LabelStmt 0x55cdabbd67b8 <line:10:6, col:30> 'ERROR'
|   |     `-CallExpr 0x55cdabbd6748 <col:13, col:30> 'void'
|   |       `-ImplicitCastExpr 0x55cdabbd6730 <col:13> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x55cdabbd66d8 <col:13> 'void () __attribute__((noreturn))' Function 0x55cdabbd6370 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x55cdabbd6800 <line:12:3>
|-FunctionDecl 0x55cdabbd6888 <line:15:1, line:19:1> line:15:5 used nondet 'int ()'
| `-CompoundStmt 0x55cdabbd6a08 <line:16:1, line:19:1>
|   |-DeclStmt 0x55cdabbd69a8 <line:17:2, col:7>
|   | `-VarDecl 0x55cdabbd6940 <col:2, col:6> col:6 used x 'int'
|   `-ReturnStmt 0x55cdabbd69f8 <line:18:2, col:9>
|     `-ImplicitCastExpr 0x55cdabbd69e0 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55cdabbd69c0 <col:9> 'int' lvalue Var 0x55cdabbd6940 'x' 'int'
`-FunctionDecl 0x55cdabbd6a50 <line:21:1, line:35:1> line:21:5 main 'int ()'
  `-CompoundStmt 0x55cdabbfbfd8 <col:12, line:35:1>
    |-BinaryOperator 0x55cdabbd6b98 <line:22:2, col:16> 'int' '='
    | |-DeclRefExpr 0x55cdabbd6af0 <col:2> 'int' lvalue Var 0x55cdabbd6470 'last' 'int'
    | `-CallExpr 0x55cdabbd6b78 <col:9, col:16> 'int'
    |   `-ImplicitCastExpr 0x55cdabbd6b60 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55cdabbd6b10 <col:9> 'int ()' Function 0x55cdabbd6888 'nondet' 'int ()'
    |-DeclStmt 0x55cdabbd6e60 <line:23:2, col:22>
    | |-VarDecl 0x55cdabbd6bd0 <col:2, col:8> col:6 used a 'int' cinit
    | | `-IntegerLiteral 0x55cdabbd6c38 <col:8> 'int' 0
    | |-VarDecl 0x55cdabbd6c70 <col:2, col:12> col:10 used b 'int' cinit
    | | `-IntegerLiteral 0x55cdabbd6cd8 <col:12> 'int' 0
    | |-VarDecl 0x55cdabbd6d10 <col:2, col:16> col:14 used c 'int' cinit
    | | `-IntegerLiteral 0x55cdabbd6d78 <col:16> 'int' 0
    | `-VarDecl 0x55cdabbd6db0 <col:2, col:21> col:18 used st 'int' cinit
    |   `-IntegerLiteral 0x55cdabbd6e18 <col:21> 'int' 0
    `-WhileStmt 0x55cdabbfbfb8 <line:24:2, line:34:2>
      |-IntegerLiteral 0x55cdabbd6e78 <line:24:8> 'int' 1
      `-CompoundStmt 0x55cdabbfbf80 <col:11, line:34:2>
        |-BinaryOperator 0x55cdabbd6ed8 <line:25:3, col:6> 'int' '='
        | |-DeclRefExpr 0x55cdabbd6e98 <col:3> 'int' lvalue Var 0x55cdabbd6db0 'st' 'int'
        | `-IntegerLiteral 0x55cdabbd6eb8 <col:6> 'int' 1
        |-ForStmt 0x55cdabbd7110 <line:26:3, line:27:23>
        | |-BinaryOperator 0x55cdabbd6f38 <line:26:7, col:9> 'int' '='
        | | |-DeclRefExpr 0x55cdabbd6ef8 <col:7> 'int' lvalue Var 0x55cdabbd6d10 'c' 'int'
        | | `-IntegerLiteral 0x55cdabbd6f18 <col:9> 'int' 0
        | |-<<<NULL>>>
        | |-BinaryOperator 0x55cdabbd6fb0 <col:11, col:13> 'int' '<'
        | | |-ImplicitCastExpr 0x55cdabbd6f98 <col:11> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x55cdabbd6f58 <col:11> 'int' lvalue Var 0x55cdabbd6d10 'c' 'int'
        | | `-IntegerLiteral 0x55cdabbd6f78 <col:13> 'int' 200000
        | |-UnaryOperator 0x55cdabbd6ff0 <col:20, col:21> 'int' postfix '++'
        | | `-DeclRefExpr 0x55cdabbd6fd0 <col:20> 'int' lvalue Var 0x55cdabbd6d10 'c' 'int'
        | `-IfStmt 0x55cdabbd70f8 <line:27:4, col:23>
        |   |-BinaryOperator 0x55cdabbd7078 <col:8, col:11> 'int' '=='
        |   | |-ImplicitCastExpr 0x55cdabbd7048 <col:8> 'int' <LValueToRValue>
        |   | | `-DeclRefExpr 0x55cdabbd7008 <col:8> 'int' lvalue Var 0x55cdabbd6d10 'c' 'int'
        |   | `-ImplicitCastExpr 0x55cdabbd7060 <col:11> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x55cdabbd7028 <col:11> 'int' lvalue Var 0x55cdabbd6470 'last' 'int'
        |   `-BinaryOperator 0x55cdabbd70d8 <col:18, col:23> 'int' '='
        |     |-DeclRefExpr 0x55cdabbd7098 <col:18> 'int' lvalue Var 0x55cdabbd6db0 'st' 'int'
        |     `-IntegerLiteral 0x55cdabbd70b8 <col:23> 'int' 0
        |-IfStmt 0x55cdabbfbba0 <line:28:3, line:30:22> has_else
        | |-BinaryOperator 0x55cdabbfb980 <line:28:6, col:23> 'int' '&&'
        | | |-BinaryOperator 0x55cdabbd71a0 <col:6, col:10> 'int' '=='
        | | | |-ImplicitCastExpr 0x55cdabbd7188 <col:6> 'int' <LValueToRValue>
        | | | | `-DeclRefExpr 0x55cdabbd7148 <col:6> 'int' lvalue Var 0x55cdabbd6db0 'st' 'int'
        | | | `-IntegerLiteral 0x55cdabbd7168 <col:10> 'int' 0
        | | `-BinaryOperator 0x55cdabbd7270 <col:15, col:23> 'int' '=='
        | |   |-ImplicitCastExpr 0x55cdabbd7258 <col:15> 'int' <LValueToRValue>
        | |   | `-DeclRefExpr 0x55cdabbd71c0 <col:15> 'int' lvalue Var 0x55cdabbd6d10 'c' 'int'
        | |   `-BinaryOperator 0x55cdabbd7238 <col:18, col:23> 'int' '+'
        | |     |-ImplicitCastExpr 0x55cdabbd7220 <col:18> 'int' <LValueToRValue>
        | |     | `-DeclRefExpr 0x55cdabbd71e0 <col:18> 'int' lvalue Var 0x55cdabbd6470 'last' 'int'
        | |     `-IntegerLiteral 0x55cdabbd7200 <col:23> 'int' 1
        | |-CompoundStmt 0x55cdabbfba80 <col:25, line:29:15>
        | | |-CompoundAssignOperator 0x55cdabbfb9e0 <col:4, col:7> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | | |-DeclRefExpr 0x55cdabbfb9a0 <col:4> 'int' lvalue Var 0x55cdabbd6bd0 'a' 'int'
        | | | `-IntegerLiteral 0x55cdabbfb9c0 <col:7> 'int' 3
        | | `-CompoundAssignOperator 0x55cdabbfba50 <col:10, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | |   |-DeclRefExpr 0x55cdabbfba10 <col:10> 'int' lvalue Var 0x55cdabbd6c70 'b' 'int'
        | |   `-IntegerLiteral 0x55cdabbfba30 <col:13> 'int' 3
        | `-CompoundStmt 0x55cdabbfbb80 <line:30:8, col:22>
        |   |-CompoundAssignOperator 0x55cdabbfbae0 <col:10, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        |   | |-DeclRefExpr 0x55cdabbfbaa0 <col:10> 'int' lvalue Var 0x55cdabbd6bd0 'a' 'int'
        |   | `-IntegerLiteral 0x55cdabbfbac0 <col:13> 'int' 2
        |   `-CompoundAssignOperator 0x55cdabbfbb50 <col:16, col:19> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        |     |-DeclRefExpr 0x55cdabbfbb10 <col:16> 'int' lvalue Var 0x55cdabbd6c70 'b' 'int'
        |     `-IntegerLiteral 0x55cdabbfbb30 <col:19> 'int' 2
        |-IfStmt 0x55cdabbfbda8 <line:31:3, line:32:10>
        | |-BinaryOperator 0x55cdabbfbcd0 <line:31:6, col:21> 'int' '&&'
        | | |-BinaryOperator 0x55cdabbfbc38 <col:6, col:9> 'int' '=='
        | | | |-ImplicitCastExpr 0x55cdabbfbc08 <col:6> 'int' <LValueToRValue>
        | | | | `-DeclRefExpr 0x55cdabbfbbc8 <col:6> 'int' lvalue Var 0x55cdabbd6d10 'c' 'int'
        | | | `-ImplicitCastExpr 0x55cdabbfbc20 <col:9> 'int' <LValueToRValue>
        | | |   `-DeclRefExpr 0x55cdabbfbbe8 <col:9> 'int' lvalue Var 0x55cdabbd6470 'last' 'int'
        | | `-BinaryOperator 0x55cdabbfbcb0 <col:17, col:21> 'int' '=='
        | |   |-ImplicitCastExpr 0x55cdabbfbc98 <col:17> 'int' <LValueToRValue>
        | |   | `-DeclRefExpr 0x55cdabbfbc58 <col:17> 'int' lvalue Var 0x55cdabbd6db0 'st' 'int'
        | |   `-IntegerLiteral 0x55cdabbfbc78 <col:21> 'int' 0
        | `-BinaryOperator 0x55cdabbfbd88 <line:32:4, col:10> 'int' '='
        |   |-DeclRefExpr 0x55cdabbfbcf0 <col:4> 'int' lvalue Var 0x55cdabbd6bd0 'a' 'int'
        |   `-BinaryOperator 0x55cdabbfbd68 <col:8, col:10> 'int' '+'
        |     |-ImplicitCastExpr 0x55cdabbfbd50 <col:8> 'int' <LValueToRValue>
        |     | `-DeclRefExpr 0x55cdabbfbd10 <col:8> 'int' lvalue Var 0x55cdabbd6bd0 'a' 'int'
        |     `-IntegerLiteral 0x55cdabbfbd30 <col:10> 'int' 1
        `-CallExpr 0x55cdabbfbf58 <line:33:3, col:38> 'void'
          |-ImplicitCastExpr 0x55cdabbfbf40 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x55cdabbfbdc0 <col:3> 'void (int)' Function 0x55cdabbd65c0 '__VERIFIER_assert' 'void (int)'
          `-BinaryOperator 0x55cdabbfbee8 <col:21, col:32> 'int' '&&'
            |-BinaryOperator 0x55cdabbfbe50 <col:21, col:24> 'int' '=='
            | |-ImplicitCastExpr 0x55cdabbfbe20 <col:21> 'int' <LValueToRValue>
            | | `-DeclRefExpr 0x55cdabbfbde0 <col:21> 'int' lvalue Var 0x55cdabbd6bd0 'a' 'int'
            | `-ImplicitCastExpr 0x55cdabbfbe38 <col:24> 'int' <LValueToRValue>
            |   `-DeclRefExpr 0x55cdabbfbe00 <col:24> 'int' lvalue Var 0x55cdabbd6c70 'b' 'int'
            `-BinaryOperator 0x55cdabbfbec8 <col:29, col:32> 'int' '=='
              |-ImplicitCastExpr 0x55cdabbfbeb0 <col:29> 'int' <LValueToRValue>
              | `-DeclRefExpr 0x55cdabbfbe70 <col:29> 'int' lvalue Var 0x55cdabbd6d10 'c' 'int'
              `-IntegerLiteral 0x55cdabbfbe90 <col:32> 'int' 200000
