TranslationUnitDecl 0x559d48b78df8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x559d48b796b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x559d48b79390 '__int128'
|-TypedefDecl 0x559d48b79728 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x559d48b793b0 'unsigned __int128'
|-TypedefDecl 0x559d48b79a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x559d48b79800 'struct __NSConstantString_tag'
|   `-Record 0x559d48b79780 '__NSConstantString_tag'
|-TypedefDecl 0x559d48b79ad8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x559d48b79a90 'char *'
|   `-BuiltinType 0x559d48b78e90 'char'
|-TypedefDecl 0x559d48bb88e0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x559d48b79d70 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x559d48b79bb0 'struct __va_list_tag'
|     `-Record 0x559d48b79b30 '__va_list_tag'
|-FunctionDecl 0x559d48bb89c0 <./split_4/rewnifrev_true-unreach-call.i:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x559d48bb8b90 <line:4:1, col:34> col:13 __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x559d48bb8ac0 <col:31> col:34 'int'
|-FunctionDecl 0x559d48bb8ce0 <line:5:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x559d48bb8c50 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x559d48bb8f20 <col:34, col:79>
|   `-IfStmt 0x559d48bb8f08 <col:36, col:77>
|     |-UnaryOperator 0x559d48bb8de0 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x559d48bb8dc8 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x559d48bb8da8 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x559d48bb8d88 <col:41> 'int' lvalue ParmVar 0x559d48bb8c50 'cond' 'int'
|     `-CompoundStmt 0x559d48bb8ef0 <col:48, col:77>
|       `-LabelStmt 0x559d48bb8ed8 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x559d48bb8e68 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x559d48bb8e50 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x559d48bb8df8 <col:57> 'void () __attribute__((noreturn))' Function 0x559d48bb89c0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|-FunctionDecl 0x559d48bb9008 <line:6:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-VarDecl 0x559d48bb90c0 <line:8:1, col:5> col:5 used SIZE 'int'
`-FunctionDecl 0x559d48bb9188 <line:10:1, line:33:1> line:10:5 main 'int ()'
  `-CompoundStmt 0x559d48bde508 <line:11:1, line:33:1>
    |-BinaryOperator 0x559d48bb92d8 <line:12:2, col:31> 'int' '='
    | |-DeclRefExpr 0x559d48bb9228 <col:2> 'int' lvalue Var 0x559d48bb90c0 'SIZE' 'int'
    | `-CallExpr 0x559d48bb92b8 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x559d48bb92a0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x559d48bb9248 <col:9> 'int (void)' Function 0x559d48bb9008 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x559d48bde4c0 <line:13:2, line:31:2>
    | |-BinaryOperator 0x559d48bb9350 <line:13:5, col:12> 'int' '>'
    | | |-ImplicitCastExpr 0x559d48bb9338 <col:5> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x559d48bb92f8 <col:5> 'int' lvalue Var 0x559d48bb90c0 'SIZE' 'int'
    | | `-IntegerLiteral 0x559d48bb9318 <col:12> 'int' 1
    | `-CompoundStmt 0x559d48bde490 <line:14:2, line:31:2>
    |   |-DeclStmt 0x559d48bb93f0 <line:15:3, col:8>
    |   | `-VarDecl 0x559d48bb9388 <col:3, col:7> col:7 used i 'int'
    |   |-DeclStmt 0x559d48bb9530 <line:16:3, col:14>
    |   | `-VarDecl 0x559d48bb94c8 <col:3, col:13> col:7 used a 'int [SIZE]'
    |   |-ForStmt 0x559d48bde148 <line:18:3, line:25:3>
    |   | |-BinaryOperator 0x559d48bb95e0 <line:18:8, col:15> 'int' '='
    |   | | |-DeclRefExpr 0x559d48bb9548 <col:8> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |   | | `-BinaryOperator 0x559d48bb95c0 <col:10, col:15> 'int' '-'
    |   | |   |-ImplicitCastExpr 0x559d48bb95a8 <col:10> 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x559d48bb9568 <col:10> 'int' lvalue Var 0x559d48bb90c0 'SIZE' 'int'
    |   | |   `-IntegerLiteral 0x559d48bb9588 <col:15> 'int' 1
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x559d48bb9658 <col:18, col:21> 'int' '>='
    |   | | |-ImplicitCastExpr 0x559d48bb9640 <col:18> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x559d48bb9600 <col:18> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |   | | `-IntegerLiteral 0x559d48bb9620 <col:21> 'int' 0
    |   | |-UnaryOperator 0x559d48bb9698 <col:24, col:25> 'int' postfix '--'
    |   | | `-DeclRefExpr 0x559d48bb9678 <col:24> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |   | `-CompoundStmt 0x559d48bde128 <line:19:3, line:25:3>
    |   |   |-IfStmt 0x559d48bde028 <line:20:4, line:23:4>
    |   |   | |-BinaryOperator 0x559d48bb9768 <line:20:7, col:16> 'int' '>='
    |   |   | | |-ParenExpr 0x559d48bb9728 <col:7, col:11> 'int'
    |   |   | | | `-BinaryOperator 0x559d48bb9708 <col:8, col:10> 'int' '-'
    |   |   | | |   |-ImplicitCastExpr 0x559d48bb96f0 <col:8> 'int' <LValueToRValue>
    |   |   | | |   | `-DeclRefExpr 0x559d48bb96b0 <col:8> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |   |   | | |   `-IntegerLiteral 0x559d48bb96d0 <col:10> 'int' 1
    |   |   | | `-IntegerLiteral 0x559d48bb9748 <col:16> 'int' 0
    |   |   | `-CompoundStmt 0x559d48bde010 <line:21:4, line:23:4>
    |   |   |   `-BinaryOperator 0x559d48bddff0 <line:22:5, col:16> 'int' '='
    |   |   |     |-ArraySubscriptExpr 0x559d48bb9868 <col:5, col:10> 'int' lvalue
    |   |   |     | |-ImplicitCastExpr 0x559d48bb9850 <col:5> 'int *' <ArrayToPointerDecay>
    |   |   |     | | `-DeclRefExpr 0x559d48bb9788 <col:5> 'int [SIZE]' lvalue Var 0x559d48bb94c8 'a' 'int [SIZE]'
    |   |   |     | `-BinaryOperator 0x559d48bb9800 <col:7, col:9> 'int' '-'
    |   |   |     |   |-ImplicitCastExpr 0x559d48bb97e8 <col:7> 'int' <LValueToRValue>
    |   |   |     |   | `-DeclRefExpr 0x559d48bb97a8 <col:7> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |   |   |     |   `-IntegerLiteral 0x559d48bb97c8 <col:9> 'int' 1
    |   |   |     `-BinaryOperator 0x559d48bddfd0 <col:14, col:16> 'int' '-'
    |   |   |       |-ImplicitCastExpr 0x559d48bb98c8 <col:14> 'int' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x559d48bb9888 <col:14> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |   |   |       `-IntegerLiteral 0x559d48bb98a8 <col:16> 'int' 2
    |   |   `-BinaryOperator 0x559d48bde108 <line:24:4, col:11> 'int' '='
    |   |     |-ArraySubscriptExpr 0x559d48bde0b0 <col:4, col:7> 'int' lvalue
    |   |     | |-ImplicitCastExpr 0x559d48bde080 <col:4> 'int *' <ArrayToPointerDecay>
    |   |     | | `-DeclRefExpr 0x559d48bde040 <col:4> 'int [SIZE]' lvalue Var 0x559d48bb94c8 'a' 'int [SIZE]'
    |   |     | `-ImplicitCastExpr 0x559d48bde098 <col:6> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x559d48bde060 <col:6> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |   |     `-ImplicitCastExpr 0x559d48bde0f0 <col:11> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x559d48bde0d0 <col:11> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |   `-ForStmt 0x559d48bde458 <line:27:3, line:30:3>
    |     |-BinaryOperator 0x559d48bde1c0 <line:27:7, col:11> 'int' '='
    |     | |-DeclRefExpr 0x559d48bde180 <col:7> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |     | `-IntegerLiteral 0x559d48bde1a0 <col:11> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x559d48bde250 <col:14, col:18> 'int' '<'
    |     | |-ImplicitCastExpr 0x559d48bde220 <col:14> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x559d48bde1e0 <col:14> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |     | `-ImplicitCastExpr 0x559d48bde238 <col:18> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x559d48bde200 <col:18> 'int' lvalue Var 0x559d48bb90c0 'SIZE' 'int'
    |     |-UnaryOperator 0x559d48bde290 <col:24, col:25> 'int' postfix '++'
    |     | `-DeclRefExpr 0x559d48bde270 <col:24> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |     `-CompoundStmt 0x559d48bde440 <line:28:3, line:30:3>
    |       `-CallExpr 0x559d48bde418 <line:29:4, col:33> 'void'
    |         |-ImplicitCastExpr 0x559d48bde400 <col:4> 'void (*)(int)' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x559d48bde2a8 <col:4> 'void (int)' Function 0x559d48bb8ce0 '__VERIFIER_assert' 'void (int)'
    |         `-BinaryOperator 0x559d48bde3a8 <col:23, col:31> 'int' '>='
    |           |-ImplicitCastExpr 0x559d48bde378 <col:23, col:26> 'int' <LValueToRValue>
    |           | `-ArraySubscriptExpr 0x559d48bde338 <col:23, col:26> 'int' lvalue
    |           |   |-ImplicitCastExpr 0x559d48bde308 <col:23> 'int *' <ArrayToPointerDecay>
    |           |   | `-DeclRefExpr 0x559d48bde2c8 <col:23> 'int [SIZE]' lvalue Var 0x559d48bb94c8 'a' 'int [SIZE]'
    |           |   `-ImplicitCastExpr 0x559d48bde320 <col:25> 'int' <LValueToRValue>
    |           |     `-DeclRefExpr 0x559d48bde2e8 <col:25> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    |           `-ImplicitCastExpr 0x559d48bde390 <col:31> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x559d48bde358 <col:31> 'int' lvalue Var 0x559d48bb9388 'i' 'int'
    `-ReturnStmt 0x559d48bde4f8 <line:32:2, col:9>
      `-IntegerLiteral 0x559d48bde4d8 <col:9> 'int' 1
