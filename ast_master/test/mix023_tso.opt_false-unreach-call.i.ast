TranslationUnitDecl 0x56169eccee18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x56169eccf6d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x56169eccf3b0 '__int128'
|-TypedefDecl 0x56169eccf748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x56169eccf3d0 'unsigned __int128'
|-TypedefDecl 0x56169eccfa50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x56169eccf820 'struct __NSConstantString_tag'
|   `-Record 0x56169eccf7a0 '__NSConstantString_tag'
|-TypedefDecl 0x56169eccfaf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x56169eccfab0 'char *'
|   `-BuiltinType 0x56169ecceeb0 'char'
|-TypedefDecl 0x56169ed0e650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x56169eccfd90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x56169eccfbd0 'struct __va_list_tag'
|     `-Record 0x56169eccfb50 '__va_list_tag'
|-FunctionDecl 0x56169ed0e790 <./test/mix023_tso.opt_false-unreach-call.i:1:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x56169ed0e6c0 <col:31> col:34 'int'
|-FunctionDecl 0x56169ed0e958 <line:2:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x56169ed0ea80 <line:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x56169ed0ebc8 <line:4:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x56169ed0eb38 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x56169ed0edf8 <col:40, col:99>
|   |-IfStmt 0x56169ed0edc8 <col:42, col:88>
|   | |-UnaryOperator 0x56169ed0eca8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x56169ed0ec90 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56169ed0ec70 <col:47> 'int' lvalue ParmVar 0x56169ed0eb38 'expression' 'int'
|   | `-CompoundStmt 0x56169ed0edb0 <col:59, col:88>
|   |   `-LabelStmt 0x56169ed0ed98 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x56169ed0ed28 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x56169ed0ed10 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x56169ed0ecc0 <col:68> 'void () __attribute__((noreturn))' Function 0x56169ed0ea80 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x56169ed0ede0 <col:89>
|   `-ReturnStmt 0x56169ed0ede8 <col:91>
|-FunctionDecl 0x56169ed0ee40 <line:5:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x56169ed0ef00 <line:6:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x56169ed0f280 <line:8:1, line:10:76> line:8:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56169ed0efb8 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x56169ed0f038 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x56169ed0f0b8 <line:9:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x56169ed0f138 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56169ed0f340 <line:10:22>
|-FunctionDecl 0x56169ed35390 <line:11:1, line:13:76> line:11:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56169ed0f3b0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x56169ed0f430 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x56169ed0f4b0 <line:12:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x56169ed0f530 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x56169ed35450 <line:13:22>
|-FunctionDecl 0x56169ed35700 <line:14:1, line:15:76> line:14:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56169ed354c0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x56169ed35540 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x56169ed355c0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x56169ed357b8 <line:15:22>
|-TypedefDecl 0x56169ed35828 <line:17:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x56169eccef70 'unsigned char'
|-TypedefDecl 0x56169ed35898 <line:18:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x56169eccef90 'unsigned short'
|-TypedefDecl 0x56169ed35908 <line:19:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-TypedefDecl 0x56169ed35978 <line:20:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed359e8 <line:21:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x56169ecceed0 'signed char'
|-TypedefDecl 0x56169ed35a58 <line:22:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x56169eccef70 'unsigned char'
|-TypedefDecl 0x56169ed35ac8 <line:23:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x56169ecceef0 'short'
|-TypedefDecl 0x56169ed35b38 <line:24:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x56169eccef90 'unsigned short'
|-TypedefDecl 0x56169ed35ba8 <line:25:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x56169eccef10 'int'
|-TypedefDecl 0x56169ed35c18 <line:26:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-TypedefDecl 0x56169ed35c88 <line:27:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed35cf8 <line:28:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed35d68 <line:29:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed35dd8 <line:30:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed35e48 <line:31:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed35eb8 <line:32:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-TypedefDecl 0x56169ed35f28 <line:33:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-TypedefDecl 0x56169ed35f98 <line:34:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36008 <line:35:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36078 <line:36:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-TypedefDecl 0x56169ed360e8 <line:37:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36158 <line:38:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed361c8 <line:39:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36238 <line:40:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x56169eccef10 'int'
|-RecordDecl 0x56169ed36290 <line:41:9, col:32> col:9 struct definition
| `-FieldDecl 0x56169ed36408 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x56169ed364c0 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x56169ed36460 'struct __fsid_t' sugar
|   `-RecordType 0x56169ed36310 '__fsid_t'
|     `-Record 0x56169ed36290 ''
|-TypedefDecl 0x56169ed36548 <line:42:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed365b8 <line:43:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36628 <line:44:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36698 <line:45:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-TypedefDecl 0x56169ed36708 <line:46:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36778 <line:47:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-TypedefDecl 0x56169ed367e8 <line:48:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36858 <line:49:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x56169eccef10 'int'
|-TypedefDecl 0x56169ed368c8 <line:50:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x56169eccef10 'int'
|-TypedefDecl 0x56169ed36938 <line:51:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x56169eccef10 'int'
|-TypedefDecl 0x56169ed369a8 <line:52:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x56169eccf630 'void *'
|   `-BuiltinType 0x56169eccee70 'void'
|-TypedefDecl 0x56169ed36a18 <line:53:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36a88 <line:54:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36af8 <line:55:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36b68 <line:56:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36bd8 <line:57:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36c48 <line:58:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36cb8 <line:59:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36d28 <line:60:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36d98 <line:61:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36e08 <line:62:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed36e78 <line:63:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed36f08 <line:64:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x56169ed36ed0 '__off64_t' sugar
|   |-Typedef 0x56169ed361c8 '__off64_t'
|   `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed37000 <line:65:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x56169ed36fc0 '__quad_t *'
|   `-TypedefType 0x56169ed36f60 '__quad_t' sugar
|     |-Typedef 0x56169ed35d68 '__quad_t'
|     `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed37070 <line:66:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x56169eccfab0 'char *'
|   `-BuiltinType 0x56169ecceeb0 'char'
|-TypedefDecl 0x56169ed370e0 <line:67:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed37150 <line:68:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-FunctionDecl 0x56169ed37298 <line:69:1, line:73:1> line:70:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x56169ed371c0 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x56169ed385e8 <line:71:1, line:73:1>
|   `-ReturnStmt 0x56169ed385d8 <line:72:3, col:34>
|     `-CallExpr 0x56169ed38598 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x56169ed38580 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56169ed38510 <col:10> '<builtin fn type>' Function 0x56169ed38380 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x56169ed385c0 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56169ed38530 <col:29> 'unsigned int' lvalue ParmVar 0x56169ed371c0 '__bsx' 'unsigned int'
|-FunctionDecl 0x56169ed38380 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x56169ed38420 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x56169ed38490 <col:10> Implicit
| `-ConstAttr 0x56169ed384e8 <col:10> Implicit
|-FunctionDecl 0x56169ed38740 <line:74:1, line:78:1> line:75:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x56169ed38638 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x56169ed38a58 <line:76:1, line:78:1>
|   `-ReturnStmt 0x56169ed38a48 <line:77:3, col:34>
|     `-CallExpr 0x56169ed38a08 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x56169ed389f0 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x56169ed38978 <col:10> '<builtin fn type>' Function 0x56169ed387e8 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x56169ed38a30 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x56169ed38998 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x56169ed38638 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x56169ed387e8 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x56169ed38888 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x56169ed388f8 <col:10> Implicit
| `-ConstAttr 0x56169ed38950 <col:10> Implicit
|-TypedefDecl 0x56169ed38a88 <line:79:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-TypedefDecl 0x56169ed38b18 <line:81:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x56169ed38ae0 '__time_t' sugar
|   |-Typedef 0x56169ed36708 '__time_t'
|   `-BuiltinType 0x56169eccef30 'long'
|-RecordDecl 0x56169ed38b70 <line:84:1, line:88:3> line:84:8 struct timespec definition
| |-FieldDecl 0x56169ed38c28 <line:86:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x56169ed38cb8 <line:87:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x56169ed38d48 <line:89:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x56169ed38d10 '__pid_t' sugar
|   |-Typedef 0x56169ed36238 '__pid_t'
|   `-BuiltinType 0x56169eccef10 'int'
|-RecordDecl 0x56169ed38da0 <line:90:1, line:93:3> line:90:8 struct sched_param definition
| `-FieldDecl 0x56169ed38e60 <line:92:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x56169ed38eb0 <line:96:1, line:99:3> line:96:8 struct __sched_param definition
| `-FieldDecl 0x56169ed38f70 <line:98:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x56169ed38fd8 <line:100:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-RecordDecl 0x56169ed39030 <line:101:9, line:104:1> line:101:9 struct definition
| `-FieldDecl 0x56169ed392c0 <line:103:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x56169ed3a3a0 <line:101:1, line:104:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x56169ed39310 'struct cpu_set_t' sugar
|   `-RecordType 0x56169ed390b0 'cpu_set_t'
|     `-Record 0x56169ed39030 ''
|-FunctionDecl 0x56169ed3a678 <line:106:1, line:107:42> line:106:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x56169ed3a448 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56169ed3a550 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x56169ed3a728 <line:107:19>
|-FunctionDecl 0x56169ed3a900 <line:108:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x56169ed3a790 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x56169ed3a9a8 <col:69>
|-FunctionDecl 0x56169ed3ab20 <line:109:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x56169ed3aa10 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x56169ed3abc8 <col:64>
|-FunctionDecl 0x56169ed3ae88 <line:112:1, line:113:45> line:112:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x56169ed3ac30 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56169ed3ad68 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x56169ed3af38 <line:113:22>
|-FunctionDecl 0x56169ed3b1b8 <line:114:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x56169ed3afa0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56169ed3b098 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x56169ed3b268 <col:88>
|-FunctionDecl 0x56169ed3b588 <line:115:1, line:116:85> line:115:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x56169ed3b2d0 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56169ed3b3b0 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x56169ed3b440 <line:116:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x56169ed3b640 <col:62>
|-FunctionDecl 0x56169ed3b7b8 <line:117:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x56169ed3b6a8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x56169ed3b860 <col:63>
|-FunctionDecl 0x56169ed3b988 <line:118:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x56169ed3ba28 <col:47>
|-FunctionDecl 0x56169ed3bb30 <line:119:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x56169ed3ba98 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x56169ed3bbd8 <col:69>
|-FunctionDecl 0x56169ed3bce0 <line:120:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x56169ed3bc48 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x56169ed3bd88 <col:69>
|-FunctionDecl 0x56169ed3c048 <line:121:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56169ed3bdf0 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x56169ed3bf28 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x56169ed3c0f8 <col:88>
|-TypedefDecl 0x56169ed3c188 <line:125:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x56169ed3c150 '__clock_t' sugar
|   |-Typedef 0x56169ed36548 '__clock_t'
|   `-BuiltinType 0x56169eccef30 'long'
|-TypedefDecl 0x56169ed3c218 <line:128:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x56169ed3c1e0 '__clockid_t' sugar
|   |-Typedef 0x56169ed36938 '__clockid_t'
|   `-BuiltinType 0x56169eccef10 'int'
|-TypedefDecl 0x56169ed3c2a8 <line:129:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x56169ed3c270 '__timer_t' sugar
|   |-Typedef 0x56169ed369a8 '__timer_t'
|   `-PointerType 0x56169eccf630 'void *'
|     `-BuiltinType 0x56169eccee70 'void'
|-RecordDecl 0x56169ed3c300 <line:131:1, line:144:1> line:131:8 struct tm definition
| |-FieldDecl 0x56169ed3c3d8 <line:133:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x56169ed3c440 <line:134:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x56169ed3c4a8 <line:135:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x56169ed3c510 <line:136:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x56169ed3c578 <line:137:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x56169ed3c5e0 <line:138:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x56169ed3c648 <line:139:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x56169ed3c6b0 <line:140:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x56169ed3c718 <line:141:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x56169ed3c780 <line:142:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x56169ed3c7e8 <line:143:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x56169ed3c838 <line:147:1, line:151:3> line:147:8 struct itimerspec definition
| |-FieldDecl 0x56169ed3c908 <line:149:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x56169ed3c978 <line:150:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x56169ed3ca20 <line:152:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x56169ed3cbf0 <line:154:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x56169ed3cc90 <col:45>
|-FunctionDecl 0x56169ed3ce70 <line:155:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x56169ed3cd60 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x56169ed3cf18 <col:54>
|-FunctionDecl 0x56169ed3d118 <line:156:1, line:157:73> line:156:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x56169ed3cf80 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x56169ed3cff8 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x56169ed3d1c8 <line:157:22>
| `-ConstAttr 0x56169ed3d220 <col:63>
|-FunctionDecl 0x56169ed3e050 <line:158:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56169ed3d318 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x56169ed3e0f8 <col:56>
|-FunctionDecl 0x56169ed3e4a0 <line:159:1, line:161:77> line:159:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x56169ed3e168 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x56169ed3e1e0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56169ed3e260 <line:160:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x56169ed3e358 <line:161:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x56169ed3e560 <col:54>
|-RecordDecl 0x56169ed3e5b8 <line:163:9, line:170:1> line:163:16 struct __locale_struct definition
| |-RecordDecl 0x56169ed3e668 parent 0x56169eccee18 <line:165:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x56169ed3e8c8 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x56169ed3e968 <line:166:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x56169ed3e9d0 <line:167:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x56169ed3ea38 <line:168:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x56169ed3eb28 <line:169:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x56169ed3ec48 <line:163:1, line:170:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x56169ed3ebf0 'struct __locale_struct *'
|   `-ElaboratedType 0x56169ed3eb80 'struct __locale_struct' sugar
|     `-RecordType 0x56169ed3e640 'struct __locale_struct'
|       `-Record 0x56169ed3e5b8 '__locale_struct'
|-TypedefDecl 0x56169ed3ecf8 <line:171:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x56169ed3ecc0 '__locale_t' sugar
|   |-Typedef 0x56169ed3ec48 '__locale_t'
|   `-PointerType 0x56169ed3ebf0 'struct __locale_struct *'
|     `-ElaboratedType 0x56169ed3eb80 'struct __locale_struct' sugar
|       `-RecordType 0x56169ed3e640 'struct __locale_struct'
|         `-Record 0x56169ed3e5b8 '__locale_struct'
|-FunctionDecl 0x56169ed40110 <line:172:1, line:175:63> line:172:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x56169ed3ed68 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x56169ed3ede0 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x56169ed3ee60 <line:173:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x56169ed3eef0 <line:174:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x56169ed3ef68 <line:175:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x56169ed401d8 <col:40>
|-FunctionDecl 0x56169ed403c8 <line:177:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x56169ed402a0 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x56169ed40470 <col:66>
|-FunctionDecl 0x56169ed40580 <line:178:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x56169ed404d8 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x56169ed40628 <col:69>
|-FunctionDecl 0x56169ed40858 <line:180:1, line:181:75> line:180:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x56169ed40690 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56169ed40720 <line:181:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x56169ed40908 <col:52>
|-FunctionDecl 0x56169ed40ab0 <line:182:1, line:183:78> line:182:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x56169ed40970 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56169ed40a00 <line:183:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x56169ed40b60 <col:55>
|-FunctionDecl 0x56169ed40cf8 <line:185:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x56169ed40be0 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x56169ed40da0 <col:62>
|-FunctionDecl 0x56169ed40f18 <line:186:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x56169ed40e08 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x56169ed40fc0 <col:60>
|-FunctionDecl 0x56169ed412b8 <line:188:1, line:189:67> line:188:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x56169ed41118 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x56169ed41198 <line:189:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x56169ed41368 <col:44>
|-FunctionDecl 0x56169ed41578 <line:190:1, line:191:72> line:190:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x56169ed413d0 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x56169ed41450 <line:191:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x56169ed41628 <col:49>
|-VarDecl 0x56169ed41728 <line:192:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x56169ed417a8 <line:193:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x56169ed41828 <line:194:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x56169ed418f0 <line:195:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x56169ed41a20 <line:196:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x56169ed41ac0 <col:42>
|-VarDecl 0x56169ed41b30 <line:197:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x56169ed41bb0 <line:198:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x56169ed41d38 <line:199:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x56169ed41c28 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x56169ed41de0 <col:57>
|-FunctionDecl 0x56169ed41ef0 <line:200:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56169ed41e60 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x56169ed41f98 <col:56>
|-FunctionDecl 0x56169ed420d0 <line:201:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x56169ed42018 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x56169ed42178 <col:59>
|-FunctionDecl 0x56169ed42280 <line:202:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x56169ed421e8 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x56169ed42328 <col:48>
| `-ConstAttr 0x56169ed42380 <col:89>
|-FunctionDecl 0x56169ed425e8 <line:203:1, line:204:37> line:203:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x56169ed42438 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x56169ed424c8 <line:204:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x56169ed42848 <line:205:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56169ed426d8 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56169ed42768 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x56169ed428f8 <col:88>
|-FunctionDecl 0x56169ed42a90 <line:206:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x56169ed42960 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56169ed429f0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x56169ed42b40 <col:88>
|-FunctionDecl 0x56169ed42d58 <line:207:1, line:208:45> line:207:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x56169ed42ba8 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56169ed42c38 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x56169ed42e08 <line:208:22>
|-FunctionDecl 0x56169ed43178 <line:209:1, line:211:30> line:209:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x56169ed42e70 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56169ed42ef0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x56169ed42f80 <line:210:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x56169ed43010 <line:211:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x56169ed43478 <line:212:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x56169ed43278 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x56169ed43350 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x56169ed43528 <col:85>
|-FunctionDecl 0x56169ed43918 <line:213:1, line:215:75> line:213:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x56169ed43590 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x56169ed436c8 <line:214:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x56169ed437d0 <line:215:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x56169ed439d0 <col:52>
|-FunctionDecl 0x56169ed43b48 <line:216:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x56169ed43a38 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56169ed43bf0 <col:61>
|-FunctionDecl 0x56169ed440f0 <line:217:1, line:219:85> line:217:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x56169ed43c58 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56169ed43cd8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x56169ed43e08 <line:218:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x56169ed43ef8 <line:219:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x56169ed441b0 <col:62>
|-FunctionDecl 0x56169ed443c8 <line:220:1, line:221:45> line:220:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x56169ed44218 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x56169ed442a8 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x56169ed44478 <line:221:22>
|-FunctionDecl 0x56169ed44578 <line:222:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x56169ed444e0 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x56169ed44620 <col:65>
|-TypedefDecl 0x56169ed44690 <line:224:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x56169eccefd0 'unsigned long'
|-RecordDecl 0x56169ed446e8 <line:225:1, line:229:1> line:225:7 union pthread_attr_t definition
| |-FieldDecl 0x56169ed44830 <line:227:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56169ed44898 <line:228:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56169ed44948 <line:230:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x56169ed448f0 'union pthread_attr_t' sugar
|   `-RecordType 0x56169ed44770 'union pthread_attr_t'
|     `-Record 0x56169ed446e8 'pthread_attr_t'
|-RecordDecl 0x56169ed449a0 <line:231:9, line:235:1> line:231:16 struct __pthread_internal_list definition
| |-FieldDecl 0x56169ed44b18 <line:233:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x56169ed44b90 <line:234:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x56169ed44c40 <line:231:1, line:235:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x56169ed44be0 'struct __pthread_internal_list' sugar
|   `-RecordType 0x56169ed44a20 'struct __pthread_internal_list'
|     `-Record 0x56169ed449a0 '__pthread_internal_list'
|-RecordDecl 0x56169ed44cb0 <line:236:9, line:250:1> line:236:9 union definition
| |-RecordDecl 0x56169ed44d58 parent 0x56169eccee18 <line:238:3, line:247:3> line:238:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x56169ed44e30 <line:240:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56169ed44e98 <line:241:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x56169ed44f00 <line:242:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x56169ed44f68 <line:243:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x56169ed44fd0 <line:244:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x56169ed45038 <line:245:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x56169ed49110 <line:246:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x56169ed491c0 <line:238:3, line:247:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x56169ed492b0 <line:248:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x56169ed49318 <line:249:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56169ed494a0 <line:236:1, line:250:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x56169ed49440 'union pthread_mutex_t' sugar
|   `-RecordType 0x56169ed44d30 'pthread_mutex_t'
|     `-Record 0x56169ed44cb0 ''
|-RecordDecl 0x56169ed49510 <line:251:9, line:255:1> line:251:9 union definition
| |-FieldDecl 0x56169ed49650 <line:253:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56169ed496b8 <line:254:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56169ed49770 <line:251:1, line:255:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x56169ed49710 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x56169ed49590 'pthread_mutexattr_t'
|     `-Record 0x56169ed49510 ''
|-RecordDecl 0x56169ed497e0 <line:256:9, line:271:1> line:256:9 union definition
| |-RecordDecl 0x56169ed49888 <line:258:3, line:268:3> line:258:3 struct definition
| | |-FieldDecl 0x56169ed49950 <line:260:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56169ed499b8 <line:261:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x56169ed49a20 <line:262:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x56169ed49a88 <line:263:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x56169ed49af0 <line:264:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x56169ed49b58 <line:265:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x56169ed49bc0 <line:266:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x56169ed49c28 <line:267:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x56169ed49ce0 <line:258:3, line:268:5> col:5 __data 'struct (anonymous struct at ./test/mix023_tso.opt_false-unreach-call.i:258:3)':'struct pthread_cond_t::(anonymous at ./test/mix023_tso.opt_false-unreach-call.i:258:3)'
| |-FieldDecl 0x56169ed49dd0 <line:269:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x56169ed49e38 <line:270:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x56169ed49f70 <line:256:1, line:271:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x56169ed49f10 'union pthread_cond_t' sugar
|   `-RecordType 0x56169ed49860 'pthread_cond_t'
|     `-Record 0x56169ed497e0 ''
|-RecordDecl 0x56169ed49fe0 <line:272:9, line:276:1> line:272:9 union definition
| |-FieldDecl 0x56169ed4b130 <line:274:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56169ed4b198 <line:275:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56169ed4b250 <line:272:1, line:276:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x56169ed4b1f0 'union pthread_condattr_t' sugar
|   `-RecordType 0x56169ed4a060 'pthread_condattr_t'
|     `-Record 0x56169ed49fe0 ''
|-TypedefDecl 0x56169ed4b2d8 <line:277:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x56169eccefb0 'unsigned int'
|-TypedefDecl 0x56169ed4b348 <line:278:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x56169eccef10 'int'
|-RecordDecl 0x56169ed4b3a0 <line:279:9, line:297:1> line:279:9 union definition
| |-RecordDecl 0x56169ed4b448 <line:281:3, line:294:3> line:281:3 struct definition
| | |-FieldDecl 0x56169ed4b510 <line:283:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x56169ed4b578 <line:284:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x56169ed4b5e0 <line:285:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x56169ed4b648 <line:286:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x56169ed4b6b0 <line:287:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x56169ed4b718 <line:288:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x56169ed4b780 <line:289:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x56169ed4b7e8 <line:290:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x56169ed4b850 <line:291:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x56169ed4b8b8 <line:292:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x56169ed4b920 <line:293:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x56169ed4b9d0 <line:281:3, line:294:5> col:5 __data 'struct (anonymous struct at ./test/mix023_tso.opt_false-unreach-call.i:281:3)':'struct pthread_rwlock_t::(anonymous at ./test/mix023_tso.opt_false-unreach-call.i:281:3)'
| |-FieldDecl 0x56169ed4ba78 <line:295:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x56169ed4bae0 <line:296:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56169ed4bc30 <line:279:1, line:297:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x56169ed4bbd0 'union pthread_rwlock_t' sugar
|   `-RecordType 0x56169ed4b420 'pthread_rwlock_t'
|     `-Record 0x56169ed4b3a0 ''
|-RecordDecl 0x56169ed4bca0 <line:298:9, line:302:1> line:298:9 union definition
| |-FieldDecl 0x56169ed4bde0 <line:300:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x56169ed4be48 <line:301:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56169ed4bf00 <line:298:1, line:302:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x56169ed4bea0 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x56169ed4bd20 'pthread_rwlockattr_t'
|     `-Record 0x56169ed4bca0 ''
|-TypedefDecl 0x56169ed4bf88 <line:303:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x56169eccef14 'volatile int' volatile
|   `-BuiltinType 0x56169eccef10 'int'
|-RecordDecl 0x56169ed4bfe0 <line:304:9, line:308:1> line:304:9 union definition
| |-FieldDecl 0x56169ed4d140 <line:306:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x56169ed4d1a8 <line:307:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x56169ed4d260 <line:304:1, line:308:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x56169ed4d200 'union pthread_barrier_t' sugar
|   `-RecordType 0x56169ed4c060 'pthread_barrier_t'
|     `-Record 0x56169ed4bfe0 ''
|-RecordDecl 0x56169ed4d2d0 <line:309:9, line:313:1> line:309:9 union definition
| |-FieldDecl 0x56169ed4d3d0 <line:311:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x56169ed4d438 <line:312:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x56169ed4d4f0 <line:309:1, line:313:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x56169ed4d490 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x56169ed4d350 'pthread_barrierattr_t'
|     `-Record 0x56169ed4d2d0 ''
|-TypedefDecl 0x56169ed4d608 <line:314:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x56169ed4d5a0 'long [8]' 8 
|   `-BuiltinType 0x56169eccef30 'long'
|-EnumDecl 0x56169ed4d660 <line:315:1, line:319:1> line:315:1
| |-EnumConstantDecl 0x56169ed4d728 <line:317:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x56169ed4d778 <line:318:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x56169ed4d7c8 <line:320:1, line:331:1> line:320:1
| |-EnumConstantDecl 0x56169ed4d898 <line:322:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x56169ed4d8e8 <line:323:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x56169ed4d938 <line:324:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x56169ed4d988 <line:325:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x56169ed4da10 <line:327:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x56169ed4d9f8 <col:26> 'int'
| |   `-DeclRefExpr 0x56169ed4d9d8 <col:26> 'int' EnumConstant 0x56169ed4d898 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x56169ed4da98 <line:328:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x56169ed4da80 <col:29> 'int'
| |   `-DeclRefExpr 0x56169ed4da60 <col:29> 'int' EnumConstant 0x56169ed4d8e8 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x56169ed4db20 <line:329:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x56169ed4db08 <col:30> 'int'
| |   `-DeclRefExpr 0x56169ed4dae8 <col:30> 'int' EnumConstant 0x56169ed4d938 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x56169ed4dba8 <line:330:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x56169ed4db90 <col:27> 'int'
|     `-DeclRefExpr 0x56169ed4db70 <col:27> 'int' EnumConstant 0x56169ed4da10 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x56169ed4dbf8 <line:332:1, line:338:1> line:332:1
| |-EnumConstantDecl 0x56169ed4dcc8 <line:334:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x56169ed4dd50 <line:335:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x56169ed4dd38 <col:30> 'int'
| |   `-DeclRefExpr 0x56169ed4dd18 <col:30> 'int' EnumConstant 0x56169ed4dcc8 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x56169ed4dda0 <line:336:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x56169ed4de28 <line:337:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x56169ed4de10 <col:29> 'int'
|     `-DeclRefExpr 0x56169ed4ddf0 <col:29> 'int' EnumConstant 0x56169ed4dda0 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x56169ed4de78 <line:339:1, line:344:1> line:339:1
| |-EnumConstantDecl 0x56169ed4df48 <line:341:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x56169ed4df98 <line:342:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x56169ed4dfe8 <line:343:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x56169ed4e038 <line:345:1, line:351:1> line:345:1
| |-EnumConstantDecl 0x56169ed4e150 <line:347:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x56169ed4e1a0 <line:348:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x56169ed4e1f0 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x56169ed4e278 <line:350:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x56169ed4e260 <col:31> 'int'
|     `-DeclRefExpr 0x56169ed4e240 <col:31> 'int' EnumConstant 0x56169ed4e150 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x56169ed4e2c8 <line:352:1, line:356:1> line:352:1
| |-EnumConstantDecl 0x56169ed4e398 <line:354:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x56169ed4e3e8 <line:355:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x56169ed4e438 <line:357:1, line:361:1> line:357:1
| |-EnumConstantDecl 0x56169ed4e508 <line:359:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x56169ed4e558 <line:360:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x56169ed4e5a8 <line:362:1, line:366:1> line:362:1
| |-EnumConstantDecl 0x56169ed4e678 <line:364:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x56169ed4e6c8 <line:365:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x56169ed4e718 <line:367:1, line:373:1> line:367:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x56169ed4e958 <line:369:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x56169ed4e9c0 <line:370:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x56169ed4ea28 <line:371:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x56169ed4eb48 <line:372:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x56169ed4eb98 <line:374:1, line:378:1> line:374:1
| |-EnumConstantDecl 0x56169ed4ec68 <line:376:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x56169ed4ecb8 <line:377:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x56169ed4ed08 <line:379:1, line:383:1> line:379:1
| |-EnumConstantDecl 0x56169ed4edd8 <line:381:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x56169ed4ee28 <line:382:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x56169ed4f488 <line:385:1, line:388:96> line:385:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x56169ed4ef20 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x56169ed4f030 <line:386:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed4f270 <line:387:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x56169ed4f2f0 <line:388:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x56169ed4f548 <col:47>
| |-NonNullAttr 0x56169ed4f5a0 <col:77, col:94> 1 3
| `-CallbackAttr 0x56169ed4f5d8 <line:385:12> Implicit 2 3
|-FunctionDecl 0x56169ed4f700 <line:389:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x56169ed4f630 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x56169ed4f958 <line:390:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x56169ed4f7b8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x56169ed4f838 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x56169ed4fb28 <line:391:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x56169ed4fa18 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x56169ed4fbd0 <col:60>
|-FunctionDecl 0x56169ed4fd20 <line:392:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x56169ed4fdc0 <col:54>
| `-ConstAttr 0x56169ed4fe18 <col:95>
|-FunctionDecl 0x56169ed4ffe8 <line:393:1, line:394:70> line:393:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x56169ed4fe50 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56169ed4fec8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x56169ed50098 <line:394:19>
| `-ConstAttr 0x56169ed500f0 <col:60>
|-FunctionDecl 0x56169ed51b08 <line:395:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x56169ed519d0 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x56169ed51bb0 <col:71>
| `-NonNullAttr 0x56169ed51c08 <col:112, col:126> 1
|-FunctionDecl 0x56169ed51d10 <line:396:1, line:397:79> line:396:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x56169ed51c58 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x56169ed51db8 <line:397:22>
| `-NonNullAttr 0x56169ed51e10 <col:63, col:77> 1
|-FunctionDecl 0x56169ed52038 <line:398:1, line:400:82> line:398:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x56169ed51e58 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x56169ed51ed8 <line:399:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x56169ed520e8 <line:400:22>
| `-NonNullAttr 0x56169ed52140 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed52348 <line:401:1, line:403:79> line:401:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56169ed52188 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56169ed52208 <line:402:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x56169ed523f8 <line:403:22>
| `-NonNullAttr 0x56169ed52450 <col:63, col:77> 1
|-FunctionDecl 0x56169ed526a8 <line:404:1, line:406:82> line:404:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x56169ed52498 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x56169ed52540 <line:405:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x56169ed52758 <line:406:22>
| `-NonNullAttr 0x56169ed527b0 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed539e8 <line:407:1, line:409:79> line:407:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x56169ed527f8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56169ed52870 <line:408:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56169ed53a98 <line:409:22>
| `-NonNullAttr 0x56169ed53af0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed53d28 <line:410:1, line:412:82> line:410:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56169ed53b38 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed53bc8 <line:411:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x56169ed53dd8 <line:412:22>
| `-NonNullAttr 0x56169ed53e30 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed54068 <line:413:1, line:415:97> line:413:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56169ed53e78 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed53f08 <line:414:12, line:415:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x56169ed54118 <col:37>
| `-NonNullAttr 0x56169ed54170 <col:78, col:95> 1 2
|-FunctionDecl 0x56169ed54358 <line:416:1, line:418:82> line:416:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed541b8 <col:41, line:417:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed54238 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x56169ed54408 <line:418:22>
| `-NonNullAttr 0x56169ed54460 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed545e8 <line:419:1, line:420:79> line:419:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56169ed544a8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56169ed54528 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x56169ed54698 <line:420:22>
| `-NonNullAttr 0x56169ed546f0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed54898 <line:421:1, line:423:82> line:421:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed54738 <col:42, line:422:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed547b8 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x56169ed54948 <line:423:22>
| `-NonNullAttr 0x56169ed549c0 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed54b48 <line:424:1, line:426:79> line:424:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56169ed54a08 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56169ed54a88 <line:425:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x56169ed54bf8 <line:426:22>
| `-NonNullAttr 0x56169ed54c50 <col:63, col:77> 1
|-FunctionDecl 0x56169ed54df8 <line:427:1, line:429:82> line:427:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed54c98 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed54d18 <line:428:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x56169ed54ea8 <line:429:22>
| `-NonNullAttr 0x56169ed54f00 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed55088 <line:430:1, line:431:79> line:430:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x56169ed54f48 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56169ed54fc8 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x56169ed55138 <line:431:22>
| `-NonNullAttr 0x56169ed55190 <col:63, col:77> 1
|-FunctionDecl 0x56169ed553b8 <line:432:1, line:434:115> line:432:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x56169ed551d8 <col:39, line:433:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed55258 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x56169ed55468 <line:434:22>
| |-NonNullAttr 0x56169ed554c0 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x56169ed554f8 <col:100> "" ""
|-FunctionDecl 0x56169ed55708 <line:435:1, line:437:112> line:435:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x56169ed55548 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56169ed555c8 <line:436:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x56169ed557b8 <line:437:22>
| |-NonNullAttr 0x56169ed55810 <col:63, col:77> 1
| `-DeprecatedAttr 0x56169ed55848 <col:97> "" ""
|-FunctionDecl 0x56169ed55a48 <line:438:1, line:440:82> line:438:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x56169ed55898 <col:39, line:439:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed55910 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x56169ed55af8 <line:440:22>
| `-NonNullAttr 0x56169ed55b50 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed55cd0 <line:441:1, line:443:79> line:441:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x56169ed55b98 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56169ed55c10 <line:442:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56169ed55d80 <line:443:22>
| `-NonNullAttr 0x56169ed55dd8 <col:63, col:77> 1
|-FunctionDecl 0x56169ed560c8 <line:444:1, line:447:85> line:444:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x56169ed55e28 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x56169ed55ea8 <line:445:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x56169ed55f20 <line:446:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x56169ed56180 <line:447:22>
| `-NonNullAttr 0x56169ed561d8 <col:63, col:83> 1 2 3
|-FunctionDecl 0x56169ed56488 <line:448:1, line:449:100> line:448:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x56169ed56230 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x56169ed562b0 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x56169ed56328 <line:449:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x56169ed56540 <col:43>
| `-NonNullAttr 0x56169ed56598 <col:84, col:98> 1
|-FunctionDecl 0x56169ed56858 <line:450:1, line:452:79> line:450:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x56169ed565e8 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56169ed56668 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x56169ed566f8 <line:451:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x56169ed56910 <line:452:22>
| `-NonNullAttr 0x56169ed56968 <col:63, col:77> 3
|-FunctionDecl 0x56169ed56c78 <line:453:1, line:456:82> line:453:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x56169ed569e0 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56169ed56a60 <line:454:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x56169ed56af0 <line:455:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x56169ed56d30 <line:456:22>
| `-NonNullAttr 0x56169ed56d88 <col:63, col:80> 2 3
|-FunctionDecl 0x56169ed56f78 <line:457:1, line:458:45> line:457:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x56169ed56dd8 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56169ed56e58 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x56169ed57028 <line:458:22>
|-FunctionDecl 0x56169ed573f8 <line:459:1, line:460:71> line:459:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x56169ed570f0 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x56169ed57290 <line:460:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x56169ed574a8 <col:52, col:69> 1 2
|-FunctionDecl 0x56169ed57650 <line:461:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x56169ed57530 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x56169ed575b0 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x56169ed57838 <line:462:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x56169ed57718 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x56169ed57798 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x56169ed579f0 <line:463:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x56169ed578f8 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x56169ed57b30 <line:464:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x56169ed57bd0 <line:465:9, line:473:1> line:465:9 struct definition
| |-RecordDecl 0x56169ed57c78 <line:467:3, line:471:3> line:467:3 struct definition
| | |-FieldDecl 0x56169ed57d68 <line:469:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x56169ed57dd0 <line:470:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x56169ed57fa0 <line:467:3, line:471:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./test/mix023_tso.opt_false-unreach-call.i:467:3) [1]'
| `-FieldDecl 0x56169ed58098 <line:472:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x56169ed58150 <line:465:1, line:473:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x56169ed580f0 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x56169ed57c50 '__pthread_unwind_buf_t'
| |   `-Record 0x56169ed57bd0 ''
| `-AlignedAttr 0x56169ed581a8 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x56169ed58220 <line:474:1, line:480:1> line:474:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x56169ed58380 <line:476:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x56169ed583e8 <line:477:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x56169ed58450 <line:478:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x56169ed584b8 <line:479:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x56169ed586c0 <line:481:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x56169ed585b0 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x56169ed58808 <line:483:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x56169ed58778 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x56169ed58a00 <line:485:1, line:487:31> line:485:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x56169ed588c0 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x56169ed58aa8 <line:487:22>
|-RecordDecl 0x56169ed58b00 <line:489:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x56169ed58e18 <line:490:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x56169ed58c78 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x56169ed58cf8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x56169ed58ec8 <col:86>
| `-ReturnsTwiceAttr 0x56169ed58f20 <col:12> Implicit
|-FunctionDecl 0x56169ed59248 <line:491:1, line:493:79> line:491:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56169ed58ff0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x56169ed59100 <line:492:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x56169ed592f8 <line:493:22>
| `-NonNullAttr 0x56169ed59350 <col:63, col:77> 1
|-FunctionDecl 0x56169ed594c8 <line:494:1, line:495:79> line:494:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56169ed59398 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56169ed59570 <line:495:22>
| `-NonNullAttr 0x56169ed595c8 <col:63, col:77> 1
|-FunctionDecl 0x56169ed596d0 <line:496:1, line:497:68> line:496:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56169ed59618 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56169ed59778 <line:497:22>
| `-NonNullAttr 0x56169ed597d0 <col:52, col:66> 1
|-FunctionDecl 0x56169ed598d0 <line:498:1, line:499:68> line:498:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56169ed59818 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56169ed59978 <line:499:22>
| `-NonNullAttr 0x56169ed599d0 <col:52, col:66> 1
|-FunctionDecl 0x56169ed5ac28 <line:500:1, line:502:85> line:500:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56169ed5aa38 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56169ed5aac8 <line:501:9, line:502:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56169ed5acd8 <col:36>
| `-NonNullAttr 0x56169ed5ad30 <col:66, col:83> 1 2
|-FunctionDecl 0x56169ed5ae30 <line:503:1, line:504:68> line:503:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56169ed5ad78 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56169ed5aed8 <line:504:22>
| `-NonNullAttr 0x56169ed5af30 <col:52, col:66> 1
|-FunctionDecl 0x56169ed5b1c8 <line:505:1, line:508:82> line:505:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed5afe0 <col:42, line:506:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56169ed5b060 <line:507:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x56169ed5b278 <line:508:22>
| `-NonNullAttr 0x56169ed5b2d0 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed5b598 <line:509:1, line:512:82> line:509:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x56169ed5b318 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56169ed5b398 <line:510:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x56169ed5b418 <line:511:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x56169ed5b650 <line:512:22>
| `-NonNullAttr 0x56169ed5b6a8 <col:63, col:80> 1 3
|-FunctionDecl 0x56169ed5b7b0 <line:513:1, line:514:79> line:513:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x56169ed5b6f8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x56169ed5b858 <line:514:22>
| `-NonNullAttr 0x56169ed5b8b0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5bad8 <line:515:1, line:516:79> line:515:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56169ed5b960 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x56169ed5bb80 <line:516:22>
| `-NonNullAttr 0x56169ed5bbd8 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5bce0 <line:517:1, line:518:79> line:517:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x56169ed5bc28 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x56169ed5bd88 <line:518:22>
| `-NonNullAttr 0x56169ed5bde0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5c008 <line:519:1, line:522:82> line:519:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed5be28 <col:42, line:520:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56169ed5bea8 <line:521:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x56169ed5c0b8 <line:522:22>
| `-NonNullAttr 0x56169ed5c110 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed5c318 <line:523:1, line:525:79> line:523:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed5c158 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56169ed5c1d8 <line:524:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x56169ed5c3c8 <line:525:22>
| `-NonNullAttr 0x56169ed5c420 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5c5c8 <line:526:1, line:528:82> line:526:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed5c468 <col:39, line:527:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56169ed5c4e8 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x56169ed5c678 <line:528:22>
| `-NonNullAttr 0x56169ed5c6d0 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed5c858 <line:529:1, line:530:79> line:529:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed5c718 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56169ed5c798 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x56169ed5c908 <line:530:22>
| `-NonNullAttr 0x56169ed5c960 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5cb20 <line:531:1, line:534:82> line:531:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed5c9a8 <col:43, line:532:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56169ed5ca40 <line:533:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x56169ed5cbd0 <line:534:22>
| `-NonNullAttr 0x56169ed5cc28 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed5cdb8 <line:535:1, line:537:79> line:535:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed5cc78 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56169ed5ccf8 <line:536:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x56169ed5ce68 <line:537:22>
| `-NonNullAttr 0x56169ed5cec0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5d068 <line:538:1, line:541:82> line:538:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed5cf08 <col:46, line:539:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x56169ed5cf88 <line:540:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x56169ed5d118 <line:541:22>
| `-NonNullAttr 0x56169ed5d170 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed5d2f8 <line:542:1, line:544:79> line:542:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed5d1b8 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56169ed5d238 <line:543:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x56169ed5d3a8 <line:544:22>
| `-NonNullAttr 0x56169ed5d400 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5d5e8 <line:545:1, line:547:82> line:545:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x56169ed5d448 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x56169ed5d4c8 <line:546:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x56169ed5d698 <line:547:22>
| `-NonNullAttr 0x56169ed5d6f0 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed5d878 <line:548:1, line:550:79> line:548:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed5d738 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x56169ed5d7b8 <line:549:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x56169ed5d928 <line:550:22>
| `-NonNullAttr 0x56169ed5d980 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5ecf8 <line:551:1, line:553:86> line:551:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x56169ed5eaa0 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56169ed5ebb0 <line:552:5, line:553:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x56169ed5eda8 <col:29>
| `-NonNullAttr 0x56169ed5ee00 <col:70, col:84> 1
|-FunctionDecl 0x56169ed5ef78 <line:554:1, line:555:79> line:554:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56169ed5ee48 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56169ed5f020 <line:555:22>
| `-NonNullAttr 0x56169ed5f078 <col:63, col:77> 1
|-FunctionDecl 0x56169ed5f180 <line:556:1, line:557:68> line:556:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56169ed5f0c8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56169ed5f228 <line:557:22>
| `-NonNullAttr 0x56169ed5f280 <col:52, col:66> 1
|-FunctionDecl 0x56169ed5f380 <line:558:1, line:559:65> line:558:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56169ed5f2c8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56169ed5f428 <line:559:19>
| `-NonNullAttr 0x56169ed5f480 <col:49, col:63> 1
|-FunctionDecl 0x56169ed5f6b8 <line:560:1, line:562:88> line:560:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56169ed5f4c8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56169ed5f558 <line:561:12, line:562:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56169ed5f768 <col:39>
| `-NonNullAttr 0x56169ed5f7c0 <col:69, col:86> 1 2
|-FunctionDecl 0x56169ed5f8c0 <line:563:1, line:564:68> line:563:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56169ed5f808 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56169ed5f968 <line:564:22>
| `-NonNullAttr 0x56169ed5f9c0 <col:52, col:66> 1
|-FunctionDecl 0x56169ed5fb28 <line:565:1, line:566:68> line:565:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56169ed5fa70 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56169ed5fbd0 <line:566:22>
| `-NonNullAttr 0x56169ed5fc28 <col:52, col:66> 1
|-FunctionDecl 0x56169ed5fde8 <line:567:1, line:569:88> line:567:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56169ed5fc78 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x56169ed5fd08 <line:568:12, line:569:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x56169ed5fe98 <col:39>
| `-NonNullAttr 0x56169ed5fef0 <col:69, col:86> 1 2
|-FunctionDecl 0x56169ed5fff0 <line:570:1, line:571:68> line:570:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x56169ed5ff38 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x56169ed60098 <line:571:22>
| `-NonNullAttr 0x56169ed600f0 <col:52, col:66> 1
|-FunctionDecl 0x56169ed602d8 <line:572:1, line:573:79> line:572:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x56169ed601a0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x56169ed60380 <line:573:22>
| `-NonNullAttr 0x56169ed603d8 <col:63, col:77> 1
|-FunctionDecl 0x56169ed604e0 <line:574:1, line:575:79> line:574:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x56169ed60428 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x56169ed60588 <line:575:22>
| `-NonNullAttr 0x56169ed605e0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed60808 <line:576:1, line:579:82> line:576:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed60628 <col:43, line:577:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x56169ed606a8 <line:578:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x56169ed608b8 <line:579:22>
| `-NonNullAttr 0x56169ed60910 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed60b38 <line:580:1, line:582:79> line:580:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed60958 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x56169ed609d8 <line:581:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x56169ed60be8 <line:582:22>
| `-NonNullAttr 0x56169ed60c40 <col:63, col:77> 1
|-FunctionDecl 0x56169ed60de8 <line:583:1, line:586:82> line:583:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed60c88 <col:43, line:584:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x56169ed60d08 <line:585:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x56169ed60e98 <line:586:22>
| `-NonNullAttr 0x56169ed60ef0 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed61078 <line:587:1, line:588:93> line:587:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed60f38 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x56169ed60fb8 <line:588:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x56169ed61128 <col:36>
| `-NonNullAttr 0x56169ed61180 <col:77, col:91> 1
|-FunctionDecl 0x56169ed614b8 <line:589:1, line:591:79> line:589:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x56169ed61260 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56169ed61370 <line:590:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x56169ed61568 <line:591:22>
| `-NonNullAttr 0x56169ed615c0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed61738 <line:592:1, line:593:79> line:592:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56169ed61608 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56169ed617e0 <line:593:22>
| `-NonNullAttr 0x56169ed61838 <col:63, col:77> 1
|-FunctionDecl 0x56169ed61940 <line:594:1, line:595:68> line:594:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56169ed61888 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56169ed619e8 <line:595:22>
| `-NonNullAttr 0x56169ed61a40 <col:52, col:66> 1
|-FunctionDecl 0x56169ed61b58 <line:596:1, line:597:68> line:596:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x56169ed61aa0 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x56169ed61c00 <line:597:22>
| `-NonNullAttr 0x56169ed61c58 <col:52, col:66> 1
|-FunctionDecl 0x56169ed61e88 <line:598:1, line:600:41> line:598:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x56169ed61ca8 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56169ed61d20 <line:599:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x56169ed61f38 <line:600:22, col:39> 1 2
|-FunctionDecl 0x56169ed62268 <line:601:1, line:604:44> line:601:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x56169ed61fb8 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x56169ed62030 <line:602:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x56169ed620c0 <line:603:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x56169ed62320 <line:604:22, col:42> 1 2 3
|-FunctionDecl 0x56169ed62538 <line:605:1, line:606:79> line:605:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x56169ed62400 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x56169ed625e0 <line:606:22>
| `-NonNullAttr 0x56169ed62638 <col:63, col:77> 1
|-FunctionDecl 0x56169ed62740 <line:607:1, line:608:79> line:607:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x56169ed62688 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x56169ed627e8 <line:608:22>
| `-NonNullAttr 0x56169ed62840 <col:63, col:77> 1
|-FunctionDecl 0x56169ed62aa0 <line:609:1, line:612:82> line:609:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed62888 <col:41, line:610:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x56169ed62908 <line:611:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x56169ed62b50 <line:612:22>
| `-NonNullAttr 0x56169ed62ba8 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed62db8 <line:613:1, line:614:94> line:613:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed62bf8 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x56169ed62c78 <line:614:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x56169ed62e68 <col:37>
| `-NonNullAttr 0x56169ed62ec0 <col:78, col:92> 1
|-FunctionDecl 0x56169ed630d8 <line:615:1, line:618:82> line:615:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x56169ed62f08 <col:39, line:616:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x56169ed62fb0 <line:617:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x56169ed63188 <line:618:22>
| `-NonNullAttr 0x56169ed631e0 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed633a8 <line:619:1, line:621:79> line:619:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x56169ed63228 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x56169ed632a0 <line:620:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x56169ed63458 <line:621:22>
| `-NonNullAttr 0x56169ed634b0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed63758 <line:622:1, line:623:79> line:622:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x56169ed63590 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x56169ed63610 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x56169ed63808 <line:623:22>
| `-NonNullAttr 0x56169ed63860 <col:63, col:77> 1
|-FunctionDecl 0x56169ed639d8 <line:624:1, line:625:79> line:624:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56169ed638a8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56169ed63ab0 <line:625:22>
| `-NonNullAttr 0x56169ed63b08 <col:63, col:77> 1
|-FunctionDecl 0x56169ed63c10 <line:626:1, line:627:68> line:626:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56169ed63b58 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56169ed63cb8 <line:627:22>
| `-NonNullAttr 0x56169ed63d10 <col:52, col:66> 1
|-FunctionDecl 0x56169ed63e10 <line:628:1, line:629:68> line:628:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56169ed63d58 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56169ed63eb8 <line:629:22>
| `-NonNullAttr 0x56169ed63f10 <col:52, col:66> 1
|-FunctionDecl 0x56169ed64010 <line:630:1, line:631:68> line:630:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x56169ed63f58 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x56169ed640b8 <line:631:22>
| `-NonNullAttr 0x56169ed64110 <col:52, col:66> 1
|-FunctionDecl 0x56169ed644e8 <line:632:1, line:635:79> line:632:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x56169ed641f0 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x56169ed64300 <line:633:6, line:634:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x56169ed64380 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x56169ed645a0 <line:635:22>
| `-NonNullAttr 0x56169ed645f8 <col:63, col:77> 1
|-FunctionDecl 0x56169ed64778 <line:636:1, line:637:79> line:636:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x56169ed64648 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x56169ed64820 <line:637:22>
| `-NonNullAttr 0x56169ed64878 <col:63, col:77> 1
|-FunctionDecl 0x56169ed64980 <line:638:1, line:639:68> line:638:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x56169ed648c8 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x56169ed64a28 <line:639:22>
| `-NonNullAttr 0x56169ed64a80 <col:52, col:66> 1
|-FunctionDecl 0x56169ed65c88 <line:640:1, line:641:79> line:640:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x56169ed65b50 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x56169ed65d30 <line:641:22>
| `-NonNullAttr 0x56169ed65d88 <col:63, col:77> 1
|-FunctionDecl 0x56169ed65e90 <line:642:1, line:643:79> line:642:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x56169ed65dd8 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x56169ed65f38 <line:643:22>
| `-NonNullAttr 0x56169ed65f90 <col:63, col:77> 1
|-FunctionDecl 0x56169ed661b8 <line:644:1, line:647:82> line:644:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x56169ed65fd8 <col:44, line:645:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x56169ed66058 <line:646:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x56169ed66268 <line:647:22>
| `-NonNullAttr 0x56169ed662c0 <col:63, col:80> 1 2
|-FunctionDecl 0x56169ed664c8 <line:648:1, line:650:79> line:648:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x56169ed66308 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x56169ed66388 <line:649:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x56169ed66578 <line:650:22>
| `-NonNullAttr 0x56169ed665d0 <col:63, col:77> 1
|-FunctionDecl 0x56169ed66918 <line:651:1, line:653:79> line:651:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x56169ed666b0 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x56169ed667d0 <line:652:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x56169ed669c8 <line:653:22>
| `-NonNullAttr 0x56169ed66a20 <col:63, col:77> 1
|-FunctionDecl 0x56169ed66b88 <line:654:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x56169ed66a68 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x56169ed66c30 <col:69>
|-FunctionDecl 0x56169ed66da8 <line:655:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x56169ed66c98 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x56169ed66e50 <col:72>
|-FunctionDecl 0x56169ed67088 <line:656:1, line:657:67> line:656:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x56169ed66eb8 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x56169ed66f68 <line:657:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x56169ed67138 <col:44>
|-FunctionDecl 0x56169ed67358 <line:658:1, line:660:79> line:658:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x56169ed671a0 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x56169ed67218 <line:659:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x56169ed67408 <line:660:22>
| `-NonNullAttr 0x56169ed67460 <col:63, col:77> 2
|-FunctionDecl 0x56169ed678a8 <line:661:1, line:663:70> line:661:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x56169ed67540 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x56169ed67650 <line:662:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x56169ed67760 <line:663:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x56169ed67960 <col:47>
|-FunctionDecl 0x56169ed67af0 <line:665:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x56169ed679d0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56169ed67c48 <line:666:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x56169ed67bb0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56169ed67da0 <line:667:1, col:20> col:8 used P2 'void *(void *)'
| `-ParmVarDecl 0x56169ed67d08 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56169ed67ef8 <line:668:1, col:20> col:8 used P3 'void *(void *)'
| `-ParmVarDecl 0x56169ed67e60 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x56169ed67fc0 <line:669:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x56169ed68080 <line:670:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x56169ed68140 <line:671:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x56169ed681f8 <line:672:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x56169ed68278 prev 0x56169ed681f8 <line:673:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x56169ed682e0 <col:24> 'int' 0
|-VarDecl 0x56169ed68318 <line:674:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x56169ed68398 prev 0x56169ed68318 <line:675:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x56169ed68400 <col:27> 'int' 0
|-VarDecl 0x56169ed68438 <line:676:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x56169ed684b8 prev 0x56169ed68438 <line:677:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x56169ed68520 <col:27> 'int' 0
|-VarDecl 0x56169ed68558 <line:678:1, col:5> col:5 used __unbuffered_p3_EAX 'int'
|-VarDecl 0x56169ed685d8 prev 0x56169ed68558 <line:679:1, col:27> col:5 used __unbuffered_p3_EAX 'int' cinit
| `-IntegerLiteral 0x56169ed68640 <col:27> 'int' 0
|-VarDecl 0x56169ed68678 <line:680:1, col:5> col:5 used __unbuffered_p3_EBX 'int'
|-VarDecl 0x56169ed686f8 prev 0x56169ed68678 <line:681:1, col:27> col:5 used __unbuffered_p3_EBX 'int' cinit
| `-IntegerLiteral 0x56169ed68760 <col:27> 'int' 0
|-VarDecl 0x56169ed68798 <line:682:1, col:5> col:5 used a 'int'
|-VarDecl 0x56169ed68818 prev 0x56169ed68798 <line:683:1, col:9> col:5 used a 'int' cinit
| `-IntegerLiteral 0x56169ed68880 <col:9> 'int' 0
|-VarDecl 0x56169ed688b0 <line:684:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x56169ed68928 <line:685:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x56169ed689a8 <line:686:1, col:5> col:5 used x 'int'
|-VarDecl 0x56169ed68a28 prev 0x56169ed689a8 <line:687:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x56169ed68a90 <col:9> 'int' 0
|-VarDecl 0x56169ed68b00 <line:688:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x56169ed68b80 <line:689:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x56169ed68bf8 <line:690:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x56169ed68c70 <line:691:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x56169ed68ce8 <line:692:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x56169ed68d60 <line:693:1, col:7> col:7 used x$r_buff0_thd3 '_Bool'
|-VarDecl 0x56169ed68dd8 <line:694:1, col:7> col:7 used x$r_buff0_thd4 '_Bool'
|-VarDecl 0x56169ed68e50 <line:695:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x56169ed68ec8 <line:696:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x56169ed68f40 <line:697:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x56169ed68fb8 <line:698:1, col:7> col:7 used x$r_buff1_thd3 '_Bool'
|-VarDecl 0x56169ed69030 <line:699:1, col:7> col:7 used x$r_buff1_thd4 '_Bool'
|-VarDecl 0x56169ed690a8 <line:700:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x56169ed69128 <line:701:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x56169ed691a8 <line:702:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x56169ed69220 <line:703:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x56169ed692a0 <line:704:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x56169ed69318 <line:705:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x56169ed69398 <line:706:1, col:5> col:5 used y 'int'
|-VarDecl 0x56169ed69418 prev 0x56169ed69398 <line:707:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x56169ed69480 <col:9> 'int' 0
|-VarDecl 0x56169ed694b8 <line:708:1, col:5> col:5 used z 'int'
|-VarDecl 0x56169ed69538 prev 0x56169ed694b8 <line:709:1, col:9> col:5 used z 'int' cinit
| `-IntegerLiteral 0x56169ed695a0 <col:9> 'int' 0
|-VarDecl 0x56169ed695d0 <line:710:1, col:7> col:7 used z$flush_delayed '_Bool'
|-VarDecl 0x56169ed69650 <line:711:1, col:5> col:5 used z$mem_tmp 'int'
|-VarDecl 0x56169ed696c8 <line:712:1, col:7> col:7 used z$r_buff0_thd0 '_Bool'
|-VarDecl 0x56169ed69740 <line:713:1, col:7> col:7 used z$r_buff0_thd1 '_Bool'
|-VarDecl 0x56169ed697b8 <line:714:1, col:7> col:7 used z$r_buff0_thd2 '_Bool'
|-VarDecl 0x56169ed69830 <line:715:1, col:7> col:7 used z$r_buff0_thd3 '_Bool'
|-VarDecl 0x56169ed698a8 <line:716:1, col:7> col:7 used z$r_buff0_thd4 '_Bool'
|-VarDecl 0x56169ed69920 <line:717:1, col:7> col:7 used z$r_buff1_thd0 '_Bool'
|-VarDecl 0x56169ed69998 <line:718:1, col:7> col:7 used z$r_buff1_thd1 '_Bool'
|-VarDecl 0x56169ed69a10 <line:719:1, col:7> col:7 used z$r_buff1_thd2 '_Bool'
|-VarDecl 0x56169ed69a88 <line:720:1, col:7> col:7 used z$r_buff1_thd3 '_Bool'
|-VarDecl 0x56169ed69b10 <line:721:1, col:7> col:7 used z$r_buff1_thd4 '_Bool'
|-VarDecl 0x56169ed69b88 <line:722:1, col:7> col:7 z$read_delayed '_Bool'
|-VarDecl 0x56169ed69c08 <line:723:1, col:6> col:6 z$read_delayed_var 'int *'
|-VarDecl 0x56169ed69c88 <line:724:1, col:5> col:5 used z$w_buff0 'int'
|-VarDecl 0x56169ed69d00 <line:725:1, col:7> col:7 used z$w_buff0_used '_Bool'
|-VarDecl 0x56169ed69d80 <line:726:1, col:5> col:5 used z$w_buff1 'int'
|-VarDecl 0x56169ed69df8 <line:727:1, col:7> col:7 used z$w_buff1_used '_Bool'
|-VarDecl 0x56169ed69e70 <line:728:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x56169ed69ee8 <line:729:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x56169ed6a000 prev 0x56169ed67af0 <line:730:1, line:749:1> line:730:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x56169ed69f68 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56169ed6c298 <line:731:1, line:749:1>
|   |-CallExpr 0x56169ed6a118 <line:732:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed6a100 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6a0a8 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed6a178 <line:733:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56169ed6a138 <col:3> 'int' lvalue Var 0x56169ed68818 'a' 'int'
|   | `-IntegerLiteral 0x56169ed6a158 <col:7> 'int' 1
|   |-CallExpr 0x56169ed6a1d0 <line:734:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed6a1b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6a198 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed6a228 <line:735:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed6a210 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6a1f0 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed6a288 <line:736:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56169ed6a248 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   | `-IntegerLiteral 0x56169ed6a268 <col:7> 'int' 1
|   |-CallExpr 0x56169ed6a2e0 <line:737:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed6a2c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6a2a8 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed6a338 <line:738:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed6a320 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6a300 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed6a620 <line:739:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56169ed6a358 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   | `-ConditionalOperator 0x56169ed6a5f0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56169ed6a418 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56169ed6a3d0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56169ed6a3b8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56169ed6a378 <col:7> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56169ed6a400 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56169ed6a3e8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56169ed6a398 <col:25> '_Bool' lvalue Var 0x56169ed68c70 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed6a5d8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed6a438 <col:42> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56169ed6a5b8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56169ed6a588 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56169ed6a4f8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56169ed6a4b0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56169ed6a498 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56169ed6a458 <col:55> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56169ed6a4e0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56169ed6a4c8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56169ed6a478 <col:73> '_Bool' lvalue Var 0x56169ed68ec8 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed6a558 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed6a518 <col:90> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56169ed6a570 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6a538 <col:102> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   |-BinaryOperator 0x56169ed6a828 <line:740:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6a640 <col:3> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6a810 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6a7e0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed6a700 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed6a6b8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed6a6a0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed6a660 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed6a6e8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed6a6d0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed6a680 <col:38> '_Bool' lvalue Var 0x56169ed68c70 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6a798 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed6a750 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed6a720 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed6a7c8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed6a7b0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6a778 <col:66> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed6bb30 <line:741:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6a848 <col:3> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6aaf8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6aac8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed6a9e8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed6a908 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed6a8c0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed6a8a8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed6a868 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed6a8f0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed6a8d8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed6a888 <col:38> '_Bool' lvalue Var 0x56169ed68c70 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x56169ed6a9c8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed6a980 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed6a968 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed6a928 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed6a9b0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed6a998 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed6a948 <col:74> '_Bool' lvalue Var 0x56169ed68ec8 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6aa80 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed6aa38 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed6aa08 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed6aab0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed6aa98 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6aa60 <col:102> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56169ed6bd38 <line:742:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6bb50 <col:3> '_Bool' lvalue Var 0x56169ed68c70 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6bd20 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6bcf0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed6bc10 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed6bbc8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed6bbb0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed6bb70 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed6bbf8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed6bbe0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed6bb90 <col:38> '_Bool' lvalue Var 0x56169ed68c70 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6bca8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed6bc60 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed6bc30 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed6bcd8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed6bcc0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6bc88 <col:66> '_Bool' lvalue Var 0x56169ed68c70 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56169ed6c020 <line:743:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6bd58 <col:3> '_Bool' lvalue Var 0x56169ed68ec8 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6c008 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6bfd8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed6bef8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed6be18 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed6bdd0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed6bdb8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed6bd78 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed6be00 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed6bde8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed6bd98 <col:38> '_Bool' lvalue Var 0x56169ed68c70 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x56169ed6bed8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed6be90 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed6be78 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed6be38 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed6bec0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed6bea8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed6be58 <col:74> '_Bool' lvalue Var 0x56169ed68ec8 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6bf90 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed6bf48 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed6bf18 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed6bfc0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed6bfa8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6bf70 <col:102> '_Bool' lvalue Var 0x56169ed68ec8 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x56169ed6c078 <line:744:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed6c060 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6c040 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed6c0d0 <line:745:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed6c0b8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6c098 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed6c188 <line:746:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56169ed6c0f0 <col:3> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56169ed6c168 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56169ed6c150 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed6c110 <col:22> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56169ed6c130 <col:41> 'int' 1
|   |-CallExpr 0x56169ed6c1e0 <line:747:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed6c1c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6c1a8 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56169ed6c288 <line:748:3, col:36>
|     `-CallExpr 0x56169ed6c268 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56169ed6c250 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56169ed6c200 <col:10> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56169ed6c3e0 prev 0x56169ed67c48 <line:750:1, line:795:1> line:750:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x56169ed6c348 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56169ed706e8 <line:751:1, line:795:1>
|   |-CallExpr 0x56169ed6c4c0 <line:752:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed6c4a8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6c488 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed6c538 <line:753:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56169ed6c4e0 <col:3> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x56169ed6c520 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6c500 <col:15> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |-BinaryOperator 0x56169ed6c598 <line:754:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56169ed6c558 <col:3> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x56169ed6c578 <col:15> 'int' 2
|   |-BinaryOperator 0x56169ed6c610 <line:755:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6c5b8 <col:3> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6c5f8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6c5d8 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed6c6a8 <line:756:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6c630 <col:3> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x56169ed6c680 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56169ed6c650 <col:27> 'int' 1
|   |-CallExpr 0x56169ed6c828 <line:757:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x56169ed6c810 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56169ed6c6c8 <col:3> 'void (int)' Function 0x56169ed0ebc8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x56169ed6c7c8 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x56169ed6c7a8 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x56169ed6c788 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x56169ed6c740 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x56169ed6c728 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56169ed6c6e8 <col:23> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x56169ed6c770 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x56169ed6c758 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x56169ed6c708 <col:41> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed6c8a8 <line:758:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6c850 <col:3> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6c890 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6c870 <col:20> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x56169ed6c920 <line:759:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6c8c8 <col:3> '_Bool' lvalue Var 0x56169ed68ec8 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6c908 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6c8e8 <col:20> '_Bool' lvalue Var 0x56169ed68c70 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56169ed6c998 <line:760:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6c940 <col:3> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6c980 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6c960 <col:20> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56169ed6ca10 <line:761:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6c9b8 <col:3> '_Bool' lvalue Var 0x56169ed68fb8 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6c9f8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6c9d8 <col:20> '_Bool' lvalue Var 0x56169ed68d60 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56169ed6ca88 <line:762:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6ca30 <col:3> '_Bool' lvalue Var 0x56169ed69030 'x$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6ca70 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6ca50 <col:20> '_Bool' lvalue Var 0x56169ed68dd8 'x$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x56169ed6cb40 <line:763:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6caa8 <col:3> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x56169ed6caf8 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56169ed6cac8 <col:27> 'int' 1
|   |-CallExpr 0x56169ed6cb98 <line:764:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed6cb80 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6cb60 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed6cbf0 <line:765:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed6cbd8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6cbb8 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed6cca0 <line:766:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6cc10 <col:3> '_Bool' lvalue Var 0x56169ed69e70 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6cc88 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x56169ed6cc68 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x56169ed6cc50 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x56169ed6cc30 <col:19> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x56169ed6cd50 <line:767:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6ccc0 <col:3> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6cd38 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x56169ed6cd18 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x56169ed6cd00 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x56169ed6cce0 <col:19> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x56169ed6cdc8 <line:768:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6cd70 <col:3> '_Bool' lvalue Var 0x56169ed68b00 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6cdb0 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6cd90 <col:21> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x56169ed6ce40 <line:769:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56169ed6cde8 <col:3> 'int' lvalue Var 0x56169ed68b80 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x56169ed6ce28 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6ce08 <col:15> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   |-BinaryOperator 0x56169ed6d278 <line:770:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x56169ed6ce60 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   | `-ConditionalOperator 0x56169ed6d248 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x56169ed6d070 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x56169ed6cf90 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x56169ed6ceb8 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x56169ed6cea0 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x56169ed6ce80 <col:8> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x56169ed6cf70 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x56169ed6cf08 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x56169ed6cef0 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x56169ed6ced0 <col:27> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x56169ed6cf58 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x56169ed6cf40 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x56169ed6cf20 <col:46> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x56169ed6d050 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x56169ed6cfe8 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x56169ed6cfd0 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x56169ed6cfb0 <col:65> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x56169ed6d038 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x56169ed6d020 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x56169ed6d000 <col:84> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed6d230 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed6d090 <col:101> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   |   `-ParenExpr 0x56169ed6d210 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x56169ed6d1e0 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x56169ed6d150 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56169ed6d108 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56169ed6d0f0 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56169ed6d0b0 <col:106> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56169ed6d138 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56169ed6d120 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56169ed6d0d0 <col:124> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed6d1b0 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed6d170 <col:141> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x56169ed6d1c8 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6d190 <col:153> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56169ed6d788 <line:771:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56169ed6d298 <col:3> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x56169ed6d758 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56169ed6d728 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56169ed6d710 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56169ed6d2b8 <col:15> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed6d740 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed6d2d8 <col:31> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56169ed6d6f0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56169ed6d6c0 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56169ed6d4e8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56169ed6d408 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56169ed6d330 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56169ed6d318 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56169ed6d2f8 <col:45> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56169ed6d3e8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56169ed6d380 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56169ed6d368 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56169ed6d348 <col:64> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x56169ed6d3d0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56169ed6d3b8 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56169ed6d398 <col:83> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56169ed6d4c8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56169ed6d460 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56169ed6d448 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56169ed6d428 <col:102> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x56169ed6d4b0 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56169ed6d498 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56169ed6d478 <col:121> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed6d6a8 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed6d508 <col:138> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x56169ed6d688 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56169ed6d658 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56169ed6d5c8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56169ed6d580 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56169ed6d568 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56169ed6d528 <col:151> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56169ed6d5b0 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56169ed6d598 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56169ed6d548 <col:169> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x56169ed6d628 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56169ed6d5e8 <col:186> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x56169ed6d640 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56169ed6d608 <col:198> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |-BinaryOperator 0x56169ed6dcb0 <line:772:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56169ed6d7a8 <col:3> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x56169ed6dc80 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56169ed6dc50 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56169ed6dc38 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56169ed6d7c8 <col:15> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed6dc68 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed6d7e8 <col:31> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x56169ed6dc18 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56169ed6dbe8 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56169ed6d9f8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56169ed6d918 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56169ed6d840 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56169ed6d828 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56169ed6d808 <col:45> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56169ed6d8f8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56169ed6d890 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56169ed6d878 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56169ed6d858 <col:64> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x56169ed6d8e0 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56169ed6d8c8 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56169ed6d8a8 <col:83> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56169ed6d9d8 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56169ed6d970 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56169ed6d958 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56169ed6d938 <col:102> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x56169ed6d9c0 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56169ed6d9a8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56169ed6d988 <col:121> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed6dbd0 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed6da18 <col:138> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x56169ed6dbb0 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56169ed6db80 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56169ed6dad8 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56169ed6da90 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56169ed6da78 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56169ed6da38 <col:151> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56169ed6dac0 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56169ed6daa8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56169ed6da58 <col:169> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x56169ed6db50 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56169ed6daf8 <col:186> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x56169ed6db68 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56169ed6db18 <col:198> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |-BinaryOperator 0x56169ed6e258 <line:773:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6dcd0 <col:3> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6e240 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6e210 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56169ed6e1c8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed6e1b0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed6dcf0 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6e1f8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed6e1e0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed6dd10 <col:36> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x56169ed6e190 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56169ed6e160 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56169ed6df20 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56169ed6de40 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56169ed6dd68 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56169ed6dd50 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56169ed6dd30 <col:55> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56169ed6de20 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56169ed6ddb8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56169ed6dda0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56169ed6dd80 <col:74> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56169ed6de08 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56169ed6ddf0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56169ed6ddd0 <col:93> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56169ed6df00 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56169ed6de98 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56169ed6de80 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56169ed6de60 <col:112> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56169ed6dee8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56169ed6ded0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56169ed6deb0 <col:131> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56169ed6e148 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56169ed6e130 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56169ed6df40 <col:148> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x56169ed6e110 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56169ed6e0e0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56169ed6e000 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56169ed6dfb8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56169ed6dfa0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56169ed6df60 <col:166> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56169ed6dfe8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56169ed6dfd0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56169ed6df80 <col:184> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56169ed6e098 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56169ed6e050 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56169ed6e020 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56169ed6e0c8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56169ed6e0b0 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56169ed6e078 <col:212> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed6e820 <line:774:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6e278 <col:3> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6e808 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6e7d8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56169ed6e790 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed6e778 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed6e298 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6e7c0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed6e7a8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed6e2b8 <col:36> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x56169ed6e758 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56169ed6e728 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56169ed6e4c8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56169ed6e3e8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56169ed6e310 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56169ed6e2f8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56169ed6e2d8 <col:55> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56169ed6e3c8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56169ed6e360 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56169ed6e348 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56169ed6e328 <col:74> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56169ed6e3b0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56169ed6e398 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56169ed6e378 <col:93> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56169ed6e4a8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56169ed6e440 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56169ed6e428 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56169ed6e408 <col:112> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56169ed6e490 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56169ed6e478 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56169ed6e458 <col:131> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56169ed6e710 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56169ed6e6f8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56169ed6e4e8 <col:148> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x56169ed6e6d8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56169ed6e6a8 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56169ed6e5a8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56169ed6e560 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56169ed6e548 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56169ed6e508 <col:166> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56169ed6e590 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56169ed6e578 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56169ed6e528 <col:184> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56169ed6e678 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56169ed6e5f8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56169ed6e5c8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56169ed6e690 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56169ed6e650 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56169ed6e620 <col:219> 'int' 0
|   |-BinaryOperator 0x56169ed6ede8 <line:775:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6e840 <col:3> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6edd0 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6eda0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56169ed6ed58 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed6ed40 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed6e860 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6ed88 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed6ed70 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed6e880 <col:36> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x56169ed6ed20 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56169ed6ecf0 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56169ed6ea90 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56169ed6e9b0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56169ed6e8d8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56169ed6e8c0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56169ed6e8a0 <col:55> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56169ed6e990 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56169ed6e928 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56169ed6e910 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56169ed6e8f0 <col:74> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56169ed6e978 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56169ed6e960 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56169ed6e940 <col:93> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56169ed6ea70 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56169ed6ea08 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56169ed6e9f0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56169ed6e9d0 <col:112> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56169ed6ea58 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56169ed6ea40 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56169ed6ea20 <col:131> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56169ed6ecd8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56169ed6ecc0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56169ed6eab0 <col:148> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x56169ed6eca0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56169ed6ec70 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56169ed6eb90 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56169ed6eb28 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56169ed6eb10 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56169ed6ead0 <col:166> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56169ed6eb78 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56169ed6eb60 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56169ed6eaf0 <col:184> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56169ed6ec28 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56169ed6ebe0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56169ed6ebb0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56169ed6ec58 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56169ed6ec40 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56169ed6ec08 <col:212> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56169ed6f3b0 <line:776:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6ee08 <col:3> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6f398 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6f368 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56169ed6f320 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed6f308 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed6ee28 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6f350 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed6f338 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed6ee48 <col:36> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x56169ed6f2e8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56169ed6f2b8 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56169ed6f058 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56169ed6ef78 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56169ed6eea0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56169ed6ee88 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56169ed6ee68 <col:55> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56169ed6ef58 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56169ed6eef0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56169ed6eed8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56169ed6eeb8 <col:74> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x56169ed6ef40 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56169ed6ef28 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56169ed6ef08 <col:93> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56169ed6f038 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56169ed6efd0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56169ed6efb8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56169ed6ef98 <col:112> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x56169ed6f020 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56169ed6f008 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56169ed6efe8 <col:131> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x56169ed6f2a0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56169ed6f288 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56169ed6f078 <col:148> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x56169ed6f268 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56169ed6f238 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56169ed6f138 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56169ed6f0f0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56169ed6f0d8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56169ed6f098 <col:166> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56169ed6f120 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56169ed6f108 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56169ed6f0b8 <col:184> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x56169ed6f208 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56169ed6f188 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56169ed6f158 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56169ed6f220 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56169ed6f1e0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56169ed6f1b0 <col:219> 'int' 0
|   |-BinaryOperator 0x56169ed6f428 <line:777:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56169ed6f3d0 <col:3> 'int' lvalue Var 0x56169ed68398 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x56169ed6f410 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6f3f0 <col:25> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   |-BinaryOperator 0x56169ed6f558 <line:778:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x56169ed6f448 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   | `-ConditionalOperator 0x56169ed6f528 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x56169ed6f4e0 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56169ed6f4c8 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56169ed6f468 <col:7> '_Bool' lvalue Var 0x56169ed68b00 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed6f4f8 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed6f488 <col:25> 'int' lvalue Var 0x56169ed68b80 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x56169ed6f510 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x56169ed6f4a8 <col:37> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   |-BinaryOperator 0x56169ed6f5f0 <line:779:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6f578 <col:3> '_Bool' lvalue Var 0x56169ed68b00 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x56169ed6f5c8 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56169ed6f598 <col:28> 'int' 0
|   |-CallExpr 0x56169ed6f648 <line:780:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed6f630 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6f610 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed6f6a0 <line:781:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed6f688 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6f668 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed6f718 <line:782:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56169ed6f6c0 <col:3> 'int' lvalue Var 0x56169ed684b8 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x56169ed6f700 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed6f6e0 <col:25> 'int' lvalue Var 0x56169ed69418 'y' 'int'
|   |-CallExpr 0x56169ed6f770 <line:783:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed6f758 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6f738 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed6f7c8 <line:784:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed6f7b0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed6f790 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed6fab0 <line:785:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56169ed6f7e8 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   | `-ConditionalOperator 0x56169ed6fa80 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56169ed6f8a8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56169ed6f860 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56169ed6f848 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56169ed6f808 <col:7> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56169ed6f890 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56169ed6f878 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56169ed6f828 <col:25> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed6fa68 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed6f8c8 <col:42> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56169ed6fa48 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56169ed6fa18 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56169ed6f988 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56169ed6f940 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56169ed6f928 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56169ed6f8e8 <col:55> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56169ed6f970 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56169ed6f958 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56169ed6f908 <col:73> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed6f9e8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed6f9a8 <col:90> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56169ed6fa00 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6f9c8 <col:102> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   |-BinaryOperator 0x56169ed6fcc8 <line:786:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6fad0 <col:3> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6fcb0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6fc80 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed6fba0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed6fb48 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed6fb30 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed6faf0 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed6fb88 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed6fb70 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed6fb10 <col:38> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6fc38 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed6fbf0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed6fbc0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed6fc68 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed6fc50 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6fc18 <col:66> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed6ffb0 <line:787:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6fce8 <col:3> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed6ff98 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed6ff68 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed6fe88 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed6fda8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed6fd60 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed6fd48 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed6fd08 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed6fd90 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed6fd78 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed6fd28 <col:38> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56169ed6fe68 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed6fe20 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed6fe08 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed6fdc8 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed6fe50 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed6fe38 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed6fde8 <col:74> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed6ff20 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed6fed8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed6fea8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed6ff50 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed6ff38 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed6ff00 <col:102> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56169ed701b8 <line:788:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed6ffd0 <col:3> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed701a0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed70170 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed70090 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed70048 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed70030 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed6fff0 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed70078 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed70060 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed70010 <col:38> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed70128 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed700e0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed700b0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed70158 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed70140 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed70108 <col:66> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56169ed704a0 <line:789:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed701d8 <col:3> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed70488 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed70458 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed70378 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed70298 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed70250 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed70238 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed701f8 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed70280 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed70268 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed70218 <col:38> '_Bool' lvalue Var 0x56169ed68ce8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x56169ed70358 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed70310 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed702f8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed702b8 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed70340 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed70328 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed702d8 <col:74> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed70410 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed703c8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed70398 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed70440 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed70428 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed703f0 <col:102> '_Bool' lvalue Var 0x56169ed68f40 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x56169ed704f8 <line:790:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed704e0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed704c0 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed70550 <line:791:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed70538 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed70518 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed70608 <line:792:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56169ed70570 <col:3> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56169ed705e8 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56169ed705d0 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed70590 <col:22> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56169ed705b0 <col:41> 'int' 1
|   |-CallExpr 0x56169ed70660 <line:793:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed70648 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed70628 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56169ed706d8 <line:794:3, col:36>
|     `-CallExpr 0x56169ed706b8 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56169ed706a0 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56169ed70680 <col:10> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56169ed70900 prev 0x56169ed67da0 <line:796:1, line:820:1> line:796:8 used P2 'void *(void *)'
| |-ParmVarDecl 0x56169ed70868 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56169ed72800 <line:797:1, line:820:1>
|   |-CallExpr 0x56169ed709e0 <line:798:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed709c8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed709a8 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed70a40 <line:799:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56169ed70a00 <col:3> 'int' lvalue Var 0x56169ed69418 'y' 'int'
|   | `-IntegerLiteral 0x56169ed70a20 <col:7> 'int' 1
|   |-CallExpr 0x56169ed70a98 <line:800:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed70a80 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed70a60 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed70af0 <line:801:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed70ad8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed70ab8 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed70b50 <line:802:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x56169ed70b10 <col:3> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   | `-IntegerLiteral 0x56169ed70b30 <col:7> 'int' 1
|   |-CallExpr 0x56169ed70bb8 <line:803:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed70ba0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed70b80 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed70c10 <line:804:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed70bf8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed70bd8 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed70ef8 <line:805:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56169ed70c30 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   | `-ConditionalOperator 0x56169ed70ec8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56169ed70cf0 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56169ed70ca8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56169ed70c90 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56169ed70c50 <col:7> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56169ed70cd8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56169ed70cc0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56169ed70c70 <col:25> '_Bool' lvalue Var 0x56169ed68d60 'x$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed70eb0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed70d10 <col:42> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56169ed70e90 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56169ed70e60 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56169ed70dd0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56169ed70d88 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56169ed70d70 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56169ed70d30 <col:55> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56169ed70db8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56169ed70da0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56169ed70d50 <col:73> '_Bool' lvalue Var 0x56169ed68fb8 'x$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed70e30 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed70df0 <col:90> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56169ed70e48 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed70e10 <col:102> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   |-BinaryOperator 0x56169ed71100 <line:806:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed70f18 <col:3> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed710e8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed710b8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed70fd8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed70f90 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed70f78 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed70f38 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed70fc0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed70fa8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed70f58 <col:38> '_Bool' lvalue Var 0x56169ed68d60 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed71070 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed71028 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed70ff8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed710a0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed71088 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed71050 <col:66> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed713e8 <line:807:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed71120 <col:3> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed713d0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed713a0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed712c0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed711e0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed71198 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed71180 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed71140 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed711c8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed711b0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed71160 <col:38> '_Bool' lvalue Var 0x56169ed68d60 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56169ed712a0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed71258 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed71240 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed71200 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed71288 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed71270 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed71220 <col:74> '_Bool' lvalue Var 0x56169ed68fb8 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed71358 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed71310 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed712e0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed71388 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed71370 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed71338 <col:102> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56169ed715f0 <line:808:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed71408 <col:3> '_Bool' lvalue Var 0x56169ed68d60 'x$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed715d8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed715a8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed714c8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed71480 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed71468 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed71428 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed714b0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed71498 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed71448 <col:38> '_Bool' lvalue Var 0x56169ed68d60 'x$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed71560 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed71518 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed714e8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed71590 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed71578 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed71540 <col:66> '_Bool' lvalue Var 0x56169ed68d60 'x$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56169ed718d8 <line:809:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed71610 <col:3> '_Bool' lvalue Var 0x56169ed68fb8 'x$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed718c0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed71890 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed717b0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed716d0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed71688 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed71670 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed71630 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed716b8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed716a0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed71650 <col:38> '_Bool' lvalue Var 0x56169ed68d60 'x$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56169ed71790 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed71748 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed71730 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed716f0 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed71778 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed71760 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed71710 <col:74> '_Bool' lvalue Var 0x56169ed68fb8 'x$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed71848 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed71800 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed717d0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed71878 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed71860 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed71828 <col:102> '_Bool' lvalue Var 0x56169ed68fb8 'x$r_buff1_thd3' '_Bool'
|   |-BinaryOperator 0x56169ed71bd8 <line:810:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56169ed718f8 <col:3> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   | `-ConditionalOperator 0x56169ed71ba8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56169ed719b8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56169ed71970 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56169ed71958 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56169ed71918 <col:7> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56169ed719a0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56169ed71988 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56169ed71938 <col:25> '_Bool' lvalue Var 0x56169ed69830 'z$r_buff0_thd3' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed71b90 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed719d8 <col:42> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x56169ed71b58 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56169ed71b28 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56169ed71a98 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56169ed71a50 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56169ed71a38 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56169ed719f8 <col:55> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56169ed71a80 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56169ed71a68 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56169ed71a18 <col:73> '_Bool' lvalue Var 0x56169ed69a88 'z$r_buff1_thd3' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed71af8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed71ab8 <col:90> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56169ed71b10 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed71ad8 <col:102> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   |-BinaryOperator 0x56169ed71de0 <line:811:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed71bf8 <col:3> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed71dc8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed71d98 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed71cb8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed71c70 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed71c58 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed71c18 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed71ca0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed71c88 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed71c38 <col:38> '_Bool' lvalue Var 0x56169ed69830 'z$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed71d50 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed71d08 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed71cd8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed71d80 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed71d68 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed71d30 <col:66> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed720c8 <line:812:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed71e00 <col:3> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed720b0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed72080 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed71fa0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed71ec0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed71e78 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed71e60 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed71e20 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed71ea8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed71e90 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed71e40 <col:38> '_Bool' lvalue Var 0x56169ed69830 'z$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56169ed71f80 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed71f38 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed71f20 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed71ee0 <col:56> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed71f68 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed71f50 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed71f00 <col:74> '_Bool' lvalue Var 0x56169ed69a88 'z$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed72038 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed71ff0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed71fc0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed72068 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed72050 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed72018 <col:102> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56169ed722d0 <line:813:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed720e8 <col:3> '_Bool' lvalue Var 0x56169ed69830 'z$r_buff0_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed722b8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed72288 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed721a8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed72160 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed72148 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed72108 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed72190 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed72178 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed72128 <col:38> '_Bool' lvalue Var 0x56169ed69830 'z$r_buff0_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed72240 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed721f8 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed721c8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed72270 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed72258 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed72220 <col:66> '_Bool' lvalue Var 0x56169ed69830 'z$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56169ed725b8 <line:814:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed722f0 <col:3> '_Bool' lvalue Var 0x56169ed69a88 'z$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed725a0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed72570 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed72490 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed723b0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed72368 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed72350 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed72310 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed72398 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed72380 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed72330 <col:38> '_Bool' lvalue Var 0x56169ed69830 'z$r_buff0_thd3' '_Bool'
|   |     | `-BinaryOperator 0x56169ed72470 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed72428 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed72410 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed723d0 <col:56> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed72458 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed72440 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed723f0 <col:74> '_Bool' lvalue Var 0x56169ed69a88 'z$r_buff1_thd3' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed72528 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed724e0 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed724b0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed72558 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed72540 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed72508 <col:102> '_Bool' lvalue Var 0x56169ed69a88 'z$r_buff1_thd3' '_Bool'
|   |-CallExpr 0x56169ed72610 <line:815:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed725f8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed725d8 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed72668 <line:816:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed72650 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed72630 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed72720 <line:817:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56169ed72688 <col:3> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56169ed72700 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56169ed726e8 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed726a8 <col:22> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56169ed726c8 <col:41> 'int' 1
|   |-CallExpr 0x56169ed72778 <line:818:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed72760 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed72740 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56169ed727f0 <line:819:3, col:36>
|     `-CallExpr 0x56169ed727d0 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56169ed727b8 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56169ed72798 <col:10> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56169ed72970 prev 0x56169ed67ef8 <line:821:1, line:871:1> line:821:8 used P3 'void *(void *)'
| |-ParmVarDecl 0x56169ed728d8 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x56169ed77930 <line:822:1, line:871:1>
|   |-CallExpr 0x56169ed72a50 <line:823:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed72a38 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed72a18 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed72ac8 <line:824:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56169ed72a70 <col:3> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x56169ed72ab0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed72a90 <col:15> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   |-BinaryOperator 0x56169ed72b28 <line:825:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56169ed72ae8 <col:3> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   | `-IntegerLiteral 0x56169ed72b08 <col:15> 'int' 2
|   |-BinaryOperator 0x56169ed72bb8 <line:826:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed72b48 <col:3> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed72ba0 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed72b68 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed72c50 <line:827:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed72bd8 <col:3> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x56169ed72c28 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56169ed72bf8 <col:27> 'int' 1
|   |-CallExpr 0x56169ed72da0 <line:828:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x56169ed72d88 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56169ed72c70 <col:3> 'void (int)' Function 0x56169ed0ebc8 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x56169ed72d70 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x56169ed72d50 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x56169ed72d30 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x56169ed72ce8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x56169ed72cd0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x56169ed72c90 <col:23> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x56169ed72d18 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x56169ed72d00 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x56169ed72cb0 <col:41> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed72e20 <line:829:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed72dc8 <col:3> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed72e08 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed72de8 <col:20> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x56169ed72e98 <line:830:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed72e40 <col:3> '_Bool' lvalue Var 0x56169ed69998 'z$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed72e80 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed72e60 <col:20> '_Bool' lvalue Var 0x56169ed69740 'z$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x56169ed72f10 <line:831:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed72eb8 <col:3> '_Bool' lvalue Var 0x56169ed69a10 'z$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed72ef8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed72ed8 <col:20> '_Bool' lvalue Var 0x56169ed697b8 'z$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x56169ed72f88 <line:832:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed72f30 <col:3> '_Bool' lvalue Var 0x56169ed69a88 'z$r_buff1_thd3' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed72f70 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed72f50 <col:20> '_Bool' lvalue Var 0x56169ed69830 'z$r_buff0_thd3' '_Bool'
|   |-BinaryOperator 0x56169ed73000 <line:833:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed72fa8 <col:3> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed72fe8 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed72fc8 <col:20> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x56169ed73098 <line:834:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed73020 <col:3> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   | `-CStyleCastExpr 0x56169ed73070 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56169ed73040 <col:27> 'int' 1
|   |-CallExpr 0x56169ed730f0 <line:835:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed730d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed730b8 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed73148 <line:836:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed73130 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed73110 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed731f8 <line:837:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed73168 <col:3> '_Bool' lvalue Var 0x56169ed69e70 'weak$$choice0' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed731e0 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x56169ed731c0 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x56169ed731a8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x56169ed73188 <col:19> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x56169ed732a8 <line:838:3, col:45> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed73218 <col:3> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed73290 <col:19, col:45> '_Bool' <PointerToBoolean>
|   |   `-CallExpr 0x56169ed73270 <col:19, col:45> 'void *'
|   |     `-ImplicitCastExpr 0x56169ed73258 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x56169ed73238 <col:19> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
|   |-BinaryOperator 0x56169ed73320 <line:839:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed732c8 <col:3> '_Bool' lvalue Var 0x56169ed695d0 'z$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed73308 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed732e8 <col:21> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x56169ed73398 <line:840:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x56169ed73340 <col:3> 'int' lvalue Var 0x56169ed69650 'z$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x56169ed73380 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed73360 <col:15> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   |-BinaryOperator 0x56169ed737d0 <line:841:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x56169ed733b8 <col:3> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   | `-ConditionalOperator 0x56169ed737a0 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x56169ed735c8 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x56169ed734e8 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x56169ed73410 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x56169ed733f8 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x56169ed733d8 <col:8> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x56169ed734c8 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x56169ed73460 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x56169ed73448 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x56169ed73428 <col:27> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |   | |   `-UnaryOperator 0x56169ed734b0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x56169ed73498 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x56169ed73478 <col:46> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x56169ed735a8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x56169ed73540 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x56169ed73528 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x56169ed73508 <col:65> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |   |   `-UnaryOperator 0x56169ed73590 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x56169ed73578 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x56169ed73558 <col:84> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed73788 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed735e8 <col:101> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   |   `-ParenExpr 0x56169ed73768 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x56169ed73738 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x56169ed736a8 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56169ed73660 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56169ed73648 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56169ed73608 <col:106> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56169ed73690 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56169ed73678 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56169ed73628 <col:124> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed73708 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed736c8 <col:141> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x56169ed73720 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed736e8 <col:153> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   |-BinaryOperator 0x56169ed73cf8 <line:842:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56169ed737f0 <col:3> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   | `-ConditionalOperator 0x56169ed73cc8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56169ed73c98 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56169ed73c80 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56169ed73810 <col:15> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed73cb0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed73830 <col:31> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x56169ed73c60 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56169ed73c30 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56169ed73a40 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56169ed73960 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56169ed73888 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56169ed73870 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56169ed73850 <col:45> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56169ed73940 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56169ed738d8 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56169ed738c0 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56169ed738a0 <col:64> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |       | |   `-UnaryOperator 0x56169ed73928 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56169ed73910 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56169ed738f0 <col:83> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56169ed73a20 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56169ed739b8 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56169ed739a0 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56169ed73980 <col:102> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |       |   `-UnaryOperator 0x56169ed73a08 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56169ed739f0 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56169ed739d0 <col:121> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed73c18 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed73a60 <col:138> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   |       `-ParenExpr 0x56169ed73bf8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56169ed73bc8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56169ed73b20 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56169ed73ad8 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56169ed73ac0 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56169ed73a80 <col:151> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56169ed73b08 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56169ed73af0 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56169ed73aa0 <col:169> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |           |-ImplicitCastExpr 0x56169ed73b80 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56169ed73b40 <col:186> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x56169ed73bb0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56169ed73b60 <col:198> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   |-BinaryOperator 0x56169ed74208 <line:843:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x56169ed73d18 <col:3> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   | `-ConditionalOperator 0x56169ed741d8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x56169ed741a8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56169ed74190 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56169ed73d38 <col:15> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed741c0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed73d58 <col:31> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   |   `-ParenExpr 0x56169ed74170 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x56169ed74140 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x56169ed73f68 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x56169ed73e88 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x56169ed73db0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x56169ed73d98 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x56169ed73d78 <col:45> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x56169ed73e68 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x56169ed73e00 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x56169ed73de8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x56169ed73dc8 <col:64> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |       | |   `-UnaryOperator 0x56169ed73e50 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x56169ed73e38 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x56169ed73e18 <col:83> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x56169ed73f48 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x56169ed73ee0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x56169ed73ec8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x56169ed73ea8 <col:102> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |       |   `-UnaryOperator 0x56169ed73f30 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x56169ed73f18 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x56169ed73ef8 <col:121> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed74128 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed73f88 <col:138> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   |       `-ParenExpr 0x56169ed74108 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x56169ed740d8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x56169ed74048 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x56169ed74000 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x56169ed73fe8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x56169ed73fa8 <col:151> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x56169ed74030 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x56169ed74018 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x56169ed73fc8 <col:169> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |           |-ImplicitCastExpr 0x56169ed740a8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x56169ed74068 <col:186> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x56169ed740c0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56169ed74088 <col:198> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   |-BinaryOperator 0x56169ed747b0 <line:844:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed74228 <col:3> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed74798 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed74768 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56169ed74720 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed74708 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed74248 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed74750 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed74738 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed74268 <col:36> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x56169ed746e8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56169ed746b8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56169ed74478 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56169ed74398 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56169ed742c0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56169ed742a8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56169ed74288 <col:55> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56169ed74378 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56169ed74310 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56169ed742f8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56169ed742d8 <col:74> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x56169ed74360 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56169ed74348 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56169ed74328 <col:93> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56169ed74458 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56169ed743f0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56169ed743d8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56169ed743b8 <col:112> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x56169ed74440 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56169ed74428 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56169ed74408 <col:131> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x56169ed746a0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56169ed74688 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56169ed74498 <col:148> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x56169ed74668 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56169ed74638 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56169ed74558 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56169ed74510 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56169ed744f8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56169ed744b8 <col:166> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56169ed74540 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56169ed74528 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56169ed744d8 <col:184> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x56169ed745f0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56169ed745a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56169ed74578 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56169ed74620 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56169ed74608 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56169ed745d0 <col:212> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed74d90 <line:845:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed747d0 <col:3> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed74d78 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed74d48 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56169ed74d00 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed74ce8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed747f0 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed74d30 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed74d18 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed74810 <col:36> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x56169ed74cc8 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56169ed74c98 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56169ed74a20 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56169ed74940 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56169ed74868 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56169ed74850 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56169ed74830 <col:55> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56169ed74920 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56169ed748b8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56169ed748a0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56169ed74880 <col:74> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x56169ed74908 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56169ed748f0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56169ed748d0 <col:93> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56169ed74a00 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56169ed74998 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56169ed74980 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56169ed74960 <col:112> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x56169ed749e8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56169ed749d0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56169ed749b0 <col:131> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x56169ed74c80 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56169ed74c68 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56169ed74a40 <col:148> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x56169ed74c48 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56169ed74c18 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56169ed74b00 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56169ed74ab8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56169ed74aa0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56169ed74a60 <col:166> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56169ed74ae8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56169ed74ad0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56169ed74a80 <col:184> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x56169ed74be8 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56169ed74b50 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56169ed74b20 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56169ed74c00 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56169ed74bc0 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56169ed74b78 <col:219> 'int' 0
|   |-BinaryOperator 0x56169ed75338 <line:846:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed74db0 <col:3> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed75320 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed752f0 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x56169ed752a8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed75290 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed74dd0 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed752d8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed752c0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed74df0 <col:36> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |     `-ParenExpr 0x56169ed75270 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x56169ed75240 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x56169ed75000 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56169ed74f20 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56169ed74e48 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56169ed74e30 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56169ed74e10 <col:55> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56169ed74f00 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56169ed74e98 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56169ed74e80 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56169ed74e60 <col:74> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x56169ed74ee8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56169ed74ed0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56169ed74eb0 <col:93> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56169ed74fe0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56169ed74f78 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56169ed74f60 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56169ed74f40 <col:112> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x56169ed74fc8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56169ed74fb0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56169ed74f90 <col:131> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x56169ed75228 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56169ed75210 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56169ed75020 <col:148> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         `-ParenExpr 0x56169ed751f0 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x56169ed751c0 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x56169ed750e0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56169ed75098 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56169ed75080 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56169ed75040 <col:166> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56169ed750c8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56169ed750b0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56169ed75060 <col:184> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x56169ed75178 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56169ed75130 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56169ed75100 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56169ed751a8 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x56169ed75190 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x56169ed75158 <col:212> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x56169ed75900 <line:847:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed75358 <col:3> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed758e8 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed758b8 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x56169ed75870 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed75858 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed75378 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed758a0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x56169ed75888 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56169ed75398 <col:36> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |     `-ParenExpr 0x56169ed75838 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x56169ed75808 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x56169ed755a8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x56169ed754c8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x56169ed753f0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x56169ed753d8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x56169ed753b8 <col:55> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x56169ed754a8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x56169ed75440 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x56169ed75428 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x56169ed75408 <col:74> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         | |   `-UnaryOperator 0x56169ed75490 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x56169ed75478 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x56169ed75458 <col:93> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x56169ed75588 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x56169ed75520 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x56169ed75508 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x56169ed754e8 <col:112> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |         |   `-UnaryOperator 0x56169ed75570 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x56169ed75558 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x56169ed75538 <col:131> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |         |-ImplicitCastExpr 0x56169ed757f0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56169ed757d8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56169ed755c8 <col:148> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |         `-ParenExpr 0x56169ed757b8 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x56169ed75788 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x56169ed75688 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x56169ed75640 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x56169ed75628 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x56169ed755e8 <col:166> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x56169ed75670 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x56169ed75658 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x56169ed75608 <col:184> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |             |-ImplicitCastExpr 0x56169ed75758 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x56169ed756d8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x56169ed756a8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x56169ed75770 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x56169ed75730 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x56169ed75700 <col:219> 'int' 0
|   |-BinaryOperator 0x56169ed75978 <line:848:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56169ed75920 <col:3> 'int' lvalue Var 0x56169ed685d8 '__unbuffered_p3_EAX' 'int'
|   | `-ImplicitCastExpr 0x56169ed75960 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed75940 <col:25> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   |-BinaryOperator 0x56169ed75aa8 <line:849:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x56169ed75998 <col:3> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   | `-ConditionalOperator 0x56169ed75a78 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x56169ed75a30 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x56169ed75a18 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x56169ed759b8 <col:7> '_Bool' lvalue Var 0x56169ed695d0 'z$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed75a48 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed759d8 <col:25> 'int' lvalue Var 0x56169ed69650 'z$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x56169ed75a60 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x56169ed759f8 <col:37> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   |-BinaryOperator 0x56169ed75b40 <line:850:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed75ac8 <col:3> '_Bool' lvalue Var 0x56169ed695d0 'z$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x56169ed75b18 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x56169ed75ae8 <col:28> 'int' 0
|   |-CallExpr 0x56169ed75b98 <line:851:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed75b80 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed75b60 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed75c08 <line:852:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed75bf0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed75bd0 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed75c80 <line:853:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x56169ed75c28 <col:3> 'int' lvalue Var 0x56169ed686f8 '__unbuffered_p3_EBX' 'int'
|   | `-ImplicitCastExpr 0x56169ed75c68 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56169ed75c48 <col:25> 'int' lvalue Var 0x56169ed68818 'a' 'int'
|   |-CallExpr 0x56169ed75cd8 <line:854:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed75cc0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed75ca0 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed75d30 <line:855:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed75d18 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed75cf8 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed76018 <line:856:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56169ed75d50 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   | `-ConditionalOperator 0x56169ed75fe8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56169ed75e10 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56169ed75dc8 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56169ed75db0 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56169ed75d70 <col:7> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56169ed75df8 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56169ed75de0 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56169ed75d90 <col:25> '_Bool' lvalue Var 0x56169ed68dd8 'x$r_buff0_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed75fd0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed75e30 <col:42> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x56169ed75fb0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56169ed75f80 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56169ed75ef0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56169ed75ea8 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56169ed75e90 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56169ed75e50 <col:55> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56169ed75ed8 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56169ed75ec0 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56169ed75e70 <col:73> '_Bool' lvalue Var 0x56169ed69030 'x$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed75f50 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed75f10 <col:90> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56169ed75f68 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed75f30 <col:102> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
|   |-BinaryOperator 0x56169ed76220 <line:857:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed76038 <col:3> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed76208 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed761d8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed760f8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed760b0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed76098 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed76058 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed760e0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed760c8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed76078 <col:38> '_Bool' lvalue Var 0x56169ed68dd8 'x$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed76190 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed76148 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed76118 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed761c0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed761a8 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed76170 <col:66> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed76508 <line:858:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed76240 <col:3> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed764f0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed764c0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed763e0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed76300 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed762b8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed762a0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed76260 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed762e8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed762d0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed76280 <col:38> '_Bool' lvalue Var 0x56169ed68dd8 'x$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x56169ed763c0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed76378 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed76360 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed76320 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed763a8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed76390 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed76340 <col:74> '_Bool' lvalue Var 0x56169ed69030 'x$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed76478 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed76430 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed76400 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed764a8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed76490 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed76458 <col:102> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56169ed76710 <line:859:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed76528 <col:3> '_Bool' lvalue Var 0x56169ed68dd8 'x$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed766f8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed766c8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed765e8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed765a0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed76588 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed76548 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed765d0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed765b8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed76568 <col:38> '_Bool' lvalue Var 0x56169ed68dd8 'x$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed76680 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed76638 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed76608 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed766b0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed76698 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed76660 <col:66> '_Bool' lvalue Var 0x56169ed68dd8 'x$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x56169ed769f8 <line:860:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed76730 <col:3> '_Bool' lvalue Var 0x56169ed69030 'x$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed769e0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed769b0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed768d0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed767f0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed767a8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed76790 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed76750 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed767d8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed767c0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed76770 <col:38> '_Bool' lvalue Var 0x56169ed68dd8 'x$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x56169ed768b0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed76868 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed76850 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed76810 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed76898 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed76880 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed76830 <col:74> '_Bool' lvalue Var 0x56169ed69030 'x$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed76968 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed76920 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed768f0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed76998 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed76980 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed76948 <col:102> '_Bool' lvalue Var 0x56169ed69030 'x$r_buff1_thd4' '_Bool'
|   |-BinaryOperator 0x56169ed76d08 <line:861:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x56169ed76a18 <col:3> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   | `-ConditionalOperator 0x56169ed76cd8 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x56169ed76ad8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x56169ed76a90 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x56169ed76a78 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56169ed76a38 <col:7> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x56169ed76ac0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x56169ed76aa8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x56169ed76a58 <col:25> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |   |-ImplicitCastExpr 0x56169ed76cc0 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed76af8 <col:42> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
|   |   `-ParenExpr 0x56169ed76ca0 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x56169ed76c70 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x56169ed76be0 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x56169ed76b70 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x56169ed76b58 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x56169ed76b18 <col:55> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x56169ed76ba0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x56169ed76b88 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x56169ed76b38 <col:73> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |       |-ImplicitCastExpr 0x56169ed76c40 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x56169ed76c00 <col:90> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x56169ed76c58 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed76c20 <col:102> 'int' lvalue Var 0x56169ed69538 'z' 'int'
|   |-BinaryOperator 0x56169ed76f10 <line:862:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed76d28 <col:3> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed76ef8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed76ec8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed76de8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed76da0 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed76d88 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed76d48 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed76dd0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed76db8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed76d68 <col:38> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed76e80 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed76e38 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed76e08 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed76eb0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed76e98 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed76e60 <col:66> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x56169ed771f8 <line:863:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed76f30 <col:3> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed771e0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed771b0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed770d0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed76ff0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed76fa8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed76f90 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed76f50 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed76fd8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed76fc0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed76f70 <col:38> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x56169ed770b0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed77068 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed77050 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed77010 <col:56> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed77098 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed77080 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed77030 <col:74> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed77168 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed77120 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed770f0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed77198 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed77180 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed77148 <col:102> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x56169ed77400 <line:864:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed77218 <col:3> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed773e8 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed773b8 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x56169ed772d8 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x56169ed77290 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x56169ed77278 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x56169ed77238 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x56169ed772c0 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x56169ed772a8 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x56169ed77258 <col:38> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed77370 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed77328 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed772f8 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed773a0 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed77388 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed77350 <col:66> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |-BinaryOperator 0x56169ed776e8 <line:865:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x56169ed77420 <col:3> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   | `-ImplicitCastExpr 0x56169ed776d0 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x56169ed776a0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x56169ed775c0 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x56169ed774e0 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x56169ed77498 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x56169ed77480 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x56169ed77440 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x56169ed774c8 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x56169ed774b0 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x56169ed77460 <col:38> '_Bool' lvalue Var 0x56169ed698a8 'z$r_buff0_thd4' '_Bool'
|   |     | `-BinaryOperator 0x56169ed775a0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x56169ed77558 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x56169ed77540 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x56169ed77500 <col:56> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x56169ed77588 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x56169ed77570 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x56169ed77520 <col:74> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |     |-ImplicitCastExpr 0x56169ed77658 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x56169ed77610 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x56169ed775e0 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x56169ed77688 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x56169ed77670 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x56169ed77638 <col:102> '_Bool' lvalue Var 0x56169ed69b10 'z$r_buff1_thd4' '_Bool'
|   |-CallExpr 0x56169ed77740 <line:866:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed77728 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed77708 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x56169ed77798 <line:867:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x56169ed77780 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed77760 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x56169ed77850 <line:868:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x56169ed777b8 <col:3> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x56169ed77830 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x56169ed77818 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56169ed777d8 <col:22> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x56169ed777f8 <col:41> 'int' 1
|   |-CallExpr 0x56169ed778a8 <line:869:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x56169ed77890 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56169ed77870 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x56169ed77920 <line:870:3, col:36>
|     `-CallExpr 0x56169ed77900 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x56169ed778e8 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x56169ed778c8 <col:10> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x56169ed77ae0 prev 0x56169ed67fc0 <line:872:1, line:874:1> line:872:6 fence 'void ()'
| `-CompoundStmt 0x56169ed77b80 <line:873:1, line:874:1>
|-FunctionDecl 0x56169ed77bf0 prev 0x56169ed68080 <line:875:1, line:877:1> line:875:6 isync 'void ()'
| `-CompoundStmt 0x56169ed77c90 <line:876:1, line:877:1>
|-FunctionDecl 0x56169ed77cc0 prev 0x56169ed68140 <line:878:1, line:880:1> line:878:6 lwfence 'void ()'
| `-CompoundStmt 0x56169ed77d60 <line:879:1, line:880:1>
`-FunctionDecl 0x56169ed77dc8 <line:881:1, line:938:1> line:881:5 main 'int ()'
  `-CompoundStmt 0x56169ed7fe90 <line:882:1, line:938:1>
    |-DeclStmt 0x56169ed77ee0 <line:883:3, col:17>
    | `-VarDecl 0x56169ed77e78 <col:3, col:13> col:13 used t631 'pthread_t':'unsigned long'
    |-CallExpr 0x56169ed780e8 <line:884:3, col:53> 'int'
    | |-ImplicitCastExpr 0x56169ed780d0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed77ef8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56169ed4f488 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56169ed77f38 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56169ed77f18 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56169ed77e78 't631' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56169ed78128 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56169ed77fb0 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x56169ed77f88 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56169ed77f50 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x56169ed78140 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed77fd0 <col:38> 'void *(void *)' Function 0x56169ed6a000 'P0' 'void *(void *)'
    | `-ParenExpr 0x56169ed78050 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x56169ed78028 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56169ed77ff0 <col:51> 'int' 0
    |-DeclStmt 0x56169ed781d0 <line:885:3, col:17>
    | `-VarDecl 0x56169ed78168 <col:3, col:13> col:13 used t632 'pthread_t':'unsigned long'
    |-CallExpr 0x56169ed78378 <line:886:3, col:53> 'int'
    | |-ImplicitCastExpr 0x56169ed78360 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed781e8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56169ed4f488 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56169ed78228 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56169ed78208 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56169ed78168 't632' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56169ed783b8 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56169ed782a0 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x56169ed78278 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56169ed78240 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x56169ed783d0 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed782c0 <col:38> 'void *(void *)' Function 0x56169ed6c3e0 'P1' 'void *(void *)'
    | `-ParenExpr 0x56169ed78340 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x56169ed78318 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56169ed782e0 <col:51> 'int' 0
    |-DeclStmt 0x56169ed78460 <line:887:3, col:17>
    | `-VarDecl 0x56169ed783f8 <col:3, col:13> col:13 used t633 'pthread_t':'unsigned long'
    |-CallExpr 0x56169ed78608 <line:888:3, col:53> 'int'
    | |-ImplicitCastExpr 0x56169ed785f0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed78478 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56169ed4f488 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56169ed784b8 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56169ed78498 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56169ed783f8 't633' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56169ed78648 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56169ed78530 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x56169ed78508 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56169ed784d0 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x56169ed78660 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed78550 <col:38> 'void *(void *)' Function 0x56169ed70900 'P2' 'void *(void *)'
    | `-ParenExpr 0x56169ed785d0 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x56169ed785a8 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56169ed78570 <col:51> 'int' 0
    |-DeclStmt 0x56169ed786f0 <line:889:3, col:17>
    | `-VarDecl 0x56169ed78688 <col:3, col:13> col:13 used t634 'pthread_t':'unsigned long'
    |-CallExpr 0x56169ed78898 <line:890:3, col:53> 'int'
    | |-ImplicitCastExpr 0x56169ed78880 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed78708 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x56169ed4f488 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x56169ed78748 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x56169ed78728 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x56169ed78688 't634' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x56169ed788d8 <col:25, col:35> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x56169ed787c0 <col:25, col:35> 'void *'
    | |   `-CStyleCastExpr 0x56169ed78798 <col:26, col:34> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x56169ed78760 <col:34> 'int' 0
    | |-ImplicitCastExpr 0x56169ed788f0 <col:38> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed787e0 <col:38> 'void *(void *)' Function 0x56169ed72970 'P3' 'void *(void *)'
    | `-ParenExpr 0x56169ed78860 <col:42, col:52> 'void *'
    |   `-CStyleCastExpr 0x56169ed78838 <col:43, col:51> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x56169ed78800 <col:51> 'int' 0
    |-CallExpr 0x56169ed78940 <line:891:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56169ed78928 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56169ed78908 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56169ed78a10 <line:892:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x56169ed78960 <col:3> '_Bool' lvalue Var 0x56169ed688b0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed789f8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x56169ed789d8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x56169ed789c0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x56169ed78980 <col:21> 'int' lvalue Var 0x56169ed68278 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x56169ed789a0 <col:41> 'int' 4
    |-CallExpr 0x56169ed78a68 <line:893:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56169ed78a50 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56169ed78a30 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56169ed78ae0 <line:894:3, col:36> 'void'
    | |-ImplicitCastExpr 0x56169ed78ac8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed78a88 <col:3> 'void (int)' Function 0x56169ed0e790 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x56169ed78b20 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x56169ed78b08 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x56169ed78aa8 <col:21> '_Bool' lvalue Var 0x56169ed688b0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x56169ed78b70 <line:895:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56169ed78b58 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56169ed78b38 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56169ed78e68 <line:896:3, col:103> 'int' '='
    | |-DeclRefExpr 0x56169ed78b90 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
    | `-ConditionalOperator 0x56169ed78e38 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x56169ed78c60 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x56169ed78c18 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x56169ed78c00 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x56169ed78bb0 <col:7> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x56169ed78c48 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x56169ed78c30 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x56169ed78bd0 <col:25> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed78e20 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed78c80 <col:42> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
    |   `-ParenExpr 0x56169ed78e00 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x56169ed78dd0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x56169ed78d40 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56169ed78cf8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56169ed78ce0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56169ed78ca0 <col:55> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56169ed78d28 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56169ed78d10 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56169ed78cc0 <col:73> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56169ed78da0 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56169ed78d60 <col:90> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x56169ed78db8 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed78d80 <col:102> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
    |-BinaryOperator 0x56169ed79070 <line:897:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56169ed78e88 <col:3> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56169ed79058 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed79028 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56169ed78f48 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56169ed78f00 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56169ed78ee8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56169ed78ea8 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56169ed78f30 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56169ed78f18 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56169ed78ec8 <col:38> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed78fe0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56169ed78f98 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56169ed78f68 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56169ed79010 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56169ed78ff8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed78fc0 <col:66> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56169ed79358 <line:898:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56169ed79090 <col:3> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56169ed79340 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed79310 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56169ed79230 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56169ed79150 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56169ed79108 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56169ed790f0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56169ed790b0 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56169ed79138 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56169ed79120 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56169ed790d0 <col:38> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56169ed79210 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56169ed791c8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56169ed791b0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56169ed79170 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56169ed791f8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56169ed791e0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56169ed79190 <col:74> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed792c8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56169ed79280 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56169ed79250 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56169ed792f8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56169ed792e0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed792a8 <col:102> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x56169ed79560 <line:899:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56169ed79378 <col:3> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed79548 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed79518 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56169ed79438 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56169ed793f0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56169ed793d8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56169ed79398 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56169ed79420 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56169ed79408 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56169ed793b8 <col:38> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed794d0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56169ed79488 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56169ed79458 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56169ed79500 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56169ed794e8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed794b0 <col:66> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56169ed79848 <line:900:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56169ed79580 <col:3> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed79830 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed79800 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56169ed79720 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56169ed79640 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56169ed795f8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56169ed795e0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56169ed795a0 <col:20> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56169ed79628 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56169ed79610 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56169ed795c0 <col:38> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56169ed79700 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56169ed796b8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56169ed796a0 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56169ed79660 <col:56> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56169ed796e8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56169ed796d0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56169ed79680 <col:74> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed797b8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56169ed79770 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56169ed79740 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56169ed797e8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56169ed797d0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed79798 <col:102> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |-BinaryOperator 0x56169ed79b30 <line:901:3, col:103> 'int' '='
    | |-DeclRefExpr 0x56169ed79868 <col:3> 'int' lvalue Var 0x56169ed69538 'z' 'int'
    | `-ConditionalOperator 0x56169ed79b00 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x56169ed79928 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x56169ed798e0 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x56169ed798c8 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x56169ed79888 <col:7> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x56169ed79910 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x56169ed798f8 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x56169ed798a8 <col:25> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed79ae8 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed79948 <col:42> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
    |   `-ParenExpr 0x56169ed79ac8 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x56169ed79a98 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x56169ed79a08 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56169ed799c0 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56169ed799a8 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56169ed79968 <col:55> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56169ed799f0 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56169ed799d8 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56169ed79988 <col:73> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56169ed79a68 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56169ed79a28 <col:90> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x56169ed79a80 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed79a48 <col:102> 'int' lvalue Var 0x56169ed69538 'z' 'int'
    |-BinaryOperator 0x56169ed79d50 <line:902:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56169ed79b50 <col:3> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56169ed79d38 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed79d08 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56169ed79c28 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56169ed79bc8 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56169ed79bb0 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56169ed79b70 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56169ed79c10 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56169ed79be0 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56169ed79b90 <col:38> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed79cc0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56169ed79c78 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56169ed79c48 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56169ed79cf0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56169ed79cd8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed79ca0 <col:66> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56169ed7a038 <line:903:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56169ed79d70 <col:3> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7a020 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed79ff0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56169ed79f10 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56169ed79e30 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56169ed79de8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56169ed79dd0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56169ed79d90 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56169ed79e18 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56169ed79e00 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56169ed79db0 <col:38> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56169ed79ef0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56169ed79ea8 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56169ed79e90 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56169ed79e50 <col:56> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56169ed79ed8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56169ed79ec0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56169ed79e70 <col:74> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed79fa8 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56169ed79f60 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56169ed79f30 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56169ed79fd8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56169ed79fc0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed79f88 <col:102> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |-BinaryOperator 0x56169ed7a240 <line:904:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7a058 <col:3> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7a228 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7a1f8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x56169ed7a118 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x56169ed7a0d0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x56169ed7a0b8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x56169ed7a078 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x56169ed7a100 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x56169ed7a0e8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x56169ed7a098 <col:38> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7a1b0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56169ed7a168 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56169ed7a138 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x56169ed7a1e0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56169ed7a1c8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed7a190 <col:66> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56169ed7a528 <line:905:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7a260 <col:3> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7a510 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7a4e0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x56169ed7a400 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x56169ed7a320 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x56169ed7a2d8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x56169ed7a2c0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x56169ed7a280 <col:20> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x56169ed7a308 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x56169ed7a2f0 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x56169ed7a2a0 <col:38> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x56169ed7a3e0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x56169ed7a398 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x56169ed7a380 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x56169ed7a340 <col:56> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x56169ed7a3c8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x56169ed7a3b0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x56169ed7a360 <col:74> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7a498 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x56169ed7a450 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x56169ed7a420 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x56169ed7a4c8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x56169ed7a4b0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed7a478 <col:102> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |-CallExpr 0x56169ed7a580 <line:906:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56169ed7a568 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56169ed7a548 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56169ed7a5d8 <line:907:3, col:27> 'void'
    | `-ImplicitCastExpr 0x56169ed7a5c0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56169ed7a5a0 <col:3> 'void ()' Function 0x56169ed0ee40 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x56169ed7a688 <line:908:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7a5f8 <col:3> '_Bool' lvalue Var 0x56169ed69e70 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7a670 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x56169ed7a650 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x56169ed7a638 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x56169ed7a618 <col:19> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x56169ed7a738 <line:909:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7a6a8 <col:3> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7a720 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x56169ed7a700 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x56169ed7a6e8 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x56169ed7a6c8 <col:19> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x56169ed7a7b0 <line:910:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7a758 <col:3> '_Bool' lvalue Var 0x56169ed695d0 'z$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7a798 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x56169ed7a778 <col:21> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x56169ed7a828 <line:911:3, col:15> 'int' '='
    | |-DeclRefExpr 0x56169ed7a7d0 <col:3> 'int' lvalue Var 0x56169ed69650 'z$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x56169ed7a810 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x56169ed7a7f0 <col:15> 'int' lvalue Var 0x56169ed69538 'z' 'int'
    |-BinaryOperator 0x56169ed7ac88 <line:912:3, col:162> 'int' '='
    | |-DeclRefExpr 0x56169ed7a848 <col:3> 'int' lvalue Var 0x56169ed69538 'z' 'int'
    | `-ConditionalOperator 0x56169ed7ac58 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x56169ed7aa58 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x56169ed7a978 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x56169ed7a8a0 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x56169ed7a888 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x56169ed7a868 <col:8> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x56169ed7a958 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x56169ed7a8f0 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x56169ed7a8d8 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x56169ed7a8b8 <col:27> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x56169ed7a940 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x56169ed7a928 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x56169ed7a908 <col:46> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x56169ed7aa38 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x56169ed7a9d0 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x56169ed7a9b8 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x56169ed7a998 <col:65> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x56169ed7aa20 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x56169ed7aa08 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x56169ed7a9e8 <col:84> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed7ac40 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed7aa78 <col:101> 'int' lvalue Var 0x56169ed69538 'z' 'int'
    |   `-ParenExpr 0x56169ed7ac20 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x56169ed7abc8 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x56169ed7ab38 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56169ed7aaf0 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56169ed7aad8 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56169ed7aa98 <col:106> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56169ed7ab20 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56169ed7ab08 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56169ed7aab8 <col:124> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56169ed7ab98 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56169ed7ab58 <col:141> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x56169ed7abb0 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed7ab78 <col:153> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
    |-BinaryOperator 0x56169ed7b198 <line:913:3, col:208> 'int' '='
    | |-DeclRefExpr 0x56169ed7aca8 <col:3> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
    | `-ConditionalOperator 0x56169ed7b168 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x56169ed7b138 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56169ed7b120 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56169ed7acc8 <col:15> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed7b150 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed7ace8 <col:31> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
    |   `-ParenExpr 0x56169ed7b100 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x56169ed7b0d0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x56169ed7aef8 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x56169ed7ae18 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x56169ed7ad40 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x56169ed7ad28 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x56169ed7ad08 <col:45> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x56169ed7adf8 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x56169ed7ad90 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x56169ed7ad78 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x56169ed7ad58 <col:64> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x56169ed7ade0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x56169ed7adc8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x56169ed7ada8 <col:83> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x56169ed7aed8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x56169ed7ae70 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x56169ed7ae58 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x56169ed7ae38 <col:102> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x56169ed7aec0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x56169ed7aea8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x56169ed7ae88 <col:121> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56169ed7b0b8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56169ed7af18 <col:138> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
    |       `-ParenExpr 0x56169ed7b098 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x56169ed7b068 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x56169ed7afd8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x56169ed7af90 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x56169ed7af78 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x56169ed7af38 <col:151> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x56169ed7afc0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x56169ed7afa8 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56169ed7af58 <col:169> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x56169ed7b038 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56169ed7aff8 <col:186> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x56169ed7b050 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x56169ed7b018 <col:198> 'int' lvalue Var 0x56169ed69c88 'z$w_buff0' 'int'
    |-BinaryOperator 0x56169ed7b6a8 <line:914:3, col:208> 'int' '='
    | |-DeclRefExpr 0x56169ed7b1b8 <col:3> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
    | `-ConditionalOperator 0x56169ed7b678 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x56169ed7b648 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56169ed7b630 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56169ed7b1d8 <col:15> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed7b660 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed7b1f8 <col:31> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
    |   `-ParenExpr 0x56169ed7b610 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x56169ed7b5e0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x56169ed7b408 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x56169ed7b328 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x56169ed7b250 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x56169ed7b238 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x56169ed7b218 <col:45> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x56169ed7b308 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x56169ed7b2a0 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x56169ed7b288 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x56169ed7b268 <col:64> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x56169ed7b2f0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x56169ed7b2d8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x56169ed7b2b8 <col:83> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x56169ed7b3e8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x56169ed7b380 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x56169ed7b368 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x56169ed7b348 <col:102> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x56169ed7b3d0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x56169ed7b3b8 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x56169ed7b398 <col:121> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56169ed7b5c8 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56169ed7b428 <col:138> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
    |       `-ParenExpr 0x56169ed7b5a8 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x56169ed7b578 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x56169ed7b4e8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x56169ed7b4a0 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x56169ed7b488 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x56169ed7b448 <col:151> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x56169ed7b4d0 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x56169ed7b4b8 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56169ed7b468 <col:169> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x56169ed7b548 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56169ed7b508 <col:186> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x56169ed7b560 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x56169ed7b528 <col:198> 'int' lvalue Var 0x56169ed69d80 'z$w_buff1' 'int'
    |-BinaryOperator 0x56169ed7bc78 <line:915:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7b6c8 <col:3> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7bc60 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7bc30 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x56169ed7bbc0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7bba8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7b6e8 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7bbf0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7bbd8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7b708 <col:36> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x56169ed7bb88 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x56169ed7bb58 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x56169ed7b918 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56169ed7b838 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56169ed7b760 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56169ed7b748 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56169ed7b728 <col:55> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56169ed7b818 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56169ed7b7b0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56169ed7b798 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56169ed7b778 <col:74> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56169ed7b800 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56169ed7b7e8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56169ed7b7c8 <col:93> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56169ed7b8f8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56169ed7b890 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56169ed7b878 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56169ed7b858 <col:112> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56169ed7b8e0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56169ed7b8c8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56169ed7b8a8 <col:131> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56169ed7bb40 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56169ed7bb28 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56169ed7b938 <col:148> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x56169ed7bb08 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x56169ed7bad8 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x56169ed7b9f8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56169ed7b9b0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56169ed7b998 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56169ed7b958 <col:166> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56169ed7b9e0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56169ed7b9c8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56169ed7b978 <col:184> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56169ed7ba90 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56169ed7ba48 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56169ed7ba18 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56169ed7bac0 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x56169ed7baa8 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x56169ed7ba70 <col:212> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56169ed7c240 <line:916:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7bc98 <col:3> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7c228 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7c1f8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x56169ed7c1b0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7c198 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7bcb8 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7c1e0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7c1c8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7bcd8 <col:36> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x56169ed7c178 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x56169ed7c148 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x56169ed7bee8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56169ed7be08 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56169ed7bd30 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56169ed7bd18 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56169ed7bcf8 <col:55> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56169ed7bde8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56169ed7bd80 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56169ed7bd68 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56169ed7bd48 <col:74> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56169ed7bdd0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56169ed7bdb8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56169ed7bd98 <col:93> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56169ed7bec8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56169ed7be60 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56169ed7be48 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56169ed7be28 <col:112> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56169ed7beb0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56169ed7be98 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56169ed7be78 <col:131> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56169ed7c130 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56169ed7c118 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56169ed7bf08 <col:148> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x56169ed7c0f8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x56169ed7c0c8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x56169ed7bfc8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56169ed7bf80 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56169ed7bf68 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56169ed7bf28 <col:166> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56169ed7bfb0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56169ed7bf98 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56169ed7bf48 <col:184> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56169ed7c098 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56169ed7c018 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56169ed7bfe8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56169ed7c0b0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x56169ed7c070 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x56169ed7c040 <col:219> 'int' 0
    |-BinaryOperator 0x56169ed7c7e8 <line:917:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7c260 <col:3> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7c7d0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7c7a0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x56169ed7c758 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7c740 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7c280 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7c788 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7c770 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7c2a0 <col:36> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x56169ed7c720 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x56169ed7c6f0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x56169ed7c4b0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56169ed7c3d0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56169ed7c2f8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56169ed7c2e0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56169ed7c2c0 <col:55> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56169ed7c3b0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56169ed7c348 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56169ed7c330 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56169ed7c310 <col:74> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56169ed7c398 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56169ed7c380 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56169ed7c360 <col:93> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56169ed7c490 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56169ed7c428 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56169ed7c410 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56169ed7c3f0 <col:112> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56169ed7c478 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56169ed7c460 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56169ed7c440 <col:131> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56169ed7c6d8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56169ed7c6c0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56169ed7c4d0 <col:148> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x56169ed7c6a0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x56169ed7c670 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x56169ed7c590 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56169ed7c548 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56169ed7c530 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56169ed7c4f0 <col:166> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56169ed7c578 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56169ed7c560 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56169ed7c510 <col:184> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56169ed7c628 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56169ed7c5e0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56169ed7c5b0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56169ed7c658 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x56169ed7c640 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x56169ed7c608 <col:212> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56169ed7cdd0 <line:918:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7c808 <col:3> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7cdb8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7cd88 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x56169ed7cd40 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7cd28 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7c828 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7cd70 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7cd58 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7c848 <col:36> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x56169ed7cd08 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x56169ed7ccd8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x56169ed7ca58 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56169ed7c978 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56169ed7c8a0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56169ed7c888 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56169ed7c868 <col:55> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56169ed7c958 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56169ed7c8f0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56169ed7c8d8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56169ed7c8b8 <col:74> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56169ed7c940 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56169ed7c928 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56169ed7c908 <col:93> '_Bool' lvalue Var 0x56169ed69df8 'z$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56169ed7ca38 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56169ed7c9d0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56169ed7c9b8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56169ed7c998 <col:112> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56169ed7ca20 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56169ed7ca08 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56169ed7c9e8 <col:131> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56169ed7ccc0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56169ed7cca8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56169ed7ca78 <col:148> '_Bool' lvalue Var 0x56169ed69920 'z$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x56169ed7cc88 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x56169ed7cc58 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x56169ed7cb38 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56169ed7caf0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56169ed7cad8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56169ed7ca98 <col:166> '_Bool' lvalue Var 0x56169ed69d00 'z$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56169ed7cb20 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56169ed7cb08 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56169ed7cab8 <col:184> '_Bool' lvalue Var 0x56169ed696c8 'z$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56169ed7cc08 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56169ed7cb88 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56169ed7cb58 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56169ed7cc40 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x56169ed7cbe0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x56169ed7cbb0 <col:219> 'int' 0
    |-BinaryOperator 0x56169ed7ce80 <line:919:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7cdf0 <col:3> '_Bool' lvalue Var 0x56169ed69e70 'weak$$choice0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7ce68 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x56169ed7ce48 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x56169ed7ce30 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x56169ed7ce10 <col:19> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x56169ed7cf30 <line:920:3, col:45> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7cea0 <col:3> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7cf18 <col:19, col:45> '_Bool' <PointerToBoolean>
    |   `-CallExpr 0x56169ed7cef8 <col:19, col:45> 'void *'
    |     `-ImplicitCastExpr 0x56169ed7cee0 <col:19> 'void *(*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x56169ed7cec0 <col:19> 'void *(void)' Function 0x56169ed0e958 '__VERIFIER_nondet_pointer' 'void *(void)'
    |-BinaryOperator 0x56169ed7cfa8 <line:921:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7cf50 <col:3> '_Bool' lvalue Var 0x56169ed68b00 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7cf90 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x56169ed7cf70 <col:21> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x56169ed7d020 <line:922:3, col:15> 'int' '='
    | |-DeclRefExpr 0x56169ed7cfc8 <col:3> 'int' lvalue Var 0x56169ed68b80 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x56169ed7d008 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x56169ed7cfe8 <col:15> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
    |-BinaryOperator 0x56169ed7d458 <line:923:3, col:162> 'int' '='
    | |-DeclRefExpr 0x56169ed7d040 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
    | `-ConditionalOperator 0x56169ed7d428 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x56169ed7d250 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x56169ed7d170 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x56169ed7d098 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x56169ed7d080 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x56169ed7d060 <col:8> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x56169ed7d150 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x56169ed7d0e8 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x56169ed7d0d0 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x56169ed7d0b0 <col:27> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x56169ed7d138 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x56169ed7d120 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x56169ed7d100 <col:46> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x56169ed7d230 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x56169ed7d1c8 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x56169ed7d1b0 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x56169ed7d190 <col:65> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x56169ed7d218 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x56169ed7d200 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x56169ed7d1e0 <col:84> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed7d410 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed7d270 <col:101> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
    |   `-ParenExpr 0x56169ed7d3f0 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x56169ed7d3c0 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x56169ed7d330 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x56169ed7d2e8 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x56169ed7d2d0 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x56169ed7d290 <col:106> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x56169ed7d318 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x56169ed7d300 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x56169ed7d2b0 <col:124> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56169ed7d390 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56169ed7d350 <col:141> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x56169ed7d3a8 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x56169ed7d370 <col:153> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
    |-BinaryOperator 0x56169ed7d968 <line:924:3, col:208> 'int' '='
    | |-DeclRefExpr 0x56169ed7d478 <col:3> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x56169ed7d938 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x56169ed7d908 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56169ed7d8f0 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56169ed7d498 <col:15> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed7d920 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed7d4b8 <col:31> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
    |   `-ParenExpr 0x56169ed7d8d0 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x56169ed7d8a0 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x56169ed7d6c8 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x56169ed7d5e8 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x56169ed7d510 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x56169ed7d4f8 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x56169ed7d4d8 <col:45> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x56169ed7d5c8 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x56169ed7d560 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x56169ed7d548 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x56169ed7d528 <col:64> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x56169ed7d5b0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x56169ed7d598 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x56169ed7d578 <col:83> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x56169ed7d6a8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x56169ed7d640 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x56169ed7d628 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x56169ed7d608 <col:102> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x56169ed7d690 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x56169ed7d678 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x56169ed7d658 <col:121> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56169ed7d888 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56169ed7d6e8 <col:138> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
    |       `-ParenExpr 0x56169ed7d868 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x56169ed7d838 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x56169ed7d7a8 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x56169ed7d760 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x56169ed7d748 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x56169ed7d708 <col:151> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x56169ed7d790 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x56169ed7d778 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56169ed7d728 <col:169> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x56169ed7d808 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56169ed7d7c8 <col:186> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x56169ed7d820 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x56169ed7d7e8 <col:198> 'int' lvalue Var 0x56169ed691a8 'x$w_buff0' 'int'
    |-BinaryOperator 0x56169ed7de90 <line:925:3, col:208> 'int' '='
    | |-DeclRefExpr 0x56169ed7d988 <col:3> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x56169ed7de60 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x56169ed7de30 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56169ed7de18 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56169ed7d9a8 <col:15> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed7de48 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed7d9c8 <col:31> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
    |   `-ParenExpr 0x56169ed7ddf8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x56169ed7ddc8 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x56169ed7dbd8 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x56169ed7daf8 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x56169ed7da20 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x56169ed7da08 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x56169ed7d9e8 <col:45> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x56169ed7dad8 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x56169ed7da70 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x56169ed7da58 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x56169ed7da38 <col:64> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x56169ed7dac0 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x56169ed7daa8 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x56169ed7da88 <col:83> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x56169ed7dbb8 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x56169ed7db50 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x56169ed7db38 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x56169ed7db18 <col:102> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x56169ed7dba0 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x56169ed7db88 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x56169ed7db68 <col:121> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x56169ed7ddb0 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x56169ed7dbf8 <col:138> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
    |       `-ParenExpr 0x56169ed7dd90 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x56169ed7dd60 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x56169ed7dcd0 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x56169ed7dc88 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x56169ed7dc70 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x56169ed7dc18 <col:151> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x56169ed7dcb8 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x56169ed7dca0 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56169ed7dc50 <col:169> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x56169ed7dd30 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56169ed7dcf0 <col:186> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x56169ed7dd48 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x56169ed7dd10 <col:198> 'int' lvalue Var 0x56169ed692a0 'x$w_buff1' 'int'
    |-BinaryOperator 0x56169ed7e438 <line:926:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7deb0 <col:3> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7e420 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7e3f0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x56169ed7e3a8 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7e390 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7ded0 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7e3d8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7e3c0 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7def0 <col:36> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x56169ed7e370 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x56169ed7e340 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x56169ed7e100 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56169ed7e020 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56169ed7df48 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56169ed7df30 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56169ed7df10 <col:55> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56169ed7e000 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56169ed7df98 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56169ed7df80 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56169ed7df60 <col:74> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56169ed7dfe8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56169ed7dfd0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56169ed7dfb0 <col:93> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56169ed7e0e0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56169ed7e078 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56169ed7e060 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56169ed7e040 <col:112> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56169ed7e0c8 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56169ed7e0b0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56169ed7e090 <col:131> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56169ed7e328 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56169ed7e310 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56169ed7e120 <col:148> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x56169ed7e2f0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x56169ed7e2c0 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x56169ed7e1e0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56169ed7e198 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56169ed7e180 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56169ed7e140 <col:166> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56169ed7e1c8 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56169ed7e1b0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56169ed7e160 <col:184> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56169ed7e278 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56169ed7e230 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56169ed7e200 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56169ed7e2a8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x56169ed7e290 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x56169ed7e258 <col:212> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x56169ed7ea00 <line:927:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7e458 <col:3> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7e9e8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7e9b8 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x56169ed7e970 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7e958 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7e478 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7e9a0 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7e988 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7e498 <col:36> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x56169ed7e938 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x56169ed7e908 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x56169ed7e6a8 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56169ed7e5c8 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56169ed7e4f0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56169ed7e4d8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56169ed7e4b8 <col:55> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56169ed7e5a8 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56169ed7e540 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56169ed7e528 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56169ed7e508 <col:74> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56169ed7e590 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56169ed7e578 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56169ed7e558 <col:93> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56169ed7e688 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56169ed7e620 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56169ed7e608 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56169ed7e5e8 <col:112> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56169ed7e670 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56169ed7e658 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56169ed7e638 <col:131> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56169ed7e8f0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56169ed7e8d8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56169ed7e6c8 <col:148> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x56169ed7e8b8 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x56169ed7e888 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x56169ed7e788 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56169ed7e740 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56169ed7e728 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56169ed7e6e8 <col:166> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56169ed7e770 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56169ed7e758 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56169ed7e708 <col:184> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56169ed7e858 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56169ed7e7d8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56169ed7e7a8 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56169ed7e870 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x56169ed7e830 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x56169ed7e800 <col:219> 'int' 0
    |-BinaryOperator 0x56169ed7efb8 <line:928:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7ea20 <col:3> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7efa0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7ef70 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x56169ed7ef28 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7ef10 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7ea40 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7ef58 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7ef40 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7ea60 <col:36> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x56169ed7eef0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x56169ed7eec0 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x56169ed7ec80 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56169ed7eb90 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56169ed7eab8 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56169ed7eaa0 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56169ed7ea80 <col:55> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56169ed7eb70 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56169ed7eb08 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56169ed7eaf0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56169ed7ead0 <col:74> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56169ed7eb58 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56169ed7eb40 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56169ed7eb20 <col:93> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56169ed7ec60 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56169ed7ebe8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56169ed7ebd0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56169ed7ebb0 <col:112> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56169ed7ec38 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56169ed7ec20 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56169ed7ec00 <col:131> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56169ed7eea8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56169ed7ee90 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56169ed7eca0 <col:148> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x56169ed7ee70 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x56169ed7ee40 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x56169ed7ed60 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56169ed7ed18 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56169ed7ed00 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56169ed7ecc0 <col:166> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56169ed7ed48 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56169ed7ed30 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56169ed7ece0 <col:184> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56169ed7edf8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56169ed7edb0 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56169ed7ed80 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56169ed7ee28 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x56169ed7ee10 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x56169ed7edd8 <col:212> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x56169ed7f580 <line:929:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7efd8 <col:3> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7f568 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x56169ed7f538 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x56169ed7f4f0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7f4d8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7eff8 <col:20> '_Bool' lvalue Var 0x56169ed69ee8 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x56169ed7f520 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x56169ed7f508 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56169ed7f018 <col:36> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x56169ed7f4b8 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x56169ed7f488 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x56169ed7f228 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x56169ed7f148 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x56169ed7f070 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x56169ed7f058 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x56169ed7f038 <col:55> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x56169ed7f128 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x56169ed7f0c0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x56169ed7f0a8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x56169ed7f088 <col:74> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x56169ed7f110 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x56169ed7f0f8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x56169ed7f0d8 <col:93> '_Bool' lvalue Var 0x56169ed69318 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x56169ed7f208 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x56169ed7f1a0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x56169ed7f188 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x56169ed7f168 <col:112> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x56169ed7f1f0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x56169ed7f1d8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x56169ed7f1b8 <col:131> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x56169ed7f470 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x56169ed7f458 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x56169ed7f248 <col:148> '_Bool' lvalue Var 0x56169ed68e50 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x56169ed7f438 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x56169ed7f408 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x56169ed7f308 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x56169ed7f2c0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x56169ed7f2a8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x56169ed7f268 <col:166> '_Bool' lvalue Var 0x56169ed69220 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x56169ed7f2f0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x56169ed7f2d8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x56169ed7f288 <col:184> '_Bool' lvalue Var 0x56169ed68bf8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x56169ed7f3d8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x56169ed7f358 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x56169ed7f328 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x56169ed7f3f0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x56169ed7f3b0 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x56169ed7f380 <col:219> 'int' 0
    |-BinaryOperator 0x56169ed7f980 <line:930:3, col:151> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7f5a0 <col:3> '_Bool' lvalue Var 0x56169ed68928 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x56169ed7f968 <col:21, col:151> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x56169ed7f950 <col:21, col:151> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x56169ed7f930 <col:22, col:151> 'int'
    |       `-BinaryOperator 0x56169ed7f910 <col:23, col:150> 'int' '&&'
    |         |-BinaryOperator 0x56169ed7f878 <col:23, col:122> 'int' '&&'
    |         | |-BinaryOperator 0x56169ed7f7e0 <col:23, col:94> 'int' '&&'
    |         | | |-BinaryOperator 0x56169ed7f748 <col:23, col:66> 'int' '&&'
    |         | | | |-BinaryOperator 0x56169ed7f6b0 <col:23, col:38> 'int' '&&'
    |         | | | | |-BinaryOperator 0x56169ed7f618 <col:23, col:28> 'int' '=='
    |         | | | | | |-ImplicitCastExpr 0x56169ed7f600 <col:23> 'int' <LValueToRValue>
    |         | | | | | | `-DeclRefExpr 0x56169ed7f5c0 <col:23> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
    |         | | | | | `-IntegerLiteral 0x56169ed7f5e0 <col:28> 'int' 2
    |         | | | | `-BinaryOperator 0x56169ed7f690 <col:33, col:38> 'int' '=='
    |         | | | |   |-ImplicitCastExpr 0x56169ed7f678 <col:33> 'int' <LValueToRValue>
    |         | | | |   | `-DeclRefExpr 0x56169ed7f638 <col:33> 'int' lvalue Var 0x56169ed69538 'z' 'int'
    |         | | | |   `-IntegerLiteral 0x56169ed7f658 <col:38> 'int' 2
    |         | | | `-BinaryOperator 0x56169ed7f728 <col:43, col:66> 'int' '=='
    |         | | |   |-ImplicitCastExpr 0x56169ed7f710 <col:43> 'int' <LValueToRValue>
    |         | | |   | `-DeclRefExpr 0x56169ed7f6d0 <col:43> 'int' lvalue Var 0x56169ed68398 '__unbuffered_p1_EAX' 'int'
    |         | | |   `-IntegerLiteral 0x56169ed7f6f0 <col:66> 'int' 2
    |         | | `-BinaryOperator 0x56169ed7f7c0 <col:71, col:94> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x56169ed7f7a8 <col:71> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x56169ed7f768 <col:71> 'int' lvalue Var 0x56169ed684b8 '__unbuffered_p1_EBX' 'int'
    |         | |   `-IntegerLiteral 0x56169ed7f788 <col:94> 'int' 0
    |         | `-BinaryOperator 0x56169ed7f858 <col:99, col:122> 'int' '=='
    |         |   |-ImplicitCastExpr 0x56169ed7f840 <col:99> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x56169ed7f800 <col:99> 'int' lvalue Var 0x56169ed685d8 '__unbuffered_p3_EAX' 'int'
    |         |   `-IntegerLiteral 0x56169ed7f820 <col:122> 'int' 2
    |         `-BinaryOperator 0x56169ed7f8f0 <col:127, col:150> 'int' '=='
    |           |-ImplicitCastExpr 0x56169ed7f8d8 <col:127> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x56169ed7f898 <col:127> 'int' lvalue Var 0x56169ed686f8 '__unbuffered_p3_EBX' 'int'
    |           `-IntegerLiteral 0x56169ed7f8b8 <col:150> 'int' 0
    |-BinaryOperator 0x56169ed7fab0 <line:931:3, col:37> 'int' '='
    | |-DeclRefExpr 0x56169ed7f9a0 <col:3> 'int' lvalue Var 0x56169ed69538 'z' 'int'
    | `-ConditionalOperator 0x56169ed7fa80 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x56169ed7fa38 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56169ed7fa20 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56169ed7f9c0 <col:7> '_Bool' lvalue Var 0x56169ed695d0 'z$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed7fa50 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed7f9e0 <col:25> 'int' lvalue Var 0x56169ed69650 'z$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x56169ed7fa68 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x56169ed7fa00 <col:37> 'int' lvalue Var 0x56169ed69538 'z' 'int'
    |-BinaryOperator 0x56169ed7fb48 <line:932:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7fad0 <col:3> '_Bool' lvalue Var 0x56169ed695d0 'z$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x56169ed7fb20 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x56169ed7faf0 <col:28> 'int' 0
    |-BinaryOperator 0x56169ed7fca0 <line:933:3, col:37> 'int' '='
    | |-DeclRefExpr 0x56169ed7fb68 <col:3> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
    | `-ConditionalOperator 0x56169ed7fc70 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x56169ed7fc00 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x56169ed7fbe8 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x56169ed7fb88 <col:7> '_Bool' lvalue Var 0x56169ed68b00 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x56169ed7fc18 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x56169ed7fba8 <col:25> 'int' lvalue Var 0x56169ed68b80 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x56169ed7fc30 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x56169ed7fbc8 <col:37> 'int' lvalue Var 0x56169ed68a28 'x' 'int'
    |-BinaryOperator 0x56169ed7fd38 <line:934:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x56169ed7fcc0 <col:3> '_Bool' lvalue Var 0x56169ed68b00 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x56169ed7fd10 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x56169ed7fce0 <col:28> 'int' 0
    |-CallExpr 0x56169ed7fd90 <line:935:3, col:25> 'void'
    | `-ImplicitCastExpr 0x56169ed7fd78 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x56169ed7fd58 <col:3> 'void ()' Function 0x56169ed0ef00 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x56169ed7fe08 <line:936:3, col:36> 'void'
    | |-ImplicitCastExpr 0x56169ed7fdf0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x56169ed7fdb0 <col:3> 'void (int)' Function 0x56169ed0ebc8 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x56169ed7fe48 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x56169ed7fe30 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x56169ed7fdd0 <col:21> '_Bool' lvalue Var 0x56169ed68928 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x56169ed7fe80 <line:937:3, col:10>
      `-IntegerLiteral 0x56169ed7fe60 <col:10> 'int' 0
