TranslationUnitDecl 0x560ee08ebe18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x560ee08ec6d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x560ee08ec3b0 '__int128'
|-TypedefDecl 0x560ee08ec748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x560ee08ec3d0 'unsigned __int128'
|-TypedefDecl 0x560ee08eca50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x560ee08ec820 'struct __NSConstantString_tag'
|   `-Record 0x560ee08ec7a0 '__NSConstantString_tag'
|-TypedefDecl 0x560ee08ecaf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x560ee08ecab0 'char *'
|   `-BuiltinType 0x560ee08ebeb0 'char'
|-TypedefDecl 0x560ee092b650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x560ee08ecd90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x560ee08ecbd0 'struct __va_list_tag'
|     `-Record 0x560ee08ecb50 '__va_list_tag'
|-FunctionDecl 0x560ee092b770 <./test/rfi002_pso.oepc_true-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x560ee092b940 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x560ee092b870 <col:31> col:34 'int'
|-FunctionDecl 0x560ee092bab8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x560ee092bbe0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x560ee092bd28 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x560ee092bc98 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x560ee092bf58 <col:40, col:99>
|   |-IfStmt 0x560ee092bf28 <col:42, col:88>
|   | |-UnaryOperator 0x560ee092be08 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x560ee092bdf0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x560ee092bdd0 <col:47> 'int' lvalue ParmVar 0x560ee092bc98 'expression' 'int'
|   | `-CompoundStmt 0x560ee092bf10 <col:59, col:88>
|   |   `-LabelStmt 0x560ee092bef8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x560ee092be88 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x560ee092be70 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x560ee092be20 <col:68> 'void () __attribute__((noreturn))' Function 0x560ee092bbe0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x560ee092bf40 <col:89>
|   `-ReturnStmt 0x560ee092bf48 <col:91>
|-FunctionDecl 0x560ee092bfa0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x560ee092c060 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x560ee092c3e0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x560ee092c118 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x560ee092c198 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x560ee092c218 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x560ee092c298 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x560ee092c4a0 <line:11:22>
|-FunctionDecl 0x560ee0952520 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x560ee092c510 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x560ee092c590 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x560ee0952350 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x560ee09523d0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x560ee09525e0 <line:14:22>
|-FunctionDecl 0x560ee0952890 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x560ee0952650 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x560ee09526d0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x560ee0952750 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x560ee0952948 <line:16:22>
|-TypedefDecl 0x560ee09529b8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x560ee08ebf70 'unsigned char'
|-TypedefDecl 0x560ee0952a28 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x560ee08ebf90 'unsigned short'
|-TypedefDecl 0x560ee0952a98 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-TypedefDecl 0x560ee0952b08 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0952b78 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x560ee08ebed0 'signed char'
|-TypedefDecl 0x560ee0952be8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x560ee08ebf70 'unsigned char'
|-TypedefDecl 0x560ee0952c58 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x560ee08ebef0 'short'
|-TypedefDecl 0x560ee0952cc8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x560ee08ebf90 'unsigned short'
|-TypedefDecl 0x560ee0952d38 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x560ee08ebf10 'int'
|-TypedefDecl 0x560ee0952da8 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-TypedefDecl 0x560ee0952e18 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0952e88 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0952ef8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0952f68 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0952fd8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0953048 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-TypedefDecl 0x560ee09530b8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-TypedefDecl 0x560ee0953128 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0953198 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0953208 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-TypedefDecl 0x560ee0953278 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee09532e8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0953378 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee09533e8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x560ee08ebf10 'int'
|-RecordDecl 0x560ee0953440 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x560ee0953588 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x560ee0953640 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x560ee09535e0 'struct __fsid_t' sugar
|   `-RecordType 0x560ee09534c0 '__fsid_t'
|     `-Record 0x560ee0953440 ''
|-TypedefDecl 0x560ee09536c8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0953738 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee09537a8 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0953818 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-TypedefDecl 0x560ee0953888 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee09538f8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-TypedefDecl 0x560ee0953968 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee09539d8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x560ee08ebf10 'int'
|-TypedefDecl 0x560ee0953a48 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x560ee08ebf10 'int'
|-TypedefDecl 0x560ee0953ab8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x560ee08ebf10 'int'
|-TypedefDecl 0x560ee0953b28 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x560ee08ec630 'void *'
|   `-BuiltinType 0x560ee08ebe70 'void'
|-TypedefDecl 0x560ee0953b98 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0953c08 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0953c78 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0953ce8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0953d58 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0953dc8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0953e38 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0953ea8 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0953f18 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0953f88 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0953ff8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0954088 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x560ee0954050 '__off64_t' sugar
|   |-Typedef 0x560ee0953378 '__off64_t'
|   `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee0954180 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x560ee0954140 '__quad_t *'
|   `-TypedefType 0x560ee09540e0 '__quad_t' sugar
|     |-Typedef 0x560ee0952ef8 '__quad_t'
|     `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee09541f0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x560ee08ecab0 'char *'
|   `-BuiltinType 0x560ee08ebeb0 'char'
|-TypedefDecl 0x560ee0954260 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee09542d0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-FunctionDecl 0x560ee0955458 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x560ee0955380 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x560ee0955768 <line:72:1, line:74:1>
|   `-ReturnStmt 0x560ee0955758 <line:73:3, col:34>
|     `-CallExpr 0x560ee0955718 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x560ee0955700 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x560ee0955690 <col:10> '<builtin fn type>' Function 0x560ee0955500 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x560ee0955740 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x560ee09556b0 <col:29> 'unsigned int' lvalue ParmVar 0x560ee0955380 '__bsx' 'unsigned int'
|-FunctionDecl 0x560ee0955500 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x560ee09555a0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x560ee0955610 <col:10> Implicit
| `-ConstAttr 0x560ee0955668 <col:10> Implicit
|-FunctionDecl 0x560ee09558c0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x560ee09557b8 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x560ee0955bd8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x560ee0955bc8 <line:78:3, col:34>
|     `-CallExpr 0x560ee0955b88 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x560ee0955b70 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x560ee0955af8 <col:10> '<builtin fn type>' Function 0x560ee0955968 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x560ee0955bb0 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x560ee0955b18 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x560ee09557b8 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x560ee0955968 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x560ee0955a08 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x560ee0955a78 <col:10> Implicit
| `-ConstAttr 0x560ee0955ad0 <col:10> Implicit
|-TypedefDecl 0x560ee0955c08 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-TypedefDecl 0x560ee0955c98 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x560ee0955c60 '__time_t' sugar
|   |-Typedef 0x560ee0953888 '__time_t'
|   `-BuiltinType 0x560ee08ebf30 'long'
|-RecordDecl 0x560ee0955cf0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x560ee0955da8 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x560ee0955e38 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x560ee0955ec8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x560ee0955e90 '__pid_t' sugar
|   |-Typedef 0x560ee09533e8 '__pid_t'
|   `-BuiltinType 0x560ee08ebf10 'int'
|-RecordDecl 0x560ee0955f20 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x560ee0955fe0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x560ee0956030 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x560ee09560f0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x560ee0956158 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-RecordDecl 0x560ee09561b0 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x560ee0957480 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x560ee0957530 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x560ee09574d0 'struct cpu_set_t' sugar
|   `-RecordType 0x560ee0956230 'cpu_set_t'
|     `-Record 0x560ee09561b0 ''
|-FunctionDecl 0x560ee0957808 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x560ee09575d8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x560ee09576e0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x560ee09578b8 <line:108:19>
|-FunctionDecl 0x560ee0957a90 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x560ee0957920 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x560ee0957b38 <col:69>
|-FunctionDecl 0x560ee0957cb0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x560ee0957ba0 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x560ee0957d58 <col:64>
|-FunctionDecl 0x560ee0958018 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x560ee0957dc0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x560ee0957ef8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x560ee09580c8 <line:114:22>
|-FunctionDecl 0x560ee09583b0 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x560ee0958130 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x560ee0958228 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x560ee0958460 <col:88>
|-FunctionDecl 0x560ee0958718 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x560ee09584c8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x560ee0958548 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x560ee09585d8 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x560ee09587d0 <col:62>
|-FunctionDecl 0x560ee0958948 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x560ee0958838 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x560ee09589f0 <col:63>
|-FunctionDecl 0x560ee0958b18 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x560ee0958bb8 <col:47>
|-FunctionDecl 0x560ee0958cc0 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x560ee0958c28 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x560ee0958d68 <col:69>
|-FunctionDecl 0x560ee0958e70 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x560ee0958dd8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x560ee0958f18 <col:69>
|-FunctionDecl 0x560ee09591d8 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x560ee0958f80 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x560ee09590b8 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x560ee0959288 <col:88>
|-TypedefDecl 0x560ee0959318 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x560ee09592e0 '__clock_t' sugar
|   |-Typedef 0x560ee09536c8 '__clock_t'
|   `-BuiltinType 0x560ee08ebf30 'long'
|-TypedefDecl 0x560ee09593c0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x560ee0959370 '__clockid_t' sugar
|   |-Typedef 0x560ee0953ab8 '__clockid_t'
|   `-BuiltinType 0x560ee08ebf10 'int'
|-TypedefDecl 0x560ee0959458 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x560ee0959420 '__timer_t' sugar
|   |-Typedef 0x560ee0953b28 '__timer_t'
|   `-PointerType 0x560ee08ec630 'void *'
|     `-BuiltinType 0x560ee08ebe70 'void'
|-RecordDecl 0x560ee09594b0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x560ee0959570 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x560ee09595d8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x560ee0959640 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x560ee09596a8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x560ee0959710 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x560ee0959778 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x560ee09597e0 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x560ee0959848 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x560ee09598b0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x560ee0959918 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x560ee0959980 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x560ee09599d0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x560ee0959a98 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x560ee0959b08 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x560ee0959bb0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x560ee0959d80 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x560ee0959e20 <col:45>
|-FunctionDecl 0x560ee095a000 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x560ee0959ef0 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x560ee095a0a8 <col:54>
|-FunctionDecl 0x560ee095a2a8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x560ee095a110 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x560ee095a188 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x560ee095a358 <line:158:22>
| `-ConstAttr 0x560ee095aff0 <col:63>
|-FunctionDecl 0x560ee095b1f0 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x560ee095b0e8 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x560ee095b298 <col:56>
|-FunctionDecl 0x560ee095b640 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x560ee095b308 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x560ee095b380 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x560ee095b400 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x560ee095b4f8 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x560ee095b700 <col:54>
|-RecordDecl 0x560ee095b758 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x560ee095b808 parent 0x560ee08ebe18 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x560ee095ba68 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x560ee095bb08 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x560ee095bb70 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x560ee095bbd8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x560ee095bcc8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x560ee095bde8 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x560ee095bd90 'struct __locale_struct *'
|   `-ElaboratedType 0x560ee095bd20 'struct __locale_struct' sugar
|     `-RecordType 0x560ee095b7e0 'struct __locale_struct'
|       `-Record 0x560ee095b758 '__locale_struct'
|-TypedefDecl 0x560ee095be98 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x560ee095be60 '__locale_t' sugar
|   |-Typedef 0x560ee095bde8 '__locale_t'
|   `-PointerType 0x560ee095bd90 'struct __locale_struct *'
|     `-ElaboratedType 0x560ee095bd20 'struct __locale_struct' sugar
|       `-RecordType 0x560ee095b7e0 'struct __locale_struct'
|         `-Record 0x560ee095b758 '__locale_struct'
|-FunctionDecl 0x560ee095d2a0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x560ee095bf08 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x560ee095bf80 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x560ee095d028 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x560ee095d0b8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x560ee095d130 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x560ee095d368 <col:40>
|-FunctionDecl 0x560ee095d558 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x560ee095d430 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x560ee095d600 <col:66>
|-FunctionDecl 0x560ee095d710 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x560ee095d668 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x560ee095d7b8 <col:69>
|-FunctionDecl 0x560ee095d9e8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x560ee095d820 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x560ee095d8b0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x560ee095da98 <col:52>
|-FunctionDecl 0x560ee095dc40 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x560ee095db00 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x560ee095db90 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x560ee095dcf0 <col:55>
|-FunctionDecl 0x560ee095de88 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x560ee095dd70 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x560ee095df30 <col:62>
|-FunctionDecl 0x560ee095e168 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x560ee095df98 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x560ee095e210 <col:60>
|-FunctionDecl 0x560ee095e438 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x560ee095e290 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x560ee095e310 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x560ee095e4e8 <col:44>
|-FunctionDecl 0x560ee095e6f8 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x560ee095e550 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x560ee095e5d0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x560ee095e7a8 <col:49>
|-VarDecl 0x560ee095e8a8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x560ee095e928 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x560ee095e9a8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x560ee095ea70 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x560ee095eba0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x560ee095ec40 <col:42>
|-VarDecl 0x560ee095ecb0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x560ee095ed30 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x560ee095eeb8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x560ee095eda8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x560ee095ef60 <col:57>
|-FunctionDecl 0x560ee095f0d0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x560ee095efe0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x560ee095f178 <col:56>
|-FunctionDecl 0x560ee095f288 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x560ee095f1f8 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x560ee095f330 <col:59>
|-FunctionDecl 0x560ee095f438 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x560ee095f3a0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x560ee095f4e0 <col:48>
| `-ConstAttr 0x560ee095f538 <col:89>
|-FunctionDecl 0x560ee095f798 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x560ee095f5e8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x560ee095f678 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x560ee095f9f8 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x560ee095f888 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560ee095f918 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x560ee095faa8 <col:88>
|-FunctionDecl 0x560ee095fc40 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x560ee095fb10 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560ee095fba0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x560ee095fcf0 <col:88>
|-FunctionDecl 0x560ee095ff08 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x560ee095fd58 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560ee095fde8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x560ee095ffb8 <line:209:22>
|-FunctionDecl 0x560ee0960358 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x560ee0960020 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560ee09600e0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x560ee0960170 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x560ee0960200 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x560ee0960658 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x560ee0960458 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x560ee0960530 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x560ee0960708 <col:85>
|-FunctionDecl 0x560ee0960af8 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x560ee0960770 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x560ee09608a8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x560ee09609b0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x560ee0960bb0 <col:52>
|-FunctionDecl 0x560ee0960d28 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x560ee0960c18 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x560ee0960dd0 <col:61>
|-FunctionDecl 0x560ee0961248 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x560ee0960e38 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x560ee0960eb8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x560ee0960fe8 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x560ee09610f0 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x560ee0961308 <col:62>
|-FunctionDecl 0x560ee0961528 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x560ee0961370 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x560ee0961400 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x560ee09615d8 <line:222:22>
|-FunctionDecl 0x560ee09616d8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x560ee0961640 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x560ee0961780 <col:65>
|-TypedefDecl 0x560ee09617f0 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x560ee08ebfd0 'unsigned long'
|-RecordDecl 0x560ee0961848 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x560ee0961990 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x560ee09619f8 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560ee0961aa8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x560ee0961a50 'union pthread_attr_t' sugar
|   `-RecordType 0x560ee09618d0 'union pthread_attr_t'
|     `-Record 0x560ee0961848 'pthread_attr_t'
|-RecordDecl 0x560ee0961b00 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x560ee0961c78 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x560ee0961cf0 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x560ee0961da0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x560ee0961d40 'struct __pthread_internal_list' sugar
|   `-RecordType 0x560ee0961b80 'struct __pthread_internal_list'
|     `-Record 0x560ee0961b00 '__pthread_internal_list'
|-RecordDecl 0x560ee0961e10 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x560ee0961eb8 parent 0x560ee08ebe18 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x560ee0961f90 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x560ee0961ff8 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x560ee0962060 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x560ee0966110 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x560ee0966178 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x560ee09661e0 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x560ee0966268 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x560ee0966320 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x560ee0966410 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x560ee0966478 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560ee0966600 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x560ee09665a0 'union pthread_mutex_t' sugar
|   `-RecordType 0x560ee0961e90 'pthread_mutex_t'
|     `-Record 0x560ee0961e10 ''
|-RecordDecl 0x560ee0966670 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x560ee09667b0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x560ee0966818 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x560ee09668d0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x560ee0966870 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x560ee09666f0 'pthread_mutexattr_t'
|     `-Record 0x560ee0966670 ''
|-RecordDecl 0x560ee0966940 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x560ee09669e8 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x560ee0966ab0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x560ee0966b18 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x560ee0966b80 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x560ee0966be8 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x560ee0966c50 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x560ee0966cb8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x560ee0966d20 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x560ee0966d88 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x560ee0966e40 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at ./test/rfi002_pso.oepc_true-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at ./test/rfi002_pso.oepc_true-unreach-call.i:259:3)'
| |-FieldDecl 0x560ee0966f30 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x560ee0966f98 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x560ee0968130 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x560ee0967070 'union pthread_cond_t' sugar
|   `-RecordType 0x560ee09669c0 'pthread_cond_t'
|     `-Record 0x560ee0966940 ''
|-RecordDecl 0x560ee09681a0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x560ee09682a0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x560ee0968308 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x560ee09683c0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x560ee0968360 'union pthread_condattr_t' sugar
|   `-RecordType 0x560ee0968220 'pthread_condattr_t'
|     `-Record 0x560ee09681a0 ''
|-TypedefDecl 0x560ee0968448 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x560ee08ebfb0 'unsigned int'
|-TypedefDecl 0x560ee09684b8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x560ee08ebf10 'int'
|-RecordDecl 0x560ee0968510 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x560ee09685b8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x560ee0968680 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x560ee09686e8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x560ee0968750 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x560ee09687b8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x560ee0968820 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x560ee0968888 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x560ee09688f0 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x560ee0968958 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x560ee09689c0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x560ee0968a28 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x560ee0968a90 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x560ee0968b40 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at ./test/rfi002_pso.oepc_true-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at ./test/rfi002_pso.oepc_true-unreach-call.i:282:3)'
| |-FieldDecl 0x560ee0968be8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x560ee0968c50 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560ee0968da0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x560ee0968d40 'union pthread_rwlock_t' sugar
|   `-RecordType 0x560ee0968590 'pthread_rwlock_t'
|     `-Record 0x560ee0968510 ''
|-RecordDecl 0x560ee0968e10 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x560ee0968f50 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x560ee0968fb8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560ee0969070 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x560ee0969010 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x560ee0968e90 'pthread_rwlockattr_t'
|     `-Record 0x560ee0968e10 ''
|-TypedefDecl 0x560ee096a140 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x560ee08ebf14 'volatile int' volatile
|   `-BuiltinType 0x560ee08ebf10 'int'
|-RecordDecl 0x560ee096a198 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x560ee096a2e0 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x560ee096a348 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x560ee096a400 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x560ee096a3a0 'union pthread_barrier_t' sugar
|   `-RecordType 0x560ee096a220 'pthread_barrier_t'
|     `-Record 0x560ee096a198 ''
|-RecordDecl 0x560ee096a470 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x560ee096a570 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x560ee096a5d8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x560ee096a690 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x560ee096a630 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x560ee096a4f0 'pthread_barrierattr_t'
|     `-Record 0x560ee096a470 ''
|-TypedefDecl 0x560ee096a7a8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x560ee096a740 'long [8]' 8 
|   `-BuiltinType 0x560ee08ebf30 'long'
|-EnumDecl 0x560ee096a800 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x560ee096a8c8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x560ee096a918 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x560ee096a968 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x560ee096aa38 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x560ee096aa88 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x560ee096aad8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x560ee096ab28 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x560ee096abb0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x560ee096ab98 <col:26> 'int'
| |   `-DeclRefExpr 0x560ee096ab78 <col:26> 'int' EnumConstant 0x560ee096aa38 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x560ee096ac38 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x560ee096ac20 <col:29> 'int'
| |   `-DeclRefExpr 0x560ee096ac00 <col:29> 'int' EnumConstant 0x560ee096aa88 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x560ee096acc0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x560ee096aca8 <col:30> 'int'
| |   `-DeclRefExpr 0x560ee096ac88 <col:30> 'int' EnumConstant 0x560ee096aad8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x560ee096ad48 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x560ee096ad30 <col:27> 'int'
|     `-DeclRefExpr 0x560ee096ad10 <col:27> 'int' EnumConstant 0x560ee096abb0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x560ee096ad98 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x560ee096ae68 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x560ee096aef0 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x560ee096aed8 <col:30> 'int'
| |   `-DeclRefExpr 0x560ee096aeb8 <col:30> 'int' EnumConstant 0x560ee096ae68 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x560ee096af40 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x560ee096afc8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x560ee096afb0 <col:29> 'int'
|     `-DeclRefExpr 0x560ee096af90 <col:29> 'int' EnumConstant 0x560ee096af40 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x560ee096b018 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x560ee096b0e8 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x560ee096b150 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x560ee096b1a0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x560ee096b1f0 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x560ee096b2b8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x560ee096b308 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x560ee096b358 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x560ee096b3e0 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x560ee096b3c8 <col:31> 'int'
|     `-DeclRefExpr 0x560ee096b3a8 <col:31> 'int' EnumConstant 0x560ee096b2b8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x560ee096b430 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x560ee096b4f8 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x560ee096b548 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x560ee096b598 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x560ee096b668 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x560ee096b6b8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x560ee096b708 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x560ee096b7d8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x560ee096b828 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x560ee096b878 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x560ee096bab8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x560ee096bb20 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x560ee096bb88 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x560ee096bca8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x560ee096bcf8 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x560ee096bdc8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x560ee096be18 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x560ee096be68 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x560ee096bf38 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x560ee096bf88 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x560ee096c5b8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x560ee096c080 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x560ee096c1a0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee096c3a0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x560ee096c420 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x560ee096c678 <col:47>
| |-NonNullAttr 0x560ee096c6d0 <col:77, col:94> 1 3
| `-CallbackAttr 0x560ee096c708 <line:386:12> Implicit 2 3
|-FunctionDecl 0x560ee096c830 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x560ee096c760 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x560ee096ca88 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x560ee096c8e8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x560ee096c968 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x560ee096cc58 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x560ee096cb48 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x560ee096cd00 <col:60>
|-FunctionDecl 0x560ee096ce50 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x560ee096cef0 <col:54>
| `-ConstAttr 0x560ee096cf48 <col:95>
|-FunctionDecl 0x560ee096e990 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x560ee096cf80 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560ee096cff8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x560ee096ea40 <line:395:19>
| `-ConstAttr 0x560ee096ea98 <col:60>
|-FunctionDecl 0x560ee096ec68 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x560ee096eb30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x560ee096ed10 <col:71>
| `-NonNullAttr 0x560ee096ed68 <col:112, col:126> 1
|-FunctionDecl 0x560ee096ee70 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x560ee096edb8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x560ee096ef18 <line:398:22>
| `-NonNullAttr 0x560ee096ef70 <col:63, col:77> 1
|-FunctionDecl 0x560ee096f198 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x560ee096efb8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x560ee096f038 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x560ee096f248 <line:401:22>
| `-NonNullAttr 0x560ee096f2a0 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee096f4a8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x560ee096f2e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560ee096f368 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x560ee096f558 <line:404:22>
| `-NonNullAttr 0x560ee096f5b0 <col:63, col:77> 1
|-FunctionDecl 0x560ee096f808 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x560ee096f5f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x560ee096f6a0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x560ee096f8b8 <line:407:22>
| `-NonNullAttr 0x560ee096f910 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0970b68 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x560ee09709b0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560ee0970a28 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x560ee0970c18 <line:410:22>
| `-NonNullAttr 0x560ee0970c70 <col:63, col:77> 1
|-FunctionDecl 0x560ee0970ea8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x560ee0970cb8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee0970d48 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x560ee0970f58 <line:413:22>
| `-NonNullAttr 0x560ee0970fb0 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee09711e8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x560ee0970ff8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee0971088 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x560ee0971298 <col:37>
| `-NonNullAttr 0x560ee09712f0 <col:78, col:95> 1 2
|-FunctionDecl 0x560ee09714d8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee0971338 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee09713b8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x560ee0971588 <line:419:22>
| `-NonNullAttr 0x560ee09715e0 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0971768 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x560ee0971628 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560ee09716a8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x560ee0971818 <line:421:22>
| `-NonNullAttr 0x560ee0971870 <col:63, col:77> 1
|-FunctionDecl 0x560ee0971a38 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee09718b8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee0971938 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x560ee0971ae8 <line:424:22>
| `-NonNullAttr 0x560ee0971b40 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0971cc8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x560ee0971b88 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560ee0971c08 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x560ee0971d78 <line:427:22>
| `-NonNullAttr 0x560ee0971dd0 <col:63, col:77> 1
|-FunctionDecl 0x560ee0971f78 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee0971e18 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee0971e98 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x560ee0972028 <line:430:22>
| `-NonNullAttr 0x560ee0972080 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0972208 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x560ee09720c8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560ee0972148 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x560ee09722b8 <line:432:22>
| `-NonNullAttr 0x560ee0972310 <col:63, col:77> 1
|-FunctionDecl 0x560ee0972538 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x560ee0972358 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee09723d8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x560ee09725e8 <line:435:22>
| |-NonNullAttr 0x560ee0972640 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x560ee0972678 <col:100> "" ""
|-FunctionDecl 0x560ee0972888 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x560ee09726c8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560ee0972748 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x560ee0972938 <line:438:22>
| |-NonNullAttr 0x560ee0972990 <col:63, col:77> 1
| `-DeprecatedAttr 0x560ee09729d8 <col:97> "" ""
|-FunctionDecl 0x560ee0972bc8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x560ee0972a28 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee0972aa0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x560ee0972c78 <line:441:22>
| `-NonNullAttr 0x560ee0972cd0 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0972e50 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x560ee0972d18 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560ee0972d90 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x560ee0972f00 <line:444:22>
| `-NonNullAttr 0x560ee0972f58 <col:63, col:77> 1
|-FunctionDecl 0x560ee0973248 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x560ee0972fa8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x560ee0973028 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x560ee09730a0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x560ee0973300 <line:448:22>
| `-NonNullAttr 0x560ee0973358 <col:63, col:83> 1 2 3
|-FunctionDecl 0x560ee0973608 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x560ee09733b0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x560ee0973430 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x560ee09734a8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x560ee09736c0 <col:43>
| `-NonNullAttr 0x560ee0973718 <col:84, col:98> 1
|-FunctionDecl 0x560ee0973a20 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x560ee0973768 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560ee09737e8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x560ee0973878 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x560ee0973ad8 <line:453:22>
| `-NonNullAttr 0x560ee0973b30 <col:63, col:77> 3
|-FunctionDecl 0x560ee0973e08 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x560ee0973b78 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560ee0973bf8 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x560ee0973c88 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x560ee0973ec0 <line:457:22>
| `-NonNullAttr 0x560ee0973f18 <col:63, col:80> 2 3
|-FunctionDecl 0x560ee0974108 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x560ee0973f68 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560ee0973fe8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x560ee09741b8 <line:459:22>
|-FunctionDecl 0x560ee0974588 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x560ee0974280 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x560ee0974420 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x560ee0974638 <col:52, col:69> 1 2
|-FunctionDecl 0x560ee09747e0 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x560ee09746c0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x560ee0974740 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x560ee09749f0 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x560ee09748a8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x560ee0974928 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x560ee0974b48 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x560ee0974ab0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x560ee0974c88 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x560ee0974d28 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x560ee0974dd8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x560ee0974ec8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x560ee0974f30 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x560ee0975100 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./test/rfi002_pso.oepc_true-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x560ee09751f8 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x560ee09752b0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x560ee0975250 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x560ee0974db0 '__pthread_unwind_buf_t'
| |   `-Record 0x560ee0974d28 ''
| `-AlignedAttr 0x560ee0975308 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x560ee0975380 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x560ee09754e0 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x560ee0975548 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x560ee09755b0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x560ee0975618 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x560ee0975820 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x560ee0975710 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x560ee0975a00 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x560ee09758d8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x560ee0975bc0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x560ee0975ab8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x560ee0975c68 <line:488:22>
|-RecordDecl 0x560ee0975cc0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x560ee0975fd8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x560ee0975e38 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x560ee0975eb8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x560ee0976088 <col:86>
| `-ReturnsTwiceAttr 0x560ee09760e0 <col:12> Implicit
|-FunctionDecl 0x560ee0976408 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x560ee09761b0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x560ee09762c0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x560ee09764b8 <line:494:22>
| `-NonNullAttr 0x560ee0976510 <col:63, col:77> 1
|-FunctionDecl 0x560ee0976688 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560ee0976558 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560ee0976730 <line:496:22>
| `-NonNullAttr 0x560ee0976788 <col:63, col:77> 1
|-FunctionDecl 0x560ee0976890 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560ee09767d8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560ee0976938 <line:498:22>
| `-NonNullAttr 0x560ee0976990 <col:52, col:66> 1
|-FunctionDecl 0x560ee0977ad8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560ee0977a20 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560ee0977b80 <line:500:22>
| `-NonNullAttr 0x560ee0977bd8 <col:52, col:66> 1
|-FunctionDecl 0x560ee0977e18 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x560ee0977c28 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x560ee0977cb8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x560ee0977ec8 <col:36>
| `-NonNullAttr 0x560ee0977f20 <col:66, col:83> 1 2
|-FunctionDecl 0x560ee0978020 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560ee0977f68 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560ee09780c8 <line:505:22>
| `-NonNullAttr 0x560ee0978120 <col:52, col:66> 1
|-FunctionDecl 0x560ee09783b8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee09781d0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x560ee0978250 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x560ee0978468 <line:509:22>
| `-NonNullAttr 0x560ee09784c0 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0978788 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x560ee0978508 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x560ee0978588 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x560ee0978608 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x560ee0978840 <line:513:22>
| `-NonNullAttr 0x560ee0978898 <col:63, col:80> 1 3
|-FunctionDecl 0x560ee0978a30 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x560ee09788e8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x560ee0978ad8 <line:515:22>
| `-NonNullAttr 0x560ee0978b30 <col:63, col:77> 1
|-FunctionDecl 0x560ee0978d18 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x560ee0978be0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x560ee0978dc0 <line:517:22>
| `-NonNullAttr 0x560ee0978e18 <col:63, col:77> 1
|-FunctionDecl 0x560ee0978f20 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x560ee0978e68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x560ee0978fc8 <line:519:22>
| `-NonNullAttr 0x560ee0979020 <col:63, col:77> 1
|-FunctionDecl 0x560ee0979248 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee0979068 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x560ee09790e8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x560ee09792f8 <line:523:22>
| `-NonNullAttr 0x560ee0979350 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0979558 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560ee0979398 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560ee0979418 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x560ee0979608 <line:526:22>
| `-NonNullAttr 0x560ee0979660 <col:63, col:77> 1
|-FunctionDecl 0x560ee0979808 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee09796a8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x560ee0979728 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x560ee09798b8 <line:529:22>
| `-NonNullAttr 0x560ee0979910 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0979b00 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560ee0979958 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560ee0979a40 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x560ee0979bb0 <line:531:22>
| `-NonNullAttr 0x560ee0979c08 <col:63, col:77> 1
|-FunctionDecl 0x560ee0979db8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee0979c58 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x560ee0979cd8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x560ee0979e68 <line:535:22>
| `-NonNullAttr 0x560ee0979ec0 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee097a048 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560ee0979f08 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560ee0979f88 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x560ee097a0f8 <line:538:22>
| `-NonNullAttr 0x560ee097a150 <col:63, col:77> 1
|-FunctionDecl 0x560ee097a2f8 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee097a198 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x560ee097a218 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x560ee097a3a8 <line:542:22>
| `-NonNullAttr 0x560ee097a400 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee097a588 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560ee097a448 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560ee097a4c8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x560ee097a638 <line:545:22>
| `-NonNullAttr 0x560ee097a690 <col:63, col:77> 1
|-FunctionDecl 0x560ee097a878 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x560ee097a6d8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x560ee097a758 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x560ee097a928 <line:548:22>
| `-NonNullAttr 0x560ee097a980 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee097bb38 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x560ee097a9c8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x560ee097ba78 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x560ee097bbe8 <line:551:22>
| `-NonNullAttr 0x560ee097bc40 <col:63, col:77> 1
|-FunctionDecl 0x560ee097bf78 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x560ee097bd20 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x560ee097be30 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x560ee097c028 <col:29>
| `-NonNullAttr 0x560ee097c080 <col:70, col:84> 1
|-FunctionDecl 0x560ee097c1f8 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560ee097c0c8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560ee097c2a0 <line:556:22>
| `-NonNullAttr 0x560ee097c2f8 <col:63, col:77> 1
|-FunctionDecl 0x560ee097c400 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560ee097c348 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560ee097c4a8 <line:558:22>
| `-NonNullAttr 0x560ee097c500 <col:52, col:66> 1
|-FunctionDecl 0x560ee097c600 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560ee097c548 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560ee097c6a8 <line:560:19>
| `-NonNullAttr 0x560ee097c700 <col:49, col:63> 1
|-FunctionDecl 0x560ee097c938 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x560ee097c748 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x560ee097c7d8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x560ee097c9e8 <col:39>
| `-NonNullAttr 0x560ee097ca70 <col:69, col:86> 1 2
|-FunctionDecl 0x560ee097cb70 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560ee097cab8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560ee097cc18 <line:565:22>
| `-NonNullAttr 0x560ee097cc70 <col:52, col:66> 1
|-FunctionDecl 0x560ee097cd70 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560ee097ccb8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560ee097ce18 <line:567:22>
| `-NonNullAttr 0x560ee097ce70 <col:52, col:66> 1
|-FunctionDecl 0x560ee097d028 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x560ee097ceb8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x560ee097cf48 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x560ee097d0d8 <col:39>
| `-NonNullAttr 0x560ee097d130 <col:69, col:86> 1 2
|-FunctionDecl 0x560ee097d230 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x560ee097d178 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x560ee097d2d8 <line:572:22>
| `-NonNullAttr 0x560ee097d330 <col:52, col:66> 1
|-FunctionDecl 0x560ee097d518 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x560ee097d3e0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x560ee097d5c0 <line:574:22>
| `-NonNullAttr 0x560ee097d618 <col:63, col:77> 1
|-FunctionDecl 0x560ee097d720 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x560ee097d668 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x560ee097d7c8 <line:576:22>
| `-NonNullAttr 0x560ee097d820 <col:63, col:77> 1
|-FunctionDecl 0x560ee097da80 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee097d868 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x560ee097d8e8 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x560ee097db30 <line:580:22>
| `-NonNullAttr 0x560ee097db88 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee097dd98 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x560ee097dbd8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x560ee097dc58 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x560ee097de48 <line:583:22>
| `-NonNullAttr 0x560ee097dea0 <col:63, col:77> 1
|-FunctionDecl 0x560ee097e048 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee097dee8 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x560ee097df68 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x560ee097e0f8 <line:587:22>
| `-NonNullAttr 0x560ee097e150 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee097e2d8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x560ee097e198 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x560ee097e218 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x560ee097e388 <col:36>
| `-NonNullAttr 0x560ee097e3e0 <col:77, col:91> 1
|-FunctionDecl 0x560ee097e718 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x560ee097e4c0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x560ee097e5d0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x560ee097e7c8 <line:592:22>
| `-NonNullAttr 0x560ee097e820 <col:63, col:77> 1
|-FunctionDecl 0x560ee097e998 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x560ee097e868 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x560ee097ea40 <line:594:22>
| `-NonNullAttr 0x560ee097eac0 <col:63, col:77> 1
|-FunctionDecl 0x560ee097ebc0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x560ee097eb08 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x560ee097ec68 <line:596:22>
| `-NonNullAttr 0x560ee097ecc0 <col:52, col:66> 1
|-FunctionDecl 0x560ee097edc0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x560ee097ed08 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x560ee097ee68 <line:598:22>
| `-NonNullAttr 0x560ee097eec0 <col:52, col:66> 1
|-FunctionDecl 0x560ee097f0e8 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x560ee097ef08 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x560ee097ef80 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x560ee097f198 <line:601:22, col:39> 1 2
|-FunctionDecl 0x560ee097f4c8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x560ee097f218 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x560ee097f290 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x560ee097f320 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x560ee097f580 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x560ee097f798 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x560ee097f660 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x560ee097f840 <line:607:22>
| `-NonNullAttr 0x560ee097f898 <col:63, col:77> 1
|-FunctionDecl 0x560ee097f9a0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x560ee097f8e8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x560ee097fa48 <line:609:22>
| `-NonNullAttr 0x560ee097fad0 <col:63, col:77> 1
|-FunctionDecl 0x560ee097fcf8 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee097fb18 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x560ee097fb98 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x560ee097fda8 <line:613:22>
| `-NonNullAttr 0x560ee097fe00 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0980008 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x560ee097fe48 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x560ee097fec8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x560ee09800b8 <col:37>
| `-NonNullAttr 0x560ee0980110 <col:78, col:92> 1
|-FunctionDecl 0x560ee0980328 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x560ee0980158 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x560ee0980200 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x560ee09803d8 <line:619:22>
| `-NonNullAttr 0x560ee0980430 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee09805f8 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x560ee0980478 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x560ee09804f0 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x560ee09806a8 <line:622:22>
| `-NonNullAttr 0x560ee0980700 <col:63, col:77> 1
|-FunctionDecl 0x560ee09809a8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x560ee09807e0 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x560ee0980860 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x560ee0980a58 <line:624:22>
| `-NonNullAttr 0x560ee0980ae0 <col:63, col:77> 1
|-FunctionDecl 0x560ee0980c58 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x560ee0980b28 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x560ee0980d00 <line:626:22>
| `-NonNullAttr 0x560ee0980d58 <col:63, col:77> 1
|-FunctionDecl 0x560ee0980e60 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x560ee0980da8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x560ee0980f08 <line:628:22>
| `-NonNullAttr 0x560ee0980f60 <col:52, col:66> 1
|-FunctionDecl 0x560ee0981060 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x560ee0980fa8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x560ee0981108 <line:630:22>
| `-NonNullAttr 0x560ee0981160 <col:52, col:66> 1
|-FunctionDecl 0x560ee0981260 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x560ee09811a8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x560ee0981308 <line:632:22>
| `-NonNullAttr 0x560ee0981360 <col:52, col:66> 1
|-FunctionDecl 0x560ee0981738 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x560ee0981440 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x560ee0981550 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x560ee09815d0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x560ee09817f0 <line:636:22>
| `-NonNullAttr 0x560ee0981848 <col:63, col:77> 1
|-FunctionDecl 0x560ee09819c8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x560ee0981898 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x560ee0981a70 <line:638:22>
| `-NonNullAttr 0x560ee0982b00 <col:63, col:77> 1
|-FunctionDecl 0x560ee0982c00 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x560ee0982b48 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x560ee0982ca8 <line:640:22>
| `-NonNullAttr 0x560ee0982d00 <col:52, col:66> 1
|-FunctionDecl 0x560ee0982ee8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x560ee0982db0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x560ee0982f90 <line:642:22>
| `-NonNullAttr 0x560ee0982fe8 <col:63, col:77> 1
|-FunctionDecl 0x560ee09830f0 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x560ee0983038 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x560ee0983198 <line:644:22>
| `-NonNullAttr 0x560ee09831f0 <col:63, col:77> 1
|-FunctionDecl 0x560ee0983418 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x560ee0983238 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x560ee09832b8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x560ee09834c8 <line:648:22>
| `-NonNullAttr 0x560ee0983520 <col:63, col:80> 1 2
|-FunctionDecl 0x560ee0983728 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x560ee0983568 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x560ee09835e8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x560ee09837d8 <line:651:22>
| `-NonNullAttr 0x560ee0983830 <col:63, col:77> 1
|-FunctionDecl 0x560ee0983b98 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x560ee0983910 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x560ee0983a30 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x560ee0983c48 <line:654:22>
| `-NonNullAttr 0x560ee0983ca0 <col:63, col:77> 1
|-FunctionDecl 0x560ee0983df8 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x560ee0983ce8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x560ee0983ea0 <col:69>
|-FunctionDecl 0x560ee0984018 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x560ee0983f08 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x560ee09840c0 <col:72>
|-FunctionDecl 0x560ee09842f8 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x560ee0984128 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x560ee09841d8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x560ee09843a8 <col:44>
|-FunctionDecl 0x560ee09845c8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x560ee0984410 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x560ee0984488 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x560ee0984678 <line:661:22>
| `-NonNullAttr 0x560ee09846d0 <col:63, col:77> 2
|-FunctionDecl 0x560ee0984b30 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x560ee09847b0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x560ee09848c0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x560ee09849d0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x560ee0984be8 <col:47>
|-FunctionDecl 0x560ee0984cf0 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x560ee0984c58 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x560ee0984e48 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x560ee0984db0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x560ee0984f10 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x560ee0984fd0 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x560ee0985090 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x560ee0985148 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x560ee09851c8 prev 0x560ee0985148 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x560ee0985230 <col:24> 'int' 0
|-VarDecl 0x560ee0985268 <line:673:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x560ee09852e8 prev 0x560ee0985268 <line:674:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x560ee0985350 <col:27> 'int' 0
|-VarDecl 0x560ee0985388 <line:675:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x560ee0985408 prev 0x560ee0985388 <line:676:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x560ee0985470 <col:27> 'int' 0
|-VarDecl 0x560ee09854a8 <line:677:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x560ee0985528 prev 0x560ee09854a8 <line:678:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x560ee0985590 <col:27> 'int' 0
|-VarDecl 0x560ee09855c0 <line:679:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x560ee0985638 <line:680:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x560ee09856b8 <line:681:1, col:5> col:5 used x 'int'
|-VarDecl 0x560ee0985738 prev 0x560ee09856b8 <line:682:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x560ee09857a0 <col:9> 'int' 0
|-VarDecl 0x560ee09857d0 <line:683:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x560ee0985850 <line:684:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x560ee09858c8 <line:685:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x560ee0985940 <line:686:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x560ee09859b8 <line:687:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x560ee0985a30 <line:688:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x560ee0985b00 <line:689:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x560ee0985b78 <line:690:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x560ee0985bf0 <line:691:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x560ee0985c70 <line:692:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x560ee0985cf0 <line:693:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x560ee0985d68 <line:694:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x560ee0985de8 <line:695:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x560ee0985e60 <line:696:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x560ee0985ee0 <line:697:1, col:5> col:5 used y 'int'
|-VarDecl 0x560ee0985f60 prev 0x560ee0985ee0 <line:698:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x560ee0985fc8 <col:9> 'int' 0
|-VarDecl 0x560ee0985ff8 <line:699:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x560ee0986070 <line:700:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x560ee0986188 prev 0x560ee0984cf0 <line:701:1, line:740:1> line:701:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x560ee09860f0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x560ee098ab80 <line:702:1, line:740:1>
|   |-CallExpr 0x560ee0986298 <line:703:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee0986280 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee0986230 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee09862f8 <line:704:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560ee09862b8 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   | `-IntegerLiteral 0x560ee09862d8 <col:7> 'int' 1
|   |-CallExpr 0x560ee0986350 <line:705:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee0986338 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee0986318 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee09863a8 <line:706:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee0986390 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee0986370 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee0986690 <line:707:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x560ee09863c8 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   | `-ConditionalOperator 0x560ee0986660 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x560ee0986488 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x560ee0986440 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x560ee0986428 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x560ee09863e8 <col:7> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x560ee0986470 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x560ee0986458 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x560ee0986408 <col:25> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee0986648 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee09864a8 <col:42> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x560ee0986628 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x560ee09865f8 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x560ee0986568 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x560ee0986520 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x560ee0986508 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x560ee09864c8 <col:55> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x560ee0986550 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x560ee0986538 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x560ee09864e8 <col:73> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee09865c8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee0986588 <col:90> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x560ee09865e0 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee09865a8 <col:102> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee0986898 <line:708:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560ee09866b0 <col:3> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee0986880 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee0986850 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560ee0986770 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560ee0986728 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560ee0986710 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560ee09866d0 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560ee0986758 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560ee0986740 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560ee09866f0 <col:38> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee0986808 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee09867c0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee0986790 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee0986838 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee0986820 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee09867e8 <col:66> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560ee0986ba0 <line:709:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560ee09868b8 <col:3> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee0986b88 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee0986b58 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560ee0986a58 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560ee0986978 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560ee0986930 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560ee0986918 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560ee09868d8 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560ee0986960 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560ee0986948 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560ee09868f8 <col:38> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x560ee0986a38 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560ee09869f0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560ee09869d8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560ee0986998 <col:56> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560ee0986a20 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560ee0986a08 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560ee09869b8 <col:74> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee0986b10 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee0986aa8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee0986a78 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee0986b40 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee0986b28 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee0986ad0 <col:102> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x560ee0986da8 <line:710:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0986bc0 <col:3> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x560ee0986d90 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee0986d60 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560ee0986c80 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560ee0986c38 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560ee0986c20 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560ee0986be0 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560ee0986c68 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560ee0986c50 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560ee0986c00 <col:38> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee0986d18 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee0986cd0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee0986ca0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee0986d48 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee0986d30 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee0986cf8 <col:66> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x560ee0987090 <line:711:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0986dc8 <col:3> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x560ee0987078 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee0987048 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560ee0986f68 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560ee0986e88 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560ee0986e40 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560ee0986e28 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560ee0986de8 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560ee0986e70 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560ee0986e58 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560ee0986e08 <col:38> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x560ee0986f48 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560ee0986f00 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560ee0986ee8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560ee0986ea8 <col:56> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560ee0986f30 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560ee0986f18 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560ee0986ec8 <col:74> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee0987000 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee0986fb8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee0986f88 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee0987030 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee0987018 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee0986fe0 <col:102> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x560ee09870e8 <line:712:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee09870d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee09870b0 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee0987140 <line:713:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee0987128 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee0987108 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee0987208 <line:714:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0987160 <col:3> '_Bool' lvalue Var 0x560ee0985ff8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x560ee09871e8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x560ee09871d0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x560ee0987180 <col:19> '_Bool (void)' Function 0x560ee092b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x560ee09872a0 <line:715:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0987228 <col:3> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x560ee0987280 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x560ee0987268 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x560ee0987248 <col:19> '_Bool (void)' Function 0x560ee092b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x560ee0987318 <line:716:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x560ee09872c0 <col:3> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x560ee0987300 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee09872e0 <col:21> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x560ee0987390 <line:717:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x560ee0987338 <col:3> 'int' lvalue Var 0x560ee0985850 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x560ee0987378 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee0987358 <col:15> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee09877c8 <line:718:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x560ee09873b0 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   | `-ConditionalOperator 0x560ee0987798 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x560ee09875c0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x560ee09874e0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x560ee0987408 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x560ee09873f0 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x560ee09873d0 <col:8> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x560ee09874c0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x560ee0987458 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x560ee0987440 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x560ee0987420 <col:27> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x560ee09874a8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x560ee0987490 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x560ee0987470 <col:46> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x560ee09875a0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x560ee0987538 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x560ee0987520 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x560ee0987500 <col:65> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x560ee0987588 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x560ee0987570 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x560ee0987550 <col:84> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee0987780 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee09875e0 <col:101> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |   `-ParenExpr 0x560ee0987760 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x560ee0987730 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x560ee09876a0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x560ee0987658 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x560ee0987640 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x560ee0987600 <col:106> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x560ee0987688 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x560ee0987670 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x560ee0987620 <col:124> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee0987700 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee09876c0 <col:141> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x560ee0987718 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee09876e0 <col:153> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x560ee0987cf8 <line:719:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x560ee09877e8 <col:3> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x560ee0987cc8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x560ee0987c98 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560ee0987c80 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560ee0987808 <col:15> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee0987cb0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee0987828 <col:31> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x560ee0987c60 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x560ee0987c30 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x560ee0987a38 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x560ee0987958 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x560ee0987880 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x560ee0987868 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x560ee0987848 <col:45> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x560ee0987938 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x560ee09878d0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x560ee09878b8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x560ee0987898 <col:64> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x560ee0987920 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x560ee0987908 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x560ee09878e8 <col:83> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x560ee0987a18 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x560ee09879b0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x560ee0987998 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x560ee0987978 <col:102> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x560ee0987a00 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x560ee09879e8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x560ee09879c8 <col:121> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee0987c18 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee0987a58 <col:138> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x560ee0987bf8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x560ee0987bc8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x560ee0987b38 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x560ee0987ad0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x560ee0987ab8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x560ee0987a78 <col:151> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x560ee0987b20 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x560ee0987ae8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x560ee0987a98 <col:169> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x560ee0987b98 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x560ee0987b58 <col:186> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x560ee0987bb0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x560ee0987b78 <col:198> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x560ee0988208 <line:720:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x560ee0987d18 <col:3> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x560ee09881d8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x560ee09881a8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560ee0988190 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560ee0987d38 <col:15> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee09881c0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee0987d58 <col:31> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x560ee0988170 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x560ee0988140 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x560ee0987f68 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x560ee0987e88 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x560ee0987db0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x560ee0987d98 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x560ee0987d78 <col:45> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x560ee0987e68 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x560ee0987e00 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x560ee0987de8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x560ee0987dc8 <col:64> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x560ee0987e50 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x560ee0987e38 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x560ee0987e18 <col:83> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x560ee0987f48 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x560ee0987ee0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x560ee0987ec8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x560ee0987ea8 <col:102> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x560ee0987f30 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x560ee0987f18 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x560ee0987ef8 <col:121> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee0988128 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee0987f88 <col:138> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x560ee0988108 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x560ee09880d8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x560ee0988048 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x560ee0988000 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x560ee0987fe8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x560ee0987fa8 <col:151> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x560ee0988030 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x560ee0988018 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x560ee0987fc8 <col:169> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x560ee09880a8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x560ee0988068 <col:186> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x560ee09880c0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x560ee0988088 <col:198> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x560ee09887b0 <line:721:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0988228 <col:3> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee0988798 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee0988768 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x560ee0988720 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee0988708 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee0988248 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee0988750 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee0988738 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee0988268 <col:36> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x560ee09886e8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x560ee09886b8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x560ee0988478 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560ee0988398 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560ee09882c0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560ee09882a8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560ee0988288 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560ee0988378 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560ee0988310 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560ee09882f8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560ee09882d8 <col:74> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x560ee0988360 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560ee0988348 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560ee0988328 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560ee0988458 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560ee09883f0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560ee09883d8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560ee09883b8 <col:112> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x560ee0988440 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560ee0988428 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560ee0988408 <col:131> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x560ee09886a0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560ee0988688 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560ee0988498 <col:148> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x560ee0988668 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x560ee0988638 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x560ee0988558 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560ee0988510 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560ee09884f8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560ee09884b8 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560ee0988540 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560ee0988528 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560ee09884d8 <col:184> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x560ee09885f0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560ee09885a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560ee0988578 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560ee0988620 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x560ee0988608 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x560ee09885d0 <col:212> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560ee0988d88 <line:722:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x560ee09887d0 <col:3> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee0988d70 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee0988d40 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x560ee0988cf8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee0988ce0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee09887f0 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee0988d28 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee0988d10 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee0988810 <col:36> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x560ee0988cc0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x560ee0988c90 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x560ee0988a20 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560ee0988940 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560ee0988868 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560ee0988850 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560ee0988830 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560ee0988920 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560ee09888b8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560ee09888a0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560ee0988880 <col:74> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x560ee0988908 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560ee09888f0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560ee09888d0 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560ee0988a00 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560ee0988998 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560ee0988980 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560ee0988960 <col:112> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x560ee09889e8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560ee09889d0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560ee09889b0 <col:131> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x560ee0988c78 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560ee0988c60 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560ee0988a40 <col:148> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x560ee0988c40 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x560ee0988c10 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x560ee0988b00 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560ee0988ab8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560ee0988aa0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560ee0988a60 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560ee0988ae8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560ee0988ad0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560ee0988a80 <col:184> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x560ee0988be0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560ee0988b60 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560ee0988b30 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560ee0988bf8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x560ee0988bb8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x560ee0988b88 <col:219> 'int' 0
|   |-BinaryOperator 0x560ee0989330 <line:723:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0988da8 <col:3> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x560ee0989318 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee09892e8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x560ee09892a0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee0989288 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee0988dc8 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee09892d0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee09892b8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee0988de8 <col:36> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x560ee0989268 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x560ee0989238 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x560ee0988ff8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560ee0988f18 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560ee0988e40 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560ee0988e28 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560ee0988e08 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560ee0988ef8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560ee0988e90 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560ee0988e78 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560ee0988e58 <col:74> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x560ee0988ee0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560ee0988ec8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560ee0988ea8 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560ee0988fd8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560ee0988f70 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560ee0988f58 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560ee0988f38 <col:112> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x560ee0988fc0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560ee0988fa8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560ee0988f88 <col:131> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x560ee0989220 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560ee0989208 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560ee0989018 <col:148> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x560ee09891e8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x560ee09891b8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x560ee09890d8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560ee0989090 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560ee0989078 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560ee0989038 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560ee09890c0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560ee09890a8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560ee0989058 <col:184> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x560ee0989170 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560ee0989128 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560ee09890f8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560ee09891a0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x560ee0989188 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x560ee0989150 <col:212> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x560ee09898f8 <line:724:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0989350 <col:3> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x560ee09898e0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee09898b0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x560ee0989868 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee0989850 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee0989370 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee0989898 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee0989880 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee0989390 <col:36> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x560ee0989830 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x560ee0989800 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x560ee09895a0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560ee09894c0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560ee09893e8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560ee09893d0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560ee09893b0 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560ee09894a0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560ee0989438 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560ee0989420 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560ee0989400 <col:74> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x560ee0989488 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560ee0989470 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560ee0989450 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560ee0989580 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560ee0989518 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560ee0989500 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560ee09894e0 <col:112> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x560ee0989568 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560ee0989550 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560ee0989530 <col:131> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x560ee09897e8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560ee09897d0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560ee09895c0 <col:148> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x560ee09897b0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x560ee0989780 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x560ee0989680 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560ee0989638 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560ee0989620 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560ee09895e0 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560ee0989668 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560ee0989650 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560ee0989600 <col:184> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x560ee0989750 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560ee09896d0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560ee09896a0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560ee0989768 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x560ee0989728 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x560ee09896f8 <col:219> 'int' 0
|   |-BinaryOperator 0x560ee0989970 <line:725:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x560ee0989918 <col:3> 'int' lvalue Var 0x560ee09852e8 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x560ee0989958 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee0989938 <col:25> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee0989aa0 <line:726:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x560ee0989990 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   | `-ConditionalOperator 0x560ee0989a70 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x560ee0989a28 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560ee0989a10 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560ee09899b0 <col:7> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee0989a40 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee09899d0 <col:25> 'int' lvalue Var 0x560ee0985850 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x560ee0989a58 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x560ee09899f0 <col:37> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee0989b68 <line:727:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0989ac0 <col:3> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x560ee0989b40 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x560ee0989ae0 <col:28> 'int' 0
|   |-CallExpr 0x560ee0989bc0 <line:728:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee0989ba8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee0989b88 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee0989c18 <line:729:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee0989c00 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee0989be0 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee0989f00 <line:730:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x560ee0989c38 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   | `-ConditionalOperator 0x560ee0989ed0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x560ee0989cf8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x560ee0989cb0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x560ee0989c98 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x560ee0989c58 <col:7> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x560ee0989ce0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x560ee0989cc8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x560ee0989c78 <col:25> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee0989eb8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee0989d18 <col:42> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x560ee0989e98 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x560ee0989e68 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x560ee0989dd8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x560ee0989d90 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x560ee0989d78 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x560ee0989d38 <col:55> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x560ee0989dc0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x560ee0989da8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x560ee0989d58 <col:73> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee0989e38 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee0989df8 <col:90> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x560ee0989e50 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee0989e18 <col:102> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee098a108 <line:731:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560ee0989f20 <col:3> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098a0f0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098a0c0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560ee0989fe0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560ee0989f98 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560ee0989f80 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560ee0989f40 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560ee0989fc8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560ee0989fb0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560ee0989f60 <col:38> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098a078 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee098a030 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee098a000 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee098a0a8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee098a090 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098a058 <col:66> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560ee098a3f0 <line:732:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098a128 <col:3> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098a3d8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098a3a8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560ee098a2c8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560ee098a1e8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560ee098a1a0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560ee098a188 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560ee098a148 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560ee098a1d0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560ee098a1b8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560ee098a168 <col:38> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x560ee098a2a8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560ee098a260 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560ee098a248 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560ee098a208 <col:56> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560ee098a290 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560ee098a278 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560ee098a228 <col:74> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098a360 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee098a318 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee098a2e8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee098a390 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee098a378 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098a340 <col:102> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x560ee098a5f8 <line:733:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098a410 <col:3> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098a5e0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098a5b0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560ee098a4d0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560ee098a488 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560ee098a470 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560ee098a430 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560ee098a4b8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560ee098a4a0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560ee098a450 <col:38> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098a568 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee098a520 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee098a4f0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee098a598 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee098a580 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098a548 <col:66> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x560ee098a8e0 <line:734:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098a618 <col:3> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098a8c8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098a898 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560ee098a7b8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560ee098a6d8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560ee098a690 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560ee098a678 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560ee098a638 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560ee098a6c0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560ee098a6a8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560ee098a658 <col:38> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x560ee098a798 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560ee098a750 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560ee098a738 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560ee098a6f8 <col:56> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560ee098a780 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560ee098a768 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560ee098a718 <col:74> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098a850 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee098a808 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee098a7d8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee098a880 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee098a868 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098a830 <col:102> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x560ee098a938 <line:735:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee098a920 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098a900 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee098a990 <line:736:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee098a978 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098a958 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee098aa48 <line:737:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x560ee098a9b0 <col:3> 'int' lvalue Var 0x560ee09851c8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x560ee098aa28 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x560ee098aa10 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee098a9d0 <col:22> 'int' lvalue Var 0x560ee09851c8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x560ee098a9f0 <col:41> 'int' 1
|   |-CallExpr 0x560ee098aaa0 <line:738:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee098aa88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098aa68 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x560ee098ab70 <line:739:3, col:36>
|     `-CallExpr 0x560ee098ab50 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x560ee098ab10 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x560ee098aac0 <col:10> 'void *(void)' Function 0x560ee092bab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x560ee098ad68 prev 0x560ee0984e48 <line:741:1, line:787:1> line:741:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x560ee098acd0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x560ee098f080 <line:742:1, line:787:1>
|   |-CallExpr 0x560ee098ae48 <line:743:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee098ae30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098ae10 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee098aec0 <line:744:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x560ee098ae68 <col:3> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x560ee098aea8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098ae88 <col:15> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x560ee098af20 <line:745:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x560ee098aee0 <col:3> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x560ee098af00 <col:15> 'int' 2
|   |-BinaryOperator 0x560ee098af98 <line:746:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098af40 <col:3> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098af80 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098af60 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560ee098b030 <line:747:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098afb8 <col:3> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x560ee098b008 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x560ee098afd8 <col:27> 'int' 1
|   |-CallExpr 0x560ee098b1b8 <line:748:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x560ee098b1a0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x560ee098b050 <col:3> 'void (int)' Function 0x560ee092bd28 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x560ee098b150 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x560ee098b130 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x560ee098b110 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x560ee098b0c8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x560ee098b0b0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x560ee098b070 <col:23> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x560ee098b0f8 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x560ee098b0e0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x560ee098b090 <col:41> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560ee098b238 <line:749:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098b1e0 <col:3> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098b220 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098b200 <col:20> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x560ee098b2b0 <line:750:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098b258 <col:3> '_Bool' lvalue Var 0x560ee0985b00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098b298 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098b278 <col:20> '_Bool' lvalue Var 0x560ee0985940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x560ee098b328 <line:751:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098b2d0 <col:3> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098b310 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098b2f0 <col:20> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x560ee098b3c0 <line:752:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098b348 <col:3> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x560ee098b398 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x560ee098b368 <col:27> 'int' 1
|   |-CallExpr 0x560ee098b418 <line:753:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee098b400 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098b3e0 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee098b470 <line:754:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee098b458 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098b438 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee098b4d0 <line:755:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x560ee098b490 <col:3> 'int' lvalue Var 0x560ee0985f60 'y' 'int'
|   | `-IntegerLiteral 0x560ee098b4b0 <col:7> 'int' 1
|   |-CallExpr 0x560ee098b528 <line:756:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee098b510 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098b4f0 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee098b580 <line:757:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee098b568 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098b548 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee098b5f8 <line:758:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x560ee098b5a0 <col:3> 'int' lvalue Var 0x560ee0985408 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x560ee098b5e0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098b5c0 <col:25> 'int' lvalue Var 0x560ee0985f60 'y' 'int'
|   |-CallExpr 0x560ee098b650 <line:759:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee098b638 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098b618 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee098b6a8 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee098b690 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098b670 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee098b740 <line:761:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098b6c8 <col:3> '_Bool' lvalue Var 0x560ee0985ff8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x560ee098b720 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x560ee098b708 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x560ee098b6e8 <col:19> '_Bool (void)' Function 0x560ee092b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x560ee098b7d8 <line:762:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098b760 <col:3> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x560ee098b7b8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x560ee098b7a0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x560ee098b780 <col:19> '_Bool (void)' Function 0x560ee092b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x560ee098b850 <line:763:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098b7f8 <col:3> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098b838 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098b818 <col:21> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x560ee098b8c8 <line:764:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x560ee098b870 <col:3> 'int' lvalue Var 0x560ee0985850 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x560ee098b8b0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098b890 <col:15> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee098bd28 <line:765:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x560ee098b8e8 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   | `-ConditionalOperator 0x560ee098bcf8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x560ee098baf8 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x560ee098ba18 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x560ee098b940 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x560ee098b928 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x560ee098b908 <col:8> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x560ee098b9f8 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x560ee098b990 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x560ee098b978 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x560ee098b958 <col:27> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x560ee098b9e0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x560ee098b9c8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x560ee098b9a8 <col:46> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x560ee098bad8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x560ee098ba70 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x560ee098ba58 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x560ee098ba38 <col:65> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x560ee098bac0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x560ee098baa8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x560ee098ba88 <col:84> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee098bce0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee098bb18 <col:101> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |   `-ParenExpr 0x560ee098bcc0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x560ee098bc90 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x560ee098bc00 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x560ee098bbb8 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x560ee098bba0 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x560ee098bb60 <col:106> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x560ee098bbe8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x560ee098bbd0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x560ee098bb80 <col:124> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee098bc60 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee098bc20 <col:141> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x560ee098bc78 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098bc40 <col:153> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x560ee098c238 <line:766:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x560ee098bd48 <col:3> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x560ee098c208 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x560ee098c1d8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560ee098c1c0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560ee098bd68 <col:15> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee098c1f0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee098bd88 <col:31> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x560ee098c1a0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x560ee098c170 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x560ee098bf98 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x560ee098beb8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x560ee098bde0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x560ee098bdc8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x560ee098bda8 <col:45> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x560ee098be98 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x560ee098be30 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x560ee098be18 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x560ee098bdf8 <col:64> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x560ee098be80 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x560ee098be68 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x560ee098be48 <col:83> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x560ee098bf78 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x560ee098bf10 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x560ee098bef8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x560ee098bed8 <col:102> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x560ee098bf60 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x560ee098bf48 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x560ee098bf28 <col:121> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee098c158 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee098bfb8 <col:138> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x560ee098c138 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x560ee098c108 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x560ee098c078 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x560ee098c030 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x560ee098c018 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x560ee098bfd8 <col:151> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x560ee098c060 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x560ee098c048 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x560ee098bff8 <col:169> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x560ee098c0d8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x560ee098c098 <col:186> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x560ee098c0f0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x560ee098c0b8 <col:198> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x560ee098c748 <line:767:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x560ee098c258 <col:3> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x560ee098c718 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x560ee098c6e8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560ee098c6d0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560ee098c278 <col:15> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee098c700 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee098c298 <col:31> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x560ee098c6b0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x560ee098c680 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x560ee098c4a8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x560ee098c3c8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x560ee098c2f0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x560ee098c2d8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x560ee098c2b8 <col:45> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x560ee098c3a8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x560ee098c340 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x560ee098c328 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x560ee098c308 <col:64> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x560ee098c390 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x560ee098c378 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x560ee098c358 <col:83> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x560ee098c488 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x560ee098c420 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x560ee098c408 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x560ee098c3e8 <col:102> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x560ee098c470 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x560ee098c458 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x560ee098c438 <col:121> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee098c668 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee098c4c8 <col:138> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x560ee098c648 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x560ee098c618 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x560ee098c588 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x560ee098c540 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x560ee098c528 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x560ee098c4e8 <col:151> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x560ee098c570 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x560ee098c558 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x560ee098c508 <col:169> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x560ee098c5e8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x560ee098c5a8 <col:186> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x560ee098c600 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x560ee098c5c8 <col:198> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x560ee098cd00 <line:768:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098c768 <col:3> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098cce8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098ccb8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x560ee098cc70 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee098cc58 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee098c788 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098cca0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee098cc88 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee098c7a8 <col:36> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x560ee098cc38 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x560ee098cc08 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x560ee098c9b8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560ee098c8d8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560ee098c800 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560ee098c7e8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560ee098c7c8 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560ee098c8b8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560ee098c850 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560ee098c838 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560ee098c818 <col:74> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x560ee098c8a0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560ee098c888 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560ee098c868 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560ee098c998 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560ee098c930 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560ee098c918 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560ee098c8f8 <col:112> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x560ee098c980 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560ee098c968 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560ee098c948 <col:131> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x560ee098cbf0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560ee098cbd8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560ee098c9d8 <col:148> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x560ee098cbb8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x560ee098cb88 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x560ee098ca98 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560ee098ca50 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560ee098ca38 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560ee098c9f8 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560ee098ca80 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560ee098ca68 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560ee098ca18 <col:184> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x560ee098cb30 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560ee098cae8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560ee098cab8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560ee098cb70 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x560ee098cb48 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x560ee098cb10 <col:212> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560ee098d2c8 <line:769:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098cd20 <col:3> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098d2b0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098d280 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x560ee098d238 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee098d220 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee098cd40 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098d268 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee098d250 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee098cd60 <col:36> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x560ee098d200 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x560ee098d1d0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x560ee098cf70 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560ee098ce90 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560ee098cdb8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560ee098cda0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560ee098cd80 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560ee098ce70 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560ee098ce08 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560ee098cdf0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560ee098cdd0 <col:74> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x560ee098ce58 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560ee098ce40 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560ee098ce20 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560ee098cf50 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560ee098cee8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560ee098ced0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560ee098ceb0 <col:112> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x560ee098cf38 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560ee098cf20 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560ee098cf00 <col:131> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x560ee098d1b8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560ee098d1a0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560ee098cf90 <col:148> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x560ee098d180 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x560ee098d150 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x560ee098d050 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560ee098d008 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560ee098cff0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560ee098cfb0 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560ee098d038 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560ee098d020 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560ee098cfd0 <col:184> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x560ee098d120 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560ee098d0a0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560ee098d070 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560ee098d138 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x560ee098d0f8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x560ee098d0c8 <col:219> 'int' 0
|   |-BinaryOperator 0x560ee098d870 <line:770:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098d2e8 <col:3> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098d858 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098d828 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x560ee098d7e0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee098d7c8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee098d308 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098d810 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee098d7f8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee098d328 <col:36> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x560ee098d7a8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x560ee098d778 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x560ee098d538 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560ee098d458 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560ee098d380 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560ee098d368 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560ee098d348 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560ee098d438 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560ee098d3d0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560ee098d3b8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560ee098d398 <col:74> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x560ee098d420 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560ee098d408 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560ee098d3e8 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560ee098d518 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560ee098d4b0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560ee098d498 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560ee098d478 <col:112> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x560ee098d500 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560ee098d4e8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560ee098d4c8 <col:131> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x560ee098d760 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560ee098d748 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560ee098d558 <col:148> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x560ee098d728 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x560ee098d6f8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x560ee098d618 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560ee098d5d0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560ee098d5b8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560ee098d578 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560ee098d600 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560ee098d5e8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560ee098d598 <col:184> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x560ee098d6b0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560ee098d668 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560ee098d638 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560ee098d6e0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x560ee098d6c8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x560ee098d690 <col:212> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x560ee098de58 <line:771:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098d890 <col:3> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098de40 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098de10 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x560ee098ddc8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee098ddb0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee098d8b0 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098ddf8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x560ee098dde0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x560ee098d8d0 <col:36> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x560ee098dd90 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x560ee098dd60 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x560ee098dae0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x560ee098da00 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x560ee098d928 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x560ee098d910 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x560ee098d8f0 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x560ee098d9e0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x560ee098d978 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x560ee098d960 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x560ee098d940 <col:74> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x560ee098d9c8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x560ee098d9b0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x560ee098d990 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x560ee098dac0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x560ee098da58 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x560ee098da40 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x560ee098da20 <col:112> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x560ee098daa8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x560ee098da90 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x560ee098da70 <col:131> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x560ee098dd48 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x560ee098dd30 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x560ee098db00 <col:148> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x560ee098dd10 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x560ee098dce0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x560ee098dbe0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x560ee098db98 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x560ee098db80 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x560ee098db20 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x560ee098dbc8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x560ee098dbb0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x560ee098db40 <col:184> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x560ee098dcb0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x560ee098dc30 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x560ee098dc00 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x560ee098dcc8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x560ee098dc88 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x560ee098dc58 <col:219> 'int' 0
|   |-BinaryOperator 0x560ee098ded0 <line:772:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x560ee098de78 <col:3> 'int' lvalue Var 0x560ee0985528 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x560ee098deb8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560ee098de98 <col:25> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee098e000 <line:773:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x560ee098def0 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   | `-ConditionalOperator 0x560ee098dfd0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x560ee098df88 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x560ee098df70 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x560ee098df10 <col:7> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee098dfa0 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee098df30 <col:25> 'int' lvalue Var 0x560ee0985850 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x560ee098dfb8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x560ee098df50 <col:37> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee098e098 <line:774:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098e020 <col:3> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x560ee098e070 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x560ee098e040 <col:28> 'int' 0
|   |-CallExpr 0x560ee098e0f0 <line:775:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee098e0d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098e0b8 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee098e148 <line:776:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee098e130 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098e110 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee098e430 <line:777:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x560ee098e168 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   | `-ConditionalOperator 0x560ee098e400 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x560ee098e228 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x560ee098e1e0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x560ee098e1c8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x560ee098e188 <col:7> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x560ee098e210 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x560ee098e1f8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x560ee098e1a8 <col:25> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x560ee098e3e8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee098e248 <col:42> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x560ee098e3c8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x560ee098e398 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x560ee098e308 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x560ee098e2c0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x560ee098e2a8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x560ee098e268 <col:55> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x560ee098e2f0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x560ee098e2d8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x560ee098e288 <col:73> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x560ee098e368 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x560ee098e328 <col:90> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x560ee098e380 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098e348 <col:102> 'int' lvalue Var 0x560ee0985738 'x' 'int'
|   |-BinaryOperator 0x560ee098e638 <line:778:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098e450 <col:3> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098e620 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098e5f0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560ee098e510 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560ee098e4c8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560ee098e4b0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560ee098e470 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560ee098e4f8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560ee098e4e0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560ee098e490 <col:38> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098e5a8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee098e560 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee098e530 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee098e5d8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee098e5c0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098e588 <col:66> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x560ee098e920 <line:779:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098e658 <col:3> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098e908 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098e8d8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560ee098e7f8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560ee098e718 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560ee098e6d0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560ee098e6b8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560ee098e678 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560ee098e700 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560ee098e6e8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560ee098e698 <col:38> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x560ee098e7d8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560ee098e790 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560ee098e778 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560ee098e738 <col:56> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560ee098e7c0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560ee098e7a8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560ee098e758 <col:74> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098e890 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee098e848 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee098e818 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee098e8c0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee098e8a8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098e870 <col:102> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x560ee098eb28 <line:780:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098e940 <col:3> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098eb10 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098eae0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x560ee098ea00 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x560ee098e9b8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x560ee098e9a0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x560ee098e960 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x560ee098e9e8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x560ee098e9d0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x560ee098e980 <col:38> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098ea98 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee098ea50 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee098ea20 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee098eac8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee098eab0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098ea78 <col:66> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x560ee098ee38 <line:781:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x560ee098eb48 <col:3> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x560ee098ee20 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x560ee098edf0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x560ee098ed10 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x560ee098ec30 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x560ee098ebe8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x560ee098ebd0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x560ee098eb90 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x560ee098ec18 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x560ee098ec00 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x560ee098ebb0 <col:38> '_Bool' lvalue Var 0x560ee09859b8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x560ee098ecf0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x560ee098eca8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x560ee098ec90 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x560ee098ec50 <col:56> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x560ee098ecd8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x560ee098ecc0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x560ee098ec70 <col:74> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x560ee098eda8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x560ee098ed60 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x560ee098ed30 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x560ee098edd8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x560ee098edc0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x560ee098ed88 <col:102> '_Bool' lvalue Var 0x560ee0985b78 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x560ee098ee90 <line:782:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee098ee78 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098ee58 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x560ee098eee8 <line:783:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x560ee098eed0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098eeb0 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x560ee098efa0 <line:784:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x560ee098ef08 <col:3> 'int' lvalue Var 0x560ee09851c8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x560ee098ef80 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x560ee098ef68 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560ee098ef28 <col:22> 'int' lvalue Var 0x560ee09851c8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x560ee098ef48 <col:41> 'int' 1
|   |-CallExpr 0x560ee098eff8 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x560ee098efe0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x560ee098efc0 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x560ee098f070 <line:786:3, col:36>
|     `-CallExpr 0x560ee098f050 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x560ee098f038 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x560ee098f018 <col:10> 'void *(void)' Function 0x560ee092bab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x560ee098f210 prev 0x560ee0984f10 <line:788:1, line:790:1> line:788:6 fence 'void ()'
| `-CompoundStmt 0x560ee098f2b0 <line:789:1, line:790:1>
|-FunctionDecl 0x560ee098f2e0 prev 0x560ee0984fd0 <line:791:1, line:793:1> line:791:6 isync 'void ()'
| `-CompoundStmt 0x560ee098f380 <line:792:1, line:793:1>
|-FunctionDecl 0x560ee098f3b0 prev 0x560ee0985090 <line:794:1, line:796:1> line:794:6 lwfence 'void ()'
| `-CompoundStmt 0x560ee098f450 <line:795:1, line:796:1>
`-FunctionDecl 0x560ee098f4b8 <line:797:1, line:832:1> line:797:5 main 'int ()'
  `-CompoundStmt 0x560ee0993850 <line:798:1, line:832:1>
    |-DeclStmt 0x560ee098f5d0 <line:799:3, col:18>
    | `-VarDecl 0x560ee098f568 <col:3, col:13> col:13 used t1623 'pthread_t':'unsigned long'
    |-CallExpr 0x560ee098f7d8 <line:800:3, col:54> 'int'
    | |-ImplicitCastExpr 0x560ee098f7c0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560ee098f5e8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x560ee096c5b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x560ee098f628 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x560ee098f608 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x560ee098f568 't1623' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x560ee098f818 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x560ee098f6a0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x560ee098f678 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x560ee098f640 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x560ee098f830 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560ee098f6c0 <col:39> 'void *(void *)' Function 0x560ee0986188 'P0' 'void *(void *)'
    | `-ParenExpr 0x560ee098f740 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x560ee098f718 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x560ee098f6e0 <col:52> 'int' 0
    |-DeclStmt 0x560ee098f8c0 <line:801:3, col:18>
    | `-VarDecl 0x560ee098f858 <col:3, col:13> col:13 used t1624 'pthread_t':'unsigned long'
    |-CallExpr 0x560ee098fa68 <line:802:3, col:54> 'int'
    | |-ImplicitCastExpr 0x560ee098fa50 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560ee098f8d8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x560ee096c5b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x560ee098f918 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x560ee098f8f8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x560ee098f858 't1624' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x560ee098faa8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x560ee098f990 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x560ee098f968 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x560ee098f930 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x560ee098fac0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560ee098f9b0 <col:39> 'void *(void *)' Function 0x560ee098ad68 'P1' 'void *(void *)'
    | `-ParenExpr 0x560ee098fa30 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x560ee098fa08 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x560ee098f9d0 <col:52> 'int' 0
    |-CallExpr 0x560ee098fb10 <line:803:3, col:27> 'void'
    | `-ImplicitCastExpr 0x560ee098faf8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560ee098fad8 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x560ee098fbf0 <line:804:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x560ee098fb30 <col:3> '_Bool' lvalue Var 0x560ee09855c0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x560ee098fbd8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x560ee098fbb8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x560ee098fba0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x560ee098fb50 <col:21> 'int' lvalue Var 0x560ee09851c8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x560ee098fb70 <col:41> 'int' 2
    |-CallExpr 0x560ee098fc48 <line:805:3, col:25> 'void'
    | `-ImplicitCastExpr 0x560ee098fc30 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560ee098fc10 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x560ee098fcc0 <line:806:3, col:36> 'void'
    | |-ImplicitCastExpr 0x560ee098fca8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560ee098fc68 <col:3> 'void (int)' Function 0x560ee092b940 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x560ee098fd00 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x560ee098fce8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x560ee098fc88 <col:21> '_Bool' lvalue Var 0x560ee09855c0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x560ee098fd50 <line:807:3, col:27> 'void'
    | `-ImplicitCastExpr 0x560ee098fd38 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560ee098fd18 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x560ee0990038 <line:808:3, col:103> 'int' '='
    | |-DeclRefExpr 0x560ee098fd70 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
    | `-ConditionalOperator 0x560ee0990008 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x560ee098fe30 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x560ee098fde8 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x560ee098fdd0 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x560ee098fd90 <col:7> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x560ee098fe18 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x560ee098fe00 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x560ee098fdb0 <col:25> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x560ee098fff0 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560ee098fe50 <col:42> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x560ee098ffd0 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x560ee098ffa0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x560ee098ff10 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x560ee098fec8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x560ee098feb0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x560ee098fe70 <col:55> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x560ee098fef8 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x560ee098fee0 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x560ee098fe90 <col:73> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x560ee098ff70 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x560ee098ff30 <col:90> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x560ee098ff88 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x560ee098ff50 <col:102> 'int' lvalue Var 0x560ee0985738 'x' 'int'
    |-BinaryOperator 0x560ee0990240 <line:809:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x560ee0990058 <col:3> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x560ee0990228 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560ee09901f8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x560ee0990118 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x560ee09900d0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x560ee09900b8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x560ee0990078 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x560ee0990100 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x560ee09900e8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x560ee0990098 <col:38> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x560ee09901b0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x560ee0990168 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x560ee0990138 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x560ee09901e0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x560ee09901c8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x560ee0990190 <col:66> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x560ee0990528 <line:810:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x560ee0990260 <col:3> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x560ee0990510 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560ee09904e0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x560ee0990400 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x560ee0990320 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x560ee09902d8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x560ee09902c0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x560ee0990280 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x560ee0990308 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x560ee09902f0 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x560ee09902a0 <col:38> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x560ee09903e0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x560ee0990398 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x560ee0990380 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x560ee0990340 <col:56> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x560ee09903c8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x560ee09903b0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x560ee0990360 <col:74> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x560ee0990498 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x560ee0990450 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x560ee0990420 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x560ee09904c8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x560ee09904b0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x560ee0990478 <col:102> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x560ee0990730 <line:811:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x560ee0990548 <col:3> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x560ee0990718 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560ee09906e8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x560ee0990608 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x560ee09905c0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x560ee09905a8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x560ee0990568 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x560ee09905f0 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x560ee09905d8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x560ee0990588 <col:38> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x560ee09906a0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x560ee0990658 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x560ee0990628 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x560ee09906d0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x560ee09906b8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x560ee0990680 <col:66> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x560ee0990a18 <line:812:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x560ee0990750 <col:3> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x560ee0990a00 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560ee09909d0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x560ee09908f0 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x560ee0990810 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x560ee09907c8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x560ee09907b0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x560ee0990770 <col:20> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x560ee09907f8 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x560ee09907e0 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x560ee0990790 <col:38> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x560ee09908d0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x560ee0990888 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x560ee0990870 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x560ee0990830 <col:56> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x560ee09908b8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x560ee09908a0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x560ee0990850 <col:74> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x560ee0990988 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x560ee0990940 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x560ee0990910 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x560ee09909b8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x560ee09909a0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x560ee0990968 <col:102> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x560ee0990a70 <line:813:3, col:25> 'void'
    | `-ImplicitCastExpr 0x560ee0990a58 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560ee0990a38 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x560ee0990ac8 <line:814:3, col:27> 'void'
    | `-ImplicitCastExpr 0x560ee0990ab0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560ee0990a90 <col:3> 'void ()' Function 0x560ee092bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x560ee0990b60 <line:815:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x560ee0990ae8 <col:3> '_Bool' lvalue Var 0x560ee0985ff8 'weak$$choice0' '_Bool'
    | `-CallExpr 0x560ee0990b40 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x560ee0990b28 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x560ee0990b08 <col:19> '_Bool (void)' Function 0x560ee092b770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x560ee0990c08 <line:816:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x560ee0990b80 <col:3> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
    | `-CallExpr 0x560ee0990be8 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x560ee0990bd0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x560ee0990bb0 <col:19> '_Bool (void)' Function 0x560ee092b770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x560ee0990c80 <line:817:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x560ee0990c28 <col:3> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x560ee0990c68 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x560ee0990c48 <col:21> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x560ee0990cf8 <line:818:3, col:15> 'int' '='
    | |-DeclRefExpr 0x560ee0990ca0 <col:3> 'int' lvalue Var 0x560ee0985850 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x560ee0990ce0 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x560ee0990cc0 <col:15> 'int' lvalue Var 0x560ee0985738 'x' 'int'
    |-BinaryOperator 0x560ee0991130 <line:819:3, col:162> 'int' '='
    | |-DeclRefExpr 0x560ee0990d18 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
    | `-ConditionalOperator 0x560ee0991100 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x560ee0990f28 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x560ee0990e48 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x560ee0990d70 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x560ee0990d58 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x560ee0990d38 <col:8> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x560ee0990e28 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x560ee0990dc0 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x560ee0990da8 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x560ee0990d88 <col:27> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x560ee0990e10 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x560ee0990df8 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x560ee0990dd8 <col:46> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x560ee0990f08 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x560ee0990ea0 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x560ee0990e88 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x560ee0990e68 <col:65> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x560ee0990ef0 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x560ee0990ed8 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x560ee0990eb8 <col:84> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x560ee09910e8 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560ee0990f48 <col:101> 'int' lvalue Var 0x560ee0985738 'x' 'int'
    |   `-ParenExpr 0x560ee09910c8 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x560ee0991098 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x560ee0991008 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x560ee0990fc0 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x560ee0990fa8 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x560ee0990f68 <col:106> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x560ee0990ff0 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x560ee0990fd8 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x560ee0990f88 <col:124> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x560ee0991068 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x560ee0991028 <col:141> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x560ee0991080 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x560ee0991048 <col:153> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
    |-BinaryOperator 0x560ee0991640 <line:820:3, col:208> 'int' '='
    | |-DeclRefExpr 0x560ee0991150 <col:3> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x560ee0991610 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x560ee09915e0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x560ee09915c8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x560ee0991170 <col:15> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x560ee09915f8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560ee0991190 <col:31> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x560ee09915a8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x560ee0991578 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x560ee09913a0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x560ee09912c0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x560ee09911e8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x560ee09911d0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x560ee09911b0 <col:45> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x560ee09912a0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x560ee0991238 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x560ee0991220 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x560ee0991200 <col:64> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x560ee0991288 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x560ee0991270 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x560ee0991250 <col:83> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x560ee0991380 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x560ee0991318 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x560ee0991300 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x560ee09912e0 <col:102> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x560ee0991368 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x560ee0991350 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x560ee0991330 <col:121> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x560ee0991560 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x560ee09913c0 <col:138> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
    |       `-ParenExpr 0x560ee0991540 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x560ee0991510 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x560ee0991480 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x560ee0991438 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x560ee0991420 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x560ee09913e0 <col:151> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x560ee0991468 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x560ee0991450 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x560ee0991400 <col:169> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x560ee09914e0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x560ee09914a0 <col:186> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x560ee09914f8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x560ee09914c0 <col:198> 'int' lvalue Var 0x560ee0985cf0 'x$w_buff0' 'int'
    |-BinaryOperator 0x560ee0991b50 <line:821:3, col:208> 'int' '='
    | |-DeclRefExpr 0x560ee0991660 <col:3> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x560ee0991b20 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x560ee0991af0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x560ee0991ad8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x560ee0991680 <col:15> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x560ee0991b08 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560ee09916a0 <col:31> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
    |   `-ParenExpr 0x560ee0991ab8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x560ee0991a88 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x560ee09918b0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x560ee09917d0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x560ee09916f8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x560ee09916e0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x560ee09916c0 <col:45> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x560ee09917b0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x560ee0991748 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x560ee0991730 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x560ee0991710 <col:64> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x560ee0991798 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x560ee0991780 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x560ee0991760 <col:83> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x560ee0991890 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x560ee0991828 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x560ee0991810 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x560ee09917f0 <col:102> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x560ee0991878 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x560ee0991860 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x560ee0991840 <col:121> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x560ee0991a70 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x560ee09918d0 <col:138> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
    |       `-ParenExpr 0x560ee0991a50 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x560ee0991a20 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x560ee0991990 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x560ee0991948 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x560ee0991930 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x560ee09918f0 <col:151> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x560ee0991978 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x560ee0991960 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x560ee0991910 <col:169> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x560ee09919f0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x560ee09919b0 <col:186> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x560ee0991a08 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x560ee09919d0 <col:198> 'int' lvalue Var 0x560ee0985de8 'x$w_buff1' 'int'
    |-BinaryOperator 0x560ee0992108 <line:822:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x560ee0991b70 <col:3> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x560ee09920f0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560ee09920c0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x560ee0992078 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560ee0992060 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560ee0991b90 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x560ee09920a8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560ee0992090 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560ee0991bc0 <col:36> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x560ee0992040 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x560ee0992010 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x560ee0991dd0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x560ee0991cf0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x560ee0991c18 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x560ee0991c00 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x560ee0991be0 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x560ee0991cd0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x560ee0991c68 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x560ee0991c50 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x560ee0991c30 <col:74> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x560ee0991cb8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x560ee0991ca0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x560ee0991c80 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x560ee0991db0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x560ee0991d48 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x560ee0991d30 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x560ee0991d10 <col:112> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x560ee0991d98 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x560ee0991d80 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x560ee0991d60 <col:131> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x560ee0991ff8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x560ee0991fe0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x560ee0991df0 <col:148> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x560ee0991fc0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x560ee0991f90 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x560ee0991eb0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x560ee0991e68 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x560ee0991e50 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x560ee0991e10 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x560ee0991e98 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x560ee0991e80 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x560ee0991e30 <col:184> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x560ee0991f48 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x560ee0991f00 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x560ee0991ed0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x560ee0991f78 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x560ee0991f60 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x560ee0991f28 <col:212> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x560ee09926d0 <line:823:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x560ee0992128 <col:3> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x560ee09926b8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560ee0992688 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x560ee0992640 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560ee0992628 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560ee0992148 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x560ee0992670 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560ee0992658 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560ee0992168 <col:36> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x560ee0992608 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x560ee09925d8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x560ee0992378 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x560ee0992298 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x560ee09921c0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x560ee09921a8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x560ee0992188 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x560ee0992278 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x560ee0992210 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x560ee09921f8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x560ee09921d8 <col:74> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x560ee0992260 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x560ee0992248 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x560ee0992228 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x560ee0992358 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x560ee09922f0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x560ee09922d8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x560ee09922b8 <col:112> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x560ee0992340 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x560ee0992328 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x560ee0992308 <col:131> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x560ee09925c0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x560ee09925a8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x560ee0992398 <col:148> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x560ee0992588 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x560ee0992558 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x560ee0992458 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x560ee0992410 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x560ee09923f8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x560ee09923b8 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x560ee0992440 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x560ee0992428 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x560ee09923d8 <col:184> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x560ee0992528 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x560ee09924a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x560ee0992478 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x560ee0992540 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x560ee0992500 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x560ee09924d0 <col:219> 'int' 0
    |-BinaryOperator 0x560ee0992c98 <line:824:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x560ee09926f0 <col:3> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x560ee0992c80 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560ee0992c50 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x560ee0992c08 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560ee0992bf0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560ee0992710 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x560ee0992c38 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560ee0992c20 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560ee0992730 <col:36> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x560ee0992bd0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x560ee0992b80 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x560ee0992940 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x560ee0992860 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x560ee0992788 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x560ee0992770 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x560ee0992750 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x560ee0992840 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x560ee09927d8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x560ee09927c0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x560ee09927a0 <col:74> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x560ee0992828 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x560ee0992810 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x560ee09927f0 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x560ee0992920 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x560ee09928b8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x560ee09928a0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x560ee0992880 <col:112> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x560ee0992908 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x560ee09928f0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x560ee09928d0 <col:131> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x560ee0992b68 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x560ee0992b50 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x560ee0992960 <col:148> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x560ee0992b30 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x560ee0992b00 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x560ee0992a20 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x560ee09929d8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x560ee09929c0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x560ee0992980 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x560ee0992a08 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x560ee09929f0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x560ee09929a0 <col:184> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x560ee0992ab8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x560ee0992a70 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x560ee0992a40 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x560ee0992ae8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x560ee0992ad0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x560ee0992a98 <col:212> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x560ee0993260 <line:825:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x560ee0992cb8 <col:3> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x560ee0993248 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x560ee0993218 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x560ee09931d0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560ee09931b8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560ee0992cd8 <col:20> '_Bool' lvalue Var 0x560ee0986070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x560ee0993200 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x560ee09931e8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x560ee0992cf8 <col:36> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x560ee0993198 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x560ee0993168 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x560ee0992f08 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x560ee0992e28 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x560ee0992d50 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x560ee0992d38 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x560ee0992d18 <col:55> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x560ee0992e08 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x560ee0992da0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x560ee0992d88 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x560ee0992d68 <col:74> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x560ee0992df0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x560ee0992dd8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x560ee0992db8 <col:93> '_Bool' lvalue Var 0x560ee0985e60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x560ee0992ee8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x560ee0992e80 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x560ee0992e68 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x560ee0992e48 <col:112> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x560ee0992ed0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x560ee0992eb8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x560ee0992e98 <col:131> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x560ee0993150 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x560ee0993138 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x560ee0992f28 <col:148> '_Bool' lvalue Var 0x560ee0985a30 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x560ee0993118 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x560ee09930e8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x560ee0992fe8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x560ee0992fa0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x560ee0992f88 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x560ee0992f48 <col:166> '_Bool' lvalue Var 0x560ee0985d68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x560ee0992fd0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x560ee0992fb8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x560ee0992f68 <col:184> '_Bool' lvalue Var 0x560ee09858c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x560ee09930b8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x560ee0993038 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x560ee0993008 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x560ee09930d0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x560ee0993090 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x560ee0993060 <col:219> 'int' 0
    |-BinaryOperator 0x560ee0993530 <line:826:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x560ee0993280 <col:3> '_Bool' lvalue Var 0x560ee0985638 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x560ee0993518 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x560ee0993500 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x560ee09934e0 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x560ee09934c0 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x560ee0993428 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x560ee0993390 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x560ee09932f8 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x560ee09932e0 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x560ee09932a0 <col:23> 'int' lvalue Var 0x560ee0985738 'x' 'int'
    |         | | | `-IntegerLiteral 0x560ee09932c0 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x560ee0993370 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x560ee0993358 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x560ee0993318 <col:33> 'int' lvalue Var 0x560ee09852e8 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x560ee0993338 <col:56> 'int' 1
    |         | `-BinaryOperator 0x560ee0993408 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x560ee09933f0 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x560ee09933b0 <col:61> 'int' lvalue Var 0x560ee0985408 '__unbuffered_p1_EAX' 'int'
    |         |   `-IntegerLiteral 0x560ee09933d0 <col:84> 'int' 1
    |         `-BinaryOperator 0x560ee09934a0 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x560ee0993488 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x560ee0993448 <col:89> 'int' lvalue Var 0x560ee0985528 '__unbuffered_p1_EBX' 'int'
    |           `-IntegerLiteral 0x560ee0993468 <col:112> 'int' 0
    |-BinaryOperator 0x560ee0993660 <line:827:3, col:37> 'int' '='
    | |-DeclRefExpr 0x560ee0993550 <col:3> 'int' lvalue Var 0x560ee0985738 'x' 'int'
    | `-ConditionalOperator 0x560ee0993630 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x560ee09935e8 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x560ee09935d0 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x560ee0993570 <col:7> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x560ee0993600 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x560ee0993590 <col:25> 'int' lvalue Var 0x560ee0985850 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x560ee0993618 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x560ee09935b0 <col:37> 'int' lvalue Var 0x560ee0985738 'x' 'int'
    |-BinaryOperator 0x560ee09936f8 <line:828:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x560ee0993680 <col:3> '_Bool' lvalue Var 0x560ee09857d0 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x560ee09936d0 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x560ee09936a0 <col:28> 'int' 0
    |-CallExpr 0x560ee0993750 <line:829:3, col:25> 'void'
    | `-ImplicitCastExpr 0x560ee0993738 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x560ee0993718 <col:3> 'void ()' Function 0x560ee092c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x560ee09937c8 <line:830:3, col:36> 'void'
    | |-ImplicitCastExpr 0x560ee09937b0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x560ee0993770 <col:3> 'void (int)' Function 0x560ee092bd28 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x560ee0993808 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x560ee09937f0 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x560ee0993790 <col:21> '_Bool' lvalue Var 0x560ee0985638 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x560ee0993840 <line:831:3, col:10>
      `-IntegerLiteral 0x560ee0993820 <col:10> 'int' 0
