TranslationUnitDecl 0x55e83ce2be18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55e83ce2c6d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55e83ce2c3b0 '__int128'
|-TypedefDecl 0x55e83ce2c748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55e83ce2c3d0 'unsigned __int128'
|-TypedefDecl 0x55e83ce2ca50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55e83ce2c820 'struct __NSConstantString_tag'
|   `-Record 0x55e83ce2c7a0 '__NSConstantString_tag'
|-TypedefDecl 0x55e83ce2caf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55e83ce2cab0 'char *'
|   `-BuiltinType 0x55e83ce2beb0 'char'
|-TypedefDecl 0x55e83ce6b650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55e83ce2cd90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55e83ce2cbd0 'struct __va_list_tag'
|     `-Record 0x55e83ce2cb50 '__va_list_tag'
|-FunctionDecl 0x55e83ce6b770 <./test/rfi002_rmo.opt_true-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x55e83ce6b940 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55e83ce6b870 <col:31> col:34 'int'
|-FunctionDecl 0x55e83ce6bab8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x55e83ce6bbe0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55e83ce6bd28 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55e83ce6bc98 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x55e83ce6bf58 <col:40, col:99>
|   |-IfStmt 0x55e83ce6bf28 <col:42, col:88>
|   | |-UnaryOperator 0x55e83ce6be08 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x55e83ce6bdf0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55e83ce6bdd0 <col:47> 'int' lvalue ParmVar 0x55e83ce6bc98 'expression' 'int'
|   | `-CompoundStmt 0x55e83ce6bf10 <col:59, col:88>
|   |   `-LabelStmt 0x55e83ce6bef8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x55e83ce6be88 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x55e83ce6be70 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x55e83ce6be20 <col:68> 'void () __attribute__((noreturn))' Function 0x55e83ce6bbe0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x55e83ce6bf40 <col:89>
|   `-ReturnStmt 0x55e83ce6bf48 <col:91>
|-FunctionDecl 0x55e83ce6bfa0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x55e83ce6c060 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x55e83ce6c3e0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55e83ce6c118 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x55e83ce6c198 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x55e83ce6c218 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55e83ce6c298 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55e83ce6c4a0 <line:11:22>
|-FunctionDecl 0x55e83ce92520 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55e83ce6c510 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x55e83ce6c590 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x55e83ce92350 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55e83ce923d0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55e83ce925e0 <line:14:22>
|-FunctionDecl 0x55e83ce92890 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55e83ce92650 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x55e83ce926d0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x55e83ce92750 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x55e83ce92948 <line:16:22>
|-TypedefDecl 0x55e83ce929b8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x55e83ce2bf70 'unsigned char'
|-TypedefDecl 0x55e83ce92a28 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x55e83ce2bf90 'unsigned short'
|-TypedefDecl 0x55e83ce92a98 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-TypedefDecl 0x55e83ce92b08 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce92b78 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x55e83ce2bed0 'signed char'
|-TypedefDecl 0x55e83ce92be8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x55e83ce2bf70 'unsigned char'
|-TypedefDecl 0x55e83ce92c58 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x55e83ce2bef0 'short'
|-TypedefDecl 0x55e83ce92cc8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x55e83ce2bf90 'unsigned short'
|-TypedefDecl 0x55e83ce92d38 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x55e83ce2bf10 'int'
|-TypedefDecl 0x55e83ce92da8 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-TypedefDecl 0x55e83ce92e18 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce92e88 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce92ef8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce92f68 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce92fd8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce93048 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-TypedefDecl 0x55e83ce930b8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-TypedefDecl 0x55e83ce93128 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce93198 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce93208 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-TypedefDecl 0x55e83ce93278 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce932e8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce93378 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce933e8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x55e83ce2bf10 'int'
|-RecordDecl 0x55e83ce93440 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x55e83ce93588 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x55e83ce93640 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x55e83ce935e0 'struct __fsid_t' sugar
|   `-RecordType 0x55e83ce934c0 '__fsid_t'
|     `-Record 0x55e83ce93440 ''
|-TypedefDecl 0x55e83ce936c8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce93738 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce937a8 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce93818 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-TypedefDecl 0x55e83ce93888 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce938f8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-TypedefDecl 0x55e83ce93968 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce939d8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x55e83ce2bf10 'int'
|-TypedefDecl 0x55e83ce93a48 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x55e83ce2bf10 'int'
|-TypedefDecl 0x55e83ce93ab8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x55e83ce2bf10 'int'
|-TypedefDecl 0x55e83ce93b28 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x55e83ce2c630 'void *'
|   `-BuiltinType 0x55e83ce2be70 'void'
|-TypedefDecl 0x55e83ce93b98 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce93c08 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce93c78 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce93ce8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce93d58 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce93dc8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce93e38 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce93ea8 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce93f18 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce93f88 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce93ff8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce94088 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x55e83ce94050 '__off64_t' sugar
|   |-Typedef 0x55e83ce93378 '__off64_t'
|   `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce94180 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x55e83ce94140 '__quad_t *'
|   `-TypedefType 0x55e83ce940e0 '__quad_t' sugar
|     |-Typedef 0x55e83ce92ef8 '__quad_t'
|     `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce941f0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x55e83ce2cab0 'char *'
|   `-BuiltinType 0x55e83ce2beb0 'char'
|-TypedefDecl 0x55e83ce94260 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce942d0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-FunctionDecl 0x55e83ce95458 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x55e83ce95380 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x55e83ce95768 <line:72:1, line:74:1>
|   `-ReturnStmt 0x55e83ce95758 <line:73:3, col:34>
|     `-CallExpr 0x55e83ce95718 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x55e83ce95700 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55e83ce95690 <col:10> '<builtin fn type>' Function 0x55e83ce95500 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x55e83ce95740 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55e83ce956b0 <col:29> 'unsigned int' lvalue ParmVar 0x55e83ce95380 '__bsx' 'unsigned int'
|-FunctionDecl 0x55e83ce95500 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x55e83ce955a0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x55e83ce95610 <col:10> Implicit
| `-ConstAttr 0x55e83ce95668 <col:10> Implicit
|-FunctionDecl 0x55e83ce958c0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x55e83ce957b8 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x55e83ce95bd8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x55e83ce95bc8 <line:78:3, col:34>
|     `-CallExpr 0x55e83ce95b88 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x55e83ce95b70 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x55e83ce95af8 <col:10> '<builtin fn type>' Function 0x55e83ce95968 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x55e83ce95bb0 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x55e83ce95b18 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x55e83ce957b8 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x55e83ce95968 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x55e83ce95a08 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x55e83ce95a78 <col:10> Implicit
| `-ConstAttr 0x55e83ce95ad0 <col:10> Implicit
|-TypedefDecl 0x55e83ce95c08 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-TypedefDecl 0x55e83ce95c98 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x55e83ce95c60 '__time_t' sugar
|   |-Typedef 0x55e83ce93888 '__time_t'
|   `-BuiltinType 0x55e83ce2bf30 'long'
|-RecordDecl 0x55e83ce95cf0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x55e83ce95da8 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x55e83ce95e38 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x55e83ce95ec8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x55e83ce95e90 '__pid_t' sugar
|   |-Typedef 0x55e83ce933e8 '__pid_t'
|   `-BuiltinType 0x55e83ce2bf10 'int'
|-RecordDecl 0x55e83ce95f20 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x55e83ce95fe0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x55e83ce96030 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x55e83ce960f0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x55e83ce96158 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-RecordDecl 0x55e83ce961b0 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x55e83ce97480 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x55e83ce97530 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x55e83ce974d0 'struct cpu_set_t' sugar
|   `-RecordType 0x55e83ce96230 'cpu_set_t'
|     `-Record 0x55e83ce961b0 ''
|-FunctionDecl 0x55e83ce97808 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x55e83ce975d8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55e83ce976e0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x55e83ce978b8 <line:108:19>
|-FunctionDecl 0x55e83ce97a90 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x55e83ce97920 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x55e83ce97b38 <col:69>
|-FunctionDecl 0x55e83ce97cb0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x55e83ce97ba0 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x55e83ce97d58 <col:64>
|-FunctionDecl 0x55e83ce98018 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x55e83ce97dc0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55e83ce97ef8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55e83ce980c8 <line:114:22>
|-FunctionDecl 0x55e83ce983b0 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x55e83ce98130 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55e83ce98228 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x55e83ce98460 <col:88>
|-FunctionDecl 0x55e83ce98718 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55e83ce984c8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55e83ce98548 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x55e83ce985d8 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x55e83ce987d0 <col:62>
|-FunctionDecl 0x55e83ce98948 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x55e83ce98838 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x55e83ce989f0 <col:63>
|-FunctionDecl 0x55e83ce98b18 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x55e83ce98bb8 <col:47>
|-FunctionDecl 0x55e83ce98cc0 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x55e83ce98c28 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55e83ce98d68 <col:69>
|-FunctionDecl 0x55e83ce98e70 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x55e83ce98dd8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x55e83ce98f18 <col:69>
|-FunctionDecl 0x55e83ce991d8 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55e83ce98f80 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x55e83ce990b8 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x55e83ce99288 <col:88>
|-TypedefDecl 0x55e83ce99318 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x55e83ce992e0 '__clock_t' sugar
|   |-Typedef 0x55e83ce936c8 '__clock_t'
|   `-BuiltinType 0x55e83ce2bf30 'long'
|-TypedefDecl 0x55e83ce993c0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x55e83ce99370 '__clockid_t' sugar
|   |-Typedef 0x55e83ce93ab8 '__clockid_t'
|   `-BuiltinType 0x55e83ce2bf10 'int'
|-TypedefDecl 0x55e83ce99458 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x55e83ce99420 '__timer_t' sugar
|   |-Typedef 0x55e83ce93b28 '__timer_t'
|   `-PointerType 0x55e83ce2c630 'void *'
|     `-BuiltinType 0x55e83ce2be70 'void'
|-RecordDecl 0x55e83ce994b0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x55e83ce99570 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x55e83ce995d8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x55e83ce99640 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x55e83ce996a8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x55e83ce99710 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x55e83ce99778 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x55e83ce997e0 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x55e83ce99848 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x55e83ce998b0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x55e83ce99918 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x55e83ce99980 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x55e83ce999d0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x55e83ce99a98 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x55e83ce99b08 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x55e83ce99bb0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x55e83ce99d80 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x55e83ce99e20 <col:45>
|-FunctionDecl 0x55e83ce9a000 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x55e83ce99ef0 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x55e83ce9a0a8 <col:54>
|-FunctionDecl 0x55e83ce9a2a8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x55e83ce9a110 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x55e83ce9a188 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x55e83ce9a358 <line:158:22>
| `-ConstAttr 0x55e83ce9aff0 <col:63>
|-FunctionDecl 0x55e83ce9b1f0 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55e83ce9b0e8 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55e83ce9b298 <col:56>
|-FunctionDecl 0x55e83ce9b640 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x55e83ce9b308 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x55e83ce9b380 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55e83ce9b400 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x55e83ce9b4f8 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x55e83ce9b700 <col:54>
|-RecordDecl 0x55e83ce9b758 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x55e83ce9b808 parent 0x55e83ce2be18 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x55e83ce9ba68 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x55e83ce9bb08 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x55e83ce9bb70 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x55e83ce9bbd8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x55e83ce9bcc8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x55e83ce9bde8 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x55e83ce9bd90 'struct __locale_struct *'
|   `-ElaboratedType 0x55e83ce9bd20 'struct __locale_struct' sugar
|     `-RecordType 0x55e83ce9b7e0 'struct __locale_struct'
|       `-Record 0x55e83ce9b758 '__locale_struct'
|-TypedefDecl 0x55e83ce9be98 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x55e83ce9be60 '__locale_t' sugar
|   |-Typedef 0x55e83ce9bde8 '__locale_t'
|   `-PointerType 0x55e83ce9bd90 'struct __locale_struct *'
|     `-ElaboratedType 0x55e83ce9bd20 'struct __locale_struct' sugar
|       `-RecordType 0x55e83ce9b7e0 'struct __locale_struct'
|         `-Record 0x55e83ce9b758 '__locale_struct'
|-FunctionDecl 0x55e83ce9d2a0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x55e83ce9bf08 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x55e83ce9bf80 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x55e83ce9d028 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x55e83ce9d0b8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55e83ce9d130 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x55e83ce9d368 <col:40>
|-FunctionDecl 0x55e83ce9d558 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55e83ce9d430 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x55e83ce9d600 <col:66>
|-FunctionDecl 0x55e83ce9d710 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x55e83ce9d668 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x55e83ce9d7b8 <col:69>
|-FunctionDecl 0x55e83ce9d9e8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55e83ce9d820 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55e83ce9d8b0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55e83ce9da98 <col:52>
|-FunctionDecl 0x55e83ce9dc40 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x55e83ce9db00 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55e83ce9db90 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x55e83ce9dcf0 <col:55>
|-FunctionDecl 0x55e83ce9de88 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x55e83ce9dd70 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x55e83ce9df30 <col:62>
|-FunctionDecl 0x55e83ce9e168 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x55e83ce9df98 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x55e83ce9e210 <col:60>
|-FunctionDecl 0x55e83ce9e438 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55e83ce9e290 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x55e83ce9e310 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x55e83ce9e4e8 <col:44>
|-FunctionDecl 0x55e83ce9e6f8 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x55e83ce9e550 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x55e83ce9e5d0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x55e83ce9e7a8 <col:49>
|-VarDecl 0x55e83ce9e8a8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x55e83ce9e928 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x55e83ce9e9a8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x55e83ce9ea70 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x55e83ce9eba0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x55e83ce9ec40 <col:42>
|-VarDecl 0x55e83ce9ecb0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x55e83ce9ed30 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x55e83ce9eeb8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x55e83ce9eda8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x55e83ce9ef60 <col:57>
|-FunctionDecl 0x55e83ce9f0d0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55e83ce9efe0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x55e83ce9f178 <col:56>
|-FunctionDecl 0x55e83ce9f288 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x55e83ce9f1f8 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x55e83ce9f330 <col:59>
|-FunctionDecl 0x55e83ce9f438 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x55e83ce9f3a0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x55e83ce9f4e0 <col:48>
| `-ConstAttr 0x55e83ce9f538 <col:89>
|-FunctionDecl 0x55e83ce9f798 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55e83ce9f5e8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x55e83ce9f678 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x55e83ce9f9f8 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55e83ce9f888 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55e83ce9f918 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x55e83ce9faa8 <col:88>
|-FunctionDecl 0x55e83ce9fc40 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x55e83ce9fb10 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55e83ce9fba0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x55e83ce9fcf0 <col:88>
|-FunctionDecl 0x55e83ce9ff08 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x55e83ce9fd58 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55e83ce9fde8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x55e83ce9ffb8 <line:209:22>
|-FunctionDecl 0x55e83cea0358 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x55e83cea0020 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55e83cea00e0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x55e83cea0170 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x55e83cea0200 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x55e83cea0658 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x55e83cea0458 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x55e83cea0530 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x55e83cea0708 <col:85>
|-FunctionDecl 0x55e83cea0af8 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x55e83cea0770 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x55e83cea08a8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x55e83cea09b0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x55e83cea0bb0 <col:52>
|-FunctionDecl 0x55e83cea0d28 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x55e83cea0c18 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55e83cea0dd0 <col:61>
|-FunctionDecl 0x55e83cea1248 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x55e83cea0e38 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55e83cea0eb8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x55e83cea0fe8 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x55e83cea10f0 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x55e83cea1308 <col:62>
|-FunctionDecl 0x55e83cea1528 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x55e83cea1370 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x55e83cea1400 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x55e83cea15d8 <line:222:22>
|-FunctionDecl 0x55e83cea16d8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x55e83cea1640 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x55e83cea1780 <col:65>
|-TypedefDecl 0x55e83cea17f0 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x55e83ce2bfd0 'unsigned long'
|-RecordDecl 0x55e83cea1848 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x55e83cea1990 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55e83cea19f8 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55e83cea1aa8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x55e83cea1a50 'union pthread_attr_t' sugar
|   `-RecordType 0x55e83cea18d0 'union pthread_attr_t'
|     `-Record 0x55e83cea1848 'pthread_attr_t'
|-RecordDecl 0x55e83cea1b00 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x55e83cea1c78 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x55e83cea1cf0 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x55e83cea1da0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x55e83cea1d40 'struct __pthread_internal_list' sugar
|   `-RecordType 0x55e83cea1b80 'struct __pthread_internal_list'
|     `-Record 0x55e83cea1b00 '__pthread_internal_list'
|-RecordDecl 0x55e83cea1e10 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x55e83cea1eb8 parent 0x55e83ce2be18 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x55e83cea1f90 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55e83cea1ff8 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x55e83cea2060 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x55e83cea6110 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x55e83cea6178 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x55e83cea61e0 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x55e83cea6268 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x55e83cea6320 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x55e83cea6410 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x55e83cea6478 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55e83cea6600 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x55e83cea65a0 'union pthread_mutex_t' sugar
|   `-RecordType 0x55e83cea1e90 'pthread_mutex_t'
|     `-Record 0x55e83cea1e10 ''
|-RecordDecl 0x55e83cea6670 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x55e83cea67b0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55e83cea6818 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55e83cea68d0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x55e83cea6870 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x55e83cea66f0 'pthread_mutexattr_t'
|     `-Record 0x55e83cea6670 ''
|-RecordDecl 0x55e83cea6940 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x55e83cea69e8 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x55e83cea6ab0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55e83cea6b18 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x55e83cea6b80 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x55e83cea6be8 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x55e83cea6c50 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x55e83cea6cb8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x55e83cea6d20 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x55e83cea6d88 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x55e83cea6e40 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at ./test/rfi002_rmo.opt_true-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at ./test/rfi002_rmo.opt_true-unreach-call.i:259:3)'
| |-FieldDecl 0x55e83cea6f30 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x55e83cea6f98 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x55e83cea8130 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x55e83cea7070 'union pthread_cond_t' sugar
|   `-RecordType 0x55e83cea69c0 'pthread_cond_t'
|     `-Record 0x55e83cea6940 ''
|-RecordDecl 0x55e83cea81a0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x55e83cea82a0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55e83cea8308 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55e83cea83c0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x55e83cea8360 'union pthread_condattr_t' sugar
|   `-RecordType 0x55e83cea8220 'pthread_condattr_t'
|     `-Record 0x55e83cea81a0 ''
|-TypedefDecl 0x55e83cea8448 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x55e83ce2bfb0 'unsigned int'
|-TypedefDecl 0x55e83cea84b8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x55e83ce2bf10 'int'
|-RecordDecl 0x55e83cea8510 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x55e83cea85b8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x55e83cea8680 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x55e83cea86e8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x55e83cea8750 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x55e83cea87b8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x55e83cea8820 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x55e83cea8888 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x55e83cea88f0 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x55e83cea8958 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x55e83cea89c0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x55e83cea8a28 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x55e83cea8a90 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x55e83cea8b40 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at ./test/rfi002_rmo.opt_true-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at ./test/rfi002_rmo.opt_true-unreach-call.i:282:3)'
| |-FieldDecl 0x55e83cea8be8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x55e83cea8c50 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55e83cea8da0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x55e83cea8d40 'union pthread_rwlock_t' sugar
|   `-RecordType 0x55e83cea8590 'pthread_rwlock_t'
|     `-Record 0x55e83cea8510 ''
|-RecordDecl 0x55e83cea8e10 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x55e83cea8f50 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x55e83cea8fb8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55e83cea9070 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x55e83cea9010 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x55e83cea8e90 'pthread_rwlockattr_t'
|     `-Record 0x55e83cea8e10 ''
|-TypedefDecl 0x55e83ceaa140 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x55e83ce2bf14 'volatile int' volatile
|   `-BuiltinType 0x55e83ce2bf10 'int'
|-RecordDecl 0x55e83ceaa198 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x55e83ceaa2e0 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x55e83ceaa348 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x55e83ceaa400 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x55e83ceaa3a0 'union pthread_barrier_t' sugar
|   `-RecordType 0x55e83ceaa220 'pthread_barrier_t'
|     `-Record 0x55e83ceaa198 ''
|-RecordDecl 0x55e83ceaa470 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x55e83ceaa570 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x55e83ceaa5d8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x55e83ceaa690 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x55e83ceaa630 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x55e83ceaa4f0 'pthread_barrierattr_t'
|     `-Record 0x55e83ceaa470 ''
|-TypedefDecl 0x55e83ceaa7a8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x55e83ceaa740 'long [8]' 8 
|   `-BuiltinType 0x55e83ce2bf30 'long'
|-EnumDecl 0x55e83ceaa800 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x55e83ceaa8c8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x55e83ceaa918 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x55e83ceaa968 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x55e83ceaaa38 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x55e83ceaaa88 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x55e83ceaaad8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x55e83ceaab28 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x55e83ceaabb0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x55e83ceaab98 <col:26> 'int'
| |   `-DeclRefExpr 0x55e83ceaab78 <col:26> 'int' EnumConstant 0x55e83ceaaa38 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x55e83ceaac38 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x55e83ceaac20 <col:29> 'int'
| |   `-DeclRefExpr 0x55e83ceaac00 <col:29> 'int' EnumConstant 0x55e83ceaaa88 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x55e83ceaacc0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x55e83ceaaca8 <col:30> 'int'
| |   `-DeclRefExpr 0x55e83ceaac88 <col:30> 'int' EnumConstant 0x55e83ceaaad8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x55e83ceaad48 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x55e83ceaad30 <col:27> 'int'
|     `-DeclRefExpr 0x55e83ceaad10 <col:27> 'int' EnumConstant 0x55e83ceaabb0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x55e83ceaad98 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x55e83ceaae68 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x55e83ceaaef0 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x55e83ceaaed8 <col:30> 'int'
| |   `-DeclRefExpr 0x55e83ceaaeb8 <col:30> 'int' EnumConstant 0x55e83ceaae68 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x55e83ceaaf40 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x55e83ceaafc8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x55e83ceaafb0 <col:29> 'int'
|     `-DeclRefExpr 0x55e83ceaaf90 <col:29> 'int' EnumConstant 0x55e83ceaaf40 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x55e83ceab018 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x55e83ceab0e8 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x55e83ceab150 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x55e83ceab1a0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x55e83ceab1f0 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x55e83ceab2b8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x55e83ceab308 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x55e83ceab358 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x55e83ceab3e0 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x55e83ceab3c8 <col:31> 'int'
|     `-DeclRefExpr 0x55e83ceab3a8 <col:31> 'int' EnumConstant 0x55e83ceab2b8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x55e83ceab430 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x55e83ceab4f8 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x55e83ceab548 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x55e83ceab598 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x55e83ceab668 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x55e83ceab6b8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x55e83ceab708 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x55e83ceab7d8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x55e83ceab828 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x55e83ceab878 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x55e83ceabab8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x55e83ceabb20 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x55e83ceabb88 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x55e83ceabca8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x55e83ceabcf8 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x55e83ceabdc8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x55e83ceabe18 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x55e83ceabe68 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x55e83ceabf38 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x55e83ceabf88 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x55e83ceac5b8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x55e83ceac080 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x55e83ceac1a0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceac3a0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x55e83ceac420 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x55e83ceac678 <col:47>
| |-NonNullAttr 0x55e83ceac6d0 <col:77, col:94> 1 3
| `-CallbackAttr 0x55e83ceac708 <line:386:12> Implicit 2 3
|-FunctionDecl 0x55e83ceac830 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x55e83ceac760 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x55e83ceaca88 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x55e83ceac8e8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x55e83ceac968 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x55e83ceacc58 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x55e83ceacb48 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x55e83ceacd00 <col:60>
|-FunctionDecl 0x55e83ceace50 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x55e83ceacef0 <col:54>
| `-ConstAttr 0x55e83ceacf48 <col:95>
|-FunctionDecl 0x55e83ceae990 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x55e83ceacf80 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55e83ceacff8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x55e83ceaea40 <line:395:19>
| `-ConstAttr 0x55e83ceaea98 <col:60>
|-FunctionDecl 0x55e83ceaec68 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55e83ceaeb30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55e83ceaed10 <col:71>
| `-NonNullAttr 0x55e83ceaed68 <col:112, col:126> 1
|-FunctionDecl 0x55e83ceaee70 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x55e83ceaedb8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x55e83ceaef18 <line:398:22>
| `-NonNullAttr 0x55e83ceaef70 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceaf198 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x55e83ceaefb8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceaf038 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x55e83ceaf248 <line:401:22>
| `-NonNullAttr 0x55e83ceaf2a0 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceaf4a8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceaf2e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceaf368 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x55e83ceaf558 <line:404:22>
| `-NonNullAttr 0x55e83ceaf5b0 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceaf808 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x55e83ceaf5f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceaf6a0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x55e83ceaf8b8 <line:407:22>
| `-NonNullAttr 0x55e83ceaf910 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb0b68 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55e83ceb09b0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceb0a28 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55e83ceb0c18 <line:410:22>
| `-NonNullAttr 0x55e83ceb0c70 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb0ea8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55e83ceb0cb8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceb0d48 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55e83ceb0f58 <line:413:22>
| `-NonNullAttr 0x55e83ceb0fb0 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb11e8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55e83ceb0ff8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceb1088 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x55e83ceb1298 <col:37>
| `-NonNullAttr 0x55e83ceb12f0 <col:78, col:95> 1 2
|-FunctionDecl 0x55e83ceb14d8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceb1338 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceb13b8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x55e83ceb1588 <line:419:22>
| `-NonNullAttr 0x55e83ceb15e0 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb1768 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceb1628 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceb16a8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x55e83ceb1818 <line:421:22>
| `-NonNullAttr 0x55e83ceb1870 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb1a38 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceb18b8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceb1938 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x55e83ceb1ae8 <line:424:22>
| `-NonNullAttr 0x55e83ceb1b40 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb1cc8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceb1b88 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceb1c08 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x55e83ceb1d78 <line:427:22>
| `-NonNullAttr 0x55e83ceb1dd0 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb1f78 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceb1e18 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceb1e98 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x55e83ceb2028 <line:430:22>
| `-NonNullAttr 0x55e83ceb2080 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb2208 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceb20c8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceb2148 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x55e83ceb22b8 <line:432:22>
| `-NonNullAttr 0x55e83ceb2310 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb2538 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x55e83ceb2358 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceb23d8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x55e83ceb25e8 <line:435:22>
| |-NonNullAttr 0x55e83ceb2640 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x55e83ceb2678 <col:100> "" ""
|-FunctionDecl 0x55e83ceb2888 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x55e83ceb26c8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceb2748 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x55e83ceb2938 <line:438:22>
| |-NonNullAttr 0x55e83ceb2990 <col:63, col:77> 1
| `-DeprecatedAttr 0x55e83ceb29d8 <col:97> "" ""
|-FunctionDecl 0x55e83ceb2bc8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55e83ceb2a28 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceb2aa0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55e83ceb2c78 <line:441:22>
| `-NonNullAttr 0x55e83ceb2cd0 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb2e50 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x55e83ceb2d18 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceb2d90 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55e83ceb2f00 <line:444:22>
| `-NonNullAttr 0x55e83ceb2f58 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb3248 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x55e83ceb2fa8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x55e83ceb3028 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x55e83ceb30a0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x55e83ceb3300 <line:448:22>
| `-NonNullAttr 0x55e83ceb3358 <col:63, col:83> 1 2 3
|-FunctionDecl 0x55e83ceb3608 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x55e83ceb33b0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x55e83ceb3430 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x55e83ceb34a8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x55e83ceb36c0 <col:43>
| `-NonNullAttr 0x55e83ceb3718 <col:84, col:98> 1
|-FunctionDecl 0x55e83ceb3a20 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x55e83ceb3768 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55e83ceb37e8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x55e83ceb3878 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x55e83ceb3ad8 <line:453:22>
| `-NonNullAttr 0x55e83ceb3b30 <col:63, col:77> 3
|-FunctionDecl 0x55e83ceb3e08 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x55e83ceb3b78 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55e83ceb3bf8 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x55e83ceb3c88 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x55e83ceb3ec0 <line:457:22>
| `-NonNullAttr 0x55e83ceb3f18 <col:63, col:80> 2 3
|-FunctionDecl 0x55e83ceb4108 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x55e83ceb3f68 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55e83ceb3fe8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x55e83ceb41b8 <line:459:22>
|-FunctionDecl 0x55e83ceb4588 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x55e83ceb4280 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x55e83ceb4420 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x55e83ceb4638 <col:52, col:69> 1 2
|-FunctionDecl 0x55e83ceb47e0 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x55e83ceb46c0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x55e83ceb4740 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x55e83ceb49f0 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x55e83ceb48a8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x55e83ceb4928 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x55e83ceb4b48 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x55e83ceb4ab0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x55e83ceb4c88 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x55e83ceb4d28 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x55e83ceb4dd8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x55e83ceb4ec8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x55e83ceb4f30 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x55e83ceb5100 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./test/rfi002_rmo.opt_true-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x55e83ceb51f8 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x55e83ceb52b0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x55e83ceb5250 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x55e83ceb4db0 '__pthread_unwind_buf_t'
| |   `-Record 0x55e83ceb4d28 ''
| `-AlignedAttr 0x55e83ceb5308 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x55e83ceb5380 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x55e83ceb54e0 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x55e83ceb5548 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x55e83ceb55b0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x55e83ceb5618 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x55e83ceb5820 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55e83ceb5710 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55e83ceb5a00 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x55e83ceb58d8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x55e83ceb5bc0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55e83ceb5ab8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x55e83ceb5c68 <line:488:22>
|-RecordDecl 0x55e83ceb5cc0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x55e83ceb5fd8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x55e83ceb5e38 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x55e83ceb5eb8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x55e83ceb6088 <col:86>
| `-ReturnsTwiceAttr 0x55e83ceb60e0 <col:12> Implicit
|-FunctionDecl 0x55e83ceb6408 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55e83ceb61b0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x55e83ceb62c0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x55e83ceb64b8 <line:494:22>
| `-NonNullAttr 0x55e83ceb6510 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb6688 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55e83ceb6558 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55e83ceb6730 <line:496:22>
| `-NonNullAttr 0x55e83ceb6788 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb6890 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55e83ceb67d8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55e83ceb6938 <line:498:22>
| `-NonNullAttr 0x55e83ceb6990 <col:52, col:66> 1
|-FunctionDecl 0x55e83ceb7ad8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55e83ceb7a20 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55e83ceb7b80 <line:500:22>
| `-NonNullAttr 0x55e83ceb7bd8 <col:52, col:66> 1
|-FunctionDecl 0x55e83ceb7e18 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55e83ceb7c28 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55e83ceb7cb8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55e83ceb7ec8 <col:36>
| `-NonNullAttr 0x55e83ceb7f20 <col:66, col:83> 1 2
|-FunctionDecl 0x55e83ceb8020 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55e83ceb7f68 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55e83ceb80c8 <line:505:22>
| `-NonNullAttr 0x55e83ceb8120 <col:52, col:66> 1
|-FunctionDecl 0x55e83ceb83b8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceb81d0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55e83ceb8250 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55e83ceb8468 <line:509:22>
| `-NonNullAttr 0x55e83ceb84c0 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb8788 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceb8508 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55e83ceb8588 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x55e83ceb8608 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x55e83ceb8840 <line:513:22>
| `-NonNullAttr 0x55e83ceb8898 <col:63, col:80> 1 3
|-FunctionDecl 0x55e83ceb8a30 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x55e83ceb88e8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x55e83ceb8ad8 <line:515:22>
| `-NonNullAttr 0x55e83ceb8b30 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb8d18 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55e83ceb8be0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55e83ceb8dc0 <line:517:22>
| `-NonNullAttr 0x55e83ceb8e18 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb8f20 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x55e83ceb8e68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x55e83ceb8fc8 <line:519:22>
| `-NonNullAttr 0x55e83ceb9020 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb9248 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceb9068 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55e83ceb90e8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x55e83ceb92f8 <line:523:22>
| `-NonNullAttr 0x55e83ceb9350 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb9558 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceb9398 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55e83ceb9418 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x55e83ceb9608 <line:526:22>
| `-NonNullAttr 0x55e83ceb9660 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb9808 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceb96a8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55e83ceb9728 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x55e83ceb98b8 <line:529:22>
| `-NonNullAttr 0x55e83ceb9910 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceb9b00 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceb9958 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55e83ceb9a40 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x55e83ceb9bb0 <line:531:22>
| `-NonNullAttr 0x55e83ceb9c08 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceb9db8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceb9c58 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55e83ceb9cd8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x55e83ceb9e68 <line:535:22>
| `-NonNullAttr 0x55e83ceb9ec0 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceba048 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceb9f08 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55e83ceb9f88 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x55e83ceba0f8 <line:538:22>
| `-NonNullAttr 0x55e83ceba150 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceba2f8 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83ceba198 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x55e83ceba218 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x55e83ceba3a8 <line:542:22>
| `-NonNullAttr 0x55e83ceba400 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83ceba588 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceba448 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55e83ceba4c8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x55e83ceba638 <line:545:22>
| `-NonNullAttr 0x55e83ceba690 <col:63, col:77> 1
|-FunctionDecl 0x55e83ceba878 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x55e83ceba6d8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x55e83ceba758 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x55e83ceba928 <line:548:22>
| `-NonNullAttr 0x55e83ceba980 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83cebbb38 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x55e83ceba9c8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x55e83cebba78 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x55e83cebbbe8 <line:551:22>
| `-NonNullAttr 0x55e83cebbc40 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebbf78 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x55e83cebbd20 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55e83cebbe30 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x55e83cebc028 <col:29>
| `-NonNullAttr 0x55e83cebc080 <col:70, col:84> 1
|-FunctionDecl 0x55e83cebc1f8 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55e83cebc0c8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55e83cebc2a0 <line:556:22>
| `-NonNullAttr 0x55e83cebc2f8 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebc400 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55e83cebc348 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55e83cebc4a8 <line:558:22>
| `-NonNullAttr 0x55e83cebc500 <col:52, col:66> 1
|-FunctionDecl 0x55e83cebc600 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55e83cebc548 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55e83cebc6a8 <line:560:19>
| `-NonNullAttr 0x55e83cebc700 <col:49, col:63> 1
|-FunctionDecl 0x55e83cebc938 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55e83cebc748 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55e83cebc7d8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55e83cebc9e8 <col:39>
| `-NonNullAttr 0x55e83cebca70 <col:69, col:86> 1 2
|-FunctionDecl 0x55e83cebcb70 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55e83cebcab8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55e83cebcc18 <line:565:22>
| `-NonNullAttr 0x55e83cebcc70 <col:52, col:66> 1
|-FunctionDecl 0x55e83cebcd70 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55e83cebccb8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55e83cebce18 <line:567:22>
| `-NonNullAttr 0x55e83cebce70 <col:52, col:66> 1
|-FunctionDecl 0x55e83cebd028 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55e83cebceb8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x55e83cebcf48 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x55e83cebd0d8 <col:39>
| `-NonNullAttr 0x55e83cebd130 <col:69, col:86> 1 2
|-FunctionDecl 0x55e83cebd230 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x55e83cebd178 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x55e83cebd2d8 <line:572:22>
| `-NonNullAttr 0x55e83cebd330 <col:52, col:66> 1
|-FunctionDecl 0x55e83cebd518 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55e83cebd3e0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55e83cebd5c0 <line:574:22>
| `-NonNullAttr 0x55e83cebd618 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebd720 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x55e83cebd668 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x55e83cebd7c8 <line:576:22>
| `-NonNullAttr 0x55e83cebd820 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebda80 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83cebd868 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55e83cebd8e8 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x55e83cebdb30 <line:580:22>
| `-NonNullAttr 0x55e83cebdb88 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83cebdd98 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55e83cebdbd8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55e83cebdc58 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x55e83cebde48 <line:583:22>
| `-NonNullAttr 0x55e83cebdea0 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebe048 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83cebdee8 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x55e83cebdf68 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x55e83cebe0f8 <line:587:22>
| `-NonNullAttr 0x55e83cebe150 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83cebe2d8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x55e83cebe198 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x55e83cebe218 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x55e83cebe388 <col:36>
| `-NonNullAttr 0x55e83cebe3e0 <col:77, col:91> 1
|-FunctionDecl 0x55e83cebe718 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x55e83cebe4c0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55e83cebe5d0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x55e83cebe7c8 <line:592:22>
| `-NonNullAttr 0x55e83cebe820 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebe998 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55e83cebe868 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55e83cebea40 <line:594:22>
| `-NonNullAttr 0x55e83cebeac0 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebebc0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55e83cebeb08 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55e83cebec68 <line:596:22>
| `-NonNullAttr 0x55e83cebecc0 <col:52, col:66> 1
|-FunctionDecl 0x55e83cebedc0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x55e83cebed08 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x55e83cebee68 <line:598:22>
| `-NonNullAttr 0x55e83cebeec0 <col:52, col:66> 1
|-FunctionDecl 0x55e83cebf0e8 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x55e83cebef08 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55e83cebef80 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x55e83cebf198 <line:601:22, col:39> 1 2
|-FunctionDecl 0x55e83cebf4c8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x55e83cebf218 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x55e83cebf290 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x55e83cebf320 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x55e83cebf580 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x55e83cebf798 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55e83cebf660 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55e83cebf840 <line:607:22>
| `-NonNullAttr 0x55e83cebf898 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebf9a0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x55e83cebf8e8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x55e83cebfa48 <line:609:22>
| `-NonNullAttr 0x55e83cebfad0 <col:63, col:77> 1
|-FunctionDecl 0x55e83cebfcf8 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83cebfb18 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55e83cebfb98 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x55e83cebfda8 <line:613:22>
| `-NonNullAttr 0x55e83cebfe00 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83cec0008 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x55e83cebfe48 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55e83cebfec8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x55e83cec00b8 <col:37>
| `-NonNullAttr 0x55e83cec0110 <col:78, col:92> 1
|-FunctionDecl 0x55e83cec0328 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x55e83cec0158 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x55e83cec0200 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x55e83cec03d8 <line:619:22>
| `-NonNullAttr 0x55e83cec0430 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83cec05f8 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x55e83cec0478 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x55e83cec04f0 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x55e83cec06a8 <line:622:22>
| `-NonNullAttr 0x55e83cec0700 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec09a8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x55e83cec07e0 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x55e83cec0860 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x55e83cec0a58 <line:624:22>
| `-NonNullAttr 0x55e83cec0ae0 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec0c58 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55e83cec0b28 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55e83cec0d00 <line:626:22>
| `-NonNullAttr 0x55e83cec0d58 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec0e60 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55e83cec0da8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55e83cec0f08 <line:628:22>
| `-NonNullAttr 0x55e83cec0f60 <col:52, col:66> 1
|-FunctionDecl 0x55e83cec1060 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55e83cec0fa8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55e83cec1108 <line:630:22>
| `-NonNullAttr 0x55e83cec1160 <col:52, col:66> 1
|-FunctionDecl 0x55e83cec1260 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x55e83cec11a8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x55e83cec1308 <line:632:22>
| `-NonNullAttr 0x55e83cec1360 <col:52, col:66> 1
|-FunctionDecl 0x55e83cec1738 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x55e83cec1440 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x55e83cec1550 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55e83cec15d0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x55e83cec17f0 <line:636:22>
| `-NonNullAttr 0x55e83cec1848 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec19c8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55e83cec1898 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55e83cec1a70 <line:638:22>
| `-NonNullAttr 0x55e83cec2b00 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec2c00 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x55e83cec2b48 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x55e83cec2ca8 <line:640:22>
| `-NonNullAttr 0x55e83cec2d00 <col:52, col:66> 1
|-FunctionDecl 0x55e83cec2ee8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55e83cec2db0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55e83cec2f90 <line:642:22>
| `-NonNullAttr 0x55e83cec2fe8 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec30f0 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x55e83cec3038 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x55e83cec3198 <line:644:22>
| `-NonNullAttr 0x55e83cec31f0 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec3418 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x55e83cec3238 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x55e83cec32b8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x55e83cec34c8 <line:648:22>
| `-NonNullAttr 0x55e83cec3520 <col:63, col:80> 1 2
|-FunctionDecl 0x55e83cec3728 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x55e83cec3568 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x55e83cec35e8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x55e83cec37d8 <line:651:22>
| `-NonNullAttr 0x55e83cec3830 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec3b98 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x55e83cec3910 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x55e83cec3a30 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x55e83cec3c48 <line:654:22>
| `-NonNullAttr 0x55e83cec3ca0 <col:63, col:77> 1
|-FunctionDecl 0x55e83cec3df8 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x55e83cec3ce8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55e83cec3ea0 <col:69>
|-FunctionDecl 0x55e83cec4018 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x55e83cec3f08 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x55e83cec40c0 <col:72>
|-FunctionDecl 0x55e83cec42f8 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x55e83cec4128 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x55e83cec41d8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x55e83cec43a8 <col:44>
|-FunctionDecl 0x55e83cec45c8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x55e83cec4410 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x55e83cec4488 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x55e83cec4678 <line:661:22>
| `-NonNullAttr 0x55e83cec46d0 <col:63, col:77> 2
|-FunctionDecl 0x55e83cec4b30 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x55e83cec47b0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x55e83cec48c0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x55e83cec49d0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x55e83cec4be8 <col:47>
|-FunctionDecl 0x55e83cec4cf0 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x55e83cec4c58 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55e83cec4e48 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x55e83cec4db0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x55e83cec4f10 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x55e83cec4fd0 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x55e83cec5090 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x55e83cec5148 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x55e83cec51c8 prev 0x55e83cec5148 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x55e83cec5230 <col:24> 'int' 0
|-VarDecl 0x55e83cec5268 <line:673:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x55e83cec52e8 prev 0x55e83cec5268 <line:674:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x55e83cec5350 <col:27> 'int' 0
|-VarDecl 0x55e83cec5388 <line:675:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x55e83cec5408 prev 0x55e83cec5388 <line:676:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x55e83cec5470 <col:27> 'int' 0
|-VarDecl 0x55e83cec54a8 <line:677:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x55e83cec5528 prev 0x55e83cec54a8 <line:678:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x55e83cec5590 <col:27> 'int' 0
|-VarDecl 0x55e83cec55c0 <line:679:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x55e83cec5638 <line:680:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x55e83cec56b8 <line:681:1, col:5> col:5 used x 'int'
|-VarDecl 0x55e83cec5738 prev 0x55e83cec56b8 <line:682:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x55e83cec57a0 <col:9> 'int' 0
|-VarDecl 0x55e83cec57d0 <line:683:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x55e83cec5850 <line:684:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x55e83cec58c8 <line:685:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x55e83cec5940 <line:686:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x55e83cec59b8 <line:687:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x55e83cec5a30 <line:688:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x55e83cec5b00 <line:689:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x55e83cec5b78 <line:690:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x55e83cec5bf0 <line:691:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x55e83cec5c70 <line:692:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x55e83cec5cf0 <line:693:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x55e83cec5d68 <line:694:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x55e83cec5de8 <line:695:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x55e83cec5e60 <line:696:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x55e83cec5ee0 <line:697:1, col:5> col:5 used y 'int'
|-VarDecl 0x55e83cec5f60 prev 0x55e83cec5ee0 <line:698:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x55e83cec5fc8 <col:9> 'int' 0
|-VarDecl 0x55e83cec5ff8 <line:699:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x55e83cec6070 <line:700:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x55e83cec6188 prev 0x55e83cec4cf0 <line:701:1, line:740:1> line:701:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x55e83cec60f0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55e83cecab80 <line:702:1, line:740:1>
|   |-CallExpr 0x55e83cec6298 <line:703:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cec6280 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cec6230 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cec62f8 <line:704:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55e83cec62b8 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   | `-IntegerLiteral 0x55e83cec62d8 <col:7> 'int' 1
|   |-CallExpr 0x55e83cec6350 <line:705:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cec6338 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cec6318 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83cec63a8 <line:706:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cec6390 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cec6370 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cec6690 <line:707:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55e83cec63c8 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   | `-ConditionalOperator 0x55e83cec6660 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55e83cec6488 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55e83cec6440 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55e83cec6428 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55e83cec63e8 <col:7> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55e83cec6470 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55e83cec6458 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55e83cec6408 <col:25> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cec6648 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cec64a8 <col:42> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55e83cec6628 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55e83cec65f8 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55e83cec6568 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55e83cec6520 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55e83cec6508 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55e83cec64c8 <col:55> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55e83cec6550 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55e83cec6538 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55e83cec64e8 <col:73> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cec65c8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cec6588 <col:90> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55e83cec65e0 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cec65a8 <col:102> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83cec6898 <line:708:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec66b0 <col:3> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec6880 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cec6850 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55e83cec6770 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55e83cec6728 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55e83cec6710 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55e83cec66d0 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55e83cec6758 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55e83cec6740 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55e83cec66f0 <col:38> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cec6808 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83cec67c0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83cec6790 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83cec6838 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83cec6820 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cec67e8 <col:66> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55e83cec6ba0 <line:709:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec68b8 <col:3> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec6b88 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cec6b58 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55e83cec6a58 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55e83cec6978 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55e83cec6930 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55e83cec6918 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55e83cec68d8 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55e83cec6960 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55e83cec6948 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55e83cec68f8 <col:38> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55e83cec6a38 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55e83cec69f0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55e83cec69d8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55e83cec6998 <col:56> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55e83cec6a20 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55e83cec6a08 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55e83cec69b8 <col:74> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cec6b10 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83cec6aa8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83cec6a78 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83cec6b40 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83cec6b28 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cec6ad0 <col:102> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55e83cec6da8 <line:710:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec6bc0 <col:3> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec6d90 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cec6d60 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55e83cec6c80 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55e83cec6c38 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55e83cec6c20 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55e83cec6be0 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55e83cec6c68 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55e83cec6c50 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55e83cec6c00 <col:38> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cec6d18 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83cec6cd0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83cec6ca0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83cec6d48 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83cec6d30 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cec6cf8 <col:66> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55e83cec7090 <line:711:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec6dc8 <col:3> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec7078 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cec7048 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55e83cec6f68 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55e83cec6e88 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55e83cec6e40 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55e83cec6e28 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55e83cec6de8 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55e83cec6e70 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55e83cec6e58 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55e83cec6e08 <col:38> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55e83cec6f48 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55e83cec6f00 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55e83cec6ee8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55e83cec6ea8 <col:56> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55e83cec6f30 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55e83cec6f18 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55e83cec6ec8 <col:74> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cec7000 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83cec6fb8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83cec6f88 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83cec7030 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83cec7018 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cec6fe0 <col:102> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x55e83cec70e8 <line:712:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cec70d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cec70b0 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83cec7140 <line:713:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cec7128 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cec7108 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cec7208 <line:714:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec7160 <col:3> '_Bool' lvalue Var 0x55e83cec5ff8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x55e83cec71e8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55e83cec71d0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55e83cec7180 <col:19> '_Bool (void)' Function 0x55e83ce6b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55e83cec72a0 <line:715:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec7228 <col:3> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x55e83cec7280 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55e83cec7268 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55e83cec7248 <col:19> '_Bool (void)' Function 0x55e83ce6b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55e83cec7318 <line:716:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec72c0 <col:3> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec7300 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cec72e0 <col:21> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55e83cec7390 <line:717:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55e83cec7338 <col:3> 'int' lvalue Var 0x55e83cec5850 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55e83cec7378 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cec7358 <col:15> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83cec77c8 <line:718:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55e83cec73b0 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   | `-ConditionalOperator 0x55e83cec7798 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55e83cec75c0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55e83cec74e0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55e83cec7408 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55e83cec73f0 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55e83cec73d0 <col:8> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55e83cec74c0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55e83cec7458 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55e83cec7440 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55e83cec7420 <col:27> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x55e83cec74a8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55e83cec7490 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55e83cec7470 <col:46> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55e83cec75a0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55e83cec7538 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55e83cec7520 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55e83cec7500 <col:65> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x55e83cec7588 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55e83cec7570 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55e83cec7550 <col:84> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cec7780 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cec75e0 <col:101> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |   `-ParenExpr 0x55e83cec7760 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55e83cec7730 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55e83cec76a0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55e83cec7658 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55e83cec7640 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55e83cec7600 <col:106> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55e83cec7688 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55e83cec7670 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55e83cec7620 <col:124> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cec7700 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cec76c0 <col:141> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55e83cec7718 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cec76e0 <col:153> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55e83cec7cf8 <line:719:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55e83cec77e8 <col:3> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x55e83cec7cc8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55e83cec7c98 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55e83cec7c80 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55e83cec7808 <col:15> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cec7cb0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cec7828 <col:31> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55e83cec7c60 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55e83cec7c30 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55e83cec7a38 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55e83cec7958 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55e83cec7880 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55e83cec7868 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55e83cec7848 <col:45> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55e83cec7938 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55e83cec78d0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55e83cec78b8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55e83cec7898 <col:64> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x55e83cec7920 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55e83cec7908 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55e83cec78e8 <col:83> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55e83cec7a18 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55e83cec79b0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55e83cec7998 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55e83cec7978 <col:102> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x55e83cec7a00 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55e83cec79e8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55e83cec79c8 <col:121> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cec7c18 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cec7a58 <col:138> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x55e83cec7bf8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55e83cec7bc8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55e83cec7b38 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55e83cec7ad0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55e83cec7ab8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55e83cec7a78 <col:151> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55e83cec7b20 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55e83cec7ae8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55e83cec7a98 <col:169> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x55e83cec7b98 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55e83cec7b58 <col:186> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55e83cec7bb0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55e83cec7b78 <col:198> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55e83cec8208 <line:720:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55e83cec7d18 <col:3> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x55e83cec81d8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55e83cec81a8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55e83cec8190 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55e83cec7d38 <col:15> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cec81c0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cec7d58 <col:31> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x55e83cec8170 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55e83cec8140 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55e83cec7f68 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55e83cec7e88 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55e83cec7db0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55e83cec7d98 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55e83cec7d78 <col:45> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55e83cec7e68 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55e83cec7e00 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55e83cec7de8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55e83cec7dc8 <col:64> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x55e83cec7e50 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55e83cec7e38 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55e83cec7e18 <col:83> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55e83cec7f48 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55e83cec7ee0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55e83cec7ec8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55e83cec7ea8 <col:102> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x55e83cec7f30 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55e83cec7f18 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55e83cec7ef8 <col:121> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cec8128 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cec7f88 <col:138> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x55e83cec8108 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55e83cec80d8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55e83cec8048 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55e83cec8000 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55e83cec7fe8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55e83cec7fa8 <col:151> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55e83cec8030 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55e83cec8018 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55e83cec7fc8 <col:169> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x55e83cec80a8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55e83cec8068 <col:186> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55e83cec80c0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55e83cec8088 <col:198> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55e83cec87b0 <line:721:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec8228 <col:3> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec8798 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cec8768 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55e83cec8720 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cec8708 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cec8248 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cec8750 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cec8738 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cec8268 <col:36> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55e83cec86e8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55e83cec86b8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55e83cec8478 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55e83cec8398 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55e83cec82c0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55e83cec82a8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55e83cec8288 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55e83cec8378 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55e83cec8310 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55e83cec82f8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55e83cec82d8 <col:74> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55e83cec8360 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55e83cec8348 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55e83cec8328 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55e83cec8458 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55e83cec83f0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55e83cec83d8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55e83cec83b8 <col:112> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55e83cec8440 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55e83cec8428 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55e83cec8408 <col:131> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55e83cec86a0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55e83cec8688 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55e83cec8498 <col:148> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55e83cec8668 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55e83cec8638 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55e83cec8558 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55e83cec8510 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55e83cec84f8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55e83cec84b8 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55e83cec8540 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55e83cec8528 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55e83cec84d8 <col:184> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55e83cec85f0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55e83cec85a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55e83cec8578 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55e83cec8620 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55e83cec8608 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55e83cec85d0 <col:212> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55e83cec8d88 <line:722:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec87d0 <col:3> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec8d70 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cec8d40 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55e83cec8cf8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cec8ce0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cec87f0 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cec8d28 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cec8d10 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cec8810 <col:36> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55e83cec8cc0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55e83cec8c90 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55e83cec8a20 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55e83cec8940 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55e83cec8868 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55e83cec8850 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55e83cec8830 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55e83cec8920 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55e83cec88b8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55e83cec88a0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55e83cec8880 <col:74> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55e83cec8908 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55e83cec88f0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55e83cec88d0 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55e83cec8a00 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55e83cec8998 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55e83cec8980 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55e83cec8960 <col:112> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55e83cec89e8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55e83cec89d0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55e83cec89b0 <col:131> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55e83cec8c78 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55e83cec8c60 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55e83cec8a40 <col:148> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55e83cec8c40 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55e83cec8c10 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55e83cec8b00 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55e83cec8ab8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55e83cec8aa0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55e83cec8a60 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55e83cec8ae8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55e83cec8ad0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55e83cec8a80 <col:184> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55e83cec8be0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55e83cec8b60 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55e83cec8b30 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55e83cec8bf8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55e83cec8bb8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55e83cec8b88 <col:219> 'int' 0
|   |-BinaryOperator 0x55e83cec9330 <line:723:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec8da8 <col:3> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec9318 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cec92e8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55e83cec92a0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cec9288 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cec8dc8 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cec92d0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cec92b8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cec8de8 <col:36> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x55e83cec9268 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55e83cec9238 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55e83cec8ff8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55e83cec8f18 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55e83cec8e40 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55e83cec8e28 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55e83cec8e08 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55e83cec8ef8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55e83cec8e90 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55e83cec8e78 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55e83cec8e58 <col:74> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55e83cec8ee0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55e83cec8ec8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55e83cec8ea8 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55e83cec8fd8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55e83cec8f70 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55e83cec8f58 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55e83cec8f38 <col:112> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55e83cec8fc0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55e83cec8fa8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55e83cec8f88 <col:131> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55e83cec9220 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55e83cec9208 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55e83cec9018 <col:148> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x55e83cec91e8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55e83cec91b8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55e83cec90d8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55e83cec9090 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55e83cec9078 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55e83cec9038 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55e83cec90c0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55e83cec90a8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55e83cec9058 <col:184> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55e83cec9170 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55e83cec9128 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55e83cec90f8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55e83cec91a0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55e83cec9188 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55e83cec9150 <col:212> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55e83cec98f8 <line:724:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec9350 <col:3> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cec98e0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cec98b0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55e83cec9868 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cec9850 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cec9370 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cec9898 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cec9880 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cec9390 <col:36> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x55e83cec9830 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55e83cec9800 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55e83cec95a0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55e83cec94c0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55e83cec93e8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55e83cec93d0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55e83cec93b0 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55e83cec94a0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55e83cec9438 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55e83cec9420 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55e83cec9400 <col:74> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x55e83cec9488 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55e83cec9470 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55e83cec9450 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55e83cec9580 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55e83cec9518 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55e83cec9500 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55e83cec94e0 <col:112> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x55e83cec9568 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55e83cec9550 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55e83cec9530 <col:131> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x55e83cec97e8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55e83cec97d0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55e83cec95c0 <col:148> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x55e83cec97b0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55e83cec9780 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55e83cec9680 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55e83cec9638 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55e83cec9620 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55e83cec95e0 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55e83cec9668 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55e83cec9650 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55e83cec9600 <col:184> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x55e83cec9750 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55e83cec96d0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55e83cec96a0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55e83cec9768 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55e83cec9728 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55e83cec96f8 <col:219> 'int' 0
|   |-BinaryOperator 0x55e83cec9970 <line:725:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55e83cec9918 <col:3> 'int' lvalue Var 0x55e83cec52e8 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x55e83cec9958 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cec9938 <col:25> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83cec9aa0 <line:726:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55e83cec9990 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   | `-ConditionalOperator 0x55e83cec9a70 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55e83cec9a28 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55e83cec9a10 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55e83cec99b0 <col:7> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cec9a40 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cec99d0 <col:25> 'int' lvalue Var 0x55e83cec5850 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55e83cec9a58 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55e83cec99f0 <col:37> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83cec9b68 <line:727:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec9ac0 <col:3> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55e83cec9b40 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55e83cec9ae0 <col:28> 'int' 0
|   |-CallExpr 0x55e83cec9bc0 <line:728:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cec9ba8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cec9b88 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83cec9c18 <line:729:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cec9c00 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cec9be0 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cec9f00 <line:730:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55e83cec9c38 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   | `-ConditionalOperator 0x55e83cec9ed0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55e83cec9cf8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55e83cec9cb0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55e83cec9c98 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55e83cec9c58 <col:7> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55e83cec9ce0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55e83cec9cc8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55e83cec9c78 <col:25> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cec9eb8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cec9d18 <col:42> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55e83cec9e98 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55e83cec9e68 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55e83cec9dd8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55e83cec9d90 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55e83cec9d78 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55e83cec9d38 <col:55> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55e83cec9dc0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55e83cec9da8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55e83cec9d58 <col:73> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cec9e38 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cec9df8 <col:90> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55e83cec9e50 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cec9e18 <col:102> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83ceca108 <line:731:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cec9f20 <col:3> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83ceca0f0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83ceca0c0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55e83cec9fe0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55e83cec9f98 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55e83cec9f80 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55e83cec9f40 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55e83cec9fc8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55e83cec9fb0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55e83cec9f60 <col:38> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83ceca078 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83ceca030 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83ceca000 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83ceca0a8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83ceca090 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83ceca058 <col:66> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55e83ceca3f0 <line:732:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55e83ceca128 <col:3> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83ceca3d8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83ceca3a8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55e83ceca2c8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55e83ceca1e8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55e83ceca1a0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55e83ceca188 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55e83ceca148 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55e83ceca1d0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55e83ceca1b8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55e83ceca168 <col:38> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55e83ceca2a8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55e83ceca260 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55e83ceca248 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55e83ceca208 <col:56> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55e83ceca290 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55e83ceca278 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55e83ceca228 <col:74> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83ceca360 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83ceca318 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83ceca2e8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83ceca390 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83ceca378 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83ceca340 <col:102> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55e83ceca5f8 <line:733:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55e83ceca410 <col:3> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55e83ceca5e0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83ceca5b0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55e83ceca4d0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55e83ceca488 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55e83ceca470 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55e83ceca430 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55e83ceca4b8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55e83ceca4a0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55e83ceca450 <col:38> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83ceca568 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83ceca520 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83ceca4f0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83ceca598 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83ceca580 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83ceca548 <col:66> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55e83ceca8e0 <line:734:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55e83ceca618 <col:3> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55e83ceca8c8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83ceca898 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55e83ceca7b8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55e83ceca6d8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55e83ceca690 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55e83ceca678 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55e83ceca638 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55e83ceca6c0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55e83ceca6a8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55e83ceca658 <col:38> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x55e83ceca798 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55e83ceca750 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55e83ceca738 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55e83ceca6f8 <col:56> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55e83ceca780 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55e83ceca768 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55e83ceca718 <col:74> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83ceca850 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83ceca808 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83ceca7d8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83ceca880 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83ceca868 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83ceca830 <col:102> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x55e83ceca938 <line:735:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83ceca920 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83ceca900 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83ceca990 <line:736:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83ceca978 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83ceca958 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cecaa48 <line:737:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55e83ceca9b0 <col:3> 'int' lvalue Var 0x55e83cec51c8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55e83cecaa28 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55e83cecaa10 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83ceca9d0 <col:22> 'int' lvalue Var 0x55e83cec51c8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55e83ceca9f0 <col:41> 'int' 1
|   |-CallExpr 0x55e83cecaaa0 <line:738:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cecaa88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecaa68 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55e83cecab70 <line:739:3, col:36>
|     `-CallExpr 0x55e83cecab50 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55e83cecab10 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55e83cecaac0 <col:10> 'void *(void)' Function 0x55e83ce6bab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55e83cecad68 prev 0x55e83cec4e48 <line:741:1, line:787:1> line:741:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x55e83cecacd0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x55e83cecf080 <line:742:1, line:787:1>
|   |-CallExpr 0x55e83cecae48 <line:743:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cecae30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecae10 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cecaec0 <line:744:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55e83cecae68 <col:3> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x55e83cecaea8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecae88 <col:15> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55e83cecaf20 <line:745:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55e83cecaee0 <col:3> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x55e83cecaf00 <col:15> 'int' 2
|   |-BinaryOperator 0x55e83cecaf98 <line:746:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecaf40 <col:3> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecaf80 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecaf60 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55e83cecb030 <line:747:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecafb8 <col:3> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x55e83cecb008 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55e83cecafd8 <col:27> 'int' 1
|   |-CallExpr 0x55e83cecb1b8 <line:748:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x55e83cecb1a0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55e83cecb050 <col:3> 'void (int)' Function 0x55e83ce6bd28 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x55e83cecb150 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x55e83cecb130 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x55e83cecb110 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x55e83cecb0c8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x55e83cecb0b0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x55e83cecb070 <col:23> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x55e83cecb0f8 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x55e83cecb0e0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x55e83cecb090 <col:41> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55e83cecb238 <line:749:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecb1e0 <col:3> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecb220 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecb200 <col:20> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x55e83cecb2b0 <line:750:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecb258 <col:3> '_Bool' lvalue Var 0x55e83cec5b00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecb298 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecb278 <col:20> '_Bool' lvalue Var 0x55e83cec5940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x55e83cecb328 <line:751:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecb2d0 <col:3> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecb310 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecb2f0 <col:20> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55e83cecb3c0 <line:752:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecb348 <col:3> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x55e83cecb398 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55e83cecb368 <col:27> 'int' 1
|   |-CallExpr 0x55e83cecb418 <line:753:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cecb400 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecb3e0 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83cecb470 <line:754:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cecb458 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecb438 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cecb4d0 <line:755:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55e83cecb490 <col:3> 'int' lvalue Var 0x55e83cec5f60 'y' 'int'
|   | `-IntegerLiteral 0x55e83cecb4b0 <col:7> 'int' 1
|   |-CallExpr 0x55e83cecb528 <line:756:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cecb510 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecb4f0 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83cecb580 <line:757:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cecb568 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecb548 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cecb5f8 <line:758:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55e83cecb5a0 <col:3> 'int' lvalue Var 0x55e83cec5408 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x55e83cecb5e0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecb5c0 <col:25> 'int' lvalue Var 0x55e83cec5f60 'y' 'int'
|   |-CallExpr 0x55e83cecb650 <line:759:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cecb638 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecb618 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83cecb6a8 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cecb690 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecb670 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cecb740 <line:761:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecb6c8 <col:3> '_Bool' lvalue Var 0x55e83cec5ff8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x55e83cecb720 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55e83cecb708 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55e83cecb6e8 <col:19> '_Bool (void)' Function 0x55e83ce6b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55e83cecb7d8 <line:762:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecb760 <col:3> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x55e83cecb7b8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x55e83cecb7a0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x55e83cecb780 <col:19> '_Bool (void)' Function 0x55e83ce6b770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x55e83cecb850 <line:763:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecb7f8 <col:3> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecb838 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecb818 <col:21> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x55e83cecb8c8 <line:764:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x55e83cecb870 <col:3> 'int' lvalue Var 0x55e83cec5850 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x55e83cecb8b0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecb890 <col:15> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83cecbd28 <line:765:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x55e83cecb8e8 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   | `-ConditionalOperator 0x55e83cecbcf8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x55e83cecbaf8 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x55e83cecba18 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x55e83cecb940 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x55e83cecb928 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x55e83cecb908 <col:8> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x55e83cecb9f8 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x55e83cecb990 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x55e83cecb978 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x55e83cecb958 <col:27> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x55e83cecb9e0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x55e83cecb9c8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55e83cecb9a8 <col:46> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x55e83cecbad8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x55e83cecba70 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x55e83cecba58 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55e83cecba38 <col:65> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x55e83cecbac0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55e83cecbaa8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55e83cecba88 <col:84> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cecbce0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cecbb18 <col:101> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |   `-ParenExpr 0x55e83cecbcc0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x55e83cecbc90 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x55e83cecbc00 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55e83cecbbb8 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55e83cecbba0 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55e83cecbb60 <col:106> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55e83cecbbe8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55e83cecbbd0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55e83cecbb80 <col:124> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cecbc60 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cecbc20 <col:141> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x55e83cecbc78 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cecbc40 <col:153> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55e83cecc238 <line:766:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55e83cecbd48 <col:3> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x55e83cecc208 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55e83cecc1d8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55e83cecc1c0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55e83cecbd68 <col:15> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cecc1f0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cecbd88 <col:31> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55e83cecc1a0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55e83cecc170 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55e83cecbf98 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55e83cecbeb8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55e83cecbde0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55e83cecbdc8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55e83cecbda8 <col:45> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55e83cecbe98 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55e83cecbe30 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55e83cecbe18 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55e83cecbdf8 <col:64> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x55e83cecbe80 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55e83cecbe68 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55e83cecbe48 <col:83> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55e83cecbf78 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55e83cecbf10 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55e83cecbef8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55e83cecbed8 <col:102> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x55e83cecbf60 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55e83cecbf48 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55e83cecbf28 <col:121> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cecc158 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cecbfb8 <col:138> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x55e83cecc138 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55e83cecc108 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55e83cecc078 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55e83cecc030 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55e83cecc018 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55e83cecbfd8 <col:151> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55e83cecc060 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55e83cecc048 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55e83cecbff8 <col:169> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x55e83cecc0d8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55e83cecc098 <col:186> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x55e83cecc0f0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55e83cecc0b8 <col:198> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x55e83cecc748 <line:767:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x55e83cecc258 <col:3> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x55e83cecc718 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x55e83cecc6e8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55e83cecc6d0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55e83cecc278 <col:15> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cecc700 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cecc298 <col:31> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x55e83cecc6b0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x55e83cecc680 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x55e83cecc4a8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x55e83cecc3c8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x55e83cecc2f0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x55e83cecc2d8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x55e83cecc2b8 <col:45> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x55e83cecc3a8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x55e83cecc340 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x55e83cecc328 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x55e83cecc308 <col:64> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x55e83cecc390 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x55e83cecc378 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x55e83cecc358 <col:83> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x55e83cecc488 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x55e83cecc420 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x55e83cecc408 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x55e83cecc3e8 <col:102> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x55e83cecc470 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x55e83cecc458 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55e83cecc438 <col:121> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cecc668 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cecc4c8 <col:138> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x55e83cecc648 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x55e83cecc618 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x55e83cecc588 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x55e83cecc540 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x55e83cecc528 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x55e83cecc4e8 <col:151> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x55e83cecc570 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x55e83cecc558 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55e83cecc508 <col:169> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x55e83cecc5e8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55e83cecc5a8 <col:186> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x55e83cecc600 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55e83cecc5c8 <col:198> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x55e83ceccd00 <line:768:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecc768 <col:3> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83ceccce8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cecccb8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55e83ceccc70 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83ceccc58 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cecc788 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83ceccca0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83ceccc88 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cecc7a8 <col:36> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x55e83ceccc38 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55e83ceccc08 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55e83cecc9b8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55e83cecc8d8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55e83cecc800 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55e83cecc7e8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55e83cecc7c8 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55e83cecc8b8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55e83cecc850 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55e83cecc838 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55e83cecc818 <col:74> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55e83cecc8a0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55e83cecc888 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55e83cecc868 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55e83cecc998 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55e83cecc930 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55e83cecc918 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55e83cecc8f8 <col:112> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55e83cecc980 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55e83cecc968 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55e83cecc948 <col:131> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55e83ceccbf0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55e83ceccbd8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55e83cecc9d8 <col:148> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x55e83ceccbb8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55e83ceccb88 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55e83cecca98 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55e83cecca50 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55e83cecca38 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55e83cecc9f8 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55e83cecca80 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55e83cecca68 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55e83cecca18 <col:184> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55e83ceccb30 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55e83ceccae8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55e83ceccab8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55e83ceccb70 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55e83ceccb48 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55e83ceccb10 <col:212> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55e83cecd2c8 <line:769:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55e83ceccd20 <col:3> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecd2b0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cecd280 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55e83cecd238 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cecd220 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83ceccd40 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cecd268 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cecd250 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83ceccd60 <col:36> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x55e83cecd200 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55e83cecd1d0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55e83ceccf70 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55e83cecce90 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55e83ceccdb8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55e83ceccda0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55e83ceccd80 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55e83cecce70 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55e83cecce08 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55e83ceccdf0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55e83ceccdd0 <col:74> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55e83cecce58 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55e83cecce40 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55e83cecce20 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55e83ceccf50 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55e83ceccee8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55e83cecced0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55e83cecceb0 <col:112> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55e83ceccf38 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55e83ceccf20 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55e83ceccf00 <col:131> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55e83cecd1b8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55e83cecd1a0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55e83ceccf90 <col:148> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x55e83cecd180 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55e83cecd150 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55e83cecd050 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55e83cecd008 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55e83ceccff0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55e83ceccfb0 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55e83cecd038 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55e83cecd020 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55e83ceccfd0 <col:184> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55e83cecd120 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55e83cecd0a0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55e83cecd070 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55e83cecd138 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55e83cecd0f8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55e83cecd0c8 <col:219> 'int' 0
|   |-BinaryOperator 0x55e83cecd870 <line:770:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecd2e8 <col:3> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecd858 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cecd828 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x55e83cecd7e0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cecd7c8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cecd308 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cecd810 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cecd7f8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cecd328 <col:36> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x55e83cecd7a8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x55e83cecd778 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x55e83cecd538 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55e83cecd458 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55e83cecd380 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55e83cecd368 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55e83cecd348 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55e83cecd438 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55e83cecd3d0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55e83cecd3b8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55e83cecd398 <col:74> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55e83cecd420 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55e83cecd408 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55e83cecd3e8 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55e83cecd518 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55e83cecd4b0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55e83cecd498 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55e83cecd478 <col:112> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55e83cecd500 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55e83cecd4e8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55e83cecd4c8 <col:131> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55e83cecd760 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55e83cecd748 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55e83cecd558 <col:148> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x55e83cecd728 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x55e83cecd6f8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x55e83cecd618 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55e83cecd5d0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55e83cecd5b8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55e83cecd578 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55e83cecd600 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55e83cecd5e8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55e83cecd598 <col:184> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55e83cecd6b0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55e83cecd668 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55e83cecd638 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55e83cecd6e0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x55e83cecd6c8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x55e83cecd690 <col:212> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55e83cecde58 <line:771:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cecd890 <col:3> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecde40 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cecde10 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x55e83cecddc8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cecddb0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cecd8b0 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cecddf8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x55e83cecdde0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55e83cecd8d0 <col:36> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x55e83cecdd90 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x55e83cecdd60 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x55e83cecdae0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x55e83cecda00 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x55e83cecd928 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x55e83cecd910 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x55e83cecd8f0 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x55e83cecd9e0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x55e83cecd978 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x55e83cecd960 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x55e83cecd940 <col:74> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x55e83cecd9c8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x55e83cecd9b0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x55e83cecd990 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x55e83cecdac0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x55e83cecda58 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x55e83cecda40 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x55e83cecda20 <col:112> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x55e83cecdaa8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x55e83cecda90 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x55e83cecda70 <col:131> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x55e83cecdd48 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x55e83cecdd30 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x55e83cecdb00 <col:148> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x55e83cecdd10 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x55e83cecdce0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x55e83cecdbe0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x55e83cecdb98 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x55e83cecdb80 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x55e83cecdb20 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x55e83cecdbc8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x55e83cecdbb0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x55e83cecdb40 <col:184> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x55e83cecdcb0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x55e83cecdc30 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x55e83cecdc00 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x55e83cecdcc8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x55e83cecdc88 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x55e83cecdc58 <col:219> 'int' 0
|   |-BinaryOperator 0x55e83cecded0 <line:772:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x55e83cecde78 <col:3> 'int' lvalue Var 0x55e83cec5528 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x55e83cecdeb8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e83cecde98 <col:25> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83cece000 <line:773:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x55e83cecdef0 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   | `-ConditionalOperator 0x55e83cecdfd0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x55e83cecdf88 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x55e83cecdf70 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55e83cecdf10 <col:7> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cecdfa0 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cecdf30 <col:25> 'int' lvalue Var 0x55e83cec5850 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x55e83cecdfb8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55e83cecdf50 <col:37> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83cece098 <line:774:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cece020 <col:3> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x55e83cece070 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x55e83cece040 <col:28> 'int' 0
|   |-CallExpr 0x55e83cece0f0 <line:775:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cece0d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cece0b8 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83cece148 <line:776:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83cece130 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cece110 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cece430 <line:777:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x55e83cece168 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   | `-ConditionalOperator 0x55e83cece400 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x55e83cece228 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x55e83cece1e0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x55e83cece1c8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55e83cece188 <col:7> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x55e83cece210 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x55e83cece1f8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55e83cece1a8 <col:25> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x55e83cece3e8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cece248 <col:42> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x55e83cece3c8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x55e83cece398 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x55e83cece308 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x55e83cece2c0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x55e83cece2a8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x55e83cece268 <col:55> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x55e83cece2f0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x55e83cece2d8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55e83cece288 <col:73> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x55e83cece368 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55e83cece328 <col:90> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x55e83cece380 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cece348 <col:102> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
|   |-BinaryOperator 0x55e83cece638 <line:778:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cece450 <col:3> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cece620 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cece5f0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55e83cece510 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55e83cece4c8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55e83cece4b0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55e83cece470 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55e83cece4f8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55e83cece4e0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55e83cece490 <col:38> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cece5a8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83cece560 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83cece530 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83cece5d8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83cece5c0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cece588 <col:66> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x55e83cece920 <line:779:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cece658 <col:3> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cece908 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cece8d8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55e83cece7f8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55e83cece718 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55e83cece6d0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55e83cece6b8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55e83cece678 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55e83cece700 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55e83cece6e8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55e83cece698 <col:38> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55e83cece7d8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55e83cece790 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55e83cece778 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55e83cece738 <col:56> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55e83cece7c0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55e83cece7a8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55e83cece758 <col:74> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cece890 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83cece848 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83cece818 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83cece8c0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83cece8a8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cece870 <col:102> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x55e83ceceb28 <line:780:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x55e83cece940 <col:3> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55e83ceceb10 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83ceceae0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x55e83cecea00 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x55e83cece9b8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x55e83cece9a0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55e83cece960 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x55e83cece9e8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x55e83cece9d0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55e83cece980 <col:38> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83cecea98 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83cecea50 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83cecea20 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83ceceac8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83ceceab0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83cecea78 <col:66> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x55e83cecee38 <line:781:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x55e83ceceb48 <col:3> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x55e83cecee20 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x55e83cecedf0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x55e83ceced10 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x55e83cecec30 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x55e83cecebe8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x55e83cecebd0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x55e83ceceb90 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x55e83cecec18 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x55e83cecec00 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55e83cecebb0 <col:38> '_Bool' lvalue Var 0x55e83cec59b8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x55e83cececf0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x55e83cececa8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x55e83cecec90 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x55e83cecec50 <col:56> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x55e83cececd8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x55e83cececc0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x55e83cecec70 <col:74> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x55e83ceceda8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x55e83ceced60 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x55e83ceced30 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x55e83cecedd8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x55e83cecedc0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x55e83ceced88 <col:102> '_Bool' lvalue Var 0x55e83cec5b78 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x55e83cecee90 <line:782:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cecee78 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecee58 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x55e83ceceee8 <line:783:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x55e83ceceed0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83ceceeb0 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x55e83cecefa0 <line:784:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x55e83cecef08 <col:3> 'int' lvalue Var 0x55e83cec51c8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x55e83cecef80 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x55e83cecef68 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55e83cecef28 <col:22> 'int' lvalue Var 0x55e83cec51c8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x55e83cecef48 <col:41> 'int' 1
|   |-CallExpr 0x55e83ceceff8 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x55e83cecefe0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55e83cecefc0 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x55e83cecf070 <line:786:3, col:36>
|     `-CallExpr 0x55e83cecf050 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x55e83cecf038 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x55e83cecf018 <col:10> 'void *(void)' Function 0x55e83ce6bab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x55e83cecf210 prev 0x55e83cec4f10 <line:788:1, line:790:1> line:788:6 fence 'void ()'
| `-CompoundStmt 0x55e83cecf2b0 <line:789:1, line:790:1>
|-FunctionDecl 0x55e83cecf2e0 prev 0x55e83cec4fd0 <line:791:1, line:793:1> line:791:6 isync 'void ()'
| `-CompoundStmt 0x55e83cecf380 <line:792:1, line:793:1>
|-FunctionDecl 0x55e83cecf3b0 prev 0x55e83cec5090 <line:794:1, line:796:1> line:794:6 lwfence 'void ()'
| `-CompoundStmt 0x55e83cecf450 <line:795:1, line:796:1>
`-FunctionDecl 0x55e83cecf4b8 <line:797:1, line:832:1> line:797:5 main 'int ()'
  `-CompoundStmt 0x55e83ced3850 <line:798:1, line:832:1>
    |-DeclStmt 0x55e83cecf5d0 <line:799:3, col:18>
    | `-VarDecl 0x55e83cecf568 <col:3, col:13> col:13 used t1629 'pthread_t':'unsigned long'
    |-CallExpr 0x55e83cecf7d8 <line:800:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55e83cecf7c0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55e83cecf5e8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55e83ceac5b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55e83cecf628 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55e83cecf608 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55e83cecf568 't1629' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55e83cecf818 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55e83cecf6a0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55e83cecf678 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55e83cecf640 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55e83cecf830 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55e83cecf6c0 <col:39> 'void *(void *)' Function 0x55e83cec6188 'P0' 'void *(void *)'
    | `-ParenExpr 0x55e83cecf740 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55e83cecf718 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55e83cecf6e0 <col:52> 'int' 0
    |-DeclStmt 0x55e83cecf8c0 <line:801:3, col:18>
    | `-VarDecl 0x55e83cecf858 <col:3, col:13> col:13 used t1630 'pthread_t':'unsigned long'
    |-CallExpr 0x55e83cecfa68 <line:802:3, col:54> 'int'
    | |-ImplicitCastExpr 0x55e83cecfa50 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55e83cecf8d8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x55e83ceac5b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x55e83cecf918 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x55e83cecf8f8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x55e83cecf858 't1630' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x55e83cecfaa8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x55e83cecf990 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x55e83cecf968 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x55e83cecf930 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x55e83cecfac0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55e83cecf9b0 <col:39> 'void *(void *)' Function 0x55e83cecad68 'P1' 'void *(void *)'
    | `-ParenExpr 0x55e83cecfa30 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x55e83cecfa08 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x55e83cecf9d0 <col:52> 'int' 0
    |-CallExpr 0x55e83cecfb10 <line:803:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55e83cecfaf8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55e83cecfad8 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55e83cecfbf0 <line:804:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x55e83cecfb30 <col:3> '_Bool' lvalue Var 0x55e83cec55c0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x55e83cecfbd8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x55e83cecfbb8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x55e83cecfba0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x55e83cecfb50 <col:21> 'int' lvalue Var 0x55e83cec51c8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x55e83cecfb70 <col:41> 'int' 2
    |-CallExpr 0x55e83cecfc48 <line:805:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55e83cecfc30 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55e83cecfc10 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55e83cecfcc0 <line:806:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55e83cecfca8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55e83cecfc68 <col:3> 'void (int)' Function 0x55e83ce6b940 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x55e83cecfd00 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55e83cecfce8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55e83cecfc88 <col:21> '_Bool' lvalue Var 0x55e83cec55c0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x55e83cecfd50 <line:807:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55e83cecfd38 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55e83cecfd18 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55e83ced0038 <line:808:3, col:103> 'int' '='
    | |-DeclRefExpr 0x55e83cecfd70 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
    | `-ConditionalOperator 0x55e83ced0008 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x55e83cecfe30 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x55e83cecfde8 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x55e83cecfdd0 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55e83cecfd90 <col:7> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x55e83cecfe18 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x55e83cecfe00 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55e83cecfdb0 <col:25> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55e83cecfff0 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55e83cecfe50 <col:42> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x55e83cecffd0 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x55e83cecffa0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x55e83cecff10 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55e83cecfec8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55e83cecfeb0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55e83cecfe70 <col:55> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55e83cecfef8 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55e83cecfee0 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55e83cecfe90 <col:73> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55e83cecff70 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55e83cecff30 <col:90> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x55e83cecff88 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55e83cecff50 <col:102> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
    |-BinaryOperator 0x55e83ced0240 <line:809:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced0058 <col:3> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced0228 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55e83ced01f8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55e83ced0118 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55e83ced00d0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55e83ced00b8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55e83ced0078 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55e83ced0100 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55e83ced00e8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55e83ced0098 <col:38> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55e83ced01b0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55e83ced0168 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55e83ced0138 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55e83ced01e0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55e83ced01c8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55e83ced0190 <col:66> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55e83ced0528 <line:810:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced0260 <col:3> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced0510 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55e83ced04e0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55e83ced0400 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55e83ced0320 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55e83ced02d8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55e83ced02c0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55e83ced0280 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55e83ced0308 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55e83ced02f0 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55e83ced02a0 <col:38> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55e83ced03e0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55e83ced0398 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55e83ced0380 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55e83ced0340 <col:56> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55e83ced03c8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55e83ced03b0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55e83ced0360 <col:74> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55e83ced0498 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55e83ced0450 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55e83ced0420 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55e83ced04c8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55e83ced04b0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55e83ced0478 <col:102> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x55e83ced0730 <line:811:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced0548 <col:3> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced0718 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55e83ced06e8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x55e83ced0608 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x55e83ced05c0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x55e83ced05a8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x55e83ced0568 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x55e83ced05f0 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x55e83ced05d8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x55e83ced0588 <col:38> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55e83ced06a0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55e83ced0658 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55e83ced0628 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x55e83ced06d0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55e83ced06b8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55e83ced0680 <col:66> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55e83ced0a18 <line:812:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced0750 <col:3> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced0a00 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55e83ced09d0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x55e83ced08f0 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x55e83ced0810 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x55e83ced07c8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x55e83ced07b0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x55e83ced0770 <col:20> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x55e83ced07f8 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x55e83ced07e0 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x55e83ced0790 <col:38> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x55e83ced08d0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x55e83ced0888 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x55e83ced0870 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x55e83ced0830 <col:56> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x55e83ced08b8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x55e83ced08a0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x55e83ced0850 <col:74> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x55e83ced0988 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x55e83ced0940 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x55e83ced0910 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x55e83ced09b8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x55e83ced09a0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x55e83ced0968 <col:102> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x55e83ced0a70 <line:813:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55e83ced0a58 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55e83ced0a38 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55e83ced0ac8 <line:814:3, col:27> 'void'
    | `-ImplicitCastExpr 0x55e83ced0ab0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55e83ced0a90 <col:3> 'void ()' Function 0x55e83ce6bfa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x55e83ced0b60 <line:815:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced0ae8 <col:3> '_Bool' lvalue Var 0x55e83cec5ff8 'weak$$choice0' '_Bool'
    | `-CallExpr 0x55e83ced0b40 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x55e83ced0b28 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55e83ced0b08 <col:19> '_Bool (void)' Function 0x55e83ce6b770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x55e83ced0c08 <line:816:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced0b80 <col:3> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
    | `-CallExpr 0x55e83ced0be8 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x55e83ced0bd0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x55e83ced0bb0 <col:19> '_Bool (void)' Function 0x55e83ce6b770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x55e83ced0c80 <line:817:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced0c28 <col:3> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced0c68 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x55e83ced0c48 <col:21> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x55e83ced0cf8 <line:818:3, col:15> 'int' '='
    | |-DeclRefExpr 0x55e83ced0ca0 <col:3> 'int' lvalue Var 0x55e83cec5850 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x55e83ced0ce0 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x55e83ced0cc0 <col:15> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
    |-BinaryOperator 0x55e83ced1130 <line:819:3, col:162> 'int' '='
    | |-DeclRefExpr 0x55e83ced0d18 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
    | `-ConditionalOperator 0x55e83ced1100 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x55e83ced0f28 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x55e83ced0e48 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x55e83ced0d70 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x55e83ced0d58 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x55e83ced0d38 <col:8> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x55e83ced0e28 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x55e83ced0dc0 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x55e83ced0da8 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x55e83ced0d88 <col:27> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x55e83ced0e10 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x55e83ced0df8 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x55e83ced0dd8 <col:46> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x55e83ced0f08 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x55e83ced0ea0 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x55e83ced0e88 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x55e83ced0e68 <col:65> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x55e83ced0ef0 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x55e83ced0ed8 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x55e83ced0eb8 <col:84> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x55e83ced10e8 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55e83ced0f48 <col:101> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
    |   `-ParenExpr 0x55e83ced10c8 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x55e83ced1098 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x55e83ced1008 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x55e83ced0fc0 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x55e83ced0fa8 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x55e83ced0f68 <col:106> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x55e83ced0ff0 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x55e83ced0fd8 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55e83ced0f88 <col:124> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55e83ced1068 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55e83ced1028 <col:141> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x55e83ced1080 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55e83ced1048 <col:153> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
    |-BinaryOperator 0x55e83ced1640 <line:820:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55e83ced1150 <col:3> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x55e83ced1610 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55e83ced15e0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55e83ced15c8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55e83ced1170 <col:15> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55e83ced15f8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55e83ced1190 <col:31> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x55e83ced15a8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55e83ced1578 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55e83ced13a0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55e83ced12c0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55e83ced11e8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55e83ced11d0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55e83ced11b0 <col:45> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55e83ced12a0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55e83ced1238 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55e83ced1220 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55e83ced1200 <col:64> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55e83ced1288 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55e83ced1270 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55e83ced1250 <col:83> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55e83ced1380 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55e83ced1318 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55e83ced1300 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55e83ced12e0 <col:102> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55e83ced1368 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55e83ced1350 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55e83ced1330 <col:121> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55e83ced1560 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55e83ced13c0 <col:138> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
    |       `-ParenExpr 0x55e83ced1540 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55e83ced1510 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55e83ced1480 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55e83ced1438 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55e83ced1420 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55e83ced13e0 <col:151> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55e83ced1468 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55e83ced1450 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55e83ced1400 <col:169> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55e83ced14e0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55e83ced14a0 <col:186> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x55e83ced14f8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55e83ced14c0 <col:198> 'int' lvalue Var 0x55e83cec5cf0 'x$w_buff0' 'int'
    |-BinaryOperator 0x55e83ced1b50 <line:821:3, col:208> 'int' '='
    | |-DeclRefExpr 0x55e83ced1660 <col:3> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x55e83ced1b20 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x55e83ced1af0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55e83ced1ad8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55e83ced1680 <col:15> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x55e83ced1b08 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55e83ced16a0 <col:31> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
    |   `-ParenExpr 0x55e83ced1ab8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x55e83ced1a88 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x55e83ced18b0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x55e83ced17d0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x55e83ced16f8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x55e83ced16e0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x55e83ced16c0 <col:45> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x55e83ced17b0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x55e83ced1748 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x55e83ced1730 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x55e83ced1710 <col:64> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x55e83ced1798 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x55e83ced1780 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x55e83ced1760 <col:83> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x55e83ced1890 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x55e83ced1828 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x55e83ced1810 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x55e83ced17f0 <col:102> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x55e83ced1878 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x55e83ced1860 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x55e83ced1840 <col:121> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x55e83ced1a70 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55e83ced18d0 <col:138> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
    |       `-ParenExpr 0x55e83ced1a50 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x55e83ced1a20 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x55e83ced1990 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x55e83ced1948 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x55e83ced1930 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x55e83ced18f0 <col:151> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x55e83ced1978 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x55e83ced1960 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x55e83ced1910 <col:169> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x55e83ced19f0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55e83ced19b0 <col:186> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x55e83ced1a08 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55e83ced19d0 <col:198> 'int' lvalue Var 0x55e83cec5de8 'x$w_buff1' 'int'
    |-BinaryOperator 0x55e83ced2108 <line:822:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced1b70 <col:3> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced20f0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55e83ced20c0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55e83ced2078 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55e83ced2060 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55e83ced1b90 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55e83ced20a8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55e83ced2090 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55e83ced1bc0 <col:36> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x55e83ced2040 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55e83ced2010 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55e83ced1dd0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55e83ced1cf0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55e83ced1c18 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55e83ced1c00 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55e83ced1be0 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55e83ced1cd0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55e83ced1c68 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55e83ced1c50 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55e83ced1c30 <col:74> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55e83ced1cb8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55e83ced1ca0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55e83ced1c80 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55e83ced1db0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55e83ced1d48 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55e83ced1d30 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55e83ced1d10 <col:112> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55e83ced1d98 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55e83ced1d80 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55e83ced1d60 <col:131> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55e83ced1ff8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55e83ced1fe0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55e83ced1df0 <col:148> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x55e83ced1fc0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55e83ced1f90 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55e83ced1eb0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55e83ced1e68 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55e83ced1e50 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55e83ced1e10 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55e83ced1e98 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55e83ced1e80 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55e83ced1e30 <col:184> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55e83ced1f48 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55e83ced1f00 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55e83ced1ed0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55e83ced1f78 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55e83ced1f60 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55e83ced1f28 <col:212> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x55e83ced26d0 <line:823:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced2128 <col:3> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced26b8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55e83ced2688 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55e83ced2640 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55e83ced2628 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55e83ced2148 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55e83ced2670 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55e83ced2658 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55e83ced2168 <col:36> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x55e83ced2608 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55e83ced25d8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55e83ced2378 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55e83ced2298 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55e83ced21c0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55e83ced21a8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55e83ced2188 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55e83ced2278 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55e83ced2210 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55e83ced21f8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55e83ced21d8 <col:74> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55e83ced2260 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55e83ced2248 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55e83ced2228 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55e83ced2358 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55e83ced22f0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55e83ced22d8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55e83ced22b8 <col:112> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55e83ced2340 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55e83ced2328 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55e83ced2308 <col:131> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55e83ced25c0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55e83ced25a8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55e83ced2398 <col:148> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x55e83ced2588 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55e83ced2558 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55e83ced2458 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55e83ced2410 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55e83ced23f8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55e83ced23b8 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55e83ced2440 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55e83ced2428 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55e83ced23d8 <col:184> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55e83ced2528 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55e83ced24a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55e83ced2478 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55e83ced2540 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55e83ced2500 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55e83ced24d0 <col:219> 'int' 0
    |-BinaryOperator 0x55e83ced2c98 <line:824:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced26f0 <col:3> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced2c80 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55e83ced2c50 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x55e83ced2c08 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55e83ced2bf0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55e83ced2710 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55e83ced2c38 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55e83ced2c20 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55e83ced2730 <col:36> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x55e83ced2bd0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x55e83ced2b80 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x55e83ced2940 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55e83ced2860 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55e83ced2788 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55e83ced2770 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55e83ced2750 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55e83ced2840 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55e83ced27d8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55e83ced27c0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55e83ced27a0 <col:74> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55e83ced2828 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55e83ced2810 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55e83ced27f0 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55e83ced2920 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55e83ced28b8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55e83ced28a0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55e83ced2880 <col:112> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55e83ced2908 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55e83ced28f0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55e83ced28d0 <col:131> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55e83ced2b68 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55e83ced2b50 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55e83ced2960 <col:148> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x55e83ced2b30 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x55e83ced2b00 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x55e83ced2a20 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55e83ced29d8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55e83ced29c0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55e83ced2980 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55e83ced2a08 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55e83ced29f0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55e83ced29a0 <col:184> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55e83ced2ab8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55e83ced2a70 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55e83ced2a40 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55e83ced2ae8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x55e83ced2ad0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x55e83ced2a98 <col:212> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x55e83ced3260 <line:825:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced2cb8 <col:3> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced3248 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x55e83ced3218 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x55e83ced31d0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55e83ced31b8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55e83ced2cd8 <col:20> '_Bool' lvalue Var 0x55e83cec6070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x55e83ced3200 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x55e83ced31e8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x55e83ced2cf8 <col:36> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x55e83ced3198 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x55e83ced3168 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x55e83ced2f08 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x55e83ced2e28 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x55e83ced2d50 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x55e83ced2d38 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x55e83ced2d18 <col:55> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x55e83ced2e08 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x55e83ced2da0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x55e83ced2d88 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x55e83ced2d68 <col:74> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x55e83ced2df0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x55e83ced2dd8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x55e83ced2db8 <col:93> '_Bool' lvalue Var 0x55e83cec5e60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x55e83ced2ee8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x55e83ced2e80 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x55e83ced2e68 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x55e83ced2e48 <col:112> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x55e83ced2ed0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x55e83ced2eb8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x55e83ced2e98 <col:131> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x55e83ced3150 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x55e83ced3138 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x55e83ced2f28 <col:148> '_Bool' lvalue Var 0x55e83cec5a30 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x55e83ced3118 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x55e83ced30e8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x55e83ced2fe8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x55e83ced2fa0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x55e83ced2f88 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x55e83ced2f48 <col:166> '_Bool' lvalue Var 0x55e83cec5d68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x55e83ced2fd0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x55e83ced2fb8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x55e83ced2f68 <col:184> '_Bool' lvalue Var 0x55e83cec58c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x55e83ced30b8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x55e83ced3038 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x55e83ced3008 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x55e83ced30d0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x55e83ced3090 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x55e83ced3060 <col:219> 'int' 0
    |-BinaryOperator 0x55e83ced3530 <line:826:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced3280 <col:3> '_Bool' lvalue Var 0x55e83cec5638 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x55e83ced3518 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x55e83ced3500 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x55e83ced34e0 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x55e83ced34c0 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x55e83ced3428 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x55e83ced3390 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x55e83ced32f8 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x55e83ced32e0 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x55e83ced32a0 <col:23> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
    |         | | | `-IntegerLiteral 0x55e83ced32c0 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x55e83ced3370 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x55e83ced3358 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x55e83ced3318 <col:33> 'int' lvalue Var 0x55e83cec52e8 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x55e83ced3338 <col:56> 'int' 1
    |         | `-BinaryOperator 0x55e83ced3408 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x55e83ced33f0 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x55e83ced33b0 <col:61> 'int' lvalue Var 0x55e83cec5408 '__unbuffered_p1_EAX' 'int'
    |         |   `-IntegerLiteral 0x55e83ced33d0 <col:84> 'int' 1
    |         `-BinaryOperator 0x55e83ced34a0 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x55e83ced3488 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x55e83ced3448 <col:89> 'int' lvalue Var 0x55e83cec5528 '__unbuffered_p1_EBX' 'int'
    |           `-IntegerLiteral 0x55e83ced3468 <col:112> 'int' 0
    |-BinaryOperator 0x55e83ced3660 <line:827:3, col:37> 'int' '='
    | |-DeclRefExpr 0x55e83ced3550 <col:3> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
    | `-ConditionalOperator 0x55e83ced3630 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x55e83ced35e8 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x55e83ced35d0 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55e83ced3570 <col:7> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x55e83ced3600 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x55e83ced3590 <col:25> 'int' lvalue Var 0x55e83cec5850 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x55e83ced3618 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x55e83ced35b0 <col:37> 'int' lvalue Var 0x55e83cec5738 'x' 'int'
    |-BinaryOperator 0x55e83ced36f8 <line:828:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x55e83ced3680 <col:3> '_Bool' lvalue Var 0x55e83cec57d0 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x55e83ced36d0 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x55e83ced36a0 <col:28> 'int' 0
    |-CallExpr 0x55e83ced3750 <line:829:3, col:25> 'void'
    | `-ImplicitCastExpr 0x55e83ced3738 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x55e83ced3718 <col:3> 'void ()' Function 0x55e83ce6c060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x55e83ced37c8 <line:830:3, col:36> 'void'
    | |-ImplicitCastExpr 0x55e83ced37b0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x55e83ced3770 <col:3> 'void (int)' Function 0x55e83ce6bd28 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x55e83ced3808 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x55e83ced37f0 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x55e83ced3790 <col:21> '_Bool' lvalue Var 0x55e83cec5638 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x55e83ced3840 <line:831:3, col:10>
      `-IntegerLiteral 0x55e83ced3820 <col:10> 'int' 0
