TranslationUnitDecl 0x55efb9c47cc8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55efb9c48588 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55efb9c48260 '__int128'
|-TypedefDecl 0x55efb9c485f8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55efb9c48280 'unsigned __int128'
|-TypedefDecl 0x55efb9c48900 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55efb9c486d0 'struct __NSConstantString_tag'
|   `-Record 0x55efb9c48650 '__NSConstantString_tag'
|-TypedefDecl 0x55efb9c489a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55efb9c48960 'char *'
|   `-BuiltinType 0x55efb9c47d60 'char'
|-TypedefDecl 0x55efb9c87740 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55efb9c48c40 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55efb9c48a80 'struct __va_list_tag'
|     `-Record 0x55efb9c48a00 '__va_list_tag'
|-FunctionDecl 0x55efb9c87820 <./split_2/sqrt_biNewton_pseudoconstant_true-unreach-call.c:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55efb9c87968 <line:6:1, col:40> col:15 used __VERIFIER_nondet_double 'double ()' extern
|-FunctionDecl 0x55efb9c87af0 <line:7:1, col:45> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x55efb9c87a20 <col:31, col:35> col:35 expression 'int'
|-FunctionDecl 0x55efb9c87c40 <line:8:1, col:88> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55efb9c87bb0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x55efb9c87e90 <col:34, col:88>
|   |-IfStmt 0x55efb9c87e68 <col:36, col:78>
|   | |-UnaryOperator 0x55efb9c87d40 <col:40, col:46> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x55efb9c87d28 <col:41, col:46> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55efb9c87d08 <col:41, col:46> 'int' lvalue
|   | |     `-DeclRefExpr 0x55efb9c87ce8 <col:42> 'int' lvalue ParmVar 0x55efb9c87bb0 'cond' 'int'
|   | `-CompoundStmt 0x55efb9c87e50 <col:49, col:78>
|   |   `-LabelStmt 0x55efb9c87e38 <col:51, col:75> 'ERROR'
|   |     `-CallExpr 0x55efb9c87dc8 <col:58, col:75> 'void'
|   |       `-ImplicitCastExpr 0x55efb9c87db0 <col:58> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x55efb9c87d58 <col:58> 'void () __attribute__((noreturn))' Function 0x55efb9c87820 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   `-ReturnStmt 0x55efb9c87e80 <col:80>
|-VarDecl 0x55efb9c87ec8 <line:10:1, col:15> col:8 used _EPS 'double' cinit
| `-FloatingLiteral 0x55efb9c87f30 <col:15> 'double' 1.000000e-06
|-FunctionDecl 0x55efb9c88038 <line:12:1, line:34:1> line:12:8 used SqrtR 'double (double)'
| |-ParmVarDecl 0x55efb9c87f68 <col:14, col:21> col:21 used Input 'double'
| `-CompoundStmt 0x55efb9cad950 <line:13:1, line:34:1>
|   |-DeclStmt 0x55efb9c88390 <line:14:3, col:38>
|   | |-VarDecl 0x55efb9c880f8 <col:3, col:10> col:10 used xn 'double'
|   | |-VarDecl 0x55efb9c88178 <col:3, col:14> col:14 used xnp1 'double'
|   | |-VarDecl 0x55efb9c881f8 <col:3, col:20> col:20 used residu 'double'
|   | |-VarDecl 0x55efb9c88278 <col:3, col:28> col:28 used lsup 'double'
|   | `-VarDecl 0x55efb9c882f8 <col:3, col:34> col:34 used linf 'double'
|   |-DeclStmt 0x55efb9c884c0 <line:15:3, col:14>
|   | |-VarDecl 0x55efb9c883c0 <col:3, col:7> col:7 used i 'int'
|   | `-VarDecl 0x55efb9c88440 <col:3, col:10> col:10 used cond 'int'
|   |-IfStmt 0x55efb9c88668 <line:16:3, col:45> has_else
|   | |-BinaryOperator 0x55efb9c88530 <col:7, col:16> 'int' '<='
|   | | |-ImplicitCastExpr 0x55efb9c88518 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55efb9c884d8 <col:7> 'double' lvalue ParmVar 0x55efb9c87f68 'Input' 'double'
|   | | `-FloatingLiteral 0x55efb9c884f8 <col:16> 'double' 1.000000e+00
|   | |-BinaryOperator 0x55efb9c88590 <col:21, col:26> 'double' '='
|   | | |-DeclRefExpr 0x55efb9c88550 <col:21> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   | | `-FloatingLiteral 0x55efb9c88570 <col:26> 'double' 1.000000e+00
|   | `-BinaryOperator 0x55efb9c88648 <col:36, col:45> 'double' '='
|   |   |-DeclRefExpr 0x55efb9c885b0 <col:36> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |   `-BinaryOperator 0x55efb9c88628 <col:41, col:45> 'double' '/'
|   |     |-FloatingLiteral 0x55efb9c885d0 <col:41> 'double' 1.000000e+00
|   |     `-ImplicitCastExpr 0x55efb9c88610 <col:45> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x55efb9c885f0 <col:45> 'double' lvalue ParmVar 0x55efb9c87f68 'Input' 'double'
|   |-BinaryOperator 0x55efb9c886e8 <line:17:3, col:10> 'double' '='
|   | |-DeclRefExpr 0x55efb9c88690 <col:3> 'double' lvalue Var 0x55efb9c88178 'xnp1' 'double'
|   | `-ImplicitCastExpr 0x55efb9c886d0 <col:10> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x55efb9c886b0 <col:10> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |-BinaryOperator 0x55efb9cac868 <line:18:3, col:29> 'double' '='
|   | |-DeclRefExpr 0x55efb9c88708 <col:3> 'double' lvalue Var 0x55efb9c881f8 'residu' 'double'
|   | `-BinaryOperator 0x55efb9cac848 <col:12, col:29> 'double' '*'
|   |   |-BinaryOperator 0x55efb9cac778 <col:12, col:16> 'double' '*'
|   |   | |-FloatingLiteral 0x55efb9cac720 <col:12> 'double' 2.000000e+00
|   |   | `-ImplicitCastExpr 0x55efb9cac760 <col:16> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55efb9cac740 <col:16> 'double' lvalue Var 0x55efb9c87ec8 '_EPS' 'double'
|   |   `-ParenExpr 0x55efb9cac828 <col:21, col:29> 'double'
|   |     `-BinaryOperator 0x55efb9cac808 <col:22, col:25> 'double' '+'
|   |       |-ImplicitCastExpr 0x55efb9cac7d8 <col:22> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55efb9cac798 <col:22> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |       `-ImplicitCastExpr 0x55efb9cac7f0 <col:25> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x55efb9cac7b8 <col:25> 'double' lvalue Var 0x55efb9c88178 'xnp1' 'double'
|   |-BinaryOperator 0x55efb9cac9b0 <line:19:3, col:25> 'double' '='
|   | |-DeclRefExpr 0x55efb9cac888 <col:3> 'double' lvalue Var 0x55efb9c88278 'lsup' 'double'
|   | `-BinaryOperator 0x55efb9cac990 <col:10, col:25> 'double' '*'
|   |   |-ImplicitCastExpr 0x55efb9cac978 <col:10> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55efb9cac8a8 <col:10> 'double' lvalue Var 0x55efb9c87ec8 '_EPS' 'double'
|   |   `-ParenExpr 0x55efb9cac958 <col:17, col:25> 'double'
|   |     `-BinaryOperator 0x55efb9cac938 <col:18, col:21> 'double' '+'
|   |       |-ImplicitCastExpr 0x55efb9cac908 <col:18> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55efb9cac8c8 <col:18> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |       `-ImplicitCastExpr 0x55efb9cac920 <col:21> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x55efb9cac8e8 <col:21> 'double' lvalue Var 0x55efb9c88178 'xnp1' 'double'
|   |-BinaryOperator 0x55efb9caca40 <line:20:3, col:11> 'double' '='
|   | |-DeclRefExpr 0x55efb9cac9d0 <col:3> 'double' lvalue Var 0x55efb9c882f8 'linf' 'double'
|   | `-UnaryOperator 0x55efb9caca28 <col:10, col:11> 'double' prefix '-'
|   |   `-ImplicitCastExpr 0x55efb9caca10 <col:11> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x55efb9cac9f0 <col:11> 'double' lvalue Var 0x55efb9c88278 'lsup' 'double'
|   |-BinaryOperator 0x55efb9cacc20 <line:21:3, col:45> 'int' '='
|   | |-DeclRefExpr 0x55efb9caca60 <col:3> 'int' lvalue Var 0x55efb9c88440 'cond' 'int'
|   | `-ParenExpr 0x55efb9cacc00 <col:10, col:45> 'int'
|   |   `-BinaryOperator 0x55efb9cacbe0 <col:11, col:44> 'int' '||'
|   |     |-ParenExpr 0x55efb9cacb10 <col:11, col:25> 'int'
|   |     | `-BinaryOperator 0x55efb9cacaf0 <col:12, col:21> 'int' '>'
|   |     |   |-ImplicitCastExpr 0x55efb9cacac0 <col:12> 'double' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x55efb9caca80 <col:12> 'double' lvalue Var 0x55efb9c881f8 'residu' 'double'
|   |     |   `-ImplicitCastExpr 0x55efb9cacad8 <col:21> 'double' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x55efb9cacaa0 <col:21> 'double' lvalue Var 0x55efb9c88278 'lsup' 'double'
|   |     `-ParenExpr 0x55efb9cacbc0 <col:30, col:44> 'int'
|   |       `-BinaryOperator 0x55efb9cacba0 <col:31, col:40> 'int' '<'
|   |         |-ImplicitCastExpr 0x55efb9cacb70 <col:31> 'double' <LValueToRValue>
|   |         | `-DeclRefExpr 0x55efb9cacb30 <col:31> 'double' lvalue Var 0x55efb9c881f8 'residu' 'double'
|   |         `-ImplicitCastExpr 0x55efb9cacb88 <col:40> 'double' <LValueToRValue>
|   |           `-DeclRefExpr 0x55efb9cacb50 <col:40> 'double' lvalue Var 0x55efb9c882f8 'linf' 'double'
|   |-BinaryOperator 0x55efb9cacc80 <line:22:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x55efb9cacc40 <col:3> 'int' lvalue Var 0x55efb9c883c0 'i' 'int'
|   | `-IntegerLiteral 0x55efb9cacc60 <col:7> 'int' 0
|   |-WhileStmt 0x55efb9cad8a8 <line:23:3, line:32:3>
|   | |-ImplicitCastExpr 0x55efb9caccc0 <line:23:10> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x55efb9cacca0 <col:10> 'int' lvalue Var 0x55efb9c88440 'cond' 'int'
|   | `-CompoundStmt 0x55efb9cad858 <col:16, line:32:3>
|   |   |-DeclStmt 0x55efb9cace80 <line:24:5, col:33>
|   |   | `-VarDecl 0x55efb9caccf0 <col:5, col:31> col:12 used hn 'double' cinit
|   |   |   `-BinaryOperator 0x55efb9cace60 <col:17, col:31> 'double' '-'
|   |   |     |-FloatingLiteral 0x55efb9cacd58 <col:17> 'double' 1.000000e+00
|   |   |     `-BinaryOperator 0x55efb9cace40 <col:22, col:31> 'double' '*'
|   |   |       |-BinaryOperator 0x55efb9cacde8 <col:22, col:28> 'double' '*'
|   |   |       | |-ImplicitCastExpr 0x55efb9cacdb8 <col:22> 'double' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x55efb9cacd78 <col:22> 'double' lvalue ParmVar 0x55efb9c87f68 'Input' 'double'
|   |   |       | `-ImplicitCastExpr 0x55efb9cacdd0 <col:28> 'double' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x55efb9cacd98 <col:28> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |   |       `-ImplicitCastExpr 0x55efb9cace28 <col:31> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x55efb9cace08 <col:31> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |   |-BinaryOperator 0x55efb9cad278 <line:25:5, col:60> 'double' '='
|   |   | |-DeclRefExpr 0x55efb9cace98 <col:5> 'double' lvalue Var 0x55efb9c88178 'xnp1' 'double'
|   |   | `-BinaryOperator 0x55efb9cad258 <col:12, col:60> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x55efb9cad240 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55efb9caceb8 <col:12> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |   |   `-BinaryOperator 0x55efb9cad220 <col:17, col:60> 'double' '/'
|   |   |     |-BinaryOperator 0x55efb9cad1e0 <col:17, col:56> 'double' '*'
|   |   |     | |-ImplicitCastExpr 0x55efb9cad1c8 <col:17> 'double' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x55efb9caced8 <col:17> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |   |     | `-ParenExpr 0x55efb9cad1a8 <col:22, col:56> 'double'
|   |   |     |   `-BinaryOperator 0x55efb9cad188 <col:23, col:54> 'double' '+'
|   |   |     |     |-BinaryOperator 0x55efb9cad040 <col:23, col:39> 'double' '+'
|   |   |     |     | |-BinaryOperator 0x55efb9cacf50 <col:23, col:27> 'double' '*'
|   |   |     |     | | |-FloatingLiteral 0x55efb9cacef8 <col:23> 'double' 8.000000e+00
|   |   |     |     | | `-ImplicitCastExpr 0x55efb9cacf38 <col:27> 'double' <LValueToRValue>
|   |   |     |     | |   `-DeclRefExpr 0x55efb9cacf18 <col:27> 'double' lvalue Var 0x55efb9caccf0 'hn' 'double'
|   |   |     |     | `-BinaryOperator 0x55efb9cad020 <col:32, col:39> 'double' '*'
|   |   |     |     |   |-BinaryOperator 0x55efb9cacfc8 <col:32, col:36> 'double' '*'
|   |   |     |     |   | |-FloatingLiteral 0x55efb9cacf70 <col:32> 'double' 6.000000e+00
|   |   |     |     |   | `-ImplicitCastExpr 0x55efb9cacfb0 <col:36> 'double' <LValueToRValue>
|   |   |     |     |   |   `-DeclRefExpr 0x55efb9cacf90 <col:36> 'double' lvalue Var 0x55efb9caccf0 'hn' 'double'
|   |   |     |     |   `-ImplicitCastExpr 0x55efb9cad008 <col:39> 'double' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x55efb9cacfe8 <col:39> 'double' lvalue Var 0x55efb9caccf0 'hn' 'double'
|   |   |     |     `-BinaryOperator 0x55efb9cad168 <col:44, col:54> 'double' '*'
|   |   |     |       |-BinaryOperator 0x55efb9cad110 <col:44, col:51> 'double' '*'
|   |   |     |       | |-BinaryOperator 0x55efb9cad0b8 <col:44, col:48> 'double' '*'
|   |   |     |       | | |-FloatingLiteral 0x55efb9cad060 <col:44> 'double' 5.000000e+00
|   |   |     |       | | `-ImplicitCastExpr 0x55efb9cad0a0 <col:48> 'double' <LValueToRValue>
|   |   |     |       | |   `-DeclRefExpr 0x55efb9cad080 <col:48> 'double' lvalue Var 0x55efb9caccf0 'hn' 'double'
|   |   |     |       | `-ImplicitCastExpr 0x55efb9cad0f8 <col:51> 'double' <LValueToRValue>
|   |   |     |       |   `-DeclRefExpr 0x55efb9cad0d8 <col:51> 'double' lvalue Var 0x55efb9caccf0 'hn' 'double'
|   |   |     |       `-ImplicitCastExpr 0x55efb9cad150 <col:54> 'double' <LValueToRValue>
|   |   |     |         `-DeclRefExpr 0x55efb9cad130 <col:54> 'double' lvalue Var 0x55efb9caccf0 'hn' 'double'
|   |   |     `-FloatingLiteral 0x55efb9cad200 <col:60> 'double' 1.600000e+01
|   |   |-BinaryOperator 0x55efb9cad3a8 <line:26:5, col:26> 'double' '='
|   |   | |-DeclRefExpr 0x55efb9cad298 <col:5> 'double' lvalue Var 0x55efb9c881f8 'residu' 'double'
|   |   | `-BinaryOperator 0x55efb9cad388 <col:14, col:26> 'double' '*'
|   |   |   |-FloatingLiteral 0x55efb9cad2b8 <col:14> 'double' 2.000000e+00
|   |   |   `-ParenExpr 0x55efb9cad368 <col:18, col:26> 'double'
|   |   |     `-BinaryOperator 0x55efb9cad348 <col:19, col:24> 'double' '-'
|   |   |       |-ImplicitCastExpr 0x55efb9cad318 <col:19> 'double' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x55efb9cad2d8 <col:19> 'double' lvalue Var 0x55efb9c88178 'xnp1' 'double'
|   |   |       `-ImplicitCastExpr 0x55efb9cad330 <col:24> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x55efb9cad2f8 <col:24> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |   |-BinaryOperator 0x55efb9cad420 <line:27:5, col:10> 'double' '='
|   |   | |-DeclRefExpr 0x55efb9cad3c8 <col:5> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |   | `-ImplicitCastExpr 0x55efb9cad408 <col:10> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55efb9cad3e8 <col:10> 'double' lvalue Var 0x55efb9c88178 'xnp1' 'double'
|   |   |-BinaryOperator 0x55efb9cad568 <line:28:5, col:27> 'double' '='
|   |   | |-DeclRefExpr 0x55efb9cad440 <col:5> 'double' lvalue Var 0x55efb9c88278 'lsup' 'double'
|   |   | `-BinaryOperator 0x55efb9cad548 <col:12, col:27> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x55efb9cad530 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55efb9cad460 <col:12> 'double' lvalue Var 0x55efb9c87ec8 '_EPS' 'double'
|   |   |   `-ParenExpr 0x55efb9cad510 <col:19, col:27> 'double'
|   |   |     `-BinaryOperator 0x55efb9cad4f0 <col:20, col:23> 'double' '+'
|   |   |       |-ImplicitCastExpr 0x55efb9cad4c0 <col:20> 'double' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x55efb9cad480 <col:20> 'double' lvalue Var 0x55efb9c880f8 'xn' 'double'
|   |   |       `-ImplicitCastExpr 0x55efb9cad4d8 <col:23> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x55efb9cad4a0 <col:23> 'double' lvalue Var 0x55efb9c88178 'xnp1' 'double'
|   |   |-BinaryOperator 0x55efb9cad5f8 <line:29:5, col:13> 'double' '='
|   |   | |-DeclRefExpr 0x55efb9cad588 <col:5> 'double' lvalue Var 0x55efb9c882f8 'linf' 'double'
|   |   | `-UnaryOperator 0x55efb9cad5e0 <col:12, col:13> 'double' prefix '-'
|   |   |   `-ImplicitCastExpr 0x55efb9cad5c8 <col:13> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55efb9cad5a8 <col:13> 'double' lvalue Var 0x55efb9c88278 'lsup' 'double'
|   |   |-BinaryOperator 0x55efb9cad800 <line:30:5, col:47> 'int' '='
|   |   | |-DeclRefExpr 0x55efb9cad618 <col:5> 'int' lvalue Var 0x55efb9c88440 'cond' 'int'
|   |   | `-ParenExpr 0x55efb9cad7e0 <col:12, col:47> 'int'
|   |   |   `-BinaryOperator 0x55efb9cad7c0 <col:13, col:46> 'int' '||'
|   |   |     |-ParenExpr 0x55efb9cad6c8 <col:13, col:27> 'int'
|   |   |     | `-BinaryOperator 0x55efb9cad6a8 <col:14, col:23> 'int' '>'
|   |   |     |   |-ImplicitCastExpr 0x55efb9cad678 <col:14> 'double' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x55efb9cad638 <col:14> 'double' lvalue Var 0x55efb9c881f8 'residu' 'double'
|   |   |     |   `-ImplicitCastExpr 0x55efb9cad690 <col:23> 'double' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x55efb9cad658 <col:23> 'double' lvalue Var 0x55efb9c88278 'lsup' 'double'
|   |   |     `-ParenExpr 0x55efb9cad7a0 <col:32, col:46> 'int'
|   |   |       `-BinaryOperator 0x55efb9cad780 <col:33, col:42> 'int' '<'
|   |   |         |-ImplicitCastExpr 0x55efb9cad750 <col:33> 'double' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x55efb9cad6e8 <col:33> 'double' lvalue Var 0x55efb9c881f8 'residu' 'double'
|   |   |         `-ImplicitCastExpr 0x55efb9cad768 <col:42> 'double' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x55efb9cad730 <col:42> 'double' lvalue Var 0x55efb9c882f8 'linf' 'double'
|   |   `-UnaryOperator 0x55efb9cad840 <line:31:5, col:6> 'int' postfix '++'
|   |     `-DeclRefExpr 0x55efb9cad820 <col:5> 'int' lvalue Var 0x55efb9c883c0 'i' 'int'
|   `-ReturnStmt 0x55efb9cad940 <line:33:3, col:16>
|     `-BinaryOperator 0x55efb9cad920 <col:10, col:16> 'double' '/'
|       |-FloatingLiteral 0x55efb9cad8c8 <col:10> 'double' 1.000000e+00
|       `-ImplicitCastExpr 0x55efb9cad908 <col:16> 'double' <LValueToRValue>
|         `-DeclRefExpr 0x55efb9cad8e8 <col:16> 'double' lvalue Var 0x55efb9c88178 'xnp1' 'double'
`-FunctionDecl 0x55efb9cadab8 <line:36:1, line:51:1> line:36:5 main 'int ()'
  `-CompoundStmt 0x55efb9cae540 <line:37:1, line:51:1>
    |-DeclStmt 0x55efb9cadcf8 <line:38:3, col:18>
    | |-VarDecl 0x55efb9cadb70 <col:3, col:10> col:10 used d 'double'
    | |-VarDecl 0x55efb9cadbf0 <col:3, col:13> col:13 used dd 'double'
    | `-VarDecl 0x55efb9cadc70 <col:3, col:17> col:17 used r 'double'
    |-DeclStmt 0x55efb9caddb0 <line:39:3, col:24>
    | `-VarDecl 0x55efb9cadd28 <col:3, col:20> col:10 used epsilon 'double' cinit
    |   `-FloatingLiteral 0x55efb9cadd90 <col:20> 'double' 1.000000e-08
    |-ForStmt 0x55efb9cae4d8 <line:41:3, line:49:3>
    | |-BinaryOperator 0x55efb9cade08 <line:41:8, col:12> 'double' '='
    | | |-DeclRefExpr 0x55efb9caddc8 <col:8> 'double' lvalue Var 0x55efb9cadb70 'd' 'double'
    | | `-FloatingLiteral 0x55efb9cadde8 <col:12> 'double' 1.000000e+00
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55efb9cade80 <col:16, col:21> 'int' '<='
    | | |-ImplicitCastExpr 0x55efb9cade68 <col:16> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x55efb9cade28 <col:16> 'double' lvalue Var 0x55efb9cadb70 'd' 'double'
    | | `-FloatingLiteral 0x55efb9cade48 <col:21> 'double' 2.000000e+01
    | |-UnaryOperator 0x55efb9cadec0 <col:26, col:27> 'double' postfix '++'
    | | `-DeclRefExpr 0x55efb9cadea0 <col:26> 'double' lvalue Var 0x55efb9cadb70 'd' 'double'
    | `-CompoundStmt 0x55efb9cae4a8 <col:31, line:49:3>
    |   |-BinaryOperator 0x55efb9cadf88 <line:43:5, col:35> 'double' '='
    |   | |-DeclRefExpr 0x55efb9caded8 <col:5> 'double' lvalue Var 0x55efb9cadbf0 'dd' 'double'
    |   | `-CallExpr 0x55efb9cadf68 <col:10, col:35> 'double'
    |   |   `-ImplicitCastExpr 0x55efb9cadf50 <col:10> 'double (*)()' <FunctionToPointerDecay>
    |   |     `-DeclRefExpr 0x55efb9cadef8 <col:10> 'double ()' Function 0x55efb9c87968 '__VERIFIER_nondet_double' 'double ()'
    |   |-CallExpr 0x55efb9cae208 <line:44:5, col:57> 'void'
    |   | |-ImplicitCastExpr 0x55efb9cae1f0 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x55efb9cadfa8 <col:5> 'void (int)' Function 0x55efb9c87af0 '__VERIFIER_assume' 'void (int)'
    |   | `-BinaryOperator 0x55efb9cae198 <col:23, col:50> 'int' '&&'
    |   |   |-BinaryOperator 0x55efb9cae090 <col:23, col:31> 'int' '>='
    |   |   | |-ImplicitCastExpr 0x55efb9cae078 <col:23> 'double' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x55efb9cadfc8 <col:23> 'double' lvalue Var 0x55efb9cadbf0 'dd' 'double'
    |   |   | `-BinaryOperator 0x55efb9cae058 <col:29, col:31> 'double' '-'
    |   |   |   |-ImplicitCastExpr 0x55efb9cae028 <col:29> 'double' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x55efb9cadfe8 <col:29> 'double' lvalue Var 0x55efb9cadb70 'd' 'double'
    |   |   |   `-ImplicitCastExpr 0x55efb9cae040 <col:31> 'double' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x55efb9cae008 <col:31> 'double' lvalue Var 0x55efb9cadd28 'epsilon' 'double'
    |   |   `-BinaryOperator 0x55efb9cae178 <col:42, col:50> 'int' '<='
    |   |     |-ImplicitCastExpr 0x55efb9cae160 <col:42> 'double' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x55efb9cae0b0 <col:42> 'double' lvalue Var 0x55efb9cadbf0 'dd' 'double'
    |   |     `-BinaryOperator 0x55efb9cae140 <col:48, col:50> 'double' '+'
    |   |       |-ImplicitCastExpr 0x55efb9cae110 <col:48> 'double' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x55efb9cae0d0 <col:48> 'double' lvalue Var 0x55efb9cadb70 'd' 'double'
    |   |       `-ImplicitCastExpr 0x55efb9cae128 <col:50> 'double' <LValueToRValue>
    |   |         `-DeclRefExpr 0x55efb9cae0f0 <col:50> 'double' lvalue Var 0x55efb9cadd28 'epsilon' 'double'
    |   |-BinaryOperator 0x55efb9cae318 <line:46:5, col:17> 'double' '='
    |   | |-DeclRefExpr 0x55efb9cae230 <col:5> 'double' lvalue Var 0x55efb9cadc70 'r' 'double'
    |   | `-CallExpr 0x55efb9cae2d8 <col:9, col:17> 'double'
    |   |   |-ImplicitCastExpr 0x55efb9cae2c0 <col:9> 'double (*)(double)' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x55efb9cae250 <col:9> 'double (double)' Function 0x55efb9c88038 'SqrtR' 'double (double)'
    |   |   `-ImplicitCastExpr 0x55efb9cae300 <col:15> 'double' <LValueToRValue>
    |   |     `-DeclRefExpr 0x55efb9cae270 <col:15> 'double' lvalue Var 0x55efb9cadbf0 'dd' 'double'
    |   `-CallExpr 0x55efb9cae480 <line:48:5, col:42> 'void'
    |     |-ImplicitCastExpr 0x55efb9cae468 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x55efb9cae338 <col:5> 'void (int)' Function 0x55efb9c87c40 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x55efb9cae448 <col:23, col:40> 'int' '&&'
    |       |-BinaryOperator 0x55efb9cae3b0 <col:23, col:28> 'int' '>='
    |       | |-ImplicitCastExpr 0x55efb9cae398 <col:23> 'double' <LValueToRValue>
    |       | | `-DeclRefExpr 0x55efb9cae358 <col:23> 'double' lvalue Var 0x55efb9cadc70 'r' 'double'
    |       | `-FloatingLiteral 0x55efb9cae378 <col:28> 'double' 9.000000e-01
    |       `-BinaryOperator 0x55efb9cae428 <col:35, col:40> 'int' '<='
    |         |-ImplicitCastExpr 0x55efb9cae410 <col:35> 'double' <LValueToRValue>
    |         | `-DeclRefExpr 0x55efb9cae3d0 <col:35> 'double' lvalue Var 0x55efb9cadc70 'r' 'double'
    |         `-FloatingLiteral 0x55efb9cae3f0 <col:40> 'double' 5.000000e+00
    `-ReturnStmt 0x55efb9cae530 <line:50:3, col:10>
      `-IntegerLiteral 0x55efb9cae510 <col:10> 'int' 0
