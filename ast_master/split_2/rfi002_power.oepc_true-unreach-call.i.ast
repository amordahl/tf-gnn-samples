TranslationUnitDecl 0x561698cb3e18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x561698cb46d8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x561698cb43b0 '__int128'
|-TypedefDecl 0x561698cb4748 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x561698cb43d0 'unsigned __int128'
|-TypedefDecl 0x561698cb4a50 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x561698cb4820 'struct __NSConstantString_tag'
|   `-Record 0x561698cb47a0 '__NSConstantString_tag'
|-TypedefDecl 0x561698cb4af8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x561698cb4ab0 'char *'
|   `-BuiltinType 0x561698cb3eb0 'char'
|-TypedefDecl 0x561698cf3650 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x561698cb4d90 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x561698cb4bd0 'struct __va_list_tag'
|     `-Record 0x561698cb4b50 '__va_list_tag'
|-FunctionDecl 0x561698cf3770 <./split_2/rfi002_power.oepc_true-unreach-call.i:1:1, col:41> col:14 used __VERIFIER_nondet_bool '_Bool (void)' extern
|-FunctionDecl 0x561698cf3940 <line:2:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x561698cf3870 <col:31> col:34 'int'
|-FunctionDecl 0x561698cf3ab8 <line:3:1, col:45> col:15 used __VERIFIER_nondet_pointer 'void *(void)' extern
|-FunctionDecl 0x561698cf3be0 <line:4:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x561698cf3d28 <line:5:1, col:99> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x561698cf3c98 <col:24, col:28> col:28 used expression 'int'
| `-CompoundStmt 0x561698cf3f58 <col:40, col:99>
|   |-IfStmt 0x561698cf3f28 <col:42, col:88>
|   | |-UnaryOperator 0x561698cf3e08 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x561698cf3df0 <col:47> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x561698cf3dd0 <col:47> 'int' lvalue ParmVar 0x561698cf3c98 'expression' 'int'
|   | `-CompoundStmt 0x561698cf3f10 <col:59, col:88>
|   |   `-LabelStmt 0x561698cf3ef8 <col:61, col:85> 'ERROR'
|   |     `-CallExpr 0x561698cf3e88 <col:68, col:85> 'void'
|   |       `-ImplicitCastExpr 0x561698cf3e70 <col:68> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x561698cf3e20 <col:68> 'void () __attribute__((noreturn))' Function 0x561698cf3be0 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|   |-NullStmt 0x561698cf3f40 <col:89>
|   `-ReturnStmt 0x561698cf3f48 <col:91>
|-FunctionDecl 0x561698cf3fa0 <line:6:1, col:37> col:13 used __VERIFIER_atomic_begin 'void ()' extern
|-FunctionDecl 0x561698cf4060 <line:7:1, col:35> col:13 used __VERIFIER_atomic_end 'void ()' extern
|-FunctionDecl 0x561698cf43e0 <line:9:1, line:11:76> line:9:13 __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x561698cf4118 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x561698cf4198 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x561698cf4218 <line:10:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x561698cf4298 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x561698cf44a0 <line:11:22>
|-FunctionDecl 0x561698d1a520 <line:12:1, line:14:76> line:12:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x561698cf4510 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x561698cf4590 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x561698d1a350 <line:13:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x561698d1a3d0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x561698d1a5e0 <line:14:22>
|-FunctionDecl 0x561698d1a890 <line:15:1, line:16:76> line:15:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x561698d1a650 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x561698d1a6d0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x561698d1a750 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x561698d1a948 <line:16:22>
|-TypedefDecl 0x561698d1a9b8 <line:18:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x561698cb3f70 'unsigned char'
|-TypedefDecl 0x561698d1aa28 <line:19:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x561698cb3f90 'unsigned short'
|-TypedefDecl 0x561698d1aa98 <line:20:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-TypedefDecl 0x561698d1ab08 <line:21:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1ab78 <line:22:1, col:21> col:21 __int8_t 'signed char'
| `-BuiltinType 0x561698cb3ed0 'signed char'
|-TypedefDecl 0x561698d1abe8 <line:23:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x561698cb3f70 'unsigned char'
|-TypedefDecl 0x561698d1ac58 <line:24:1, col:26> col:26 __int16_t 'short'
| `-BuiltinType 0x561698cb3ef0 'short'
|-TypedefDecl 0x561698d1acc8 <line:25:1, col:28> col:28 __uint16_t 'unsigned short'
| `-BuiltinType 0x561698cb3f90 'unsigned short'
|-TypedefDecl 0x561698d1ad38 <line:26:1, col:20> col:20 __int32_t 'int'
| `-BuiltinType 0x561698cb3f10 'int'
|-TypedefDecl 0x561698d1ada8 <line:27:1, col:22> col:22 __uint32_t 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-TypedefDecl 0x561698d1ae18 <line:28:1, col:25> col:25 __int64_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1ae88 <line:29:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1aef8 <line:30:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1af68 <line:31:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1afd8 <line:32:1, col:27> col:27 __dev_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1b048 <line:33:1, col:22> col:22 __uid_t 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-TypedefDecl 0x561698d1b0b8 <line:34:1, col:22> col:22 __gid_t 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-TypedefDecl 0x561698d1b128 <line:35:1, col:27> col:27 __ino_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1b198 <line:36:1, col:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1b208 <line:37:1, col:22> col:22 __mode_t 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-TypedefDecl 0x561698d1b278 <line:38:1, col:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1b2e8 <line:39:1, col:18> col:18 __off_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1b378 <line:40:1, col:18> col:18 referenced __off64_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1b3e8 <line:41:1, col:13> col:13 referenced __pid_t 'int'
| `-BuiltinType 0x561698cb3f10 'int'
|-RecordDecl 0x561698d1b440 <line:42:9, col:32> col:9 struct definition
| `-FieldDecl 0x561698d1b588 <col:18, col:29> col:22 __val 'int [2]'
|-TypedefDecl 0x561698d1b640 <col:1, col:34> col:34 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x561698d1b5e0 'struct __fsid_t' sugar
|   `-RecordType 0x561698d1b4c0 '__fsid_t'
|     `-Record 0x561698d1b440 ''
|-TypedefDecl 0x561698d1b6c8 <line:43:1, col:18> col:18 referenced __clock_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1b738 <line:44:1, col:27> col:27 __rlim_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1b7a8 <line:45:1, col:27> col:27 __rlim64_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1b818 <line:46:1, col:22> col:22 __id_t 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-TypedefDecl 0x561698d1b888 <line:47:1, col:18> col:18 referenced __time_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1b8f8 <line:48:1, col:22> col:22 __useconds_t 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-TypedefDecl 0x561698d1b968 <line:49:1, col:18> col:18 __suseconds_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1b9d8 <line:50:1, col:13> col:13 __daddr_t 'int'
| `-BuiltinType 0x561698cb3f10 'int'
|-TypedefDecl 0x561698d1ba48 <line:51:1, col:13> col:13 __key_t 'int'
| `-BuiltinType 0x561698cb3f10 'int'
|-TypedefDecl 0x561698d1bab8 <line:52:1, col:13> col:13 referenced __clockid_t 'int'
| `-BuiltinType 0x561698cb3f10 'int'
|-TypedefDecl 0x561698d1bb28 <line:53:1, col:16> col:16 referenced __timer_t 'void *'
| `-PointerType 0x561698cb4630 'void *'
|   `-BuiltinType 0x561698cb3e70 'void'
|-TypedefDecl 0x561698d1bb98 <line:54:1, col:18> col:18 __blksize_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1bc08 <line:55:1, col:18> col:18 __blkcnt_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1bc78 <line:56:1, col:18> col:18 __blkcnt64_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1bce8 <line:57:1, col:27> col:27 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1bd58 <line:58:1, col:27> col:27 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1bdc8 <line:59:1, col:27> col:27 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1be38 <line:60:1, col:27> col:27 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1bea8 <line:61:1, col:18> col:18 __fsword_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1bf18 <line:62:1, col:18> col:18 __ssize_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1bf88 <line:63:1, col:18> col:18 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1bff8 <line:64:1, col:27> col:27 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1c088 <line:65:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x561698d1c050 '__off64_t' sugar
|   |-Typedef 0x561698d1b378 '__off64_t'
|   `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1c180 <line:66:1, col:19> col:19 __qaddr_t '__quad_t *'
| `-PointerType 0x561698d1c140 '__quad_t *'
|   `-TypedefType 0x561698d1c0e0 '__quad_t' sugar
|     |-Typedef 0x561698d1aef8 '__quad_t'
|     `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1c1f0 <line:67:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x561698cb4ab0 'char *'
|   `-BuiltinType 0x561698cb3eb0 'char'
|-TypedefDecl 0x561698d1c260 <line:68:1, col:18> col:18 __intptr_t 'long'
| `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d1c2d0 <line:69:1, col:22> col:22 __socklen_t 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-FunctionDecl 0x561698d1d458 <line:70:1, line:74:1> line:71:1 __bswap_32 'unsigned int (unsigned int)' static inline
| |-ParmVarDecl 0x561698d1d380 <col:13, col:26> col:26 used __bsx 'unsigned int'
| `-CompoundStmt 0x561698d1d768 <line:72:1, line:74:1>
|   `-ReturnStmt 0x561698d1d758 <line:73:3, col:34>
|     `-CallExpr 0x561698d1d718 <col:10, col:34> 'unsigned int'
|       |-ImplicitCastExpr 0x561698d1d700 <col:10> 'unsigned int (*)(unsigned int)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x561698d1d690 <col:10> '<builtin fn type>' Function 0x561698d1d500 '__builtin_bswap32' 'unsigned int (unsigned int)'
|       `-ImplicitCastExpr 0x561698d1d740 <col:29> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x561698d1d6b0 <col:29> 'unsigned int' lvalue ParmVar 0x561698d1d380 '__bsx' 'unsigned int'
|-FunctionDecl 0x561698d1d500 <col:10> col:10 implicit used __builtin_bswap32 'unsigned int (unsigned int)' extern
| |-ParmVarDecl 0x561698d1d5a0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-NoThrowAttr 0x561698d1d610 <col:10> Implicit
| `-ConstAttr 0x561698d1d668 <col:10> Implicit
|-FunctionDecl 0x561698d1d8c0 <line:75:1, line:79:1> line:76:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x561698d1d7b8 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x561698d1dbd8 <line:77:1, line:79:1>
|   `-ReturnStmt 0x561698d1dbc8 <line:78:3, col:34>
|     `-CallExpr 0x561698d1db88 <col:10, col:34> 'unsigned long'
|       |-ImplicitCastExpr 0x561698d1db70 <col:10> 'unsigned long (*)(unsigned long)' <BuiltinFnToFnPtr>
|       | `-DeclRefExpr 0x561698d1daf8 <col:10> '<builtin fn type>' Function 0x561698d1d968 '__builtin_bswap64' 'unsigned long (unsigned long)'
|       `-ImplicitCastExpr 0x561698d1dbb0 <col:29> '__uint64_t':'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x561698d1db18 <col:29> '__uint64_t':'unsigned long' lvalue ParmVar 0x561698d1d7b8 '__bsx' '__uint64_t':'unsigned long'
|-FunctionDecl 0x561698d1d968 <col:10> col:10 implicit used __builtin_bswap64 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x561698d1da08 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x561698d1da78 <col:10> Implicit
| `-ConstAttr 0x561698d1dad0 <col:10> Implicit
|-TypedefDecl 0x561698d1dc08 <line:80:1, col:27> col:27 referenced size_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-TypedefDecl 0x561698d1dc98 <line:82:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x561698d1dc60 '__time_t' sugar
|   |-Typedef 0x561698d1b888 '__time_t'
|   `-BuiltinType 0x561698cb3f30 'long'
|-RecordDecl 0x561698d1dcf0 <line:85:1, line:89:3> line:85:8 struct timespec definition
| |-FieldDecl 0x561698d1dda8 <line:87:5, col:14> col:14 tv_sec '__time_t':'long'
| `-FieldDecl 0x561698d1de38 <line:88:5, col:23> col:23 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x561698d1dec8 <line:90:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x561698d1de90 '__pid_t' sugar
|   |-Typedef 0x561698d1b3e8 '__pid_t'
|   `-BuiltinType 0x561698cb3f10 'int'
|-RecordDecl 0x561698d1df20 <line:91:1, line:94:3> line:91:8 struct sched_param definition
| `-FieldDecl 0x561698d1dfe0 <line:93:5, col:9> col:9 __sched_priority 'int'
|-RecordDecl 0x561698d1e030 <line:97:1, line:100:3> line:97:8 struct __sched_param definition
| `-FieldDecl 0x561698d1e0f0 <line:99:5, col:9> col:9 __sched_priority 'int'
|-TypedefDecl 0x561698d1e158 <line:101:1, col:27> col:27 referenced __cpu_mask 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-RecordDecl 0x561698d1e1b0 <line:102:9, line:105:1> line:102:9 struct definition
| `-FieldDecl 0x561698d1f480 <line:104:3, col:53> col:14 __bits '__cpu_mask [64]'
|-TypedefDecl 0x561698d1f530 <line:102:1, line:105:3> col:3 referenced cpu_set_t 'struct cpu_set_t':'cpu_set_t'
| `-ElaboratedType 0x561698d1f4d0 'struct cpu_set_t' sugar
|   `-RecordType 0x561698d1e230 'cpu_set_t'
|     `-Record 0x561698d1e1b0 ''
|-FunctionDecl 0x561698d1f808 <line:107:1, line:108:42> line:107:12 __sched_cpucount 'int (size_t, const cpu_set_t *)' extern
| |-ParmVarDecl 0x561698d1f5d8 <col:30, col:37> col:37 __setsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x561698d1f6e0 <col:48, col:65> col:65 __setp 'const cpu_set_t *'
| `-NoThrowAttr 0x561698d1f8b8 <line:108:19>
|-FunctionDecl 0x561698d1fa90 <line:109:1, col:92> col:19 __sched_cpualloc 'cpu_set_t *(size_t)' extern
| |-ParmVarDecl 0x561698d1f920 <col:37, col:44> col:44 __count 'size_t':'unsigned long'
| `-NoThrowAttr 0x561698d1fb38 <col:69>
|-FunctionDecl 0x561698d1fcb0 <line:110:1, col:87> col:13 __sched_cpufree 'void (cpu_set_t *)' extern
| |-ParmVarDecl 0x561698d1fba0 <col:30, col:41> col:41 __set 'cpu_set_t *'
| `-NoThrowAttr 0x561698d1fd58 <col:64>
|-FunctionDecl 0x561698d20018 <line:113:1, line:114:45> line:113:12 sched_setparam 'int (__pid_t, const struct sched_param *)' extern
| |-ParmVarDecl 0x561698d1fdc0 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x561698d1fef8 <col:43, col:69> col:69 __param 'const struct sched_param *'
| `-NoThrowAttr 0x561698d200c8 <line:114:22>
|-FunctionDecl 0x561698d203b0 <line:115:1, col:111> col:12 sched_getparam 'int (__pid_t, struct sched_param *)' extern
| |-ParmVarDecl 0x561698d20130 <col:28, col:36> col:36 __pid '__pid_t':'int'
| |-ParmVarDecl 0x561698d20228 <col:43, col:63> col:63 __param 'struct sched_param *'
| `-NoThrowAttr 0x561698d20460 <col:88>
|-FunctionDecl 0x561698d20718 <line:116:1, line:117:85> line:116:12 sched_setscheduler 'int (__pid_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x561698d204c8 <col:32, col:40> col:40 __pid '__pid_t':'int'
| |-ParmVarDecl 0x561698d20548 <col:47, col:51> col:51 __policy 'int'
| |-ParmVarDecl 0x561698d205d8 <line:117:11, col:37> col:37 __param 'const struct sched_param *'
| `-NoThrowAttr 0x561698d207d0 <col:62>
|-FunctionDecl 0x561698d20948 <line:118:1, col:86> col:12 sched_getscheduler 'int (__pid_t)' extern
| |-ParmVarDecl 0x561698d20838 <col:32, col:40> col:40 __pid '__pid_t':'int'
| `-NoThrowAttr 0x561698d209f0 <col:63>
|-FunctionDecl 0x561698d20b18 <line:119:1, col:70> col:12 sched_yield 'int (void)' extern
| `-NoThrowAttr 0x561698d20bb8 <col:47>
|-FunctionDecl 0x561698d20cc0 <line:120:1, col:92> col:12 sched_get_priority_max 'int (int)' extern
| |-ParmVarDecl 0x561698d20c28 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x561698d20d68 <col:69>
|-FunctionDecl 0x561698d20e70 <line:121:1, col:92> col:12 sched_get_priority_min 'int (int)' extern
| |-ParmVarDecl 0x561698d20dd8 <col:36, col:40> col:40 __algorithm 'int'
| `-NoThrowAttr 0x561698d20f18 <col:69>
|-FunctionDecl 0x561698d211d8 <line:122:1, col:111> col:12 sched_rr_get_interval 'int (__pid_t, struct timespec *)' extern
| |-ParmVarDecl 0x561698d20f80 <col:35, col:43> col:43 __pid '__pid_t':'int'
| |-ParmVarDecl 0x561698d210b8 <col:50, col:67> col:67 __t 'struct timespec *'
| `-NoThrowAttr 0x561698d21288 <col:88>
|-TypedefDecl 0x561698d21318 <line:126:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x561698d212e0 '__clock_t' sugar
|   |-Typedef 0x561698d1b6c8 '__clock_t'
|   `-BuiltinType 0x561698cb3f30 'long'
|-TypedefDecl 0x561698d213c0 <line:129:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x561698d21370 '__clockid_t' sugar
|   |-Typedef 0x561698d1bab8 '__clockid_t'
|   `-BuiltinType 0x561698cb3f10 'int'
|-TypedefDecl 0x561698d21458 <line:130:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x561698d21420 '__timer_t' sugar
|   |-Typedef 0x561698d1bb28 '__timer_t'
|   `-PointerType 0x561698cb4630 'void *'
|     `-BuiltinType 0x561698cb3e70 'void'
|-RecordDecl 0x561698d214b0 <line:132:1, line:145:1> line:132:8 struct tm definition
| |-FieldDecl 0x561698d21570 <line:134:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x561698d215d8 <line:135:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x561698d21640 <line:136:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x561698d216a8 <line:137:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x561698d21710 <line:138:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x561698d21778 <line:139:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x561698d217e0 <line:140:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x561698d21848 <line:141:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x561698d218b0 <line:142:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x561698d21918 <line:143:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x561698d21980 <line:144:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x561698d219d0 <line:148:1, line:152:3> line:148:8 struct itimerspec definition
| |-FieldDecl 0x561698d21a98 <line:150:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x561698d21b08 <line:151:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x561698d21bb0 <line:153:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x561698d21d80 <line:155:1, col:68> col:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x561698d21e20 <col:45>
|-FunctionDecl 0x561698d22000 <line:156:1, col:77> col:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x561698d21ef0 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x561698d220a8 <col:54>
|-FunctionDecl 0x561698d222a8 <line:157:1, line:158:73> line:157:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x561698d22110 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x561698d22188 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x561698d22358 <line:158:22>
| `-ConstAttr 0x561698d22ff0 <col:63>
|-FunctionDecl 0x561698d231f0 <line:159:1, col:79> col:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x561698d230e8 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x561698d23298 <col:56>
|-FunctionDecl 0x561698d23640 <line:160:1, line:162:77> line:160:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x561698d23308 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x561698d23380 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x561698d23400 <line:161:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x561698d234f8 <line:162:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x561698d23700 <col:54>
|-RecordDecl 0x561698d23758 <line:164:9, line:171:1> line:164:16 struct __locale_struct definition
| |-RecordDecl 0x561698d23808 parent 0x561698cb3e18 <line:166:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x561698d23a68 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x561698d23b08 <line:167:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x561698d23b70 <line:168:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x561698d23bd8 <line:169:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x561698d23cc8 <line:170:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x561698d23de8 <line:164:1, line:171:4> col:4 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x561698d23d90 'struct __locale_struct *'
|   `-ElaboratedType 0x561698d23d20 'struct __locale_struct' sugar
|     `-RecordType 0x561698d237e0 'struct __locale_struct'
|       `-Record 0x561698d23758 '__locale_struct'
|-TypedefDecl 0x561698d23e98 <line:172:1, col:20> col:20 locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x561698d23e60 '__locale_t' sugar
|   |-Typedef 0x561698d23de8 '__locale_t'
|   `-PointerType 0x561698d23d90 'struct __locale_struct *'
|     `-ElaboratedType 0x561698d23d20 'struct __locale_struct' sugar
|       `-RecordType 0x561698d237e0 'struct __locale_struct'
|         `-Record 0x561698d23758 '__locale_struct'
|-FunctionDecl 0x561698d252a0 <line:173:1, line:176:63> line:173:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, __locale_t)' extern
| |-ParmVarDecl 0x561698d23f08 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x561698d23f80 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x561698d25028 <line:174:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x561698d250b8 <line:175:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x561698d25130 <line:176:6, col:17> col:17 __loc '__locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x561698d25368 <col:40>
|-FunctionDecl 0x561698d25558 <line:178:1, col:89> col:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x561698d25430 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x561698d25600 <col:66>
|-FunctionDecl 0x561698d25710 <line:179:1, col:92> col:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x561698d25668 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x561698d257b8 <col:69>
|-FunctionDecl 0x561698d259e8 <line:181:1, line:182:75> line:181:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x561698d25820 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x561698d258b0 <line:182:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x561698d25a98 <col:52>
|-FunctionDecl 0x561698d25c40 <line:183:1, line:184:78> line:183:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x561698d25b00 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x561698d25b90 <line:184:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x561698d25cf0 <col:55>
|-FunctionDecl 0x561698d25e88 <line:186:1, col:85> col:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x561698d25d70 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x561698d25f30 <col:62>
|-FunctionDecl 0x561698d26168 <line:187:1, col:83> col:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x561698d25f98 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x561698d26210 <col:60>
|-FunctionDecl 0x561698d26438 <line:189:1, line:190:67> line:189:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x561698d26290 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x561698d26310 <line:190:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x561698d264e8 <col:44>
|-FunctionDecl 0x561698d266f8 <line:191:1, line:192:72> line:191:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x561698d26550 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x561698d265d0 <line:192:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x561698d267a8 <col:49>
|-VarDecl 0x561698d268a8 <line:193:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x561698d26928 <line:194:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x561698d269a8 <line:195:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x561698d26a70 <line:196:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x561698d26ba0 <line:197:1, col:65> col:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x561698d26c40 <col:42>
|-VarDecl 0x561698d26cb0 <line:198:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x561698d26d30 <line:199:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x561698d26eb8 <line:200:1, col:80> col:12 stime 'int (const time_t *)' extern
| |-ParmVarDecl 0x561698d26da8 <col:19, col:33> col:33 __when 'const time_t *'
| `-NoThrowAttr 0x561698d26f60 <col:57>
|-FunctionDecl 0x561698d270d0 <line:201:1, col:79> col:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x561698d26fe0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x561698d27178 <col:56>
|-FunctionDecl 0x561698d27288 <line:202:1, col:82> col:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x561698d271f8 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x561698d27330 <col:59>
|-FunctionDecl 0x561698d27438 <line:203:1, col:99> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x561698d273a0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x561698d274e0 <col:48>
| `-ConstAttr 0x561698d27538 <col:89>
|-FunctionDecl 0x561698d27798 <line:204:1, line:205:37> line:204:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x561698d275e8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x561698d27678 <line:205:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x561698d279f8 <line:206:1, col:111> col:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x561698d27888 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x561698d27918 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x561698d27aa8 <col:88>
|-FunctionDecl 0x561698d27c40 <line:207:1, col:111> col:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x561698d27b10 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x561698d27ba0 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x561698d27cf0 <col:88>
|-FunctionDecl 0x561698d27f08 <line:208:1, line:209:45> line:208:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x561698d27d58 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x561698d27de8 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x561698d27fb8 <line:209:22>
|-FunctionDecl 0x561698d28358 <line:210:1, line:212:30> line:210:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x561698d28020 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x561698d280e0 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x561698d28170 <line:211:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x561698d28200 <line:212:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x561698d28658 <line:213:1, col:108> col:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x561698d28458 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x561698d28530 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x561698d28708 <col:85>
|-FunctionDecl 0x561698d28af8 <line:214:1, line:216:75> line:214:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x561698d28770 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x561698d288a8 <line:215:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x561698d289b0 <line:216:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x561698d28bb0 <col:52>
|-FunctionDecl 0x561698d28d28 <line:217:1, col:84> col:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x561698d28c18 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x561698d28dd0 <col:61>
|-FunctionDecl 0x561698d29248 <line:218:1, line:220:85> line:218:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x561698d28e38 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x561698d28eb8 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x561698d28fe8 <line:219:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x561698d290f0 <line:220:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x561698d29308 <col:62>
|-FunctionDecl 0x561698d29528 <line:221:1, line:222:45> line:221:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x561698d29370 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x561698d29400 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x561698d295d8 <line:222:22>
|-FunctionDecl 0x561698d296d8 <line:223:1, col:88> col:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x561698d29640 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x561698d29780 <col:65>
|-TypedefDecl 0x561698d297f0 <line:225:1, col:27> col:27 referenced pthread_t 'unsigned long'
| `-BuiltinType 0x561698cb3fd0 'unsigned long'
|-RecordDecl 0x561698d29848 <line:226:1, line:230:1> line:226:7 union pthread_attr_t definition
| |-FieldDecl 0x561698d29990 <line:228:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x561698d299f8 <line:229:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x561698d29aa8 <line:231:1, col:30> col:30 referenced pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x561698d29a50 'union pthread_attr_t' sugar
|   `-RecordType 0x561698d298d0 'union pthread_attr_t'
|     `-Record 0x561698d29848 'pthread_attr_t'
|-RecordDecl 0x561698d29b00 <line:232:9, line:236:1> line:232:16 struct __pthread_internal_list definition
| |-FieldDecl 0x561698d29c78 <line:234:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x561698d29cf0 <line:235:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x561698d29da0 <line:232:1, line:236:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x561698d29d40 'struct __pthread_internal_list' sugar
|   `-RecordType 0x561698d29b80 'struct __pthread_internal_list'
|     `-Record 0x561698d29b00 '__pthread_internal_list'
|-RecordDecl 0x561698d29e10 <line:237:9, line:251:1> line:237:9 union definition
| |-RecordDecl 0x561698d29eb8 parent 0x561698cb3e18 <line:239:3, line:248:3> line:239:10 struct __pthread_mutex_s definition
| | |-FieldDecl 0x561698d29f90 <line:241:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x561698d29ff8 <line:242:5, col:18> col:18 __count 'unsigned int'
| | |-FieldDecl 0x561698d2a060 <line:243:5, col:9> col:9 __owner 'int'
| | |-FieldDecl 0x561698d2e110 <line:244:5, col:18> col:18 __nusers 'unsigned int'
| | |-FieldDecl 0x561698d2e178 <line:245:5, col:9> col:9 __kind 'int'
| | |-FieldDecl 0x561698d2e1e0 <line:246:5, col:9> col:9 __spins 'int'
| | `-FieldDecl 0x561698d2e268 <line:247:5, col:22> col:22 __list '__pthread_list_t':'struct __pthread_internal_list'
| |-FieldDecl 0x561698d2e320 <line:239:3, line:248:5> col:5 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x561698d2e410 <line:249:3, col:17> col:8 __size 'char [40]'
| `-FieldDecl 0x561698d2e478 <line:250:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x561698d2e600 <line:237:1, line:251:3> col:3 referenced pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x561698d2e5a0 'union pthread_mutex_t' sugar
|   `-RecordType 0x561698d29e90 'pthread_mutex_t'
|     `-Record 0x561698d29e10 ''
|-RecordDecl 0x561698d2e670 <line:252:9, line:256:1> line:252:9 union definition
| |-FieldDecl 0x561698d2e7b0 <line:254:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x561698d2e818 <line:255:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x561698d2e8d0 <line:252:1, line:256:3> col:3 referenced pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x561698d2e870 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x561698d2e6f0 'pthread_mutexattr_t'
|     `-Record 0x561698d2e670 ''
|-RecordDecl 0x561698d2e940 <line:257:9, line:272:1> line:257:9 union definition
| |-RecordDecl 0x561698d2e9e8 <line:259:3, line:269:3> line:259:3 struct definition
| | |-FieldDecl 0x561698d2eab0 <line:261:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x561698d2eb18 <line:262:5, col:18> col:18 __futex 'unsigned int'
| | |-FieldDecl 0x561698d2eb80 <line:263:19, col:42> col:42 __total_seq 'unsigned long long'
| | |-FieldDecl 0x561698d2ebe8 <line:264:19, col:42> col:42 __wakeup_seq 'unsigned long long'
| | |-FieldDecl 0x561698d2ec50 <line:265:19, col:42> col:42 __woken_seq 'unsigned long long'
| | |-FieldDecl 0x561698d2ecb8 <line:266:5, col:11> col:11 __mutex 'void *'
| | |-FieldDecl 0x561698d2ed20 <line:267:5, col:18> col:18 __nwaiters 'unsigned int'
| | `-FieldDecl 0x561698d2ed88 <line:268:5, col:18> col:18 __broadcast_seq 'unsigned int'
| |-FieldDecl 0x561698d2ee40 <line:259:3, line:269:5> col:5 __data 'struct (anonymous struct at ./split_2/rfi002_power.oepc_true-unreach-call.i:259:3)':'struct pthread_cond_t::(anonymous at ./split_2/rfi002_power.oepc_true-unreach-call.i:259:3)'
| |-FieldDecl 0x561698d2ef30 <line:270:3, col:17> col:8 __size 'char [48]'
| `-FieldDecl 0x561698d2ef98 <line:271:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x561698d30130 <line:257:1, line:272:3> col:3 referenced pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x561698d2f070 'union pthread_cond_t' sugar
|   `-RecordType 0x561698d2e9c0 'pthread_cond_t'
|     `-Record 0x561698d2e940 ''
|-RecordDecl 0x561698d301a0 <line:273:9, line:277:1> line:273:9 union definition
| |-FieldDecl 0x561698d302a0 <line:275:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x561698d30308 <line:276:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x561698d303c0 <line:273:1, line:277:3> col:3 referenced pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x561698d30360 'union pthread_condattr_t' sugar
|   `-RecordType 0x561698d30220 'pthread_condattr_t'
|     `-Record 0x561698d301a0 ''
|-TypedefDecl 0x561698d30448 <line:278:1, col:22> col:22 referenced pthread_key_t 'unsigned int'
| `-BuiltinType 0x561698cb3fb0 'unsigned int'
|-TypedefDecl 0x561698d304b8 <line:279:1, col:13> col:13 referenced pthread_once_t 'int'
| `-BuiltinType 0x561698cb3f10 'int'
|-RecordDecl 0x561698d30510 <line:280:9, line:298:1> line:280:9 union definition
| |-RecordDecl 0x561698d305b8 <line:282:3, line:295:3> line:282:3 struct definition
| | |-FieldDecl 0x561698d30680 <line:284:5, col:9> col:9 __lock 'int'
| | |-FieldDecl 0x561698d306e8 <line:285:5, col:18> col:18 __nr_readers 'unsigned int'
| | |-FieldDecl 0x561698d30750 <line:286:5, col:18> col:18 __readers_wakeup 'unsigned int'
| | |-FieldDecl 0x561698d307b8 <line:287:5, col:18> col:18 __writer_wakeup 'unsigned int'
| | |-FieldDecl 0x561698d30820 <line:288:5, col:18> col:18 __nr_readers_queued 'unsigned int'
| | |-FieldDecl 0x561698d30888 <line:289:5, col:18> col:18 __nr_writers_queued 'unsigned int'
| | |-FieldDecl 0x561698d308f0 <line:290:5, col:9> col:9 __writer 'int'
| | |-FieldDecl 0x561698d30958 <line:291:5, col:9> col:9 __shared 'int'
| | |-FieldDecl 0x561698d309c0 <line:292:5, col:23> col:23 __pad1 'unsigned long'
| | |-FieldDecl 0x561698d30a28 <line:293:5, col:23> col:23 __pad2 'unsigned long'
| | `-FieldDecl 0x561698d30a90 <line:294:5, col:18> col:18 __flags 'unsigned int'
| |-FieldDecl 0x561698d30b40 <line:282:3, line:295:5> col:5 __data 'struct (anonymous struct at ./split_2/rfi002_power.oepc_true-unreach-call.i:282:3)':'struct pthread_rwlock_t::(anonymous at ./split_2/rfi002_power.oepc_true-unreach-call.i:282:3)'
| |-FieldDecl 0x561698d30be8 <line:296:3, col:17> col:8 __size 'char [56]'
| `-FieldDecl 0x561698d30c50 <line:297:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x561698d30da0 <line:280:1, line:298:3> col:3 referenced pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x561698d30d40 'union pthread_rwlock_t' sugar
|   `-RecordType 0x561698d30590 'pthread_rwlock_t'
|     `-Record 0x561698d30510 ''
|-RecordDecl 0x561698d30e10 <line:299:9, line:303:1> line:299:9 union definition
| |-FieldDecl 0x561698d30f50 <line:301:3, col:16> col:8 __size 'char [8]'
| `-FieldDecl 0x561698d30fb8 <line:302:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x561698d31070 <line:299:1, line:303:3> col:3 referenced pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x561698d31010 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x561698d30e90 'pthread_rwlockattr_t'
|     `-Record 0x561698d30e10 ''
|-TypedefDecl 0x561698d32140 <line:304:1, col:22> col:22 referenced pthread_spinlock_t 'volatile int'
| `-QualType 0x561698cb3f14 'volatile int' volatile
|   `-BuiltinType 0x561698cb3f10 'int'
|-RecordDecl 0x561698d32198 <line:305:9, line:309:1> line:305:9 union definition
| |-FieldDecl 0x561698d322e0 <line:307:3, col:17> col:8 __size 'char [32]'
| `-FieldDecl 0x561698d32348 <line:308:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x561698d32400 <line:305:1, line:309:3> col:3 referenced pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x561698d323a0 'union pthread_barrier_t' sugar
|   `-RecordType 0x561698d32220 'pthread_barrier_t'
|     `-Record 0x561698d32198 ''
|-RecordDecl 0x561698d32470 <line:310:9, line:314:1> line:310:9 union definition
| |-FieldDecl 0x561698d32570 <line:312:3, col:16> col:8 __size 'char [4]'
| `-FieldDecl 0x561698d325d8 <line:313:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x561698d32690 <line:310:1, line:314:3> col:3 referenced pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x561698d32630 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x561698d324f0 'pthread_barrierattr_t'
|     `-Record 0x561698d32470 ''
|-TypedefDecl 0x561698d327a8 <line:315:1, col:29> col:18 referenced __jmp_buf 'long [8]'
| `-ConstantArrayType 0x561698d32740 'long [8]' 8 
|   `-BuiltinType 0x561698cb3f30 'long'
|-EnumDecl 0x561698d32800 <line:316:1, line:320:1> line:316:1
| |-EnumConstantDecl 0x561698d328c8 <line:318:3> col:3 PTHREAD_CREATE_JOINABLE 'int'
| `-EnumConstantDecl 0x561698d32918 <line:319:3> col:3 PTHREAD_CREATE_DETACHED 'int'
|-EnumDecl 0x561698d32968 <line:321:1, line:332:1> line:321:1
| |-EnumConstantDecl 0x561698d32a38 <line:323:3> col:3 referenced PTHREAD_MUTEX_TIMED_NP 'int'
| |-EnumConstantDecl 0x561698d32a88 <line:324:3> col:3 referenced PTHREAD_MUTEX_RECURSIVE_NP 'int'
| |-EnumConstantDecl 0x561698d32ad8 <line:325:3> col:3 referenced PTHREAD_MUTEX_ERRORCHECK_NP 'int'
| |-EnumConstantDecl 0x561698d32b28 <line:326:3> col:3 PTHREAD_MUTEX_ADAPTIVE_NP 'int'
| |-EnumConstantDecl 0x561698d32bb0 <line:328:3, col:26> col:3 referenced PTHREAD_MUTEX_NORMAL 'int'
| | `-ConstantExpr 0x561698d32b98 <col:26> 'int'
| |   `-DeclRefExpr 0x561698d32b78 <col:26> 'int' EnumConstant 0x561698d32a38 'PTHREAD_MUTEX_TIMED_NP' 'int'
| |-EnumConstantDecl 0x561698d32c38 <line:329:3, col:29> col:3 PTHREAD_MUTEX_RECURSIVE 'int'
| | `-ConstantExpr 0x561698d32c20 <col:29> 'int'
| |   `-DeclRefExpr 0x561698d32c00 <col:29> 'int' EnumConstant 0x561698d32a88 'PTHREAD_MUTEX_RECURSIVE_NP' 'int'
| |-EnumConstantDecl 0x561698d32cc0 <line:330:3, col:30> col:3 PTHREAD_MUTEX_ERRORCHECK 'int'
| | `-ConstantExpr 0x561698d32ca8 <col:30> 'int'
| |   `-DeclRefExpr 0x561698d32c88 <col:30> 'int' EnumConstant 0x561698d32ad8 'PTHREAD_MUTEX_ERRORCHECK_NP' 'int'
| `-EnumConstantDecl 0x561698d32d48 <line:331:3, col:27> col:3 PTHREAD_MUTEX_DEFAULT 'int'
|   `-ConstantExpr 0x561698d32d30 <col:27> 'int'
|     `-DeclRefExpr 0x561698d32d10 <col:27> 'int' EnumConstant 0x561698d32bb0 'PTHREAD_MUTEX_NORMAL' 'int'
|-EnumDecl 0x561698d32d98 <line:333:1, line:339:1> line:333:1
| |-EnumConstantDecl 0x561698d32e68 <line:335:3> col:3 referenced PTHREAD_MUTEX_STALLED 'int'
| |-EnumConstantDecl 0x561698d32ef0 <line:336:3, col:30> col:3 PTHREAD_MUTEX_STALLED_NP 'int'
| | `-ConstantExpr 0x561698d32ed8 <col:30> 'int'
| |   `-DeclRefExpr 0x561698d32eb8 <col:30> 'int' EnumConstant 0x561698d32e68 'PTHREAD_MUTEX_STALLED' 'int'
| |-EnumConstantDecl 0x561698d32f40 <line:337:3> col:3 referenced PTHREAD_MUTEX_ROBUST 'int'
| `-EnumConstantDecl 0x561698d32fc8 <line:338:3, col:29> col:3 PTHREAD_MUTEX_ROBUST_NP 'int'
|   `-ConstantExpr 0x561698d32fb0 <col:29> 'int'
|     `-DeclRefExpr 0x561698d32f90 <col:29> 'int' EnumConstant 0x561698d32f40 'PTHREAD_MUTEX_ROBUST' 'int'
|-EnumDecl 0x561698d33018 <line:340:1, line:345:1> line:340:1
| |-EnumConstantDecl 0x561698d330e8 <line:342:3> col:3 PTHREAD_PRIO_NONE 'int'
| |-EnumConstantDecl 0x561698d33150 <line:343:3> col:3 PTHREAD_PRIO_INHERIT 'int'
| `-EnumConstantDecl 0x561698d331a0 <line:344:3> col:3 PTHREAD_PRIO_PROTECT 'int'
|-EnumDecl 0x561698d331f0 <line:346:1, line:352:1> line:346:1
| |-EnumConstantDecl 0x561698d332b8 <line:348:3> col:3 referenced PTHREAD_RWLOCK_PREFER_READER_NP 'int'
| |-EnumConstantDecl 0x561698d33308 <line:349:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NP 'int'
| |-EnumConstantDecl 0x561698d33358 <line:350:3> col:3 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 'int'
| `-EnumConstantDecl 0x561698d333e0 <line:351:3, col:31> col:3 PTHREAD_RWLOCK_DEFAULT_NP 'int'
|   `-ConstantExpr 0x561698d333c8 <col:31> 'int'
|     `-DeclRefExpr 0x561698d333a8 <col:31> 'int' EnumConstant 0x561698d332b8 'PTHREAD_RWLOCK_PREFER_READER_NP' 'int'
|-EnumDecl 0x561698d33430 <line:353:1, line:357:1> line:353:1
| |-EnumConstantDecl 0x561698d334f8 <line:355:3> col:3 PTHREAD_INHERIT_SCHED 'int'
| `-EnumConstantDecl 0x561698d33548 <line:356:3> col:3 PTHREAD_EXPLICIT_SCHED 'int'
|-EnumDecl 0x561698d33598 <line:358:1, line:362:1> line:358:1
| |-EnumConstantDecl 0x561698d33668 <line:360:3> col:3 PTHREAD_SCOPE_SYSTEM 'int'
| `-EnumConstantDecl 0x561698d336b8 <line:361:3> col:3 PTHREAD_SCOPE_PROCESS 'int'
|-EnumDecl 0x561698d33708 <line:363:1, line:367:1> line:363:1
| |-EnumConstantDecl 0x561698d337d8 <line:365:3> col:3 PTHREAD_PROCESS_PRIVATE 'int'
| `-EnumConstantDecl 0x561698d33828 <line:366:3> col:3 PTHREAD_PROCESS_SHARED 'int'
|-RecordDecl 0x561698d33878 <line:368:1, line:374:1> line:368:8 struct _pthread_cleanup_buffer definition
| |-FieldDecl 0x561698d33ab8 <line:370:3, col:28> col:10 __routine 'void (*)(void *)'
| |-FieldDecl 0x561698d33b20 <line:371:3, col:9> col:9 __arg 'void *'
| |-FieldDecl 0x561698d33b88 <line:372:3, col:7> col:7 __canceltype 'int'
| `-FieldDecl 0x561698d33ca8 <line:373:3, col:35> col:35 __prev 'struct _pthread_cleanup_buffer *'
|-EnumDecl 0x561698d33cf8 <line:375:1, line:379:1> line:375:1
| |-EnumConstantDecl 0x561698d33dc8 <line:377:3> col:3 PTHREAD_CANCEL_ENABLE 'int'
| `-EnumConstantDecl 0x561698d33e18 <line:378:3> col:3 PTHREAD_CANCEL_DISABLE 'int'
|-EnumDecl 0x561698d33e68 <line:380:1, line:384:1> line:380:1
| |-EnumConstantDecl 0x561698d33f38 <line:382:3> col:3 PTHREAD_CANCEL_DEFERRED 'int'
| `-EnumConstantDecl 0x561698d33f88 <line:383:3> col:3 PTHREAD_CANCEL_ASYNCHRONOUS 'int'
|-FunctionDecl 0x561698d345b8 <line:386:1, line:389:96> line:386:12 used pthread_create 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' extern
| |-ParmVarDecl 0x561698d34080 <col:28, col:50> col:50 __newthread 'pthread_t *restrict'
| |-ParmVarDecl 0x561698d341a0 <line:387:7, col:40> col:40 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d343a0 <line:388:7, col:39> col:15 __start_routine 'void *(*)(void *)'
| |-ParmVarDecl 0x561698d34420 <line:389:7, col:24> col:24 __arg 'void *restrict'
| |-NoThrowAttr 0x561698d34678 <col:47>
| |-NonNullAttr 0x561698d346d0 <col:77, col:94> 1 3
| `-CallbackAttr 0x561698d34708 <line:386:12> Implicit 2 3
|-FunctionDecl 0x561698d34830 <line:390:1, col:72> col:13 pthread_exit 'void (void *) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x561698d34760 <col:27, col:33> col:33 __retval 'void *'
|-FunctionDecl 0x561698d34a88 <line:391:1, col:64> col:12 pthread_join 'int (pthread_t, void **)' extern
| |-ParmVarDecl 0x561698d348e8 <col:26, col:36> col:36 __th 'pthread_t':'unsigned long'
| `-ParmVarDecl 0x561698d34968 <col:42, col:49> col:49 __thread_return 'void **'
|-FunctionDecl 0x561698d34c58 <line:392:1, col:83> col:12 pthread_detach 'int (pthread_t)' extern
| |-ParmVarDecl 0x561698d34b48 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
| `-NoThrowAttr 0x561698d34d00 <col:60>
|-FunctionDecl 0x561698d34e50 <line:393:1, col:105> col:18 pthread_self 'pthread_t (void)' extern
| |-NoThrowAttr 0x561698d34ef0 <col:54>
| `-ConstAttr 0x561698d34f48 <col:95>
|-FunctionDecl 0x561698d36990 <line:394:1, line:395:70> line:394:12 pthread_equal 'int (pthread_t, pthread_t)' extern
| |-ParmVarDecl 0x561698d34f80 <col:27, col:37> col:37 __thread1 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x561698d34ff8 <col:48, col:58> col:58 __thread2 'pthread_t':'unsigned long'
| |-NoThrowAttr 0x561698d36a40 <line:395:19>
| `-ConstAttr 0x561698d36a98 <col:60>
|-FunctionDecl 0x561698d36c68 <line:396:1, col:128> col:12 pthread_attr_init 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x561698d36b30 <col:31, col:47> col:47 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x561698d36d10 <col:71>
| `-NonNullAttr 0x561698d36d68 <col:112, col:126> 1
|-FunctionDecl 0x561698d36e70 <line:397:1, line:398:79> line:397:12 pthread_attr_destroy 'int (pthread_attr_t *)' extern
| |-ParmVarDecl 0x561698d36db8 <col:34, col:50> col:50 __attr 'pthread_attr_t *'
| |-NoThrowAttr 0x561698d36f18 <line:398:22>
| `-NonNullAttr 0x561698d36f70 <col:63, col:77> 1
|-FunctionDecl 0x561698d37198 <line:399:1, line:401:82> line:399:12 pthread_attr_getdetachstate 'int (const pthread_attr_t *, int *)' extern
| |-ParmVarDecl 0x561698d36fb8 <col:41, col:63> col:63 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x561698d37038 <line:400:6, col:11> col:11 __detachstate 'int *'
| |-NoThrowAttr 0x561698d37248 <line:401:22>
| `-NonNullAttr 0x561698d372a0 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d374a8 <line:402:1, line:404:79> line:402:12 pthread_attr_setdetachstate 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x561698d372e8 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x561698d37368 <line:403:6, col:10> col:10 __detachstate 'int'
| |-NoThrowAttr 0x561698d37558 <line:404:22>
| `-NonNullAttr 0x561698d375b0 <col:63, col:77> 1
|-FunctionDecl 0x561698d37808 <line:405:1, line:407:82> line:405:12 pthread_attr_getguardsize 'int (const pthread_attr_t *, size_t *)' extern
| |-ParmVarDecl 0x561698d375f8 <col:39, col:61> col:61 __attr 'const pthread_attr_t *'
| |-ParmVarDecl 0x561698d376a0 <line:406:11, col:19> col:19 __guardsize 'size_t *'
| |-NoThrowAttr 0x561698d378b8 <line:407:22>
| `-NonNullAttr 0x561698d37910 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d38b68 <line:408:1, line:410:79> line:408:12 pthread_attr_setguardsize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x561698d389b0 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x561698d38a28 <line:409:11, col:18> col:18 __guardsize 'size_t':'unsigned long'
| |-NoThrowAttr 0x561698d38c18 <line:410:22>
| `-NonNullAttr 0x561698d38c70 <col:63, col:77> 1
|-FunctionDecl 0x561698d38ea8 <line:411:1, line:413:82> line:411:12 pthread_attr_getschedparam 'int (const pthread_attr_t *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x561698d38cb8 <col:40, col:73> col:73 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d38d48 <line:412:12, col:43> col:43 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x561698d38f58 <line:413:22>
| `-NonNullAttr 0x561698d38fb0 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d391e8 <line:414:1, line:416:97> line:414:12 pthread_attr_setschedparam 'int (pthread_attr_t *restrict, const struct sched_param *restrict)' extern
| |-ParmVarDecl 0x561698d38ff8 <col:40, col:67> col:67 __attr 'pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d39088 <line:415:12, line:416:12> col:12 __param 'const struct sched_param *restrict'
| |-NoThrowAttr 0x561698d39298 <col:37>
| `-NonNullAttr 0x561698d392f0 <col:78, col:95> 1 2
|-FunctionDecl 0x561698d394d8 <line:417:1, line:419:82> line:417:12 pthread_attr_getschedpolicy 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d39338 <col:41, line:418:6> col:6 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d393b8 <col:14, col:30> col:30 __policy 'int *restrict'
| |-NoThrowAttr 0x561698d39588 <line:419:22>
| `-NonNullAttr 0x561698d395e0 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d39768 <line:420:1, line:421:79> line:420:12 pthread_attr_setschedpolicy 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x561698d39628 <col:41, col:57> col:57 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x561698d396a8 <col:65, col:69> col:69 __policy 'int'
| |-NoThrowAttr 0x561698d39818 <line:421:22>
| `-NonNullAttr 0x561698d39870 <col:63, col:77> 1
|-FunctionDecl 0x561698d39a38 <line:422:1, line:424:82> line:422:12 pthread_attr_getinheritsched 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d398b8 <col:42, line:423:7> col:7 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d39938 <col:15, col:31> col:31 __inherit 'int *restrict'
| |-NoThrowAttr 0x561698d39ae8 <line:424:22>
| `-NonNullAttr 0x561698d39b40 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d39cc8 <line:425:1, line:427:79> line:425:12 pthread_attr_setinheritsched 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x561698d39b88 <col:42, col:58> col:58 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x561698d39c08 <line:426:7, col:11> col:11 __inherit 'int'
| |-NoThrowAttr 0x561698d39d78 <line:427:22>
| `-NonNullAttr 0x561698d39dd0 <col:63, col:77> 1
|-FunctionDecl 0x561698d39f78 <line:428:1, line:430:82> line:428:12 pthread_attr_getscope 'int (const pthread_attr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d39e18 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d39e98 <line:429:7, col:23> col:23 __scope 'int *restrict'
| |-NoThrowAttr 0x561698d3a028 <line:430:22>
| `-NonNullAttr 0x561698d3a080 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d3a208 <line:431:1, line:432:79> line:431:12 pthread_attr_setscope 'int (pthread_attr_t *, int)' extern
| |-ParmVarDecl 0x561698d3a0c8 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x561698d3a148 <col:59, col:63> col:63 __scope 'int'
| |-NoThrowAttr 0x561698d3a2b8 <line:432:22>
| `-NonNullAttr 0x561698d3a310 <col:63, col:77> 1
|-FunctionDecl 0x561698d3a538 <line:433:1, line:435:115> line:433:12 pthread_attr_getstackaddr 'int (const pthread_attr_t *restrict, void **restrict)' extern
| |-ParmVarDecl 0x561698d3a358 <col:39, line:434:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d3a3d8 <col:19, col:37> col:37 __stackaddr 'void **restrict'
| |-NoThrowAttr 0x561698d3a5e8 <line:435:22>
| |-NonNullAttr 0x561698d3a640 <col:63, col:80> 1 2
| `-DeprecatedAttr 0x561698d3a678 <col:100> "" ""
|-FunctionDecl 0x561698d3a888 <line:436:1, line:438:112> line:436:12 pthread_attr_setstackaddr 'int (pthread_attr_t *, void *)' extern
| |-ParmVarDecl 0x561698d3a6c8 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x561698d3a748 <line:437:11, col:17> col:17 __stackaddr 'void *'
| |-NoThrowAttr 0x561698d3a938 <line:438:22>
| |-NonNullAttr 0x561698d3a990 <col:63, col:77> 1
| `-DeprecatedAttr 0x561698d3a9d8 <col:97> "" ""
|-FunctionDecl 0x561698d3abc8 <line:439:1, line:441:82> line:439:12 pthread_attr_getstacksize 'int (const pthread_attr_t *restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x561698d3aa28 <col:39, line:440:11> col:11 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d3aaa0 <col:19, col:38> col:38 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x561698d3ac78 <line:441:22>
| `-NonNullAttr 0x561698d3acd0 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d3ae50 <line:442:1, line:444:79> line:442:12 pthread_attr_setstacksize 'int (pthread_attr_t *, size_t)' extern
| |-ParmVarDecl 0x561698d3ad18 <col:39, col:55> col:55 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x561698d3ad90 <line:443:11, col:18> col:18 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x561698d3af00 <line:444:22>
| `-NonNullAttr 0x561698d3af58 <col:63, col:77> 1
|-FunctionDecl 0x561698d3b248 <line:445:1, line:448:85> line:445:12 pthread_attr_getstack 'int (const pthread_attr_t *restrict, void **restrict, size_t *restrict)' extern
| |-ParmVarDecl 0x561698d3afa8 <col:35, col:68> col:68 __attr 'const pthread_attr_t *restrict'
| |-ParmVarDecl 0x561698d3b028 <line:446:7, col:25> col:25 __stackaddr 'void **restrict'
| |-ParmVarDecl 0x561698d3b0a0 <line:447:7, col:26> col:26 __stacksize 'size_t *restrict'
| |-NoThrowAttr 0x561698d3b300 <line:448:22>
| `-NonNullAttr 0x561698d3b358 <col:63, col:83> 1 2 3
|-FunctionDecl 0x561698d3b608 <line:449:1, line:450:100> line:449:12 pthread_attr_setstack 'int (pthread_attr_t *, void *, size_t)' extern
| |-ParmVarDecl 0x561698d3b3b0 <col:35, col:51> col:51 __attr 'pthread_attr_t *'
| |-ParmVarDecl 0x561698d3b430 <col:59, col:65> col:65 __stackaddr 'void *'
| |-ParmVarDecl 0x561698d3b4a8 <line:450:7, col:14> col:14 __stacksize 'size_t':'unsigned long'
| |-NoThrowAttr 0x561698d3b6c0 <col:43>
| `-NonNullAttr 0x561698d3b718 <col:84, col:98> 1
|-FunctionDecl 0x561698d3ba20 <line:451:1, line:453:79> line:451:12 pthread_setschedparam 'int (pthread_t, int, const struct sched_param *)' extern
| |-ParmVarDecl 0x561698d3b768 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x561698d3b7e8 <col:62, col:66> col:66 __policy 'int'
| |-ParmVarDecl 0x561698d3b878 <line:452:7, col:33> col:33 __param 'const struct sched_param *'
| |-NoThrowAttr 0x561698d3bad8 <line:453:22>
| `-NonNullAttr 0x561698d3bb30 <col:63, col:77> 3
|-FunctionDecl 0x561698d3be08 <line:454:1, line:457:82> line:454:12 pthread_getschedparam 'int (pthread_t, int *restrict, struct sched_param *restrict)' extern
| |-ParmVarDecl 0x561698d3bb78 <col:35, col:45> col:45 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x561698d3bbf8 <line:455:7, col:23> col:23 __policy 'int *restrict'
| |-ParmVarDecl 0x561698d3bc88 <line:456:7, col:38> col:38 __param 'struct sched_param *restrict'
| |-NoThrowAttr 0x561698d3bec0 <line:457:22>
| `-NonNullAttr 0x561698d3bf18 <col:63, col:80> 2 3
|-FunctionDecl 0x561698d3c108 <line:458:1, line:459:45> line:458:12 pthread_setschedprio 'int (pthread_t, int)' extern
| |-ParmVarDecl 0x561698d3bf68 <col:34, col:44> col:44 __target_thread 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x561698d3bfe8 <col:61, col:65> col:65 __prio 'int'
| `-NoThrowAttr 0x561698d3c1b8 <line:459:22>
|-FunctionDecl 0x561698d3c588 <line:460:1, line:461:71> line:460:12 pthread_once 'int (pthread_once_t *, void (*)(void))' extern
| |-ParmVarDecl 0x561698d3c280 <col:26, col:42> col:42 __once_control 'pthread_once_t *'
| |-ParmVarDecl 0x561698d3c420 <line:461:5, col:33> col:12 __init_routine 'void (*)(void)'
| `-NonNullAttr 0x561698d3c638 <col:52, col:69> 1 2
|-FunctionDecl 0x561698d3c7e0 <line:462:1, col:64> col:12 pthread_setcancelstate 'int (int, int *)' extern
| |-ParmVarDecl 0x561698d3c6c0 <col:36, col:40> col:40 __state 'int'
| `-ParmVarDecl 0x561698d3c740 <col:49, col:54> col:54 __oldstate 'int *'
|-FunctionDecl 0x561698d3c9f0 <line:463:1, col:61> col:12 pthread_setcanceltype 'int (int, int *)' extern
| |-ParmVarDecl 0x561698d3c8a8 <col:35, col:39> col:39 __type 'int'
| `-ParmVarDecl 0x561698d3c928 <col:47, col:52> col:52 __oldtype 'int *'
|-FunctionDecl 0x561698d3cb48 <line:464:1, col:42> col:12 pthread_cancel 'int (pthread_t)' extern
| `-ParmVarDecl 0x561698d3cab0 <col:28, col:38> col:38 __th 'pthread_t':'unsigned long'
|-FunctionDecl 0x561698d3cc88 <line:465:1, col:37> col:13 pthread_testcancel 'void (void)' extern
|-RecordDecl 0x561698d3cd28 <line:466:9, line:474:1> line:466:9 struct definition
| |-RecordDecl 0x561698d3cdd8 <line:468:3, line:472:3> line:468:3 struct definition
| | |-FieldDecl 0x561698d3cec8 <line:470:5, col:15> col:15 __cancel_jmp_buf '__jmp_buf':'long [8]'
| | `-FieldDecl 0x561698d3cf30 <line:471:5, col:9> col:9 __mask_was_saved 'int'
| |-FieldDecl 0x561698d3d100 <line:468:3, line:472:23> col:5 __cancel_jmp_buf 'struct (anonymous struct at ./split_2/rfi002_power.oepc_true-unreach-call.i:468:3) [1]'
| `-FieldDecl 0x561698d3d1f8 <line:473:3, col:16> col:9 __pad 'void *[4]'
|-TypedefDecl 0x561698d3d2b0 <line:466:1, line:474:3> col:3 referenced __pthread_unwind_buf_t 'struct __pthread_unwind_buf_t':'__pthread_unwind_buf_t'
| |-ElaboratedType 0x561698d3d250 'struct __pthread_unwind_buf_t' sugar
| | `-RecordType 0x561698d3cdb0 '__pthread_unwind_buf_t'
| |   `-Record 0x561698d3cd28 ''
| `-AlignedAttr 0x561698d3d308 <col:42> aligned
|   `-<<<NULL>>>
|-RecordDecl 0x561698d3d380 <line:475:1, line:481:1> line:475:8 struct __pthread_cleanup_frame definition
| |-FieldDecl 0x561698d3d4e0 <line:477:3, col:35> col:10 __cancel_routine 'void (*)(void *)'
| |-FieldDecl 0x561698d3d548 <line:478:3, col:9> col:9 __cancel_arg 'void *'
| |-FieldDecl 0x561698d3d5b0 <line:479:3, col:7> col:7 __do_it 'int'
| `-FieldDecl 0x561698d3d618 <line:480:3, col:7> col:7 __cancel_type 'int'
|-FunctionDecl 0x561698d3d820 <line:482:1, col:69> col:13 __pthread_register_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x561698d3d710 <col:40, col:64> col:64 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x561698d3da00 <line:484:1, col:71> col:13 __pthread_unregister_cancel 'void (__pthread_unwind_buf_t *)' extern
| `-ParmVarDecl 0x561698d3d8d8 <col:42, col:66> col:66 __buf '__pthread_unwind_buf_t *'
|-FunctionDecl 0x561698d3dbc0 <line:486:1, line:488:31> line:486:13 __pthread_unwind_next 'void (__pthread_unwind_buf_t *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x561698d3dab8 <col:36, col:60> col:60 __buf '__pthread_unwind_buf_t *'
| `-WeakAttr 0x561698d3dc68 <line:488:22>
|-RecordDecl 0x561698d3dcc0 <line:490:1, col:8> col:8 struct __jmp_buf_tag
|-FunctionDecl 0x561698d3dfd8 <line:491:1, col:98> col:12 __sigsetjmp 'int (struct __jmp_buf_tag *, int)' extern
| |-ParmVarDecl 0x561698d3de38 <col:25, col:47> col:47 __env 'struct __jmp_buf_tag *'
| |-ParmVarDecl 0x561698d3deb8 <col:54, col:58> col:58 __savemask 'int'
| |-NoThrowAttr 0x561698d3e088 <col:86>
| `-ReturnsTwiceAttr 0x561698d3e0e0 <col:12> Implicit
|-FunctionDecl 0x561698d3e408 <line:492:1, line:494:79> line:492:12 pthread_mutex_init 'int (pthread_mutex_t *, const pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x561698d3e1b0 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-ParmVarDecl 0x561698d3e2c0 <line:493:11, col:38> col:38 __mutexattr 'const pthread_mutexattr_t *'
| |-NoThrowAttr 0x561698d3e4b8 <line:494:22>
| `-NonNullAttr 0x561698d3e510 <col:63, col:77> 1
|-FunctionDecl 0x561698d3e688 <line:495:1, line:496:79> line:495:12 pthread_mutex_destroy 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x561698d3e558 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x561698d3e730 <line:496:22>
| `-NonNullAttr 0x561698d3e788 <col:63, col:77> 1
|-FunctionDecl 0x561698d3e890 <line:497:1, line:498:68> line:497:12 pthread_mutex_trylock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x561698d3e7d8 <col:35, col:52> col:52 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x561698d3e938 <line:498:22>
| `-NonNullAttr 0x561698d3e990 <col:52, col:66> 1
|-FunctionDecl 0x561698d3fad8 <line:499:1, line:500:68> line:499:12 pthread_mutex_lock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x561698d3fa20 <col:32, col:49> col:49 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x561698d3fb80 <line:500:22>
| `-NonNullAttr 0x561698d3fbd8 <col:52, col:66> 1
|-FunctionDecl 0x561698d3fe18 <line:501:1, line:503:85> line:501:12 pthread_mutex_timedlock 'int (pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x561698d3fc28 <col:37, col:65> col:65 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x561698d3fcb8 <line:502:9, line:503:9> col:9 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x561698d3fec8 <col:36>
| `-NonNullAttr 0x561698d3ff20 <col:66, col:83> 1 2
|-FunctionDecl 0x561698d40020 <line:504:1, line:505:68> line:504:12 pthread_mutex_unlock 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x561698d3ff68 <col:34, col:51> col:51 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x561698d400c8 <line:505:22>
| `-NonNullAttr 0x561698d40120 <col:52, col:66> 1
|-FunctionDecl 0x561698d403b8 <line:506:1, line:509:82> line:506:12 pthread_mutex_getprioceiling 'int (const pthread_mutex_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d401d0 <col:42, line:507:18> col:18 __mutex 'const pthread_mutex_t *restrict'
| |-ParmVarDecl 0x561698d40250 <line:508:7, col:23> col:23 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x561698d40468 <line:509:22>
| `-NonNullAttr 0x561698d404c0 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d40788 <line:510:1, line:513:82> line:510:12 pthread_mutex_setprioceiling 'int (pthread_mutex_t *restrict, int, int *restrict)' extern
| |-ParmVarDecl 0x561698d40508 <col:42, col:70> col:70 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x561698d40588 <line:511:7, col:11> col:11 __prioceiling 'int'
| |-ParmVarDecl 0x561698d40608 <line:512:7, col:23> col:23 __old_ceiling 'int *restrict'
| |-NoThrowAttr 0x561698d40840 <line:513:22>
| `-NonNullAttr 0x561698d40898 <col:63, col:80> 1 3
|-FunctionDecl 0x561698d40a30 <line:514:1, line:515:79> line:514:12 pthread_mutex_consistent 'int (pthread_mutex_t *)' extern
| |-ParmVarDecl 0x561698d408e8 <col:38, col:55> col:55 __mutex 'pthread_mutex_t *'
| |-NoThrowAttr 0x561698d40ad8 <line:515:22>
| `-NonNullAttr 0x561698d40b30 <col:63, col:77> 1
|-FunctionDecl 0x561698d40d18 <line:516:1, line:517:79> line:516:12 pthread_mutexattr_init 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x561698d40be0 <col:36, col:57> col:57 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x561698d40dc0 <line:517:22>
| `-NonNullAttr 0x561698d40e18 <col:63, col:77> 1
|-FunctionDecl 0x561698d40f20 <line:518:1, line:519:79> line:518:12 pthread_mutexattr_destroy 'int (pthread_mutexattr_t *)' extern
| |-ParmVarDecl 0x561698d40e68 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-NoThrowAttr 0x561698d40fc8 <line:519:22>
| `-NonNullAttr 0x561698d41020 <col:63, col:77> 1
|-FunctionDecl 0x561698d41248 <line:520:1, line:523:82> line:520:12 pthread_mutexattr_getpshared 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d41068 <col:42, line:521:18> col:18 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x561698d410e8 <line:522:7, col:23> col:23 __pshared 'int *restrict'
| |-NoThrowAttr 0x561698d412f8 <line:523:22>
| `-NonNullAttr 0x561698d41350 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d41558 <line:524:1, line:526:79> line:524:12 pthread_mutexattr_setpshared 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x561698d41398 <col:42, col:63> col:63 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x561698d41418 <line:525:7, col:11> col:11 __pshared 'int'
| |-NoThrowAttr 0x561698d41608 <line:526:22>
| `-NonNullAttr 0x561698d41660 <col:63, col:77> 1
|-FunctionDecl 0x561698d41808 <line:527:1, line:529:82> line:527:12 pthread_mutexattr_gettype 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d416a8 <col:39, line:528:11> col:11 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x561698d41728 <col:19, col:35> col:35 __kind 'int *restrict'
| |-NoThrowAttr 0x561698d418b8 <line:529:22>
| `-NonNullAttr 0x561698d41910 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d41b00 <line:530:1, line:531:79> line:530:12 pthread_mutexattr_settype 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x561698d41958 <col:39, col:60> col:60 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x561698d41a40 <col:68, col:72> col:72 __kind 'int'
| |-NoThrowAttr 0x561698d41bb0 <line:531:22>
| `-NonNullAttr 0x561698d41c08 <col:63, col:77> 1
|-FunctionDecl 0x561698d41db8 <line:532:1, line:535:82> line:532:12 pthread_mutexattr_getprotocol 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d41c58 <col:43, line:533:19> col:19 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x561698d41cd8 <line:534:8, col:24> col:24 __protocol 'int *restrict'
| |-NoThrowAttr 0x561698d41e68 <line:535:22>
| `-NonNullAttr 0x561698d41ec0 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d42048 <line:536:1, line:538:79> line:536:12 pthread_mutexattr_setprotocol 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x561698d41f08 <col:43, col:64> col:64 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x561698d41f88 <line:537:8, col:12> col:12 __protocol 'int'
| |-NoThrowAttr 0x561698d420f8 <line:538:22>
| `-NonNullAttr 0x561698d42150 <col:63, col:77> 1
|-FunctionDecl 0x561698d422f8 <line:539:1, line:542:82> line:539:12 pthread_mutexattr_getprioceiling 'int (const pthread_mutexattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d42198 <col:46, line:540:22> col:22 __attr 'const pthread_mutexattr_t *restrict'
| |-ParmVarDecl 0x561698d42218 <line:541:11, col:27> col:27 __prioceiling 'int *restrict'
| |-NoThrowAttr 0x561698d423a8 <line:542:22>
| `-NonNullAttr 0x561698d42400 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d42588 <line:543:1, line:545:79> line:543:12 pthread_mutexattr_setprioceiling 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x561698d42448 <col:46, col:67> col:67 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x561698d424c8 <line:544:11, col:15> col:15 __prioceiling 'int'
| |-NoThrowAttr 0x561698d42638 <line:545:22>
| `-NonNullAttr 0x561698d42690 <col:63, col:77> 1
|-FunctionDecl 0x561698d42878 <line:546:1, line:548:82> line:546:12 pthread_mutexattr_getrobust 'int (const pthread_mutexattr_t *, int *)' extern
| |-ParmVarDecl 0x561698d426d8 <col:41, col:68> col:68 __attr 'const pthread_mutexattr_t *'
| |-ParmVarDecl 0x561698d42758 <line:547:6, col:11> col:11 __robustness 'int *'
| |-NoThrowAttr 0x561698d42928 <line:548:22>
| `-NonNullAttr 0x561698d42980 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d43b38 <line:549:1, line:551:79> line:549:12 pthread_mutexattr_setrobust 'int (pthread_mutexattr_t *, int)' extern
| |-ParmVarDecl 0x561698d429c8 <col:41, col:62> col:62 __attr 'pthread_mutexattr_t *'
| |-ParmVarDecl 0x561698d43a78 <line:550:6, col:10> col:10 __robustness 'int'
| |-NoThrowAttr 0x561698d43be8 <line:551:22>
| `-NonNullAttr 0x561698d43c40 <col:63, col:77> 1
|-FunctionDecl 0x561698d43f78 <line:552:1, line:554:86> line:552:12 pthread_rwlock_init 'int (pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)' extern
| |-ParmVarDecl 0x561698d43d20 <col:33, col:62> col:62 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x561698d43e30 <line:553:5, line:554:5> col:5 __attr 'const pthread_rwlockattr_t *restrict'
| |-NoThrowAttr 0x561698d44028 <col:29>
| `-NonNullAttr 0x561698d44080 <col:70, col:84> 1
|-FunctionDecl 0x561698d441f8 <line:555:1, line:556:79> line:555:12 pthread_rwlock_destroy 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x561698d440c8 <col:36, col:54> col:54 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x561698d442a0 <line:556:22>
| `-NonNullAttr 0x561698d442f8 <col:63, col:77> 1
|-FunctionDecl 0x561698d44400 <line:557:1, line:558:68> line:557:12 pthread_rwlock_rdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x561698d44348 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x561698d444a8 <line:558:22>
| `-NonNullAttr 0x561698d44500 <col:52, col:66> 1
|-FunctionDecl 0x561698d44600 <line:559:1, line:560:65> line:559:12 pthread_rwlock_tryrdlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x561698d44548 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x561698d446a8 <line:560:19>
| `-NonNullAttr 0x561698d44700 <col:49, col:63> 1
|-FunctionDecl 0x561698d44938 <line:561:1, line:563:88> line:561:12 pthread_rwlock_timedrdlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x561698d44748 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x561698d447d8 <line:562:12, line:563:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x561698d449e8 <col:39>
| `-NonNullAttr 0x561698d44a70 <col:69, col:86> 1 2
|-FunctionDecl 0x561698d44b70 <line:564:1, line:565:68> line:564:12 pthread_rwlock_wrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x561698d44ab8 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x561698d44c18 <line:565:22>
| `-NonNullAttr 0x561698d44c70 <col:52, col:66> 1
|-FunctionDecl 0x561698d44d70 <line:566:1, line:567:68> line:566:12 pthread_rwlock_trywrlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x561698d44cb8 <col:38, col:56> col:56 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x561698d44e18 <line:567:22>
| `-NonNullAttr 0x561698d44e70 <col:52, col:66> 1
|-FunctionDecl 0x561698d45028 <line:568:1, line:570:88> line:568:12 pthread_rwlock_timedwrlock 'int (pthread_rwlock_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x561698d44eb8 <col:40, col:69> col:69 __rwlock 'pthread_rwlock_t *restrict'
| |-ParmVarDecl 0x561698d44f48 <line:569:12, line:570:12> col:12 __abstime 'const struct timespec *restrict'
| |-NoThrowAttr 0x561698d450d8 <col:39>
| `-NonNullAttr 0x561698d45130 <col:69, col:86> 1 2
|-FunctionDecl 0x561698d45230 <line:571:1, line:572:68> line:571:12 pthread_rwlock_unlock 'int (pthread_rwlock_t *)' extern
| |-ParmVarDecl 0x561698d45178 <col:35, col:53> col:53 __rwlock 'pthread_rwlock_t *'
| |-NoThrowAttr 0x561698d452d8 <line:572:22>
| `-NonNullAttr 0x561698d45330 <col:52, col:66> 1
|-FunctionDecl 0x561698d45518 <line:573:1, line:574:79> line:573:12 pthread_rwlockattr_init 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x561698d453e0 <col:37, col:59> col:59 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x561698d455c0 <line:574:22>
| `-NonNullAttr 0x561698d45618 <col:63, col:77> 1
|-FunctionDecl 0x561698d45720 <line:575:1, line:576:79> line:575:12 pthread_rwlockattr_destroy 'int (pthread_rwlockattr_t *)' extern
| |-ParmVarDecl 0x561698d45668 <col:40, col:62> col:62 __attr 'pthread_rwlockattr_t *'
| |-NoThrowAttr 0x561698d457c8 <line:576:22>
| `-NonNullAttr 0x561698d45820 <col:63, col:77> 1
|-FunctionDecl 0x561698d45a80 <line:577:1, line:580:82> line:577:12 pthread_rwlockattr_getpshared 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d45868 <col:43, line:578:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x561698d458e8 <line:579:8, col:24> col:24 __pshared 'int *restrict'
| |-NoThrowAttr 0x561698d45b30 <line:580:22>
| `-NonNullAttr 0x561698d45b88 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d45d98 <line:581:1, line:583:79> line:581:12 pthread_rwlockattr_setpshared 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x561698d45bd8 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x561698d45c58 <line:582:8, col:12> col:12 __pshared 'int'
| |-NoThrowAttr 0x561698d45e48 <line:583:22>
| `-NonNullAttr 0x561698d45ea0 <col:63, col:77> 1
|-FunctionDecl 0x561698d46048 <line:584:1, line:587:82> line:584:12 pthread_rwlockattr_getkind_np 'int (const pthread_rwlockattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d45ee8 <col:43, line:585:19> col:19 __attr 'const pthread_rwlockattr_t *restrict'
| |-ParmVarDecl 0x561698d45f68 <line:586:8, col:24> col:24 __pref 'int *restrict'
| |-NoThrowAttr 0x561698d460f8 <line:587:22>
| `-NonNullAttr 0x561698d46150 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d462d8 <line:588:1, line:589:93> line:588:12 pthread_rwlockattr_setkind_np 'int (pthread_rwlockattr_t *, int)' extern
| |-ParmVarDecl 0x561698d46198 <col:43, col:65> col:65 __attr 'pthread_rwlockattr_t *'
| |-ParmVarDecl 0x561698d46218 <line:589:8, col:12> col:12 __pref 'int'
| |-NoThrowAttr 0x561698d46388 <col:36>
| `-NonNullAttr 0x561698d463e0 <col:77, col:91> 1
|-FunctionDecl 0x561698d46718 <line:590:1, line:592:79> line:590:12 pthread_cond_init 'int (pthread_cond_t *restrict, const pthread_condattr_t *restrict)' extern
| |-ParmVarDecl 0x561698d464c0 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x561698d465d0 <line:591:10, col:47> col:47 __cond_attr 'const pthread_condattr_t *restrict'
| |-NoThrowAttr 0x561698d467c8 <line:592:22>
| `-NonNullAttr 0x561698d46820 <col:63, col:77> 1
|-FunctionDecl 0x561698d46998 <line:593:1, line:594:79> line:593:12 pthread_cond_destroy 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x561698d46868 <col:34, col:50> col:50 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x561698d46a40 <line:594:22>
| `-NonNullAttr 0x561698d46ac0 <col:63, col:77> 1
|-FunctionDecl 0x561698d46bc0 <line:595:1, line:596:68> line:595:12 pthread_cond_signal 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x561698d46b08 <col:33, col:49> col:49 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x561698d46c68 <line:596:22>
| `-NonNullAttr 0x561698d46cc0 <col:52, col:66> 1
|-FunctionDecl 0x561698d46dc0 <line:597:1, line:598:68> line:597:12 pthread_cond_broadcast 'int (pthread_cond_t *)' extern
| |-ParmVarDecl 0x561698d46d08 <col:36, col:52> col:52 __cond 'pthread_cond_t *'
| |-NoThrowAttr 0x561698d46e68 <line:598:22>
| `-NonNullAttr 0x561698d46ec0 <col:52, col:66> 1
|-FunctionDecl 0x561698d470e8 <line:599:1, line:601:41> line:599:12 pthread_cond_wait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' extern
| |-ParmVarDecl 0x561698d46f08 <col:31, col:58> col:58 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x561698d46f80 <line:600:10, col:38> col:38 __mutex 'pthread_mutex_t *restrict'
| `-NonNullAttr 0x561698d47198 <line:601:22, col:39> 1 2
|-FunctionDecl 0x561698d474c8 <line:602:1, line:605:44> line:602:12 pthread_cond_timedwait 'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' extern
| |-ParmVarDecl 0x561698d47218 <col:36, col:63> col:63 __cond 'pthread_cond_t *restrict'
| |-ParmVarDecl 0x561698d47290 <line:603:8, col:36> col:36 __mutex 'pthread_mutex_t *restrict'
| |-ParmVarDecl 0x561698d47320 <line:604:8, col:42> col:42 __abstime 'const struct timespec *restrict'
| `-NonNullAttr 0x561698d47580 <line:605:22, col:42> 1 2 3
|-FunctionDecl 0x561698d47798 <line:606:1, line:607:79> line:606:12 pthread_condattr_init 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x561698d47660 <col:35, col:55> col:55 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x561698d47840 <line:607:22>
| `-NonNullAttr 0x561698d47898 <col:63, col:77> 1
|-FunctionDecl 0x561698d479a0 <line:608:1, line:609:79> line:608:12 pthread_condattr_destroy 'int (pthread_condattr_t *)' extern
| |-ParmVarDecl 0x561698d478e8 <col:38, col:58> col:58 __attr 'pthread_condattr_t *'
| |-NoThrowAttr 0x561698d47a48 <line:609:22>
| `-NonNullAttr 0x561698d47ad0 <col:63, col:77> 1
|-FunctionDecl 0x561698d47cf8 <line:610:1, line:613:82> line:610:12 pthread_condattr_getpshared 'int (const pthread_condattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d47b18 <col:41, line:611:17> col:17 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x561698d47b98 <line:612:6, col:22> col:22 __pshared 'int *restrict'
| |-NoThrowAttr 0x561698d47da8 <line:613:22>
| `-NonNullAttr 0x561698d47e00 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d48008 <line:614:1, line:615:94> line:614:12 pthread_condattr_setpshared 'int (pthread_condattr_t *, int)' extern
| |-ParmVarDecl 0x561698d47e48 <col:41, col:61> col:61 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x561698d47ec8 <line:615:6, col:10> col:10 __pshared 'int'
| |-NoThrowAttr 0x561698d480b8 <col:37>
| `-NonNullAttr 0x561698d48110 <col:78, col:92> 1
|-FunctionDecl 0x561698d48328 <line:616:1, line:619:82> line:616:12 pthread_condattr_getclock 'int (const pthread_condattr_t *restrict, __clockid_t *restrict)' extern
| |-ParmVarDecl 0x561698d48158 <col:39, line:617:22> col:22 __attr 'const pthread_condattr_t *restrict'
| |-ParmVarDecl 0x561698d48200 <line:618:11, col:35> col:35 __clock_id '__clockid_t *restrict'
| |-NoThrowAttr 0x561698d483d8 <line:619:22>
| `-NonNullAttr 0x561698d48430 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d485f8 <line:620:1, line:622:79> line:620:12 pthread_condattr_setclock 'int (pthread_condattr_t *, __clockid_t)' extern
| |-ParmVarDecl 0x561698d48478 <col:39, col:59> col:59 __attr 'pthread_condattr_t *'
| |-ParmVarDecl 0x561698d484f0 <line:621:11, col:23> col:23 __clock_id '__clockid_t':'int'
| |-NoThrowAttr 0x561698d486a8 <line:622:22>
| `-NonNullAttr 0x561698d48700 <col:63, col:77> 1
|-FunctionDecl 0x561698d489a8 <line:623:1, line:624:79> line:623:12 pthread_spin_init 'int (pthread_spinlock_t *, int)' extern
| |-ParmVarDecl 0x561698d487e0 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-ParmVarDecl 0x561698d48860 <col:59, col:63> col:63 __pshared 'int'
| |-NoThrowAttr 0x561698d48a58 <line:624:22>
| `-NonNullAttr 0x561698d48ae0 <col:63, col:77> 1
|-FunctionDecl 0x561698d48c58 <line:625:1, line:626:79> line:625:12 pthread_spin_destroy 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x561698d48b28 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x561698d48d00 <line:626:22>
| `-NonNullAttr 0x561698d48d58 <col:63, col:77> 1
|-FunctionDecl 0x561698d48e60 <line:627:1, line:628:68> line:627:12 pthread_spin_lock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x561698d48da8 <col:31, col:51> col:51 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x561698d48f08 <line:628:22>
| `-NonNullAttr 0x561698d48f60 <col:52, col:66> 1
|-FunctionDecl 0x561698d49060 <line:629:1, line:630:68> line:629:12 pthread_spin_trylock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x561698d48fa8 <col:34, col:54> col:54 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x561698d49108 <line:630:22>
| `-NonNullAttr 0x561698d49160 <col:52, col:66> 1
|-FunctionDecl 0x561698d49260 <line:631:1, line:632:68> line:631:12 pthread_spin_unlock 'int (pthread_spinlock_t *)' extern
| |-ParmVarDecl 0x561698d491a8 <col:33, col:53> col:53 __lock 'pthread_spinlock_t *'
| |-NoThrowAttr 0x561698d49308 <line:632:22>
| `-NonNullAttr 0x561698d49360 <col:52, col:66> 1
|-FunctionDecl 0x561698d49738 <line:633:1, line:636:79> line:633:12 pthread_barrier_init 'int (pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)' extern
| |-ParmVarDecl 0x561698d49440 <col:34, col:64> col:64 __barrier 'pthread_barrier_t *restrict'
| |-ParmVarDecl 0x561698d49550 <line:634:6, line:635:6> col:6 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x561698d495d0 <col:14, col:27> col:27 __count 'unsigned int'
| |-NoThrowAttr 0x561698d497f0 <line:636:22>
| `-NonNullAttr 0x561698d49848 <col:63, col:77> 1
|-FunctionDecl 0x561698d499c8 <line:637:1, line:638:79> line:637:12 pthread_barrier_destroy 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x561698d49898 <col:37, col:56> col:56 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x561698d49a70 <line:638:22>
| `-NonNullAttr 0x561698d4ab00 <col:63, col:77> 1
|-FunctionDecl 0x561698d4ac00 <line:639:1, line:640:68> line:639:12 pthread_barrier_wait 'int (pthread_barrier_t *)' extern
| |-ParmVarDecl 0x561698d4ab48 <col:34, col:53> col:53 __barrier 'pthread_barrier_t *'
| |-NoThrowAttr 0x561698d4aca8 <line:640:22>
| `-NonNullAttr 0x561698d4ad00 <col:52, col:66> 1
|-FunctionDecl 0x561698d4aee8 <line:641:1, line:642:79> line:641:12 pthread_barrierattr_init 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x561698d4adb0 <col:38, col:61> col:61 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x561698d4af90 <line:642:22>
| `-NonNullAttr 0x561698d4afe8 <col:63, col:77> 1
|-FunctionDecl 0x561698d4b0f0 <line:643:1, line:644:79> line:643:12 pthread_barrierattr_destroy 'int (pthread_barrierattr_t *)' extern
| |-ParmVarDecl 0x561698d4b038 <col:41, col:64> col:64 __attr 'pthread_barrierattr_t *'
| |-NoThrowAttr 0x561698d4b198 <line:644:22>
| `-NonNullAttr 0x561698d4b1f0 <col:63, col:77> 1
|-FunctionDecl 0x561698d4b418 <line:645:1, line:648:82> line:645:12 pthread_barrierattr_getpshared 'int (const pthread_barrierattr_t *restrict, int *restrict)' extern
| |-ParmVarDecl 0x561698d4b238 <col:44, line:646:20> col:20 __attr 'const pthread_barrierattr_t *restrict'
| |-ParmVarDecl 0x561698d4b2b8 <line:647:9, col:25> col:25 __pshared 'int *restrict'
| |-NoThrowAttr 0x561698d4b4c8 <line:648:22>
| `-NonNullAttr 0x561698d4b520 <col:63, col:80> 1 2
|-FunctionDecl 0x561698d4b728 <line:649:1, line:651:79> line:649:12 pthread_barrierattr_setpshared 'int (pthread_barrierattr_t *, int)' extern
| |-ParmVarDecl 0x561698d4b568 <col:44, col:67> col:67 __attr 'pthread_barrierattr_t *'
| |-ParmVarDecl 0x561698d4b5e8 <line:650:9, col:13> col:13 __pshared 'int'
| |-NoThrowAttr 0x561698d4b7d8 <line:651:22>
| `-NonNullAttr 0x561698d4b830 <col:63, col:77> 1
|-FunctionDecl 0x561698d4bb98 <line:652:1, line:654:79> line:652:12 pthread_key_create 'int (pthread_key_t *, void (*)(void *))' extern
| |-ParmVarDecl 0x561698d4b910 <col:32, col:47> col:47 __key 'pthread_key_t *'
| |-ParmVarDecl 0x561698d4ba30 <line:653:11, col:43> col:18 __destr_function 'void (*)(void *)'
| |-NoThrowAttr 0x561698d4bc48 <line:654:22>
| `-NonNullAttr 0x561698d4bca0 <col:63, col:77> 1
|-FunctionDecl 0x561698d4bdf8 <line:655:1, col:92> col:12 pthread_key_delete 'int (pthread_key_t)' extern
| |-ParmVarDecl 0x561698d4bce8 <col:32, col:46> col:46 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x561698d4bea0 <col:69>
|-FunctionDecl 0x561698d4c018 <line:656:1, col:95> col:14 pthread_getspecific 'void *(pthread_key_t)' extern
| |-ParmVarDecl 0x561698d4bf08 <col:35, col:49> col:49 __key 'pthread_key_t':'unsigned int'
| `-NoThrowAttr 0x561698d4c0c0 <col:72>
|-FunctionDecl 0x561698d4c2f8 <line:657:1, line:658:67> line:657:12 pthread_setspecific 'int (pthread_key_t, const void *)' extern
| |-ParmVarDecl 0x561698d4c128 <col:33, col:47> col:47 __key 'pthread_key_t':'unsigned int'
| |-ParmVarDecl 0x561698d4c1d8 <line:658:5, col:17> col:17 __pointer 'const void *'
| `-NoThrowAttr 0x561698d4c3a8 <col:44>
|-FunctionDecl 0x561698d4c5c8 <line:659:1, line:661:79> line:659:12 pthread_getcpuclockid 'int (pthread_t, __clockid_t *)' extern
| |-ParmVarDecl 0x561698d4c410 <col:35, col:45> col:45 __thread_id 'pthread_t':'unsigned long'
| |-ParmVarDecl 0x561698d4c488 <line:660:7, col:20> col:20 __clock_id '__clockid_t *'
| |-NoThrowAttr 0x561698d4c678 <line:661:22>
| `-NonNullAttr 0x561698d4c6d0 <col:63, col:77> 2
|-FunctionDecl 0x561698d4cb30 <line:662:1, line:664:70> line:662:12 pthread_atfork 'int (void (*)(void), void (*)(void), void (*)(void))' extern
| |-ParmVarDecl 0x561698d4c7b0 <col:28, col:51> col:35 __prepare 'void (*)(void)'
| |-ParmVarDecl 0x561698d4c8c0 <line:663:7, col:29> col:14 __parent 'void (*)(void)'
| |-ParmVarDecl 0x561698d4c9d0 <line:664:7, col:28> col:14 __child 'void (*)(void)'
| `-NoThrowAttr 0x561698d4cbe8 <col:47>
|-FunctionDecl 0x561698d4ccf0 <line:666:1, col:20> col:8 used P0 'void *(void *)'
| `-ParmVarDecl 0x561698d4cc58 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x561698d4ce48 <line:667:1, col:20> col:8 used P1 'void *(void *)'
| `-ParmVarDecl 0x561698d4cdb0 <col:11, col:17> col:17 arg 'void *'
|-FunctionDecl 0x561698d4cf10 <line:668:1, col:12> col:6 fence 'void ()'
|-FunctionDecl 0x561698d4cfd0 <line:669:1, col:12> col:6 isync 'void ()'
|-FunctionDecl 0x561698d4d090 <line:670:1, col:14> col:6 lwfence 'void ()'
|-VarDecl 0x561698d4d148 <line:671:1, col:5> col:5 used __unbuffered_cnt 'int'
|-VarDecl 0x561698d4d1c8 prev 0x561698d4d148 <line:672:1, col:24> col:5 used __unbuffered_cnt 'int' cinit
| `-IntegerLiteral 0x561698d4d230 <col:24> 'int' 0
|-VarDecl 0x561698d4d268 <line:673:1, col:5> col:5 used __unbuffered_p0_EAX 'int'
|-VarDecl 0x561698d4d2e8 prev 0x561698d4d268 <line:674:1, col:27> col:5 used __unbuffered_p0_EAX 'int' cinit
| `-IntegerLiteral 0x561698d4d350 <col:27> 'int' 0
|-VarDecl 0x561698d4d388 <line:675:1, col:5> col:5 used __unbuffered_p1_EAX 'int'
|-VarDecl 0x561698d4d408 prev 0x561698d4d388 <line:676:1, col:27> col:5 used __unbuffered_p1_EAX 'int' cinit
| `-IntegerLiteral 0x561698d4d470 <col:27> 'int' 0
|-VarDecl 0x561698d4d4a8 <line:677:1, col:5> col:5 used __unbuffered_p1_EBX 'int'
|-VarDecl 0x561698d4d528 prev 0x561698d4d4a8 <line:678:1, col:27> col:5 used __unbuffered_p1_EBX 'int' cinit
| `-IntegerLiteral 0x561698d4d590 <col:27> 'int' 0
|-VarDecl 0x561698d4d5c0 <line:679:1, col:7> col:7 used main$tmp_guard0 '_Bool'
|-VarDecl 0x561698d4d638 <line:680:1, col:7> col:7 used main$tmp_guard1 '_Bool'
|-VarDecl 0x561698d4d6b8 <line:681:1, col:5> col:5 used x 'int'
|-VarDecl 0x561698d4d738 prev 0x561698d4d6b8 <line:682:1, col:9> col:5 used x 'int' cinit
| `-IntegerLiteral 0x561698d4d7a0 <col:9> 'int' 0
|-VarDecl 0x561698d4d7d0 <line:683:1, col:7> col:7 used x$flush_delayed '_Bool'
|-VarDecl 0x561698d4d850 <line:684:1, col:5> col:5 used x$mem_tmp 'int'
|-VarDecl 0x561698d4d8c8 <line:685:1, col:7> col:7 used x$r_buff0_thd0 '_Bool'
|-VarDecl 0x561698d4d940 <line:686:1, col:7> col:7 used x$r_buff0_thd1 '_Bool'
|-VarDecl 0x561698d4d9b8 <line:687:1, col:7> col:7 used x$r_buff0_thd2 '_Bool'
|-VarDecl 0x561698d4da30 <line:688:1, col:7> col:7 used x$r_buff1_thd0 '_Bool'
|-VarDecl 0x561698d4db00 <line:689:1, col:7> col:7 used x$r_buff1_thd1 '_Bool'
|-VarDecl 0x561698d4db78 <line:690:1, col:7> col:7 used x$r_buff1_thd2 '_Bool'
|-VarDecl 0x561698d4dbf0 <line:691:1, col:7> col:7 x$read_delayed '_Bool'
|-VarDecl 0x561698d4dc70 <line:692:1, col:6> col:6 x$read_delayed_var 'int *'
|-VarDecl 0x561698d4dcf0 <line:693:1, col:5> col:5 used x$w_buff0 'int'
|-VarDecl 0x561698d4dd68 <line:694:1, col:7> col:7 used x$w_buff0_used '_Bool'
|-VarDecl 0x561698d4dde8 <line:695:1, col:5> col:5 used x$w_buff1 'int'
|-VarDecl 0x561698d4de60 <line:696:1, col:7> col:7 used x$w_buff1_used '_Bool'
|-VarDecl 0x561698d4dee0 <line:697:1, col:5> col:5 used y 'int'
|-VarDecl 0x561698d4df60 prev 0x561698d4dee0 <line:698:1, col:9> col:5 used y 'int' cinit
| `-IntegerLiteral 0x561698d4dfc8 <col:9> 'int' 0
|-VarDecl 0x561698d4dff8 <line:699:1, col:7> col:7 used weak$$choice0 '_Bool'
|-VarDecl 0x561698d4e070 <line:700:1, col:7> col:7 used weak$$choice2 '_Bool'
|-FunctionDecl 0x561698d4e188 prev 0x561698d4ccf0 <line:701:1, line:740:1> line:701:8 used P0 'void *(void *)'
| |-ParmVarDecl 0x561698d4e0f0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x561698d52b80 <line:702:1, line:740:1>
|   |-CallExpr 0x561698d4e298 <line:703:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d4e280 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d4e230 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d4e2f8 <line:704:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x561698d4e2b8 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   | `-IntegerLiteral 0x561698d4e2d8 <col:7> 'int' 1
|   |-CallExpr 0x561698d4e350 <line:705:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d4e338 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d4e318 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d4e3a8 <line:706:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d4e390 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d4e370 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d4e690 <line:707:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x561698d4e3c8 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   | `-ConditionalOperator 0x561698d4e660 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x561698d4e488 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x561698d4e440 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x561698d4e428 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x561698d4e3e8 <col:7> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x561698d4e470 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x561698d4e458 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x561698d4e408 <col:25> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d4e648 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d4e4a8 <col:42> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x561698d4e628 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x561698d4e5f8 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x561698d4e568 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x561698d4e520 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x561698d4e508 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x561698d4e4c8 <col:55> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x561698d4e550 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x561698d4e538 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x561698d4e4e8 <col:73> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d4e5c8 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d4e588 <col:90> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x561698d4e5e0 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d4e5a8 <col:102> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d4e898 <line:708:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x561698d4e6b0 <col:3> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d4e880 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d4e850 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x561698d4e770 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x561698d4e728 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x561698d4e710 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x561698d4e6d0 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x561698d4e758 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x561698d4e740 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x561698d4e6f0 <col:38> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d4e808 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d4e7c0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d4e790 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d4e838 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d4e820 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d4e7e8 <col:66> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x561698d4eba0 <line:709:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x561698d4e8b8 <col:3> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d4eb88 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d4eb58 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x561698d4ea58 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x561698d4e978 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x561698d4e930 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x561698d4e918 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x561698d4e8d8 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x561698d4e960 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x561698d4e948 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x561698d4e8f8 <col:38> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x561698d4ea38 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x561698d4e9f0 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x561698d4e9d8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x561698d4e998 <col:56> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x561698d4ea20 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x561698d4ea08 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x561698d4e9b8 <col:74> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d4eb10 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d4eaa8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d4ea78 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d4eb40 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d4eb28 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d4ead0 <col:102> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x561698d4eda8 <line:710:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x561698d4ebc0 <col:3> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x561698d4ed90 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d4ed60 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x561698d4ec80 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x561698d4ec38 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x561698d4ec20 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x561698d4ebe0 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x561698d4ec68 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x561698d4ec50 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x561698d4ec00 <col:38> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d4ed18 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d4ecd0 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d4eca0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d4ed48 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d4ed30 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d4ecf8 <col:66> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x561698d4f090 <line:711:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x561698d4edc8 <col:3> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x561698d4f078 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d4f048 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x561698d4ef68 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x561698d4ee88 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x561698d4ee40 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x561698d4ee28 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x561698d4ede8 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x561698d4ee70 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x561698d4ee58 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x561698d4ee08 <col:38> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x561698d4ef48 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x561698d4ef00 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x561698d4eee8 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x561698d4eea8 <col:56> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x561698d4ef30 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x561698d4ef18 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x561698d4eec8 <col:74> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d4f000 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d4efb8 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d4ef88 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d4f030 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d4f018 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d4efe0 <col:102> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x561698d4f0e8 <line:712:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d4f0d0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d4f0b0 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d4f140 <line:713:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d4f128 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d4f108 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d4f208 <line:714:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x561698d4f160 <col:3> '_Bool' lvalue Var 0x561698d4dff8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x561698d4f1e8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x561698d4f1d0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x561698d4f180 <col:19> '_Bool (void)' Function 0x561698cf3770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x561698d4f2a0 <line:715:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x561698d4f228 <col:3> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x561698d4f280 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x561698d4f268 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x561698d4f248 <col:19> '_Bool (void)' Function 0x561698cf3770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x561698d4f318 <line:716:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x561698d4f2c0 <col:3> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x561698d4f300 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d4f2e0 <col:21> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x561698d4f390 <line:717:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x561698d4f338 <col:3> 'int' lvalue Var 0x561698d4d850 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x561698d4f378 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d4f358 <col:15> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d4f7c8 <line:718:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x561698d4f3b0 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   | `-ConditionalOperator 0x561698d4f798 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x561698d4f5c0 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x561698d4f4e0 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x561698d4f408 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x561698d4f3f0 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x561698d4f3d0 <col:8> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x561698d4f4c0 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x561698d4f458 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x561698d4f440 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x561698d4f420 <col:27> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |   | |   `-UnaryOperator 0x561698d4f4a8 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x561698d4f490 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x561698d4f470 <col:46> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x561698d4f5a0 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x561698d4f538 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x561698d4f520 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x561698d4f500 <col:65> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |   |   `-UnaryOperator 0x561698d4f588 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x561698d4f570 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x561698d4f550 <col:84> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d4f780 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d4f5e0 <col:101> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |   `-ParenExpr 0x561698d4f760 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x561698d4f730 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x561698d4f6a0 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x561698d4f658 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x561698d4f640 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x561698d4f600 <col:106> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x561698d4f688 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x561698d4f670 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x561698d4f620 <col:124> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d4f700 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d4f6c0 <col:141> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x561698d4f718 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d4f6e0 <col:153> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x561698d4fcf8 <line:719:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x561698d4f7e8 <col:3> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x561698d4fcc8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x561698d4fc98 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x561698d4fc80 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x561698d4f808 <col:15> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d4fcb0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d4f828 <col:31> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x561698d4fc60 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x561698d4fc30 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x561698d4fa38 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x561698d4f958 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x561698d4f880 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x561698d4f868 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x561698d4f848 <col:45> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x561698d4f938 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x561698d4f8d0 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x561698d4f8b8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x561698d4f898 <col:64> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x561698d4f920 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x561698d4f908 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x561698d4f8e8 <col:83> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x561698d4fa18 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x561698d4f9b0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x561698d4f998 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x561698d4f978 <col:102> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x561698d4fa00 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x561698d4f9e8 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x561698d4f9c8 <col:121> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d4fc18 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d4fa58 <col:138> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x561698d4fbf8 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x561698d4fbc8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x561698d4fb38 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x561698d4fad0 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x561698d4fab8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x561698d4fa78 <col:151> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x561698d4fb20 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x561698d4fae8 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x561698d4fa98 <col:169> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x561698d4fb98 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x561698d4fb58 <col:186> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x561698d4fbb0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x561698d4fb78 <col:198> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x561698d50208 <line:720:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x561698d4fd18 <col:3> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x561698d501d8 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x561698d501a8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x561698d50190 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x561698d4fd38 <col:15> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d501c0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d4fd58 <col:31> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x561698d50170 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x561698d50140 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x561698d4ff68 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x561698d4fe88 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x561698d4fdb0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x561698d4fd98 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x561698d4fd78 <col:45> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x561698d4fe68 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x561698d4fe00 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x561698d4fde8 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x561698d4fdc8 <col:64> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |       | |   `-UnaryOperator 0x561698d4fe50 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x561698d4fe38 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x561698d4fe18 <col:83> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x561698d4ff48 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x561698d4fee0 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x561698d4fec8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x561698d4fea8 <col:102> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |       |   `-UnaryOperator 0x561698d4ff30 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x561698d4ff18 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x561698d4fef8 <col:121> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d50128 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d4ff88 <col:138> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x561698d50108 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x561698d500d8 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x561698d50048 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x561698d50000 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x561698d4ffe8 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x561698d4ffa8 <col:151> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x561698d50030 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x561698d50018 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x561698d4ffc8 <col:169> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |           |-ImplicitCastExpr 0x561698d500a8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x561698d50068 <col:186> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x561698d500c0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x561698d50088 <col:198> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x561698d507b0 <line:721:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x561698d50228 <col:3> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d50798 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d50768 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x561698d50720 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d50708 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d50248 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d50750 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d50738 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d50268 <col:36> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x561698d506e8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x561698d506b8 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x561698d50478 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x561698d50398 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x561698d502c0 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x561698d502a8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x561698d50288 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x561698d50378 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x561698d50310 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x561698d502f8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x561698d502d8 <col:74> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x561698d50360 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x561698d50348 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x561698d50328 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x561698d50458 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x561698d503f0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x561698d503d8 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x561698d503b8 <col:112> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x561698d50440 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x561698d50428 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x561698d50408 <col:131> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x561698d506a0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x561698d50688 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x561698d50498 <col:148> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x561698d50668 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x561698d50638 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x561698d50558 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x561698d50510 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x561698d504f8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x561698d504b8 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x561698d50540 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x561698d50528 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x561698d504d8 <col:184> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x561698d505f0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x561698d505a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x561698d50578 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x561698d50620 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x561698d50608 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x561698d505d0 <col:212> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x561698d50d88 <line:722:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x561698d507d0 <col:3> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d50d70 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d50d40 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x561698d50cf8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d50ce0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d507f0 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d50d28 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d50d10 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d50810 <col:36> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x561698d50cc0 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x561698d50c90 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x561698d50a20 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x561698d50940 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x561698d50868 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x561698d50850 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x561698d50830 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x561698d50920 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x561698d508b8 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x561698d508a0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x561698d50880 <col:74> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x561698d50908 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x561698d508f0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x561698d508d0 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x561698d50a00 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x561698d50998 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x561698d50980 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x561698d50960 <col:112> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x561698d509e8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x561698d509d0 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x561698d509b0 <col:131> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x561698d50c78 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x561698d50c60 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x561698d50a40 <col:148> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x561698d50c40 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x561698d50c10 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x561698d50b00 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x561698d50ab8 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x561698d50aa0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x561698d50a60 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x561698d50ae8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x561698d50ad0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x561698d50a80 <col:184> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x561698d50be0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x561698d50b60 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x561698d50b30 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x561698d50bf8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x561698d50bb8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x561698d50b88 <col:219> 'int' 0
|   |-BinaryOperator 0x561698d51330 <line:723:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x561698d50da8 <col:3> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x561698d51318 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d512e8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x561698d512a0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d51288 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d50dc8 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d512d0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d512b8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d50de8 <col:36> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     `-ParenExpr 0x561698d51268 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x561698d51238 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x561698d50ff8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x561698d50f18 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x561698d50e40 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x561698d50e28 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x561698d50e08 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x561698d50ef8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x561698d50e90 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x561698d50e78 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x561698d50e58 <col:74> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x561698d50ee0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x561698d50ec8 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x561698d50ea8 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x561698d50fd8 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x561698d50f70 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x561698d50f58 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x561698d50f38 <col:112> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x561698d50fc0 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x561698d50fa8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x561698d50f88 <col:131> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x561698d51220 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x561698d51208 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x561698d51018 <col:148> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         `-ParenExpr 0x561698d511e8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x561698d511b8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x561698d510d8 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x561698d51090 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x561698d51078 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x561698d51038 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x561698d510c0 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x561698d510a8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x561698d51058 <col:184> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x561698d51170 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x561698d51128 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x561698d510f8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x561698d511a0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x561698d51188 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x561698d51150 <col:212> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x561698d518f8 <line:724:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x561698d51350 <col:3> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x561698d518e0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d518b0 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x561698d51868 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d51850 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d51370 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d51898 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d51880 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d51390 <col:36> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |     `-ParenExpr 0x561698d51830 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x561698d51800 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x561698d515a0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x561698d514c0 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x561698d513e8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x561698d513d0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x561698d513b0 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x561698d514a0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x561698d51438 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x561698d51420 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x561698d51400 <col:74> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         | |   `-UnaryOperator 0x561698d51488 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x561698d51470 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x561698d51450 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x561698d51580 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x561698d51518 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x561698d51500 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x561698d514e0 <col:112> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |         |   `-UnaryOperator 0x561698d51568 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x561698d51550 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x561698d51530 <col:131> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |         |-ImplicitCastExpr 0x561698d517e8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x561698d517d0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x561698d515c0 <col:148> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |         `-ParenExpr 0x561698d517b0 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x561698d51780 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x561698d51680 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x561698d51638 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x561698d51620 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x561698d515e0 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x561698d51668 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x561698d51650 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x561698d51600 <col:184> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |             |-ImplicitCastExpr 0x561698d51750 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x561698d516d0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x561698d516a0 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x561698d51768 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x561698d51728 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x561698d516f8 <col:219> 'int' 0
|   |-BinaryOperator 0x561698d51970 <line:725:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x561698d51918 <col:3> 'int' lvalue Var 0x561698d4d2e8 '__unbuffered_p0_EAX' 'int'
|   | `-ImplicitCastExpr 0x561698d51958 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d51938 <col:25> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d51aa0 <line:726:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x561698d51990 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   | `-ConditionalOperator 0x561698d51a70 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x561698d51a28 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x561698d51a10 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x561698d519b0 <col:7> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d51a40 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d519d0 <col:25> 'int' lvalue Var 0x561698d4d850 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x561698d51a58 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x561698d519f0 <col:37> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d51b68 <line:727:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x561698d51ac0 <col:3> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x561698d51b40 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x561698d51ae0 <col:28> 'int' 0
|   |-CallExpr 0x561698d51bc0 <line:728:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d51ba8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d51b88 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d51c18 <line:729:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d51c00 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d51be0 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d51f00 <line:730:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x561698d51c38 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   | `-ConditionalOperator 0x561698d51ed0 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x561698d51cf8 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x561698d51cb0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x561698d51c98 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x561698d51c58 <col:7> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x561698d51ce0 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x561698d51cc8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x561698d51c78 <col:25> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d51eb8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d51d18 <col:42> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x561698d51e98 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x561698d51e68 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x561698d51dd8 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x561698d51d90 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x561698d51d78 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x561698d51d38 <col:55> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x561698d51dc0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x561698d51da8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x561698d51d58 <col:73> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d51e38 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d51df8 <col:90> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x561698d51e50 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d51e18 <col:102> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d52108 <line:731:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x561698d51f20 <col:3> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d520f0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d520c0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x561698d51fe0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x561698d51f98 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x561698d51f80 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x561698d51f40 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x561698d51fc8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x561698d51fb0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x561698d51f60 <col:38> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d52078 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d52030 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d52000 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d520a8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d52090 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d52058 <col:66> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x561698d523f0 <line:732:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x561698d52128 <col:3> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d523d8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d523a8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x561698d522c8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x561698d521e8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x561698d521a0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x561698d52188 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x561698d52148 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x561698d521d0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x561698d521b8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x561698d52168 <col:38> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x561698d522a8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x561698d52260 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x561698d52248 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x561698d52208 <col:56> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x561698d52290 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x561698d52278 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x561698d52228 <col:74> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d52360 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d52318 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d522e8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d52390 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d52378 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d52340 <col:102> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x561698d525f8 <line:733:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x561698d52410 <col:3> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x561698d525e0 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d525b0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x561698d524d0 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x561698d52488 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x561698d52470 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x561698d52430 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x561698d524b8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x561698d524a0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x561698d52450 <col:38> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d52568 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d52520 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d524f0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d52598 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d52580 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d52548 <col:66> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x561698d528e0 <line:734:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x561698d52618 <col:3> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x561698d528c8 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d52898 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x561698d527b8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x561698d526d8 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x561698d52690 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x561698d52678 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x561698d52638 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x561698d526c0 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x561698d526a8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x561698d52658 <col:38> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |     | `-BinaryOperator 0x561698d52798 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x561698d52750 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x561698d52738 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x561698d526f8 <col:56> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x561698d52780 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x561698d52768 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x561698d52718 <col:74> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d52850 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d52808 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d527d8 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d52880 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d52868 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d52830 <col:102> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   |-CallExpr 0x561698d52938 <line:735:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d52920 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d52900 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d52990 <line:736:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d52978 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d52958 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d52a48 <line:737:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x561698d529b0 <col:3> 'int' lvalue Var 0x561698d4d1c8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x561698d52a28 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x561698d52a10 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d529d0 <col:22> 'int' lvalue Var 0x561698d4d1c8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x561698d529f0 <col:41> 'int' 1
|   |-CallExpr 0x561698d52aa0 <line:738:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d52a88 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d52a68 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x561698d52b70 <line:739:3, col:36>
|     `-CallExpr 0x561698d52b50 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x561698d52b10 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561698d52ac0 <col:10> 'void *(void)' Function 0x561698cf3ab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x561698d52d68 prev 0x561698d4ce48 <line:741:1, line:787:1> line:741:8 used P1 'void *(void *)'
| |-ParmVarDecl 0x561698d52cd0 <col:11, col:17> col:17 arg 'void *'
| `-CompoundStmt 0x561698d57080 <line:742:1, line:787:1>
|   |-CallExpr 0x561698d52e48 <line:743:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d52e30 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d52e10 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d52ec0 <line:744:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x561698d52e68 <col:3> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   | `-ImplicitCastExpr 0x561698d52ea8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d52e88 <col:15> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x561698d52f20 <line:745:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x561698d52ee0 <col:3> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   | `-IntegerLiteral 0x561698d52f00 <col:15> 'int' 2
|   |-BinaryOperator 0x561698d52f98 <line:746:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x561698d52f40 <col:3> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d52f80 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d52f60 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x561698d53030 <line:747:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x561698d52fb8 <col:3> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   | `-CStyleCastExpr 0x561698d53008 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x561698d52fd8 <col:27> 'int' 1
|   |-CallExpr 0x561698d531b8 <line:748:3, col:56> 'void'
|   | |-ImplicitCastExpr 0x561698d531a0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561698d53050 <col:3> 'void (int)' Function 0x561698cf3d28 '__VERIFIER_assert' 'void (int)'
|   | `-UnaryOperator 0x561698d53150 <col:21, col:55> 'int' prefix '!' cannot overflow
|   |   `-ParenExpr 0x561698d53130 <col:22, col:55> 'int'
|   |     `-BinaryOperator 0x561698d53110 <col:23, col:41> 'int' '&&'
|   |       |-ImplicitCastExpr 0x561698d530c8 <col:23> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x561698d530b0 <col:23> '_Bool' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x561698d53070 <col:23> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |       `-ImplicitCastExpr 0x561698d530f8 <col:41> 'int' <IntegralCast>
|   |         `-ImplicitCastExpr 0x561698d530e0 <col:41> '_Bool' <LValueToRValue>
|   |           `-DeclRefExpr 0x561698d53090 <col:41> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x561698d53238 <line:749:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x561698d531e0 <col:3> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
|   | `-ImplicitCastExpr 0x561698d53220 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d53200 <col:20> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
|   |-BinaryOperator 0x561698d532b0 <line:750:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x561698d53258 <col:3> '_Bool' lvalue Var 0x561698d4db00 'x$r_buff1_thd1' '_Bool'
|   | `-ImplicitCastExpr 0x561698d53298 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d53278 <col:20> '_Bool' lvalue Var 0x561698d4d940 'x$r_buff0_thd1' '_Bool'
|   |-BinaryOperator 0x561698d53328 <line:751:3, col:20> '_Bool' '='
|   | |-DeclRefExpr 0x561698d532d0 <col:3> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x561698d53310 <col:20> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d532f0 <col:20> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x561698d533c0 <line:752:3, col:27> '_Bool' '='
|   | |-DeclRefExpr 0x561698d53348 <col:3> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   | `-CStyleCastExpr 0x561698d53398 <col:20, col:27> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x561698d53368 <col:27> 'int' 1
|   |-CallExpr 0x561698d53418 <line:753:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d53400 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d533e0 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d53470 <line:754:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d53458 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d53438 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d534d0 <line:755:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x561698d53490 <col:3> 'int' lvalue Var 0x561698d4df60 'y' 'int'
|   | `-IntegerLiteral 0x561698d534b0 <col:7> 'int' 1
|   |-CallExpr 0x561698d53528 <line:756:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d53510 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d534f0 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d53580 <line:757:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d53568 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d53548 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d535f8 <line:758:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x561698d535a0 <col:3> 'int' lvalue Var 0x561698d4d408 '__unbuffered_p1_EAX' 'int'
|   | `-ImplicitCastExpr 0x561698d535e0 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d535c0 <col:25> 'int' lvalue Var 0x561698d4df60 'y' 'int'
|   |-CallExpr 0x561698d53650 <line:759:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d53638 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d53618 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d536a8 <line:760:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d53690 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d53670 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d53740 <line:761:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x561698d536c8 <col:3> '_Bool' lvalue Var 0x561698d4dff8 'weak$$choice0' '_Bool'
|   | `-CallExpr 0x561698d53720 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x561698d53708 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x561698d536e8 <col:19> '_Bool (void)' Function 0x561698cf3770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x561698d537d8 <line:762:3, col:42> '_Bool' '='
|   | |-DeclRefExpr 0x561698d53760 <col:3> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   | `-CallExpr 0x561698d537b8 <col:19, col:42> '_Bool'
|   |   `-ImplicitCastExpr 0x561698d537a0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x561698d53780 <col:19> '_Bool (void)' Function 0x561698cf3770 '__VERIFIER_nondet_bool' '_Bool (void)'
|   |-BinaryOperator 0x561698d53850 <line:763:3, col:21> '_Bool' '='
|   | |-DeclRefExpr 0x561698d537f8 <col:3> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
|   | `-ImplicitCastExpr 0x561698d53838 <col:21> '_Bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d53818 <col:21> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |-BinaryOperator 0x561698d538c8 <line:764:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x561698d53870 <col:3> 'int' lvalue Var 0x561698d4d850 'x$mem_tmp' 'int'
|   | `-ImplicitCastExpr 0x561698d538b0 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d53890 <col:15> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d53d28 <line:765:3, col:162> 'int' '='
|   | |-DeclRefExpr 0x561698d538e8 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   | `-ConditionalOperator 0x561698d53cf8 <col:7, col:162> 'int'
|   |   |-BinaryOperator 0x561698d53af8 <col:7, col:84> 'int' '||'
|   |   | |-BinaryOperator 0x561698d53a18 <col:7, col:46> 'int' '||'
|   |   | | |-UnaryOperator 0x561698d53940 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x561698d53928 <col:8> '_Bool' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x561698d53908 <col:8> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |   | | `-BinaryOperator 0x561698d539f8 <col:26, col:46> 'int' '&&'
|   |   | |   |-UnaryOperator 0x561698d53990 <col:26, col:27> 'int' prefix '!' cannot overflow
|   |   | |   | `-ImplicitCastExpr 0x561698d53978 <col:27> '_Bool' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x561698d53958 <col:27> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |   | |   `-UnaryOperator 0x561698d539e0 <col:45, col:46> 'int' prefix '!' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x561698d539c8 <col:46> '_Bool' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x561698d539a8 <col:46> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |   | `-BinaryOperator 0x561698d53ad8 <col:64, col:84> 'int' '&&'
|   |   |   |-UnaryOperator 0x561698d53a70 <col:64, col:65> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x561698d53a58 <col:65> '_Bool' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x561698d53a38 <col:65> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |   |   `-UnaryOperator 0x561698d53ac0 <col:83, col:84> 'int' prefix '!' cannot overflow
|   |   |     `-ImplicitCastExpr 0x561698d53aa8 <col:84> '_Bool' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x561698d53a88 <col:84> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d53ce0 <col:101> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d53b18 <col:101> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |   `-ParenExpr 0x561698d53cc0 <col:105, col:162> 'int'
|   |     `-ConditionalOperator 0x561698d53c90 <col:106, col:153> 'int'
|   |       |-BinaryOperator 0x561698d53c00 <col:106, col:124> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x561698d53bb8 <col:106> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x561698d53ba0 <col:106> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x561698d53b60 <col:106> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x561698d53be8 <col:124> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x561698d53bd0 <col:124> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x561698d53b80 <col:124> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d53c60 <col:141> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d53c20 <col:141> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |       `-ImplicitCastExpr 0x561698d53c78 <col:153> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d53c40 <col:153> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x561698d54238 <line:766:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x561698d53d48 <col:3> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   | `-ConditionalOperator 0x561698d54208 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x561698d541d8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x561698d541c0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x561698d53d68 <col:15> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d541f0 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d53d88 <col:31> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x561698d541a0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x561698d54170 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x561698d53f98 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x561698d53eb8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x561698d53de0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x561698d53dc8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x561698d53da8 <col:45> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x561698d53e98 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x561698d53e30 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x561698d53e18 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x561698d53df8 <col:64> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x561698d53e80 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x561698d53e68 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x561698d53e48 <col:83> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x561698d53f78 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x561698d53f10 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x561698d53ef8 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x561698d53ed8 <col:102> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x561698d53f60 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x561698d53f48 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x561698d53f28 <col:121> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d54158 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d53fb8 <col:138> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |       `-ParenExpr 0x561698d54138 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x561698d54108 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x561698d54078 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x561698d54030 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x561698d54018 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x561698d53fd8 <col:151> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x561698d54060 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x561698d54048 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x561698d53ff8 <col:169> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x561698d540d8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x561698d54098 <col:186> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |           `-ImplicitCastExpr 0x561698d540f0 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x561698d540b8 <col:198> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |-BinaryOperator 0x561698d54748 <line:767:3, col:208> 'int' '='
|   | |-DeclRefExpr 0x561698d54258 <col:3> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   | `-ConditionalOperator 0x561698d54718 <col:15, col:208> 'int'
|   |   |-ImplicitCastExpr 0x561698d546e8 <col:15> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x561698d546d0 <col:15> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x561698d54278 <col:15> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d54700 <col:31> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d54298 <col:31> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |   `-ParenExpr 0x561698d546b0 <col:43, col:208> 'int'
|   |     `-ConditionalOperator 0x561698d54680 <col:44, col:207> 'int'
|   |       |-BinaryOperator 0x561698d544a8 <col:44, col:121> 'int' '||'
|   |       | |-BinaryOperator 0x561698d543c8 <col:44, col:83> 'int' '||'
|   |       | | |-UnaryOperator 0x561698d542f0 <col:44, col:45> 'int' prefix '!' cannot overflow
|   |       | | | `-ImplicitCastExpr 0x561698d542d8 <col:45> '_Bool' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x561698d542b8 <col:45> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |       | | `-BinaryOperator 0x561698d543a8 <col:63, col:83> 'int' '&&'
|   |       | |   |-UnaryOperator 0x561698d54340 <col:63, col:64> 'int' prefix '!' cannot overflow
|   |       | |   | `-ImplicitCastExpr 0x561698d54328 <col:64> '_Bool' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x561698d54308 <col:64> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |       | |   `-UnaryOperator 0x561698d54390 <col:82, col:83> 'int' prefix '!' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x561698d54378 <col:83> '_Bool' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x561698d54358 <col:83> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |       | `-BinaryOperator 0x561698d54488 <col:101, col:121> 'int' '&&'
|   |       |   |-UnaryOperator 0x561698d54420 <col:101, col:102> 'int' prefix '!' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x561698d54408 <col:102> '_Bool' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x561698d543e8 <col:102> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |       |   `-UnaryOperator 0x561698d54470 <col:120, col:121> 'int' prefix '!' cannot overflow
|   |       |     `-ImplicitCastExpr 0x561698d54458 <col:121> '_Bool' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x561698d54438 <col:121> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d54668 <col:138> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d544c8 <col:138> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |       `-ParenExpr 0x561698d54648 <col:150, col:207> 'int'
|   |         `-ConditionalOperator 0x561698d54618 <col:151, col:198> 'int'
|   |           |-BinaryOperator 0x561698d54588 <col:151, col:169> 'int' '&&'
|   |           | |-ImplicitCastExpr 0x561698d54540 <col:151> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x561698d54528 <col:151> '_Bool' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x561698d544e8 <col:151> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |           | `-ImplicitCastExpr 0x561698d54570 <col:169> 'int' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x561698d54558 <col:169> '_Bool' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x561698d54508 <col:169> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |           |-ImplicitCastExpr 0x561698d545e8 <col:186> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x561698d545a8 <col:186> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |           `-ImplicitCastExpr 0x561698d54600 <col:198> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x561698d545c8 <col:198> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |-BinaryOperator 0x561698d54d00 <line:768:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x561698d54768 <col:3> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d54ce8 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d54cb8 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x561698d54c70 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d54c58 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d54788 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d54ca0 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d54c88 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d547a8 <col:36> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     `-ParenExpr 0x561698d54c38 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x561698d54c08 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x561698d549b8 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x561698d548d8 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x561698d54800 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x561698d547e8 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x561698d547c8 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x561698d548b8 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x561698d54850 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x561698d54838 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x561698d54818 <col:74> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x561698d548a0 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x561698d54888 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x561698d54868 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x561698d54998 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x561698d54930 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x561698d54918 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x561698d548f8 <col:112> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x561698d54980 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x561698d54968 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x561698d54948 <col:131> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x561698d54bf0 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x561698d54bd8 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x561698d549d8 <col:148> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         `-ParenExpr 0x561698d54bb8 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x561698d54b88 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x561698d54a98 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x561698d54a50 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x561698d54a38 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x561698d549f8 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x561698d54a80 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x561698d54a68 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x561698d54a18 <col:184> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x561698d54b30 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x561698d54ae8 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x561698d54ab8 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x561698d54b70 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x561698d54b48 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x561698d54b10 <col:212> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x561698d552c8 <line:769:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x561698d54d20 <col:3> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d552b0 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d55280 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x561698d55238 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d55220 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d54d40 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d55268 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d55250 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d54d60 <col:36> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |     `-ParenExpr 0x561698d55200 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x561698d551d0 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x561698d54f70 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x561698d54e90 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x561698d54db8 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x561698d54da0 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x561698d54d80 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x561698d54e70 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x561698d54e08 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x561698d54df0 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x561698d54dd0 <col:74> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x561698d54e58 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x561698d54e40 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x561698d54e20 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x561698d54f50 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x561698d54ee8 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x561698d54ed0 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x561698d54eb0 <col:112> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x561698d54f38 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x561698d54f20 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x561698d54f00 <col:131> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x561698d551b8 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x561698d551a0 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x561698d54f90 <col:148> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         `-ParenExpr 0x561698d55180 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x561698d55150 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x561698d55050 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x561698d55008 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x561698d54ff0 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x561698d54fb0 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x561698d55038 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x561698d55020 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x561698d54fd0 <col:184> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x561698d55120 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x561698d550a0 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x561698d55070 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x561698d55138 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x561698d550f8 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x561698d550c8 <col:219> 'int' 0
|   |-BinaryOperator 0x561698d55870 <line:770:3, col:227> '_Bool' '='
|   | |-DeclRefExpr 0x561698d552e8 <col:3> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x561698d55858 <col:20, col:227> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d55828 <col:20, col:227> 'int'
|   |     |-ImplicitCastExpr 0x561698d557e0 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d557c8 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d55308 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d55810 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d557f8 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d55328 <col:36> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |     `-ParenExpr 0x561698d557a8 <col:53, col:227> 'int'
|   |       `-ConditionalOperator 0x561698d55778 <col:54, col:226> 'int'
|   |         |-BinaryOperator 0x561698d55538 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x561698d55458 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x561698d55380 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x561698d55368 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x561698d55348 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x561698d55438 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x561698d553d0 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x561698d553b8 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x561698d55398 <col:74> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x561698d55420 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x561698d55408 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x561698d553e8 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x561698d55518 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x561698d554b0 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x561698d55498 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x561698d55478 <col:112> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x561698d55500 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x561698d554e8 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x561698d554c8 <col:131> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x561698d55760 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x561698d55748 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x561698d55558 <col:148> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         `-ParenExpr 0x561698d55728 <col:165, col:226> 'int'
|   |           `-ConditionalOperator 0x561698d556f8 <col:166, col:212> 'int'
|   |             |-BinaryOperator 0x561698d55618 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x561698d555d0 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x561698d555b8 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x561698d55578 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x561698d55600 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x561698d555e8 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x561698d55598 <col:184> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x561698d556b0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x561698d55668 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x561698d55638 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x561698d556e0 <col:212> 'int' <IntegralCast>
|   |               `-ImplicitCastExpr 0x561698d556c8 <col:212> '_Bool' <LValueToRValue>
|   |                 `-DeclRefExpr 0x561698d55690 <col:212> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x561698d55e58 <line:771:3, col:221> '_Bool' '='
|   | |-DeclRefExpr 0x561698d55890 <col:3> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x561698d55e40 <col:20, col:221> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d55e10 <col:20, col:221> 'int'
|   |     |-ImplicitCastExpr 0x561698d55dc8 <col:20> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d55db0 <col:20> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d558b0 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d55df8 <col:36> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x561698d55de0 <col:36> '_Bool' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x561698d558d0 <col:36> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |     `-ParenExpr 0x561698d55d90 <col:53, col:221> 'int'
|   |       `-ConditionalOperator 0x561698d55d60 <col:54, col:220> 'int'
|   |         |-BinaryOperator 0x561698d55ae0 <col:54, col:131> 'int' '||'
|   |         | |-BinaryOperator 0x561698d55a00 <col:54, col:93> 'int' '||'
|   |         | | |-UnaryOperator 0x561698d55928 <col:54, col:55> 'int' prefix '!' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x561698d55910 <col:55> '_Bool' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x561698d558f0 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |         | | `-BinaryOperator 0x561698d559e0 <col:73, col:93> 'int' '&&'
|   |         | |   |-UnaryOperator 0x561698d55978 <col:73, col:74> 'int' prefix '!' cannot overflow
|   |         | |   | `-ImplicitCastExpr 0x561698d55960 <col:74> '_Bool' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x561698d55940 <col:74> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         | |   `-UnaryOperator 0x561698d559c8 <col:92, col:93> 'int' prefix '!' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x561698d559b0 <col:93> '_Bool' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x561698d55990 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |         | `-BinaryOperator 0x561698d55ac0 <col:111, col:131> 'int' '&&'
|   |         |   |-UnaryOperator 0x561698d55a58 <col:111, col:112> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x561698d55a40 <col:112> '_Bool' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x561698d55a20 <col:112> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |         |   `-UnaryOperator 0x561698d55aa8 <col:130, col:131> 'int' prefix '!' cannot overflow
|   |         |     `-ImplicitCastExpr 0x561698d55a90 <col:131> '_Bool' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x561698d55a70 <col:131> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |         |-ImplicitCastExpr 0x561698d55d48 <col:148> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x561698d55d30 <col:148> '_Bool' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x561698d55b00 <col:148> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |         `-ParenExpr 0x561698d55d10 <col:165, col:220> 'int'
|   |           `-ConditionalOperator 0x561698d55ce0 <col:166, col:219> 'int'
|   |             |-BinaryOperator 0x561698d55be0 <col:166, col:184> 'int' '&&'
|   |             | |-ImplicitCastExpr 0x561698d55b98 <col:166> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x561698d55b80 <col:166> '_Bool' <LValueToRValue>
|   |             | |   `-DeclRefExpr 0x561698d55b20 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |             | `-ImplicitCastExpr 0x561698d55bc8 <col:184> 'int' <IntegralCast>
|   |             |   `-ImplicitCastExpr 0x561698d55bb0 <col:184> '_Bool' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x561698d55b40 <col:184> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |             |-ImplicitCastExpr 0x561698d55cb0 <col:201, col:208> 'int' <IntegralCast>
|   |             | `-CStyleCastExpr 0x561698d55c30 <col:201, col:208> '_Bool' <IntegralToBoolean>
|   |             |   `-IntegerLiteral 0x561698d55c00 <col:208> 'int' 0
|   |             `-ImplicitCastExpr 0x561698d55cc8 <col:212, col:219> 'int' <IntegralCast>
|   |               `-CStyleCastExpr 0x561698d55c88 <col:212, col:219> '_Bool' <IntegralToBoolean>
|   |                 `-IntegerLiteral 0x561698d55c58 <col:219> 'int' 0
|   |-BinaryOperator 0x561698d55ed0 <line:772:3, col:25> 'int' '='
|   | |-DeclRefExpr 0x561698d55e78 <col:3> 'int' lvalue Var 0x561698d4d528 '__unbuffered_p1_EBX' 'int'
|   | `-ImplicitCastExpr 0x561698d55eb8 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561698d55e98 <col:25> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d56000 <line:773:3, col:37> 'int' '='
|   | |-DeclRefExpr 0x561698d55ef0 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   | `-ConditionalOperator 0x561698d55fd0 <col:7, col:37> 'int'
|   |   |-ImplicitCastExpr 0x561698d55f88 <col:7> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x561698d55f70 <col:7> '_Bool' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x561698d55f10 <col:7> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d55fa0 <col:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d55f30 <col:25> 'int' lvalue Var 0x561698d4d850 'x$mem_tmp' 'int'
|   |   `-ImplicitCastExpr 0x561698d55fb8 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x561698d55f50 <col:37> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d56098 <line:774:3, col:28> '_Bool' '='
|   | |-DeclRefExpr 0x561698d56020 <col:3> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
|   | `-CStyleCastExpr 0x561698d56070 <col:21, col:28> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x561698d56040 <col:28> 'int' 0
|   |-CallExpr 0x561698d560f0 <line:775:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d560d8 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d560b8 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d56148 <line:776:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d56130 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d56110 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d56430 <line:777:3, col:103> 'int' '='
|   | |-DeclRefExpr 0x561698d56168 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   | `-ConditionalOperator 0x561698d56400 <col:7, col:103> 'int'
|   |   |-BinaryOperator 0x561698d56228 <col:7, col:25> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x561698d561e0 <col:7> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x561698d561c8 <col:7> '_Bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x561698d56188 <col:7> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |   | `-ImplicitCastExpr 0x561698d56210 <col:25> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x561698d561f8 <col:25> '_Bool' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x561698d561a8 <col:25> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |   |-ImplicitCastExpr 0x561698d563e8 <col:42> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d56248 <col:42> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
|   |   `-ParenExpr 0x561698d563c8 <col:54, col:103> 'int'
|   |     `-ConditionalOperator 0x561698d56398 <col:55, col:102> 'int'
|   |       |-BinaryOperator 0x561698d56308 <col:55, col:73> 'int' '&&'
|   |       | |-ImplicitCastExpr 0x561698d562c0 <col:55> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x561698d562a8 <col:55> '_Bool' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x561698d56268 <col:55> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |       | `-ImplicitCastExpr 0x561698d562f0 <col:73> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x561698d562d8 <col:73> '_Bool' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x561698d56288 <col:73> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |       |-ImplicitCastExpr 0x561698d56368 <col:90> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x561698d56328 <col:90> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
|   |       `-ImplicitCastExpr 0x561698d56380 <col:102> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d56348 <col:102> 'int' lvalue Var 0x561698d4d738 'x' 'int'
|   |-BinaryOperator 0x561698d56638 <line:778:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x561698d56450 <col:3> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d56620 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d565f0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x561698d56510 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x561698d564c8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x561698d564b0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x561698d56470 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x561698d564f8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x561698d564e0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x561698d56490 <col:38> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d565a8 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d56560 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d56530 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d565d8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d565c0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d56588 <col:66> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |-BinaryOperator 0x561698d56920 <line:779:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x561698d56658 <col:3> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   | `-ImplicitCastExpr 0x561698d56908 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d568d8 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x561698d567f8 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x561698d56718 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x561698d566d0 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x561698d566b8 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x561698d56678 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x561698d56700 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x561698d566e8 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x561698d56698 <col:38> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x561698d567d8 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x561698d56790 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x561698d56778 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x561698d56738 <col:56> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x561698d567c0 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x561698d567a8 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x561698d56758 <col:74> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d56890 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d56848 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d56818 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d568c0 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d568a8 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d56870 <col:102> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |-BinaryOperator 0x561698d56b28 <line:780:3, col:66> '_Bool' '='
|   | |-DeclRefExpr 0x561698d56940 <col:3> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x561698d56b10 <col:20, col:66> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d56ae0 <col:20, col:66> 'int'
|   |     |-BinaryOperator 0x561698d56a00 <col:20, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x561698d569b8 <col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x561698d569a0 <col:20> '_Bool' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x561698d56960 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | `-ImplicitCastExpr 0x561698d569e8 <col:38> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x561698d569d0 <col:38> '_Bool' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x561698d56980 <col:38> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d56a98 <col:55, col:62> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d56a50 <col:55, col:62> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d56a20 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d56ac8 <col:66> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d56ab0 <col:66> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d56a78 <col:66> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |-BinaryOperator 0x561698d56e38 <line:781:3, col:102> '_Bool' '='
|   | |-DeclRefExpr 0x561698d56b48 <col:3> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   | `-ImplicitCastExpr 0x561698d56e20 <col:20, col:102> '_Bool' <IntegralToBoolean>
|   |   `-ConditionalOperator 0x561698d56df0 <col:20, col:102> 'int'
|   |     |-BinaryOperator 0x561698d56d10 <col:20, col:74> 'int' '||'
|   |     | |-BinaryOperator 0x561698d56c30 <col:20, col:38> 'int' '&&'
|   |     | | |-ImplicitCastExpr 0x561698d56be8 <col:20> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x561698d56bd0 <col:20> '_Bool' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x561698d56b90 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
|   |     | | `-ImplicitCastExpr 0x561698d56c18 <col:38> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x561698d56c00 <col:38> '_Bool' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x561698d56bb0 <col:38> '_Bool' lvalue Var 0x561698d4d9b8 'x$r_buff0_thd2' '_Bool'
|   |     | `-BinaryOperator 0x561698d56cf0 <col:56, col:74> 'int' '&&'
|   |     |   |-ImplicitCastExpr 0x561698d56ca8 <col:56> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x561698d56c90 <col:56> '_Bool' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x561698d56c50 <col:56> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
|   |     |   `-ImplicitCastExpr 0x561698d56cd8 <col:74> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x561698d56cc0 <col:74> '_Bool' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x561698d56c70 <col:74> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |     |-ImplicitCastExpr 0x561698d56da8 <col:91, col:98> 'int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x561698d56d60 <col:91, col:98> '_Bool' <IntegralToBoolean>
|   |     |   `-IntegerLiteral 0x561698d56d30 <col:98> 'int' 0
|   |     `-ImplicitCastExpr 0x561698d56dd8 <col:102> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x561698d56dc0 <col:102> '_Bool' <LValueToRValue>
|   |         `-DeclRefExpr 0x561698d56d88 <col:102> '_Bool' lvalue Var 0x561698d4db78 'x$r_buff1_thd2' '_Bool'
|   |-CallExpr 0x561698d56e90 <line:782:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d56e78 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d56e58 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   |-CallExpr 0x561698d56ee8 <line:783:3, col:27> 'void'
|   | `-ImplicitCastExpr 0x561698d56ed0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d56eb0 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
|   |-BinaryOperator 0x561698d56fa0 <line:784:3, col:41> 'int' '='
|   | |-DeclRefExpr 0x561698d56f08 <col:3> 'int' lvalue Var 0x561698d4d1c8 '__unbuffered_cnt' 'int'
|   | `-BinaryOperator 0x561698d56f80 <col:22, col:41> 'int' '+'
|   |   |-ImplicitCastExpr 0x561698d56f68 <col:22> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561698d56f28 <col:22> 'int' lvalue Var 0x561698d4d1c8 '__unbuffered_cnt' 'int'
|   |   `-IntegerLiteral 0x561698d56f48 <col:41> 'int' 1
|   |-CallExpr 0x561698d56ff8 <line:785:3, col:25> 'void'
|   | `-ImplicitCastExpr 0x561698d56fe0 <col:3> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561698d56fc0 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
|   `-ReturnStmt 0x561698d57070 <line:786:3, col:36>
|     `-CallExpr 0x561698d57050 <col:10, col:36> 'void *'
|       `-ImplicitCastExpr 0x561698d57038 <col:10> 'void *(*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x561698d57018 <col:10> 'void *(void)' Function 0x561698cf3ab8 '__VERIFIER_nondet_pointer' 'void *(void)'
|-FunctionDecl 0x561698d57210 prev 0x561698d4cf10 <line:788:1, line:790:1> line:788:6 fence 'void ()'
| `-CompoundStmt 0x561698d572b0 <line:789:1, line:790:1>
|-FunctionDecl 0x561698d572e0 prev 0x561698d4cfd0 <line:791:1, line:793:1> line:791:6 isync 'void ()'
| `-CompoundStmt 0x561698d57380 <line:792:1, line:793:1>
|-FunctionDecl 0x561698d573b0 prev 0x561698d4d090 <line:794:1, line:796:1> line:794:6 lwfence 'void ()'
| `-CompoundStmt 0x561698d57450 <line:795:1, line:796:1>
`-FunctionDecl 0x561698d574b8 <line:797:1, line:832:1> line:797:5 main 'int ()'
  `-CompoundStmt 0x561698d5b850 <line:798:1, line:832:1>
    |-DeclStmt 0x561698d575d0 <line:799:3, col:18>
    | `-VarDecl 0x561698d57568 <col:3, col:13> col:13 used t1619 'pthread_t':'unsigned long'
    |-CallExpr 0x561698d577d8 <line:800:3, col:54> 'int'
    | |-ImplicitCastExpr 0x561698d577c0 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x561698d575e8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x561698d345b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x561698d57628 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x561698d57608 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x561698d57568 't1619' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x561698d57818 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x561698d576a0 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x561698d57678 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x561698d57640 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x561698d57830 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x561698d576c0 <col:39> 'void *(void *)' Function 0x561698d4e188 'P0' 'void *(void *)'
    | `-ParenExpr 0x561698d57740 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x561698d57718 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x561698d576e0 <col:52> 'int' 0
    |-DeclStmt 0x561698d578c0 <line:801:3, col:18>
    | `-VarDecl 0x561698d57858 <col:3, col:13> col:13 used t1620 'pthread_t':'unsigned long'
    |-CallExpr 0x561698d57a68 <line:802:3, col:54> 'int'
    | |-ImplicitCastExpr 0x561698d57a50 <col:3> 'int (*)(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x561698d578d8 <col:3> 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)' Function 0x561698d345b8 'pthread_create' 'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)'
    | |-UnaryOperator 0x561698d57918 <col:18, col:19> 'pthread_t *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x561698d578f8 <col:19> 'pthread_t':'unsigned long' lvalue Var 0x561698d57858 't1620' 'pthread_t':'unsigned long'
    | |-ImplicitCastExpr 0x561698d57aa8 <col:26, col:36> 'const pthread_attr_t *' <NullToPointer>
    | | `-ParenExpr 0x561698d57990 <col:26, col:36> 'void *'
    | |   `-CStyleCastExpr 0x561698d57968 <col:27, col:35> 'void *' <NullToPointer>
    | |     `-IntegerLiteral 0x561698d57930 <col:35> 'int' 0
    | |-ImplicitCastExpr 0x561698d57ac0 <col:39> 'void *(*)(void *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x561698d579b0 <col:39> 'void *(void *)' Function 0x561698d52d68 'P1' 'void *(void *)'
    | `-ParenExpr 0x561698d57a30 <col:43, col:53> 'void *'
    |   `-CStyleCastExpr 0x561698d57a08 <col:44, col:52> 'void *' <NullToPointer>
    |     `-IntegerLiteral 0x561698d579d0 <col:52> 'int' 0
    |-CallExpr 0x561698d57b10 <line:803:3, col:27> 'void'
    | `-ImplicitCastExpr 0x561698d57af8 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x561698d57ad8 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x561698d57bf0 <line:804:3, col:41> '_Bool' '='
    | |-DeclRefExpr 0x561698d57b30 <col:3> '_Bool' lvalue Var 0x561698d4d5c0 'main$tmp_guard0' '_Bool'
    | `-ImplicitCastExpr 0x561698d57bd8 <col:21, col:41> '_Bool' <IntegralToBoolean>
    |   `-BinaryOperator 0x561698d57bb8 <col:21, col:41> 'int' '=='
    |     |-ImplicitCastExpr 0x561698d57ba0 <col:21> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x561698d57b50 <col:21> 'int' lvalue Var 0x561698d4d1c8 '__unbuffered_cnt' 'int'
    |     `-IntegerLiteral 0x561698d57b70 <col:41> 'int' 2
    |-CallExpr 0x561698d57c48 <line:805:3, col:25> 'void'
    | `-ImplicitCastExpr 0x561698d57c30 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x561698d57c10 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x561698d57cc0 <line:806:3, col:36> 'void'
    | |-ImplicitCastExpr 0x561698d57ca8 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x561698d57c68 <col:3> 'void (int)' Function 0x561698cf3940 '__VERIFIER_assume' 'void (int)'
    | `-ImplicitCastExpr 0x561698d57d00 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x561698d57ce8 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x561698d57c88 <col:21> '_Bool' lvalue Var 0x561698d4d5c0 'main$tmp_guard0' '_Bool'
    |-CallExpr 0x561698d57d50 <line:807:3, col:27> 'void'
    | `-ImplicitCastExpr 0x561698d57d38 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x561698d57d18 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x561698d58038 <line:808:3, col:103> 'int' '='
    | |-DeclRefExpr 0x561698d57d70 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
    | `-ConditionalOperator 0x561698d58008 <col:7, col:103> 'int'
    |   |-BinaryOperator 0x561698d57e30 <col:7, col:25> 'int' '&&'
    |   | |-ImplicitCastExpr 0x561698d57de8 <col:7> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x561698d57dd0 <col:7> '_Bool' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x561698d57d90 <col:7> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |   | `-ImplicitCastExpr 0x561698d57e18 <col:25> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x561698d57e00 <col:25> '_Bool' <LValueToRValue>
    |   |     `-DeclRefExpr 0x561698d57db0 <col:25> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x561698d57ff0 <col:42> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x561698d57e50 <col:42> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x561698d57fd0 <col:54, col:103> 'int'
    |     `-ConditionalOperator 0x561698d57fa0 <col:55, col:102> 'int'
    |       |-BinaryOperator 0x561698d57f10 <col:55, col:73> 'int' '&&'
    |       | |-ImplicitCastExpr 0x561698d57ec8 <col:55> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x561698d57eb0 <col:55> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x561698d57e70 <col:55> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |       | `-ImplicitCastExpr 0x561698d57ef8 <col:73> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x561698d57ee0 <col:73> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x561698d57e90 <col:73> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x561698d57f70 <col:90> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x561698d57f30 <col:90> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
    |       `-ImplicitCastExpr 0x561698d57f88 <col:102> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x561698d57f50 <col:102> 'int' lvalue Var 0x561698d4d738 'x' 'int'
    |-BinaryOperator 0x561698d58240 <line:809:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x561698d58058 <col:3> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x561698d58228 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x561698d581f8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x561698d58118 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x561698d580d0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x561698d580b8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x561698d58078 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x561698d58100 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x561698d580e8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x561698d58098 <col:38> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x561698d581b0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x561698d58168 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x561698d58138 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x561698d581e0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x561698d581c8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x561698d58190 <col:66> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x561698d58528 <line:810:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x561698d58260 <col:3> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x561698d58510 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x561698d584e0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x561698d58400 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x561698d58320 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x561698d582d8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x561698d582c0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x561698d58280 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x561698d58308 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x561698d582f0 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x561698d582a0 <col:38> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x561698d583e0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x561698d58398 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x561698d58380 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x561698d58340 <col:56> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x561698d583c8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x561698d583b0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x561698d58360 <col:74> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x561698d58498 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x561698d58450 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x561698d58420 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x561698d584c8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x561698d584b0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x561698d58478 <col:102> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |-BinaryOperator 0x561698d58730 <line:811:3, col:66> '_Bool' '='
    | |-DeclRefExpr 0x561698d58548 <col:3> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x561698d58718 <col:20, col:66> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x561698d586e8 <col:20, col:66> 'int'
    |     |-BinaryOperator 0x561698d58608 <col:20, col:38> 'int' '&&'
    |     | |-ImplicitCastExpr 0x561698d585c0 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x561698d585a8 <col:20> '_Bool' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x561698d58568 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |     | `-ImplicitCastExpr 0x561698d585f0 <col:38> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x561698d585d8 <col:38> '_Bool' <LValueToRValue>
    |     |     `-DeclRefExpr 0x561698d58588 <col:38> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x561698d586a0 <col:55, col:62> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x561698d58658 <col:55, col:62> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x561698d58628 <col:62> 'int' 0
    |     `-ImplicitCastExpr 0x561698d586d0 <col:66> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x561698d586b8 <col:66> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x561698d58680 <col:66> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x561698d58a18 <line:812:3, col:102> '_Bool' '='
    | |-DeclRefExpr 0x561698d58750 <col:3> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x561698d58a00 <col:20, col:102> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x561698d589d0 <col:20, col:102> 'int'
    |     |-BinaryOperator 0x561698d588f0 <col:20, col:74> 'int' '||'
    |     | |-BinaryOperator 0x561698d58810 <col:20, col:38> 'int' '&&'
    |     | | |-ImplicitCastExpr 0x561698d587c8 <col:20> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x561698d587b0 <col:20> '_Bool' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x561698d58770 <col:20> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |     | | `-ImplicitCastExpr 0x561698d587f8 <col:38> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x561698d587e0 <col:38> '_Bool' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x561698d58790 <col:38> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |     | `-BinaryOperator 0x561698d588d0 <col:56, col:74> 'int' '&&'
    |     |   |-ImplicitCastExpr 0x561698d58888 <col:56> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x561698d58870 <col:56> '_Bool' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x561698d58830 <col:56> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |     |   `-ImplicitCastExpr 0x561698d588b8 <col:74> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x561698d588a0 <col:74> '_Bool' <LValueToRValue>
    |     |       `-DeclRefExpr 0x561698d58850 <col:74> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |     |-ImplicitCastExpr 0x561698d58988 <col:91, col:98> 'int' <IntegralCast>
    |     | `-CStyleCastExpr 0x561698d58940 <col:91, col:98> '_Bool' <IntegralToBoolean>
    |     |   `-IntegerLiteral 0x561698d58910 <col:98> 'int' 0
    |     `-ImplicitCastExpr 0x561698d589b8 <col:102> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x561698d589a0 <col:102> '_Bool' <LValueToRValue>
    |         `-DeclRefExpr 0x561698d58968 <col:102> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |-CallExpr 0x561698d58a70 <line:813:3, col:25> 'void'
    | `-ImplicitCastExpr 0x561698d58a58 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x561698d58a38 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x561698d58ac8 <line:814:3, col:27> 'void'
    | `-ImplicitCastExpr 0x561698d58ab0 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x561698d58a90 <col:3> 'void ()' Function 0x561698cf3fa0 '__VERIFIER_atomic_begin' 'void ()'
    |-BinaryOperator 0x561698d58b60 <line:815:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x561698d58ae8 <col:3> '_Bool' lvalue Var 0x561698d4dff8 'weak$$choice0' '_Bool'
    | `-CallExpr 0x561698d58b40 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x561698d58b28 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x561698d58b08 <col:19> '_Bool (void)' Function 0x561698cf3770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x561698d58c08 <line:816:3, col:42> '_Bool' '='
    | |-DeclRefExpr 0x561698d58b80 <col:3> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
    | `-CallExpr 0x561698d58be8 <col:19, col:42> '_Bool'
    |   `-ImplicitCastExpr 0x561698d58bd0 <col:19> '_Bool (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x561698d58bb0 <col:19> '_Bool (void)' Function 0x561698cf3770 '__VERIFIER_nondet_bool' '_Bool (void)'
    |-BinaryOperator 0x561698d58c80 <line:817:3, col:21> '_Bool' '='
    | |-DeclRefExpr 0x561698d58c28 <col:3> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
    | `-ImplicitCastExpr 0x561698d58c68 <col:21> '_Bool' <LValueToRValue>
    |   `-DeclRefExpr 0x561698d58c48 <col:21> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
    |-BinaryOperator 0x561698d58cf8 <line:818:3, col:15> 'int' '='
    | |-DeclRefExpr 0x561698d58ca0 <col:3> 'int' lvalue Var 0x561698d4d850 'x$mem_tmp' 'int'
    | `-ImplicitCastExpr 0x561698d58ce0 <col:15> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x561698d58cc0 <col:15> 'int' lvalue Var 0x561698d4d738 'x' 'int'
    |-BinaryOperator 0x561698d59130 <line:819:3, col:162> 'int' '='
    | |-DeclRefExpr 0x561698d58d18 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
    | `-ConditionalOperator 0x561698d59100 <col:7, col:162> 'int'
    |   |-BinaryOperator 0x561698d58f28 <col:7, col:84> 'int' '||'
    |   | |-BinaryOperator 0x561698d58e48 <col:7, col:46> 'int' '||'
    |   | | |-UnaryOperator 0x561698d58d70 <col:7, col:8> 'int' prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x561698d58d58 <col:8> '_Bool' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x561698d58d38 <col:8> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |   | | `-BinaryOperator 0x561698d58e28 <col:26, col:46> 'int' '&&'
    |   | |   |-UnaryOperator 0x561698d58dc0 <col:26, col:27> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x561698d58da8 <col:27> '_Bool' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x561698d58d88 <col:27> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |   | |   `-UnaryOperator 0x561698d58e10 <col:45, col:46> 'int' prefix '!' cannot overflow
    |   | |     `-ImplicitCastExpr 0x561698d58df8 <col:46> '_Bool' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x561698d58dd8 <col:46> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |   | `-BinaryOperator 0x561698d58f08 <col:64, col:84> 'int' '&&'
    |   |   |-UnaryOperator 0x561698d58ea0 <col:64, col:65> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x561698d58e88 <col:65> '_Bool' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x561698d58e68 <col:65> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |   |   `-UnaryOperator 0x561698d58ef0 <col:83, col:84> 'int' prefix '!' cannot overflow
    |   |     `-ImplicitCastExpr 0x561698d58ed8 <col:84> '_Bool' <LValueToRValue>
    |   |       `-DeclRefExpr 0x561698d58eb8 <col:84> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |   |-ImplicitCastExpr 0x561698d590e8 <col:101> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x561698d58f48 <col:101> 'int' lvalue Var 0x561698d4d738 'x' 'int'
    |   `-ParenExpr 0x561698d590c8 <col:105, col:162> 'int'
    |     `-ConditionalOperator 0x561698d59098 <col:106, col:153> 'int'
    |       |-BinaryOperator 0x561698d59008 <col:106, col:124> 'int' '&&'
    |       | |-ImplicitCastExpr 0x561698d58fc0 <col:106> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x561698d58fa8 <col:106> '_Bool' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x561698d58f68 <col:106> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |       | `-ImplicitCastExpr 0x561698d58ff0 <col:124> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x561698d58fd8 <col:124> '_Bool' <LValueToRValue>
    |       |     `-DeclRefExpr 0x561698d58f88 <col:124> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x561698d59068 <col:141> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x561698d59028 <col:141> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
    |       `-ImplicitCastExpr 0x561698d59080 <col:153> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x561698d59048 <col:153> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
    |-BinaryOperator 0x561698d59640 <line:820:3, col:208> 'int' '='
    | |-DeclRefExpr 0x561698d59150 <col:3> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
    | `-ConditionalOperator 0x561698d59610 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x561698d595e0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x561698d595c8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x561698d59170 <col:15> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x561698d595f8 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x561698d59190 <col:31> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
    |   `-ParenExpr 0x561698d595a8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x561698d59578 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x561698d593a0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x561698d592c0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x561698d591e8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x561698d591d0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x561698d591b0 <col:45> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x561698d592a0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x561698d59238 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x561698d59220 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x561698d59200 <col:64> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x561698d59288 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x561698d59270 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x561698d59250 <col:83> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x561698d59380 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x561698d59318 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x561698d59300 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x561698d592e0 <col:102> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x561698d59368 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x561698d59350 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x561698d59330 <col:121> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x561698d59560 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x561698d593c0 <col:138> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
    |       `-ParenExpr 0x561698d59540 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x561698d59510 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x561698d59480 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x561698d59438 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x561698d59420 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x561698d593e0 <col:151> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x561698d59468 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x561698d59450 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x561698d59400 <col:169> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x561698d594e0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x561698d594a0 <col:186> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
    |           `-ImplicitCastExpr 0x561698d594f8 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x561698d594c0 <col:198> 'int' lvalue Var 0x561698d4dcf0 'x$w_buff0' 'int'
    |-BinaryOperator 0x561698d59b50 <line:821:3, col:208> 'int' '='
    | |-DeclRefExpr 0x561698d59660 <col:3> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
    | `-ConditionalOperator 0x561698d59b20 <col:15, col:208> 'int'
    |   |-ImplicitCastExpr 0x561698d59af0 <col:15> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x561698d59ad8 <col:15> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x561698d59680 <col:15> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
    |   |-ImplicitCastExpr 0x561698d59b08 <col:31> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x561698d596a0 <col:31> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
    |   `-ParenExpr 0x561698d59ab8 <col:43, col:208> 'int'
    |     `-ConditionalOperator 0x561698d59a88 <col:44, col:207> 'int'
    |       |-BinaryOperator 0x561698d598b0 <col:44, col:121> 'int' '||'
    |       | |-BinaryOperator 0x561698d597d0 <col:44, col:83> 'int' '||'
    |       | | |-UnaryOperator 0x561698d596f8 <col:44, col:45> 'int' prefix '!' cannot overflow
    |       | | | `-ImplicitCastExpr 0x561698d596e0 <col:45> '_Bool' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x561698d596c0 <col:45> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |       | | `-BinaryOperator 0x561698d597b0 <col:63, col:83> 'int' '&&'
    |       | |   |-UnaryOperator 0x561698d59748 <col:63, col:64> 'int' prefix '!' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x561698d59730 <col:64> '_Bool' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x561698d59710 <col:64> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |       | |   `-UnaryOperator 0x561698d59798 <col:82, col:83> 'int' prefix '!' cannot overflow
    |       | |     `-ImplicitCastExpr 0x561698d59780 <col:83> '_Bool' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x561698d59760 <col:83> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |       | `-BinaryOperator 0x561698d59890 <col:101, col:121> 'int' '&&'
    |       |   |-UnaryOperator 0x561698d59828 <col:101, col:102> 'int' prefix '!' cannot overflow
    |       |   | `-ImplicitCastExpr 0x561698d59810 <col:102> '_Bool' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x561698d597f0 <col:102> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |       |   `-UnaryOperator 0x561698d59878 <col:120, col:121> 'int' prefix '!' cannot overflow
    |       |     `-ImplicitCastExpr 0x561698d59860 <col:121> '_Bool' <LValueToRValue>
    |       |       `-DeclRefExpr 0x561698d59840 <col:121> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |       |-ImplicitCastExpr 0x561698d59a70 <col:138> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x561698d598d0 <col:138> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
    |       `-ParenExpr 0x561698d59a50 <col:150, col:207> 'int'
    |         `-ConditionalOperator 0x561698d59a20 <col:151, col:198> 'int'
    |           |-BinaryOperator 0x561698d59990 <col:151, col:169> 'int' '&&'
    |           | |-ImplicitCastExpr 0x561698d59948 <col:151> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x561698d59930 <col:151> '_Bool' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x561698d598f0 <col:151> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |           | `-ImplicitCastExpr 0x561698d59978 <col:169> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x561698d59960 <col:169> '_Bool' <LValueToRValue>
    |           |     `-DeclRefExpr 0x561698d59910 <col:169> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |           |-ImplicitCastExpr 0x561698d599f0 <col:186> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x561698d599b0 <col:186> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
    |           `-ImplicitCastExpr 0x561698d59a08 <col:198> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x561698d599d0 <col:198> 'int' lvalue Var 0x561698d4dde8 'x$w_buff1' 'int'
    |-BinaryOperator 0x561698d5a108 <line:822:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x561698d59b70 <col:3> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    | `-ImplicitCastExpr 0x561698d5a0f0 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x561698d5a0c0 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x561698d5a078 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x561698d5a060 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x561698d59b90 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x561698d5a0a8 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x561698d5a090 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x561698d59bc0 <col:36> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |     `-ParenExpr 0x561698d5a040 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x561698d5a010 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x561698d59dd0 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x561698d59cf0 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x561698d59c18 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x561698d59c00 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x561698d59be0 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x561698d59cd0 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x561698d59c68 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x561698d59c50 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x561698d59c30 <col:74> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x561698d59cb8 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x561698d59ca0 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x561698d59c80 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x561698d59db0 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x561698d59d48 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x561698d59d30 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x561698d59d10 <col:112> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x561698d59d98 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x561698d59d80 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x561698d59d60 <col:131> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x561698d59ff8 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x561698d59fe0 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x561698d59df0 <col:148> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |         `-ParenExpr 0x561698d59fc0 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x561698d59f90 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x561698d59eb0 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x561698d59e68 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x561698d59e50 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x561698d59e10 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x561698d59e98 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x561698d59e80 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x561698d59e30 <col:184> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x561698d59f48 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x561698d59f00 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x561698d59ed0 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x561698d59f78 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x561698d59f60 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x561698d59f28 <col:212> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |-BinaryOperator 0x561698d5a6d0 <line:823:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x561698d5a128 <col:3> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    | `-ImplicitCastExpr 0x561698d5a6b8 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x561698d5a688 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x561698d5a640 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x561698d5a628 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x561698d5a148 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x561698d5a670 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x561698d5a658 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x561698d5a168 <col:36> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |     `-ParenExpr 0x561698d5a608 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x561698d5a5d8 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x561698d5a378 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x561698d5a298 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x561698d5a1c0 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x561698d5a1a8 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x561698d5a188 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x561698d5a278 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x561698d5a210 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x561698d5a1f8 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x561698d5a1d8 <col:74> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x561698d5a260 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x561698d5a248 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x561698d5a228 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x561698d5a358 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x561698d5a2f0 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x561698d5a2d8 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x561698d5a2b8 <col:112> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x561698d5a340 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x561698d5a328 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x561698d5a308 <col:131> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x561698d5a5c0 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x561698d5a5a8 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x561698d5a398 <col:148> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |         `-ParenExpr 0x561698d5a588 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x561698d5a558 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x561698d5a458 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x561698d5a410 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x561698d5a3f8 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x561698d5a3b8 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x561698d5a440 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x561698d5a428 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x561698d5a3d8 <col:184> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x561698d5a528 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x561698d5a4a8 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x561698d5a478 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x561698d5a540 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x561698d5a500 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x561698d5a4d0 <col:219> 'int' 0
    |-BinaryOperator 0x561698d5ac98 <line:824:3, col:227> '_Bool' '='
    | |-DeclRefExpr 0x561698d5a6f0 <col:3> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    | `-ImplicitCastExpr 0x561698d5ac80 <col:20, col:227> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x561698d5ac50 <col:20, col:227> 'int'
    |     |-ImplicitCastExpr 0x561698d5ac08 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x561698d5abf0 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x561698d5a710 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x561698d5ac38 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x561698d5ac20 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x561698d5a730 <col:36> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |     `-ParenExpr 0x561698d5abd0 <col:53, col:227> 'int'
    |       `-ConditionalOperator 0x561698d5ab80 <col:54, col:226> 'int'
    |         |-BinaryOperator 0x561698d5a940 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x561698d5a860 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x561698d5a788 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x561698d5a770 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x561698d5a750 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x561698d5a840 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x561698d5a7d8 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x561698d5a7c0 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x561698d5a7a0 <col:74> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x561698d5a828 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x561698d5a810 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x561698d5a7f0 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x561698d5a920 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x561698d5a8b8 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x561698d5a8a0 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x561698d5a880 <col:112> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x561698d5a908 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x561698d5a8f0 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x561698d5a8d0 <col:131> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x561698d5ab68 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x561698d5ab50 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x561698d5a960 <col:148> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         `-ParenExpr 0x561698d5ab30 <col:165, col:226> 'int'
    |           `-ConditionalOperator 0x561698d5ab00 <col:166, col:212> 'int'
    |             |-BinaryOperator 0x561698d5aa20 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x561698d5a9d8 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x561698d5a9c0 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x561698d5a980 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x561698d5aa08 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x561698d5a9f0 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x561698d5a9a0 <col:184> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x561698d5aab8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x561698d5aa70 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x561698d5aa40 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x561698d5aae8 <col:212> 'int' <IntegralCast>
    |               `-ImplicitCastExpr 0x561698d5aad0 <col:212> '_Bool' <LValueToRValue>
    |                 `-DeclRefExpr 0x561698d5aa98 <col:212> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |-BinaryOperator 0x561698d5b260 <line:825:3, col:221> '_Bool' '='
    | |-DeclRefExpr 0x561698d5acb8 <col:3> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    | `-ImplicitCastExpr 0x561698d5b248 <col:20, col:221> '_Bool' <IntegralToBoolean>
    |   `-ConditionalOperator 0x561698d5b218 <col:20, col:221> 'int'
    |     |-ImplicitCastExpr 0x561698d5b1d0 <col:20> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x561698d5b1b8 <col:20> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x561698d5acd8 <col:20> '_Bool' lvalue Var 0x561698d4e070 'weak$$choice2' '_Bool'
    |     |-ImplicitCastExpr 0x561698d5b200 <col:36> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x561698d5b1e8 <col:36> '_Bool' <LValueToRValue>
    |     |   `-DeclRefExpr 0x561698d5acf8 <col:36> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |     `-ParenExpr 0x561698d5b198 <col:53, col:221> 'int'
    |       `-ConditionalOperator 0x561698d5b168 <col:54, col:220> 'int'
    |         |-BinaryOperator 0x561698d5af08 <col:54, col:131> 'int' '||'
    |         | |-BinaryOperator 0x561698d5ae28 <col:54, col:93> 'int' '||'
    |         | | |-UnaryOperator 0x561698d5ad50 <col:54, col:55> 'int' prefix '!' cannot overflow
    |         | | | `-ImplicitCastExpr 0x561698d5ad38 <col:55> '_Bool' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x561698d5ad18 <col:55> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |         | | `-BinaryOperator 0x561698d5ae08 <col:73, col:93> 'int' '&&'
    |         | |   |-UnaryOperator 0x561698d5ada0 <col:73, col:74> 'int' prefix '!' cannot overflow
    |         | |   | `-ImplicitCastExpr 0x561698d5ad88 <col:74> '_Bool' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x561698d5ad68 <col:74> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         | |   `-UnaryOperator 0x561698d5adf0 <col:92, col:93> 'int' prefix '!' cannot overflow
    |         | |     `-ImplicitCastExpr 0x561698d5add8 <col:93> '_Bool' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x561698d5adb8 <col:93> '_Bool' lvalue Var 0x561698d4de60 'x$w_buff1_used' '_Bool'
    |         | `-BinaryOperator 0x561698d5aee8 <col:111, col:131> 'int' '&&'
    |         |   |-UnaryOperator 0x561698d5ae80 <col:111, col:112> 'int' prefix '!' cannot overflow
    |         |   | `-ImplicitCastExpr 0x561698d5ae68 <col:112> '_Bool' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x561698d5ae48 <col:112> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |         |   `-UnaryOperator 0x561698d5aed0 <col:130, col:131> 'int' prefix '!' cannot overflow
    |         |     `-ImplicitCastExpr 0x561698d5aeb8 <col:131> '_Bool' <LValueToRValue>
    |         |       `-DeclRefExpr 0x561698d5ae98 <col:131> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |         |-ImplicitCastExpr 0x561698d5b150 <col:148> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x561698d5b138 <col:148> '_Bool' <LValueToRValue>
    |         |   `-DeclRefExpr 0x561698d5af28 <col:148> '_Bool' lvalue Var 0x561698d4da30 'x$r_buff1_thd0' '_Bool'
    |         `-ParenExpr 0x561698d5b118 <col:165, col:220> 'int'
    |           `-ConditionalOperator 0x561698d5b0e8 <col:166, col:219> 'int'
    |             |-BinaryOperator 0x561698d5afe8 <col:166, col:184> 'int' '&&'
    |             | |-ImplicitCastExpr 0x561698d5afa0 <col:166> 'int' <IntegralCast>
    |             | | `-ImplicitCastExpr 0x561698d5af88 <col:166> '_Bool' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x561698d5af48 <col:166> '_Bool' lvalue Var 0x561698d4dd68 'x$w_buff0_used' '_Bool'
    |             | `-ImplicitCastExpr 0x561698d5afd0 <col:184> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x561698d5afb8 <col:184> '_Bool' <LValueToRValue>
    |             |     `-DeclRefExpr 0x561698d5af68 <col:184> '_Bool' lvalue Var 0x561698d4d8c8 'x$r_buff0_thd0' '_Bool'
    |             |-ImplicitCastExpr 0x561698d5b0b8 <col:201, col:208> 'int' <IntegralCast>
    |             | `-CStyleCastExpr 0x561698d5b038 <col:201, col:208> '_Bool' <IntegralToBoolean>
    |             |   `-IntegerLiteral 0x561698d5b008 <col:208> 'int' 0
    |             `-ImplicitCastExpr 0x561698d5b0d0 <col:212, col:219> 'int' <IntegralCast>
    |               `-CStyleCastExpr 0x561698d5b090 <col:212, col:219> '_Bool' <IntegralToBoolean>
    |                 `-IntegerLiteral 0x561698d5b060 <col:219> 'int' 0
    |-BinaryOperator 0x561698d5b530 <line:826:3, col:113> '_Bool' '='
    | |-DeclRefExpr 0x561698d5b280 <col:3> '_Bool' lvalue Var 0x561698d4d638 'main$tmp_guard1' '_Bool'
    | `-ImplicitCastExpr 0x561698d5b518 <col:21, col:113> '_Bool' <IntegralToBoolean>
    |   `-UnaryOperator 0x561698d5b500 <col:21, col:113> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x561698d5b4e0 <col:22, col:113> 'int'
    |       `-BinaryOperator 0x561698d5b4c0 <col:23, col:112> 'int' '&&'
    |         |-BinaryOperator 0x561698d5b428 <col:23, col:84> 'int' '&&'
    |         | |-BinaryOperator 0x561698d5b390 <col:23, col:56> 'int' '&&'
    |         | | |-BinaryOperator 0x561698d5b2f8 <col:23, col:28> 'int' '=='
    |         | | | |-ImplicitCastExpr 0x561698d5b2e0 <col:23> 'int' <LValueToRValue>
    |         | | | | `-DeclRefExpr 0x561698d5b2a0 <col:23> 'int' lvalue Var 0x561698d4d738 'x' 'int'
    |         | | | `-IntegerLiteral 0x561698d5b2c0 <col:28> 'int' 2
    |         | | `-BinaryOperator 0x561698d5b370 <col:33, col:56> 'int' '=='
    |         | |   |-ImplicitCastExpr 0x561698d5b358 <col:33> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x561698d5b318 <col:33> 'int' lvalue Var 0x561698d4d2e8 '__unbuffered_p0_EAX' 'int'
    |         | |   `-IntegerLiteral 0x561698d5b338 <col:56> 'int' 1
    |         | `-BinaryOperator 0x561698d5b408 <col:61, col:84> 'int' '=='
    |         |   |-ImplicitCastExpr 0x561698d5b3f0 <col:61> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x561698d5b3b0 <col:61> 'int' lvalue Var 0x561698d4d408 '__unbuffered_p1_EAX' 'int'
    |         |   `-IntegerLiteral 0x561698d5b3d0 <col:84> 'int' 1
    |         `-BinaryOperator 0x561698d5b4a0 <col:89, col:112> 'int' '=='
    |           |-ImplicitCastExpr 0x561698d5b488 <col:89> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x561698d5b448 <col:89> 'int' lvalue Var 0x561698d4d528 '__unbuffered_p1_EBX' 'int'
    |           `-IntegerLiteral 0x561698d5b468 <col:112> 'int' 0
    |-BinaryOperator 0x561698d5b660 <line:827:3, col:37> 'int' '='
    | |-DeclRefExpr 0x561698d5b550 <col:3> 'int' lvalue Var 0x561698d4d738 'x' 'int'
    | `-ConditionalOperator 0x561698d5b630 <col:7, col:37> 'int'
    |   |-ImplicitCastExpr 0x561698d5b5e8 <col:7> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x561698d5b5d0 <col:7> '_Bool' <LValueToRValue>
    |   |   `-DeclRefExpr 0x561698d5b570 <col:7> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
    |   |-ImplicitCastExpr 0x561698d5b600 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x561698d5b590 <col:25> 'int' lvalue Var 0x561698d4d850 'x$mem_tmp' 'int'
    |   `-ImplicitCastExpr 0x561698d5b618 <col:37> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x561698d5b5b0 <col:37> 'int' lvalue Var 0x561698d4d738 'x' 'int'
    |-BinaryOperator 0x561698d5b6f8 <line:828:3, col:28> '_Bool' '='
    | |-DeclRefExpr 0x561698d5b680 <col:3> '_Bool' lvalue Var 0x561698d4d7d0 'x$flush_delayed' '_Bool'
    | `-CStyleCastExpr 0x561698d5b6d0 <col:21, col:28> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x561698d5b6a0 <col:28> 'int' 0
    |-CallExpr 0x561698d5b750 <line:829:3, col:25> 'void'
    | `-ImplicitCastExpr 0x561698d5b738 <col:3> 'void (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x561698d5b718 <col:3> 'void ()' Function 0x561698cf4060 '__VERIFIER_atomic_end' 'void ()'
    |-CallExpr 0x561698d5b7c8 <line:830:3, col:36> 'void'
    | |-ImplicitCastExpr 0x561698d5b7b0 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x561698d5b770 <col:3> 'void (int)' Function 0x561698cf3d28 '__VERIFIER_assert' 'void (int)'
    | `-ImplicitCastExpr 0x561698d5b808 <col:21> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x561698d5b7f0 <col:21> '_Bool' <LValueToRValue>
    |     `-DeclRefExpr 0x561698d5b790 <col:21> '_Bool' lvalue Var 0x561698d4d638 'main$tmp_guard1' '_Bool'
    `-ReturnStmt 0x561698d5b840 <line:831:3, col:10>
      `-IntegerLiteral 0x561698d5b820 <col:10> 'int' 0
