TranslationUnitDecl 0x55bfc12fe388 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55bfc12fec48 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55bfc12fe920 '__int128'
|-TypedefDecl 0x55bfc12fecb8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55bfc12fe940 'unsigned __int128'
|-TypedefDecl 0x55bfc12fefc0 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55bfc12fed90 'struct __NSConstantString_tag'
|   `-Record 0x55bfc12fed10 '__NSConstantString_tag'
|-TypedefDecl 0x55bfc12ff068 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55bfc12ff020 'char *'
|   `-BuiltinType 0x55bfc12fe420 'char'
|-TypedefDecl 0x55bfc133d8a0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55bfc12ff300 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55bfc12ff140 'struct __va_list_tag'
|     `-Record 0x55bfc12ff0c0 '__va_list_tag'
|-FunctionDecl 0x55bfc133d980 <./split_2/standard_maxInArray_true-unreach-call_ground.i:1:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x55bfc133db50 <line:2:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x55bfc133da80 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x55bfc133dd90 <col:34, col:79>
|   `-IfStmt 0x55bfc133dd78 <col:36, col:77>
|     |-UnaryOperator 0x55bfc133dc50 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x55bfc133dc38 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x55bfc133dc18 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x55bfc133dbf8 <col:41> 'int' lvalue ParmVar 0x55bfc133da80 'cond' 'int'
|     `-CompoundStmt 0x55bfc133dd60 <col:48, col:77>
|       `-LabelStmt 0x55bfc133dd48 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x55bfc133dcd8 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x55bfc133dcc0 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x55bfc133dc68 <col:57> 'void () __attribute__((noreturn))' Function 0x55bfc133d980 '__VERIFIER_error' 'void () __attribute__((noreturn))'
`-FunctionDecl 0x55bfc133de08 <line:3:1, line:18:1> line:3:5 main 'int ()'
  `-CompoundStmt 0x55bfc1362c40 <col:13, line:18:1>
    |-DeclStmt 0x55bfc133dfb0 <line:4:3, col:16>
    | `-VarDecl 0x55bfc133df48 <col:3, col:15> col:7 used a 'int [100000]'
    |-DeclStmt 0x55bfc133e068 <line:5:3, col:14>
    | `-VarDecl 0x55bfc133dfe0 <col:3, col:13> col:7 used max 'int' cinit
    |   `-IntegerLiteral 0x55bfc133e048 <col:13> 'int' 0
    |-DeclStmt 0x55bfc133e120 <line:6:3, col:12>
    | `-VarDecl 0x55bfc133e098 <col:3, col:11> col:7 used i 'int' cinit
    |   `-IntegerLiteral 0x55bfc133e100 <col:11> 'int' 0
    |-WhileStmt 0x55bfc133e4d0 <line:7:3, line:12:3>
    | |-BinaryOperator 0x55bfc133e190 <line:7:11, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x55bfc133e178 <col:11> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55bfc133e138 <col:11> 'int' lvalue Var 0x55bfc133e098 'i' 'int'
    | | `-IntegerLiteral 0x55bfc133e158 <col:15> 'int' 100000
    | `-CompoundStmt 0x55bfc133e4b0 <col:24, line:12:3>
    |   |-IfStmt 0x55bfc133e3e0 <line:8:5, line:10:5>
    |   | |-BinaryOperator 0x55bfc133e2c0 <line:8:10, col:17> 'int' '>'
    |   | | |-ImplicitCastExpr 0x55bfc133e290 <col:10, col:13> 'int' <LValueToRValue>
    |   | | | `-ArraySubscriptExpr 0x55bfc133e250 <col:10, col:13> 'int' lvalue
    |   | | |   |-ImplicitCastExpr 0x55bfc133e220 <col:10> 'int *' <ArrayToPointerDecay>
    |   | | |   | `-DeclRefExpr 0x55bfc133e1b0 <col:10> 'int [100000]' lvalue Var 0x55bfc133df48 'a' 'int [100000]'
    |   | | |   `-ImplicitCastExpr 0x55bfc133e238 <col:12> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x55bfc133e1d0 <col:12> 'int' lvalue Var 0x55bfc133e098 'i' 'int'
    |   | | `-ImplicitCastExpr 0x55bfc133e2a8 <col:17> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x55bfc133e270 <col:17> 'int' lvalue Var 0x55bfc133dfe0 'max' 'int'
    |   | `-CompoundStmt 0x55bfc133e3c8 <col:23, line:10:5>
    |   |   `-BinaryOperator 0x55bfc133e3a8 <line:9:7, col:16> 'int' '='
    |   |     |-DeclRefExpr 0x55bfc133e2e0 <col:7> 'int' lvalue Var 0x55bfc133dfe0 'max' 'int'
    |   |     `-ImplicitCastExpr 0x55bfc133e390 <col:13, col:16> 'int' <LValueToRValue>
    |   |       `-ArraySubscriptExpr 0x55bfc133e370 <col:13, col:16> 'int' lvalue
    |   |         |-ImplicitCastExpr 0x55bfc133e340 <col:13> 'int *' <ArrayToPointerDecay>
    |   |         | `-DeclRefExpr 0x55bfc133e300 <col:13> 'int [100000]' lvalue Var 0x55bfc133df48 'a' 'int [100000]'
    |   |         `-ImplicitCastExpr 0x55bfc133e358 <col:15> 'int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x55bfc133e320 <col:15> 'int' lvalue Var 0x55bfc133e098 'i' 'int'
    |   `-BinaryOperator 0x55bfc133e490 <line:11:5, col:13> 'int' '='
    |     |-DeclRefExpr 0x55bfc133e3f8 <col:5> 'int' lvalue Var 0x55bfc133e098 'i' 'int'
    |     `-BinaryOperator 0x55bfc133e470 <col:9, col:13> 'int' '+'
    |       |-ImplicitCastExpr 0x55bfc133e458 <col:9> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x55bfc133e418 <col:9> 'int' lvalue Var 0x55bfc133e098 'i' 'int'
    |       `-IntegerLiteral 0x55bfc133e438 <col:13> 'int' 1
    |-DeclStmt 0x55bfc133e570 <line:13:3, col:8>
    | `-VarDecl 0x55bfc133e508 <col:3, col:7> col:7 used x 'int'
    |-ForStmt 0x55bfc133e848 <line:14:3, line:16:3>
    | |-BinaryOperator 0x55bfc133e5c8 <line:14:9, col:13> 'int' '='
    | | |-DeclRefExpr 0x55bfc133e588 <col:9> 'int' lvalue Var 0x55bfc133e508 'x' 'int'
    | | `-IntegerLiteral 0x55bfc133e5a8 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55bfc133e640 <col:17, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x55bfc133e628 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55bfc133e5e8 <col:17> 'int' lvalue Var 0x55bfc133e508 'x' 'int'
    | | `-IntegerLiteral 0x55bfc133e608 <col:21> 'int' 100000
    | |-UnaryOperator 0x55bfc133e680 <col:30, col:31> 'int' postfix '++'
    | | `-DeclRefExpr 0x55bfc133e660 <col:30> 'int' lvalue Var 0x55bfc133e508 'x' 'int'
    | `-CompoundStmt 0x55bfc133e830 <col:36, line:16:3>
    |   `-CallExpr 0x55bfc133e808 <line:15:5, col:36> 'void'
    |     |-ImplicitCastExpr 0x55bfc133e7f0 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x55bfc133e698 <col:5> 'void (int)' Function 0x55bfc133db50 '__VERIFIER_assert' 'void (int)'
    |     `-BinaryOperator 0x55bfc133e798 <col:24, col:32> 'int' '<='
    |       |-ImplicitCastExpr 0x55bfc133e768 <col:24, col:27> 'int' <LValueToRValue>
    |       | `-ArraySubscriptExpr 0x55bfc133e728 <col:24, col:27> 'int' lvalue
    |       |   |-ImplicitCastExpr 0x55bfc133e6f8 <col:24> 'int *' <ArrayToPointerDecay>
    |       |   | `-DeclRefExpr 0x55bfc133e6b8 <col:24> 'int [100000]' lvalue Var 0x55bfc133df48 'a' 'int [100000]'
    |       |   `-ImplicitCastExpr 0x55bfc133e710 <col:26> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55bfc133e6d8 <col:26> 'int' lvalue Var 0x55bfc133e508 'x' 'int'
    |       `-ImplicitCastExpr 0x55bfc133e780 <col:32> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x55bfc133e748 <col:32> 'int' lvalue Var 0x55bfc133dfe0 'max' 'int'
    `-ReturnStmt 0x55bfc1362c30 <line:17:3, col:10>
      `-IntegerLiteral 0x55bfc133e880 <col:10> 'int' 0
