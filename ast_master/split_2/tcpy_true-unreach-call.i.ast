TranslationUnitDecl 0x56174bedddf8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x56174bede6b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x56174bede390 '__int128'
|-TypedefDecl 0x56174bede728 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x56174bede3b0 'unsigned __int128'
|-TypedefDecl 0x56174bedea30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x56174bede800 'struct __NSConstantString_tag'
|   `-Record 0x56174bede780 '__NSConstantString_tag'
|-TypedefDecl 0x56174bedead8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x56174bedea90 'char *'
|   `-BuiltinType 0x56174bedde90 'char'
|-TypedefDecl 0x56174bf1d930 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x56174beded70 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x56174bedebb0 'struct __va_list_tag'
|     `-Record 0x56174bedeb30 '__va_list_tag'
|-FunctionDecl 0x56174bf1da10 <./split_2/tcpy_true-unreach-call.i:3:1, col:61> col:13 used __VERIFIER_error 'void () __attribute__((noreturn))' extern
|-FunctionDecl 0x56174bf1dbe0 <line:4:1, col:34> col:13 used __VERIFIER_assume 'void (int)' extern
| `-ParmVarDecl 0x56174bf1db10 <col:31> col:34 'int'
|-FunctionDecl 0x56174bf1dd30 <line:5:1, col:79> col:6 used __VERIFIER_assert 'void (int)'
| |-ParmVarDecl 0x56174bf1dca0 <col:24, col:28> col:28 used cond 'int'
| `-CompoundStmt 0x56174bf1df70 <col:34, col:79>
|   `-IfStmt 0x56174bf1df58 <col:36, col:77>
|     |-UnaryOperator 0x56174bf1de30 <col:39, col:45> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x56174bf1de18 <col:40, col:45> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x56174bf1ddf8 <col:40, col:45> 'int' lvalue
|     |     `-DeclRefExpr 0x56174bf1ddd8 <col:41> 'int' lvalue ParmVar 0x56174bf1dca0 'cond' 'int'
|     `-CompoundStmt 0x56174bf1df40 <col:48, col:77>
|       `-LabelStmt 0x56174bf1df28 <col:50, col:74> 'ERROR'
|         `-CallExpr 0x56174bf1deb8 <col:57, col:74> 'void'
|           `-ImplicitCastExpr 0x56174bf1dea0 <col:57> 'void (*)() __attribute__((noreturn))' <FunctionToPointerDecay>
|             `-DeclRefExpr 0x56174bf1de48 <col:57> 'void () __attribute__((noreturn))' Function 0x56174bf1da10 '__VERIFIER_error' 'void () __attribute__((noreturn))'
|-FunctionDecl 0x56174bf1e058 <line:6:1, col:38> col:12 used __VERIFIER_nondet_int 'int (void)' extern
|-VarDecl 0x56174bf1e110 <line:8:1, col:5> col:5 used SIZE 'int'
`-FunctionDecl 0x56174bf1e1d8 <line:10:1, line:35:1> line:10:5 main 'int ()'
  `-CompoundStmt 0x56174bf43690 <line:11:1, line:35:1>
    |-BinaryOperator 0x56174bf1e328 <line:12:2, col:31> 'int' '='
    | |-DeclRefExpr 0x56174bf1e278 <col:2> 'int' lvalue Var 0x56174bf1e110 'SIZE' 'int'
    | `-CallExpr 0x56174bf1e308 <col:9, col:31> 'int'
    |   `-ImplicitCastExpr 0x56174bf1e2f0 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x56174bf1e298 <col:9> 'int (void)' Function 0x56174bf1e058 '__VERIFIER_nondet_int' 'int (void)'
    |-IfStmt 0x56174bf43648 <line:13:2, line:33:2>
    | |-BinaryOperator 0x56174bf1e3a0 <line:13:5, col:12> 'int' '>'
    | | |-ImplicitCastExpr 0x56174bf1e388 <col:5> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x56174bf1e348 <col:5> 'int' lvalue Var 0x56174bf1e110 'SIZE' 'int'
    | | `-IntegerLiteral 0x56174bf1e368 <col:12> 'int' 1
    | `-CompoundStmt 0x56174bf43600 <line:14:2, line:33:2>
    |   |-DeclStmt 0x56174bf1e440 <line:15:3, col:8>
    |   | `-VarDecl 0x56174bf1e3d8 <col:3, col:7> col:7 used i 'int'
    |   |-DeclStmt 0x56174bf1e580 <line:16:3, col:14>
    |   | `-VarDecl 0x56174bf1e518 <col:3, col:13> col:7 used a 'int [SIZE]'
    |   |-DeclStmt 0x56174bf1e6c0 <line:17:3, col:18>
    |   | `-VarDecl 0x56174bf1e658 <col:3, col:17> col:7 used acopy 'int [SIZE]'
    |   |-IfStmt 0x56174bf1e7d8 <line:19:3, col:33>
    |   | |-BinaryOperator 0x56174bf1e770 <col:6, col:18> 'int' '!='
    |   | | |-BinaryOperator 0x56174bf1e730 <col:6, col:13> 'int' '%'
    |   | | | |-ImplicitCastExpr 0x56174bf1e718 <col:6> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x56174bf1e6d8 <col:6> 'int' lvalue Var 0x56174bf1e110 'SIZE' 'int'
    |   | | | `-IntegerLiteral 0x56174bf1e6f8 <col:13> 'int' 2
    |   | | `-IntegerLiteral 0x56174bf1e750 <col:18> 'int' 0
    |   | `-CompoundStmt 0x56174bf1e7c0 <col:21, col:33>
    |   |   `-ReturnStmt 0x56174bf1e7b0 <col:23, col:30>
    |   |     `-IntegerLiteral 0x56174bf1e790 <col:30> 'int' 1
    |   |-CallExpr 0x56174bf42cc0 <line:21:3, col:34> 'void'
    |   | |-ImplicitCastExpr 0x56174bf1e900 <col:3> 'void (*)(int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x56174bf1e7f0 <col:3> 'void (int)' Function 0x56174bf1dbe0 '__VERIFIER_assume' 'void (int)'
    |   | `-BinaryOperator 0x56174bf1e8a8 <col:21, col:33> 'int' '=='
    |   |   |-BinaryOperator 0x56174bf1e868 <col:21, col:28> 'int' '%'
    |   |   | |-ImplicitCastExpr 0x56174bf1e850 <col:21> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x56174bf1e810 <col:21> 'int' lvalue Var 0x56174bf1e110 'SIZE' 'int'
    |   |   | `-IntegerLiteral 0x56174bf1e830 <col:28> 'int' 2
    |   |   `-IntegerLiteral 0x56174bf1e888 <col:33> 'int' 0
    |   |-ForStmt 0x56174bf43280 <line:22:3, line:26:3>
    |   | |-BinaryOperator 0x56174bf42d28 <line:22:7, col:9> 'int' '='
    |   | | |-DeclRefExpr 0x56174bf42ce8 <col:7> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |   | | `-IntegerLiteral 0x56174bf42d08 <col:9> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x56174bf42df8 <col:12, col:19> 'int' '<'
    |   | | |-ImplicitCastExpr 0x56174bf42de0 <col:12> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x56174bf42d48 <col:12> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |   | | `-BinaryOperator 0x56174bf42dc0 <col:14, col:19> 'int' '/'
    |   | |   |-ImplicitCastExpr 0x56174bf42da8 <col:14> 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x56174bf42d68 <col:14> 'int' lvalue Var 0x56174bf1e110 'SIZE' 'int'
    |   | |   `-IntegerLiteral 0x56174bf42d88 <col:19> 'int' 2
    |   | |-UnaryOperator 0x56174bf42e38 <col:22, col:23> 'int' postfix '++'
    |   | | `-DeclRefExpr 0x56174bf42e18 <col:22> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |   | `-CompoundStmt 0x56174bf43260 <line:23:3, line:26:3>
    |   |   |-BinaryOperator 0x56174bf430e8 <line:24:4, col:32> 'int' '='
    |   |   | |-ArraySubscriptExpr 0x56174bf42f88 <col:4, col:18> 'int' lvalue
    |   |   | | |-ImplicitCastExpr 0x56174bf42f70 <col:4> 'int *' <ArrayToPointerDecay>
    |   |   | | | `-DeclRefExpr 0x56174bf42e50 <col:4> 'int [SIZE]' lvalue Var 0x56174bf1e658 'acopy' 'int [SIZE]'
    |   |   | | `-BinaryOperator 0x56174bf42f20 <col:10, col:17> 'int' '-'
    |   |   | |   |-BinaryOperator 0x56174bf42ee0 <col:10, col:15> 'int' '-'
    |   |   | |   | |-ImplicitCastExpr 0x56174bf42eb0 <col:10> 'int' <LValueToRValue>
    |   |   | |   | | `-DeclRefExpr 0x56174bf42e70 <col:10> 'int' lvalue Var 0x56174bf1e110 'SIZE' 'int'
    |   |   | |   | `-ImplicitCastExpr 0x56174bf42ec8 <col:15> 'int' <LValueToRValue>
    |   |   | |   |   `-DeclRefExpr 0x56174bf42e90 <col:15> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |   |   | |   `-IntegerLiteral 0x56174bf42f00 <col:17> 'int' 1
    |   |   | `-ImplicitCastExpr 0x56174bf430d0 <col:22, col:32> 'int' <LValueToRValue>
    |   |   |   `-ArraySubscriptExpr 0x56174bf430b0 <col:22, col:32> 'int' lvalue
    |   |   |     |-ImplicitCastExpr 0x56174bf43098 <col:22> 'int *' <ArrayToPointerDecay>
    |   |   |     | `-DeclRefExpr 0x56174bf42fa8 <col:22> 'int [SIZE]' lvalue Var 0x56174bf1e518 'a' 'int [SIZE]'
    |   |   |     `-BinaryOperator 0x56174bf43078 <col:24, col:31> 'int' '-'
    |   |   |       |-BinaryOperator 0x56174bf43038 <col:24, col:29> 'int' '-'
    |   |   |       | |-ImplicitCastExpr 0x56174bf43008 <col:24> 'int' <LValueToRValue>
    |   |   |       | | `-DeclRefExpr 0x56174bf42fc8 <col:24> 'int' lvalue Var 0x56174bf1e110 'SIZE' 'int'
    |   |   |       | `-ImplicitCastExpr 0x56174bf43020 <col:29> 'int' <LValueToRValue>
    |   |   |       |   `-DeclRefExpr 0x56174bf42fe8 <col:29> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |   |   |       `-IntegerLiteral 0x56174bf43058 <col:31> 'int' 1
    |   |   `-BinaryOperator 0x56174bf43240 <line:25:4, col:18> 'int' '='
    |   |     |-ArraySubscriptExpr 0x56174bf43178 <col:4, col:11> 'int' lvalue
    |   |     | |-ImplicitCastExpr 0x56174bf43148 <col:4> 'int *' <ArrayToPointerDecay>
    |   |     | | `-DeclRefExpr 0x56174bf43108 <col:4> 'int [SIZE]' lvalue Var 0x56174bf1e658 'acopy' 'int [SIZE]'
    |   |     | `-ImplicitCastExpr 0x56174bf43160 <col:10> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x56174bf43128 <col:10> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |   |     `-ImplicitCastExpr 0x56174bf43228 <col:15, col:18> 'int' <LValueToRValue>
    |   |       `-ArraySubscriptExpr 0x56174bf43208 <col:15, col:18> 'int' lvalue
    |   |         |-ImplicitCastExpr 0x56174bf431d8 <col:15> 'int *' <ArrayToPointerDecay>
    |   |         | `-DeclRefExpr 0x56174bf43198 <col:15> 'int [SIZE]' lvalue Var 0x56174bf1e518 'a' 'int [SIZE]'
    |   |         `-ImplicitCastExpr 0x56174bf431f0 <col:17> 'int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x56174bf431b8 <col:17> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |   `-ForStmt 0x56174bf435c8 <line:29:3, line:32:3>
    |     |-BinaryOperator 0x56174bf432f8 <line:29:7, col:9> 'int' '='
    |     | |-DeclRefExpr 0x56174bf432b8 <col:7> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |     | `-IntegerLiteral 0x56174bf432d8 <col:9> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x56174bf43388 <col:12, col:14> 'int' '<'
    |     | |-ImplicitCastExpr 0x56174bf43358 <col:12> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x56174bf43318 <col:12> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |     | `-ImplicitCastExpr 0x56174bf43370 <col:14> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x56174bf43338 <col:14> 'int' lvalue Var 0x56174bf1e110 'SIZE' 'int'
    |     |-UnaryOperator 0x56174bf433c8 <col:20, col:21> 'int' postfix '++'
    |     | `-DeclRefExpr 0x56174bf433a8 <col:20> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |     `-CompoundStmt 0x56174bf435b0 <line:30:3, line:32:3>
    |       `-CallExpr 0x56174bf43588 <line:31:4, col:38> 'void'
    |         |-ImplicitCastExpr 0x56174bf43570 <col:4> 'void (*)(int)' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x56174bf433e0 <col:4> 'void (int)' Function 0x56174bf1dd30 '__VERIFIER_assert' 'void (int)'
    |         `-BinaryOperator 0x56174bf43550 <col:22, col:37> 'int' '=='
    |           |-ImplicitCastExpr 0x56174bf43520 <col:22, col:29> 'int' <LValueToRValue>
    |           | `-ArraySubscriptExpr 0x56174bf43470 <col:22, col:29> 'int' lvalue
    |           |   |-ImplicitCastExpr 0x56174bf43440 <col:22> 'int *' <ArrayToPointerDecay>
    |           |   | `-DeclRefExpr 0x56174bf43400 <col:22> 'int [SIZE]' lvalue Var 0x56174bf1e658 'acopy' 'int [SIZE]'
    |           |   `-ImplicitCastExpr 0x56174bf43458 <col:28> 'int' <LValueToRValue>
    |           |     `-DeclRefExpr 0x56174bf43420 <col:28> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    |           `-ImplicitCastExpr 0x56174bf43538 <col:34, col:37> 'int' <LValueToRValue>
    |             `-ArraySubscriptExpr 0x56174bf43500 <col:34, col:37> 'int' lvalue
    |               |-ImplicitCastExpr 0x56174bf434d0 <col:34> 'int *' <ArrayToPointerDecay>
    |               | `-DeclRefExpr 0x56174bf43490 <col:34> 'int [SIZE]' lvalue Var 0x56174bf1e518 'a' 'int [SIZE]'
    |               `-ImplicitCastExpr 0x56174bf434e8 <col:36> 'int' <LValueToRValue>
    |                 `-DeclRefExpr 0x56174bf434b0 <col:36> 'int' lvalue Var 0x56174bf1e3d8 'i' 'int'
    `-ReturnStmt 0x56174bf43680 <line:34:2, col:9>
      `-IntegerLiteral 0x56174bf43660 <col:9> 'int' 1
